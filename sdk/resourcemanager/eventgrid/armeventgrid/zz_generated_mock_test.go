//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestDomains_Get(t *testing.T) {
	// From example Domains_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"exampledomain2",
		&DomainsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Domain.ID == nil {
		t.Fatal("Domain.ID should not be nil!")
	}
}

func TestDomains_CreateOrUpdate(t *testing.T) {
	// From example Domains_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampledomain1",
		Domain{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus2"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &DomainProperties{
				InboundIPRules: []*InboundIPRule{
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.30.15"),
					},
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.176.1"),
					}},
				PublicNetworkAccess: PublicNetworkAccessEnabled.ToPtr(),
			},
		},
		&DomainsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Domain.ID == nil {
		t.Fatal("Domain.ID should not be nil!")
	}
}

func TestDomains_Delete(t *testing.T) {
	// From example Domains_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampledomain1",
		&DomainsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDomains_Update(t *testing.T) {
	// From example Domains_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampledomain1",
		DomainUpdateParameters{
			Properties: &DomainUpdateParameterProperties{
				InboundIPRules: []*InboundIPRule{
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.30.15"),
					},
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.176.1"),
					}},
				PublicNetworkAccess: PublicNetworkAccessEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&DomainsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Domain.ID == nil {
		t.Fatal("Domain.ID should not be nil!")
	}
}

func TestDomains_ListBySubscription(t *testing.T) {
	// From example Domains_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySubscription(&DomainsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Domain.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Domain.ID should not be nil!")
			}
		}
	}
}

func TestDomains_ListByResourceGroup(t *testing.T) {
	// From example Domains_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResourceGroup("examplerg",
		&DomainsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Domain.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Domain.ID should not be nil!")
			}
		}
	}
}

func TestDomains_ListSharedAccessKeys(t *testing.T) {
	// From example Domains_ListSharedAccessKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.ListSharedAccessKeys(ctx,
		"examplerg",
		"exampledomain2",
		&DomainsListSharedAccessKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDomains_RegenerateKey(t *testing.T) {
	// From example Domains_RegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.RegenerateKey(ctx,
		"examplerg",
		"exampledomain2",
		DomainRegenerateKeyRequest{
			KeyName: to.StringPtr("key1"),
		},
		&DomainsRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDomainTopics_Get(t *testing.T) {
	// From example DomainTopics_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"exampledomain2",
		"topic1",
		&DomainTopicsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DomainTopic.ID == nil {
		t.Fatal("DomainTopic.ID should not be nil!")
	}
}

func TestDomainTopics_CreateOrUpdate(t *testing.T) {
	// From example DomainTopics_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampledomain1",
		"exampledomaintopic1",
		&DomainTopicsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DomainTopic.ID == nil {
		t.Fatal("DomainTopic.ID should not be nil!")
	}
}

func TestDomainTopics_Delete(t *testing.T) {
	// From example DomainTopics_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampledomain1",
		"exampledomaintopic1",
		&DomainTopicsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDomainTopics_ListByDomain(t *testing.T) {
	// From example DomainTopics_ListByDomain
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByDomain("examplerg",
		"exampledomain2",
		&DomainTopicsListByDomainOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DomainTopic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DomainTopic.ID should not be nil!")
			}
		}
	}
}

func TestEventChannels_Get(t *testing.T) {
	// From example EventChannels_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventChannelsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		"exampleEventChannelName1",
		&EventChannelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventChannel.ID == nil {
		t.Fatal("EventChannel.ID should not be nil!")
	}
}

func TestEventChannels_CreateOrUpdate(t *testing.T) {
	// From example EventChannels_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventChannelsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdate(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		"exampleEventChannelName1",
		EventChannel{
			Properties: &EventChannelProperties{
				Destination: &EventChannelDestination{
					AzureSubscriptionID: to.StringPtr("5b4b650e-28b9-4790-b3ab-ddbd88d727c4"),
					PartnerTopicName:    to.StringPtr("examplePartnerTopic1"),
					ResourceGroup:       to.StringPtr("examplerg2"),
				},
				Source: &EventChannelSource{
					Source: to.StringPtr("ContosoCorp.Accounts.User1"),
				},
			},
		},
		&EventChannelsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventChannel.ID == nil {
		t.Fatal("EventChannel.ID should not be nil!")
	}
}

func TestEventChannels_Delete(t *testing.T) {
	// From example EventChannels_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventChannelsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		"exampleEventChannelName",
		&EventChannelsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventChannels_ListByPartnerNamespace(t *testing.T) {
	// From example EventChannels_ListByPartnerNamespace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventChannelsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByPartnerNamespace("examplerg",
		"partnerNamespace123",
		&EventChannelsListByPartnerNamespaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventChannel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventChannel.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_Get(t *testing.T) {
	// From example EventSubscriptions_GetForCustomTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		nil)
	res, err := client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2",
		"examplesubscription1",
		&EventSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_GetForResource
	res, err = client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription1",
		&EventSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_GetForResourceGroup
	res, err = client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		&EventSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_GetForSubscription
	res, err = client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		&EventSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestEventSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				DeadLetterDestination: &StorageBlobDeadLetterDestination{
					DeadLetterDestination: DeadLetterDestination{
						EndpointType: DeadLetterEndPointTypeStorageBlob.ToPtr(),
					},
					Properties: &StorageBlobDeadLetterDestinationProperties{
						BlobContainerName: to.StringPtr("contosocontainer"),
						ResourceID:        to.StringPtr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Destination: &EventHubEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeEventHub.ToPtr(),
					},
					Properties: &EventHubEventSubscriptionDestinationProperties{
						ResourceID: to.StringPtr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				DeadLetterDestination: &StorageBlobDeadLetterDestination{
					DeadLetterDestination: DeadLetterDestination{
						EndpointType: DeadLetterEndPointTypeStorageBlob.ToPtr(),
					},
					Properties: &StorageBlobDeadLetterDestinationProperties{
						BlobContainerName: to.StringPtr("contosocontainer"),
						ResourceID:        to.StringPtr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Destination: &HybridConnectionEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeHybridConnection.ToPtr(),
					},
					Properties: &HybridConnectionEventSubscriptionDestinationProperties{
						ResourceID: to.StringPtr("/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Relay/namespaces/ContosoNamespace/hybridConnections/HC1"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				DeadLetterDestination: &StorageBlobDeadLetterDestination{
					DeadLetterDestination: DeadLetterDestination{
						EndpointType: DeadLetterEndPointTypeStorageBlob.ToPtr(),
					},
					Properties: &StorageBlobDeadLetterDestinationProperties{
						BlobContainerName: to.StringPtr("contosocontainer"),
						ResourceID:        to.StringPtr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Destination: &StorageQueueEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeStorageQueue.ToPtr(),
					},
					Properties: &StorageQueueEventSubscriptionDestinationProperties{
						QueueMessageTimeToLiveInSeconds: to.Int64Ptr(300),
						QueueName:                       to.StringPtr("queue1"),
						ResourceID:                      to.StringPtr("/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				Destination: &EventHubEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeEventHub.ToPtr(),
					},
					Properties: &EventHubEventSubscriptionDestinationProperties{
						ResourceID: to.StringPtr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_CreateOrUpdateForResource
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription10",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				Destination: &WebHookEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeWebHook.ToPtr(),
					},
					Properties: &WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_CreateOrUpdateForResourceGroup
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				Destination: &WebHookEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeWebHook.ToPtr(),
					},
					Properties: &WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_CreateOrUpdateForSubscription
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				Destination: &WebHookEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeWebHook.ToPtr(),
					},
					Properties: &WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
				},
			},
		},
		&EventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestEventSubscriptions_Delete(t *testing.T) {
	// From example EventSubscriptions_DeleteForCustomTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		nil)
	poller, err := client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		&EventSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example EventSubscriptions_DeleteForResource
	poller, err = client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription10",
		&EventSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example EventSubscriptions_DeleteForResourceGroup
	poller, err = client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		&EventSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example EventSubscriptions_DeleteForSubscription
	poller, err = client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		&EventSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventSubscriptions_Update(t *testing.T) {
	// From example EventSubscriptions_UpdateForCustomTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		nil)
	poller, err := client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2",
		"examplesubscription1",
		EventSubscriptionUpdateParameters{
			Destination: &WebHookEventSubscriptionDestination{
				EventSubscriptionDestination: EventSubscriptionDestination{
					EndpointType: EndpointTypeWebHook.ToPtr(),
				},
				Properties: &WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.BoolPtr(true),
				SubjectBeginsWith:      to.StringPtr("existingPrefix"),
				SubjectEndsWith:        to.StringPtr("newSuffix"),
			},
			Labels: []*string{
				to.StringPtr("label1"),
				to.StringPtr("label2")},
		},
		&EventSubscriptionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_UpdateForResource
	poller, err = client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription1",
		EventSubscriptionUpdateParameters{
			Destination: &WebHookEventSubscriptionDestination{
				EventSubscriptionDestination: EventSubscriptionDestination{
					EndpointType: EndpointTypeWebHook.ToPtr(),
				},
				Properties: &WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.BoolPtr(true),
				SubjectBeginsWith:      to.StringPtr("existingPrefix"),
				SubjectEndsWith:        to.StringPtr("newSuffix"),
			},
			Labels: []*string{
				to.StringPtr("label1"),
				to.StringPtr("label2")},
		},
		&EventSubscriptionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_UpdateForResourceGroup
	poller, err = client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		EventSubscriptionUpdateParameters{
			Destination: &EventHubEventSubscriptionDestination{
				EventSubscriptionDestination: EventSubscriptionDestination{
					EndpointType: EndpointTypeEventHub.ToPtr(),
				},
				Properties: &EventHubEventSubscriptionDestinationProperties{
					ResourceID: to.StringPtr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
				},
			},
			Filter: &EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.BoolPtr(true),
				SubjectBeginsWith:      to.StringPtr("existingPrefix"),
				SubjectEndsWith:        to.StringPtr("newSuffix"),
			},
			Labels: []*string{
				to.StringPtr("label1"),
				to.StringPtr("label2")},
		},
		&EventSubscriptionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}

	// From example EventSubscriptions_UpdateForSubscription
	poller, err = client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		EventSubscriptionUpdateParameters{
			Destination: &WebHookEventSubscriptionDestination{
				EventSubscriptionDestination: EventSubscriptionDestination{
					EndpointType: EndpointTypeWebHook.ToPtr(),
				},
				Properties: &WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.BoolPtr(true),
				SubjectBeginsWith:      to.StringPtr("existingPrefix"),
				SubjectEndsWith:        to.StringPtr("newSuffix"),
			},
			Labels: []*string{
				to.StringPtr("label1"),
				to.StringPtr("label2")},
		},
		&EventSubscriptionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestEventSubscriptions_GetFullUrl(t *testing.T) {
	// From example EventSubscriptions_GetFullUrlForCustomTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		nil)
	_, err := client.GetFullURL(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2",
		"examplesubscription1",
		&EventSubscriptionsGetFullURLOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example EventSubscriptions_GetFullUrlForResource
	_, err = client.GetFullURL(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription1",
		&EventSubscriptionsGetFullURLOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example EventSubscriptions_GetFullUrlForResourceGroup
	_, err = client.GetFullURL(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		&EventSubscriptionsGetFullURLOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example EventSubscriptions_GetFullUrlForSubscription
	_, err = client.GetFullURL(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		&EventSubscriptionsGetFullURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventSubscriptions_ListGlobalBySubscription(t *testing.T) {
	// From example EventSubscriptions_ListGlobalBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListGlobalBySubscription(&EventSubscriptionsListGlobalBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListGlobalBySubscriptionForTopicType(t *testing.T) {
	// From example EventSubscriptions_ListGlobalBySubscriptionForTopicType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListGlobalBySubscriptionForTopicType("Microsoft.Resources.Subscriptions",
		&EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListGlobalByResourceGroup(t *testing.T) {
	// From example EventSubscriptions_ListGlobalByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListGlobalByResourceGroup("examplerg",
		&EventSubscriptionsListGlobalByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListGlobalByResourceGroupForTopicType(t *testing.T) {
	// From example EventSubscriptions_ListGlobalByResourceGroupForTopicType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListGlobalByResourceGroupForTopicType("examplerg",
		"Microsoft.Resources.ResourceGroups",
		&EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListRegionalBySubscription(t *testing.T) {
	// From example EventSubscriptions_ListRegionalBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListRegionalBySubscription("westus2",
		&EventSubscriptionsListRegionalBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListRegionalByResourceGroup(t *testing.T) {
	// From example EventSubscriptions_ListRegionalByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListRegionalByResourceGroup("examplerg",
		"westus2",
		&EventSubscriptionsListRegionalByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListRegionalBySubscriptionForTopicType(t *testing.T) {
	// From example EventSubscriptions_ListRegionalBySubscriptionForTopicType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListRegionalBySubscriptionForTopicType("westus2",
		"Microsoft.EventHub.namespaces",
		&EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListRegionalByResourceGroupForTopicType(t *testing.T) {
	// From example EventSubscriptions_ListRegionalByResourceGroupForTopicType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListRegionalByResourceGroupForTopicType("examplerg",
		"westus2",
		"Microsoft.EventHub.namespaces",
		&EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListByResource(t *testing.T) {
	// From example EventSubscriptions_ListByResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResource("examplerg",
		"Microsoft.EventGrid",
		"topics",
		"exampletopic2",
		&EventSubscriptionsListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_ListByDomainTopic(t *testing.T) {
	// From example EventSubscriptions_ListByDomainTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByDomainTopic("examplerg",
		"domain1",
		"topic1",
		&EventSubscriptionsListByDomainTopicOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestEventSubscriptions_GetDeliveryAttributes(t *testing.T) {
	// From example EventSubscriptions_GetDeliveryAttributes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSubscriptionsClient(con,
		nil)
	_, err := client.GetDeliveryAttributes(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2",
		"examplesubscription1",
		&EventSubscriptionsGetDeliveryAttributesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSystemTopicEventSubscriptions_Get(t *testing.T) {
	// From example SystemTopicEventSubscriptions_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		&SystemTopicEventSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestSystemTopicEventSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example SystemTopicEventSubscriptions_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"exampleEventSubscriptionName1",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				Destination: &WebHookEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeWebHook.ToPtr(),
					},
					Properties: &WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&SystemTopicEventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestSystemTopicEventSubscriptions_Delete(t *testing.T) {
	// From example SystemTopicEventSubscriptions_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		&SystemTopicEventSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSystemTopicEventSubscriptions_Update(t *testing.T) {
	// From example SystemTopicEventSubscriptions_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"exampleEventSubscriptionName1",
		EventSubscriptionUpdateParameters{
			Destination: &WebHookEventSubscriptionDestination{
				EventSubscriptionDestination: EventSubscriptionDestination{
					EndpointType: EndpointTypeWebHook.ToPtr(),
				},
				Properties: &WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.BoolPtr(true),
				SubjectBeginsWith:      to.StringPtr("existingPrefix"),
				SubjectEndsWith:        to.StringPtr("newSuffix"),
			},
			Labels: []*string{
				to.StringPtr("label1"),
				to.StringPtr("label2")},
		},
		&SystemTopicEventSubscriptionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestSystemTopicEventSubscriptions_GetFullUrl(t *testing.T) {
	// From example SystemTopicEventSubscriptions_GetFullUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.GetFullURL(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		&SystemTopicEventSubscriptionsGetFullURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSystemTopicEventSubscriptions_ListBySystemTopic(t *testing.T) {
	// From example SystemTopicEventSubscriptions_ListBySystemTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySystemTopic("examplerg",
		"exampleSystemTopic1",
		&SystemTopicEventSubscriptionsListBySystemTopicOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestSystemTopicEventSubscriptions_GetDeliveryAttributes(t *testing.T) {
	// From example SystemTopicEventSubscriptions_GetDeliveryAttributes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.GetDeliveryAttributes(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		&SystemTopicEventSubscriptionsGetDeliveryAttributesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerTopicEventSubscriptions_Get(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"examplePartnerTopic1",
		"examplesubscription1",
		&PartnerTopicEventSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestPartnerTopicEventSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"examplePartnerTopic1",
		"exampleEventSubscriptionName1",
		EventSubscription{
			Properties: &EventSubscriptionProperties{
				Destination: &WebHookEventSubscriptionDestination{
					EventSubscriptionDestination: EventSubscriptionDestination{
						EndpointType: EndpointTypeWebHook.ToPtr(),
					},
					Properties: &WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.BoolPtr(false),
					SubjectBeginsWith:      to.StringPtr("ExamplePrefix"),
					SubjectEndsWith:        to.StringPtr("ExampleSuffix"),
				},
			},
		},
		&PartnerTopicEventSubscriptionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestPartnerTopicEventSubscriptions_Delete(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"examplePartnerTopic1",
		"examplesubscription1",
		&PartnerTopicEventSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerTopicEventSubscriptions_Update(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"examplePartnerTopic1",
		"exampleEventSubscriptionName1",
		EventSubscriptionUpdateParameters{
			Destination: &WebHookEventSubscriptionDestination{
				EventSubscriptionDestination: EventSubscriptionDestination{
					EndpointType: EndpointTypeWebHook.ToPtr(),
				},
				Properties: &WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.StringPtr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.BoolPtr(true),
				SubjectBeginsWith:      to.StringPtr("existingPrefix"),
				SubjectEndsWith:        to.StringPtr("newSuffix"),
			},
			Labels: []*string{
				to.StringPtr("label1"),
				to.StringPtr("label2")},
		},
		&PartnerTopicEventSubscriptionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSubscription.ID == nil {
		t.Fatal("EventSubscription.ID should not be nil!")
	}
}

func TestPartnerTopicEventSubscriptions_GetFullUrl(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_GetFullUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.GetFullURL(ctx,
		"examplerg",
		"examplePartnerTopic1",
		"examplesubscription1",
		&PartnerTopicEventSubscriptionsGetFullURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerTopicEventSubscriptions_ListByPartnerTopic(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_ListByPartnerTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByPartnerTopic("examplerg",
		"examplePartnerTopic1",
		&PartnerTopicEventSubscriptionsListByPartnerTopicOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSubscription.ID should not be nil!")
			}
		}
	}
}

func TestPartnerTopicEventSubscriptions_GetDeliveryAttributes(t *testing.T) {
	// From example PartnerTopicEventSubscriptions_GetDeliveryAttributes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicEventSubscriptionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.GetDeliveryAttributes(ctx,
		"examplerg",
		"examplePartnerTopic1",
		"examplesubscription1",
		&PartnerTopicEventSubscriptionsGetDeliveryAttributesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerNamespaces_Get(t *testing.T) {
	// From example PartnerNamespaces_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		&PartnerNamespacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerNamespace.ID == nil {
		t.Fatal("PartnerNamespace.ID should not be nil!")
	}
}

func TestPartnerNamespaces_CreateOrUpdate(t *testing.T) {
	// From example PartnerNamespaces_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		PartnerNamespace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &PartnerNamespaceProperties{
				PartnerRegistrationFullyQualifiedID: to.StringPtr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/partnerRegistrations/ContosoCorpAccount1"),
			},
		},
		&PartnerNamespacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerNamespace.ID == nil {
		t.Fatal("PartnerNamespace.ID should not be nil!")
	}
}

func TestPartnerNamespaces_Delete(t *testing.T) {
	// From example PartnerNamespaces_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		&PartnerNamespacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerNamespaces_Update(t *testing.T) {
	// From example PartnerNamespaces_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		PartnerNamespaceUpdateParameters{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
			},
		},
		&PartnerNamespacesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerNamespace.ID == nil {
		t.Fatal("PartnerNamespace.ID should not be nil!")
	}
}

func TestPartnerNamespaces_ListBySubscription(t *testing.T) {
	// From example PartnerNamespaces_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySubscription(&PartnerNamespacesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PartnerNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PartnerNamespace.ID should not be nil!")
			}
		}
	}
}

func TestPartnerNamespaces_ListByResourceGroup(t *testing.T) {
	// From example PartnerNamespaces_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResourceGroup("examplerg",
		&PartnerNamespacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PartnerNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PartnerNamespace.ID should not be nil!")
			}
		}
	}
}

func TestPartnerNamespaces_ListSharedAccessKeys(t *testing.T) {
	// From example PartnerNamespaces_ListSharedAccessKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.ListSharedAccessKeys(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		&PartnerNamespacesListSharedAccessKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerNamespaces_RegenerateKey(t *testing.T) {
	// From example PartnerNamespaces_RegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerNamespacesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.RegenerateKey(ctx,
		"examplerg",
		"examplePartnerNamespaceName1",
		PartnerNamespaceRegenerateKeyRequest{
			KeyName: to.StringPtr("key1"),
		},
		&PartnerNamespacesRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerRegistrations_Get(t *testing.T) {
	// From example PartnerRegistrations_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerRegistrationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"examplePartnerRegistrationName1",
		&PartnerRegistrationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerRegistration.ID == nil {
		t.Fatal("PartnerRegistration.ID should not be nil!")
	}
}

func TestPartnerRegistrations_CreateOrUpdate(t *testing.T) {
	// From example PartnerRegistrations_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerRegistrationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdate(ctx,
		"examplerg",
		"examplePartnerRegistrationName1",
		PartnerRegistration{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
					"key2": to.StringPtr("Value2"),
					"key3": to.StringPtr("Value3"),
				},
			},
			Properties: &PartnerRegistrationProperties{
				AuthorizedAzureSubscriptionIDs: []*string{
					to.StringPtr("d48566a8-2428-4a6c-8347-9675d09fb851")},
				LogoURI:                        to.StringPtr("https://www.example.com/logo.png"),
				PartnerName:                    to.StringPtr("ContosoCorp"),
				PartnerResourceTypeDescription: to.StringPtr("ContocoCorp Accounts Description Text"),
				PartnerResourceTypeDisplayName: to.StringPtr("ContocoCorp Accounts DisplayName Text"),
				PartnerResourceTypeName:        to.StringPtr("ContosoCorp.Accounts"),
				SetupURI:                       to.StringPtr("https://www.example.com/setup.html"),
			},
		},
		&PartnerRegistrationsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerRegistration.ID == nil {
		t.Fatal("PartnerRegistration.ID should not be nil!")
	}
}

func TestPartnerRegistrations_Delete(t *testing.T) {
	// From example PartnerRegistrations_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerRegistrationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.Delete(ctx,
		"examplerg",
		"examplePartnerRegistrationName1",
		&PartnerRegistrationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerRegistrations_Update(t *testing.T) {
	// From example PartnerRegistrations_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerRegistrationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Update(ctx,
		"examplerg",
		"examplePartnerRegistrationName1",
		PartnerRegistrationUpdateParameters{
			LogoURI:  to.StringPtr("https://www.example.com/newlogo.png"),
			SetupURI: to.StringPtr("https://www.example.com/newsetup.html"),
		},
		&PartnerRegistrationsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerRegistration.ID == nil {
		t.Fatal("PartnerRegistration.ID should not be nil!")
	}
}

func TestPartnerRegistrations_ListBySubscription(t *testing.T) {
	// From example PartnerRegistrations_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerRegistrationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySubscription(&PartnerRegistrationsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PartnerRegistration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PartnerRegistration.ID should not be nil!")
			}
		}
	}
}

func TestPartnerRegistrations_ListByResourceGroup(t *testing.T) {
	// From example PartnerRegistrations_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerRegistrationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResourceGroup("examplerg",
		&PartnerRegistrationsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PartnerRegistration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PartnerRegistration.ID should not be nil!")
			}
		}
	}
}

func TestPartnerTopics_Get(t *testing.T) {
	// From example PartnerTopics_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"examplePartnerTopicName1",
		&PartnerTopicsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerTopic.ID == nil {
		t.Fatal("PartnerTopic.ID should not be nil!")
	}
}

func TestPartnerTopics_Delete(t *testing.T) {
	// From example PartnerTopics_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"examplePartnerTopicName1",
		&PartnerTopicsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPartnerTopics_Update(t *testing.T) {
	// From example PartnerTopics_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Update(ctx,
		"examplerg",
		"examplePartnerTopicName1",
		PartnerTopicUpdateParameters{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&PartnerTopicsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerTopic.ID == nil {
		t.Fatal("PartnerTopic.ID should not be nil!")
	}
}

func TestPartnerTopics_ListBySubscription(t *testing.T) {
	// From example PartnerTopics_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySubscription(&PartnerTopicsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PartnerTopic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PartnerTopic.ID should not be nil!")
			}
		}
	}
}

func TestPartnerTopics_ListByResourceGroup(t *testing.T) {
	// From example PartnerTopics_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResourceGroup("examplerg",
		&PartnerTopicsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PartnerTopic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PartnerTopic.ID should not be nil!")
			}
		}
	}
}

func TestPartnerTopics_Activate(t *testing.T) {
	// From example PartnerTopics_Activate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Activate(ctx,
		"examplerg",
		"examplePartnerTopic1",
		&PartnerTopicsActivateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerTopic.ID == nil {
		t.Fatal("PartnerTopic.ID should not be nil!")
	}
}

func TestPartnerTopics_Deactivate(t *testing.T) {
	// From example PartnerTopics_Deactivate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPartnerTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Deactivate(ctx,
		"examplerg",
		"examplePartnerTopic1",
		&PartnerTopicsDeactivateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PartnerTopic.ID == nil {
		t.Fatal("PartnerTopic.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnections_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		Enum25Topics,
		"exampletopic1",
		"BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Update(t *testing.T) {
	// From example PrivateEndpointConnections_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		Enum26Topics,
		"exampletopic1",
		"BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &ConnectionState{
					Description:     to.StringPtr("approving connection"),
					ActionsRequired: to.StringPtr("None"),
					Status:          PersistedConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		Enum27Topics,
		"exampletopic1",
		"BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example PrivateEndpointConnections_ListByResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResource("examplerg",
		Enum28Topics,
		"exampletopic1",
		&PrivateEndpointConnectionsListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example PrivateLinkResources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"topics",
		"exampletopic1",
		"topic",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateLinkResources_ListByResource(t *testing.T) {
	// From example PrivateLinkResources_ListByResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResource("examplerg",
		"topics",
		"exampletopic1",
		&PrivateLinkResourcesListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestSystemTopics_Get(t *testing.T) {
	// From example SystemTopics_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"exampleSystemTopic2",
		&SystemTopicsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SystemTopic.ID == nil {
		t.Fatal("SystemTopic.ID should not be nil!")
	}
}

func TestSystemTopics_CreateOrUpdate(t *testing.T) {
	// From example SystemTopics_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		SystemTopic{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus2"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &SystemTopicProperties{
				Source:    to.StringPtr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
				TopicType: to.StringPtr("microsoft.storage.storageaccounts"),
			},
		},
		&SystemTopicsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SystemTopic.ID == nil {
		t.Fatal("SystemTopic.ID should not be nil!")
	}
}

func TestSystemTopics_Delete(t *testing.T) {
	// From example SystemTopics_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampleSystemTopic1",
		&SystemTopicsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSystemTopics_Update(t *testing.T) {
	// From example SystemTopics_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		SystemTopicUpdateParameters{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&SystemTopicsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SystemTopic.ID == nil {
		t.Fatal("SystemTopic.ID should not be nil!")
	}
}

func TestSystemTopics_ListBySubscription(t *testing.T) {
	// From example SystemTopics_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySubscription(&SystemTopicsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SystemTopic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SystemTopic.ID should not be nil!")
			}
		}
	}
}

func TestSystemTopics_ListByResourceGroup(t *testing.T) {
	// From example SystemTopics_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSystemTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResourceGroup("examplerg",
		&SystemTopicsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SystemTopic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SystemTopic.ID should not be nil!")
			}
		}
	}
}

func TestTopics_Get(t *testing.T) {
	// From example Topics_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"exampletopic2",
		&TopicsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Topic.ID == nil {
		t.Fatal("Topic.ID should not be nil!")
	}
}

func TestTopics_CreateOrUpdate(t *testing.T) {
	// From example Topics_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampletopic1",
		Topic{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus2"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &TopicProperties{
				InboundIPRules: []*InboundIPRule{
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.30.15"),
					},
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.176.1"),
					}},
				PublicNetworkAccess: PublicNetworkAccessEnabled.ToPtr(),
			},
		},
		&TopicsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Topic.ID == nil {
		t.Fatal("Topic.ID should not be nil!")
	}

	// From example Topics_CreateOrUpdateForAzureArc
	poller, err = client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampletopic1",
		Topic{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus2"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			ExtendedLocation: &ExtendedLocation{
				Name: to.StringPtr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourcegroups/examplerg/providers/Microsoft.ExtendedLocation/CustomLocations/exampleCustomLocation"),
				Type: to.StringPtr("CustomLocation"),
			},
			Kind: ResourceKindAzureArc.ToPtr(),
			Properties: &TopicProperties{
				InputSchema: InputSchemaCloudEventSchemaV10.ToPtr(),
			},
		},
		&TopicsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Topic.ID == nil {
		t.Fatal("Topic.ID should not be nil!")
	}
}

func TestTopics_Delete(t *testing.T) {
	// From example Topics_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginDelete(ctx,
		"examplerg1",
		"exampletopic1",
		&TopicsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_Update(t *testing.T) {
	// From example Topics_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampletopic1",
		TopicUpdateParameters{
			Properties: &TopicUpdateParameterProperties{
				InboundIPRules: []*InboundIPRule{
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.30.15"),
					},
					{
						Action: IPActionTypeAllow.ToPtr(),
						IPMask: to.StringPtr("12.18.176.1"),
					}},
				PublicNetworkAccess: PublicNetworkAccessEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&TopicsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Topic.ID == nil {
		t.Fatal("Topic.ID should not be nil!")
	}
}

func TestTopics_ListBySubscription(t *testing.T) {
	// From example Topics_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListBySubscription(&TopicsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Topic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Topic.ID should not be nil!")
			}
		}
	}
}

func TestTopics_ListByResourceGroup(t *testing.T) {
	// From example Topics_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	pager := client.ListByResourceGroup("examplerg",
		&TopicsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Topic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Topic.ID should not be nil!")
			}
		}
	}
}

func TestTopics_ListSharedAccessKeys(t *testing.T) {
	// From example Topics_ListSharedAccessKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.ListSharedAccessKeys(ctx,
		"examplerg",
		"exampletopic2",
		&TopicsListSharedAccessKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_RegenerateKey(t *testing.T) {
	// From example Topics_RegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	poller, err := client.BeginRegenerateKey(ctx,
		"examplerg",
		"exampletopic2",
		TopicRegenerateKeyRequest{
			KeyName: to.StringPtr("key1"),
		},
		&TopicsBeginRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_ListEventTypes(t *testing.T) {
	// From example Topics_ListEventTypes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.ListEventTypes(ctx,
		"examplerg",
		"Microsoft.Storage",
		"storageAccounts",
		"ExampleStorageAccount",
		&TopicsListEventTypesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExtensionTopics_Get(t *testing.T) {
	// From example ExtensionTopics_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtensionTopicsClient(con)
	res, err := client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.storage/storageaccounts/exampleResourceName/providers/Microsoft.eventgrid/extensionTopics/default",
		&ExtensionTopicsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtensionTopic.ID == nil {
		t.Fatal("ExtensionTopic.ID should not be nil!")
	}
}

func TestTopicTypes_List(t *testing.T) {
	// From example TopicTypes_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicTypesClient(con)
	_, err := client.List(ctx,
		&TopicTypesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopicTypes_Get(t *testing.T) {
	// From example TopicTypes_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicTypesClient(con)
	res, err := client.Get(ctx,
		"Microsoft.Storage.StorageAccounts",
		&TopicTypesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TopicTypeInfo.ID == nil {
		t.Fatal("TopicTypeInfo.ID should not be nil!")
	}
}

func TestTopicTypes_ListEventTypes(t *testing.T) {
	// From example TopicTypes_ListEventTypes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicTypesClient(con)
	_, err := client.ListEventTypes(ctx,
		"Microsoft.Storage.StorageAccounts",
		&TopicTypesListEventTypesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
