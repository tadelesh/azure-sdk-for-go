//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventgrid/armeventgrid"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDomains_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"exampledomain2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.Domain{
			Name:     to.Ptr("exampledomain2"),
			Type:     to.Ptr("Microsoft.EventGrid/domains"),
			ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/exampledomain2"),
			Location: to.Ptr("westcentralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armeventgrid.DomainProperties{
				Endpoint:          to.Ptr("https://exampledomain2.westcentralus-1.eventgrid.azure.net/api/events"),
				ProvisioningState: to.Ptr(armeventgrid.DomainProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Domain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Domain)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomains_CreateOrUpdate(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampledomain1",
		armeventgrid.Domain{
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armeventgrid.DomainProperties{
				InboundIPRules: []*armeventgrid.InboundIPRule{
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.30.15"),
					},
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.176.1"),
					}},
				PublicNetworkAccess: to.Ptr(armeventgrid.PublicNetworkAccessEnabled),
			},
		},
		&armeventgrid.DomainsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_CreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_CreateOrUpdate.json: %v", err)
	}
}

func TestDomains_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampledomain1",
		&armeventgrid.DomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Delete.json: %v", err)
	}
}

func TestDomains_Update(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampledomain1",
		armeventgrid.DomainUpdateParameters{
			Properties: &armeventgrid.DomainUpdateParameterProperties{
				InboundIPRules: []*armeventgrid.InboundIPRule{
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.30.15"),
					},
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.176.1"),
					}},
				PublicNetworkAccess: to.Ptr(armeventgrid.PublicNetworkAccessEnabled),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armeventgrid.DomainsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Update.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_Update.json: %v", err)
	}
}

func TestDomains_ListBySubscription(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListBySubscription(&armeventgrid.DomainsClientListBySubscriptionOptions{Filter: nil,
		Top: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.DomainsListResult{
			Value: []*armeventgrid.Domain{
				{
					Name:     to.Ptr("exampledomain1"),
					Type:     to.Ptr("Microsoft.EventGrid/domains"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/exampledomain1"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.DomainProperties{
						Endpoint:          to.Ptr("https://exampledomain1.westus2-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.DomainProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("exampledomain2"),
					Type:     to.Ptr("Microsoft.EventGrid/domains"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/exampledomain2"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.DomainProperties{
						Endpoint:          to.Ptr("https://exampledomain2.westcentralus-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.DomainProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DomainsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DomainsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomains_ListByResourceGroup(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByResourceGroup("examplerg",
		&armeventgrid.DomainsClientListByResourceGroupOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.DomainsListResult{
			Value: []*armeventgrid.Domain{
				{
					Name:     to.Ptr("exampledomain1"),
					Type:     to.Ptr("Microsoft.EventGrid/domains"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/exampledomain1"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.DomainProperties{
						Endpoint:          to.Ptr("https://exampledomain1.westus2-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.DomainProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("exampledomain2"),
					Type:     to.Ptr("Microsoft.EventGrid/domains"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/exampledomain2"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.DomainProperties{
						Endpoint:          to.Ptr("https://exampledomain2.westcentralus-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.DomainProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DomainsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DomainsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomains_ListSharedAccessKeys(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListSharedAccessKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_ListSharedAccessKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.ListSharedAccessKeys(ctx,
		"examplerg",
		"exampledomain2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListSharedAccessKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.DomainSharedAccessKeys{
			Key1: to.Ptr("<key1>"),
			Key2: to.Ptr("<key2>"),
		}
		if !reflect.DeepEqual(exampleRes, res.DomainSharedAccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainSharedAccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_ListSharedAccessKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomains_RegenerateKey(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Domains_RegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"examplerg",
		"exampledomain2",
		armeventgrid.DomainRegenerateKeyRequest{
			KeyName: to.Ptr("key1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.DomainSharedAccessKeys{
			Key1: to.Ptr("<key1>"),
			Key2: to.Ptr("<key2>"),
		}
		if !reflect.DeepEqual(exampleRes, res.DomainSharedAccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainSharedAccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Domains_RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainTopics_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DomainTopics_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"exampledomain2",
		"topic1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.DomainTopic{
			Name: to.Ptr("topic1"),
			Type: to.Ptr("Microsoft.EventGrid/domains/topics"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/exampledomain2/topics/topic1"),
			Properties: &armeventgrid.DomainTopicProperties{
				ProvisioningState: to.Ptr(armeventgrid.DomainTopicProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DomainTopic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainTopic)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainTopics_CreateOrUpdate(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DomainTopics_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampledomain1",
		"exampledomaintopic1",
		&armeventgrid.DomainTopicsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_CreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_CreateOrUpdate.json: %v", err)
	}
}

func TestDomainTopics_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DomainTopics_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampledomain1",
		"exampledomaintopic1",
		&armeventgrid.DomainTopicsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_Delete.json: %v", err)
	}
}

func TestDomainTopics_ListByDomain(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_ListByDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DomainTopics_ListByDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewDomainTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByDomain("examplerg",
		"exampledomain2",
		&armeventgrid.DomainTopicsClientListByDomainOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_ListByDomain.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.DomainTopicsListResult{
			Value: []*armeventgrid.DomainTopic{
				{
					Name: to.Ptr("domainCli100topic1"),
					Type: to.Ptr("Microsoft.EventGrid/domains/topics"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/devexprg/providers/Microsoft.EventGrid/domains/domainCli100/topics/domainCli100topic1"),
					Properties: &armeventgrid.DomainTopicProperties{
						ProvisioningState: to.Ptr(armeventgrid.DomainTopicProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("domainCli100topic2"),
					Type: to.Ptr("Microsoft.EventGrid/domains/topics"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/devexprg/providers/Microsoft.EventGrid/domains/domainCli100/topics/domainCli100topic2"),
					Properties: &armeventgrid.DomainTopicProperties{
						ProvisioningState: to.Ptr(armeventgrid.DomainTopicProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DomainTopicsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DomainTopicsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/DomainTopics_ListByDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForCustomTopic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_GetForCustomTopic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2",
		"examplesubscription1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForCustomTopic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.EventSubscription{
			Name: to.Ptr("examplesubscription1"),
			Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription1"),
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
				Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/topics/exampletopic2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForCustomTopic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_GetForResource"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.EventSubscription{
			Name: to.Ptr("examplesubscription1"),
			Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription1"),
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.EventHubEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeEventHub),
					Properties: &armeventgrid.EventHubEventSubscriptionDestinationProperties{
						ResourceID: to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
				Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_GetForResourceGroup"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.EventSubscription{
			Name: to.Ptr("examplesubscription2"),
			Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription2"),
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
				Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_GetForSubscription"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.EventSubscription{
			Name: to.Ptr("examplesubscription3"),
			Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription3"),
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
				Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				DeadLetterDestination: &armeventgrid.StorageBlobDeadLetterDestination{
					EndpointType: to.Ptr(armeventgrid.DeadLetterEndPointTypeStorageBlob),
					Properties: &armeventgrid.StorageBlobDeadLetterDestinationProperties{
						BlobContainerName: to.Ptr("contosocontainer"),
						ResourceID:        to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Destination: &armeventgrid.EventHubEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeEventHub),
					Properties: &armeventgrid.EventHubEventSubscriptionDestinationProperties{
						ResourceID: to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				DeadLetterDestination: &armeventgrid.StorageBlobDeadLetterDestination{
					EndpointType: to.Ptr(armeventgrid.DeadLetterEndPointTypeStorageBlob),
					Properties: &armeventgrid.StorageBlobDeadLetterDestinationProperties{
						BlobContainerName: to.Ptr("contosocontainer"),
						ResourceID:        to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Destination: &armeventgrid.HybridConnectionEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeHybridConnection),
					Properties: &armeventgrid.HybridConnectionEventSubscriptionDestinationProperties{
						ResourceID: to.Ptr("/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Relay/namespaces/ContosoNamespace/hybridConnections/HC1"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				DeadLetterDestination: &armeventgrid.StorageBlobDeadLetterDestination{
					EndpointType: to.Ptr(armeventgrid.DeadLetterEndPointTypeStorageBlob),
					Properties: &armeventgrid.StorageBlobDeadLetterDestinationProperties{
						BlobContainerName: to.Ptr("contosocontainer"),
						ResourceID:        to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Destination: &armeventgrid.StorageQueueEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeStorageQueue),
					Properties: &armeventgrid.StorageQueueEventSubscriptionDestinationProperties{
						QueueName:  to.Ptr("queue1"),
						ResourceID: to.Ptr("/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.Ptr("https://azurefunctionexample.azurewebsites.net/runtime/webhooks/EventGrid?functionName=EventGridTrigger1&code=PASSWORDCODE"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForResource"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription10",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForResource.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForResource.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForResourceGroup"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForResourceGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForResourceGroup.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_CreateOrUpdateForSubscription"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
				},
			},
		},
		&armeventgrid.EventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForSubscription.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_CreateOrUpdateForSubscription.json: %v", err)
	}
}

func TestEventSubscriptions_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForCustomTopic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_DeleteForCustomTopic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
		"examplesubscription1",
		&armeventgrid.EventSubscriptionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForCustomTopic.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForCustomTopic.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_DeleteForResource"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription10",
		&armeventgrid.EventSubscriptionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForResource.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForResource.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_DeleteForResourceGroup"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		&armeventgrid.EventSubscriptionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForResourceGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForResourceGroup.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_DeleteForSubscription"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		&armeventgrid.EventSubscriptionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForSubscription.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_DeleteForSubscription.json: %v", err)
	}
}

func TestEventSubscriptions_Update(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForCustomTopic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_UpdateForCustomTopic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2",
		"examplesubscription1",
		armeventgrid.EventSubscriptionUpdateParameters{
			Destination: &armeventgrid.WebHookEventSubscriptionDestination{
				EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
				Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &armeventgrid.EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.Ptr(true),
				SubjectBeginsWith:      to.Ptr("existingPrefix"),
				SubjectEndsWith:        to.Ptr("newSuffix"),
			},
			Labels: []*string{
				to.Ptr("label1"),
				to.Ptr("label2")},
		},
		&armeventgrid.EventSubscriptionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForCustomTopic.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForCustomTopic.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_UpdateForResource"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
		"examplesubscription1",
		armeventgrid.EventSubscriptionUpdateParameters{
			Destination: &armeventgrid.WebHookEventSubscriptionDestination{
				EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
				Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &armeventgrid.EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.Ptr(true),
				SubjectBeginsWith:      to.Ptr("existingPrefix"),
				SubjectEndsWith:        to.Ptr("newSuffix"),
			},
			Labels: []*string{
				to.Ptr("label1"),
				to.Ptr("label2")},
		},
		&armeventgrid.EventSubscriptionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForResource.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForResource.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_UpdateForResourceGroup"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
		"examplesubscription2",
		armeventgrid.EventSubscriptionUpdateParameters{
			Destination: &armeventgrid.EventHubEventSubscriptionDestination{
				EndpointType: to.Ptr(armeventgrid.EndpointTypeEventHub),
				Properties: &armeventgrid.EventHubEventSubscriptionDestinationProperties{
					ResourceID: to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
				},
			},
			Filter: &armeventgrid.EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.Ptr(true),
				SubjectBeginsWith:      to.Ptr("existingPrefix"),
				SubjectEndsWith:        to.Ptr("newSuffix"),
			},
			Labels: []*string{
				to.Ptr("label1"),
				to.Ptr("label2")},
		},
		&armeventgrid.EventSubscriptionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForResourceGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForResourceGroup.json: %v", err)
	}

	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_UpdateForSubscription"},
	})
	client = armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
		"examplesubscription3",
		armeventgrid.EventSubscriptionUpdateParameters{
			Destination: &armeventgrid.WebHookEventSubscriptionDestination{
				EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
				Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &armeventgrid.EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.Ptr(true),
				SubjectBeginsWith:      to.Ptr("existingPrefix"),
				SubjectEndsWith:        to.Ptr("newSuffix"),
			},
			Labels: []*string{
				to.Ptr("label1"),
				to.Ptr("label2")},
		},
		&armeventgrid.EventSubscriptionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForSubscription.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_UpdateForSubscription.json: %v", err)
	}
}

func TestEventSubscriptions_ListGlobalBySubscription(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListGlobalBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListGlobalBySubscription(&armeventgrid.EventSubscriptionsClientListGlobalBySubscriptionOptions{Filter: nil,
		Top: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription2"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription2"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg"),
					},
				},
				{
					Name: to.Ptr("examplesubscription4"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription4"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListGlobalBySubscriptionForTopicType(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalBySubscriptionForTopicType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListGlobalBySubscriptionForTopicType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListGlobalBySubscriptionForTopicType("Microsoft.Resources.Subscriptions",
		&armeventgrid.EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalBySubscriptionForTopicType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription3"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription3"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalBySubscriptionForTopicType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListGlobalByResourceGroup(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListGlobalByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListGlobalByResourceGroup("examplerg",
		&armeventgrid.EventSubscriptionsClientListGlobalByResourceGroupOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription2"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription2"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg"),
					},
				},
				{
					Name: to.Ptr("examplesubscription4"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription4"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListGlobalByResourceGroupForTopicType(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalByResourceGroupForTopicType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListGlobalByResourceGroupForTopicType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListGlobalByResourceGroupForTopicType("examplerg",
		"Microsoft.Resources.ResourceGroups",
		&armeventgrid.EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalByResourceGroupForTopicType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription3"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription3"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListGlobalByResourceGroupForTopicType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListRegionalBySubscription(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListRegionalBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListRegionalBySubscription("westus2",
		&armeventgrid.EventSubscriptionsClientListRegionalBySubscriptionOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription10"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription10"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.EventHubEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeEventHub),
							Properties: &armeventgrid.EventHubEventSubscriptionDestinationProperties{
								ResourceID: to.Ptr("/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription11"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription11"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListRegionalByResourceGroup(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListRegionalByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListRegionalByResourceGroup("examplerg",
		"westus2",
		&armeventgrid.EventSubscriptionsClientListRegionalByResourceGroupOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription10"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription10"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription11"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription11"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListRegionalBySubscriptionForTopicType(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalBySubscriptionForTopicType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListRegionalBySubscriptionForTopicType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListRegionalBySubscriptionForTopicType("westus2",
		"Microsoft.EventHub.namespaces",
		&armeventgrid.EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalBySubscriptionForTopicType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription10"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription10"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription11"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription11"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalBySubscriptionForTopicType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListRegionalByResourceGroupForTopicType(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalByResourceGroupForTopicType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListRegionalByResourceGroupForTopicType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListRegionalByResourceGroupForTopicType("examplerg",
		"westus2",
		"Microsoft.EventHub.namespaces",
		&armeventgrid.EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalByResourceGroupForTopicType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription10"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription10"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription11"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription11"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("Finance"),
							to.Ptr("HR")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventhub/namespaces/examplenamespace1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListRegionalByResourceGroupForTopicType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListByResource(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByResource("examplerg",
		"Microsoft.EventGrid",
		"topics",
		"exampletopic2",
		&armeventgrid.EventSubscriptionsClientListByResourceOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription1"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription1"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/topics/exampletopic2"),
					},
				},
				{
					Name: to.Ptr("examplesubscription2"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription2"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/topics/exampletopic2"),
					},
				},
				{
					Name: to.Ptr("examplesubscription3"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription3"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						Labels:            []*string{},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/topics/exampletopic2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_ListByDomainTopic(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListByDomainTopic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_ListByDomainTopic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByDomainTopic("examplerg",
		"domain1",
		"topic1",
		&armeventgrid.EventSubscriptionsClientListByDomainTopicOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListByDomainTopic.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription1"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/domain1/topics/topic1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription1"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/domains/domain1/topics/topic1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription2"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/domain1/topics/topic1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription2"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/domains/domain1/topics/topic1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription3"),
					Type: to.Ptr("Microsoft.EventGrid/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/domains/domain1/topics/topic1/providers/Microsoft.EventGrid/eventSubscriptions/examplesubscription3"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.WebHookEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
							Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
								EndpointBaseURL: to.Ptr("https://requestb.in/15ksip71"),
							},
						},
						Filter: &armeventgrid.EventSubscriptionFilter{
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr(""),
							SubjectEndsWith:        to.Ptr(""),
						},
						Labels:            []*string{},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						Topic:             to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.eventgrid/domains/domain1/topics/topic1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_ListByDomainTopic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSubscriptions_GetDeliveryAttributes(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetDeliveryAttributes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSubscriptions_GetDeliveryAttributes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewEventSubscriptionsClient("<subscription-id>", cred, &options)
	res, err := client.GetDeliveryAttributes(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetDeliveryAttributes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.DeliveryAttributeListResult{
			Value: []armeventgrid.DeliveryAttributeMappingClassification{
				&armeventgrid.StaticDeliveryAttributeMapping{
					Name: to.Ptr("header1"),
					Type: to.Ptr(armeventgrid.DeliveryAttributeMappingTypeStatic),
				},
				&armeventgrid.DynamicDeliveryAttributeMapping{
					Name: to.Ptr("header2"),
					Type: to.Ptr(armeventgrid.DeliveryAttributeMappingTypeDynamic),
				},
				&armeventgrid.StaticDeliveryAttributeMapping{
					Name: to.Ptr("header3"),
					Type: to.Ptr(armeventgrid.DeliveryAttributeMappingTypeStatic),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DeliveryAttributeListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeliveryAttributeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/EventSubscriptions_GetDeliveryAttributes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopicEventSubscriptions_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopicEventSubscriptions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.EventSubscription{
			Name: to.Ptr("examplesubscription1"),
			Type: to.Ptr("Microsoft.EventGrid/systemTopics/eventSubscriptions"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic1/eventSubscriptions/examplesubscription1"),
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.StorageQueueEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeStorageQueue),
					Properties: &armeventgrid.StorageQueueEventSubscriptionDestinationProperties{
						QueueName:  to.Ptr("que"),
						ResourceID: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.Storage/storageAccounts/testtrackedsource"),
					},
				},
				EventDeliverySchema: to.Ptr(armeventgrid.EventDeliverySchemaEventGridSchema),
				Filter: &armeventgrid.EventSubscriptionFilter{
					IncludedEventTypes: []*string{
						to.Ptr("Microsoft.Storage.BlobCreated"),
						to.Ptr("Microsoft.Storage.BlobDeleted")},
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
				RetryPolicy: &armeventgrid.RetryPolicy{
					EventTimeToLiveInMinutes: to.Ptr[int32](1440),
					MaxDeliveryAttempts:      to.Ptr[int32](30),
				},
				Topic: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopicEventSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopicEventSubscriptions_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"exampleEventSubscriptionName1",
		armeventgrid.EventSubscription{
			Properties: &armeventgrid.EventSubscriptionProperties{
				Destination: &armeventgrid.WebHookEventSubscriptionDestination{
					EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
					Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
						EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
					},
				},
				Filter: &armeventgrid.EventSubscriptionFilter{
					IsSubjectCaseSensitive: to.Ptr(false),
					SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
					SubjectEndsWith:        to.Ptr("ExampleSuffix"),
				},
			},
		},
		&armeventgrid.SystemTopicEventSubscriptionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_CreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_CreateOrUpdate.json: %v", err)
	}
}

func TestSystemTopicEventSubscriptions_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopicEventSubscriptions_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		&armeventgrid.SystemTopicEventSubscriptionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Delete.json: %v", err)
	}
}

func TestSystemTopicEventSubscriptions_Update(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopicEventSubscriptions_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"exampleEventSubscriptionName1",
		armeventgrid.EventSubscriptionUpdateParameters{
			Destination: &armeventgrid.WebHookEventSubscriptionDestination{
				EndpointType: to.Ptr(armeventgrid.EndpointTypeWebHook),
				Properties: &armeventgrid.WebHookEventSubscriptionDestinationProperties{
					EndpointURL: to.Ptr("https://requestb.in/15ksip71"),
				},
			},
			Filter: &armeventgrid.EventSubscriptionFilter{
				IsSubjectCaseSensitive: to.Ptr(true),
				SubjectBeginsWith:      to.Ptr("existingPrefix"),
				SubjectEndsWith:        to.Ptr("newSuffix"),
			},
			Labels: []*string{
				to.Ptr("label1"),
				to.Ptr("label2")},
		},
		&armeventgrid.SystemTopicEventSubscriptionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Update.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_Update.json: %v", err)
	}
}

func TestSystemTopicEventSubscriptions_ListBySystemTopic(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_ListBySystemTopic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopicEventSubscriptions_ListBySystemTopic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListBySystemTopic("examplerg",
		"exampleSystemTopic1",
		&armeventgrid.SystemTopicEventSubscriptionsClientListBySystemTopicOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_ListBySystemTopic.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventSubscriptionsListResult{
			Value: []*armeventgrid.EventSubscription{
				{
					Name: to.Ptr("examplesubscription1"),
					Type: to.Ptr("Microsoft.EventGrid/systemTopics/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic1/eventSubscriptions/examplesubscription1"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.StorageQueueEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeStorageQueue),
							Properties: &armeventgrid.StorageQueueEventSubscriptionDestinationProperties{
								QueueName:  to.Ptr("que"),
								ResourceID: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.Storage/storageAccounts/testtrackedsource"),
							},
						},
						EventDeliverySchema: to.Ptr(armeventgrid.EventDeliverySchemaEventGridSchema),
						Filter: &armeventgrid.EventSubscriptionFilter{
							SubjectBeginsWith: to.Ptr(""),
							SubjectEndsWith:   to.Ptr(""),
						},
						Labels:            []*string{},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						RetryPolicy: &armeventgrid.RetryPolicy{
							EventTimeToLiveInMinutes: to.Ptr[int32](1440),
							MaxDeliveryAttempts:      to.Ptr[int32](10),
						},
						Topic: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic1"),
					},
				},
				{
					Name: to.Ptr("examplesubscription2"),
					Type: to.Ptr("Microsoft.EventGrid/systemTopics/eventSubscriptions"),
					ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic1/eventSubscriptions/examplesubscription2"),
					Properties: &armeventgrid.EventSubscriptionProperties{
						Destination: &armeventgrid.StorageQueueEventSubscriptionDestination{
							EndpointType: to.Ptr(armeventgrid.EndpointTypeStorageQueue),
							Properties: &armeventgrid.StorageQueueEventSubscriptionDestinationProperties{
								QueueName:  to.Ptr("que"),
								ResourceID: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.Storage/storageAccounts/testtrackedsource"),
							},
						},
						EventDeliverySchema: to.Ptr(armeventgrid.EventDeliverySchemaEventGridSchema),
						Filter: &armeventgrid.EventSubscriptionFilter{
							IncludedEventTypes: []*string{
								to.Ptr("Microsoft.Storage.BlobCreated"),
								to.Ptr("Microsoft.Storage.BlobDeleted")},
							IsSubjectCaseSensitive: to.Ptr(false),
							SubjectBeginsWith:      to.Ptr("ExamplePrefix"),
							SubjectEndsWith:        to.Ptr("ExampleSuffix"),
						},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
						ProvisioningState: to.Ptr(armeventgrid.EventSubscriptionProvisioningStateSucceeded),
						RetryPolicy: &armeventgrid.RetryPolicy{
							EventTimeToLiveInMinutes: to.Ptr[int32](1440),
							MaxDeliveryAttempts:      to.Ptr[int32](30),
						},
						Topic: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventSubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventSubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_ListBySystemTopic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopicEventSubscriptions_GetDeliveryAttributes(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_GetDeliveryAttributes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopicEventSubscriptions_GetDeliveryAttributes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicEventSubscriptionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.GetDeliveryAttributes(ctx,
		"examplerg",
		"exampleSystemTopic1",
		"examplesubscription1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_GetDeliveryAttributes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.DeliveryAttributeListResult{
			Value: []armeventgrid.DeliveryAttributeMappingClassification{
				&armeventgrid.StaticDeliveryAttributeMapping{
					Name: to.Ptr("header1"),
					Type: to.Ptr(armeventgrid.DeliveryAttributeMappingTypeStatic),
					Properties: &armeventgrid.StaticDeliveryAttributeMappingProperties{
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("NormalValue"),
					},
				},
				&armeventgrid.DynamicDeliveryAttributeMapping{
					Name: to.Ptr("header2"),
					Type: to.Ptr(armeventgrid.DeliveryAttributeMappingTypeDynamic),
					Properties: &armeventgrid.DynamicDeliveryAttributeMappingProperties{
						SourceField: to.Ptr("data.foo"),
					},
				},
				&armeventgrid.StaticDeliveryAttributeMapping{
					Name: to.Ptr("header3"),
					Type: to.Ptr(armeventgrid.DeliveryAttributeMappingTypeStatic),
					Properties: &armeventgrid.StaticDeliveryAttributeMappingProperties{
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mySecretValue"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DeliveryAttributeListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeliveryAttributeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopicEventSubscriptions_GetDeliveryAttributes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.OperationsListResult{
			Value: []*armeventgrid.Operation{
				{
					Name: to.Ptr("Microsoft.EventGrid/register/action"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Registers the eventSubscription for the EventGrid resource provider and enables the creation of Event Grid subscriptions."),
						Operation:   to.Ptr("Registers the EventGrid Resource Provider"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("EventGrid Resource Provider"),
					},
					Origin: to.Ptr("UserAndSystem"),
				},
				{
					Name: to.Ptr("Microsoft.EventGrid/eventSubscriptions/write"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Create or update a eventSubscription"),
						Operation:   to.Ptr("Write EventSubscription"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("eventSubscriptions"),
					},
					Origin: to.Ptr("UserAndSystem"),
				},
				{
					Name: to.Ptr("Microsoft.EventGrid/eventSubscriptions/read"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Read a eventSubscription"),
						Operation:   to.Ptr("Read EventSubscription"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("eventSubscriptions"),
					},
					Origin: to.Ptr("UserAndSystem"),
				},
				{
					Name: to.Ptr("Microsoft.EventGrid/eventSubscriptions/delete"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Delete a eventSubscription"),
						Operation:   to.Ptr("Delete EventSubscription"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("eventSubscriptions"),
					},
					Origin: to.Ptr("UserAndSystem"),
				},
				{
					Name: to.Ptr("Microsoft.EventGrid/topics/write"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Create or update a topic"),
						Operation:   to.Ptr("Write Topic"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("topics"),
					},
					Origin: to.Ptr("UserAndSystem"),
				},
				{
					Name: to.Ptr("Microsoft.EventGrid/topics/read"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Read a topic"),
						Operation:   to.Ptr("Read Topic"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("topics"),
					},
					Origin: to.Ptr("UserAndSystem"),
				},
				{
					Name: to.Ptr("Microsoft.EventGrid/topics/delete"),
					Display: &armeventgrid.OperationInfo{
						Description: to.Ptr("Delete a topic"),
						Operation:   to.Ptr("Delete Topic"),
						Provider:    to.Ptr("Microsoft Event Grid"),
						Resource:    to.Ptr("topics"),
					},
					Origin: to.Ptr("UserAndSystem"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopics_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"exampletopic2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.Topic{
			Name:     to.Ptr("exampletopic2"),
			Type:     to.Ptr("Microsoft.EventGrid/topics"),
			ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2"),
			Location: to.Ptr("westcentralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armeventgrid.TopicProperties{
				Endpoint:          to.Ptr("https://exampletopic2.westcentralus-1.eventgrid.azure.net/api/events"),
				ProvisioningState: to.Ptr(armeventgrid.TopicProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Topic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Topic)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopics_CreateOrUpdate(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampletopic1",
		armeventgrid.Topic{
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armeventgrid.TopicProperties{
				InboundIPRules: []*armeventgrid.InboundIPRule{
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.30.15"),
					},
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.176.1"),
					}},
				PublicNetworkAccess: to.Ptr(armeventgrid.PublicNetworkAccessEnabled),
			},
		},
		&armeventgrid.TopicsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_CreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_CreateOrUpdate.json: %v", err)
	}
}

func TestTopics_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampletopic1",
		&armeventgrid.TopicsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Delete.json: %v", err)
	}
}

func TestTopics_Update(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampletopic1",
		armeventgrid.TopicUpdateParameters{
			Properties: &armeventgrid.TopicUpdateParameterProperties{
				InboundIPRules: []*armeventgrid.InboundIPRule{
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.30.15"),
					},
					{
						Action: to.Ptr(armeventgrid.IPActionTypeAllow),
						IPMask: to.Ptr("12.18.176.1"),
					}},
				PublicNetworkAccess: to.Ptr(armeventgrid.PublicNetworkAccessEnabled),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armeventgrid.TopicsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Update.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_Update.json: %v", err)
	}
}

func TestTopics_ListBySubscription(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListBySubscription(&armeventgrid.TopicsClientListBySubscriptionOptions{Filter: nil,
		Top: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.TopicsListResult{
			Value: []*armeventgrid.Topic{
				{
					Name:     to.Ptr("exampletopic1"),
					Type:     to.Ptr("Microsoft.EventGrid/topics"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.TopicProperties{
						Endpoint:          to.Ptr("https://exampletopic1.westus2-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.TopicProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("exampletopic2"),
					Type:     to.Ptr("Microsoft.EventGrid/topics"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.TopicProperties{
						Endpoint:          to.Ptr("https://exampletopic2.westcentralus-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.TopicProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopicsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopicsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopics_ListByResourceGroup(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByResourceGroup("examplerg",
		&armeventgrid.TopicsClientListByResourceGroupOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.TopicsListResult{
			Value: []*armeventgrid.Topic{
				{
					Name:     to.Ptr("exampletopic1"),
					Type:     to.Ptr("Microsoft.EventGrid/topics"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.TopicProperties{
						Endpoint:          to.Ptr("https://exampletopic1.westus2-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.TopicProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("exampletopic2"),
					Type:     to.Ptr("Microsoft.EventGrid/topics"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armeventgrid.TopicProperties{
						Endpoint:          to.Ptr("https://exampletopic2.westcentralus-1.eventgrid.azure.net/api/events"),
						ProvisioningState: to.Ptr(armeventgrid.TopicProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopicsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopicsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopics_ListSharedAccessKeys(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListSharedAccessKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_ListSharedAccessKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.ListSharedAccessKeys(ctx,
		"examplerg",
		"exampletopic2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListSharedAccessKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.TopicSharedAccessKeys{
			Key1: to.Ptr("<key1>"),
			Key2: to.Ptr("<key2>"),
		}
		if !reflect.DeepEqual(exampleRes, res.TopicSharedAccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TopicSharedAccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListSharedAccessKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopics_RegenerateKey(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_RegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginRegenerateKey(ctx,
		"examplerg",
		"exampletopic2",
		armeventgrid.TopicRegenerateKeyRequest{
			KeyName: to.Ptr("key1"),
		},
		&armeventgrid.TopicsClientBeginRegenerateKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_RegenerateKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.TopicSharedAccessKeys{
			Key1: to.Ptr("<key1>"),
			Key2: to.Ptr("<key2>"),
		}
		if !reflect.DeepEqual(exampleRes, res.TopicSharedAccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TopicSharedAccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopics_ListEventTypes(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListEventTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Topics_ListEventTypes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListEventTypes("examplerg",
		"Microsoft.Storage",
		"storageAccounts",
		"ExampleStorageAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListEventTypes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventTypesListResult{
			Value: []*armeventgrid.EventType{
				{
					Name: to.Ptr("Microsoft.Storage.BlobCreated"),
					Type: to.Ptr("Microsoft.EventGrid/topicTypes/eventTypes"),
					ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Storage.StorageAccounts/eventTypes/Microsoft.Storage.BlobCreated"),
					Properties: &armeventgrid.EventTypeProperties{
						Description: to.Ptr("Raised when a blob is created."),
						DisplayName: to.Ptr("Blob Created"),
						SchemaURL:   to.Ptr("tbd"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage.BlobDeleted"),
					Type: to.Ptr("Microsoft.EventGrid/topicTypes/eventTypes"),
					ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Storage.StorageAccounts/eventTypes/Microsoft.Storage.BlobDeleted"),
					Properties: &armeventgrid.EventTypeProperties{
						Description: to.Ptr("Raised when a blob is deleted."),
						DisplayName: to.Ptr("Blob Deleted"),
						SchemaURL:   to.Ptr("tbd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventTypesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventTypesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/Topics_ListEventTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewPrivateEndpointConnectionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		armeventgrid.Enum18Topics,
		"exampletopic1",
		"BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.PrivateEndpointConnection{
			Name: to.Ptr("BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B"),
			Type: to.Ptr("Microsoft.EventGrid/topics/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/5B4B650E-28B9-4790-B3AB-DDBD88D727C4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1/privateEndpointConnections/BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B"),
			Properties: &armeventgrid.PrivateEndpointConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("topic")},
				PrivateEndpoint: &armeventgrid.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.Network/privateEndpoints/bmtpe5"),
				},
				PrivateLinkServiceConnectionState: &armeventgrid.ConnectionState{
					Description:     to.Ptr("Test"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armeventgrid.PersistedConnectionStatusPending),
				},
				ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewPrivateEndpointConnectionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		armeventgrid.Enum19Topics,
		"exampletopic1",
		"BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B",
		armeventgrid.PrivateEndpointConnection{
			Properties: &armeventgrid.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armeventgrid.ConnectionState{
					Description:     to.Ptr("approving connection"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armeventgrid.PersistedConnectionStatusApproved),
				},
			},
		},
		&armeventgrid.PrivateEndpointConnectionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.PrivateEndpointConnection{
			Name: to.Ptr("BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B"),
			Type: to.Ptr("Microsoft.EventGrid/topics/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/5B4B650E-28B9-4790-B3AB-DDBD88D727C4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1/privateEndpointConnections/BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B"),
			Properties: &armeventgrid.PrivateEndpointConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("topic")},
				PrivateEndpoint: &armeventgrid.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.Network/privateEndpoints/bmtpe5"),
				},
				PrivateLinkServiceConnectionState: &armeventgrid.ConnectionState{
					Description:     to.Ptr("approving connection"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armeventgrid.PersistedConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewPrivateEndpointConnectionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		armeventgrid.Enum20Topics,
		"exampletopic1",
		"BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B",
		&armeventgrid.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_ListByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewPrivateEndpointConnectionsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByResource("examplerg",
		armeventgrid.Enum21Topics,
		"exampletopic1",
		&armeventgrid.PrivateEndpointConnectionsClientListByResourceOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_ListByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.PrivateEndpointConnectionListResult{
			Value: []*armeventgrid.PrivateEndpointConnection{
				{
					Name: to.Ptr("BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B"),
					Type: to.Ptr("Microsoft.EventGrid/topics/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/5B4B650E-28B9-4790-B3AB-DDBD88D727C4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1/privateEndpointConnections/BMTPE5.8A30D251-4C61-489D-A1AA-B37C4A329B8B"),
					Properties: &armeventgrid.PrivateEndpointConnectionProperties{
						GroupIDs: []*string{
							to.Ptr("topic")},
						PrivateEndpoint: &armeventgrid.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.Network/privateEndpoints/bmtpe5"),
						},
						PrivateLinkServiceConnectionState: &armeventgrid.ConnectionState{
							Description:     to.Ptr("Test"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armeventgrid.PersistedConnectionStatusPending),
						},
						ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateEndpointConnections_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewPrivateLinkResourcesClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"topics",
		"exampletopic1",
		"topic",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.PrivateLinkResource{
			Name: to.Ptr("topic"),
			Type: to.Ptr("Microsoft.EventGrid/topics/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/5B4B650E-28B9-4790-B3AB-DDBD88D727C4/resourceGroups/amh/providers/Microsoft.EventGrid/topics/exampletopic1/privateLinkResources/topic"),
			Properties: &armeventgrid.PrivateLinkResourceProperties{
				DisplayName: to.Ptr("Event Grid topic"),
				GroupID:     to.Ptr("topic"),
				RequiredMembers: []*string{
					to.Ptr("topic")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.eventgrid.azure.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByResource(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateLinkResources_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewPrivateLinkResourcesClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByResource("examplerg",
		"topics",
		"exampletopic1",
		&armeventgrid.PrivateLinkResourcesClientListByResourceOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateLinkResources_ListByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.PrivateLinkResourcesListResult{
			Value: []*armeventgrid.PrivateLinkResource{
				{
					Name: to.Ptr("topic"),
					Type: to.Ptr("Microsoft.EventGrid/topics/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/5B4B650E-28B9-4790-B3AB-DDBD88D727C4/resourceGroups/amh/providers/Microsoft.EventGrid/topics/exampletopic1/privateLinkResources/topic"),
					Properties: &armeventgrid.PrivateLinkResourceProperties{
						DisplayName: to.Ptr("Event Grid topic"),
						GroupID:     to.Ptr("topic"),
						RequiredMembers: []*string{
							to.Ptr("topic")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.eventgrid.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourcesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourcesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/PrivateLinkResources_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopics_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopics_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"exampleSystemTopic2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.SystemTopic{
			Name:     to.Ptr("exampleSystemTopic2"),
			Type:     to.Ptr("Microsoft.EventGrid/systemTopics"),
			ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic2"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armeventgrid.SystemTopicProperties{
				MetricResourceID:  to.Ptr("183c0fb1-17ff-47b6-ac77-5a47420ab01e"),
				ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
				Source:            to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
				TopicType:         to.Ptr("microsoft.storage.storageaccounts"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SystemTopic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SystemTopic)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopics_CreateOrUpdate(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopics_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		armeventgrid.SystemTopic{
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armeventgrid.SystemTopicProperties{
				Source:    to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
				TopicType: to.Ptr("microsoft.storage.storageaccounts"),
			},
		},
		&armeventgrid.SystemTopicsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.SystemTopic{
			Name:     to.Ptr("exampleSystemTopic2"),
			Type:     to.Ptr("Microsoft.EventGrid/systemTopics"),
			ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic2"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armeventgrid.SystemTopicProperties{
				MetricResourceID:  to.Ptr("183c0fb1-17ff-47b6-ac77-5a47420ab01e"),
				ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
				Source:            to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
				TopicType:         to.Ptr("microsoft.storage.storageaccounts"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SystemTopic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SystemTopic)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopics_Delete(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopics_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"exampleSystemTopic1",
		&armeventgrid.SystemTopicsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Delete.json: %v", err)
	}
}

func TestSystemTopics_Update(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopics_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"examplerg",
		"exampleSystemTopic1",
		armeventgrid.SystemTopicUpdateParameters{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armeventgrid.SystemTopicsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.SystemTopic{
			Name:     to.Ptr("exampleSystemTopic2"),
			Type:     to.Ptr("Microsoft.EventGrid/systemTopics"),
			ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic2"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armeventgrid.SystemTopicProperties{
				MetricResourceID:  to.Ptr("183c0fb1-17ff-47b6-ac77-5a47420ab01e"),
				ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
				Source:            to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
				TopicType:         to.Ptr("microsoft.storage.storageaccounts"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SystemTopic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SystemTopic)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopics_ListBySubscription(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopics_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListBySubscription(&armeventgrid.SystemTopicsClientListBySubscriptionOptions{Filter: nil,
		Top: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.SystemTopicsListResult{
			Value: []*armeventgrid.SystemTopic{
				{
					Name:     to.Ptr("exampleSystemTopic2"),
					Type:     to.Ptr("Microsoft.EventGrid/systemTopics"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleSystemTopic2"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armeventgrid.SystemTopicProperties{
						MetricResourceID:  to.Ptr("183c0fb1-17ff-47b6-ac77-5a47420ab01e"),
						ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
						Source:            to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
						TopicType:         to.Ptr("microsoft.storage.storageaccounts"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SystemTopicsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SystemTopicsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSystemTopics_ListByResourceGroup(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SystemTopics_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewSystemTopicsClient("5b4b650e-28b9-4790-b3ab-ddbd88d727c4", cred, &options)
	pager := client.ListByResourceGroup("examplerg",
		&armeventgrid.SystemTopicsClientListByResourceGroupOptions{Filter: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.SystemTopicsListResult{
			Value: []*armeventgrid.SystemTopic{
				{
					Name:     to.Ptr("pubstgrunnerb71cd29e-86fad330-7bac-4238-8cab-9e46b75165aa"),
					Type:     to.Ptr("Microsoft.EventGrid/systemTopics"),
					ID:       to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/pubstgrunnerb71cd29e-86fad330-7bac-4238-8cab-9e46b75165aa"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armeventgrid.SystemTopicProperties{
						MetricResourceID:  to.Ptr("183c0fb1-17ff-47b6-ac77-5a47420ab01e"),
						ProvisioningState: to.Ptr(armeventgrid.ResourceProvisioningStateSucceeded),
						Source:            to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/azureeventgridrunnerrgcentraluseuap/providers/microsoft.storage/storageaccounts/pubstgrunnerb71cd29e"),
						TopicType:         to.Ptr("microsoft.storage.storageaccounts"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SystemTopicsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SystemTopicsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/SystemTopics_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensionTopics_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/ExtensionTopics_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExtensionTopics_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewExtensionTopicsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.storage/storageaccounts/exampleResourceName/providers/Microsoft.eventgrid/extensionTopics/default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/ExtensionTopics_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.ExtensionTopic{
			Name: to.Ptr("default"),
			Type: to.Ptr("providers/Microsoft.EventGrid/extensionTopics"),
			ID:   to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.storage/storageaccounts/exampleResourceName/providers/Microsoft.eventgrid/extensionTopics/default"),
			Properties: &armeventgrid.ExtensionTopicProperties{
				Description: to.Ptr("Extension topic for /subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/microsoft.storage/storageaccounts/exampleResourceName/providers/Microsoft.eventgrid/extensionTopics/default that can be used to obtain metrics"),
				SystemTopic: to.Ptr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/systemTopics/exampleResourceName-2a41650f-00dd-4790-b3ab-dabd12d227cb"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtensionTopic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtensionTopic)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/ExtensionTopics_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopicTypes_List(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TopicTypes_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicTypesClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.TopicTypesListResult{
			Value: []*armeventgrid.TopicTypeInfo{
				{
					Name: to.Ptr("Microsoft.Eventhub.Namespaces"),
					Type: to.Ptr("Microsoft.EventGrid/topicTypes"),
					ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Eventhub.Namespaces"),
					Properties: &armeventgrid.TopicTypeProperties{
						Description:        to.Ptr("Microsoft EventHubs service events."),
						DisplayName:        to.Ptr("EventHubs Namespace"),
						Provider:           to.Ptr("Microsoft.Eventhub"),
						ProvisioningState:  to.Ptr(armeventgrid.TopicTypeProvisioningStateSucceeded),
						ResourceRegionType: to.Ptr(armeventgrid.ResourceRegionTypeRegionalResource),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage.StorageAccounts"),
					Type: to.Ptr("Microsoft.EventGrid/topicTypes"),
					ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Storage.StorageAccounts"),
					Properties: &armeventgrid.TopicTypeProperties{
						Description:        to.Ptr("Microsoft Storage service events."),
						DisplayName:        to.Ptr("Storage Accounts"),
						Provider:           to.Ptr("Microsoft.Storage"),
						ProvisioningState:  to.Ptr(armeventgrid.TopicTypeProvisioningStateSucceeded),
						ResourceRegionType: to.Ptr(armeventgrid.ResourceRegionTypeRegionalResource),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopicTypesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopicTypesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopicTypes_Get(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TopicTypes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicTypesClient(cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Storage.StorageAccounts",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armeventgrid.TopicTypeInfo{
			Name: to.Ptr("Microsoft.Storage.StorageAccounts"),
			Type: to.Ptr("Microsoft.EventGrid/topicTypes"),
			ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Storage.StorageAccounts"),
			Properties: &armeventgrid.TopicTypeProperties{
				Description:        to.Ptr("Microsoft Storage service events."),
				DisplayName:        to.Ptr("Storage Accounts"),
				Provider:           to.Ptr("Microsoft.Storage"),
				ProvisioningState:  to.Ptr(armeventgrid.TopicTypeProvisioningStateSucceeded),
				ResourceRegionType: to.Ptr(armeventgrid.ResourceRegionTypeRegionalResource),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TopicTypeInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TopicTypeInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopicTypes_ListEventTypes(t *testing.T) {
	// From example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_ListEventTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TopicTypes_ListEventTypes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armeventgrid.NewTopicTypesClient(cred, &options)
	pager := client.ListEventTypes("Microsoft.Storage.StorageAccounts",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_ListEventTypes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armeventgrid.EventTypesListResult{
			Value: []*armeventgrid.EventType{
				{
					Name: to.Ptr("Microsoft.Storage.BlobCreated"),
					Type: to.Ptr("Microsoft.EventGrid/topicTypes/eventTypes"),
					ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Storage.StorageAccounts/eventTypes/Microsoft.Storage.BlobCreated"),
					Properties: &armeventgrid.EventTypeProperties{
						Description: to.Ptr("Raised when a blob is created."),
						DisplayName: to.Ptr("Blob Created"),
						SchemaURL:   to.Ptr("tbd"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage.BlobDeleted"),
					Type: to.Ptr("Microsoft.EventGrid/topicTypes/eventTypes"),
					ID:   to.Ptr("providers/Microsoft.EventGrid/topicTypes/Microsoft.Storage.StorageAccounts/eventTypes/Microsoft.Storage.BlobDeleted"),
					Properties: &armeventgrid.EventTypeProperties{
						Description: to.Ptr("Raised when a blob is deleted."),
						DisplayName: to.Ptr("Blob Deleted"),
						SchemaURL:   to.Ptr("tbd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventTypesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventTypesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2021-12-01/examples/TopicTypes_ListEventTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
