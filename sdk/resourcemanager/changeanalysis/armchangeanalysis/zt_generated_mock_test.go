//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchangeanalysis_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/changeanalysis/armchangeanalysis"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchangeanalysis.NewOperationsClient(cred, &options)
	pager := client.List(&armchangeanalysis.OperationsClientListOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchangeanalysis.ResourceProviderOperationList{
			Value: []*armchangeanalysis.ResourceProviderOperationDefinition{
				{
					Name: to.Ptr("Microsoft.ChangeAnalysis/register/action"),
					Display: &armchangeanalysis.ResourceProviderOperationDisplay{
						Operation: to.Ptr("Register Microsoft Change Analysis resource provider with a subscriptions"),
						Provider:  to.Ptr("Microsoft Change Analysis"),
						Resource:  to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("Microsoft.ChangeAnalysis/changes/read"),
					Display: &armchangeanalysis.ResourceProviderOperationDisplay{
						Operation: to.Ptr("Read Azure Application Change Analysis Servie Change"),
						Provider:  to.Ptr("Microsoft Change Analysis"),
						Resource:  to.Ptr("Azure Application Change Analysis Service Change"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceChanges_List(t *testing.T) {
	// From example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ResourceChangesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceChanges_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchangeanalysis.NewResourceChangesClient(cred, &options)
	pager := client.List("subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite",
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-25T12:09:03.141Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T12:09:03.141Z"); return t }(),
		&armchangeanalysis.ResourceChangesClientListOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ResourceChangesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchangeanalysis.ChangeList{
			Value: []*armchangeanalysis.Change{
				{
					Name: to.Ptr("ARG_23fa00fd-dda0-4268-b482-2076825cf165_970d8c6d-6b78-4270-92ef-88d5aa2b5f0b_132316363294700000_132316498613900000"),
					Type: to.Ptr("Microsoft.ChangeAnalysis/resourceChanges"),
					ID:   to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite/providers/Microsoft.ChangeAnalysis/resourceChanges/ARG_23fa00fd-dda0-4268-b482-2076825cf165_970d8c6d-6b78-4270-92ef-88d5aa2b5f0b_132316363294700000_132316498613900000"),
					Properties: &armchangeanalysis.ChangeProperties{
						ChangeType: to.Ptr(armchangeanalysis.ChangeTypeUpdate),
						InitiatedByList: []*string{
							to.Ptr("ellen@contoso.com")},
						PropertyChanges: []*armchangeanalysis.PropertyChange{
							{
								Description:    to.Ptr("The thumbprint of the certificate"),
								ChangeCategory: to.Ptr(armchangeanalysis.ChangeCategoryUser),
								ChangeType:     to.Ptr(armchangeanalysis.ChangeTypeUpdate),
								DisplayName:    to.Ptr("publicCertificates[\"AppCert\"].properties.thumbprint"),
								IsDataMasked:   to.Ptr(false),
								JSONPath:       to.Ptr("value[1].properties.thumbprint"),
								Level:          to.Ptr(armchangeanalysis.LevelImportant),
								NewValue:       to.Ptr("3F2DF554-B063-4383-8BD3-4970BCF20A7E"),
								OldValue:       to.Ptr("21D0482F-E91E-4C14-8078-65BFDCDBCA64"),
							}},
						ResourceID: to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite"),
						TimeStamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T02:17:41.39Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("AST_b2ecd7ec-00dd-4d44-bd19-fefc88790c05_da36e22e-f541-44bd-8d89-8f10a27af4ad_132592897881782408_132592957873393845"),
					Type: to.Ptr("Microsoft.ChangeAnalysis/changes"),
					ID:   to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite/extensions/AppStateTracker/providers/Microsoft.ChangeAnalysis/resourceChanges/AST_b2ecd7ec-00dd-4d44-bd19-fefc88790c05_da36e22e-f541-44bd-8d89-8f10a27af4ad_132592897881782408_132592957873393845"),
					Properties: &armchangeanalysis.ChangeProperties{
						ChangeType: to.Ptr(armchangeanalysis.ChangeTypeUpdate),
						InitiatedByList: []*string{
							to.Ptr("ellen@contoso.com")},
						PropertyChanges: []*armchangeanalysis.PropertyChange{
							{
								Description:    to.Ptr("Application setting"),
								ChangeCategory: to.Ptr(armchangeanalysis.ChangeCategoryUser),
								ChangeType:     to.Ptr(armchangeanalysis.ChangeTypeUpdate),
								DisplayName:    to.Ptr("APPSETTING_DB_CONNSTR"),
								IsDataMasked:   to.Ptr(false),
								JSONPath:       to.Ptr("environment.environmentVariables.APPSETTING_DB_CONNSTR"),
								Level:          to.Ptr(armchangeanalysis.LevelImportant),
								NewValue:       to.Ptr("<new database connection string>"),
								OldValue:       to.Ptr("<old database connection string>"),
							}},
						ResourceID: to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite"),
						TimeStamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T02:17:41.39Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ChangeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ChangeList)
			t.Fatalf("Mock response is not equal to example response for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ResourceChangesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChanges_ListChangesByResourceGroup(t *testing.T) {
	// From example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ChangesListChangesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Changes_ListChangesByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchangeanalysis.NewChangesClient("4d962866-1e3f-47f2-bd18-450c08f914c1", cred, &options)
	pager := client.ListChangesByResourceGroup("MyResourceGroup",
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-25T12:09:03.141Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T12:09:03.141Z"); return t }(),
		&armchangeanalysis.ChangesClientListChangesByResourceGroupOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ChangesListChangesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchangeanalysis.ChangeList{
			Value: []*armchangeanalysis.Change{
				{
					Name: to.Ptr("ARG_23fa00fd-dda0-4268-b482-2076825cf165_970d8c6d-6b78-4270-92ef-88d5aa2b5f0b_132316363294700000_132316498613900000"),
					Type: to.Ptr("Microsoft.ChangeAnalysis/changes"),
					ID:   to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup"),
					Properties: &armchangeanalysis.ChangeProperties{
						ChangeType: to.Ptr(armchangeanalysis.ChangeTypeUpdate),
						InitiatedByList: []*string{
							to.Ptr("ellen@contoso.com")},
						PropertyChanges: []*armchangeanalysis.PropertyChange{
							{
								Description:    to.Ptr("The tag of the resource"),
								ChangeCategory: to.Ptr(armchangeanalysis.ChangeCategoryUser),
								ChangeType:     to.Ptr(armchangeanalysis.ChangeTypeUpdate),
								DisplayName:    to.Ptr("tags.resourceGroupTag"),
								IsDataMasked:   to.Ptr(false),
								JSONPath:       to.Ptr("tags.resourceGroupTag"),
								Level:          to.Ptr(armchangeanalysis.LevelImportant),
								NewValue:       to.Ptr("new tag value"),
								OldValue:       to.Ptr("old tag value"),
							}},
						ResourceID: to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup"),
						TimeStamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T02:17:41.39Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("AST_b2ecd7ec-00dd-4d44-bd19-fefc88790c05_da36e22e-f541-44bd-8d89-8f10a27af4ad_132592897881782408_132592957873393845"),
					Type: to.Ptr("Microsoft.ChangeAnalysis/changes"),
					ID:   to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite/extensions/AppStateTracker/providers/Microsoft.ChangeAnalysis/changes/AST_b2ecd7ec-00dd-4d44-bd19-fefc88790c05_da36e22e-f541-44bd-8d89-8f10a27af4ad_132592897881782408_132592957873393845"),
					Properties: &armchangeanalysis.ChangeProperties{
						ChangeType: to.Ptr(armchangeanalysis.ChangeTypeUpdate),
						InitiatedByList: []*string{
							to.Ptr("ellen@contoso.com")},
						PropertyChanges: []*armchangeanalysis.PropertyChange{
							{
								Description:    to.Ptr("Application setting"),
								ChangeCategory: to.Ptr(armchangeanalysis.ChangeCategoryUser),
								ChangeType:     to.Ptr(armchangeanalysis.ChangeTypeUpdate),
								DisplayName:    to.Ptr("APPSETTING_DB_CONNSTR"),
								IsDataMasked:   to.Ptr(true),
								JSONPath:       to.Ptr("environment.environmentVariables.APPSETTING_DB_CONNSTR"),
								Level:          to.Ptr(armchangeanalysis.LevelImportant),
								NewValue:       to.Ptr("***New Value Hidden***"),
								OldValue:       to.Ptr("***Old Value Hidden***"),
							}},
						ResourceID: to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite"),
						TimeStamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T02:17:41.39Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ChangeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ChangeList)
			t.Fatalf("Mock response is not equal to example response for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ChangesListChangesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChanges_ListChangesBySubscription(t *testing.T) {
	// From example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ChangesListChangesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Changes_ListChangesBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchangeanalysis.NewChangesClient("4d962866-1e3f-47f2-bd18-450c08f914c1", cred, &options)
	pager := client.ListChangesBySubscription(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-25T12:09:03.141Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T12:09:03.141Z"); return t }(),
		&armchangeanalysis.ChangesClientListChangesBySubscriptionOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ChangesListChangesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchangeanalysis.ChangeList{
			Value: []*armchangeanalysis.Change{
				{
					Name: to.Ptr("ARG_23fa00fd-dda0-4268-b482-2076825cf165_970d8c6d-6b78-4270-92ef-88d5aa2b5f0b_132316363294700000_132316498613900000"),
					Type: to.Ptr("Microsoft.ChangeAnalysis/changes"),
					ID:   to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1"),
					Properties: &armchangeanalysis.ChangeProperties{
						ChangeType: to.Ptr(armchangeanalysis.ChangeTypeUpdate),
						InitiatedByList: []*string{
							to.Ptr("ellen@contoso.com")},
						PropertyChanges: []*armchangeanalysis.PropertyChange{
							{
								Description:    to.Ptr("The tag of the resource"),
								ChangeCategory: to.Ptr(armchangeanalysis.ChangeCategoryUser),
								ChangeType:     to.Ptr(armchangeanalysis.ChangeTypeUpdate),
								DisplayName:    to.Ptr("tags.subscripitonTag"),
								IsDataMasked:   to.Ptr(false),
								JSONPath:       to.Ptr("tags.subscripitonTag"),
								Level:          to.Ptr(armchangeanalysis.LevelImportant),
								NewValue:       to.Ptr("new tag value"),
								OldValue:       to.Ptr("old tag value"),
							}},
						ResourceID: to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1"),
						TimeStamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T02:17:41.39Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("AST_b2ecd7ec-00dd-4d44-bd19-fefc88790c05_da36e22e-f541-44bd-8d89-8f10a27af4ad_132592897881782408_132592957873393845"),
					Type: to.Ptr("Microsoft.ChangeAnalysis/changes"),
					ID:   to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite/extensions/AppStateTracker/providers/Microsoft.ChangeAnalysis/changes/AST_b2ecd7ec-00dd-4d44-bd19-fefc88790c05_da36e22e-f541-44bd-8d89-8f10a27af4ad_132592897881782408_132592957873393845"),
					Properties: &armchangeanalysis.ChangeProperties{
						ChangeType: to.Ptr(armchangeanalysis.ChangeTypeUpdate),
						InitiatedByList: []*string{
							to.Ptr("ellen@contoso.com")},
						PropertyChanges: []*armchangeanalysis.PropertyChange{
							{
								Description:    to.Ptr("Application setting"),
								ChangeCategory: to.Ptr(armchangeanalysis.ChangeCategoryUser),
								ChangeType:     to.Ptr(armchangeanalysis.ChangeTypeUpdate),
								DisplayName:    to.Ptr("APPSETTING_DB_CONNSTR"),
								IsDataMasked:   to.Ptr(true),
								JSONPath:       to.Ptr("environment.environmentVariables.APPSETTING_DB_CONNSTR"),
								Level:          to.Ptr(armchangeanalysis.LevelImportant),
								NewValue:       to.Ptr("***New Value Hidden***"),
								OldValue:       to.Ptr("***Old Value Hidden***"),
							}},
						ResourceID: to.Ptr("/subscriptions/4d962866-1e3f-47f2-bd18-450c08f914c1/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/mysite"),
						TimeStamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-26T02:17:41.39Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ChangeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ChangeList)
			t.Fatalf("Mock response is not equal to example response for example specification/changeanalysis/resource-manager/Microsoft.ChangeAnalysis/stable/2021-04-01/examples/ChangesListChangesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
