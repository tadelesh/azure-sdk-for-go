//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdns

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestRecordSets_Update(t *testing.T) {
	// From example Patch A recordset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch AAAA recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeAAAA,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch CAA recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCAA,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch CNAME recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCNAME,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch MX recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeMX,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch NS recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeNS,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch PTR recordset
	res, err = client.Update(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		RecordTypePTR,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch SOA recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"@",
		RecordTypeSOA,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch SRV recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeSRV,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Patch TXT recordset
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeTXT,
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}
}

func TestRecordSets_CreateOrUpdate(t *testing.T) {
	// From example Create A recordset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		RecordSet{
			Properties: &RecordSetProperties{
				ARecords: []*ARecord{
					{
						IPv4Address: to.StringPtr("127.0.0.1"),
					}},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create A recordset with alias target resource
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		RecordSet{
			Properties: &RecordSetProperties{
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				TargetResource: &SubResource{
					ID: to.StringPtr("/subscriptions/726f8cd6-6459-4db4-8e6d-2cd2716904e2/resourceGroups/test/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create AAAA recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeAAAA,
		RecordSet{
			Properties: &RecordSetProperties{
				AaaaRecords: []*AaaaRecord{
					{
						IPv6Address: to.StringPtr("::1"),
					}},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create CAA recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCAA,
		RecordSet{
			Properties: &RecordSetProperties{
				TTL: to.Int64Ptr(3600),
				CaaRecords: []*CaaRecord{
					{
						Flags: to.Int32Ptr(0),
						Tag:   to.StringPtr("issue"),
						Value: to.StringPtr("ca.contoso.com"),
					}},
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create CNAME recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCNAME,
		RecordSet{
			Properties: &RecordSetProperties{
				CnameRecord: &CnameRecord{
					Cname: to.StringPtr("contoso.com"),
				},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create MX recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeMX,
		RecordSet{
			Properties: &RecordSetProperties{
				MxRecords: []*MxRecord{
					{
						Exchange:   to.StringPtr("mail.contoso.com"),
						Preference: to.Int32Ptr(0),
					}},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create NS recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeNS,
		RecordSet{
			Properties: &RecordSetProperties{
				NsRecords: []*NsRecord{
					{
						Nsdname: to.StringPtr("ns1.contoso.com"),
					}},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create PTR recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		RecordTypePTR,
		RecordSet{
			Properties: &RecordSetProperties{
				PtrRecords: []*PtrRecord{
					{
						Ptrdname: to.StringPtr("localhost"),
					}},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create SOA recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"@",
		RecordTypeSOA,
		RecordSet{
			Properties: &RecordSetProperties{
				SoaRecord: &SoaRecord{
					Email:        to.StringPtr("hostmaster.contoso.com"),
					ExpireTime:   to.Int64Ptr(2419200),
					Host:         to.StringPtr("ns1.contoso.com"),
					MinimumTTL:   to.Int64Ptr(300),
					RefreshTime:  to.Int64Ptr(3600),
					RetryTime:    to.Int64Ptr(300),
					SerialNumber: to.Int64Ptr(1),
				},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create SRV recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeSRV,
		RecordSet{
			Properties: &RecordSetProperties{
				SrvRecords: []*SrvRecord{
					{
						Port:     to.Int32Ptr(80),
						Priority: to.Int32Ptr(0),
						Target:   to.StringPtr("contoso.com"),
						Weight:   to.Int32Ptr(10),
					}},
				TTL: to.Int64Ptr(3600),
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Create TXT recordset
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeTXT,
		RecordSet{
			Properties: &RecordSetProperties{
				TTL: to.Int64Ptr(3600),
				TxtRecords: []*TxtRecord{
					{
						Value: []*string{
							to.StringPtr("string1"),
							to.StringPtr("string2")},
					}},
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}
}

func TestRecordSets_Delete(t *testing.T) {
	// From example Delete A recordset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete AAAA recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeAAAA,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete CAA recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCAA,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete CNAME recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete MX recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete NS recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete PTR recordset
	_, err = client.Delete(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		RecordTypePTR,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete SRV recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeSRV,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete TXT recordset
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeTXT,
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecordSets_Get(t *testing.T) {
	// From example Get A recordset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeA,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get AAAA recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeAAAA,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get CAA recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCAA,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get CNAME recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeCNAME,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get MX recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeMX,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get NS recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeNS,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get PTR recordset
	res, err = client.Get(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		RecordTypePTR,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get SOA recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"@",
		RecordTypeSOA,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get SRV recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeSRV,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example Get TXT recordset
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		RecordTypeTXT,
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}
}

func TestRecordSets_ListByType(t *testing.T) {
	// From example List A recordsets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	pager := client.ListByType("rg1",
		"zone1",
		RecordTypeA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List AAAA recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeAAAA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List CAA recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeCAA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List CNAME recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeCNAME,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List MX recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeMX,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List NS recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeNS,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List PTR recordsets
	pager = client.ListByType("rg1",
		"0.0.127.in-addr.arpa",
		RecordTypePTR,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List SOA recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeSOA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List SRV recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeSRV,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example List TXT recordsets
	pager = client.ListByType("rg1",
		"zone1",
		RecordTypeTXT,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}
}

func TestRecordSets_ListByDnsZone(t *testing.T) {
	// From example List recordsets by zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	pager := client.ListByDNSZone("rg1",
		"zone1",
		&RecordSetsListByDNSZoneOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}
}

func TestRecordSets_ListAllByDnsZone(t *testing.T) {
	// From example List recordsets by zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subid")
	pager := client.ListAllByDNSZone("rg1",
		"zone1",
		&RecordSetsListAllByDNSZoneOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}
}

func TestZones_CreateOrUpdate(t *testing.T) {
	// From example Create zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewZonesClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		Zone{
			Resource: Resource{
				Location: to.StringPtr("Global"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&ZonesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Zone.ID == nil {
		t.Fatal("Zone.ID should not be nil!")
	}
}

func TestZones_Delete(t *testing.T) {
	// From example Delete zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewZonesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"zone1",
		&ZonesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestZones_Get(t *testing.T) {
	// From example Get zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewZonesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"zone1",
		&ZonesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Zone.ID == nil {
		t.Fatal("Zone.ID should not be nil!")
	}
}

func TestZones_Update(t *testing.T) {
	// From example Patch zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewZonesClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"zone1",
		ZoneUpdate{
			Tags: map[string]*string{
				"key2": to.StringPtr("value2"),
			},
		},
		&ZonesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Zone.ID == nil {
		t.Fatal("Zone.ID should not be nil!")
	}
}

func TestZones_ListByResourceGroup(t *testing.T) {
	// From example List zones by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewZonesClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&ZonesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Zone.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Zone.ID should not be nil!")
			}
		}
	}
}

func TestZones_List(t *testing.T) {
	// From example List zones by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewZonesClient(con,
		"subid")
	pager := client.List(&ZonesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Zone.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Zone.ID should not be nil!")
			}
		}
	}
}

func TestDnsResourceReference_GetByTargetResources(t *testing.T) {
	// From example List zones by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDNSResourceReferenceClient(con,
		"subid")
	_, err := client.GetByTargetResources(ctx,
		DNSResourceReferenceRequest{
			Properties: &DNSResourceReferenceRequestProperties{
				TargetResources: []*SubResource{
					{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
					}},
			},
		},
		&DNSResourceReferenceGetByTargetResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
