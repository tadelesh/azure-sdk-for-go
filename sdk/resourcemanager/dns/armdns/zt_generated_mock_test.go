//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdns_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dns/armdns"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestRecordSets_Update(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch A recordset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewRecordSetsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/A"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/A/record1"),
			Properties: &armdns.RecordSetProperties{
				ARecords: []*armdns.ARecord{
					{
						IPv4Address: to.Ptr("127.0.0.1"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchAAAARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch AAAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeAAAA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchAAAARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/AAAA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/AAAA/record1"),
			Properties: &armdns.RecordSetProperties{
				AaaaRecords: []*armdns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchAAAARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCaaRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch CAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCAA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCaaRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/CAA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CAA/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				CaaRecords: []*armdns.CaaRecord{
					{
						Flags: to.Ptr[int32](0),
						Tag:   to.Ptr("issue"),
						Value: to.Ptr("ca.contoso.com"),
					}},
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCaaRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCNAMERecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch CNAME recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCNAME,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCNAMERecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/CNAME"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CNAME/record1"),
			Properties: &armdns.RecordSetProperties{
				CnameRecord: &armdns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCNAMERecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchMXRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch MX recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeMX,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchMXRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/MX"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/MX/record1"),
			Properties: &armdns.RecordSetProperties{
				MxRecords: []*armdns.MxRecord{
					{
						Exchange:   to.Ptr("mail.contoso.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchMXRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchNSRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch NS recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeNS,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchNSRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/NS"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/NS/record1"),
			Properties: &armdns.RecordSetProperties{
				NsRecords: []*armdns.NsRecord{
					{
						Nsdname: to.Ptr("ns1.contoso.com"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchNSRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchPTRRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch PTR recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		armdns.RecordTypePTR,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchPTRRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/PTR"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/0.0.127.in-addr.arpa/PTR/1"),
			Properties: &armdns.RecordSetProperties{
				PtrRecords: []*armdns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("1.0.0.127.in-addr.arpa"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchPTRRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSOARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch SOA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"@",
		armdns.RecordTypeSOA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSOARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("@"),
			Type: to.Ptr("Microsoft.Network/dnsZones/SOA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SOA/@"),
			Properties: &armdns.RecordSetProperties{
				SoaRecord: &armdns.SoaRecord{
					Email:        to.Ptr("hostmaster.contoso.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("ns1.contoso.com"),
					MinimumTTL:   to.Ptr[int64](300),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSOARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSRVRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch SRV recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeSRV,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSRVRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/SRV"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SRV/record1"),
			Properties: &armdns.RecordSetProperties{
				SrvRecords: []*armdns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSRVRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchTXTRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch TXT recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeTXT,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armdns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchTXTRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/TXT"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/TXT/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armdns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchTXTRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_CreateOrUpdate(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create A recordset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewRecordSetsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				ARecords: []*armdns.ARecord{
					{
						IPv4Address: to.Ptr("127.0.0.1"),
					}},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/A"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/A/record1"),
			Properties: &armdns.RecordSetProperties{
				ARecords: []*armdns.ARecord{
					{
						IPv4Address: to.Ptr("127.0.0.1"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordsetAlias.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create A recordset with alias target resource"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TargetResource: &armdns.SubResource{
					ID: to.Ptr("/subscriptions/726f8cd6-6459-4db4-8e6d-2cd2716904e2/resourceGroups/test/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordsetAlias.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/A"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/A/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				TargetResource: &armdns.SubResource{
					ID: to.Ptr("/subscriptions/726f8cd6-6459-4db4-8e6d-2cd2716904e2/resourceGroups/test/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateARecordsetAlias.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateAAAARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create AAAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeAAAA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				AaaaRecords: []*armdns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateAAAARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/AAAA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/AAAA/record1"),
			Properties: &armdns.RecordSetProperties{
				AaaaRecords: []*armdns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateAAAARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCaaRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create CAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCAA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				CaaRecords: []*armdns.CaaRecord{
					{
						Flags: to.Ptr[int32](0),
						Tag:   to.Ptr("issue"),
						Value: to.Ptr("ca.contoso.com"),
					}},
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCaaRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/CAA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CAA/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				CaaRecords: []*armdns.CaaRecord{
					{
						Flags: to.Ptr[int32](0),
						Tag:   to.Ptr("issue"),
						Value: to.Ptr("ca.contoso.com"),
					}},
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCaaRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCNAMERecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create CNAME recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCNAME,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				CnameRecord: &armdns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCNAMERecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/CNAME"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CNAME/record1"),
			Properties: &armdns.RecordSetProperties{
				CnameRecord: &armdns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateCNAMERecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateMXRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create MX recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeMX,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				MxRecords: []*armdns.MxRecord{
					{
						Exchange:   to.Ptr("mail.contoso.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateMXRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/MX"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/MX/record1"),
			Properties: &armdns.RecordSetProperties{
				MxRecords: []*armdns.MxRecord{
					{
						Exchange:   to.Ptr("mail.contoso.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateMXRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateNSRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create NS recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeNS,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				NsRecords: []*armdns.NsRecord{
					{
						Nsdname: to.Ptr("ns1.contoso.com"),
					}},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateNSRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/NS"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/NS/record1"),
			Properties: &armdns.RecordSetProperties{
				NsRecords: []*armdns.NsRecord{
					{
						Nsdname: to.Ptr("ns1.contoso.com"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateNSRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdatePTRRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create PTR recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		armdns.RecordTypePTR,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				PtrRecords: []*armdns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdatePTRRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/PTR"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/0.0.127.in-addr.arpa/PTR/1"),
			Properties: &armdns.RecordSetProperties{
				PtrRecords: []*armdns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("1.0.0.127.in-addr.arpa"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdatePTRRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSOARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create SOA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"@",
		armdns.RecordTypeSOA,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				SoaRecord: &armdns.SoaRecord{
					Email:        to.Ptr("hostmaster.contoso.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("ns1.contoso.com"),
					MinimumTTL:   to.Ptr[int64](300),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSOARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("@"),
			Type: to.Ptr("Microsoft.Network/dnsZones/SOA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SOA/@"),
			Properties: &armdns.RecordSetProperties{
				SoaRecord: &armdns.SoaRecord{
					Email:        to.Ptr("hostmaster.contoso.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("ns1.contoso.com"),
					MinimumTTL:   to.Ptr[int64](300),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSOARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSRVRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create SRV recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeSRV,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				SrvRecords: []*armdns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL: to.Ptr[int64](3600),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSRVRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/SRV"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SRV/record1"),
			Properties: &armdns.RecordSetProperties{
				SrvRecords: []*armdns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateSRVRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateTXTRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create TXT recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeTXT,
		armdns.RecordSet{
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armdns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		},
		&armdns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateTXTRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/TXT"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/TXT/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armdns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateTXTRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_Delete(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete A recordset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewRecordSetsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteAAAARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete AAAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeAAAA,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteAAAARecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteCaaRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete CAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCAA,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteCaaRecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete CNAME recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete MX recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete NS recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteARecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeletePTRRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete PTR recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		armdns.RecordTypePTR,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeletePTRRecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteSRVRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete SRV recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeSRV,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteSRVRecordset.json: %v", err)
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteTXTRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete TXT recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	_, err = client.Delete(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeTXT,
		&armdns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteTXTRecordset.json: %v", err)
	}
}

func TestRecordSets_Get(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get A recordset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewRecordSetsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeA,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/A"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/A/record1"),
			Properties: &armdns.RecordSetProperties{
				ARecords: []*armdns.ARecord{
					{
						IPv4Address: to.Ptr("127.0.0.1"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetAAAARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get AAAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeAAAA,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetAAAARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/AAAA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/AAAA/record1"),
			Properties: &armdns.RecordSetProperties{
				AaaaRecords: []*armdns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetAAAARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCaaRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get CAA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCAA,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCaaRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/CAA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CAA/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				CaaRecords: []*armdns.CaaRecord{
					{
						Flags: to.Ptr[int32](0),
						Tag:   to.Ptr("issue"),
						Value: to.Ptr("ca.contoso.com"),
					}},
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCaaRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCNAMERecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get CNAME recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeCNAME,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCNAMERecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/CNAME"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CNAME/record1"),
			Properties: &armdns.RecordSetProperties{
				CnameRecord: &armdns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetCNAMERecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetMXRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get MX recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeMX,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetMXRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/MX"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/MX/record1"),
			Properties: &armdns.RecordSetProperties{
				MxRecords: []*armdns.MxRecord{
					{
						Exchange:   to.Ptr("mail.contoso.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetMXRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetNSRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get NS recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeNS,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetNSRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/NS"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/NS/record1"),
			Properties: &armdns.RecordSetProperties{
				NsRecords: []*armdns.NsRecord{
					{
						Nsdname: to.Ptr("ns1.contoso.com"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetNSRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetPTRRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get PTR recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"0.0.127.in-addr.arpa",
		"1",
		armdns.RecordTypePTR,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetPTRRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/PTR"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/0.0.127.in-addr.arpa/PTR/1"),
			Properties: &armdns.RecordSetProperties{
				PtrRecords: []*armdns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("1.0.0.127.in-addr.arpa"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetPTRRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSOARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get SOA recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"@",
		armdns.RecordTypeSOA,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSOARecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("@"),
			Type: to.Ptr("Microsoft.Network/dnsZones/SOA"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SOA/@"),
			Properties: &armdns.RecordSetProperties{
				SoaRecord: &armdns.SoaRecord{
					Email:        to.Ptr("hostmaster.contoso.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("ns1.contoso.com"),
					MinimumTTL:   to.Ptr[int64](300),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSOARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSRVRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get SRV recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeSRV,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSRVRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/SRV"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SRV/record1"),
			Properties: &armdns.RecordSetProperties{
				SrvRecords: []*armdns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL:  to.Ptr[int64](3600),
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetSRVRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetTXTRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get TXT recordset"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"zone1",
		"record1",
		armdns.RecordTypeTXT,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetTXTRecordset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.RecordSet{
			Name: to.Ptr("record1"),
			Type: to.Ptr("Microsoft.Network/dnsZones/TXT"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/TXT/record1"),
			Properties: &armdns.RecordSetProperties{
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armdns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
				Fqdn: to.Ptr("record1.zone1"),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetTXTRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_ListByType(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List A recordsets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewRecordSetsClient("subid", cred, &options)
	pager := client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeA,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListARecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/A"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/A/record1"),
					Properties: &armdns.RecordSetProperties{
						ARecords: []*armdns.ARecord{
							{
								IPv4Address: to.Ptr("127.0.0.1"),
							}},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListAAAARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List AAAA recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeAAAA,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListAAAARecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/AAAA"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/AAAA/record1"),
					Properties: &armdns.RecordSetProperties{
						AaaaRecords: []*armdns.AaaaRecord{
							{
								IPv6Address: to.Ptr("::1"),
							}},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListAAAARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCaaRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List CAA recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeCAA,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCaaRecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/CAA"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CAA/record1"),
					Properties: &armdns.RecordSetProperties{
						TTL: to.Ptr[int64](3600),
						CaaRecords: []*armdns.CaaRecord{
							{
								Flags: to.Ptr[int32](0),
								Tag:   to.Ptr("issue"),
								Value: to.Ptr("ca.contoso.com"),
							}},
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCaaRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCNAMERecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List CNAME recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeCNAME,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCNAMERecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/CNAME"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/CNAME/record1"),
					Properties: &armdns.RecordSetProperties{
						CnameRecord: &armdns.CnameRecord{
							Cname: to.Ptr("contoso.com"),
						},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListCNAMERecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListMXRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List MX recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeMX,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListMXRecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/MX"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/MX/record1"),
					Properties: &armdns.RecordSetProperties{
						MxRecords: []*armdns.MxRecord{
							{
								Exchange:   to.Ptr("mail.contoso.com"),
								Preference: to.Ptr[int32](0),
							}},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListMXRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListNSRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List NS recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeNS,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListNSRecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/NS"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/NS/record1"),
					Properties: &armdns.RecordSetProperties{
						NsRecords: []*armdns.NsRecord{
							{
								Nsdname: to.Ptr("ns1.contoso.com"),
							}},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListNSRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListPTRRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List PTR recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"0.0.127.in-addr.arpa",
		armdns.RecordTypePTR,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListPTRRecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/PTR"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/0.0.127.in-addr.arpa/PTR/1"),
					Properties: &armdns.RecordSetProperties{
						PtrRecords: []*armdns.PtrRecord{
							{
								Ptrdname: to.Ptr("localhost"),
							}},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("1.0.0.127.in-addr.arpa"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListPTRRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSOARecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List SOA recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeSOA,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSOARecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("@"),
					Type: to.Ptr("Microsoft.Network/dnsZones/SOA"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SOA/@"),
					Properties: &armdns.RecordSetProperties{
						SoaRecord: &armdns.SoaRecord{
							Email:        to.Ptr("hostmaster.contoso.com"),
							ExpireTime:   to.Ptr[int64](2419200),
							Host:         to.Ptr("ns1.contoso.com"),
							MinimumTTL:   to.Ptr[int64](300),
							RefreshTime:  to.Ptr[int64](3600),
							RetryTime:    to.Ptr[int64](300),
							SerialNumber: to.Ptr[int64](1),
						},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSOARecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSRVRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List SRV recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeSRV,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSRVRecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/SRV"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/SRV/record1"),
					Properties: &armdns.RecordSetProperties{
						SrvRecords: []*armdns.SrvRecord{
							{
								Port:     to.Ptr[int32](80),
								Priority: to.Ptr[int32](0),
								Target:   to.Ptr("contoso.com"),
								Weight:   to.Ptr[int32](10),
							}},
						TTL:  to.Ptr[int64](3600),
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListSRVRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListTXTRecordset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List TXT recordsets"},
	})
	client = armdns.NewRecordSetsClient("subid", cred, &options)
	pager = client.ListByType("rg1",
		"zone1",
		armdns.RecordTypeTXT,
		&armdns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListTXTRecordset.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.RecordSetListResult{
			Value: []*armdns.RecordSet{
				{
					Name: to.Ptr("record1"),
					Type: to.Ptr("Microsoft.Network/dnsZones/TXT"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/TXT/record1"),
					Properties: &armdns.RecordSetProperties{
						TTL: to.Ptr[int64](3600),
						TxtRecords: []*armdns.TxtRecord{
							{
								Value: []*string{
									to.Ptr("string1"),
									to.Ptr("string2")},
							}},
						Fqdn: to.Ptr("record1.zone1"),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListTXTRecordset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestZones_CreateOrUpdate(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateZone.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewZonesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"zone1",
		armdns.Zone{
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
		},
		&armdns.ZonesClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateZone.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.Zone{
			Name:     to.Ptr("zone1"),
			Type:     to.Ptr("Microsoft.Network/dnsZones"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armdns.ZoneProperties{
				MaxNumberOfRecordSets: to.Ptr[int64](5000),
				NameServers: []*string{
					to.Ptr("ns1-01.azure-dns.com"),
					to.Ptr("ns2-01.azure-dns.net"),
					to.Ptr("ns3-01.azure-dns.org"),
					to.Ptr("ns4-01.azure-dns.info")},
				NumberOfRecordSets: to.Ptr[int64](2),
				ZoneType:           to.Ptr(armdns.ZoneTypePublic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Zone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Zone)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/CreateOrUpdateZone.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestZones_Delete(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteZone.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewZonesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"zone1",
		&armdns.ZonesClientBeginDeleteOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteZone.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/DeleteZone.json: %v", err)
	}
}

func TestZones_Get(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetZone.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewZonesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"zone1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetZone.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.Zone{
			Name:     to.Ptr("zone1"),
			Type:     to.Ptr("Microsoft.Network/dnsZones"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armdns.ZoneProperties{
				MaxNumberOfRecordSets: to.Ptr[int64](5000),
				NameServers: []*string{
					to.Ptr("ns1-01.azure-dns.com"),
					to.Ptr("ns2-01.azure-dns.net"),
					to.Ptr("ns3-01.azure-dns.org"),
					to.Ptr("ns4-01.azure-dns.info")},
				NumberOfRecordSets: to.Ptr[int64](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Zone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Zone)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetZone.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestZones_Update(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchZone.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewZonesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"zone1",
		armdns.ZoneUpdate{
			Tags: map[string]*string{
				"key2": to.Ptr("value2"),
			},
		},
		&armdns.ZonesClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchZone.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.Zone{
			Name:     to.Ptr("zone1"),
			Type:     to.Ptr("Microsoft.Network/dnsZones"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armdns.ZoneProperties{
				MaxNumberOfRecordSets: to.Ptr[int64](5000),
				NameServers: []*string{
					to.Ptr("ns1-01.azure-dns.com"),
					to.Ptr("ns2-01.azure-dns.net"),
					to.Ptr("ns3-01.azure-dns.org"),
					to.Ptr("ns4-01.azure-dns.info")},
				NumberOfRecordSets: to.Ptr[int64](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Zone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Zone)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchZone.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestZones_ListByResourceGroup(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List zones by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewZonesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		&armdns.ZonesClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.ZoneListResult{
			Value: []*armdns.Zone{
				{
					Name:     to.Ptr("zone1"),
					Type:     to.Ptr("Microsoft.Network/dnsZones"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armdns.ZoneProperties{
						MaxNumberOfRecordSets: to.Ptr[int64](5000),
						NameServers: []*string{
							to.Ptr("ns1-01.azure-dns.com"),
							to.Ptr("ns2-01.azure-dns.net"),
							to.Ptr("ns3-01.azure-dns.org"),
							to.Ptr("ns4-01.azure-dns.info")},
						NumberOfRecordSets: to.Ptr[int64](2),
					},
				},
				{
					Name:     to.Ptr("zone2"),
					Type:     to.Ptr("Microsoft.Network/dnsZones"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone2"),
					Location: to.Ptr("global"),
					Etag:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armdns.ZoneProperties{
						MaxNumberOfRecordSets: to.Ptr[int64](5000),
						NameServers: []*string{
							to.Ptr("ns1-02.azure-dns.com"),
							to.Ptr("ns2-02.azure-dns.net"),
							to.Ptr("ns3-02.azure-dns.org"),
							to.Ptr("ns4-02.azure-dns.info")},
						NumberOfRecordSets: to.Ptr[int64](300),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ZoneListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ZoneListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestZones_List(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List zones by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewZonesClient("subid", cred, &options)
	pager := client.List(&armdns.ZonesClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdns.ZoneListResult{
			Value: []*armdns.Zone{
				{
					Name:     to.Ptr("zone1"),
					Type:     to.Ptr("Microsoft.Network/dnsZones"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armdns.ZoneProperties{
						MaxNumberOfRecordSets: to.Ptr[int64](5000),
						NameServers: []*string{
							to.Ptr("ns1-01.azure-dns.com"),
							to.Ptr("ns2-01.azure-dns.net"),
							to.Ptr("ns3-01.azure-dns.org"),
							to.Ptr("ns4-01.azure-dns.info")},
						NumberOfRecordSets: to.Ptr[int64](2),
					},
				},
				{
					Name:     to.Ptr("zone2"),
					Type:     to.Ptr("Microsoft.Network/dnsZones"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/dnsZones/zone2"),
					Location: to.Ptr("global"),
					Etag:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armdns.ZoneProperties{
						MaxNumberOfRecordSets: to.Ptr[int64](5000),
						NameServers: []*string{
							to.Ptr("ns1-02.azure-dns.com"),
							to.Ptr("ns2-02.azure-dns.net"),
							to.Ptr("ns3-02.azure-dns.org"),
							to.Ptr("ns4-02.azure-dns.info")},
						NumberOfRecordSets: to.Ptr[int64](300),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ZoneListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ZoneListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/ListZonesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDNSResourceReference_GetByTargetResources(t *testing.T) {
	// From example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetDnsResourceReference.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List zones by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdns.NewResourceReferenceClient("subid", cred, &options)
	res, err := client.GetByTargetResources(ctx,
		armdns.ResourceReferenceRequest{
			Properties: &armdns.ResourceReferenceRequestProperties{
				TargetResources: []*armdns.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetDnsResourceReference.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdns.ResourceReferenceResult{
			Properties: &armdns.ResourceReferenceResultProperties{
				DNSResourceReferences: []*armdns.ResourceReference{
					{
						DNSResources: []*armdns.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.network/dnszones/hydratest.dnszone.com5989/a/hydratestdnsrec9310"),
							}},
						TargetResource: &armdns.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceReferenceResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceReferenceResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/GetDnsResourceReference.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
