//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdns

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// RecordSetsClientListAllByDNSZonePager provides operations for iterating over paged responses.
type RecordSetsClientListAllByDNSZonePager struct {
	client    *RecordSetsClient
	current   RecordSetsClientListAllByDNSZoneResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsClientListAllByDNSZoneResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecordSetsClientListAllByDNSZonePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecordSetsClientListAllByDNSZonePager) NextPage(ctx context.Context) (RecordSetsClientListAllByDNSZoneResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecordSetsClientListAllByDNSZoneResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecordSetsClientListAllByDNSZoneResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecordSetsClientListAllByDNSZoneResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecordSetsClientListAllByDNSZoneResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAllByDNSZoneHandleResponse(resp)
	if err != nil {
		return RecordSetsClientListAllByDNSZoneResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecordSetsClientListByDNSZonePager provides operations for iterating over paged responses.
type RecordSetsClientListByDNSZonePager struct {
	client    *RecordSetsClient
	current   RecordSetsClientListByDNSZoneResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsClientListByDNSZoneResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecordSetsClientListByDNSZonePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecordSetsClientListByDNSZonePager) NextPage(ctx context.Context) (RecordSetsClientListByDNSZoneResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecordSetsClientListByDNSZoneResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecordSetsClientListByDNSZoneResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecordSetsClientListByDNSZoneResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecordSetsClientListByDNSZoneResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDNSZoneHandleResponse(resp)
	if err != nil {
		return RecordSetsClientListByDNSZoneResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecordSetsClientListByTypePager provides operations for iterating over paged responses.
type RecordSetsClientListByTypePager struct {
	client    *RecordSetsClient
	current   RecordSetsClientListByTypeResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsClientListByTypeResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecordSetsClientListByTypePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecordSetsClientListByTypePager) NextPage(ctx context.Context) (RecordSetsClientListByTypeResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecordSetsClientListByTypeResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecordSetsClientListByTypeResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecordSetsClientListByTypeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecordSetsClientListByTypeResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByTypeHandleResponse(resp)
	if err != nil {
		return RecordSetsClientListByTypeResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ZonesClientListByResourceGroupPager provides operations for iterating over paged responses.
type ZonesClientListByResourceGroupPager struct {
	client    *ZonesClient
	current   ZonesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ZonesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ZonesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ZoneListResult.NextLink == nil || len(*p.current.ZoneListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ZonesClientListByResourceGroupPager) NextPage(ctx context.Context) (ZonesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ZonesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ZonesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ZonesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ZonesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ZonesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ZonesClientListPager provides operations for iterating over paged responses.
type ZonesClientListPager struct {
	client    *ZonesClient
	current   ZonesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ZonesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ZonesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ZoneListResult.NextLink == nil || len(*p.current.ZoneListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ZonesClientListPager) NextPage(ctx context.Context) (ZonesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ZonesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ZonesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ZonesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ZonesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ZonesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
