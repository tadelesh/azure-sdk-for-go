//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAccessReviewHistoryDefinitions_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewHistoryDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewHistoryDefinitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewHistoryDefinitionsClient("129a304b-4aea-4b86-a9f7-ba7e2b23737a", cred, &options)
	pager := client.List(&armauthorization.AccessReviewHistoryDefinitionsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewHistoryDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewHistoryDefinitionListResult{
			Value: []*armauthorization.AccessReviewHistoryDefinition{
				{
					Name: to.Ptr("44724910-d7a5-4c29-b28f-db73e717165a"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewHistoryDefinition"),
					ID:   to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/44724910-d7a5-4c29-b28f-db73e717165a"),
					Properties: &armauthorization.AccessReviewHistoryDefinitionProperties{
						CreatedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("673ad0d8-7b0e-4201-aaeb-74cdcbf22af9"),
							PrincipalName:     to.Ptr("levi"),
							UserPrincipalName: to.Ptr("levi"),
						},
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-23T00:27:33.6905189+00:00"); return t }()),
						Decisions: []*armauthorization.AccessReviewResult{
							to.Ptr(armauthorization.AccessReviewResultApprove),
							to.Ptr(armauthorization.AccessReviewResultDeny),
							to.Ptr(armauthorization.AccessReviewResultNotReviewed),
							to.Ptr(armauthorization.AccessReviewResultDontKnow),
							to.Ptr(armauthorization.AccessReviewResultNotNotified)},
						DisplayName:                      to.Ptr("Hello world name"),
						ReviewHistoryPeriodEndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-01T00:00:00-08:00"); return t }()),
						ReviewHistoryPeriodStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00-07:00"); return t }()),
						Scopes: []*armauthorization.AccessReviewScope{
							{
								ExpandNestedMemberships: to.Ptr(true),
								PrincipalType:           to.Ptr(armauthorization.AccessReviewScopePrincipalTypeUser),
								ResourceID:              to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a"),
								RoleDefinitionID:        to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a/providers/Microsoft.Authorization/roleDefinitions"),
							},
							{
								ExpandNestedMemberships: to.Ptr(false),
								PrincipalType:           to.Ptr(armauthorization.AccessReviewScopePrincipalTypeUser),
								ResourceID:              to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a"),
								RoleDefinitionID:        to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a/providers/Microsoft.Authorization/roleDefinitions/1562cf42-00b9-457c-86ef-5702d4132904"),
							}},
						Settings: &armauthorization.AccessReviewHistoryScheduleSettings{
							Range: &armauthorization.AccessReviewRecurrenceRange{
								Type:                to.Ptr(armauthorization.AccessReviewRecurrenceRangeTypeEndDate),
								EndDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-12-01T00:00:00-08:00"); return t }()),
								NumberOfOccurrences: to.Ptr[int32](1),
								StartDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-01T00:00:00-08:00"); return t }()),
							},
						},
						Status: to.Ptr(armauthorization.AccessReviewHistoryDefinitionStatusDone),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewHistoryDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewHistoryDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewHistoryDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewHistoryDefinition_Create(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewHistoryDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutAccessReviewHistoryDefinition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewHistoryDefinitionClient("129a304b-4aea-4b86-a9f7-ba7e2b23737a", cred, &options)
	res, err := client.Create(ctx,
		"44724910-d7a5-4c29-b28f-db73e717165a",
		armauthorization.AccessReviewHistoryDefinitionProperties{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewHistoryDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armauthorization.AccessReviewHistoryDefinition{
			Name: to.Ptr("44724910-d7a5-4c29-b28f-db73e717165a"),
			Type: to.Ptr("Microsoft.Authorization/accessReviewHistoryDefinition"),
			ID:   to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/44724910-d7a5-4c29-b28f-db73e717165a"),
			Properties: &armauthorization.AccessReviewHistoryDefinitionProperties{
				CreatedBy: &armauthorization.AccessReviewActorIdentity{
					PrincipalID:       to.Ptr("673ad0d8-7b0e-4201-aaeb-74cdcbf22af9"),
					PrincipalName:     to.Ptr("levi"),
					UserPrincipalName: to.Ptr("levi"),
				},
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-23T00:27:33.6905189+00:00"); return t }()),
				Decisions: []*armauthorization.AccessReviewResult{
					to.Ptr(armauthorization.AccessReviewResultApprove),
					to.Ptr(armauthorization.AccessReviewResultDeny),
					to.Ptr(armauthorization.AccessReviewResultNotReviewed),
					to.Ptr(armauthorization.AccessReviewResultDontKnow),
					to.Ptr(armauthorization.AccessReviewResultNotNotified)},
				DisplayName:                      to.Ptr("Hello world name"),
				ReviewHistoryPeriodEndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-01T00:00:00-08:00"); return t }()),
				ReviewHistoryPeriodStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00-07:00"); return t }()),
				Scopes: []*armauthorization.AccessReviewScope{
					{
						ExpandNestedMemberships: to.Ptr(true),
						PrincipalType:           to.Ptr(armauthorization.AccessReviewScopePrincipalTypeUser),
						ResourceID:              to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a"),
						RoleDefinitionID:        to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a/providers/Microsoft.Authorization/roleDefinitions"),
					},
					{
						ExpandNestedMemberships: to.Ptr(false),
						PrincipalType:           to.Ptr(armauthorization.AccessReviewScopePrincipalTypeUser),
						ResourceID:              to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a"),
						RoleDefinitionID:        to.Ptr("/subscriptions/129a304b-4aea-4b86-a9f7-ba7e2b23737a/providers/Microsoft.Authorization/roleDefinitions/1562cf42-00b9-457c-86ef-5702d4132904"),
					}},
				Settings: &armauthorization.AccessReviewHistoryScheduleSettings{
					Range: &armauthorization.AccessReviewRecurrenceRange{
						Type:                to.Ptr(armauthorization.AccessReviewRecurrenceRangeTypeEndDate),
						EndDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-12-01T00:00:00-08:00"); return t }()),
						NumberOfOccurrences: to.Ptr[int32](1),
						StartDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-01T00:00:00-08:00"); return t }()),
					},
				},
				Status: to.Ptr(armauthorization.AccessReviewHistoryDefinitionStatusRequested),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessReviewHistoryDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessReviewHistoryDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewHistoryDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewHistoryDefinitionInstances_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewHistoryDefinitionInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewHistoryDefinitionInstances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewHistoryDefinitionInstancesClient("129a304b-4aea-4b86-a9f7-ba7e2b23737a", cred, &options)
	pager := client.List("44724910-d7a5-4c29-b28f-db73e717165a",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewHistoryDefinitionInstances.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewHistoryDefinitionInstanceListResult{
			Value: []*armauthorization.AccessReviewHistoryInstance{
				{
					Name: to.Ptr("44724910-d7a5-4c29-b28f-db73e717165a"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewHistoryInstance"),
					ID:   to.Ptr("44724910-d7a5-4c29-b28f-db73e717165a"),
					Properties: &armauthorization.AccessReviewHistoryInstanceProperties{
						DisplayName:                      to.Ptr("Hello world name"),
						Expiration:                       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-22T00:28:33.6905189+00:00"); return t }()),
						FulfilledDateTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-23T00:28:33.6905189+00:00"); return t }()),
						ReviewHistoryPeriodEndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-01T00:00:00-08:00"); return t }()),
						ReviewHistoryPeriodStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00-07:00"); return t }()),
						RunDateTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-23T00:27:33.6905189+00:00"); return t }()),
						Status:                           to.Ptr(armauthorization.AccessReviewHistoryDefinitionStatusRequested),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewHistoryDefinitionInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewHistoryDefinitionInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewHistoryDefinitionInstances.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewScheduleDefinitions_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewScheduleDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewScheduleDefinitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewScheduleDefinitionsClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	pager := client.List(&armauthorization.AccessReviewScheduleDefinitionsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewScheduleDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewScheduleDefinitionListResult{
			Value: []*armauthorization.AccessReviewScheduleDefinition{
				{
					Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions"),
					ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Properties: &armauthorization.AccessReviewScheduleDefinitionProperties{
						CreatedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
							PrincipalName:     to.Ptr("Shubham Gupta"),
							PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
							UserPrincipalName: to.Ptr("shugup@microsoft.com"),
						},
						DescriptionForAdmins:    to.Ptr("asdfasdf"),
						DescriptionForReviewers: to.Ptr("asdfasdf"),
						DisplayName:             to.Ptr("Hello world"),
						Reviewers: []*armauthorization.AccessReviewReviewer{
							{
								PrincipalID:   to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d "),
								PrincipalType: to.Ptr(armauthorization.AccessReviewReviewerTypeUser),
							}},
						ReviewersType: to.Ptr(armauthorization.AccessReviewScheduleDefinitionReviewersTypeAssigned),
						Scope: &armauthorization.AccessReviewScope{
							ResourceID:       to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
							RoleDefinitionID: to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/roleDefinitions/b225c7ff-4338-4cdc-a790-6b34d987f7cd"),
						},
						Settings: &armauthorization.AccessReviewScheduleSettings{
							AutoApplyDecisionsEnabled:       to.Ptr(true),
							DefaultDecision:                 to.Ptr(armauthorization.DefaultDecisionTypeApprove),
							DefaultDecisionEnabled:          to.Ptr(true),
							InstanceDurationInDays:          to.Ptr[int32](30),
							JustificationRequiredOnApproval: to.Ptr(true),
							MailNotificationsEnabled:        to.Ptr(true),
							RecommendationsEnabled:          to.Ptr(true),
							Recurrence: &armauthorization.AccessReviewRecurrenceSettings{
								Range: &armauthorization.AccessReviewRecurrenceRange{
									Type:                to.Ptr(armauthorization.AccessReviewRecurrenceRangeTypeEndDate),
									EndDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
									NumberOfOccurrences: to.Ptr[int32](1),
									StartDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
								},
							},
							ReminderNotificationsEnabled: to.Ptr(true),
						},
						Status: to.Ptr(armauthorization.AccessReviewScheduleDefinitionStatusInProgress),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewScheduleDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewScheduleDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewScheduleDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewScheduleDefinitions_Stop(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/StopAccessReviewScheduleDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessReviewScheduleDefinitionStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewScheduleDefinitionsClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	_, err := client.Stop(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/StopAccessReviewScheduleDefinition.json: %v", err)
	}
}

func TestAccessReviewInstances_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewInstances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstancesClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	pager := client.List("265785a7-a81f-4201-8a18-bb0db95982b7",
		&armauthorization.AccessReviewInstancesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstances.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewInstanceListResult{
			Value: []*armauthorization.AccessReviewInstance{
				{
					Name: to.Ptr("4135f961-be78-4005-8101-c72a5af307a2"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances"),
					ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/instances/4135f961-be78-4005-8101-c72a5af307a2"),
					Properties: &armauthorization.AccessReviewInstanceProperties{
						EndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
						StartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
						Status:        to.Ptr(armauthorization.AccessReviewInstanceStatusApplied),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstances.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewInstances_Create(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutAccessReviewInstance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstancesClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	res, err := client.Create(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"4135f961-be78-4005-8101-c72a5af307a2",
		armauthorization.AccessReviewInstanceProperties{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armauthorization.AccessReviewInstance{
			Name: to.Ptr("4135f961-be78-4005-8101-c72a5af307a2"),
			Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances"),
			ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/instances/4135f961-be78-4005-8101-c72a5af307a2"),
			Properties: &armauthorization.AccessReviewInstanceProperties{
				BackupReviewers: []*armauthorization.AccessReviewReviewer{
					{
						PrincipalID:   to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
						PrincipalType: to.Ptr(armauthorization.AccessReviewReviewerTypeUser),
					}},
				EndDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
				Reviewers: []*armauthorization.AccessReviewReviewer{
					{
						PrincipalID:   to.Ptr("89ff94f6-029c-429c-9037-6cf4fe2f4a13"),
						PrincipalType: to.Ptr(armauthorization.AccessReviewReviewerType("group")),
					}},
				ReviewersType: to.Ptr(armauthorization.AccessReviewInstanceReviewersTypeAssigned),
				StartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
				Status:        to.Ptr(armauthorization.AccessReviewInstanceStatusInProgress),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessReviewInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessReviewInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewInstance_Stop(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/StopAccessReviewInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessReviewInstanceStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	_, err := client.Stop(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/StopAccessReviewInstance.json: %v", err)
	}
}

func TestAccessReviewInstance_ResetDecisions(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceResetDecisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessReviewInstanceResetDecisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	_, err := client.ResetDecisions(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceResetDecisions.json: %v", err)
	}
}

func TestAccessReviewInstance_ApplyDecisions(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceApplyDecisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessReviewInstanceApplyDecisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	_, err := client.ApplyDecisions(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceApplyDecisions.json: %v", err)
	}
}

func TestAccessReviewInstance_SendReminders(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceSendReminders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessReviewInstanceSendReminders"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	_, err := client.SendReminders(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceSendReminders.json: %v", err)
	}
}

func TestAccessReviewInstance_AcceptRecommendations(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceAcceptRecommendations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessReviewInstanceAcceptRecommmendations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceClient("<subscription-id>", cred, &options)
	_, err := client.AcceptRecommendations(ctx,
		"488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/AccessReviewInstanceAcceptRecommendations.json: %v", err)
	}
}

func TestAccessReviewInstanceDecisions_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceDecisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewInstanceDecisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceDecisionsClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	pager := client.List("265785a7-a81f-4201-8a18-bb0db95982b7",
		"f25ed880-9c31-4101-bc57-825d8df3b58c",
		&armauthorization.AccessReviewInstanceDecisionsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceDecisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewDecisionListResult{
			Value: []*armauthorization.AccessReviewDecision{
				{
					Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances/decisions"),
					ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/instances/f8882fec-7d56-4e97-ad6d-5e3f4557971d/decisions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Properties: &armauthorization.AccessReviewDecisionProperties{
						AppliedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("36777fc8-4ec2-49ea-a56c-cec0bd47d83a"),
							PrincipalName:     to.Ptr("Amit Ghosh"),
							PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
							UserPrincipalName: to.Ptr("amitgho@microsoft.com"),
						},
						AppliedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-03T21:02:30.667Z"); return t }()),
						ApplyResult:     to.Ptr(armauthorization.AccessReviewApplyResult("Success")),
						Decision:        to.Ptr(armauthorization.AccessReviewResultDeny),
						Justification:   to.Ptr("This person has left this team"),
						Principal: &armauthorization.AccessReviewDecisionUserIdentity{
							Type:              to.Ptr(armauthorization.DecisionTargetTypeUser),
							DisplayName:       to.Ptr("Shubham Gupta"),
							ID:                to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
							UserPrincipalName: to.Ptr("shugup@microsoft.com"),
						},
						Recommendation: to.Ptr(armauthorization.AccessRecommendationTypeDeny),
						Resource: &armauthorization.AccessReviewDecisionResourceAzureRole{
							Type:        to.Ptr(armauthorization.DecisionResourceTypeAzureRole),
							DisplayName: to.Ptr("Owner"),
							ID:          to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
						},
						ReviewedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
							PrincipalName:     to.Ptr("Shubham Gupta"),
							PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
							UserPrincipalName: to.Ptr("shugup@microsoft.com"),
						},
						ReviewedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewDecisionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewDecisionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceDecisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewInstanceContactedReviewers_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceContactedReviewers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewInstanceContactedReviewers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceContactedReviewersClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	pager := client.List("265785a7-a81f-4201-8a18-bb0db95982b7",
		"f25ed880-9c31-4101-bc57-825d8df3b58c",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceContactedReviewers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewContactedReviewerListResult{
			Value: []*armauthorization.AccessReviewContactedReviewer{
				{
					Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances/contactedReviewers"),
					ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/instances/f8882fec-7d56-4e97-ad6d-5e3f4557971d/contactedReviewers/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Properties: &armauthorization.AccessReviewContactedReviewerProperties{
						CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
						UserDisplayName:   to.Ptr("Bob"),
						UserPrincipalName: to.Ptr("bob@contoso.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewContactedReviewerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewContactedReviewerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceContactedReviewers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewDefaultSettings_Get(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewDefaultSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewDefaultSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewDefaultSettingsClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewDefaultSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armauthorization.AccessReviewDefaultSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Authorization/accessReviewSettings"),
			ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewSettings/default"),
			Properties: &armauthorization.AccessReviewScheduleSettings{
				AutoApplyDecisionsEnabled:       to.Ptr(true),
				DefaultDecision:                 to.Ptr(armauthorization.DefaultDecisionTypeApprove),
				DefaultDecisionEnabled:          to.Ptr(true),
				InstanceDurationInDays:          to.Ptr[int32](30),
				JustificationRequiredOnApproval: to.Ptr(true),
				MailNotificationsEnabled:        to.Ptr(true),
				RecommendationsEnabled:          to.Ptr(true),
				Recurrence: &armauthorization.AccessReviewRecurrenceSettings{
					Range: &armauthorization.AccessReviewRecurrenceRange{
						Type:                to.Ptr(armauthorization.AccessReviewRecurrenceRangeTypeEndDate),
						EndDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
						NumberOfOccurrences: to.Ptr[int32](1),
						StartDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
					},
				},
				ReminderNotificationsEnabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessReviewDefaultSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessReviewDefaultSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewDefaultSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewDefaultSettings_Put(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewDefaultSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutAccessReviewDefaultSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewDefaultSettingsClient("fa73e90b-5bf1-45fd-a182-35ce5fc0674d", cred, &options)
	res, err := client.Put(ctx,
		armauthorization.AccessReviewScheduleSettings{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewDefaultSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armauthorization.AccessReviewDefaultSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Authorization/accessReviewSettings"),
			ID:   to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/accessReviewSettings/default"),
			Properties: &armauthorization.AccessReviewScheduleSettings{
				AutoApplyDecisionsEnabled:       to.Ptr(true),
				DefaultDecision:                 to.Ptr(armauthorization.DefaultDecisionTypeApprove),
				DefaultDecisionEnabled:          to.Ptr(true),
				InstanceDurationInDays:          to.Ptr[int32](30),
				JustificationRequiredOnApproval: to.Ptr(true),
				MailNotificationsEnabled:        to.Ptr(true),
				RecommendationsEnabled:          to.Ptr(true),
				Recurrence: &armauthorization.AccessReviewRecurrenceSettings{
					Range: &armauthorization.AccessReviewRecurrenceRange{
						Type:                to.Ptr(armauthorization.AccessReviewRecurrenceRangeTypeEndDate),
						EndDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
						NumberOfOccurrences: to.Ptr[int32](1),
						StartDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
					},
				},
				ReminderNotificationsEnabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessReviewDefaultSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessReviewDefaultSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PutAccessReviewDefaultSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewScheduleDefinitionsAssignedForMyApproval_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewScheduleDefinitionsAssignedForMyApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewScheduleDefinitionsAssignedForMyApproval"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewScheduleDefinitionsAssignedForMyApprovalClient(cred, &options)
	pager := client.List(&armauthorization.AccessReviewScheduleDefinitionsAssignedForMyApprovalClientListOptions{Filter: to.Ptr("assignedToMeToReview()")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewScheduleDefinitionsAssignedForMyApproval.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewScheduleDefinitionListResult{
			Value: []*armauthorization.AccessReviewScheduleDefinition{
				{
					Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Properties: &armauthorization.AccessReviewScheduleDefinitionProperties{
						CreatedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
							PrincipalName:     to.Ptr("Shubham Gupta"),
							PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
							UserPrincipalName: to.Ptr("shugup@microsoft.com"),
						},
						DescriptionForAdmins:    to.Ptr("asdfasdf"),
						DescriptionForReviewers: to.Ptr("asdfasdf"),
						DisplayName:             to.Ptr("Hello world"),
						Instances: []*armauthorization.AccessReviewInstance{
							{
								Name: to.Ptr("4135f961-be78-4005-8101-c72a5af307a2"),
								Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances"),
								ID:   to.Ptr("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/488a6d0e-0a63-4946-86e3-1f5bbc934661/instances/4135f961-be78-4005-8101-c72a5af307a2"),
								Properties: &armauthorization.AccessReviewInstanceProperties{
									EndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
									StartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
									Status:        to.Ptr(armauthorization.AccessReviewInstanceStatusApplied),
								},
							}},
						Reviewers: []*armauthorization.AccessReviewReviewer{
							{
								PrincipalID:   to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d "),
								PrincipalType: to.Ptr(armauthorization.AccessReviewReviewerTypeUser),
							}},
						ReviewersType: to.Ptr(armauthorization.AccessReviewScheduleDefinitionReviewersTypeAssigned),
						Scope: &armauthorization.AccessReviewScope{
							ResourceID:       to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
							RoleDefinitionID: to.Ptr("/subscriptions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/providers/Microsoft.Authorization/roleDefinitions/b225c7ff-4338-4cdc-a790-6b34d987f7cd"),
						},
						Settings: &armauthorization.AccessReviewScheduleSettings{
							AutoApplyDecisionsEnabled:       to.Ptr(true),
							DefaultDecision:                 to.Ptr(armauthorization.DefaultDecisionTypeApprove),
							DefaultDecisionEnabled:          to.Ptr(true),
							InstanceDurationInDays:          to.Ptr[int32](30),
							JustificationRequiredOnApproval: to.Ptr(true),
							MailNotificationsEnabled:        to.Ptr(true),
							RecommendationsEnabled:          to.Ptr(true),
							Recurrence: &armauthorization.AccessReviewRecurrenceSettings{
								Range: &armauthorization.AccessReviewRecurrenceRange{
									Type:                to.Ptr(armauthorization.AccessReviewRecurrenceRangeTypeEndDate),
									EndDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
									NumberOfOccurrences: to.Ptr[int32](1),
									StartDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
								},
							},
							ReminderNotificationsEnabled: to.Ptr(true),
						},
						Status: to.Ptr(armauthorization.AccessReviewScheduleDefinitionStatusInProgress),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewScheduleDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewScheduleDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewScheduleDefinitionsAssignedForMyApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewInstancesAssignedForMyApproval_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstancesAssignedForMyApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewInstancesAssignedForMyApproval"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstancesAssignedForMyApprovalClient(cred, &options)
	pager := client.List("488a6d0e-0a63-4946-86e3-1f5bbc934661",
		&armauthorization.AccessReviewInstancesAssignedForMyApprovalClientListOptions{Filter: to.Ptr("assignedToMeToReview()")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstancesAssignedForMyApproval.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewInstanceListResult{
			Value: []*armauthorization.AccessReviewInstance{
				{
					Name: to.Ptr("4135f961-be78-4005-8101-c72a5af307a2"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances"),
					ID:   to.Ptr("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/488a6d0e-0a63-4946-86e3-1f5bbc934661/instances/4135f961-be78-4005-8101-c72a5af307a2"),
					Properties: &armauthorization.AccessReviewInstanceProperties{
						EndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:17:30.513Z"); return t }()),
						StartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
						Status:        to.Ptr(armauthorization.AccessReviewInstanceStatusApplied),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstancesAssignedForMyApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewInstanceMyDecisions_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceMyDecisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccessReviewMyInstanceDecisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceMyDecisionsClient(cred, &options)
	pager := client.List("488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"4135f961-be78-4005-8101-c72a5af307a2",
		&armauthorization.AccessReviewInstanceMyDecisionsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceMyDecisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewDecisionListResult{
			Value: []*armauthorization.AccessReviewDecision{
				{
					Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances/decisions"),
					ID:   to.Ptr("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/488a6d0e-0a63-4946-86e3-1f5bbc934661/instances/4135f961-be78-4005-8101-c72a5af307a2/decisions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Properties: &armauthorization.AccessReviewDecisionProperties{
						AppliedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("36777fc8-4ec2-49ea-a56c-cec0bd47d83a"),
							PrincipalName:     to.Ptr("Amit Ghosh"),
							PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
							UserPrincipalName: to.Ptr("amitgho@microsoft.com"),
						},
						AppliedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-03T21:02:30.667Z"); return t }()),
						ApplyResult:     to.Ptr(armauthorization.AccessReviewApplyResult("Success")),
						Decision:        to.Ptr(armauthorization.AccessReviewResultDeny),
						Justification:   to.Ptr("This person has left this team"),
						Principal: &armauthorization.AccessReviewDecisionUserIdentity{
							Type:              to.Ptr(armauthorization.DecisionTargetTypeUser),
							DisplayName:       to.Ptr("Shubham Gupta"),
							ID:                to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
							UserPrincipalName: to.Ptr("shugup@microsoft.com"),
						},
						Recommendation: to.Ptr(armauthorization.AccessRecommendationTypeDeny),
						Resource: &armauthorization.AccessReviewDecisionResourceAzureRole{
							Type:        to.Ptr(armauthorization.DecisionResourceTypeAzureRole),
							DisplayName: to.Ptr("Owner"),
							ID:          to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
						},
						ReviewedBy: &armauthorization.AccessReviewActorIdentity{
							PrincipalID:       to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
							PrincipalName:     to.Ptr("Shubham Gupta"),
							PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
							UserPrincipalName: to.Ptr("shugup@microsoft.com"),
						},
						ReviewedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewDecisionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewDecisionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/GetAccessReviewInstanceMyDecisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessReviewInstanceMyDecisions_Patch(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PatchAccessReviewInstanceMyDecisionById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchAccessReviewMyInstanceDecision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewAccessReviewInstanceMyDecisionsClient(cred, &options)
	res, err := client.Patch(ctx,
		"488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"4135f961-be78-4005-8101-c72a5af307a2",
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		armauthorization.AccessReviewDecisionProperties{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PatchAccessReviewInstanceMyDecisionById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armauthorization.AccessReviewDecision{
			Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
			Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances/decisions"),
			ID:   to.Ptr("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/488a6d0e-0a63-4946-86e3-1f5bbc934661/instances/4135f961-be78-4005-8101-c72a5af307a2/decisions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
			Properties: &armauthorization.AccessReviewDecisionProperties{
				AppliedBy: &armauthorization.AccessReviewActorIdentity{
					PrincipalID:       to.Ptr("36777fc8-4ec2-49ea-a56c-cec0bd47d83a"),
					PrincipalName:     to.Ptr("Amit Ghosh"),
					PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
					UserPrincipalName: to.Ptr("amitgho@microsoft.com"),
				},
				AppliedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-03T21:02:30.667Z"); return t }()),
				ApplyResult:     to.Ptr(armauthorization.AccessReviewApplyResult("Success")),
				Decision:        to.Ptr(armauthorization.AccessReviewResultDeny),
				Justification:   to.Ptr("This person has left this team"),
				Principal: &armauthorization.AccessReviewDecisionUserIdentity{
					Type:              to.Ptr(armauthorization.DecisionTargetTypeUser),
					DisplayName:       to.Ptr("Shubham Gupta"),
					ID:                to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
					UserPrincipalName: to.Ptr("shugup@microsoft.com"),
				},
				Recommendation: to.Ptr(armauthorization.AccessRecommendationTypeDeny),
				Resource: &armauthorization.AccessReviewDecisionResourceAzureRole{
					Type:        to.Ptr(armauthorization.DecisionResourceTypeAzureRole),
					DisplayName: to.Ptr("Owner"),
					ID:          to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
				},
				ReviewedBy: &armauthorization.AccessReviewActorIdentity{
					PrincipalID:       to.Ptr("a6c7aecb-cbfd-4763-87ef-e91b4bd509d9"),
					PrincipalName:     to.Ptr("Shubham Gupta"),
					PrincipalType:     to.Ptr(armauthorization.AccessReviewActorIdentityTypeUser),
					UserPrincipalName: to.Ptr("shugup@microsoft.com"),
				},
				ReviewedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessReviewDecision) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessReviewDecision)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/PatchAccessReviewInstanceMyDecisionById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantLevelAccessReviewInstanceContactedReviewers_List(t *testing.T) {
	// From example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/TenantLevelGetAccessReviewInstanceContactedReviewers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TenantLevelGetAccessReviewInstanceContactedReviewers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armauthorization.NewTenantLevelAccessReviewInstanceContactedReviewersClient(cred, &options)
	pager := client.List("265785a7-a81f-4201-8a18-bb0db95982b7",
		"f25ed880-9c31-4101-bc57-825d8df3b58c",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/TenantLevelGetAccessReviewInstanceContactedReviewers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armauthorization.AccessReviewContactedReviewerListResult{
			Value: []*armauthorization.AccessReviewContactedReviewer{
				{
					Name: to.Ptr("fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Type: to.Ptr("Microsoft.Authorization/accessReviewScheduleDefinitions/instances/contactedReviewers"),
					ID:   to.Ptr("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/fa73e90b-5bf1-45fd-a182-35ce5fc0674d/instances/f8882fec-7d56-4e97-ad6d-5e3f4557971d/contactedReviewers/fa73e90b-5bf1-45fd-a182-35ce5fc0674d"),
					Properties: &armauthorization.AccessReviewContactedReviewerProperties{
						CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T21:02:30.667Z"); return t }()),
						UserDisplayName:   to.Ptr("Bob"),
						UserPrincipalName: to.Ptr("bob@contoso.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessReviewContactedReviewerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessReviewContactedReviewerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/authorization/resource-manager/Microsoft.Authorization/preview/2021-11-16-preview/examples/TenantLevelGetAccessReviewInstanceContactedReviewers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
