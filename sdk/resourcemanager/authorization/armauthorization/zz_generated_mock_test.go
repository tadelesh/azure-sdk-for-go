//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAccessReviewScheduleDefinitions_List(t *testing.T) {
	// From example GetAccessReviewScheduleDefinitions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewScheduleDefinitionsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	pager := client.List(&AccessReviewScheduleDefinitionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessReviewScheduleDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessReviewScheduleDefinition.ID should not be nil!")
			}
		}
	}
}

func TestAccessReviewScheduleDefinitions_GetById(t *testing.T) {
	// From example GetAccessReviewScheduleDefinition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewScheduleDefinitionsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	res, err := client.GetByID(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		&AccessReviewScheduleDefinitionsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewScheduleDefinition.ID == nil {
		t.Fatal("AccessReviewScheduleDefinition.ID should not be nil!")
	}
}

func TestAccessReviewScheduleDefinitions_DeleteById(t *testing.T) {
	// From example DeleteAccessReview
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewScheduleDefinitionsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	_, err := client.DeleteByID(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		&AccessReviewScheduleDefinitionsDeleteByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewScheduleDefinitions_CreateOrUpdateById(t *testing.T) {
	// From example PutAccessReview
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewScheduleDefinitionsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	res, err := client.CreateOrUpdateByID(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		AccessReviewScheduleDefinitionProperties{},
		&AccessReviewScheduleDefinitionsCreateOrUpdateByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewScheduleDefinition.ID == nil {
		t.Fatal("AccessReviewScheduleDefinition.ID should not be nil!")
	}
}

func TestAccessReviewScheduleDefinitions_Stop(t *testing.T) {
	// From example StopAccessReviewScheduleDefinition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewScheduleDefinitionsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	_, err := client.Stop(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		&AccessReviewScheduleDefinitionsStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewInstances_List(t *testing.T) {
	// From example GetAccessReviewInstances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstancesClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	pager := client.List("265785a7-a81f-4201-8a18-bb0db95982b7",
		&AccessReviewInstancesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessReviewInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessReviewInstance.ID should not be nil!")
			}
		}
	}
}

func TestAccessReviewInstances_GetById(t *testing.T) {
	// From example GetAccessReviewInstance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstancesClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	res, err := client.GetByID(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"4135f961-be78-4005-8101-c72a5af307a2",
		&AccessReviewInstancesGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewInstance.ID == nil {
		t.Fatal("AccessReviewInstance.ID should not be nil!")
	}
}

func TestAccessReviewInstance_Stop(t *testing.T) {
	// From example StopAccessReviewInstance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	_, err := client.Stop(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		&AccessReviewInstanceStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewInstance_ResetDecisions(t *testing.T) {
	// From example AccessReviewInstanceResetDecisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	_, err := client.ResetDecisions(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		&AccessReviewInstanceResetDecisionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewInstance_ApplyDecisions(t *testing.T) {
	// From example AccessReviewInstanceApplyDecisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	_, err := client.ApplyDecisions(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		&AccessReviewInstanceApplyDecisionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewInstance_SendReminders(t *testing.T) {
	// From example AccessReviewInstanceSendReminders
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	_, err := client.SendReminders(ctx,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		&AccessReviewInstanceSendRemindersOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewInstance_AcceptRecommendations(t *testing.T) {
	// From example AccessReviewInstanceAcceptRecommendations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceClient(con,
		nil)
	_, err := client.AcceptRecommendations(ctx,
		"488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"d9b9e056-7004-470b-bf21-1635e98487da",
		&AccessReviewInstanceAcceptRecommendationsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessReviewInstanceDecisions_List(t *testing.T) {
	// From example GetAccessReviewInstanceDecisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceDecisionsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	pager := client.List("265785a7-a81f-4201-8a18-bb0db95982b7",
		"f25ed880-9c31-4101-bc57-825d8df3b58c",
		&AccessReviewInstanceDecisionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessReviewDecision.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessReviewDecision.ID should not be nil!")
			}
		}
	}
}

func TestAccessReviewDefaultSettings_Get(t *testing.T) {
	// From example GetAccessReviewDefaultSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewDefaultSettingsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	res, err := client.Get(ctx,
		&AccessReviewDefaultSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewDefaultSettings.ID == nil {
		t.Fatal("AccessReviewDefaultSettings.ID should not be nil!")
	}
}

func TestAccessReviewDefaultSettings_Put(t *testing.T) {
	// From example PutAccessReviewDefaultSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewDefaultSettingsClient(con,
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d")
	res, err := client.Put(ctx,
		AccessReviewScheduleSettings{},
		&AccessReviewDefaultSettingsPutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewDefaultSettings.ID == nil {
		t.Fatal("AccessReviewDefaultSettings.ID should not be nil!")
	}
}

func TestAccessReviewScheduleDefinitionsAssignedForMyApproval_List(t *testing.T) {
	// From example GetAccessReviewScheduleDefinitionsAssignedForMyApproval
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewScheduleDefinitionsAssignedForMyApprovalClient(con)
	pager := client.List(&AccessReviewScheduleDefinitionsAssignedForMyApprovalListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessReviewScheduleDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessReviewScheduleDefinition.ID should not be nil!")
			}
		}
	}
}

func TestAccessReviewInstancesAssignedForMyApproval_List(t *testing.T) {
	// From example GetAccessReviewInstancesAssignedForMyApproval
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstancesAssignedForMyApprovalClient(con)
	pager := client.List("488a6d0e-0a63-4946-86e3-1f5bbc934661",
		&AccessReviewInstancesAssignedForMyApprovalListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessReviewInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessReviewInstance.ID should not be nil!")
			}
		}
	}
}

func TestAccessReviewInstancesAssignedForMyApproval_GetById(t *testing.T) {
	// From example GetAccessReviewInstanceAssignedForMyApproval
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstancesAssignedForMyApprovalClient(con)
	res, err := client.GetByID(ctx,
		"488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"4135f961-be78-4005-8101-c72a5af307a2",
		&AccessReviewInstancesAssignedForMyApprovalGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewInstance.ID == nil {
		t.Fatal("AccessReviewInstance.ID should not be nil!")
	}
}

func TestAccessReviewInstanceMyDecisions_List(t *testing.T) {
	// From example GetAccessReviewInstanceMyDecisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceMyDecisionsClient(con)
	pager := client.List("488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"4135f961-be78-4005-8101-c72a5af307a2",
		&AccessReviewInstanceMyDecisionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessReviewDecision.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessReviewDecision.ID should not be nil!")
			}
		}
	}
}

func TestAccessReviewInstanceMyDecisions_GetById(t *testing.T) {
	// From example GetAccessReviewInstanceMyDecisionById
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceMyDecisionsClient(con)
	res, err := client.GetByID(ctx,
		"488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"4135f961-be78-4005-8101-c72a5af307a2",
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		&AccessReviewInstanceMyDecisionsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewDecision.ID == nil {
		t.Fatal("AccessReviewDecision.ID should not be nil!")
	}
}

func TestAccessReviewInstanceMyDecisions_Patch(t *testing.T) {
	// From example PatchAccessReviewInstanceMyDecisionById
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessReviewInstanceMyDecisionsClient(con)
	res, err := client.Patch(ctx,
		"488a6d0e-0a63-4946-86e3-1f5bbc934661",
		"4135f961-be78-4005-8101-c72a5af307a2",
		"fa73e90b-5bf1-45fd-a182-35ce5fc0674d",
		AccessReviewDecisionProperties{},
		&AccessReviewInstanceMyDecisionsPatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessReviewDecision.ID == nil {
		t.Fatal("AccessReviewDecision.ID should not be nil!")
	}
}

func TestDenyAssignments_ListForResource(t *testing.T) {
	// From example List deny assignments for resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDenyAssignmentsClient(con,
		"subId")
	pager := client.ListForResource("rgname",
		"resourceProviderNamespace",
		"parentResourcePath",
		"resourceType",
		"resourceName",
		&DenyAssignmentsListForResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DenyAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DenyAssignment.ID should not be nil!")
			}
		}
	}
}

func TestDenyAssignments_ListForResourceGroup(t *testing.T) {
	// From example List deny assignments for resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDenyAssignmentsClient(con,
		"subId")
	pager := client.ListForResourceGroup("rgname",
		&DenyAssignmentsListForResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DenyAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DenyAssignment.ID should not be nil!")
			}
		}
	}
}

func TestDenyAssignments_List(t *testing.T) {
	// From example List deny assignments for subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDenyAssignmentsClient(con,
		"subId")
	pager := client.List(&DenyAssignmentsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DenyAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DenyAssignment.ID should not be nil!")
			}
		}
	}
}

func TestDenyAssignments_Get(t *testing.T) {
	// From example Get deny assignment by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDenyAssignmentsClient(con,
		nil)
	res, err := client.Get(ctx,
		"subscriptions/subId/resourcegroups/rgname",
		"denyAssignmentId",
		&DenyAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DenyAssignment.ID == nil {
		t.Fatal("DenyAssignment.ID should not be nil!")
	}
}

func TestDenyAssignments_GetById(t *testing.T) {
	// From example Get deny assignment by ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDenyAssignmentsClient(con,
		nil)
	res, err := client.GetByID(ctx,
		"subscriptions/subId/resourcegroups/rgname/providers/Microsoft.Authorization/denyAssignments/daId",
		&DenyAssignmentsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DenyAssignment.ID == nil {
		t.Fatal("DenyAssignment.ID should not be nil!")
	}
}

func TestDenyAssignments_ListForScope(t *testing.T) {
	// From example List deny assignments for scope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDenyAssignmentsClient(con,
		nil)
	pager := client.ListForScope("subscriptions/subId",
		&DenyAssignmentsListForScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DenyAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DenyAssignment.ID should not be nil!")
			}
		}
	}
}

func TestProviderOperationsMetadata_Get(t *testing.T) {
	// From example List provider operations metadata for resource provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderOperationsMetadataClient(con)
	res, err := client.Get(ctx,
		"resourceProviderNamespace",
		&ProviderOperationsMetadataGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProviderOperationsMetadata.ID == nil {
		t.Fatal("ProviderOperationsMetadata.ID should not be nil!")
	}
}

func TestProviderOperationsMetadata_List(t *testing.T) {
	// From example List provider operations metadata for all resource providers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderOperationsMetadataClient(con)
	pager := client.List(&ProviderOperationsMetadataListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProviderOperationsMetadata.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProviderOperationsMetadata.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignments_ListForSubscription(t *testing.T) {
	// From example List role assignments for subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		"a925f2f7-5c63-4b7b-8799-25a5f97bc3b2")
	pager := client.ListForSubscription(&RoleAssignmentsListForSubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignment.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignments_ListForResourceGroup(t *testing.T) {
	// From example List role assignments for resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		"a925f2f7-5c63-4b7b-8799-25a5f97bc3b2")
	pager := client.ListForResourceGroup("testrg",
		&RoleAssignmentsListForResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignment.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignments_ListForResource(t *testing.T) {
	// From example List role assignments for a resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		"a925f2f7-5c63-4b7b-8799-25a5f97bc3b2")
	pager := client.ListForResource("testrg",
		"Microsoft.DocumentDb",
		"databaseAccounts",
		"test-db-account",
		&RoleAssignmentsListForResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignment.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignments_Get(t *testing.T) {
	// From example Get role assignment by scope and name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	res, err := client.Get(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2",
		"b0f43c54-e787-4862-89b1-a653fa9cf747",
		&RoleAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}
}

func TestRoleAssignments_Create(t *testing.T) {
	// From example Create role assignment for resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	res, err := client.Create(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/resourceGroups/testrg/providers/Microsoft.DocumentDb/databaseAccounts/test-db-account",
		"05c5a614-a7d6-4502-b150-c2fb455033ff",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}

	// From example Create role assignment for resource group
	res, err = client.Create(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/resourceGroups/testrg",
		"05c5a614-a7d6-4502-b150-c2fb455033ff",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}

	// From example Create role assignment for subscription
	res, err = client.Create(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2",
		"05c5a614-a7d6-4502-b150-c2fb455033ff",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}
}

func TestRoleAssignments_Delete(t *testing.T) {
	// From example Delete role assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	res, err := client.Delete(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2",
		"b0f43c54-e787-4862-89b1-a653fa9cf747",
		&RoleAssignmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}
}

func TestRoleAssignments_Validate(t *testing.T) {
	// From example Validate a role assignment create or update operation with failed validation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	_, err := client.Validate(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2",
		"05c5a614-a7d6-4502-b150-c2fb455033ff",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsValidateOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Validate a role assignment create or update operation with successful validation
	_, err = client.Validate(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2",
		"05c5a614-a7d6-4502-b150-c2fb455033ff",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsValidateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoleAssignments_ListForScope(t *testing.T) {
	// From example List role assignments for scope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	pager := client.ListForScope("subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2",
		&RoleAssignmentsListForScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignment.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignments_GetById(t *testing.T) {
	// From example Get role assignment by ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	res, err := client.GetByID(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleAssignments/b0f43c54-e787-4862-89b1-a653fa9cf747",
		&RoleAssignmentsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}
}

func TestRoleAssignments_CreateById(t *testing.T) {
	// From example Create or update role assignment by ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	res, err := client.CreateByID(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleAssignments/b0f43c54-e787-4862-89b1-a653fa9cf747",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsCreateByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}
}

func TestRoleAssignments_DeleteById(t *testing.T) {
	// From example Delete role assignment by ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	res, err := client.DeleteByID(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleAssignments/b0f43c54-e787-4862-89b1-a653fa9cf747",
		&RoleAssignmentsDeleteByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignment.ID == nil {
		t.Fatal("RoleAssignment.ID should not be nil!")
	}
}

func TestRoleAssignments_ValidateById(t *testing.T) {
	// From example Validate a role assignment create or update operation by ID with failed validation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentsClient(con,
		nil)
	_, err := client.ValidateByID(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleAssignments/b0f43c54-e787-4862-89b1-a653fa9cf747",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsValidateByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Validate a role assignment create or update operation by ID with successful validation
	_, err = client.ValidateByID(ctx,
		"subscriptions/a925f2f7-5c63-4b7b-8799-25a5f97bc3b2/providers/Microsoft.Authorization/roleAssignments/b0f43c54-e787-4862-89b1-a653fa9cf747",
		RoleAssignmentCreateParameters{
			Properties: &RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("ce2ce14e-85d7-4629-bdbc-454d0519d987"),
				PrincipalType:    PrincipalTypeUser.ToPtr(),
				RoleDefinitionID: to.StringPtr("/providers/Microsoft.Authorization/roleDefinitions/0b5fe924-9a61-425c-96af-cfe6e287ca2d"),
			},
		},
		&RoleAssignmentsValidateByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPermissions_ListForResourceGroup(t *testing.T) {
	// From example List permissions for resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPermissionsClient(con,
		"subID")
	pager := client.ListForResourceGroup("rgname",
		&PermissionsListForResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPermissions_ListForResource(t *testing.T) {
	// From example List permissions for resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPermissionsClient(con,
		"subId")
	pager := client.ListForResource("rgname",
		"rpnamespace",
		"parentResourcePath",
		"resourceType",
		"resourceName",
		&PermissionsListForResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestRoleDefinitions_Delete(t *testing.T) {
	// From example Delete role definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleDefinitionsClient(con)
	res, err := client.Delete(ctx,
		"scope",
		"roleDefinitionId",
		&RoleDefinitionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleDefinition.ID == nil {
		t.Fatal("RoleDefinition.ID should not be nil!")
	}
}

func TestRoleDefinitions_Get(t *testing.T) {
	// From example Get role definition by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleDefinitionsClient(con)
	res, err := client.Get(ctx,
		"scope",
		"roleDefinitionId",
		&RoleDefinitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleDefinition.ID == nil {
		t.Fatal("RoleDefinition.ID should not be nil!")
	}
}

func TestRoleDefinitions_CreateOrUpdate(t *testing.T) {
	// From example Create role definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleDefinitionsClient(con)
	res, err := client.CreateOrUpdate(ctx,
		"scope",
		"roleDefinitionId",
		RoleDefinition{},
		&RoleDefinitionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleDefinition.ID == nil {
		t.Fatal("RoleDefinition.ID should not be nil!")
	}
}

func TestRoleDefinitions_List(t *testing.T) {
	// From example List role definition for scope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleDefinitionsClient(con)
	pager := client.List("scope",
		&RoleDefinitionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleDefinition.ID should not be nil!")
			}
		}
	}
}

func TestRoleDefinitions_GetById(t *testing.T) {
	// From example Get role definition by ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleDefinitionsClient(con)
	res, err := client.GetByID(ctx,
		"roleDefinitionId",
		&RoleDefinitionsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleDefinition.ID == nil {
		t.Fatal("RoleDefinition.ID should not be nil!")
	}
}

func TestRoleAssignmentMetrics_GetMetricsForSubscription(t *testing.T) {
	// From example Get role assignment metrics for subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentMetricsClient(con,
		"a925f2f7-5c63-4b7b-8799-25a5f97bc3b2")
	_, err := client.GetMetricsForSubscription(ctx,
		&RoleAssignmentMetricsGetMetricsForSubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEligibleChildResources_Get(t *testing.T) {
	// From example GetEligibleChildResourcesByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEligibleChildResourcesClient(con)
	pager := client.Get("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&EligibleChildResourcesGetOptions{Filter: to.StringPtr("resourceType+eq+'resourcegroup'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EligibleChildResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EligibleChildResource.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignmentSchedules_Get(t *testing.T) {
	// From example GetRoleAssignmentScheduleByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentSchedulesClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"c9e264ff-3133-4776-a81a-ebc7c33c8ec6",
		&RoleAssignmentSchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignmentSchedule.ID == nil {
		t.Fatal("RoleAssignmentSchedule.ID should not be nil!")
	}
}

func TestRoleAssignmentSchedules_ListForScope(t *testing.T) {
	// From example GetRoleAssignmentSchedulesByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentSchedulesClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&RoleAssignmentSchedulesListForScopeOptions{Filter: to.StringPtr("assignedTo('a3bb8764-cb92-4276-9d2a-ca1e895e55ea')")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignmentSchedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignmentSchedule.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignmentScheduleInstances_ListForScope(t *testing.T) {
	// From example GetRoleAssignmentScheduleInstancesByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentScheduleInstancesClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&RoleAssignmentScheduleInstancesListForScopeOptions{Filter: to.StringPtr("assignedTo('a3bb8764-cb92-4276-9d2a-ca1e895e55ea')")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignmentScheduleInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignmentScheduleInstance.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignmentScheduleInstances_Get(t *testing.T) {
	// From example GetRoleAssignmentScheduleInstanceByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentScheduleInstancesClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"ed9b8180-cef7-4c77-a63c-b8566ecfc412",
		&RoleAssignmentScheduleInstancesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignmentScheduleInstance.ID == nil {
		t.Fatal("RoleAssignmentScheduleInstance.ID should not be nil!")
	}
}

func TestRoleAssignmentScheduleRequests_Create(t *testing.T) {
	// From example PutRoleAssignmentScheduleRequest
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentScheduleRequestsClient(con)
	res, err := client.Create(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"fea7a502-9a96-4806-a26f-eee560e52045",
		RoleAssignmentScheduleRequest{
			Properties: &RoleAssignmentScheduleRequestProperties{
				Condition:                       to.StringPtr("@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'"),
				ConditionVersion:                to.StringPtr("1.0"),
				LinkedRoleEligibilityScheduleID: to.StringPtr("b1477448-2cc6-4ceb-93b4-54a202a89413"),
				PrincipalID:                     to.StringPtr("a3bb8764-cb92-4276-9d2a-ca1e895e55ea"),
				RequestType:                     RequestTypeSelfActivate.ToPtr(),
				RoleDefinitionID:                to.StringPtr("/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608"),
				ScheduleInfo: &RoleAssignmentScheduleRequestPropertiesScheduleInfo{
					Expiration: &RoleAssignmentScheduleRequestPropertiesScheduleInfoExpiration{
						Type:        TypeAfterDuration.ToPtr(),
						Duration:    to.StringPtr("PT8H"),
						EndDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "null"); return t }()),
					},
					StartDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-09T21:35:27.91Z"); return t }()),
				},
			},
		},
		&RoleAssignmentScheduleRequestsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignmentScheduleRequest.ID == nil {
		t.Fatal("RoleAssignmentScheduleRequest.ID should not be nil!")
	}
}

func TestRoleAssignmentScheduleRequests_Get(t *testing.T) {
	// From example GetRoleAssignmentScheduleRequestByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentScheduleRequestsClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"fea7a502-9a96-4806-a26f-eee560e52045",
		&RoleAssignmentScheduleRequestsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleAssignmentScheduleRequest.ID == nil {
		t.Fatal("RoleAssignmentScheduleRequest.ID should not be nil!")
	}
}

func TestRoleAssignmentScheduleRequests_ListForScope(t *testing.T) {
	// From example GetRoleAssignmentScheduleRequestByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentScheduleRequestsClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&RoleAssignmentScheduleRequestsListForScopeOptions{Filter: to.StringPtr("assignedTo('A3BB8764-CB92-4276-9D2A-CA1E895E55EA')")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleAssignmentScheduleRequest.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleAssignmentScheduleRequest.ID should not be nil!")
			}
		}
	}
}

func TestRoleAssignmentScheduleRequests_Cancel(t *testing.T) {
	// From example CancelRoleAssignmentScheduleRequestByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleAssignmentScheduleRequestsClient(con)
	_, err := client.Cancel(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"fea7a502-9a96-4806-a26f-eee560e52045",
		&RoleAssignmentScheduleRequestsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoleEligibilitySchedules_Get(t *testing.T) {
	// From example GetRoleEligibilityScheduleByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilitySchedulesClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"b1477448-2cc6-4ceb-93b4-54a202a89413",
		&RoleEligibilitySchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleEligibilitySchedule.ID == nil {
		t.Fatal("RoleEligibilitySchedule.ID should not be nil!")
	}
}

func TestRoleEligibilitySchedules_ListForScope(t *testing.T) {
	// From example GetRoleEligibilitySchedulesByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilitySchedulesClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&RoleEligibilitySchedulesListForScopeOptions{Filter: to.StringPtr("assignedTo('a3bb8764-cb92-4276-9d2a-ca1e895e55ea')")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleEligibilitySchedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleEligibilitySchedule.ID should not be nil!")
			}
		}
	}
}

func TestRoleEligibilityScheduleInstances_ListForScope(t *testing.T) {
	// From example GetRoleEligibilityScheduleInstancesByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilityScheduleInstancesClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&RoleEligibilityScheduleInstancesListForScopeOptions{Filter: to.StringPtr("assignedTo('a3bb8764-cb92-4276-9d2a-ca1e895e55ea')")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleEligibilityScheduleInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleEligibilityScheduleInstance.ID should not be nil!")
			}
		}
	}
}

func TestRoleEligibilityScheduleInstances_Get(t *testing.T) {
	// From example GetRoleEligibilityScheduleInstanceByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilityScheduleInstancesClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"21e4b59a-0499-4fe0-a3c3-43a3055b773a",
		&RoleEligibilityScheduleInstancesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleEligibilityScheduleInstance.ID == nil {
		t.Fatal("RoleEligibilityScheduleInstance.ID should not be nil!")
	}
}

func TestRoleEligibilityScheduleRequests_Create(t *testing.T) {
	// From example PutRoleEligibilityScheduleRequest
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilityScheduleRequestsClient(con)
	res, err := client.Create(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"64caffb6-55c0-4deb-a585-68e948ea1ad6",
		RoleEligibilityScheduleRequest{
			Properties: &RoleEligibilityScheduleRequestProperties{
				Condition:        to.StringPtr("@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'"),
				ConditionVersion: to.StringPtr("1.0"),
				PrincipalID:      to.StringPtr("a3bb8764-cb92-4276-9d2a-ca1e895e55ea"),
				RequestType:      RequestTypeAdminAssign.ToPtr(),
				RoleDefinitionID: to.StringPtr("/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608"),
				ScheduleInfo: &RoleEligibilityScheduleRequestPropertiesScheduleInfo{
					Expiration: &RoleEligibilityScheduleRequestPropertiesScheduleInfoExpiration{
						Type:        TypeAfterDuration.ToPtr(),
						Duration:    to.StringPtr("P365D"),
						EndDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "null"); return t }()),
					},
					StartDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-09T21:31:27.91Z"); return t }()),
				},
			},
		},
		&RoleEligibilityScheduleRequestsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleEligibilityScheduleRequest.ID == nil {
		t.Fatal("RoleEligibilityScheduleRequest.ID should not be nil!")
	}
}

func TestRoleEligibilityScheduleRequests_Get(t *testing.T) {
	// From example GetRoleEligibilityScheduleRequestByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilityScheduleRequestsClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"64caffb6-55c0-4deb-a585-68e948ea1ad6",
		&RoleEligibilityScheduleRequestsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleEligibilityScheduleRequest.ID == nil {
		t.Fatal("RoleEligibilityScheduleRequest.ID should not be nil!")
	}
}

func TestRoleEligibilityScheduleRequests_ListForScope(t *testing.T) {
	// From example GetRoleEligibilityScheduleRequestByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilityScheduleRequestsClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		&RoleEligibilityScheduleRequestsListForScopeOptions{Filter: to.StringPtr("assignedTo('A3BB8764-CB92-4276-9D2A-CA1E895E55EA')")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleEligibilityScheduleRequest.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleEligibilityScheduleRequest.ID should not be nil!")
			}
		}
	}
}

func TestRoleEligibilityScheduleRequests_Cancel(t *testing.T) {
	// From example CancelRoleEligibilityScheduleRequestByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleEligibilityScheduleRequestsClient(con)
	_, err := client.Cancel(ctx,
		"providers/Microsoft.Subscription/subscriptions/dfa2a084-766f-4003-8ae1-c4aeb893a99f",
		"64caffb6-55c0-4deb-a585-68e948ea1ad6",
		&RoleEligibilityScheduleRequestsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoleManagementPolicies_Get(t *testing.T) {
	// From example GetRoleManagementPolicyByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPoliciesClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"570c3619-7688-4b34-b290-2b8bb3ccab2a",
		&RoleManagementPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleManagementPolicy.ID == nil {
		t.Fatal("RoleManagementPolicy.ID should not be nil!")
	}
}

func TestRoleManagementPolicies_Update(t *testing.T) {
	// From example PatchPartialRoleManagementPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPoliciesClient(con)
	res, err := client.Update(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"570c3619-7688-4b34-b290-2b8bb3ccab2a",
		RoleManagementPolicy{
			Properties: &RoleManagementPolicyProperties{
				Rules: []RoleManagementPolicyRule{
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Expiration_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyExpirationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsExpirationRequired: to.BoolPtr(false),
						MaximumDuration:      to.StringPtr("P180D"),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Admin_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("admin_admin_eligible@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeAdmin.ToPtr(),
					}},
			},
		},
		&RoleManagementPoliciesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleManagementPolicy.ID == nil {
		t.Fatal("RoleManagementPolicy.ID should not be nil!")
	}

	// From example PatchRoleManagementPolicy
	res, err = client.Update(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"570c3619-7688-4b34-b290-2b8bb3ccab2a",
		RoleManagementPolicy{
			Properties: &RoleManagementPolicyProperties{
				Rules: []RoleManagementPolicyRule{
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Expiration_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyExpirationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsExpirationRequired: to.BoolPtr(false),
						MaximumDuration:      to.StringPtr("P180D"),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Admin_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("admin_admin_eligible@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeAdmin.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Requestor_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("requestor_admin_eligible@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeRequestor.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Approver_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("approver_admin_eligible@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeApprover.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Enablement_Admin_Eligibility"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyEnablementRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Eligibility"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						EnabledRules: []*EnablementRules{},
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Expiration_Admin_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyExpirationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsExpirationRequired: to.BoolPtr(false),
						MaximumDuration:      to.StringPtr("P90D"),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Enablement_Admin_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyEnablementRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						EnabledRules: []*EnablementRules{
							EnablementRulesJustification.ToPtr(),
							EnablementRulesMultiFactorAuthentication.ToPtr()},
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Admin_Admin_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("admin_admin_member@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeAdmin.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Requestor_Admin_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("requestor_admin_member@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeRequestor.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Approver_Admin_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("Admin"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("approver_admin_member@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeApprover.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Expiration_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyExpirationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsExpirationRequired: to.BoolPtr(true),
						MaximumDuration:      to.StringPtr("PT7H"),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Enablement_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyEnablementRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						EnabledRules: []*EnablementRules{
							EnablementRulesJustification.ToPtr(),
							EnablementRulesMultiFactorAuthentication.ToPtr(),
							EnablementRulesTicketing.ToPtr()},
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Approval_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyApprovalRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						Setting: &ApprovalSettings{
							ApprovalMode: ApprovalModeSingleStage.ToPtr(),
							ApprovalStages: []*ApprovalStage{
								{
									ApprovalStageTimeOutInDays:      to.Int32Ptr(1),
									EscalationApprovers:             []*UserSet{},
									EscalationTimeInMinutes:         to.Int32Ptr(0),
									IsApproverJustificationRequired: to.BoolPtr(true),
									IsEscalationEnabled:             to.BoolPtr(false),
									PrimaryApprovers: []*UserSet{
										{
											Description: to.StringPtr("amansw_new_group"),
											ID:          to.StringPtr("2385b0f3-5fa9-43cf-8ca4-b01dc97298cd"),
											IsBackup:    to.BoolPtr(false),
											UserType:    UserTypeGroup.ToPtr(),
										},
										{
											Description: to.StringPtr("amansw_group"),
											ID:          to.StringPtr("2f4913c9-d15b-406a-9946-1d66a28f2690"),
											IsBackup:    to.BoolPtr(false),
											UserType:    UserTypeGroup.ToPtr(),
										}},
								}},
							IsApprovalRequired:               to.BoolPtr(true),
							IsApprovalRequiredForExtension:   to.BoolPtr(false),
							IsRequestorJustificationRequired: to.BoolPtr(true),
						},
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("AuthenticationContext_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyAuthenticationContextRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						ClaimValue: to.StringPtr(""),
						IsEnabled:  to.BoolPtr(false),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Admin_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("admin_enduser_member@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeAdmin.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Requestor_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("requestor_enduser_member@test.com")},
						NotificationType: NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:    RecipientTypeRequestor.ToPtr(),
					},
					{
						RoleManagementPolicyRule: RoleManagementPolicyRule{
							ID:       to.StringPtr("Notification_Approver_EndUser_Assignment"),
							RuleType: RoleManagementPolicyRuleTypeRoleManagementPolicyNotificationRule.ToPtr(),
							Target: &RoleManagementPolicyRuleTarget{
								Caller:              to.StringPtr("EndUser"),
								EnforcedSettings:    []*string{},
								InheritableSettings: []*string{},
								Level:               to.StringPtr("Assignment"),
								TargetObjects:       []*string{},
								Operations: []*string{
									to.StringPtr("All")},
							},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(true),
						NotificationLevel:          NotificationLevelCritical.ToPtr(),
						NotificationRecipients:     []*string{},
						NotificationType:           NotificationDeliveryMechanismEmail.ToPtr(),
						RecipientType:              RecipientTypeApprover.ToPtr(),
					}},
			},
		},
		&RoleManagementPoliciesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleManagementPolicy.ID == nil {
		t.Fatal("RoleManagementPolicy.ID should not be nil!")
	}
}

func TestRoleManagementPolicies_Delete(t *testing.T) {
	// From example DeleteRoleManagementPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPoliciesClient(con)
	_, err := client.Delete(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"570c3619-7688-4b34-b290-2b8bb3ccab2a",
		&RoleManagementPoliciesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoleManagementPolicies_ListForScope(t *testing.T) {
	// From example GetRoleManagementPolicyByRoleDefinitionFilter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPoliciesClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		&RoleManagementPoliciesListForScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleManagementPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleManagementPolicy.ID should not be nil!")
			}
		}
	}
}

func TestRoleManagementPolicyAssignments_Get(t *testing.T) {
	// From example GetConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPolicyAssignmentsClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"b959d571-f0b5-4042-88a7-01be6cb22db9_a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
		&RoleManagementPolicyAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleManagementPolicyAssignment.ID == nil {
		t.Fatal("RoleManagementPolicyAssignment.ID should not be nil!")
	}
}

func TestRoleManagementPolicyAssignments_Create(t *testing.T) {
	// From example PutRoleManagementPolicyAssignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPolicyAssignmentsClient(con)
	res, err := client.Create(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"b959d571-f0b5-4042-88a7-01be6cb22db9_a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
		RoleManagementPolicyAssignment{
			Properties: &RoleManagementPolicyAssignmentProperties{
				PolicyID:         to.StringPtr("/providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368/providers/Microsoft.Authorization/roleManagementPolicies/b959d571-f0b5-4042-88a7-01be6cb22db9"),
				RoleDefinitionID: to.StringPtr("/subscriptions/129ff972-28f8-46b8-a726-e497be039368/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24"),
				Scope:            to.StringPtr("/subscriptions/129ff972-28f8-46b8-a726-e497be039368"),
			},
		},
		&RoleManagementPolicyAssignmentsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RoleManagementPolicyAssignment.ID == nil {
		t.Fatal("RoleManagementPolicyAssignment.ID should not be nil!")
	}
}

func TestRoleManagementPolicyAssignments_Delete(t *testing.T) {
	// From example DeleteRoleManagementPolicyAssignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPolicyAssignmentsClient(con)
	_, err := client.Delete(ctx,
		"providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		"b959d571-f0b5-4042-88a7-01be6cb22db9_a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
		&RoleManagementPolicyAssignmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoleManagementPolicyAssignments_ListForScope(t *testing.T) {
	// From example GetRoleManagementPolicyAssignmentByScope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoleManagementPolicyAssignmentsClient(con)
	pager := client.ListForScope("providers/Microsoft.Subscription/subscriptions/129ff972-28f8-46b8-a726-e497be039368",
		&RoleManagementPolicyAssignmentsListForScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RoleManagementPolicyAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RoleManagementPolicyAssignment.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
