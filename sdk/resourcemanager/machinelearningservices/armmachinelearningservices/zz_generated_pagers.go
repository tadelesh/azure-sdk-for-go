//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ComputeClientListNodesPager provides operations for iterating over paged responses.
type ComputeClientListNodesPager struct {
	client    *ComputeClient
	current   ComputeClientListNodesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ComputeClientListNodesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ComputeClientListNodesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AmlComputeNodesInformation.NextLink == nil || len(*p.current.AmlComputeNodesInformation.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ComputeClientListNodesPager) NextPage(ctx context.Context) (ComputeClientListNodesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ComputeClientListNodesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ComputeClientListNodesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ComputeClientListNodesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ComputeClientListNodesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listNodesHandleResponse(resp)
	if err != nil {
		return ComputeClientListNodesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ComputeClientListPager provides operations for iterating over paged responses.
type ComputeClientListPager struct {
	client    *ComputeClient
	current   ComputeClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ComputeClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ComputeClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PaginatedComputeResourcesList.NextLink == nil || len(*p.current.PaginatedComputeResourcesList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ComputeClientListPager) NextPage(ctx context.Context) (ComputeClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ComputeClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ComputeClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ComputeClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ComputeClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ComputeClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PrivateEndpointConnectionsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// QuotasClientListPager provides operations for iterating over paged responses.
type QuotasClientListPager struct {
	client    *QuotasClient
	current   QuotasClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, QuotasClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *QuotasClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListWorkspaceQuotas.NextLink == nil || len(*p.current.ListWorkspaceQuotas.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *QuotasClientListPager) NextPage(ctx context.Context) (QuotasClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return QuotasClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return QuotasClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return QuotasClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return QuotasClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return QuotasClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UsagesClientListPager provides operations for iterating over paged responses.
type UsagesClientListPager struct {
	client    *UsagesClient
	current   UsagesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsagesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UsagesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListUsagesResult.NextLink == nil || len(*p.current.ListUsagesResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UsagesClientListPager) NextPage(ctx context.Context) (UsagesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UsagesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UsagesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspaceConnectionsClientListPager provides operations for iterating over paged responses.
type WorkspaceConnectionsClientListPager struct {
	client    *WorkspaceConnectionsClient
	current   WorkspaceConnectionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspaceConnectionsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WorkspaceConnectionsClientListPager) NextPage(ctx context.Context) (WorkspaceConnectionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WorkspaceConnectionsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspaceConnectionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspaceConnectionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspaceConnectionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WorkspaceConnectionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspaceFeaturesClientListPager provides operations for iterating over paged responses.
type WorkspaceFeaturesClientListPager struct {
	client    *WorkspaceFeaturesClient
	current   WorkspaceFeaturesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspaceFeaturesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspaceFeaturesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListAmlUserFeatureResult.NextLink == nil || len(*p.current.ListAmlUserFeatureResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspaceFeaturesClientListPager) NextPage(ctx context.Context) (WorkspaceFeaturesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspaceFeaturesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspaceFeaturesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspaceFeaturesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspaceFeaturesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WorkspaceFeaturesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspaceSKUsClientListPager provides operations for iterating over paged responses.
type WorkspaceSKUsClientListPager struct {
	client    *WorkspaceSKUsClient
	current   WorkspaceSKUsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspaceSKUsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspaceSKUsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUListResult.NextLink == nil || len(*p.current.SKUListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspaceSKUsClientListPager) NextPage(ctx context.Context) (WorkspaceSKUsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspaceSKUsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspaceSKUsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspaceSKUsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspaceSKUsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WorkspaceSKUsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListByResourceGroupPager provides operations for iterating over paged responses.
type WorkspacesClientListByResourceGroupPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspacesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceListResult.NextLink == nil || len(*p.current.WorkspaceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListByResourceGroupPager) NextPage(ctx context.Context) (WorkspacesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspacesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListBySubscriptionPager provides operations for iterating over paged responses.
type WorkspacesClientListBySubscriptionPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspacesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceListResult.NextLink == nil || len(*p.current.WorkspaceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListBySubscriptionPager) NextPage(ctx context.Context) (WorkspacesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspacesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}
