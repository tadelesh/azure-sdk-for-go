//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.Workspace{
			Name: to.Ptr("testworkspace"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
			Identity: &armmachinelearningservices.Identity{
				Type:        to.Ptr(armmachinelearningservices.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": {
						ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
				},
			},
			Location: to.Ptr("eastus2euap"),
			Properties: &armmachinelearningservices.WorkspaceProperties{
				Description:                     to.Ptr("test description"),
				AllowPublicAccessWhenBehindVnet: to.Ptr(false),
				ApplicationInsights:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
				ContainerRegistry:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
				DiscoveryURL:                    to.Ptr("http://example.com"),
				Encryption: &armmachinelearningservices.EncryptionProperty{
					Identity: &armmachinelearningservices.IdentityForCmk{
						UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
					},
					KeyVaultProperties: &armmachinelearningservices.KeyVaultProperties{
						IdentityClientID: to.Ptr(""),
						KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
						KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					},
					Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
				},
				FriendlyName:      to.Ptr("HelloName"),
				HbiWorkspace:      to.Ptr(false),
				ImageBuildCompute: to.Ptr("testcompute"),
				KeyVault:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				PrivateEndpointConnections: []*armmachinelearningservices.PrivateEndpointConnection{
					{
						Name: to.Ptr("testprivatelinkconnection"),
						Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/testprivatelinkconnection"),
						Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
							},
							PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-Approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				PrivateLinkCount:                to.Ptr[int32](0),
				PublicNetworkAccess:             to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
				ServiceProvisionedResourceGroup: to.Ptr("testworkspace_0000111122223333"),
				SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
					{
						Name: to.Ptr("testcosmosdbresource"),
						Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
							GroupID:               to.Ptr("Sql"),
							PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testcosmosdbresource/privateLinkResources/Sql"),
							RequestMessage:        to.Ptr("Please approve"),
							Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
					}},
				StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"workspace-1234",
		"testworkspace",
		armmachinelearningservices.Workspace{
			Identity: &armmachinelearningservices.Identity{
				Type: to.Ptr(armmachinelearningservices.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": {},
				},
			},
			Location: to.Ptr("eastus2euap"),
			Properties: &armmachinelearningservices.WorkspaceProperties{
				Description:         to.Ptr("test description"),
				ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
				ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
				Encryption: &armmachinelearningservices.EncryptionProperty{
					Identity: &armmachinelearningservices.IdentityForCmk{
						UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
					},
					KeyVaultProperties: &armmachinelearningservices.KeyVaultProperties{
						IdentityClientID: to.Ptr(""),
						KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
						KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					},
					Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
				},
				FriendlyName: to.Ptr("HelloName"),
				HbiWorkspace: to.Ptr(false),
				KeyVault:     to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
					{
						Name: to.Ptr("testdbresource"),
						Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
							GroupID:               to.Ptr("Sql"),
							PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
							RequestMessage:        to.Ptr("Please approve"),
							Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
					}},
				StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		},
		&armmachinelearningservices.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.Workspace{
			Name: to.Ptr("testworkspace"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
			Identity: &armmachinelearningservices.Identity{
				Type:        to.Ptr(armmachinelearningservices.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": {
						ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
				},
			},
			Location: to.Ptr("eastus2euap"),
			Properties: &armmachinelearningservices.WorkspaceProperties{
				Description:                     to.Ptr("test description"),
				AllowPublicAccessWhenBehindVnet: to.Ptr(false),
				ApplicationInsights:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
				ContainerRegistry:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
				DiscoveryURL:                    to.Ptr("http://example.com"),
				Encryption: &armmachinelearningservices.EncryptionProperty{
					Identity: &armmachinelearningservices.IdentityForCmk{
						UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
					},
					KeyVaultProperties: &armmachinelearningservices.KeyVaultProperties{
						IdentityClientID: to.Ptr(""),
						KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
						KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					},
					Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
				},
				FriendlyName:        to.Ptr("HelloName"),
				HbiWorkspace:        to.Ptr(false),
				KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
				SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
					{
						Name: to.Ptr("testdbresource"),
						Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
							GroupID:               to.Ptr("Sql"),
							PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
							RequestMessage:        to.Ptr("Please approve"),
							Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
					}},
				StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"workspace-1234",
		"testworkspace",
		&armmachinelearningservices.WorkspacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/delete.json: %v", err)
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"workspace-1234",
		"testworkspace",
		armmachinelearningservices.WorkspaceUpdateParameters{
			Properties: &armmachinelearningservices.WorkspacePropertiesUpdateParameters{
				Description:         to.Ptr("new description"),
				FriendlyName:        to.Ptr("New friendly name"),
				PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.Workspace{
			Name: to.Ptr("testworkspace"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
			Identity: &armmachinelearningservices.Identity{
				Type:        to.Ptr(armmachinelearningservices.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			Location: to.Ptr("eastus2euap"),
			Properties: &armmachinelearningservices.WorkspaceProperties{
				Description:         to.Ptr("new description"),
				ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
				ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
				DiscoveryURL:        to.Ptr("http://example.com"),
				FriendlyName:        to.Ptr("New friendly name"),
				KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
				StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Workspaces by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("workspace-1234",
		&armmachinelearningservices.WorkspacesClientListByResourceGroupOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.WorkspaceListResult{
			Value: []*armmachinelearningservices.Workspace{
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
					},
				},
				{
					Name:     to.Ptr("testworkspace1"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace1"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistryNew"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName 1"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkvNew"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccountOld"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Diagnose(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/diagnose.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Diagnose Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDiagnose(ctx,
		"workspace-1234",
		"testworkspace",
		&armmachinelearningservices.WorkspacesClientBeginDiagnoseOptions{Parameters: &armmachinelearningservices.DiagnoseWorkspaceParameters{
			Value: &armmachinelearningservices.DiagnoseRequestProperties{
				ApplicationInsights: map[string]interface{}{},
				ContainerRegistry:   map[string]interface{}{},
				DNSResolution:       map[string]interface{}{},
				KeyVault:            map[string]interface{}{},
				Nsg:                 map[string]interface{}{},
				Others:              map[string]interface{}{},
				ResourceLock:        map[string]interface{}{},
				StorageAccount:      map[string]interface{}{},
				Udr:                 map[string]interface{}{},
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/diagnose.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/diagnose.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.DiagnoseResponseResult{
			Value: &armmachinelearningservices.DiagnoseResponseResultValue{
				ApplicationInsightsResults: []*armmachinelearningservices.DiagnoseResult{},
				ContainerRegistryResults:   []*armmachinelearningservices.DiagnoseResult{},
				DNSResolutionResults: []*armmachinelearningservices.DiagnoseResult{
					{
						Code:    to.Ptr("CustomDNSInUse"),
						Level:   to.Ptr(armmachinelearningservices.DiagnoseResultLevelWarning),
						Message: to.Ptr("We have detected an on-premise dns server is configured. Please make sure conditional forwarding is configured correctly according to doc https://foo"),
					}},
				KeyVaultResults:            []*armmachinelearningservices.DiagnoseResult{},
				NetworkSecurityRuleResults: []*armmachinelearningservices.DiagnoseResult{},
				OtherResults:               []*armmachinelearningservices.DiagnoseResult{},
				ResourceLockResults:        []*armmachinelearningservices.DiagnoseResult{},
				StorageAccountResults:      []*armmachinelearningservices.DiagnoseResult{},
				UserDefinedRouteResults:    []*armmachinelearningservices.DiagnoseResult{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnoseResponseResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnoseResponseResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/diagnose.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListKeys(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", cred, &options)
	res, err := client.ListKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ListWorkspaceKeysResult{
			ContainerRegistryCredentials: &armmachinelearningservices.RegistryListCredentialsResult{
				Passwords: []*armmachinelearningservices.Password{
					{
						Name:  to.Ptr("password"),
						Value: to.Ptr("<value>"),
					},
					{
						Name:  to.Ptr("password2"),
						Value: to.Ptr("0KARRQoQHSUq1yViPWg7YFernOS=Ic/t"),
					}},
				Username: to.Ptr("testdemoworkjmjmeykp"),
			},
			NotebookAccessKeys:    &armmachinelearningservices.ListNotebookKeysResult{},
			UserStorageResourceID: to.Ptr("/subscriptions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/resourceGroups/ragargeastus2euap/providers/Microsoft.Storage/storageAccounts/testdemoworkazashomr"),
		}
		if !reflect.DeepEqual(exampleRes, res.ListWorkspaceKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListWorkspaceKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ResyncKeys(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/resyncKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resync Workspace Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", cred, &options)
	poller, err := client.BeginResyncKeys(ctx,
		"testrg123",
		"workspaces123",
		&armmachinelearningservices.WorkspacesClientBeginResyncKeysOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/resyncKeys.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/resyncKeys.json: %v", err)
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Workspaces by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListBySubscription(&armmachinelearningservices.WorkspacesClientListBySubscriptionOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.WorkspaceListResult{
			Value: []*armmachinelearningservices.Workspace{
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
					},
				},
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-5678/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistryNew"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkvNew"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccountOld"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListNotebookAccessToken(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listNotebookAccessToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListNotebookAccessToken(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listNotebookAccessToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.NotebookAccessTokenResult{
			ExpiresIn:          to.Ptr[int32](28800),
			HostName:           to.Ptr("Host product name"),
			NotebookResourceID: to.Ptr("94350843095843059"),
			PublicDNS:          to.Ptr("resource.notebooks.azure.net"),
			Scope:              to.Ptr("aznb_identity"),
			TokenType:          to.Ptr("Bearer"),
		}
		if !reflect.DeepEqual(exampleRes, res.NotebookAccessTokenResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotebookAccessTokenResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listNotebookAccessToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_PrepareNotebook(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/prepare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Prepare Notebook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", cred, &options)
	poller, err := client.BeginPrepareNotebook(ctx,
		"testrg123",
		"workspaces123",
		&armmachinelearningservices.WorkspacesClientBeginPrepareNotebookOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/prepare.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/prepare.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.NotebookResourceInfo{
			Fqdn: to.Ptr("testnotebook.notebooks.azure.com"),
			NotebookPreparationError: &armmachinelearningservices.NotebookPreparationError{
				ErrorMessage: to.Ptr("general error"),
				StatusCode:   to.Ptr[int32](500),
			},
			ResourceID: to.Ptr("aabbccddee112233445566778899"),
		}
		if !reflect.DeepEqual(exampleRes, res.NotebookResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotebookResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/prepare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListStorageAccountKeys(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listStorageAccountKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", cred, &options)
	res, err := client.ListStorageAccountKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listStorageAccountKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ListStorageAccountKeysResult{}
		if !reflect.DeepEqual(exampleRes, res.ListStorageAccountKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListStorageAccountKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Workspace/listStorageAccountKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListNotebookKeys(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", cred, &options)
	res, err := client.ListNotebookKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/listKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ListNotebookKeysResult{}
		if !reflect.DeepEqual(exampleRes, res.ListNotebookKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListNotebookKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Notebook/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/ExternalFQDN/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOutboundNetworkDependenciesEndpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListOutboundNetworkDependenciesEndpoints(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/ExternalFQDN/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ExternalFQDNResponse{
			Value: []*armmachinelearningservices.FQDNEndpoints{
				{
					Properties: &armmachinelearningservices.FQDNEndpointsProperties{
						Category: to.Ptr("Azure Active Directory"),
						Endpoints: []*armmachinelearningservices.FQDNEndpoint{
							{
								DomainName: to.Ptr("login.microsoftonline.com"),
								EndpointDetails: []*armmachinelearningservices.FQDNEndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							}},
					},
				},
				{
					Properties: &armmachinelearningservices.FQDNEndpointsProperties{
						Category: to.Ptr("Azure portal"),
						Endpoints: []*armmachinelearningservices.FQDNEndpoint{
							{
								DomainName: to.Ptr("management.azure.com"),
								EndpointDetails: []*armmachinelearningservices.FQDNEndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExternalFQDNResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExternalFQDNResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/ExternalFQDN/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Usage/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Usages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewUsagesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Usage/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.ListUsagesResult{
			Value: []*armmachinelearningservices.Usage{
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Clusters"),
						Value:          to.Ptr("Clusters"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/totalCores/usages"),
					CurrentValue: to.Ptr[int64](7),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Total Cluster Dedicated Regional vCPUs"),
						Value:          to.Ptr("Total Cluster Dedicated Regional vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/dedicatedCores/usages"),
					CurrentValue: to.Ptr[int64](14),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](48),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/usages"),
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_dsv2/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster2_dsv2/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](12),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_nc/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluser1_nc/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Total Cluster LowPriority Regional vCPUs"),
						Value:          to.Ptr("Total Cluster LowPriority Regional vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/lowPriorityCores/usages"),
					CurrentValue: to.Ptr[int64](18),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard D Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_D_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_DSv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_Dv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_FSv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](18),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
					CurrentValue: to.Ptr[int64](12),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluster2_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluster3_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv3_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_ND_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NDv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NV_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListUsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Usage/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineSizes_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/VirtualMachineSize/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List VM Sizes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewVirtualMachineSizesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.List(ctx,
		"eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/VirtualMachineSize/list.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.VirtualMachineSizeListResult{
			Value: []*armmachinelearningservices.VirtualMachineSize{
				{
					Name: to.Ptr("Standard_DS1_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.13),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.01),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.07),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.05),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](7168),
					MemoryGB:            to.Ptr[float64](3.5),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance")},
					VCPUs: to.Ptr[int32](1),
				},
				{
					Name: to.Ptr("Standard_DS2_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.03),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.15),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.1),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.25),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](14336),
					MemoryGB:            to.Ptr[float64](7),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance"),
						to.Ptr("MIR")},
					VCPUs: to.Ptr[int32](2),
				},
				{
					Name: to.Ptr("Standard_DS3_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.2),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.06),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.5),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.29),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](28672),
					MemoryGB:            to.Ptr[float64](14),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance"),
						to.Ptr("MIR")},
					VCPUs: to.Ptr[int32](4),
				},
				{
					Name: to.Ptr("Standard_DS4_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.12),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.4),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](1.01),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.58),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](57344),
					MemoryGB:            to.Ptr[float64](28),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance"),
						to.Ptr("MIR")},
					VCPUs: to.Ptr[int32](8),
				},
				{
					Name: to.Ptr("Standard_DS5_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](1.17),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.81),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](2.02),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.23),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](114688),
					MemoryGB:            to.Ptr[float64](56),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance"),
						to.Ptr("MIR")},
					VCPUs: to.Ptr[int32](16),
				},
				{
					Name: to.Ptr("Standard_DS11_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.26),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.18),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.11),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.04),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](28672),
					MemoryGB:            to.Ptr[float64](14),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance")},
					VCPUs: to.Ptr[int32](2),
				},
				{
					Name: to.Ptr("Standard_DS12_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.37),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.53),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.21),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.07),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](57344),
					MemoryGB:            to.Ptr[float64](28),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance")},
					VCPUs: to.Ptr[int32](4),
				},
				{
					Name: to.Ptr("Standard_DS13_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.15),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.42),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.74),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](1.06),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](114688),
					MemoryGB:            to.Ptr[float64](56),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance")},
					VCPUs: to.Ptr[int32](8),
				},
				{
					Name: to.Ptr("Standard_DS14_v2"),
					EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
						BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
						UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
						Values: []*armmachinelearningservices.EstimatedVMPrice{
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](0.3),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
								RetailPrice: to.Ptr[float64](1.48),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](0.84),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
							},
							{
								OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
								RetailPrice: to.Ptr[float64](2.11),
								VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
							}},
					},
					Family:              to.Ptr("standardDSv2Family"),
					Gpus:                to.Ptr[int32](0),
					LowPriorityCapable:  to.Ptr(true),
					MaxResourceVolumeMB: to.Ptr[int32](229376),
					MemoryGB:            to.Ptr[float64](112),
					OSVhdSizeMB:         to.Ptr[int32](1047552),
					PremiumIO:           to.Ptr(true),
					SupportedComputeTypes: []*string{
						to.Ptr("AmlCompute"),
						to.Ptr("ComputeInstance")},
					VCPUs: to.Ptr[int32](16),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/VirtualMachineSize/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotas_Update(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Quota/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"update quotas"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewQuotasClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"eastus",
		armmachinelearningservices.QuotaUpdateParameters{
			Value: []*armmachinelearningservices.QuotaBaseProperties{
				{
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](100),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](200),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Quota/update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.UpdateWorkspaceQuotasResult{
			Value: []*armmachinelearningservices.UpdateWorkspaceQuotas{
				{
					Type:   to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:  to.Ptr[int64](100),
					Status: to.Ptr(armmachinelearningservices.StatusSuccess),
					Unit:   to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Type:   to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:  to.Ptr[int64](200),
					Status: to.Ptr(armmachinelearningservices.StatusSuccess),
					Unit:   to.Ptr(armmachinelearningservices.QuotaUnitCount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.UpdateWorkspaceQuotasResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UpdateWorkspaceQuotasResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Quota/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotas_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Quota/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List workspace quotas by VMFamily"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewQuotasClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Quota/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.ListWorkspaceQuotas{
			Value: []*armmachinelearningservices.ResourceQuota{
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](48),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quota"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListWorkspaceQuotas) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListWorkspaceQuotas)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Quota/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Computes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testrg123",
		"workspaces123",
		&armmachinelearningservices.ComputeClientListOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.PaginatedComputeResourcesList{
			Value: []*armmachinelearningservices.ComputeResource{
				{
					Properties: &armmachinelearningservices.AKS{
						Description:       to.Ptr("some compute"),
						ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
						CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
						ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
					},
					Name:     to.Ptr("compute123"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
					Location: to.Ptr("eastus"),
				},
				{
					Properties: &armmachinelearningservices.AKS{
						Description:       to.Ptr("some compute"),
						ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
						CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
						ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute1234-56826-c9b00420020b2"),
					},
					Name:     to.Ptr("compute1234"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute1234"),
					Location: to.Ptr("eastus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PaginatedComputeResourcesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PaginatedComputeResourcesList)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_Get(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/AKSCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a AKS Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/AKSCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
				CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/AKSCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/AmlCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a AML Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/AmlCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
				CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				Properties: &armmachinelearningservices.AmlComputeProperties{
					AllocationState:               to.Ptr(armmachinelearningservices.AllocationStateResizing),
					AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-27T22:28:08.998Z"); return t }()),
					CurrentNodeCount:              to.Ptr[int32](0),
					EnableNodePublicIP:            to.Ptr(true),
					IsolatedNetwork:               to.Ptr(false),
					NodeStateCounts: &armmachinelearningservices.NodeStateCounts{
						IdleNodeCount:      to.Ptr[int32](0),
						LeavingNodeCount:   to.Ptr[int32](0),
						PreemptedNodeCount: to.Ptr[int32](0),
						PreparingNodeCount: to.Ptr[int32](0),
						RunningNodeCount:   to.Ptr[int32](0),
						UnusableNodeCount:  to.Ptr[int32](0),
					},
					OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
					RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessEnabled),
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](1),
						MinNodeCount:                to.Ptr[int32](0),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
					Subnet:          &armmachinelearningservices.ResourceID{},
					TargetNodeCount: to.Ptr[int32](1),
					VMPriority:      to.Ptr(armmachinelearningservices.VMPriorityDedicated),
					VMSize:          to.Ptr("STANDARD_NC6"),
				},
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus2"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/AmlCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/KubernetesCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Kubernetes Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/KubernetesCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.Kubernetes{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
				CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				IsAttachedCompute: to.Ptr(true),
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				Properties: &armmachinelearningservices.KubernetesProperties{
					DefaultInstanceType:           to.Ptr("defaultInstanceType"),
					ExtensionInstanceReleaseTrain: to.Ptr("stable"),
					InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
						"defaultInstanceType": {
							Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
								Limits: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
								Requests: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
							},
						},
					},
					Namespace: to.Ptr("default"),
				},
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/KubernetesCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/ComputeInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ComputeInstance"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/ComputeInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				Properties: &armmachinelearningservices.ComputeInstanceProperties{
					ApplicationSharingPolicy: to.Ptr(armmachinelearningservices.ApplicationSharingPolicyShared),
					Applications: []*armmachinelearningservices.ComputeInstanceApplication{
						{
							DisplayName: to.Ptr("Jupyter"),
							EndpointURI: to.Ptr("https://compute123.eastus2.azureml.net/jupyter"),
						}},
					ComputeInstanceAuthorizationType: to.Ptr(armmachinelearningservices.ComputeInstanceAuthorizationTypePersonal),
					ConnectivityEndpoints: &armmachinelearningservices.ComputeInstanceConnectivityEndpoints{
						PrivateIPAddress: to.Ptr("10.0.0.1"),
						PublicIPAddress:  to.Ptr("10.0.0.1"),
					},
					CreatedBy: &armmachinelearningservices.ComputeInstanceCreatedBy{
						UserID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						UserName:  to.Ptr("foobar@microsoft.com"),
						UserOrgID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					PersonalComputeInstanceSettings: &armmachinelearningservices.PersonalComputeInstanceSettings{
						AssignedUser: &armmachinelearningservices.AssignedUser{
							ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						},
					},
					SSHSettings: &armmachinelearningservices.ComputeInstanceSSHSettings{
						AdminUserName:   to.Ptr("azureuser"),
						SSHPort:         to.Ptr[int32](22),
						SSHPublicAccess: to.Ptr(armmachinelearningservices.SSHPublicAccessEnabled),
					},
					State:  to.Ptr(armmachinelearningservices.ComputeInstanceStateRunning),
					Subnet: &armmachinelearningservices.ResourceID{},
					VMSize: to.Ptr("STANDARD_NC6"),
				},
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus2"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/get/ComputeInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/KubernetesCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Attach a Kubernetes Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.Kubernetes{
				Description: to.Ptr("some compute"),
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
				ResourceID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				Properties: &armmachinelearningservices.KubernetesProperties{
					DefaultInstanceType: to.Ptr("defaultInstanceType"),
					InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
						"defaultInstanceType": {
							Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
								Limits: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
								Requests: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
							},
						},
					},
					Namespace: to.Ptr("default"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/KubernetesCompute.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/KubernetesCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.Kubernetes{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				Properties: &armmachinelearningservices.KubernetesProperties{
					DefaultInstanceType:           to.Ptr("defaultInstanceType"),
					ExtensionInstanceReleaseTrain: to.Ptr("stable"),
					InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
						"defaultInstanceType": {
							Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
								Limits: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
								Requests: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
							},
						},
					},
					Namespace: to.Ptr("default"),
				},
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/KubernetesCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAmlCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a AML Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
				Properties: &armmachinelearningservices.AmlComputeProperties{
					EnableNodePublicIP:          to.Ptr(true),
					IsolatedNetwork:             to.Ptr(false),
					OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
					RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessNotSpecified),
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](1),
						MinNodeCount:                to.Ptr[int32](0),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
					VirtualMachineImage: &armmachinelearningservices.VirtualMachineImage{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1"),
					},
					VMPriority: to.Ptr(armmachinelearningservices.VMPriorityDedicated),
					VMSize:     to.Ptr("STANDARD_NC6"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAmlCompute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAmlCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAmlCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a DataFactory Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.DataFactory{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeDataFactory),
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.DataFactory{
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeDataFactory),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAKSCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an AKS Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAKSCompute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAKSCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/BasicAKSCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ComputeInstance Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				Properties: &armmachinelearningservices.ComputeInstanceProperties{
					ApplicationSharingPolicy:         to.Ptr(armmachinelearningservices.ApplicationSharingPolicyPersonal),
					ComputeInstanceAuthorizationType: to.Ptr(armmachinelearningservices.ComputeInstanceAuthorizationTypePersonal),
					PersonalComputeInstanceSettings: &armmachinelearningservices.PersonalComputeInstanceSettings{
						AssignedUser: &armmachinelearningservices.AssignedUser{
							ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						},
					},
					SSHSettings: &armmachinelearningservices.ComputeInstanceSSHSettings{
						SSHPublicAccess: to.Ptr(armmachinelearningservices.SSHPublicAccessDisabled),
					},
					Subnet: &armmachinelearningservices.ResourceID{},
					VMSize: to.Ptr("STANDARD_NC6"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstance.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ComputeInstance Compute with minimal inputs"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				Properties: &armmachinelearningservices.ComputeInstanceProperties{
					VMSize: to.Ptr("STANDARD_NC6"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AmlCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a AML Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				Description: to.Ptr("some compute"),
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
				Properties: &armmachinelearningservices.AmlComputeProperties{
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](4),
						MinNodeCount:                to.Ptr[int32](4),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
				},
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AmlCompute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AmlCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
				CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				Properties: &armmachinelearningservices.AmlComputeProperties{
					AllocationState:               to.Ptr(armmachinelearningservices.AllocationStateResizing),
					AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-27T22:28:08.998Z"); return t }()),
					CurrentNodeCount:              to.Ptr[int32](0),
					EnableNodePublicIP:            to.Ptr(true),
					IsolatedNetwork:               to.Ptr(false),
					NodeStateCounts: &armmachinelearningservices.NodeStateCounts{
						IdleNodeCount:      to.Ptr[int32](0),
						LeavingNodeCount:   to.Ptr[int32](0),
						PreemptedNodeCount: to.Ptr[int32](0),
						PreparingNodeCount: to.Ptr[int32](0),
						RunningNodeCount:   to.Ptr[int32](0),
						UnusableNodeCount:  to.Ptr[int32](0),
					},
					OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
					RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessEnabled),
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](1),
						MinNodeCount:                to.Ptr[int32](0),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
					Subnet:          &armmachinelearningservices.ResourceID{},
					TargetNodeCount: to.Ptr[int32](1),
					VMPriority:      to.Ptr(armmachinelearningservices.VMPriorityDedicated),
					VMSize:          to.Ptr("STANDARD_NC6"),
				},
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus2"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AmlCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AKSCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an AKS Compute"},
	})
	client = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				Description: to.Ptr("some compute"),
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAKS),
				ResourceID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				Properties: &armmachinelearningservices.AKSProperties{
					AgentCount: to.Ptr[int32](4),
				},
			},
			Location: to.Ptr("eastus"),
		},
		&armmachinelearningservices.ComputeClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AKSCompute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AKSCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
				ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				Properties: &armmachinelearningservices.AKSProperties{
					AgentCount: to.Ptr[int32](4),
				},
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/createOrUpdate/AKSCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_Update(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a AmlCompute Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ClusterUpdateParameters{
			Properties: &armmachinelearningservices.ClusterUpdateProperties{
				Properties: &armmachinelearningservices.ScaleSettingsInformation{
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](4),
						MinNodeCount:                to.Ptr[int32](4),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
				},
			},
		},
		&armmachinelearningservices.ComputeClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				Description:       to.Ptr("some compute"),
				ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
				ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			},
			Name:     to.Ptr("compute123"),
			Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
			Location: to.Ptr("eastus2"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_Delete(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.UnderlyingResourceActionDelete,
		&armmachinelearningservices.ComputeClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/delete.json: %v", err)
	}
}

func TestCompute_ListNodes(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/listNodes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get compute nodes information for a compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListNodes("testrg123",
		"workspaces123",
		"compute123",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/listNodes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.AmlComputeNodesInformation{
			Nodes: []*armmachinelearningservices.AmlComputeNodeInformation{
				{
					NodeID:           to.Ptr("tvm-3601533753_1-20170719t162906z"),
					NodeState:        to.Ptr(armmachinelearningservices.NodeStateRunning),
					Port:             to.Ptr[int32](50000),
					PrivateIPAddress: to.Ptr("13.84.190.124"),
					PublicIPAddress:  to.Ptr("13.84.190.134"),
					RunID:            to.Ptr("2f378a44-38f2-443a-9f0d-9909d0b47890"),
				},
				{
					NodeID:           to.Ptr("tvm-3601533753_2-20170719t162906z"),
					NodeState:        to.Ptr(armmachinelearningservices.NodeStateIdle),
					Port:             to.Ptr[int32](50001),
					PrivateIPAddress: to.Ptr("13.84.190.124"),
					PublicIPAddress:  to.Ptr("13.84.190.134"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AmlComputeNodesInformation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AmlComputeNodesInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/listNodes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_ListKeys(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List AKS Compute Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListKeys(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/listKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.ComputeClientListKeysResponse{
			&armmachinelearningservices.AksComputeSecrets{
				AdminKubeConfig:     to.Ptr("admin kube config..."),
				ImagePullSecretName: to.Ptr("the image pull secret name"),
				UserKubeConfig:      to.Ptr("user kube config..."),
				ComputeType:         to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompute_Start(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start ComputeInstance Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStart(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&armmachinelearningservices.ComputeClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/start.json: %v", err)
	}
}

func TestCompute_Stop(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop ComputeInstance Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStop(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&armmachinelearningservices.ComputeClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/stop.json: %v", err)
	}
}

func TestCompute_Restart(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart ComputeInstance Compute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&armmachinelearningservices.ComputeClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/Compute/restart.json: %v", err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListPrivateEndpointConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("rg-1234",
		"testworkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.PrivateEndpointConnectionListResult{
			Value: []*armmachinelearningservices.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacePutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		armmachinelearningservices.PrivateEndpointConnection{
			Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/createOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateEndpointConnection/delete.json: %v", err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateLinkResource/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.List(ctx,
		"rg-1234",
		"testworkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateLinkResource/list.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.PrivateLinkResourceListResult{
			Value: []*armmachinelearningservices.PrivateLinkResource{
				{
					Name: to.Ptr("amlworkspace"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateLinkResources/amlworkspace"),
					Properties: &armmachinelearningservices.PrivateLinkResourceProperties{
						GroupID: to.Ptr("amlworkspace"),
						RequiredMembers: []*string{
							to.Ptr("default")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/PrivateLinkResource/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceConnections_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListWorkspaceConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("resourceGroup-1",
		"workspace-1",
		&armmachinelearningservices.WorkspaceConnectionsClientListOptions{Target: to.Ptr("www.facebook.com"),
			Category: to.Ptr("ACR"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.PaginatedWorkspaceConnectionsList{
			Value: []*armmachinelearningservices.WorkspaceConnection{
				{
					Name: to.Ptr("connection-1"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/linkedWorkspaces/connection-1"),
					Properties: &armmachinelearningservices.WorkspaceConnectionProps{
						AuthType: to.Ptr("PAT"),
						Category: to.Ptr("ACR"),
						Target:   to.Ptr("www.facebook.com"),
						Value:    to.Ptr("secrets"),
					},
				},
				{
					Name: to.Ptr("connection-2"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/linkedWorkspaces/connection-2"),
					Properties: &armmachinelearningservices.WorkspaceConnectionProps{
						AuthType: to.Ptr("PAT"),
						Category: to.Ptr("ACR"),
						Target:   to.Ptr("www.facebook.com"),
						Value:    to.Ptr("secrets"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PaginatedWorkspaceConnectionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PaginatedWorkspaceConnectionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceConnections_Create(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateWorkspaceConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Create(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		armmachinelearningservices.WorkspaceConnection{
			Properties: &armmachinelearningservices.WorkspaceConnectionProps{
				AuthType: to.Ptr("PAT"),
				Category: to.Ptr("ACR"),
				Target:   to.Ptr("www.facebook.com"),
				Value:    to.Ptr("secrets"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.WorkspaceConnection{
			Name: to.Ptr("connection-1"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/connections/connection-1"),
			Properties: &armmachinelearningservices.WorkspaceConnectionProps{
				AuthType: to.Ptr("PAT"),
				Category: to.Ptr("ACR"),
				Target:   to.Ptr("www.facebook.com"),
				Value:    to.Ptr("secrets"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceConnections_Get(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetWorkspaceConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningservices.WorkspaceConnection{
			Name: to.Ptr("connection-1"),
			Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/connections/connection-1"),
			Properties: &armmachinelearningservices.WorkspaceConnectionProps{
				AuthType: to.Ptr("PAT"),
				Category: to.Ptr("ACR"),
				Target:   to.Ptr("www.facebook.com"),
				Value:    to.Ptr("secrets"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceConnections_Delete(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteWorkspaceConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceConnection/delete.json: %v", err)
	}
}

func TestWorkspaceFeatures_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceFeature/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace features"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspaceFeaturesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"testworkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceFeature/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.ListAmlUserFeatureResult{
			Value: []*armmachinelearningservices.AmlUserFeature{
				{
					Description: to.Ptr("Create, edit or delete AutoML experiments in the SDK"),
					DisplayName: to.Ptr("Create edit experiments UI"),
					ID:          to.Ptr("automatedml_createeditexperimentsui"),
				},
				{
					Description: to.Ptr("Upgrade workspace from Basic to enterprise from the UI"),
					DisplayName: to.Ptr("Upgrade workspace UI"),
					ID:          to.Ptr("workspace_upgradeworkspaceui"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListAmlUserFeatureResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListAmlUserFeatureResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceFeature/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSKUs_List(t *testing.T) {
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceSku/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Skus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningservices.NewWorkspaceSKUsClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceSku/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningservices.SKUListResult{
			Value: []*armmachinelearningservices.WorkspaceSKU{
				{
					Name: to.Ptr("Basic"),
					Capabilities: []*armmachinelearningservices.SKUCapability{
						{
							Name:  to.Ptr("automatedml_readhyperdrivesdk"),
							Value: to.Ptr("{\n  \"id\": \"automatedml_ readhyperdrivesdk\",\n  \"name\": \"Read hyperdrive SDK\",\n  \"description\": \"Read only access to Hyperdrive in the SDK\"\n}"),
						},
						{
							Name:  to.Ptr("workspace_upgradeworkspacesdk"),
							Value: to.Ptr("{\n  \"id\": \"workspace_upgradeworkspacesdk\",\n  \"name\": \"Upgrade workspace SDK\",\n  \"description\": \"Upgrade workspace from Basic to enterprise from the SDK\"\n}"),
						}},
					LocationInfo: []*armmachinelearningservices.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							Zones: []*string{
								to.Ptr("westus-AZ02"),
								to.Ptr("westus-AZ01")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("workspaces"),
					Restrictions: []*armmachinelearningservices.Restriction{},
					Tier:         to.Ptr("Basic"),
				},
				{
					Name: to.Ptr("Enterprise"),
					Capabilities: []*armmachinelearningservices.SKUCapability{
						{
							Name:  to.Ptr("automatedml_createeditexperimentssdk"),
							Value: to.Ptr("{\n  \"id\": \"automatedml_createeditexperimentssdk\",\n  \"name\": \"Create edit experiments SDK\",\n  \"description\": \"Create, edit or delete AutoML experiments in the SDK\"\n}"),
						}},
					LocationInfo: []*armmachinelearningservices.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							ZoneDetails: []*armmachinelearningservices.ResourceSKUZoneDetails{
								{
									Name: []*string{
										to.Ptr("westus-AZ01")},
									Capabilities: []*armmachinelearningservices.SKUCapability{
										{
											Name:  to.Ptr("automatedml_createeditexperimentssdk"),
											Value: to.Ptr("{\n  \"id\": \"automatedml_createeditexperimentssdk\",\n  \"name\": \"Create edit experiments SDK\",\n  \"description\": \"Create, edit or delete AutoML experiments in the SDK\"\n}"),
										}},
								}},
							Zones: []*string{
								to.Ptr("westus-AZ01")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("workspaces"),
					Restrictions: []*armmachinelearningservices.Restriction{},
					Tier:         to.Ptr("Enterprise"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/stable/2021-07-01/examples/WorkspaceSku/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
