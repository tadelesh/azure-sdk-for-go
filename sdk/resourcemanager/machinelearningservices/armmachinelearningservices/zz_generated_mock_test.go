//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWorkspaces_Get(t *testing.T) {
	// From example Get Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"workspace-1234",
		"testworkspace",
		&WorkspacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example Create Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"workspace-1234",
		"testworkspace",
		Workspace{
			Identity: &Identity{
				Type: ResourceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &UserAssignedIdentity{},
				},
			},
			Location: to.StringPtr("eastus2euap"),
			Properties: &WorkspaceProperties{
				Description:         to.StringPtr("test description"),
				ApplicationInsights: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
				ContainerRegistry:   to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
				Encryption: &EncryptionProperty{
					Identity: &IdentityForCmk{
						UserAssignedIdentity: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
					},
					KeyVaultProperties: &KeyVaultProperties{
						IdentityClientID: to.StringPtr(""),
						KeyIdentifier:    to.StringPtr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
						KeyVaultArmID:    to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					},
					Status: EncryptionStatusEnabled.ToPtr(),
				},
				FriendlyName: to.StringPtr("HelloName"),
				HbiWorkspace: to.BoolPtr(false),
				KeyVault:     to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				SharedPrivateLinkResources: []*SharedPrivateLinkResource{
					{
						Name: to.StringPtr("testdbresource"),
						Properties: &SharedPrivateLinkResourceProperty{
							GroupID:               to.StringPtr("Sql"),
							PrivateLinkResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
							RequestMessage:        to.StringPtr("Please approve"),
							Status:                PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
						},
					}},
				StorageAccount: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example Delete Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"workspace-1234",
		"testworkspace",
		&WorkspacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example Update Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Update(ctx,
		"workspace-1234",
		"testworkspace",
		WorkspaceUpdateParameters{
			Properties: &WorkspacePropertiesUpdateParameters{
				Description:         to.StringPtr("new description"),
				FriendlyName:        to.StringPtr("New friendly name"),
				PublicNetworkAccess: PublicNetworkAccessDisabled.ToPtr(),
			},
		},
		&WorkspacesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example Get Workspaces by Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroup("workspace-1234",
		&WorkspacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaces_Diagnose(t *testing.T) {
	// From example Diagnose Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDiagnose(ctx,
		"workspace-1234",
		"testworkspace",
		&WorkspacesBeginDiagnoseOptions{Parameters: &DiagnoseWorkspaceParameters{
			Value: &DiagnoseRequestProperties{
				ApplicationInsights: map[string]map[string]interface{}{},
				ContainerRegistry:   map[string]map[string]interface{}{},
				DNSResolution:       map[string]map[string]interface{}{},
				KeyVault:            map[string]map[string]interface{}{},
				Nsg:                 map[string]map[string]interface{}{},
				Others:              map[string]map[string]interface{}{},
				ResourceLock:        map[string]map[string]interface{}{},
				StorageAccount:      map[string]map[string]interface{}{},
				Udr:                 map[string]map[string]interface{}{},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ListKeys(t *testing.T) {
	// From example List Workspace Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
	_, err := client.ListKeys(ctx,
		"testrg123",
		"workspaces123",
		&WorkspacesListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ResyncKeys(t *testing.T) {
	// From example Resync Workspace Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
	poller, err := client.BeginResyncKeys(ctx,
		"testrg123",
		"workspaces123",
		&WorkspacesBeginResyncKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example Get Workspaces by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySubscription(&WorkspacesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaces_ListNotebookAccessToken(t *testing.T) {
	// From example List Workspace Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListNotebookAccessToken(ctx,
		"workspace-1234",
		"testworkspace",
		&WorkspacesListNotebookAccessTokenOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_PrepareNotebook(t *testing.T) {
	// From example Prepare Notebook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
	poller, err := client.BeginPrepareNotebook(ctx,
		"testrg123",
		"workspaces123",
		&WorkspacesBeginPrepareNotebookOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ListStorageAccountKeys(t *testing.T) {
	// From example List Workspace Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
	_, err := client.ListStorageAccountKeys(ctx,
		"testrg123",
		"workspaces123",
		&WorkspacesListStorageAccountKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ListNotebookKeys(t *testing.T) {
	// From example List Workspace Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
	_, err := client.ListNotebookKeys(ctx,
		"testrg123",
		"workspaces123",
		&WorkspacesListNotebookKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example ListOutboundNetworkDependenciesEndpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListOutboundNetworkDependenciesEndpoints(ctx,
		"workspace-1234",
		"testworkspace",
		&WorkspacesListOutboundNetworkDependenciesEndpointsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsages_List(t *testing.T) {
	// From example List Usages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("eastus",
		&UsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Usage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Usage.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachineSizes_List(t *testing.T) {
	// From example List VM Sizes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSizesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.List(ctx,
		"eastus",
		&VirtualMachineSizesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuotas_Update(t *testing.T) {
	// From example update quotas
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotasClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Update(ctx,
		"eastus",
		QuotaUpdateParameters{
			Value: []*QuotaBaseProperties{
				{
					Type:  to.StringPtr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Int64Ptr(100),
					Unit:  QuotaUnitCount.ToPtr(),
				},
				{
					Type:  to.StringPtr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Int64Ptr(200),
					Unit:  QuotaUnitCount.ToPtr(),
				}},
		},
		&QuotasUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuotas_List(t *testing.T) {
	// From example List workspace quotas by VMFamily
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotasClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("eastus",
		&QuotasListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceQuota.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceQuota.ID should not be nil!")
			}
		}
	}
}

func TestCompute_List(t *testing.T) {
	// From example Get Computes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testrg123",
		"workspaces123",
		&ComputeListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ComputeResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ComputeResource.ID should not be nil!")
			}
		}
	}
}

func TestCompute_Get(t *testing.T) {
	// From example Get a AKS Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Get a AML Compute
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Get a Kubernetes Compute
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Get an ComputeInstance
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}
}

func TestCompute_CreateOrUpdate(t *testing.T) {
	// From example Attach a Kubernetes Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &Kubernetes{
					Compute: Compute{
						Description: to.StringPtr("some compute"),
						ComputeType: ComputeTypeKubernetes.ToPtr(),
						ResourceID:  to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
					},
					KubernetesSchema: KubernetesSchema{
						Properties: &KubernetesProperties{
							DefaultInstanceType: to.StringPtr("defaultInstanceType"),
							InstanceTypes: map[string]*InstanceTypeSchema{
								"defaultInstanceType": &InstanceTypeSchema{
									NodeSelector: map[string]*string{},
									Resources: &InstanceTypeSchemaResources{
										Limits: map[string]*string{
											"cpu":            to.StringPtr("1"),
											"memory":         to.StringPtr("4Gi"),
											"nvidia.com/gpu": to.StringPtr("null"),
										},
										Requests: map[string]*string{
											"cpu":            to.StringPtr("1"),
											"memory":         to.StringPtr("4Gi"),
											"nvidia.com/gpu": to.StringPtr("null"),
										},
									},
								},
							},
							Namespace: to.StringPtr("default"),
						},
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Create a AML Compute
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &AmlCompute{
					Compute: Compute{
						ComputeType: ComputeTypeAmlCompute.ToPtr(),
					},
					Properties: &AmlComputeProperties{
						EnableNodePublicIP:          to.BoolPtr(true),
						IsolatedNetwork:             to.BoolPtr(false),
						OSType:                      OsTypeWindows.ToPtr(),
						RemoteLoginPortPublicAccess: RemoteLoginPortPublicAccessNotSpecified.ToPtr(),
						ScaleSettings: &ScaleSettings{
							MaxNodeCount:                to.Int32Ptr(1),
							MinNodeCount:                to.Int32Ptr(0),
							NodeIdleTimeBeforeScaleDown: to.StringPtr("PT5M"),
						},
						VirtualMachineImage: &VirtualMachineImage{
							ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1"),
						},
						VMPriority: VMPriorityDedicated.ToPtr(),
						VMSize:     to.StringPtr("STANDARD_NC6"),
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Create a DataFactory Compute
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &DataFactory{
					Compute: Compute{
						ComputeType: ComputeTypeDataFactory.ToPtr(),
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Create an AKS Compute
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &AKS{
					Compute: Compute{
						ComputeType: ComputeTypeAKS.ToPtr(),
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Create an ComputeInstance Compute
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &ComputeInstance{
					Compute: Compute{
						ComputeType: ComputeTypeComputeInstance.ToPtr(),
					},
					Properties: &ComputeInstanceProperties{
						ApplicationSharingPolicy:         ApplicationSharingPolicyPersonal.ToPtr(),
						ComputeInstanceAuthorizationType: ComputeInstanceAuthorizationTypePersonal.ToPtr(),
						PersonalComputeInstanceSettings: &PersonalComputeInstanceSettings{
							AssignedUser: &AssignedUser{
								ObjectID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
								TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
							},
						},
						SSHSettings: &ComputeInstanceSSHSettings{
							SSHPublicAccess: SSHPublicAccessDisabled.ToPtr(),
						},
						Subnet: &ResourceID{},
						VMSize: to.StringPtr("STANDARD_NC6"),
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Create an ComputeInstance Compute with minimal inputs
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &ComputeInstance{
					Compute: Compute{
						ComputeType: ComputeTypeComputeInstance.ToPtr(),
					},
					Properties: &ComputeInstanceProperties{
						VMSize: to.StringPtr("STANDARD_NC6"),
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Update a AML Compute
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &AmlCompute{
					Compute: Compute{
						Description: to.StringPtr("some compute"),
						ComputeType: ComputeTypeAmlCompute.ToPtr(),
					},
					Properties: &AmlComputeProperties{
						ScaleSettings: &ScaleSettings{
							MaxNodeCount:                to.Int32Ptr(4),
							MinNodeCount:                to.Int32Ptr(4),
							NodeIdleTimeBeforeScaleDown: to.StringPtr("PT5M"),
						},
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}

	// From example Update an AKS Compute
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ComputeResource{
			Components1D3SwueSchemasComputeresourceAllof1: Components1D3SwueSchemasComputeresourceAllof1{
				Properties: &AKS{
					Compute: Compute{
						Description: to.StringPtr("some compute"),
						ComputeType: ComputeTypeAKS.ToPtr(),
						ResourceID:  to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
					},
					Properties: &AKSProperties{
						AgentCount: to.Int32Ptr(4),
					},
				},
			},
			Location: to.StringPtr("eastus"),
		},
		&ComputeBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}
}

func TestCompute_Update(t *testing.T) {
	// From example Update a AmlCompute Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		ClusterUpdateParameters{
			Properties: &ClusterUpdateProperties{
				Properties: &ScaleSettingsInformation{
					ScaleSettings: &ScaleSettings{
						MaxNodeCount:                to.Int32Ptr(4),
						MinNodeCount:                to.Int32Ptr(4),
						NodeIdleTimeBeforeScaleDown: to.StringPtr("PT5M"),
					},
				},
			},
		},
		&ComputeBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ComputeResource.ID == nil {
		t.Fatal("ComputeResource.ID should not be nil!")
	}
}

func TestCompute_Delete(t *testing.T) {
	// From example Delete Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		UnderlyingResourceActionDelete,
		&ComputeBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCompute_ListNodes(t *testing.T) {
	// From example Get compute nodes information for a compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListNodes("testrg123",
		"workspaces123",
		"compute123",
		&ComputeListNodesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestCompute_ListKeys(t *testing.T) {
	// From example List AKS Compute Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListKeys(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCompute_Start(t *testing.T) {
	// From example Start ComputeInstance Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStart(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCompute_Stop(t *testing.T) {
	// From example Stop ComputeInstance Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStop(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCompute_Restart(t *testing.T) {
	// From example Restart ComputeInstance Compute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewComputeClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginRestart(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		&ComputeBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example StorageAccountListPrivateEndpointConnections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.List(ctx,
		"rg-1234",
		"testworkspace",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example WorkspaceGetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example WorkspacePutPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example WorkspaceDeletePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example WorkspaceListPrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.List(ctx,
		"rg-1234",
		"testworkspace",
		&PrivateLinkResourcesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceConnections_List(t *testing.T) {
	// From example ListWorkspaceConnections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.List(ctx,
		"resourceGroup-1",
		"workspace-1",
		&WorkspaceConnectionsListOptions{Target: to.StringPtr("www.facebook.com"),
			Category: to.StringPtr("ACR"),
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceConnections_Create(t *testing.T) {
	// From example CreateWorkspaceConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Create(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		WorkspaceConnection{
			Properties: &WorkspaceConnectionProps{
				AuthType: to.StringPtr("PAT"),
				Category: to.StringPtr("ACR"),
				Target:   to.StringPtr("www.facebook.com"),
				Value:    to.StringPtr("secrets"),
			},
		},
		&WorkspaceConnectionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkspaceConnection.ID == nil {
		t.Fatal("WorkspaceConnection.ID should not be nil!")
	}
}

func TestWorkspaceConnections_Get(t *testing.T) {
	// From example GetWorkspaceConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		&WorkspaceConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkspaceConnection.ID == nil {
		t.Fatal("WorkspaceConnection.ID should not be nil!")
	}
}

func TestWorkspaceConnections_Delete(t *testing.T) {
	// From example DeleteWorkspaceConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		&WorkspaceConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceFeatures_List(t *testing.T) {
	// From example List Workspace features
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceFeaturesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"testworkspace",
		&WorkspaceFeaturesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AmlUserFeature.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AmlUserFeature.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceSkus_List(t *testing.T) {
	// From example List Skus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceSKUsClient(con,
		"{subscription-id}")
	pager := client.List(&WorkspaceSKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
