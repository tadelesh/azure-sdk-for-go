//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// ComputeClientCreateOrUpdatePollerResponse contains the response from method ComputeClient.CreateOrUpdate.
type ComputeClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ComputeClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ComputeClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ComputeClientCreateOrUpdateResponse, error) {
	respType := ComputeClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ComputeResource)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ComputeClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ComputeClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ComputeClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ComputeClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ComputeClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ComputeClientCreateOrUpdateResponse contains the response from method ComputeClient.CreateOrUpdate.
type ComputeClientCreateOrUpdateResponse struct {
	ComputeResource
}

// ComputeClientDeletePollerResponse contains the response from method ComputeClient.Delete.
type ComputeClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ComputeClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ComputeClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ComputeClientDeleteResponse, error) {
	respType := ComputeClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ComputeClientDeletePollerResponse from the provided client and resume token.
func (l *ComputeClientDeletePollerResponse) Resume(ctx context.Context, client *ComputeClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ComputeClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ComputeClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ComputeClientDeleteResponse contains the response from method ComputeClient.Delete.
type ComputeClientDeleteResponse struct {
	// placeholder for future response values
}

// ComputeClientGetResponse contains the response from method ComputeClient.Get.
type ComputeClientGetResponse struct {
	ComputeResource
}

// ComputeClientListKeysResponse contains the response from method ComputeClient.ListKeys.
type ComputeClientListKeysResponse struct {
	ComputeSecretsClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ComputeClientListKeysResponse.
func (c *ComputeClientListKeysResponse) UnmarshalJSON(data []byte) error {
	res, err := unmarshalComputeSecretsClassification(data)
	if err != nil {
		return err
	}
	c.ComputeSecretsClassification = res
	return nil
}

// ComputeClientListNodesResponse contains the response from method ComputeClient.ListNodes.
type ComputeClientListNodesResponse struct {
	AmlComputeNodesInformation
}

// ComputeClientListResponse contains the response from method ComputeClient.List.
type ComputeClientListResponse struct {
	PaginatedComputeResourcesList
}

// ComputeClientRestartPollerResponse contains the response from method ComputeClient.Restart.
type ComputeClientRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ComputeClientRestartPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ComputeClientRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ComputeClientRestartResponse, error) {
	respType := ComputeClientRestartResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ComputeClientRestartPollerResponse from the provided client and resume token.
func (l *ComputeClientRestartPollerResponse) Resume(ctx context.Context, client *ComputeClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ComputeClient.Restart", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ComputeClientRestartPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ComputeClientRestartResponse contains the response from method ComputeClient.Restart.
type ComputeClientRestartResponse struct {
	// placeholder for future response values
}

// ComputeClientStartPollerResponse contains the response from method ComputeClient.Start.
type ComputeClientStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ComputeClientStartPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ComputeClientStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ComputeClientStartResponse, error) {
	respType := ComputeClientStartResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ComputeClientStartPollerResponse from the provided client and resume token.
func (l *ComputeClientStartPollerResponse) Resume(ctx context.Context, client *ComputeClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ComputeClient.Start", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ComputeClientStartPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ComputeClientStartResponse contains the response from method ComputeClient.Start.
type ComputeClientStartResponse struct {
	// placeholder for future response values
}

// ComputeClientStopPollerResponse contains the response from method ComputeClient.Stop.
type ComputeClientStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ComputeClientStopPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ComputeClientStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ComputeClientStopResponse, error) {
	respType := ComputeClientStopResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ComputeClientStopPollerResponse from the provided client and resume token.
func (l *ComputeClientStopPollerResponse) Resume(ctx context.Context, client *ComputeClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ComputeClient.Stop", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ComputeClientStopPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ComputeClientStopResponse contains the response from method ComputeClient.Stop.
type ComputeClientStopResponse struct {
	// placeholder for future response values
}

// ComputeClientUpdatePollerResponse contains the response from method ComputeClient.Update.
type ComputeClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ComputeClientUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ComputeClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ComputeClientUpdateResponse, error) {
	respType := ComputeClientUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ComputeResource)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ComputeClientUpdatePollerResponse from the provided client and resume token.
func (l *ComputeClientUpdatePollerResponse) Resume(ctx context.Context, client *ComputeClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ComputeClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ComputeClientUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ComputeClientUpdateResponse contains the response from method ComputeClient.Update.
type ComputeClientUpdateResponse struct {
	ComputeResource
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationListResult
}

// PrivateEndpointConnectionsClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsClient.CreateOrUpdate.
type PrivateEndpointConnectionsClientCreateOrUpdateResponse struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientDeleteResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeleteResponse struct {
	// placeholder for future response values
}

// PrivateEndpointConnectionsClientGetResponse contains the response from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResponse struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientListResponse contains the response from method PrivateEndpointConnectionsClient.List.
type PrivateEndpointConnectionsClientListResponse struct {
	PrivateEndpointConnectionListResult
}

// PrivateLinkResourcesClientListResponse contains the response from method PrivateLinkResourcesClient.List.
type PrivateLinkResourcesClientListResponse struct {
	PrivateLinkResourceListResult
}

// QuotasClientListResponse contains the response from method QuotasClient.List.
type QuotasClientListResponse struct {
	ListWorkspaceQuotas
}

// QuotasClientUpdateResponse contains the response from method QuotasClient.Update.
type QuotasClientUpdateResponse struct {
	UpdateWorkspaceQuotasResult
}

// UsagesClientListResponse contains the response from method UsagesClient.List.
type UsagesClientListResponse struct {
	ListUsagesResult
}

// VirtualMachineSizesClientListResponse contains the response from method VirtualMachineSizesClient.List.
type VirtualMachineSizesClientListResponse struct {
	VirtualMachineSizeListResult
}

// WorkspaceConnectionsClientCreateResponse contains the response from method WorkspaceConnectionsClient.Create.
type WorkspaceConnectionsClientCreateResponse struct {
	WorkspaceConnection
}

// WorkspaceConnectionsClientDeleteResponse contains the response from method WorkspaceConnectionsClient.Delete.
type WorkspaceConnectionsClientDeleteResponse struct {
	// placeholder for future response values
}

// WorkspaceConnectionsClientGetResponse contains the response from method WorkspaceConnectionsClient.Get.
type WorkspaceConnectionsClientGetResponse struct {
	WorkspaceConnection
}

// WorkspaceConnectionsClientListResponse contains the response from method WorkspaceConnectionsClient.List.
type WorkspaceConnectionsClientListResponse struct {
	PaginatedWorkspaceConnectionsList
}

// WorkspaceFeaturesClientListResponse contains the response from method WorkspaceFeaturesClient.List.
type WorkspaceFeaturesClientListResponse struct {
	ListAmlUserFeatureResult
}

// WorkspaceSKUsClientListResponse contains the response from method WorkspaceSKUsClient.List.
type WorkspaceSKUsClientListResponse struct {
	SKUListResult
}

// WorkspacesClientCreateOrUpdatePollerResponse contains the response from method WorkspacesClient.CreateOrUpdate.
type WorkspacesClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesClientCreateOrUpdateResponse, error) {
	respType := WorkspacesClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Workspace)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a WorkspacesClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspacesClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkspacesClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// WorkspacesClientCreateOrUpdateResponse contains the response from method WorkspacesClient.CreateOrUpdate.
type WorkspacesClientCreateOrUpdateResponse struct {
	Workspace
}

// WorkspacesClientDeletePollerResponse contains the response from method WorkspacesClient.Delete.
type WorkspacesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesClientDeleteResponse, error) {
	respType := WorkspacesClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a WorkspacesClientDeletePollerResponse from the provided client and resume token.
func (l *WorkspacesClientDeletePollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkspacesClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// WorkspacesClientDeleteResponse contains the response from method WorkspacesClient.Delete.
type WorkspacesClientDeleteResponse struct {
	// placeholder for future response values
}

// WorkspacesClientDiagnosePollerResponse contains the response from method WorkspacesClient.Diagnose.
type WorkspacesClientDiagnosePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesClientDiagnosePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesClientDiagnosePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesClientDiagnoseResponse, error) {
	respType := WorkspacesClientDiagnoseResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DiagnoseResponseResult)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a WorkspacesClientDiagnosePollerResponse from the provided client and resume token.
func (l *WorkspacesClientDiagnosePollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.Diagnose", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkspacesClientDiagnosePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// WorkspacesClientDiagnoseResponse contains the response from method WorkspacesClient.Diagnose.
type WorkspacesClientDiagnoseResponse struct {
	DiagnoseResponseResult
}

// WorkspacesClientGetResponse contains the response from method WorkspacesClient.Get.
type WorkspacesClientGetResponse struct {
	Workspace
}

// WorkspacesClientListByResourceGroupResponse contains the response from method WorkspacesClient.ListByResourceGroup.
type WorkspacesClientListByResourceGroupResponse struct {
	WorkspaceListResult
}

// WorkspacesClientListBySubscriptionResponse contains the response from method WorkspacesClient.ListBySubscription.
type WorkspacesClientListBySubscriptionResponse struct {
	WorkspaceListResult
}

// WorkspacesClientListKeysResponse contains the response from method WorkspacesClient.ListKeys.
type WorkspacesClientListKeysResponse struct {
	ListWorkspaceKeysResult
}

// WorkspacesClientListNotebookAccessTokenResponse contains the response from method WorkspacesClient.ListNotebookAccessToken.
type WorkspacesClientListNotebookAccessTokenResponse struct {
	NotebookAccessTokenResult
}

// WorkspacesClientListNotebookKeysResponse contains the response from method WorkspacesClient.ListNotebookKeys.
type WorkspacesClientListNotebookKeysResponse struct {
	ListNotebookKeysResult
}

// WorkspacesClientListOutboundNetworkDependenciesEndpointsResponse contains the response from method WorkspacesClient.ListOutboundNetworkDependenciesEndpoints.
type WorkspacesClientListOutboundNetworkDependenciesEndpointsResponse struct {
	ExternalFQDNResponse
}

// WorkspacesClientListStorageAccountKeysResponse contains the response from method WorkspacesClient.ListStorageAccountKeys.
type WorkspacesClientListStorageAccountKeysResponse struct {
	ListStorageAccountKeysResult
}

// WorkspacesClientPrepareNotebookPollerResponse contains the response from method WorkspacesClient.PrepareNotebook.
type WorkspacesClientPrepareNotebookPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesClientPrepareNotebookPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesClientPrepareNotebookPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesClientPrepareNotebookResponse, error) {
	respType := WorkspacesClientPrepareNotebookResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.NotebookResourceInfo)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a WorkspacesClientPrepareNotebookPollerResponse from the provided client and resume token.
func (l *WorkspacesClientPrepareNotebookPollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.PrepareNotebook", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkspacesClientPrepareNotebookPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// WorkspacesClientPrepareNotebookResponse contains the response from method WorkspacesClient.PrepareNotebook.
type WorkspacesClientPrepareNotebookResponse struct {
	NotebookResourceInfo
}

// WorkspacesClientResyncKeysPollerResponse contains the response from method WorkspacesClient.ResyncKeys.
type WorkspacesClientResyncKeysPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesClientResyncKeysPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesClientResyncKeysPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesClientResyncKeysResponse, error) {
	respType := WorkspacesClientResyncKeysResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a WorkspacesClientResyncKeysPollerResponse from the provided client and resume token.
func (l *WorkspacesClientResyncKeysPollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.ResyncKeys", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkspacesClientResyncKeysPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// WorkspacesClientResyncKeysResponse contains the response from method WorkspacesClient.ResyncKeys.
type WorkspacesClientResyncKeysResponse struct {
	// placeholder for future response values
}

// WorkspacesClientUpdateResponse contains the response from method WorkspacesClient.Update.
type WorkspacesClientUpdateResponse struct {
	Workspace
}
