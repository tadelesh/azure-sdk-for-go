//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeviceprovisioningservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceprovisioningservices/armdeviceprovisioningservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceprovisioningservices.OperationListResult{
			Value: []*armdeviceprovisioningservices.Operation{
				{
					Name: to.Ptr("Microsoft.Devices/register/action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Register Resource Provider"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/diagnosticSettings/read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get Diagnostic Setting"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/diagnosticSettings/write"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Set Diagnostic Setting"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/metricDefinitions/read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Read IotHub service metric definitions"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/logDefinitions/read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Read IotHub service log definitions"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/operations/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get All ResourceProvider Operations"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/checkNameAvailability/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Check If IotHub name is available"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/usages/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get Subscription Usages"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get IotHub(s)"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/Write"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Create or update IotHub Resource"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/Delete"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Delete IotHub Resource"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/iotHubStats/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get IotHub Statistics"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/skus/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get valid IotHub Skus"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/listkeys/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get all IotHub Keys"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/iotHubKeys/listkeys/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get IotHub Key for the given name"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/eventHubEndpoints/consumerGroups/Write"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Create EventHub Consumer Group"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/eventHubEndpoints/consumerGroups/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get EventHub Consumer Group(s)"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/eventHubEndpoints/consumerGroups/Delete"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Delete EventHub Consumer Group"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/exportDevices/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Export Devices"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/importDevices/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Import Devices"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/jobs/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get the Job(s) on IotHub"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/quotaMetrics/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get Quota Metrics"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/routing/routes/$testall/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Routing Rule Test All"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/routing/routes/$testnew/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Routing Rule Test Route"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/routingEndpointsHealth/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get Endpoint Health"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/diagnosticSettings/read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get Diagnostic Setting"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/diagnosticSettings/write"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Set Diagnostic Setting"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/metricDefinitions/read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Read DPS service metric definitions"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/logDefinitions/read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Read DPS service log definitions"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/checkProvisioningServiceNameAvailability/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Check If Provisioning Service name is available"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("ProvisioningServives"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Get Provisioning Service resource"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/Write"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Create Provisioning Service resource"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/Delete"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Delete Provisioning Service resource"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/skus/Read"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("Delete Provisioning Service resource"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/listkeys/Action"),
					Display: &armdeviceprovisioningservices.OperationDisplay{
						Operation: to.Ptr("get security related metadata"),
						Provider:  to.Ptr("Microsoft Devices"),
						Resource:  to.Ptr("ProvisioningServices"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDpsCertificate_Get(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSGetCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewDpsCertificateClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Get(ctx,
		"cert",
		"myResourceGroup",
		"myFirstProvisioningService",
		&armdeviceprovisioningservices.DpsCertificateClientGetOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.CertificateResponse{
			Name: to.Ptr("cert"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/Certificates"),
			Etag: to.Ptr("AAAAAAExpNs="),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/andbuc-hub/certificates/cert"),
			Properties: &armdeviceprovisioningservices.CertificateProperties{
				Certificate: []byte("######################################"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified:  to.Ptr(false),
				Subject:     to.Ptr("CN=testdevice1"),
				Thumbprint:  to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDpsCertificate_CreateOrUpdate(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCertificateCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSCreateOrUpdateCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewDpsCertificateClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"cert",
		armdeviceprovisioningservices.CertificateBodyDescription{
			Certificate: to.Ptr("############################################"),
		},
		&armdeviceprovisioningservices.DpsCertificateClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCertificateCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.CertificateResponse{
			Name: to.Ptr("cert"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/Certificates"),
			Etag: to.Ptr("AAAAAAExpNs="),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServives/myFirstProvisioningService/certificates/cert"),
			Properties: &armdeviceprovisioningservices.CertificateProperties{
				Certificate: []byte("############################################"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified:  to.Ptr(false),
				Subject:     to.Ptr("CN=testdevice1"),
				Thumbprint:  to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCertificateCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDpsCertificate_Delete(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDeleteCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSDeleteCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewDpsCertificateClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"AAAAAAAADGk=",
		"myFirstProvisioningService",
		"cert",
		&armdeviceprovisioningservices.DpsCertificateClientDeleteOptions{CertificateName1: nil,
			CertificateIsVerified:    nil,
			CertificatePurpose:       nil,
			CertificateCreated:       nil,
			CertificateLastUpdated:   nil,
			CertificateHasPrivateKey: nil,
			CertificateNonce:         nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDeleteCertificate.json: %v", err)
	}
}

func TestDpsCertificate_List(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetCertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSGetCertificates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewDpsCertificateClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetCertificates.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.CertificateListDescription{
			Value: []*armdeviceprovisioningservices.CertificateResponse{
				{
					Name: to.Ptr("cert"),
					Type: to.Ptr("Microsoft.Devices/ProvisioningServices/Certificates"),
					Etag: to.Ptr("AAAAAAExpNs="),
					ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/andbuc-hub/certificates/cert"),
					Properties: &armdeviceprovisioningservices.CertificateProperties{
						Created:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
						Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
						IsVerified: to.Ptr(false),
						Subject:    to.Ptr("CN=testdevice1"),
						Thumbprint: to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
						Updated:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateListDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateListDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetCertificates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDpsCertificate_GenerateVerificationCode(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGenerateVerificationCode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSGenerateVerificationCode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewDpsCertificateClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GenerateVerificationCode(ctx,
		"cert",
		"AAAAAAAADGk=",
		"myResourceGroup",
		"myFirstProvisioningService",
		&armdeviceprovisioningservices.DpsCertificateClientGenerateVerificationCodeOptions{CertificateName1: nil,
			CertificateIsVerified:    nil,
			CertificatePurpose:       nil,
			CertificateCreated:       nil,
			CertificateLastUpdated:   nil,
			CertificateHasPrivateKey: nil,
			CertificateNonce:         nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGenerateVerificationCode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.VerificationCodeResponse{
			Name: to.Ptr("cert"),
			Properties: &armdeviceprovisioningservices.VerificationCodeResponseProperties{
				Certificate:      []byte("###########################"),
				Created:          to.Ptr("Thu, 12 Oct 2017 19:23:50 GMT"),
				Expiry:           to.Ptr("Sat, 31 Dec 2039 23:59:59 GMT"),
				IsVerified:       to.Ptr(false),
				Subject:          to.Ptr("CN=andbucdevice1"),
				Thumbprint:       to.Ptr("##############################"),
				Updated:          to.Ptr("Thu, 12 Oct 2017 19:26:56 GMT"),
				VerificationCode: to.Ptr("##################################"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VerificationCodeResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VerificationCodeResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGenerateVerificationCode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDpsCertificate_VerifyCertificate(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSVerifyCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSVerifyCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewDpsCertificateClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.VerifyCertificate(ctx,
		"cert",
		"AAAAAAAADGk=",
		"myResourceGroup",
		"myFirstProvisioningService",
		armdeviceprovisioningservices.VerificationCodeRequest{
			Certificate: to.Ptr("#####################################"),
		},
		&armdeviceprovisioningservices.DpsCertificateClientVerifyCertificateOptions{CertificateName1: nil,
			CertificateIsVerified:    nil,
			CertificatePurpose:       nil,
			CertificateCreated:       nil,
			CertificateLastUpdated:   nil,
			CertificateHasPrivateKey: nil,
			CertificateNonce:         nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSVerifyCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.CertificateResponse{
			Name: to.Ptr("cert"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/Certificates"),
			Etag: to.Ptr("AAAAAAExpTQ="),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/certificates/cert"),
			Properties: &armdeviceprovisioningservices.CertificateProperties{
				Certificate: []byte("#####################################"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified:  to.Ptr(true),
				Subject:     to.Ptr("CN=andbucdevice1"),
				Thumbprint:  to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:26:56 GMT"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSVerifyCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_Get(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Get(ctx,
		"myFirstProvisioningService",
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.ProvisioningServiceDescription{
			Name:     to.Ptr("myFirstProvisioningService"),
			Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
			ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAAAADGk="),
			Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
				AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
				AuthorizationPolicies:      []*armdeviceprovisioningservices.SharedAccessSignatureAuthorizationRuleAccessRightsDescription{},
				DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
				IDScope:                    to.Ptr("0ne00000012"),
				ServiceOperationsHostName:  to.Ptr("myFirstProvisioningService.azure-devices-provisioning.net"),
				State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
			},
			SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
				Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProvisioningServiceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProvisioningServiceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_CreateOrUpdate(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		armdeviceprovisioningservices.ProvisioningServiceDescription{
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
				EnableDataResidency: to.Ptr(false),
			},
			SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
				Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
				Capacity: to.Ptr[int64](1),
			},
		},
		&armdeviceprovisioningservices.IotDpsResourceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.ProvisioningServiceDescription{
			Name:     to.Ptr("myFirstProvisioningService"),
			Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
			ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups//providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAAAADGk="),
			Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
				AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
				AuthorizationPolicies:      []*armdeviceprovisioningservices.SharedAccessSignatureAuthorizationRuleAccessRightsDescription{},
				DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
				EnableDataResidency:        to.Ptr(false),
				IDScope:                    to.Ptr("0ne00000012"),
				ServiceOperationsHostName:  to.Ptr("myFirstProvisioningService.azure-devices-provisioning.net"),
				State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
			},
			SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
				Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProvisioningServiceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProvisioningServiceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_Update(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		armdeviceprovisioningservices.TagsResource{
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
		},
		&armdeviceprovisioningservices.IotDpsResourceClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.ProvisioningServiceDescription{
			Name:     to.Ptr("myFirstProvisioningService"),
			Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
			ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
			Etag: to.Ptr("AAAAAAAADGk="),
			Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
				AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
				DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
				IDScope:                    to.Ptr("0ne00000012"),
				ServiceOperationsHostName:  to.Ptr("myFirstProvisioningService.azure-devices-provisioning.net"),
				State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
			},
			SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
				Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProvisioningServiceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProvisioningServiceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_Delete(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myFirstProvisioningService",
		"myResourceGroup",
		&armdeviceprovisioningservices.IotDpsResourceClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDelete.json: %v", err)
	}
}

func TestIotDpsResource_ListBySubscription(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceprovisioningservices.ProvisioningServiceDescriptionListResult{
			Value: []*armdeviceprovisioningservices.ProvisioningServiceDescription{
				{
					Name:     to.Ptr("myFirstProvisioningService"),
					Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
					ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("AAAAAAAADGk="),
					Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
						AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
						DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
						IDScope:                    to.Ptr("0ne00000012"),
						ServiceOperationsHostName:  to.Ptr("myFirstProvisioningService.azure-devices-provisioning.net"),
						State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
					},
					SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
						Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
						Capacity: to.Ptr[int64](1),
						Tier:     to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("mySecondProvisioningService"),
					Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
					ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/mySecondProvisioningService"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("AAAAAAAADGk="),
					Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
						AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
						DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
						IDScope:                    to.Ptr("0ne00000012"),
						ServiceOperationsHostName:  to.Ptr("myFirstProvisioningService.azure-devices-provisioning.net"),
						State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
					},
					SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
						Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
						Capacity: to.Ptr[int64](1),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProvisioningServiceDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProvisioningServiceDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_ListByResourceGroup(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceprovisioningservices.ProvisioningServiceDescriptionListResult{
			Value: []*armdeviceprovisioningservices.ProvisioningServiceDescription{
				{
					Name:     to.Ptr("myFirstProvisioningService"),
					Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
					ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("AAAAAAAADGk="),
					Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
						AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
						DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
						IDScope:                    to.Ptr("0ne00000012"),
						ServiceOperationsHostName:  to.Ptr("myFirstProvisioningService.azure-devices-provisioning.net"),
						State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
					},
					SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
						Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
						Capacity: to.Ptr[int64](1),
						Tier:     to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("mySecondProvisioningService"),
					Type:     to.Ptr("Microsoft.Devices/ProvisioningServices"),
					ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/mySecondProvisioningService"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("AAAAAAAADGk="),
					Properties: &armdeviceprovisioningservices.IotDpsPropertiesDescription{
						AllocationPolicy:           to.Ptr(armdeviceprovisioningservices.AllocationPolicyHashed),
						DeviceProvisioningHostName: to.Ptr("global.azure-devices-provisioning.net"),
						IDScope:                    to.Ptr("0ne00000012"),
						ServiceOperationsHostName:  to.Ptr("mySecondProvisioningService.azure-devices-provisioning.net"),
						State:                      to.Ptr(armdeviceprovisioningservices.StateActive),
					},
					SKU: &armdeviceprovisioningservices.IotDpsSKUInfo{
						Name:     to.Ptr(armdeviceprovisioningservices.IotDpsSKUS1),
						Capacity: to.Ptr[int64](1),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProvisioningServiceDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProvisioningServiceDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_GetOperationResult(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSGetOperationResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetOperationResult(ctx,
		"MTY5OTNmZDctODI5Yy00N2E2LTkxNDQtMDU1NGIyYzY1ZjRl",
		"myResourceGroup",
		"myFirstProvisioningService",
		"1508265712453",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.AsyncOperationResult{
			Status: to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_CheckProvisioningServiceNameAvailability(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSCheckName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.CheckProvisioningServiceNameAvailability(ctx,
		armdeviceprovisioningservices.OperationInputs{
			Name: to.Ptr("test213123"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.NameAvailabilityInfo{
			Message:       to.Ptr("name is valid"),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr(armdeviceprovisioningservices.NameUnavailabilityReasonInvalid),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_ListKeys(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListKeys("myFirstProvisioningService",
		"myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListKeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceprovisioningservices.SharedAccessSignatureAuthorizationRuleListResult{
			Value: []*armdeviceprovisioningservices.SharedAccessSignatureAuthorizationRuleAccessRightsDescription{
				{
					KeyName:      to.Ptr("key1"),
					PrimaryKey:   to.Ptr("#####################################"),
					Rights:       to.Ptr(armdeviceprovisioningservices.AccessRightsDescriptionServiceConfig),
					SecondaryKey: to.Ptr("###################################"),
				},
				{
					KeyName:      to.Ptr("key2"),
					PrimaryKey:   to.Ptr("#######################################"),
					Rights:       to.Ptr(armdeviceprovisioningservices.AccessRightsDescriptionServiceConfig),
					SecondaryKey: to.Ptr("####################################="),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedAccessSignatureAuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedAccessSignatureAuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_ListKeysForKeyName(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DPSGetKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.ListKeysForKeyName(ctx,
		"myFirstProvisioningService",
		"testKey",
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.SharedAccessSignatureAuthorizationRuleAccessRightsDescription{
			KeyName:      to.Ptr("testKey"),
			PrimaryKey:   to.Ptr("##################################"),
			Rights:       to.Ptr(armdeviceprovisioningservices.AccessRightsDescriptionRegistrationStatusWrite),
			SecondaryKey: to.Ptr("################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.SharedAccessSignatureAuthorizationRuleAccessRightsDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedAccessSignatureAuthorizationRuleAccessRightsDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_ListPrivateLinkResources(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.ListPrivateLinkResources(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.PrivateLinkResources{
			Value: []*armdeviceprovisioningservices.GroupIDInformation{
				{
					Name: to.Ptr("iotDps"),
					Type: to.Ptr("Microsoft.Devices/ProvisioningServices/PrivateLinkResources"),
					ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/PrivateLinkResources/iotDps"),
					Properties: &armdeviceprovisioningservices.GroupIDInformationProperties{
						GroupID: to.Ptr("iotDps"),
						RequiredMembers: []*string{
							to.Ptr("iotDps")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azure-devices-provisioning.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResources) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResources)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_GetPrivateLinkResources(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetPrivateLinkResources(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"iotDps",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.GroupIDInformation{
			Name: to.Ptr("iotDps"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/PrivateLinkResources"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/PrivateLinkResources/iotDps"),
			Properties: &armdeviceprovisioningservices.GroupIDInformationProperties{
				GroupID: to.Ptr("iotDps"),
				RequiredMembers: []*string{
					to.Ptr("iotDps")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azure-devices-provisioning.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupIDInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupIDInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_ListPrivateEndpointConnections(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.ListPrivateEndpointConnections(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListPrivateEndpointConnections.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeviceprovisioningservices.PrivateEndpointConnection{
			{
				Name: to.Ptr("myPrivateEndpointConnection"),
				Type: to.Ptr("Microsoft.Devices/ProvisioningServices/PrivateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/PrivateEndpointConnections/myPrivateEndpointConnection"),
				Properties: &armdeviceprovisioningservices.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armdeviceprovisioningservices.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
					},
					PrivateLinkServiceConnectionState: &armdeviceprovisioningservices.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Please approve my request!"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armdeviceprovisioningservices.PrivateLinkServiceConnectionStatusPending),
					},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_GetPrivateEndpointConnection(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"myPrivateEndpointConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnection"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/PrivateEndpointConnections/myPrivateEndpointConnection"),
			Properties: &armdeviceprovisioningservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdeviceprovisioningservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdeviceprovisioningservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Please approve my request!"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdeviceprovisioningservices.PrivateLinkServiceConnectionStatusPending),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_CreateOrUpdatePrivateEndpointConnection(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreateOrUpdatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginCreateOrUpdatePrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"myPrivateEndpointConnection",
		armdeviceprovisioningservices.PrivateEndpointConnection{
			Properties: &armdeviceprovisioningservices.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armdeviceprovisioningservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr(armdeviceprovisioningservices.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		&armdeviceprovisioningservices.IotDpsResourceClientBeginCreateOrUpdatePrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreateOrUpdatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreateOrUpdatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnection"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/PrivateEndpointConnections/myPrivateEndpointConnection"),
			Properties: &armdeviceprovisioningservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdeviceprovisioningservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdeviceprovisioningservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdeviceprovisioningservices.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSCreateOrUpdatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotDpsResource_DeletePrivateEndpointConnection(t *testing.T) {
	// From example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceprovisioningservices.NewIotDpsResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"myPrivateEndpointConnection",
		&armdeviceprovisioningservices.IotDpsResourceClientBeginDeletePrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDeletePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDeletePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceprovisioningservices.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnection"),
			Type: to.Ptr("Microsoft.Devices/ProvisioningServices/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/PrivateEndpointConnections/myPrivateEndpointConnection"),
			Properties: &armdeviceprovisioningservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdeviceprovisioningservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdeviceprovisioningservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Deleted"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdeviceprovisioningservices.PrivateLinkServiceConnectionStatusDisconnected),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceprovisioningservices/resource-manager/Microsoft.Devices/stable/2021-10-15/examples/DPSDeletePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
