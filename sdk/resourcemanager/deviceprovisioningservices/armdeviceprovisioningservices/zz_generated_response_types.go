//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeviceprovisioningservices

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// DpsCertificateClientCreateOrUpdateResponse contains the response from method DpsCertificateClient.CreateOrUpdate.
type DpsCertificateClientCreateOrUpdateResponse struct {
	CertificateResponse
}

// DpsCertificateClientDeleteResponse contains the response from method DpsCertificateClient.Delete.
type DpsCertificateClientDeleteResponse struct {
	// placeholder for future response values
}

// DpsCertificateClientGenerateVerificationCodeResponse contains the response from method DpsCertificateClient.GenerateVerificationCode.
type DpsCertificateClientGenerateVerificationCodeResponse struct {
	VerificationCodeResponse
}

// DpsCertificateClientGetResponse contains the response from method DpsCertificateClient.Get.
type DpsCertificateClientGetResponse struct {
	CertificateResponse
}

// DpsCertificateClientListResponse contains the response from method DpsCertificateClient.List.
type DpsCertificateClientListResponse struct {
	CertificateListDescription
}

// DpsCertificateClientVerifyCertificateResponse contains the response from method DpsCertificateClient.VerifyCertificate.
type DpsCertificateClientVerifyCertificateResponse struct {
	CertificateResponse
}

// IotDpsResourceClientCheckProvisioningServiceNameAvailabilityResponse contains the response from method IotDpsResourceClient.CheckProvisioningServiceNameAvailability.
type IotDpsResourceClientCheckProvisioningServiceNameAvailabilityResponse struct {
	NameAvailabilityInfo
}

// IotDpsResourceClientCreateOrUpdatePollerResponse contains the response from method IotDpsResourceClient.CreateOrUpdate.
type IotDpsResourceClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IotDpsResourceClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IotDpsResourceClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IotDpsResourceClientCreateOrUpdateResponse, error) {
	respType := IotDpsResourceClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ProvisioningServiceDescription)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IotDpsResourceClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *IotDpsResourceClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *IotDpsResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IotDpsResourceClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IotDpsResourceClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPollerResponse contains the response from method IotDpsResourceClient.CreateOrUpdatePrivateEndpointConnection.
type IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionResponse, error) {
	respType := IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPollerResponse from the provided client
// and resume token.
func (l *IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPollerResponse) Resume(ctx context.Context, client *IotDpsResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IotDpsResourceClient.CreateOrUpdatePrivateEndpointConnection", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionResponse contains the response from method IotDpsResourceClient.CreateOrUpdatePrivateEndpointConnection.
type IotDpsResourceClientCreateOrUpdatePrivateEndpointConnectionResponse struct {
	PrivateEndpointConnection
}

// IotDpsResourceClientCreateOrUpdateResponse contains the response from method IotDpsResourceClient.CreateOrUpdate.
type IotDpsResourceClientCreateOrUpdateResponse struct {
	ProvisioningServiceDescription
}

// IotDpsResourceClientDeletePollerResponse contains the response from method IotDpsResourceClient.Delete.
type IotDpsResourceClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IotDpsResourceClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IotDpsResourceClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IotDpsResourceClientDeleteResponse, error) {
	respType := IotDpsResourceClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IotDpsResourceClientDeletePollerResponse from the provided client and resume token.
func (l *IotDpsResourceClientDeletePollerResponse) Resume(ctx context.Context, client *IotDpsResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IotDpsResourceClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IotDpsResourceClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IotDpsResourceClientDeletePrivateEndpointConnectionPollerResponse contains the response from method IotDpsResourceClient.DeletePrivateEndpointConnection.
type IotDpsResourceClientDeletePrivateEndpointConnectionPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IotDpsResourceClientDeletePrivateEndpointConnectionPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IotDpsResourceClientDeletePrivateEndpointConnectionPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IotDpsResourceClientDeletePrivateEndpointConnectionResponse, error) {
	respType := IotDpsResourceClientDeletePrivateEndpointConnectionResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IotDpsResourceClientDeletePrivateEndpointConnectionPollerResponse from the provided client and resume
// token.
func (l *IotDpsResourceClientDeletePrivateEndpointConnectionPollerResponse) Resume(ctx context.Context, client *IotDpsResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IotDpsResourceClient.DeletePrivateEndpointConnection", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IotDpsResourceClientDeletePrivateEndpointConnectionPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IotDpsResourceClientDeletePrivateEndpointConnectionResponse contains the response from method IotDpsResourceClient.DeletePrivateEndpointConnection.
type IotDpsResourceClientDeletePrivateEndpointConnectionResponse struct {
	PrivateEndpointConnection
}

// IotDpsResourceClientDeleteResponse contains the response from method IotDpsResourceClient.Delete.
type IotDpsResourceClientDeleteResponse struct {
	// placeholder for future response values
}

// IotDpsResourceClientGetOperationResultResponse contains the response from method IotDpsResourceClient.GetOperationResult.
type IotDpsResourceClientGetOperationResultResponse struct {
	AsyncOperationResult
}

// IotDpsResourceClientGetPrivateEndpointConnectionResponse contains the response from method IotDpsResourceClient.GetPrivateEndpointConnection.
type IotDpsResourceClientGetPrivateEndpointConnectionResponse struct {
	PrivateEndpointConnection
}

// IotDpsResourceClientGetPrivateLinkResourcesResponse contains the response from method IotDpsResourceClient.GetPrivateLinkResources.
type IotDpsResourceClientGetPrivateLinkResourcesResponse struct {
	GroupIDInformation
}

// IotDpsResourceClientGetResponse contains the response from method IotDpsResourceClient.Get.
type IotDpsResourceClientGetResponse struct {
	ProvisioningServiceDescription
}

// IotDpsResourceClientListByResourceGroupResponse contains the response from method IotDpsResourceClient.ListByResourceGroup.
type IotDpsResourceClientListByResourceGroupResponse struct {
	ProvisioningServiceDescriptionListResult
}

// IotDpsResourceClientListBySubscriptionResponse contains the response from method IotDpsResourceClient.ListBySubscription.
type IotDpsResourceClientListBySubscriptionResponse struct {
	ProvisioningServiceDescriptionListResult
}

// IotDpsResourceClientListKeysForKeyNameResponse contains the response from method IotDpsResourceClient.ListKeysForKeyName.
type IotDpsResourceClientListKeysForKeyNameResponse struct {
	SharedAccessSignatureAuthorizationRuleAccessRightsDescription
}

// IotDpsResourceClientListKeysResponse contains the response from method IotDpsResourceClient.ListKeys.
type IotDpsResourceClientListKeysResponse struct {
	SharedAccessSignatureAuthorizationRuleListResult
}

// IotDpsResourceClientListPrivateEndpointConnectionsResponse contains the response from method IotDpsResourceClient.ListPrivateEndpointConnections.
type IotDpsResourceClientListPrivateEndpointConnectionsResponse struct {
	// The list of private endpoint connections for a provisioning service
	PrivateEndpointConnectionArray []*PrivateEndpointConnection
}

// IotDpsResourceClientListPrivateLinkResourcesResponse contains the response from method IotDpsResourceClient.ListPrivateLinkResources.
type IotDpsResourceClientListPrivateLinkResourcesResponse struct {
	PrivateLinkResources
}

// IotDpsResourceClientListValidSKUsResponse contains the response from method IotDpsResourceClient.ListValidSKUs.
type IotDpsResourceClientListValidSKUsResponse struct {
	IotDpsSKUDefinitionListResult
}

// IotDpsResourceClientUpdatePollerResponse contains the response from method IotDpsResourceClient.Update.
type IotDpsResourceClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IotDpsResourceClientUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IotDpsResourceClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IotDpsResourceClientUpdateResponse, error) {
	respType := IotDpsResourceClientUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ProvisioningServiceDescription)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IotDpsResourceClientUpdatePollerResponse from the provided client and resume token.
func (l *IotDpsResourceClientUpdatePollerResponse) Resume(ctx context.Context, client *IotDpsResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IotDpsResourceClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IotDpsResourceClientUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IotDpsResourceClientUpdateResponse contains the response from method IotDpsResourceClient.Update.
type IotDpsResourceClientUpdateResponse struct {
	ProvisioningServiceDescription
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationListResult
}
