//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armworkloadmonitor_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/OperationList_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationList_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armworkloadmonitor.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/OperationList_Get.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.OperationList{
			Value: []*armworkloadmonitor.Operation{
				{
					Name: to.Ptr("Microsoft.WorkloadMonitor/operations/read"),
					Display: &armworkloadmonitor.OperationDisplay{
						Description: to.Ptr("Gets a list of the supported operations"),
						Operation:   to.Ptr("Get operations"),
						Provider:    to.Ptr("Microsoft.WorkloadMonitor"),
						Resource:    to.Ptr("Operations"),
					},
					Origin: to.Ptr("user, system"),
				},
				{
					Name: to.Ptr("Microsoft.WorkloadMonitor/monitors/read"),
					Display: &armworkloadmonitor.OperationDisplay{
						Description: to.Ptr("Gets monitors and their current health state"),
						Operation:   to.Ptr("Get monitors"),
						Provider:    to.Ptr("Microsoft.WorkloadMonitor"),
						Resource:    to.Ptr("Monitors"),
					},
					Origin: to.Ptr("user, system"),
				},
				{
					Name: to.Ptr("Microsoft.WorkloadMonitor/monitors/history/read"),
					Display: &armworkloadmonitor.OperationDisplay{
						Description: to.Ptr("Gets the history of health changes of a specific monitor"),
						Operation:   to.Ptr("Get monitor history"),
						Provider:    to.Ptr("Microsoft.WorkloadMonitor"),
						Resource:    to.Ptr("Monitors"),
					},
					Origin: to.Ptr("user, system"),
				},
				{
					Name: to.Ptr("Microsoft.WorkloadMonitor/register/action"),
					Display: &armworkloadmonitor.OperationDisplay{
						Description: to.Ptr("Registers subscription with Microsoft.WorkloadMonitor resource provider"),
						Operation:   to.Ptr("Register Subscription for VMHealth"),
						Provider:    to.Ptr("Microsoft.WorkloadMonitor"),
						Resource:    to.Ptr("WorkloadMonitor Register Subscription"),
					},
					Origin: to.Ptr("user, system"),
				},
				{
					Name: to.Ptr("Microsoft.WorkloadMonitor/unregister/action"),
					Display: &armworkloadmonitor.OperationDisplay{
						Description: to.Ptr("Unregisters subscription with Microsoft.WorkloadMonitor resource provider"),
						Operation:   to.Ptr("Unregister Subscription for VMHealth"),
						Provider:    to.Ptr("Microsoft.WorkloadMonitor"),
						Resource:    to.Ptr("WorkloadMonitor Register Subscription"),
					},
					Origin: to.Ptr("user, system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/OperationList_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHealthMonitors_List(t *testing.T) {
	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor list with default values"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	pager := client.List("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		&armworkloadmonitor.HealthMonitorsClientListOptions{Filter: nil,
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetDefault.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.HealthMonitorList{
			Value: []*armworkloadmonitor.HealthMonitor{
				{
					Name: to.Ptr("root"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/root"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("root"),
						MonitorType:                        to.Ptr("root"),
						MonitoredObject:                    to.Ptr(""),
						ParentMonitorName:                  to.Ptr(""),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("logical-disks"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("logical-disks"),
						MonitorType:                        to.Ptr("logical-disks"),
						MonitoredObject:                    to.Ptr(""),
						ParentMonitorName:                  to.Ptr("root"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("logical-disks|C@3A"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("logical-disks|C:"),
						MonitorType:                        to.Ptr("logical-disks|*"),
						MonitoredObject:                    to.Ptr("C:"),
						ParentMonitorName:                  to.Ptr("logical-disks"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("logical-disks|C@3A|free-space"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
						MonitorType:                        to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:                    to.Ptr("C:"),
						ParentMonitorName:                  to.Ptr("logical-disks|C:"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("cpu-utilization"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("cpu-utilization"),
						MonitorType:                        to.Ptr("cpu-utilization"),
						MonitoredObject:                    to.Ptr(""),
						ParentMonitorName:                  to.Ptr("root"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				},
				{
					Name: to.Ptr("memory"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateHealthy),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("memory"),
						MonitorType:                        to.Ptr("memory"),
						MonitoredObject:                    to.Ptr(""),
						ParentMonitorName:                  to.Ptr("root"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateHealthy),
					},
				},
				{
					Name: to.Ptr("memory|available"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory|available"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateHealthy),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("memory|available"),
						MonitorType:                        to.Ptr("memory|available"),
						MonitoredObject:                    to.Ptr(""),
						ParentMonitorName:                  to.Ptr("memory"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateHealthy),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HealthMonitorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HealthMonitorList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetExpanded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor list with expanded values"},
	})
	client = armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	pager = client.List("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		&armworkloadmonitor.HealthMonitorsClientListOptions{Filter: nil,
			Expand: to.Ptr("evidence,configuration"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetExpanded.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.HealthMonitorList{
			Value: []*armworkloadmonitor.HealthMonitor{
				{
					Name: to.Ptr("root"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/root"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-15T17:01:46Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T16:05:12Z"),
						Evidence: map[string]interface{}{
							"memberMonitors": []interface{}{
								map[string]interface{}{
									"monitorName": "logical-disks",
									"state":       "critical",
									"timestamp":   "2020-10-20T13:24:14.742Z",
								},
								map[string]interface{}{
									"monitorName": "memory",
									"state":       "healthy",
									"timestamp":   "2020-10-20T13:24:14.742Z",
								},
								map[string]interface{}{
									"monitorName": "cpu-utilization",
									"state":       "warning",
									"timestamp":   "2020-10-20T13:24:14.742Z",
								},
							},
							"reason": map[string]interface{}{
								"Code":    float64(1100),
								"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
						},
						MonitorName:          to.Ptr("root"),
						MonitorType:          to.Ptr("root"),
						MonitoredObject:      to.Ptr(""),
						ParentMonitorName:    to.Ptr(""),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("logical-disks"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-15T17:01:46Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"memberMonitors": []interface{}{
								map[string]interface{}{
									"monitorName": "logical-disks|C:",
									"state":       "critical",
									"timestamp":   "2020-10-20T13:24:14.742Z",
								},
							},
							"reason": map[string]interface{}{
								"Code":    float64(1100),
								"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
						},
						MonitorName:          to.Ptr("logical-disks"),
						MonitorType:          to.Ptr("logical-disks"),
						MonitoredObject:      to.Ptr(""),
						ParentMonitorName:    to.Ptr("root"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("logical-disks|C@3A"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:28:44Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"memberMonitors": []interface{}{
								map[string]interface{}{
									"monitorName": "logical-disks|C:|free-space",
									"state":       "critical",
									"timestamp":   "2020-10-20T13:24:14.742Z",
								},
							},
							"reason": map[string]interface{}{
								"Code":    float64(1100),
								"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
						},
						MonitorName:          to.Ptr("logical-disks|C:"),
						MonitorType:          to.Ptr("logical-disks|*"),
						MonitoredObject:      to.Ptr("C:"),
						ParentMonitorName:    to.Ptr("logical-disks"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("logical-disks|C@3A|free-space"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:28:44Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"reason": map[string]interface{}{
								"Code":    float64(2100),
								"Message": "Collected samples met critical condition for this monitor.",
							},
							"samples": []interface{}{
								map[string]interface{}{
									"timestamp": "2020-10-20T13:23:25.823Z",
									"value":     float64(4),
								},
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
							"monitorConfiguration": map[string]interface{}{
								"criticalCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(5),
								},
								"evaluationFrequencySecs": float64(60),
								"evaluationType":          "Max",
								"lookbackSecs":            float64(120),
								"maxSamples":              float64(1),
								"minSamples":              float64(1),
							},
						},
						MonitorName:          to.Ptr("logical-disks|C:|free-space"),
						MonitorType:          to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:      to.Ptr("C:"),
						ParentMonitorName:    to.Ptr("logical-disks|C:"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("cpu-utilization"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:30:28Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"reason": map[string]interface{}{
								"Code":    float64(2200),
								"Message": "Collected samples met warning condition for this monitor.",
							},
							"samples": []interface{}{
								map[string]interface{}{
									"timestamp": "2020-10-20T13:21:25.819Z",
									"value":     float64(75),
								},
								map[string]interface{}{
									"timestamp": "2020-10-20T13:22:25.822Z",
									"value":     float64(80),
								},
								map[string]interface{}{
									"timestamp": "2020-10-20T13:23:25.82Z",
									"value":     float64(83),
								},
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
							"monitorConfiguration": map[string]interface{}{
								"criticalCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  ">",
									"threshold": float64(90),
								},
								"evaluationFrequencySecs": float64(60),
								"evaluationType":          "Min",
								"lookbackSecs":            float64(240),
								"maxSamples":              float64(3),
								"minSamples":              float64(2),
								"warningCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  ">",
									"threshold": float64(70),
								},
							},
						},
						MonitorName:          to.Ptr("cpu-utilization"),
						MonitorType:          to.Ptr("cpu-utilization"),
						MonitoredObject:      to.Ptr(""),
						ParentMonitorName:    to.Ptr("root"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				},
				{
					Name: to.Ptr("memory"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateHealthy),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:29:28Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"memberMonitors": []interface{}{
								map[string]interface{}{
									"monitorName": "memory|available",
									"state":       "healthy",
									"timestamp":   "2020-10-20T13:24:14.742Z",
								},
							},
							"reason": map[string]interface{}{
								"Code":    float64(1100),
								"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
						},
						MonitorName:          to.Ptr("memory"),
						MonitorType:          to.Ptr("memory"),
						MonitoredObject:      to.Ptr(""),
						ParentMonitorName:    to.Ptr("root"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
					},
				},
				{
					Name: to.Ptr("memory|available"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory|available"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateHealthy),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:29:28Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"reason": map[string]interface{}{
								"Code":    float64(2300),
								"Message": "Collected samples met healthy condition for this monitor.",
							},
							"samples": []interface{}{
								map[string]interface{}{
									"timestamp": "2020-10-20T13:21:25.82Z",
									"value":     float64(73.27),
								},
								map[string]interface{}{
									"timestamp": "2020-10-20T13:22:25.822Z",
									"value":     float64(77.28),
								},
								map[string]interface{}{
									"timestamp": "2020-10-20T13:23:25.821Z",
									"value":     float64(60.95),
								},
							},
						},
						LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
							"monitorConfiguration": map[string]interface{}{
								"criticalCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(100),
								},
								"evaluationFrequencySecs": float64(60),
								"evaluationType":          "Max",
								"lookbackSecs":            float64(240),
								"maxSamples":              float64(3),
								"minSamples":              float64(2),
							},
						},
						MonitorName:          to.Ptr("memory|available"),
						MonitorType:          to.Ptr("memory|available"),
						MonitoredObject:      to.Ptr(""),
						ParentMonitorName:    to.Ptr("memory"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HealthMonitorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HealthMonitorList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetExpanded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetFiltered.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor list with filtered values"},
	})
	client = armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	pager = client.List("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		&armworkloadmonitor.HealthMonitorsClientListOptions{Filter: to.Ptr("monitorName eq 'root'"),
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetFiltered.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.HealthMonitorList{
			Value: []*armworkloadmonitor.HealthMonitor{
				{
					Name: to.Ptr("root"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/root"),
					Properties: &armworkloadmonitor.HealthMonitorProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
						EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
						LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
						MonitorName:                        to.Ptr("root"),
						MonitorType:                        to.Ptr("root"),
						MonitoredObject:                    to.Ptr(""),
						ParentMonitorName:                  to.Ptr(""),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HealthMonitorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HealthMonitorList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetFiltered.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHealthMonitors_Get(t *testing.T) {
	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor with default values"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	res, err := client.Get(ctx,
		"bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A|free-space",
		&armworkloadmonitor.HealthMonitorsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armworkloadmonitor.HealthMonitor{
			Name: to.Ptr("logical-disks|C@3A|free-space"),
			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
			ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
			Properties: &armworkloadmonitor.HealthMonitorProperties{
				CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
				EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
				LastReportedTimestamp:              to.Ptr("2020-02-15T20:20:18.5765757Z"),
				MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
				MonitorType:                        to.Ptr("logical-disks|*|free-space"),
				MonitoredObject:                    to.Ptr("C:"),
				ParentMonitorName:                  to.Ptr("logical-disks|C:"),
				PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateHealthy),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthMonitor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthMonitor)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetExpanded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor with expanded values"},
	})
	client = armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	res, err = client.Get(ctx,
		"bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A|free-space",
		&armworkloadmonitor.HealthMonitorsClientGetOptions{Expand: to.Ptr("evidence")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetExpanded.json: %v", err)
	}
	// Response check
	{
		exampleRes := armworkloadmonitor.HealthMonitor{
			Name: to.Ptr("logical-disks|C@3A|free-space"),
			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
			ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
			Properties: &armworkloadmonitor.HealthMonitorProperties{
				CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
				EvaluationTimestamp:                to.Ptr("2020-02-15T20:20:18.5765757Z"),
				Evidence: map[string]interface{}{
					"reason": map[string]interface{}{
						"code":    float64(2200),
						"message": "Collected samples met warning condition for this monitor.",
					},
					"samples": []interface{}{
						map[string]interface{}{
							"timestamp": "2020-03-24T20:51:00.6058242Z",
							"value":     float64(7.019),
						},
						map[string]interface{}{
							"timestamp": "2020-03-24T21:51:00.6058242Z",
							"value":     float64(6.019),
						},
					},
				},
				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
				MonitorName:           to.Ptr("logical-disks|C:|free-space"),
				MonitorType:           to.Ptr("logical-disks|*|free-space"),
				MonitoredObject:       to.Ptr("C:"),
				ParentMonitorName:     to.Ptr("logical-disks|C:"),
				PreviousMonitorState:  to.Ptr(armworkloadmonitor.HealthStateHealthy),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthMonitor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthMonitor)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetExpanded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHealthMonitors_ListStateChanges(t *testing.T) {
	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor state changes with default values"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	pager := client.ListStateChanges("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A",
		&armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{Filter: nil,
			Expand:            nil,
			StartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-19T19:24:14Z"); return t }()),
			EndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T01:24:14Z"); return t }()),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetDefault.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.HealthMonitorStateChangeList{
			Value: []*armworkloadmonitor.HealthMonitorStateChange{
				{
					Name: to.Ptr("1578514818"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-19T19:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-19T19:24:14Z"),
						MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
						MonitorType:                        to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:                    to.Ptr("C:"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateHealthy),
					},
				},
				{
					Name: to.Ptr("1578255618"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T01:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T07:24:14Z"),
						MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
						MonitorType:                        to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:                    to.Ptr("C:"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				},
				{
					Name: to.Ptr("1578255618"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T01:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T01:24:14Z"),
						MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
						MonitorType:                        to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:                    to.Ptr("C:"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HealthMonitorStateChangeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HealthMonitorStateChangeList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetExpanded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor state changes with expanded values"},
	})
	client = armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	pager = client.ListStateChanges("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A",
		&armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{Filter: nil,
			Expand:            to.Ptr("evidence,configuration"),
			StartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-19T07:22:25.824Z"); return t }()),
			EndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-21T13:22:25.822Z"); return t }()),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetExpanded.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.HealthMonitorStateChangeList{
			Value: []*armworkloadmonitor.HealthMonitorStateChange{
				{
					Name: to.Ptr("1578514818"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T07:24:14Z"),
						Evidence: map[string]interface{}{
							"reason": map[string]interface{}{
								"code":    float64(2200),
								"message": "Collected samples met warning condition for this monitor.",
							},
							"samples": []interface{}{
								map[string]interface{}{
									"timestamp": "2020-10-20T07:21:25.823Z",
									"value":     float64(7.9),
								},
								map[string]interface{}{
									"timestamp": "2020-10-20T07:22:25.824Z",
									"value":     float64(5.7),
								},
							},
						},
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
							"monitorConfiguration": map[string]interface{}{
								"criticalCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(5),
								},
								"evaluationFrequencySecs": float64(60),
								"evaluationType":          "Max",
								"lookbackSecs":            float64(120),
								"maxSamples":              float64(1),
								"minSamples":              float64(1),
								"warningCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(8),
								},
							},
						},
						MonitorName:          to.Ptr("logical-disks|C:|free-space"),
						MonitorType:          to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:      to.Ptr("C:"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("1578255618"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-19T19:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T13:24:14Z"),
						Evidence: map[string]interface{}{
							"reason": map[string]interface{}{
								"code":    float64(2200),
								"message": "Collected samples met warning condition for this monitor.",
							},
							"samples": []interface{}{
								map[string]interface{}{
									"timestamp": "2020-10-19T19:21:25.822Z",
									"value":     float64(6.7),
								},
								map[string]interface{}{
									"timestamp": "2020-10-19T19:22:25.822Z",
									"value":     float64(7),
								},
							},
						},
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
							"monitorConfiguration": map[string]interface{}{
								"criticalCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(5),
								},
								"evaluationFrequencySecs": float64(60),
								"evaluationType":          "Max",
								"lookbackSecs":            float64(120),
								"maxSamples":              float64(1),
								"minSamples":              float64(1),
								"warningCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(8),
								},
							},
						},
						MonitorName:          to.Ptr("logical-disks|C:|free-space"),
						MonitorType:          to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:      to.Ptr("C:"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				},
				{
					Name: to.Ptr("1578255618"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateHealthy),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T19:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T19:24:14Z"),
						Evidence: map[string]interface{}{
							"reason": map[string]interface{}{
								"code":    float64(2300),
								"message": "Collected samples met healthy condition for this monitor.",
							},
							"samples": []interface{}{
								map[string]interface{}{
									"timestamp": "2020-10-19T19:21:25.822Z",
									"value":     float64(9),
								},
								map[string]interface{}{
									"timestamp": "2020-10-19T19:22:25.822Z",
									"value":     float64(10.6),
								},
							},
						},
						MonitorConfiguration: map[string]interface{}{
							"isEnabled": true,
							"monitorConfiguration": map[string]interface{}{
								"criticalCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(5),
								},
								"evaluationFrequencySecs": float64(60),
								"evaluationType":          "Max",
								"lookbackSecs":            float64(120),
								"maxSamples":              float64(1),
								"minSamples":              float64(1),
								"warningCondition": map[string]interface{}{
									"isEnabled": true,
									"operator":  "<",
									"threshold": float64(8),
								},
							},
						},
						MonitorName:          to.Ptr("logical-disks|C:|free-space"),
						MonitorType:          to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:      to.Ptr("C:"),
						PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HealthMonitorStateChangeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HealthMonitorStateChangeList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetExpanded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetFiltered.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor state changes with filtered values"},
	})
	client = armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	pager = client.ListStateChanges("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A|free-space",
		&armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{Filter: to.Ptr("isHeartbeat eq false"),
			Expand:            nil,
			StartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-04T20:20:18.5765757Z"); return t }()),
			EndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-09T20:20:18.5765757Z"); return t }()),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetFiltered.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armworkloadmonitor.HealthMonitorStateChangeList{
			Value: []*armworkloadmonitor.HealthMonitorStateChange{
				{
					Name: to.Ptr("1578514818"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T07:24:14Z"),
						MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
						MonitorType:                        to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:                    to.Ptr("C:"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateCritical),
					},
				},
				{
					Name: to.Ptr("1578255618"),
					Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
					ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
					Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
						CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateHealthy),
						CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T19:24:14Z"),
						EvaluationTimestamp:                to.Ptr("2020-10-20T19:24:14Z"),
						MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
						MonitorType:                        to.Ptr("logical-disks|*|free-space"),
						MonitoredObject:                    to.Ptr("C:"),
						PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateWarning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HealthMonitorStateChangeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HealthMonitorStateChangeList)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetFiltered.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHealthMonitors_GetStateChange(t *testing.T) {
	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor state change with default values"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	res, err := client.GetStateChange(ctx,
		"bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A",
		"1584316800",
		&armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armworkloadmonitor.HealthMonitorStateChange{
			Name: to.Ptr("1578514818"),
			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
			ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
				CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateCritical),
				CurrentStateFirstObservedTimestamp: to.Ptr("2020-01-07T20:20:18.5765757Z"),
				EvaluationTimestamp:                to.Ptr("2020-01-07T20:20:18.5765757Z"),
				MonitorName:                        to.Ptr("logical-disks|C:|free-space"),
				MonitorType:                        to.Ptr("logical-disks|*|free-space"),
				MonitoredObject:                    to.Ptr("C:"),
				PreviousMonitorState:               to.Ptr(armworkloadmonitor.HealthStateWarning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthMonitorStateChange) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthMonitorStateChange)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetExpanded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitor state change with expanded values"},
	})
	client = armworkloadmonitor.NewHealthMonitorsClient(cred, &options)
	res, err = client.GetStateChange(ctx,
		"bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21",
		"tugamidiAlerts",
		"Microsoft.Compute",
		"virtualMachines",
		"linuxEUS",
		"logical-disks|C@3A",
		"1584316800",
		&armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions{Expand: to.Ptr("evidence")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetExpanded.json: %v", err)
	}
	// Response check
	{
		exampleRes := armworkloadmonitor.HealthMonitorStateChange{
			Name: to.Ptr("1578514818"),
			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
			ID:   to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
				CurrentMonitorState:                to.Ptr(armworkloadmonitor.HealthStateWarning),
				CurrentStateFirstObservedTimestamp: to.Ptr("2020-01-07T20:20:18.5765757Z"),
				EvaluationTimestamp:                to.Ptr("2020-01-07T20:20:18.5765757Z"),
				Evidence: map[string]interface{}{
					"reason": map[string]interface{}{
						"Code":    float64(2200),
						"Message": "Collected samples met warning condition for this monitor.",
					},
					"samples": []interface{}{
						map[string]interface{}{
							"timestamp": "2020-10-20T13:23:25.823Z",
							"value":     float64(87.1828),
						},
					},
				},
				MonitorName:          to.Ptr("logical-disks|C:|free-space"),
				MonitorType:          to.Ptr("logical-disks|*|free-space"),
				MonitoredObject:      to.Ptr("C:"),
				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthMonitorStateChange) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthMonitorStateChange)
			t.Fatalf("Mock response is not equal to example response for example specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetExpanded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
