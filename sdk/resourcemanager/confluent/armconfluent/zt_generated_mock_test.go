//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfluent_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/confluent/armconfluent"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMarketplaceAgreements_List(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/MarketplaceAgreements_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MarketplaceAgreements_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewMarketplaceAgreementsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/MarketplaceAgreements_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfluent.AgreementResourceListResponse{
			Value: []*armconfluent.AgreementResource{
				{
					Name: to.Ptr("planid1"),
					Type: to.Ptr("Microsoft.Confluent/agreements"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Confluent/agreements/default"),
					Properties: &armconfluent.AgreementProperties{
						Accepted:          to.Ptr(true),
						LicenseTextLink:   to.Ptr("test.licenseLink1"),
						Plan:              to.Ptr("planid1"),
						PrivacyPolicyLink: to.Ptr("test.privacyPolicyLink1"),
						Product:           to.Ptr("offid1"),
						Publisher:         to.Ptr("pubid1"),
						RetrieveDatetime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
						Signature:         to.Ptr("ASDFSDAFWEFASDGWERLWER"),
					},
				},
				{
					Name: to.Ptr("planid2"),
					Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
					ID:   to.Ptr("id2"),
					Properties: &armconfluent.AgreementProperties{
						Accepted:          to.Ptr(true),
						LicenseTextLink:   to.Ptr("test.licenseLin2k"),
						Plan:              to.Ptr("planid2"),
						PrivacyPolicyLink: to.Ptr("test.privacyPolicyLink2"),
						Product:           to.Ptr("offid2"),
						Publisher:         to.Ptr("pubid2"),
						RetrieveDatetime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-14T11:33:07.12132Z"); return t }()),
						Signature:         to.Ptr("ASDFSDAFWEFASDGWERLWER"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AgreementResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AgreementResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/MarketplaceAgreements_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_Create(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/MarketplaceAgreements_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MarketplaceAgreements_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewMarketplaceAgreementsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		&armconfluent.MarketplaceAgreementsClientCreateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/MarketplaceAgreements_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfluent.AgreementResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Confluent/agreements"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Confluent/agreements/default"),
			Properties: &armconfluent.AgreementProperties{
				Accepted:          to.Ptr(true),
				LicenseTextLink:   to.Ptr("test.licenseLink1"),
				Plan:              to.Ptr("planid1"),
				PrivacyPolicyLink: to.Ptr("test.privacyPolicyLink1"),
				Product:           to.Ptr("offid1"),
				Publisher:         to.Ptr("pubid1"),
				RetrieveDatetime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-05T17:33:07.12132Z"); return t }()),
				Signature:         to.Ptr("YKWOQOKH2BCKZ46O7SCKHANWEENRFRU5WB4LXDFUYWCBWTS4AG4SGQXCOZYIR5ZJCZTXRMZKYZMO2BJSL5YKPLAR4LBFRUNS6CRYE7A"),
			},
			SystemData: &armconfluent.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armconfluent.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armconfluent.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementResource)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/MarketplaceAgreements_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganizationOperations_List(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/OrganizationOperations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OrganizationOperations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/OrganizationOperations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfluent.OperationListResult{
			Value: []*armconfluent.OperationResult{
				{
					Name: to.Ptr("Microsoft.Confluent/organizations/Read"),
					Display: &armconfluent.OperationDisplay{
						Description: to.Ptr("Read organization"),
						Operation:   to.Ptr("Get/List organization resources"),
						Provider:    to.Ptr("Microsoft.Confluent"),
						Resource:    to.Ptr("organizations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Confluent/organizations/Write"),
					Display: &armconfluent.OperationDisplay{
						Description: to.Ptr("Write organization"),
						Operation:   to.Ptr("Create/Update organization resources"),
						Provider:    to.Ptr("Microsoft.Confluent"),
						Resource:    to.Ptr("organizations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Confluent/organizations/Delete"),
					Display: &armconfluent.OperationDisplay{
						Description: to.Ptr("Delete organization"),
						Operation:   to.Ptr("Delete organization resources"),
						Provider:    to.Ptr("Microsoft.Confluent"),
						Resource:    to.Ptr("organizations"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/OrganizationOperations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganization_ListBySubscription(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Organization_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfluent.OrganizationResourceListResult{
			Value: []*armconfluent.OrganizationResource{
				{
					Name:     to.Ptr("myOrganizations"),
					Type:     to.Ptr("Microsoft.Confluent/organizations"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Confluent/organizations/myOrganizations"),
					Location: to.Ptr("West US"),
					Properties: &armconfluent.OrganizationResourceProperties{
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
						OfferDetail: &armconfluent.OfferDetail{
							ID:          to.Ptr("string"),
							PlanID:      to.Ptr("string"),
							PlanName:    to.Ptr("string"),
							PublisherID: to.Ptr("string"),
							Status:      to.Ptr(armconfluent.SaaSOfferStatusStarted),
							TermUnit:    to.Ptr("string"),
						},
						OrganizationID:    to.Ptr("string"),
						ProvisioningState: to.Ptr(armconfluent.ProvisionStateSucceeded),
						SsoURL:            to.Ptr("string"),
						UserDetail: &armconfluent.UserDetail{
							EmailAddress: to.Ptr("contoso@microsoft.com"),
							FirstName:    to.Ptr("string"),
							LastName:     to.Ptr("string"),
						},
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrganizationResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrganizationResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganization_ListByResourceGroup(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Organization_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfluent.OrganizationResourceListResult{
			Value: []*armconfluent.OrganizationResource{
				{
					Name:     to.Ptr("myOrganizations"),
					Type:     to.Ptr("Microsoft.Confluent/organizations"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Confluent/organizations/myOrganizations"),
					Location: to.Ptr("West US"),
					Properties: &armconfluent.OrganizationResourceProperties{
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
						OfferDetail: &armconfluent.OfferDetail{
							ID:          to.Ptr("string"),
							PlanID:      to.Ptr("string"),
							PlanName:    to.Ptr("string"),
							PublisherID: to.Ptr("string"),
							Status:      to.Ptr(armconfluent.SaaSOfferStatusStarted),
							TermUnit:    to.Ptr("string"),
						},
						OrganizationID:    to.Ptr("string"),
						ProvisioningState: to.Ptr(armconfluent.ProvisionStateSucceeded),
						SsoURL:            to.Ptr("string"),
						UserDetail: &armconfluent.UserDetail{
							EmailAddress: to.Ptr("contoso@microsoft.com"),
							FirstName:    to.Ptr("string"),
							LastName:     to.Ptr("string"),
						},
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrganizationResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrganizationResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganization_Get(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Organization_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myOrganization",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfluent.OrganizationResource{
			Name:     to.Ptr("myOrganization"),
			Type:     to.Ptr("Microsoft.Confluent/organizations"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Confluent/organizations/myOrganization"),
			Location: to.Ptr("West US"),
			Properties: &armconfluent.OrganizationResourceProperties{
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				OfferDetail: &armconfluent.OfferDetail{
					ID:          to.Ptr("string"),
					PlanID:      to.Ptr("string"),
					PlanName:    to.Ptr("string"),
					PublisherID: to.Ptr("string"),
					Status:      to.Ptr(armconfluent.SaaSOfferStatusStarted),
					TermUnit:    to.Ptr("string"),
				},
				OrganizationID:    to.Ptr("string"),
				ProvisioningState: to.Ptr(armconfluent.ProvisionStateSucceeded),
				SsoURL:            to.Ptr("string"),
				UserDetail: &armconfluent.UserDetail{
					EmailAddress: to.Ptr("contoso@microsoft.com"),
					FirstName:    to.Ptr("string"),
					LastName:     to.Ptr("string"),
				},
			},
			SystemData: &armconfluent.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armconfluent.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armconfluent.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrganizationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrganizationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganization_Create(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Organization_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myOrganization",
		&armconfluent.OrganizationClientBeginCreateOptions{Body: &armconfluent.OrganizationResource{
			Location: to.Ptr("West US"),
			Properties: &armconfluent.OrganizationResourceProperties{
				OfferDetail: &armconfluent.OfferDetail{
					ID:          to.Ptr("string"),
					PlanID:      to.Ptr("string"),
					PlanName:    to.Ptr("string"),
					PublisherID: to.Ptr("string"),
					TermUnit:    to.Ptr("string"),
				},
				UserDetail: &armconfluent.UserDetail{
					EmailAddress: to.Ptr("contoso@microsoft.com"),
					FirstName:    to.Ptr("string"),
					LastName:     to.Ptr("string"),
				},
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfluent.OrganizationResource{
			Name:     to.Ptr("myOrganization"),
			Type:     to.Ptr("Microsoft.Confluent/organizations"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Confluent/organizations/myOrganization"),
			Location: to.Ptr("West US"),
			Properties: &armconfluent.OrganizationResourceProperties{
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				OfferDetail: &armconfluent.OfferDetail{
					ID:          to.Ptr("string"),
					PlanID:      to.Ptr("string"),
					PlanName:    to.Ptr("string"),
					PublisherID: to.Ptr("string"),
					Status:      to.Ptr(armconfluent.SaaSOfferStatusStarted),
					TermUnit:    to.Ptr("string"),
				},
				OrganizationID:    to.Ptr("string"),
				ProvisioningState: to.Ptr(armconfluent.ProvisionStateSucceeded),
				SsoURL:            to.Ptr("string"),
				UserDetail: &armconfluent.UserDetail{
					EmailAddress: to.Ptr("contoso@microsoft.com"),
					FirstName:    to.Ptr("string"),
					LastName:     to.Ptr("string"),
				},
			},
			SystemData: &armconfluent.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armconfluent.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armconfluent.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrganizationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrganizationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganization_Update(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Confluent_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myOrganization",
		&armconfluent.OrganizationClientUpdateOptions{Body: &armconfluent.OrganizationResourceUpdate{
			Tags: map[string]*string{
				"client": to.Ptr("dev-client"),
				"env":    to.Ptr("dev"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfluent.OrganizationResource{
			Name:     to.Ptr("myOrganization"),
			Type:     to.Ptr("Microsoft.Confluent/organizations"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Confluent/organizations/myOrganization"),
			Location: to.Ptr("West US"),
			Properties: &armconfluent.OrganizationResourceProperties{
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				OfferDetail: &armconfluent.OfferDetail{
					ID:          to.Ptr("string"),
					PlanID:      to.Ptr("string"),
					PlanName:    to.Ptr("string"),
					PublisherID: to.Ptr("string"),
					Status:      to.Ptr(armconfluent.SaaSOfferStatusStarted),
					TermUnit:    to.Ptr("string"),
				},
				OrganizationID:    to.Ptr("string"),
				ProvisioningState: to.Ptr(armconfluent.ProvisionStateSucceeded),
				SsoURL:            to.Ptr("string"),
				UserDetail: &armconfluent.UserDetail{
					EmailAddress: to.Ptr("contoso@microsoft.com"),
					FirstName:    to.Ptr("string"),
					LastName:     to.Ptr("string"),
				},
			},
			SystemData: &armconfluent.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armconfluent.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armconfluent.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrganizationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrganizationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrganization_Delete(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Confluent_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewOrganizationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myOrganization",
		&armconfluent.OrganizationClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Organization_Delete.json: %v", err)
	}
}

func TestValidations_ValidateOrganization(t *testing.T) {
	// From example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Validations_ValidateOrganizations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validations_ValidateOrganizations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfluent.NewValidationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ValidateOrganization(ctx,
		"myResourceGroup",
		"myOrganization",
		armconfluent.OrganizationResource{
			Location: to.Ptr("West US"),
			Properties: &armconfluent.OrganizationResourceProperties{
				OfferDetail: &armconfluent.OfferDetail{
					ID:          to.Ptr("string"),
					PlanID:      to.Ptr("string"),
					PlanName:    to.Ptr("string"),
					PublisherID: to.Ptr("string"),
					TermUnit:    to.Ptr("string"),
				},
				UserDetail: &armconfluent.UserDetail{
					EmailAddress: to.Ptr("abc@microsoft.com"),
					FirstName:    to.Ptr("string"),
					LastName:     to.Ptr("string"),
				},
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Validations_ValidateOrganizations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfluent.OrganizationResource{
			Name:     to.Ptr("myOrganization"),
			Type:     to.Ptr("Microsoft.Confluent/organizations"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Confluent/organizations/myOrganization"),
			Location: to.Ptr("West US"),
			Properties: &armconfluent.OrganizationResourceProperties{
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-09T14:28:47.284Z"); return t }()),
				OfferDetail: &armconfluent.OfferDetail{
					ID:          to.Ptr("string"),
					PlanID:      to.Ptr("string"),
					PlanName:    to.Ptr("string"),
					PublisherID: to.Ptr("string"),
					Status:      to.Ptr(armconfluent.SaaSOfferStatusStarted),
					TermUnit:    to.Ptr("string"),
				},
				OrganizationID:    to.Ptr("string"),
				ProvisioningState: to.Ptr(armconfluent.ProvisionStateSucceeded),
				SsoURL:            to.Ptr("string"),
				UserDetail: &armconfluent.UserDetail{
					EmailAddress: to.Ptr("abc@microsoft.com"),
					FirstName:    to.Ptr("string"),
					LastName:     to.Ptr("string"),
				},
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrganizationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrganizationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/confluent/resource-manager/Microsoft.Confluent/preview/2021-09-01-preview/examples/Validations_ValidateOrganizations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
