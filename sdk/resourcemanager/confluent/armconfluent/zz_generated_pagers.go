//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfluent

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MarketplaceAgreementsClientListPager provides operations for iterating over paged responses.
type MarketplaceAgreementsClientListPager struct {
	client    *MarketplaceAgreementsClient
	current   MarketplaceAgreementsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MarketplaceAgreementsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MarketplaceAgreementsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AgreementResourceListResponse.NextLink == nil || len(*p.current.AgreementResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MarketplaceAgreementsClientListPager) NextPage(ctx context.Context) (MarketplaceAgreementsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MarketplaceAgreementsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MarketplaceAgreementsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MarketplaceAgreementsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return MarketplaceAgreementsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OrganizationClientListByResourceGroupPager provides operations for iterating over paged responses.
type OrganizationClientListByResourceGroupPager struct {
	client    *OrganizationClient
	current   OrganizationClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OrganizationClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OrganizationClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrganizationResourceListResult.NextLink == nil || len(*p.current.OrganizationResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OrganizationClientListByResourceGroupPager) NextPage(ctx context.Context) (OrganizationClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OrganizationClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OrganizationClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OrganizationClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OrganizationClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return OrganizationClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OrganizationClientListBySubscriptionPager provides operations for iterating over paged responses.
type OrganizationClientListBySubscriptionPager struct {
	client    *OrganizationClient
	current   OrganizationClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OrganizationClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OrganizationClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrganizationResourceListResult.NextLink == nil || len(*p.current.OrganizationResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OrganizationClientListBySubscriptionPager) NextPage(ctx context.Context) (OrganizationClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OrganizationClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OrganizationClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OrganizationClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OrganizationClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return OrganizationClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OrganizationOperationsClientListPager provides operations for iterating over paged responses.
type OrganizationOperationsClientListPager struct {
	client    *OrganizationOperationsClient
	current   OrganizationOperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OrganizationOperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OrganizationOperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OrganizationOperationsClientListPager) NextPage(ctx context.Context) (OrganizationOperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OrganizationOperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OrganizationOperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OrganizationOperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OrganizationOperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OrganizationOperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
