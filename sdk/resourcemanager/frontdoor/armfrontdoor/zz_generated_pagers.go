//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfrontdoor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ExperimentsClientListByProfilePager provides operations for iterating over paged responses.
type ExperimentsClientListByProfilePager struct {
	client    *ExperimentsClient
	current   ExperimentsClientListByProfileResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsClientListByProfileResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ExperimentsClientListByProfilePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentList.NextLink == nil || len(*p.current.ExperimentList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ExperimentsClientListByProfilePager) NextPage(ctx context.Context) (ExperimentsClientListByProfileResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ExperimentsClientListByProfileResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ExperimentsClientListByProfileResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ExperimentsClientListByProfileResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ExperimentsClientListByProfileResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		return ExperimentsClientListByProfileResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FrontDoorsClientListByResourceGroupPager provides operations for iterating over paged responses.
type FrontDoorsClientListByResourceGroupPager struct {
	client    *FrontDoorsClient
	current   FrontDoorsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FrontDoorsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FrontDoorsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FrontDoorsClientListByResourceGroupPager) NextPage(ctx context.Context) (FrontDoorsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FrontDoorsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FrontDoorsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FrontDoorsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FrontDoorsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return FrontDoorsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FrontDoorsClientListPager provides operations for iterating over paged responses.
type FrontDoorsClientListPager struct {
	client    *FrontDoorsClient
	current   FrontDoorsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FrontDoorsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FrontDoorsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FrontDoorsClientListPager) NextPage(ctx context.Context) (FrontDoorsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FrontDoorsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FrontDoorsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FrontDoorsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FrontDoorsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return FrontDoorsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FrontendEndpointsClientListByFrontDoorPager provides operations for iterating over paged responses.
type FrontendEndpointsClientListByFrontDoorPager struct {
	client    *FrontendEndpointsClient
	current   FrontendEndpointsClientListByFrontDoorResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FrontendEndpointsClientListByFrontDoorResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FrontendEndpointsClientListByFrontDoorPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FrontendEndpointsListResult.NextLink == nil || len(*p.current.FrontendEndpointsListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FrontendEndpointsClientListByFrontDoorPager) NextPage(ctx context.Context) (FrontendEndpointsClientListByFrontDoorResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FrontendEndpointsClientListByFrontDoorResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FrontendEndpointsClientListByFrontDoorResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FrontendEndpointsClientListByFrontDoorResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FrontendEndpointsClientListByFrontDoorResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByFrontDoorHandleResponse(resp)
	if err != nil {
		return FrontendEndpointsClientListByFrontDoorResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedRuleSetsClientListPager provides operations for iterating over paged responses.
type ManagedRuleSetsClientListPager struct {
	client    *ManagedRuleSetsClient
	current   ManagedRuleSetsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedRuleSetsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedRuleSetsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedRuleSetDefinitionList.NextLink == nil || len(*p.current.ManagedRuleSetDefinitionList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedRuleSetsClientListPager) NextPage(ctx context.Context) (ManagedRuleSetsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedRuleSetsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedRuleSetsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedRuleSetsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedRuleSetsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ManagedRuleSetsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NetworkExperimentProfilesClientListByResourceGroupPager provides operations for iterating over paged responses.
type NetworkExperimentProfilesClientListByResourceGroupPager struct {
	client    *NetworkExperimentProfilesClient
	current   NetworkExperimentProfilesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkExperimentProfilesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NetworkExperimentProfilesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProfileList.NextLink == nil || len(*p.current.ProfileList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NetworkExperimentProfilesClientListByResourceGroupPager) NextPage(ctx context.Context) (NetworkExperimentProfilesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NetworkExperimentProfilesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NetworkExperimentProfilesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NetworkExperimentProfilesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NetworkExperimentProfilesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return NetworkExperimentProfilesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NetworkExperimentProfilesClientListPager provides operations for iterating over paged responses.
type NetworkExperimentProfilesClientListPager struct {
	client    *NetworkExperimentProfilesClient
	current   NetworkExperimentProfilesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkExperimentProfilesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NetworkExperimentProfilesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProfileList.NextLink == nil || len(*p.current.ProfileList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NetworkExperimentProfilesClientListPager) NextPage(ctx context.Context) (NetworkExperimentProfilesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NetworkExperimentProfilesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NetworkExperimentProfilesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NetworkExperimentProfilesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NetworkExperimentProfilesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return NetworkExperimentProfilesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PoliciesClientListPager provides operations for iterating over paged responses.
type PoliciesClientListPager struct {
	client    *PoliciesClient
	current   PoliciesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PoliciesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PoliciesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebApplicationFirewallPolicyList.NextLink == nil || len(*p.current.WebApplicationFirewallPolicyList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PoliciesClientListPager) NextPage(ctx context.Context) (PoliciesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PoliciesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PoliciesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PoliciesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PoliciesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PoliciesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PreconfiguredEndpointsClientListPager provides operations for iterating over paged responses.
type PreconfiguredEndpointsClientListPager struct {
	client    *PreconfiguredEndpointsClient
	current   PreconfiguredEndpointsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PreconfiguredEndpointsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PreconfiguredEndpointsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PreconfiguredEndpointList.NextLink == nil || len(*p.current.PreconfiguredEndpointList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PreconfiguredEndpointsClientListPager) NextPage(ctx context.Context) (PreconfiguredEndpointsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PreconfiguredEndpointsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PreconfiguredEndpointsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PreconfiguredEndpointsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PreconfiguredEndpointsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PreconfiguredEndpointsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RulesEnginesClientListByFrontDoorPager provides operations for iterating over paged responses.
type RulesEnginesClientListByFrontDoorPager struct {
	client    *RulesEnginesClient
	current   RulesEnginesClientListByFrontDoorResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RulesEnginesClientListByFrontDoorResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RulesEnginesClientListByFrontDoorPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RulesEngineListResult.NextLink == nil || len(*p.current.RulesEngineListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RulesEnginesClientListByFrontDoorPager) NextPage(ctx context.Context) (RulesEnginesClientListByFrontDoorResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RulesEnginesClientListByFrontDoorResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RulesEnginesClientListByFrontDoorResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RulesEnginesClientListByFrontDoorResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RulesEnginesClientListByFrontDoorResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByFrontDoorHandleResponse(resp)
	if err != nil {
		return RulesEnginesClientListByFrontDoorResponse{}, err
	}
	p.current = result
	return p.current, nil
}
