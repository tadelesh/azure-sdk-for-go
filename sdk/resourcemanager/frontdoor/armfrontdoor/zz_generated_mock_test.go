//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfrontdoor

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestNetworkExperimentProfiles_List(t *testing.T) {
	// From example List NetworkExperiment Profiles in a Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkExperimentProfilesClient(con,
		"subid")
	pager := client.List(&NetworkExperimentProfilesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Profile.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Profile.ID should not be nil!")
			}
		}
	}
}

func TestNetworkExperimentProfiles_ListByResourceGroup(t *testing.T) {
	// From example List NetworkExperiment Profiles in a Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkExperimentProfilesClient(con,
		"subid")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&NetworkExperimentProfilesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Profile.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Profile.ID should not be nil!")
			}
		}
	}
}

func TestNetworkExperimentProfiles_Get(t *testing.T) {
	// From example Gets an NetworkExperiment Profile by Profile Id
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkExperimentProfilesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyProfile",
		&NetworkExperimentProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}
}

func TestNetworkExperimentProfiles_CreateOrUpdate(t *testing.T) {
	// From example Creates an NetworkExperiment Profile in a Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkExperimentProfilesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyProfile",
		"MyResourceGroup",
		Profile{
			Resource: Resource{
				Location: to.StringPtr("WestUs"),
			},
			Properties: &ProfileProperties{
				EnabledState: StateEnabled.ToPtr(),
			},
		},
		&NetworkExperimentProfilesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}
}

func TestNetworkExperimentProfiles_Update(t *testing.T) {
	// From example Updates an Experiment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkExperimentProfilesClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"MyResourceGroup",
		"MyProfile",
		ProfileUpdateModel{
			Properties: &ProfileUpdateProperties{
				EnabledState: StateEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&NetworkExperimentProfilesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}
}

func TestNetworkExperimentProfiles_Delete(t *testing.T) {
	// From example Deletes an NetworkExperiment Profile by ProfileName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkExperimentProfilesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyProfile",
		&NetworkExperimentProfilesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPreconfiguredEndpoints_List(t *testing.T) {
	// From example Gets a list of Preconfigured Endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPreconfiguredEndpointsClient(con,
		"subid")
	pager := client.List("MyResourceGroup",
		"MyProfile",
		&PreconfiguredEndpointsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PreconfiguredEndpoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PreconfiguredEndpoint.ID should not be nil!")
			}
		}
	}
}

func TestExperiments_ListByProfile(t *testing.T) {
	// From example Gets a list of Experiments
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExperimentsClient(con,
		"subid")
	pager := client.ListByProfile("MyResourceGroup",
		"MyProfile",
		&ExperimentsListByProfileOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Experiment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Experiment.ID should not be nil!")
			}
		}
	}
}

func TestExperiments_Get(t *testing.T) {
	// From example Gets an Experiment by ExperimentName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExperimentsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		&ExperimentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Experiment.ID == nil {
		t.Fatal("Experiment.ID should not be nil!")
	}
}

func TestExperiments_CreateOrUpdate(t *testing.T) {
	// From example Creates an Experiment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExperimentsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		Experiment{
			Properties: &ExperimentProperties{
				Description:  to.StringPtr("this is my first experiment!"),
				EnabledState: StateEnabled.ToPtr(),
				EndpointA: &Endpoint{
					Name:     to.StringPtr("endpoint A"),
					Endpoint: to.StringPtr("endpointA.net"),
				},
				EndpointB: &Endpoint{
					Name:     to.StringPtr("endpoint B"),
					Endpoint: to.StringPtr("endpointB.net"),
				},
			},
		},
		&ExperimentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Experiment.ID == nil {
		t.Fatal("Experiment.ID should not be nil!")
	}
}

func TestExperiments_Update(t *testing.T) {
	// From example Updates an Experiment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExperimentsClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		ExperimentUpdateModel{
			Properties: &ExperimentUpdateProperties{
				Description:  to.StringPtr("string"),
				EnabledState: StateEnabled.ToPtr(),
			},
		},
		&ExperimentsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Experiment.ID == nil {
		t.Fatal("Experiment.ID should not be nil!")
	}
}

func TestExperiments_Delete(t *testing.T) {
	// From example Deletes an Experiment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExperimentsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		&ExperimentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReports_GetLatencyScorecards(t *testing.T) {
	// From example Gets a Latency Scorecard for a given Experiment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	res, err := client.GetLatencyScorecards(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		LatencyScorecardAggregationIntervalDaily,
		&ReportsGetLatencyScorecardsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LatencyScorecard.ID == nil {
		t.Fatal("LatencyScorecard.ID should not be nil!")
	}
}

func TestReports_GetTimeseries(t *testing.T) {
	// From example Gets a Timeseries for a given Experiment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	res, err := client.GetTimeseries(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-21T17:32:28Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-21T17:32:28Z"); return t }(),
		TimeseriesAggregationIntervalHourly,
		TimeseriesTypeMeasurementCounts,
		&ReportsGetTimeseriesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Timeseries.ID == nil {
		t.Fatal("Timeseries.ID should not be nil!")
	}
}

func TestFrontDoorNameAvailability_Check(t *testing.T) {
	// From example CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorNameAvailabilityClient(con)
	_, err := client.Check(ctx,
		CheckNameAvailabilityInput{
			Name: to.StringPtr("sampleName"),
			Type: ResourceTypeMicrosoftNetworkFrontDoors.ToPtr(),
		},
		&FrontDoorNameAvailabilityCheckOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFrontDoorNameAvailabilityWithSubscription_Check(t *testing.T) {
	// From example CheckNameAvailabilityWithSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorNameAvailabilityWithSubscriptionClient(con,
		"subid")
	_, err := client.Check(ctx,
		CheckNameAvailabilityInput{
			Name: to.StringPtr("sampleName"),
			Type: ResourceTypeMicrosoftNetworkFrontDoorsFrontendEndpoints.ToPtr(),
		},
		&FrontDoorNameAvailabilityWithSubscriptionCheckOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFrontDoors_List(t *testing.T) {
	// From example List all Front Doors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorsClient(con,
		"subid")
	pager := client.List(&FrontDoorsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FrontDoor.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FrontDoor.ID should not be nil!")
			}
		}
	}
}

func TestFrontDoors_ListByResourceGroup(t *testing.T) {
	// From example List Front Doors in a Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&FrontDoorsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FrontDoor.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FrontDoor.ID should not be nil!")
			}
		}
	}
}

func TestFrontDoors_Get(t *testing.T) {
	// From example Get Front Door
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"frontDoor1",
		&FrontDoorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FrontDoor.ID == nil {
		t.Fatal("FrontDoor.ID should not be nil!")
	}
}

func TestFrontDoors_CreateOrUpdate(t *testing.T) {
	// From example Create or update specific Front Door
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"frontDoor1",
		FrontDoor{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &FrontDoorProperties{
				FrontDoorUpdateParameters: FrontDoorUpdateParameters{
					BackendPools: []*BackendPool{
						{
							Name: to.StringPtr("backendPool1"),
							Properties: &BackendPoolProperties{
								BackendPoolUpdateParameters: BackendPoolUpdateParameters{
									Backends: []*Backend{
										{
											Address:   to.StringPtr("w3.contoso.com"),
											HTTPPort:  to.Int32Ptr(80),
											HTTPSPort: to.Int32Ptr(443),
											Priority:  to.Int32Ptr(2),
											Weight:    to.Int32Ptr(1),
										},
										{
											Address:                    to.StringPtr("contoso.com.website-us-west-2.othercloud.net"),
											HTTPPort:                   to.Int32Ptr(80),
											HTTPSPort:                  to.Int32Ptr(443),
											Priority:                   to.Int32Ptr(1),
											PrivateLinkApprovalMessage: to.StringPtr("Please approve the connection request for this Private Link"),
											PrivateLinkLocation:        to.StringPtr("eastus"),
											PrivateLinkResourceID:      to.StringPtr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
											Weight:                     to.Int32Ptr(2),
										},
										{
											Address:                    to.StringPtr("10.0.1.5"),
											HTTPPort:                   to.Int32Ptr(80),
											HTTPSPort:                  to.Int32Ptr(443),
											Priority:                   to.Int32Ptr(1),
											PrivateLinkAlias:           to.StringPtr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
											PrivateLinkApprovalMessage: to.StringPtr("Please approve this request to connect to the Private Link"),
											Weight:                     to.Int32Ptr(1),
										}},
									HealthProbeSettings: &SubResource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1"),
									},
									LoadBalancingSettings: &SubResource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1"),
									},
								},
							},
						}},
					BackendPoolsSettings: &BackendPoolsSettings{
						EnforceCertificateNameCheck: EnforceCertificateNameCheckEnabledStateEnabled.ToPtr(),
						SendRecvTimeoutSeconds:      to.Int32Ptr(60),
					},
					EnabledState: FrontDoorEnabledStateEnabled.ToPtr(),
					FrontendEndpoints: []*FrontendEndpoint{
						{
							Name: to.StringPtr("frontendEndpoint1"),
							Properties: &FrontendEndpointProperties{
								FrontendEndpointUpdateParameters: FrontendEndpointUpdateParameters{
									HostName:                    to.StringPtr("www.contoso.com"),
									SessionAffinityEnabledState: SessionAffinityEnabledStateEnabled.ToPtr(),
									SessionAffinityTTLSeconds:   to.Int32Ptr(60),
									WebApplicationFirewallPolicyLink: &FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
									},
								},
							},
						},
						{
							Name: to.StringPtr("default"),
							Properties: &FrontendEndpointProperties{
								FrontendEndpointUpdateParameters: FrontendEndpointUpdateParameters{
									HostName: to.StringPtr("frontDoor1.azurefd.net"),
								},
							},
						}},
					HealthProbeSettings: []*HealthProbeSettingsModel{
						{
							Name: to.StringPtr("healthProbeSettings1"),
							Properties: &HealthProbeSettingsProperties{
								HealthProbeSettingsUpdateParameters: HealthProbeSettingsUpdateParameters{
									Path:              to.StringPtr("/"),
									EnabledState:      HealthProbeEnabledEnabled.ToPtr(),
									HealthProbeMethod: FrontDoorHealthProbeMethodHEAD.ToPtr(),
									IntervalInSeconds: to.Int32Ptr(120),
									Protocol:          FrontDoorProtocolHTTP.ToPtr(),
								},
							},
						}},
					LoadBalancingSettings: []*LoadBalancingSettingsModel{
						{
							Name: to.StringPtr("loadBalancingSettings1"),
							Properties: &LoadBalancingSettingsProperties{
								LoadBalancingSettingsUpdateParameters: LoadBalancingSettingsUpdateParameters{
									SampleSize:                to.Int32Ptr(4),
									SuccessfulSamplesRequired: to.Int32Ptr(2),
								},
							},
						}},
					RoutingRules: []*RoutingRule{
						{
							Name: to.StringPtr("routingRule1"),
							Properties: &RoutingRuleProperties{
								RoutingRuleUpdateParameters: RoutingRuleUpdateParameters{
									AcceptedProtocols: []*FrontDoorProtocol{
										FrontDoorProtocolHTTP.ToPtr()},
									EnabledState: RoutingRuleEnabledStateEnabled.ToPtr(),
									FrontendEndpoints: []*SubResource{
										{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
										},
										{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
										}},
									PatternsToMatch: []*string{
										to.StringPtr("/*")},
									RouteConfiguration: &ForwardingConfiguration{
										RouteConfiguration: RouteConfiguration{
											ODataType: to.StringPtr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
										},
										BackendPool: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
										},
									},
									RulesEngine: &SubResource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
									},
									WebApplicationFirewallPolicyLink: &RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
									},
								},
							},
						}},
				},
			},
		},
		&FrontDoorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FrontDoor.ID == nil {
		t.Fatal("FrontDoor.ID should not be nil!")
	}
}

func TestFrontDoors_Delete(t *testing.T) {
	// From example Delete Front Door
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"frontDoor1",
		&FrontDoorsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFrontDoors_ValidateCustomDomain(t *testing.T) {
	// From example FrontDoor_ValidateCustomDomain
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontDoorsClient(con,
		"subid")
	_, err := client.ValidateCustomDomain(ctx,
		"rg1",
		"frontDoor1",
		ValidateCustomDomainInput{
			HostName: to.StringPtr("www.someDomain.com"),
		},
		&FrontDoorsValidateCustomDomainOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFrontendEndpoints_ListByFrontDoor(t *testing.T) {
	// From example List Frontend endpoints in a Front Door
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontendEndpointsClient(con,
		"subid")
	pager := client.ListByFrontDoor("rg1",
		"frontDoor1",
		&FrontendEndpointsListByFrontDoorOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FrontendEndpoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FrontendEndpoint.ID should not be nil!")
			}
		}
	}
}

func TestFrontendEndpoints_Get(t *testing.T) {
	// From example Get Frontend Endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontendEndpointsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"frontDoor1",
		"frontendEndpoint1",
		&FrontendEndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FrontendEndpoint.ID == nil {
		t.Fatal("FrontendEndpoint.ID should not be nil!")
	}
}

func TestFrontendEndpoints_EnableHttps(t *testing.T) {
	// From example FrontendEndpoints_EnableHttps
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontendEndpointsClient(con,
		"subid")
	poller, err := client.BeginEnableHTTPS(ctx,
		"rg1",
		"frontDoor1",
		"frontendEndpoint1",
		CustomHTTPSConfiguration{
			CertificateSource: FrontDoorCertificateSourceAzureKeyVault.ToPtr(),
			KeyVaultCertificateSourceParameters: &KeyVaultCertificateSourceParameters{
				SecretName:    to.StringPtr("secret1"),
				SecretVersion: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				Vault: &KeyVaultCertificateSourceParametersVault{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.KeyVault/vaults/vault1"),
				},
			},
			MinimumTLSVersion: MinimumTLSVersionOne0.ToPtr(),
			ProtocolType:      FrontDoorTLSProtocolTypeServerNameIndication.ToPtr(),
		},
		&FrontendEndpointsBeginEnableHTTPSOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFrontendEndpoints_DisableHttps(t *testing.T) {
	// From example FrontendEndpoints_DisableHttps
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFrontendEndpointsClient(con,
		"subid")
	poller, err := client.BeginDisableHTTPS(ctx,
		"rg1",
		"frontDoor1",
		"frontendEndpoint1",
		&FrontendEndpointsBeginDisableHTTPSOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEndpoints_PurgeContent(t *testing.T) {
	// From example Purge content from Front Door
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEndpointsClient(con,
		"subid")
	poller, err := client.BeginPurgeContent(ctx,
		"rg1",
		"frontDoor1",
		PurgeParameters{
			ContentPaths: []*string{
				to.StringPtr("/pictures.aspx"),
				to.StringPtr("/pictures/*")},
		},
		&EndpointsBeginPurgeContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRulesEngines_ListByFrontDoor(t *testing.T) {
	// From example List Rules Engine Configurations in a Front Door
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesEnginesClient(con,
		"subid")
	pager := client.ListByFrontDoor("rg1",
		"frontDoor1",
		&RulesEnginesListByFrontDoorOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RulesEngine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RulesEngine.ID should not be nil!")
			}
		}
	}
}

func TestRulesEngines_Get(t *testing.T) {
	// From example Get Rules Engine Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesEnginesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"frontDoor1",
		"rulesEngine1",
		&RulesEnginesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RulesEngine.ID == nil {
		t.Fatal("RulesEngine.ID should not be nil!")
	}
}

func TestRulesEngines_CreateOrUpdate(t *testing.T) {
	// From example Create or update a specific Rules Engine Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesEnginesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"frontDoor1",
		"rulesEngine1",
		RulesEngine{
			Properties: &RulesEngineProperties{
				RulesEngineUpdateParameters: RulesEngineUpdateParameters{
					Rules: []*RulesEngineRule{
						{
							Name: to.StringPtr("Rule1"),
							Action: &RulesEngineAction{
								RouteConfigurationOverride: &RedirectConfiguration{
									RouteConfiguration: RouteConfiguration{
										ODataType: to.StringPtr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
									},
									CustomFragment:    to.StringPtr("fragment"),
									CustomHost:        to.StringPtr("www.bing.com"),
									CustomPath:        to.StringPtr("/api"),
									CustomQueryString: to.StringPtr("a=b"),
									RedirectProtocol:  FrontDoorRedirectProtocolHTTPSOnly.ToPtr(),
									RedirectType:      FrontDoorRedirectTypeMoved.ToPtr(),
								},
							},
							MatchConditions: []*RulesEngineMatchCondition{
								{
									RulesEngineMatchValue: []*string{
										to.StringPtr("CH")},
									RulesEngineMatchVariable: RulesEngineMatchVariableRemoteAddr.ToPtr(),
									RulesEngineOperator:      RulesEngineOperatorGeoMatch.ToPtr(),
								}},
							MatchProcessingBehavior: MatchProcessingBehaviorStop.ToPtr(),
							Priority:                to.Int32Ptr(1),
						},
						{
							Name: to.StringPtr("Rule2"),
							Action: &RulesEngineAction{
								ResponseHeaderActions: []*HeaderAction{
									{
										HeaderActionType: HeaderActionTypeOverwrite.ToPtr(),
										HeaderName:       to.StringPtr("Cache-Control"),
										Value:            to.StringPtr("public, max-age=31536000"),
									}},
							},
							MatchConditions: []*RulesEngineMatchCondition{
								{
									RulesEngineMatchValue: []*string{
										to.StringPtr("jpg")},
									RulesEngineMatchVariable: RulesEngineMatchVariableRequestFilenameExtension.ToPtr(),
									RulesEngineOperator:      RulesEngineOperatorEqual.ToPtr(),
									Transforms: []*Transform{
										TransformLowercase.ToPtr()},
								}},
							Priority: to.Int32Ptr(2),
						},
						{
							Name: to.StringPtr("Rule3"),
							Action: &RulesEngineAction{
								RouteConfigurationOverride: &ForwardingConfiguration{
									RouteConfiguration: RouteConfiguration{
										ODataType: to.StringPtr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
									},
									BackendPool: &SubResource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
									},
									CacheConfiguration: &CacheConfiguration{
										CacheDuration:                to.StringPtr("P1DT12H20M30S"),
										DynamicCompression:           DynamicCompressionEnabledDisabled.ToPtr(),
										QueryParameterStripDirective: FrontDoorQueryStripOnly.ToPtr(),
										QueryParameters:              to.StringPtr("a=b,p=q"),
									},
									CustomForwardingPath: to.StringPtr("null"),
									ForwardingProtocol:   FrontDoorForwardingProtocolHTTPSOnly.ToPtr(),
								},
							},
							MatchConditions: []*RulesEngineMatchCondition{
								{
									NegateCondition: to.BoolPtr(false),
									RulesEngineMatchValue: []*string{
										to.StringPtr("allowoverride")},
									RulesEngineMatchVariable: RulesEngineMatchVariableRequestHeader.ToPtr(),
									RulesEngineOperator:      RulesEngineOperatorEqual.ToPtr(),
									Selector:                 to.StringPtr("Rules-Engine-Route-Forward"),
									Transforms: []*Transform{
										TransformLowercase.ToPtr()},
								}},
							Priority: to.Int32Ptr(3),
						}},
				},
			},
		},
		&RulesEnginesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RulesEngine.ID == nil {
		t.Fatal("RulesEngine.ID should not be nil!")
	}
}

func TestRulesEngines_Delete(t *testing.T) {
	// From example Delete Rules Engine Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesEnginesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"frontDoor1",
		"rulesEngine1",
		&RulesEnginesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicies_List(t *testing.T) {
	// From example List Policies in a Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"subid")
	pager := client.List("rg1",
		&PoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WebApplicationFirewallPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
			}
		}
	}
}

func TestPolicies_Get(t *testing.T) {
	// From example Get Policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"Policy1",
		&PoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WebApplicationFirewallPolicy.ID == nil {
		t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
	}
}

func TestPolicies_CreateOrUpdate(t *testing.T) {
	// From example Creates specific policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"Policy1",
		WebApplicationFirewallPolicy{
			Properties: &WebApplicationFirewallPolicyProperties{
				CustomRules: &CustomRuleList{
					Rules: []*CustomRule{
						{
							Name:   to.StringPtr("Rule1"),
							Action: ActionTypeBlock.ToPtr(),
							MatchConditions: []*MatchCondition{
								{
									MatchValue: []*string{
										to.StringPtr("192.168.1.0/24"),
										to.StringPtr("10.0.0.0/24")},
									MatchVariable: MatchVariableRemoteAddr.ToPtr(),
									Operator:      OperatorIPMatch.ToPtr(),
								}},
							Priority:           to.Int32Ptr(1),
							RateLimitThreshold: to.Int32Ptr(1000),
							RuleType:           RuleTypeRateLimitRule.ToPtr(),
						},
						{
							Name:   to.StringPtr("Rule2"),
							Action: ActionTypeBlock.ToPtr(),
							MatchConditions: []*MatchCondition{
								{
									MatchValue: []*string{
										to.StringPtr("CH")},
									MatchVariable: MatchVariableRemoteAddr.ToPtr(),
									Operator:      OperatorGeoMatch.ToPtr(),
								},
								{
									MatchValue: []*string{
										to.StringPtr("windows")},
									MatchVariable: MatchVariableRequestHeader.ToPtr(),
									Operator:      OperatorContains.ToPtr(),
									Selector:      to.StringPtr("UserAgent"),
									Transforms: []*TransformType{
										TransformTypeLowercase.ToPtr()},
								}},
							Priority: to.Int32Ptr(2),
							RuleType: RuleTypeMatchRule.ToPtr(),
						}},
				},
				ManagedRules: &ManagedRuleSetList{
					ManagedRuleSets: []*ManagedRuleSet{
						{
							Exclusions: []*ManagedRuleExclusion{
								{
									MatchVariable:         ManagedRuleExclusionMatchVariableRequestHeaderNames.ToPtr(),
									Selector:              to.StringPtr("User-Agent"),
									SelectorMatchOperator: ManagedRuleExclusionSelectorMatchOperatorEquals.ToPtr(),
								}},
							RuleGroupOverrides: []*ManagedRuleGroupOverride{
								{
									Exclusions: []*ManagedRuleExclusion{
										{
											MatchVariable:         ManagedRuleExclusionMatchVariableRequestCookieNames.ToPtr(),
											Selector:              to.StringPtr("token"),
											SelectorMatchOperator: ManagedRuleExclusionSelectorMatchOperatorStartsWith.ToPtr(),
										}},
									RuleGroupName: to.StringPtr("SQLI"),
									Rules: []*ManagedRuleOverride{
										{
											Action:       ActionTypeRedirect.ToPtr(),
											EnabledState: ManagedRuleEnabledStateEnabled.ToPtr(),
											Exclusions: []*ManagedRuleExclusion{
												{
													MatchVariable:         ManagedRuleExclusionMatchVariableQueryStringArgNames.ToPtr(),
													Selector:              to.StringPtr("query"),
													SelectorMatchOperator: ManagedRuleExclusionSelectorMatchOperatorEquals.ToPtr(),
												}},
											RuleID: to.StringPtr("942100"),
										},
										{
											EnabledState: ManagedRuleEnabledStateDisabled.ToPtr(),
											RuleID:       to.StringPtr("942110"),
										}},
								}},
							RuleSetAction:  ManagedRuleSetActionTypeBlock.ToPtr(),
							RuleSetType:    to.StringPtr("DefaultRuleSet"),
							RuleSetVersion: to.StringPtr("1.0"),
						}},
				},
				PolicySettings: &PolicySettings{
					CustomBlockResponseBody:       to.StringPtr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					CustomBlockResponseStatusCode: to.Int32Ptr(499),
					EnabledState:                  PolicyEnabledStateEnabled.ToPtr(),
					Mode:                          PolicyModePrevention.ToPtr(),
					RedirectURL:                   to.StringPtr("http://www.bing.com"),
					RequestBodyCheck:              PolicyRequestBodyCheckDisabled.ToPtr(),
				},
			},
			SKU: &SKU{
				Name: SKUNameClassicAzureFrontDoor.ToPtr(),
			},
		},
		&PoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WebApplicationFirewallPolicy.ID == nil {
		t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
	}
}

func TestPolicies_Delete(t *testing.T) {
	// From example Delete protection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"Policy1",
		&PoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedRuleSets_List(t *testing.T) {
	// From example List Policies in a Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedRuleSetsClient(con,
		"subid")
	pager := client.List(&ManagedRuleSetsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedRuleSetDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedRuleSetDefinition.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
