//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfrontdoor_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/frontdoor/armfrontdoor"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestNetworkExperimentProfiles_List(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List NetworkExperiment Profiles in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNetworkExperimentProfilesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListProfiles.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.ProfileList{
			Value: []*armfrontdoor.Profile{
				{
					Name:     to.Ptr("MyProfile"),
					Type:     to.Ptr("Microsoft.Network/NetworkExperimentprofiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armfrontdoor.ProfileProperties{
						EnabledState:  to.Ptr(armfrontdoor.StateEnabled),
						ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileList)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListProfiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkExperimentProfiles_ListByResourceGroup(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List NetworkExperiment Profiles in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNetworkExperimentProfilesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("MyResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListProfiles.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.ProfileList{
			Value: []*armfrontdoor.Profile{
				{
					Name:     to.Ptr("MyProfile"),
					Type:     to.Ptr("Microsoft.Network/NetworkExperimentprofiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armfrontdoor.ProfileProperties{
						EnabledState:  to.Ptr(armfrontdoor.StateEnabled),
						ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileList)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListProfiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkExperimentProfiles_Get(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets an NetworkExperiment Profile by Profile Id"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNetworkExperimentProfilesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyProfile",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Profile{
			Name:     to.Ptr("MyProfile"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.ProfileProperties{
				EnabledState:  to.Ptr(armfrontdoor.StateEnabled),
				ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkExperimentProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates an NetworkExperiment Profile in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNetworkExperimentProfilesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyProfile",
		"MyResourceGroup",
		armfrontdoor.Profile{
			Location: to.Ptr("WestUs"),
			Properties: &armfrontdoor.ProfileProperties{
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
			},
		},
		&armfrontdoor.NetworkExperimentProfilesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateProfile.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Profile{
			Name:     to.Ptr("MyProfile"),
			Type:     to.Ptr("Microsoft.Network/NetworkExperimentprofiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.ProfileProperties{
				EnabledState:  to.Ptr(armfrontdoor.StateEnabled),
				ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkExperimentProfiles_Update(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates an Experiment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNetworkExperimentProfilesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"MyResourceGroup",
		"MyProfile",
		armfrontdoor.ProfileUpdateModel{
			Properties: &armfrontdoor.ProfileUpdateProperties{
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		&armfrontdoor.NetworkExperimentProfilesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateProfile.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Profile{
			Name:     to.Ptr("MyProfile"),
			Type:     to.Ptr("Microsoft.Network/NetworkExperimentprofiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.ProfileProperties{
				EnabledState:  to.Ptr(armfrontdoor.StateEnabled),
				ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkExperimentProfiles_Delete(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentDeleteProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes an NetworkExperiment Profile by ProfileName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNetworkExperimentProfilesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyProfile",
		&armfrontdoor.NetworkExperimentProfilesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentDeleteProfile.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentDeleteProfile.json: %v", err)
	}
}

func TestPreconfiguredEndpoints_List(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetPreconfiguredEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of Preconfigured Endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewPreconfiguredEndpointsClient("subid", cred, &options)
	pager := client.List("MyResourceGroup",
		"MyProfile",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetPreconfiguredEndpoints.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.PreconfiguredEndpointList{
			Value: []*armfrontdoor.PreconfiguredEndpoint{
				{
					Name: to.Ptr("Endpoint 1"),
					Properties: &armfrontdoor.PreconfiguredEndpointProperties{
						Description:  to.Ptr("this is the endpoint 1 preconfigured endpoint."),
						Backend:      to.Ptr("WESTUS"),
						Endpoint:     to.Ptr("endpoint1.net"),
						EndpointType: to.Ptr(armfrontdoor.EndpointTypeAFD),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PreconfiguredEndpointList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PreconfiguredEndpointList)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetPreconfiguredEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_ListByProfile(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListExperiments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of Experiments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewExperimentsClient("subid", cred, &options)
	pager := client.ListByProfile("MyResourceGroup",
		"MyProfile",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListExperiments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.ExperimentList{
			Value: []*armfrontdoor.Experiment{
				{
					Name: to.Ptr("MyExperiment"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments"),
					Properties: &armfrontdoor.ExperimentProperties{
						Description:  to.Ptr("this is my first experiment!"),
						EnabledState: to.Ptr(armfrontdoor.StateEnabled),
						EndpointA: &armfrontdoor.Endpoint{
							Name:     to.Ptr("endpoint A"),
							Endpoint: to.Ptr("endpointA.net"),
						},
						EndpointB: &armfrontdoor.Endpoint{
							Name:     to.Ptr("endpoint B"),
							Endpoint: to.Ptr("endpointB.net"),
						},
						ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
						ScriptFileURI: to.Ptr("www.myScript.com"),
						Status:        to.Ptr("ongoing"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExperimentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExperimentList)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentListExperiments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_Get(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets an Experiment by ExperimentName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewExperimentsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetExperiment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Experiment{
			Name:     to.Ptr("MyExperiment"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.ExperimentProperties{
				Description:  to.Ptr("this is my first experiment!"),
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
				EndpointA: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint A"),
					Endpoint: to.Ptr("endpointA.net"),
				},
				EndpointB: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint B"),
					Endpoint: to.Ptr("endpointB.net"),
				},
				ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
				ScriptFileURI: to.Ptr("www.myScript.com"),
				Status:        to.Ptr("ongoing"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Experiment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Experiment)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetExperiment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_CreateOrUpdate(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates an Experiment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewExperimentsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		armfrontdoor.Experiment{
			Properties: &armfrontdoor.ExperimentProperties{
				Description:  to.Ptr("this is my first experiment!"),
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
				EndpointA: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint A"),
					Endpoint: to.Ptr("endpointA.net"),
				},
				EndpointB: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint B"),
					Endpoint: to.Ptr("endpointB.net"),
				},
			},
		},
		&armfrontdoor.ExperimentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateExperiment.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateExperiment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Experiment{
			Name:     to.Ptr("MyExperiment"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.ExperimentProperties{
				Description:  to.Ptr("this is my first experiment!"),
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
				EndpointA: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint A"),
					Endpoint: to.Ptr("endpointA.net"),
				},
				EndpointB: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint B"),
					Endpoint: to.Ptr("endpointB.net"),
				},
				ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
				ScriptFileURI: to.Ptr("www.myScript.com"),
				Status:        to.Ptr("ongoing"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Experiment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Experiment)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateExperiment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_Update(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates an Experiment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewExperimentsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		armfrontdoor.ExperimentUpdateModel{
			Properties: &armfrontdoor.ExperimentUpdateProperties{
				Description:  to.Ptr("string"),
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
			},
		},
		&armfrontdoor.ExperimentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateExperiment.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateExperiment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Experiment{
			Name:     to.Ptr("MyExperiment"),
			Type:     to.Ptr("Microsoft.Network/NetworkExperimentprofiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.ExperimentProperties{
				Description:  to.Ptr("this is my first experiment!"),
				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
				EndpointA: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint A"),
					Endpoint: to.Ptr("endpointA.net"),
				},
				EndpointB: &armfrontdoor.Endpoint{
					Name:     to.Ptr("endpoint B"),
					Endpoint: to.Ptr("endpointB.net"),
				},
				ResourceState: to.Ptr(armfrontdoor.NetworkExperimentResourceStateCreating),
				ScriptFileURI: to.Ptr("www.myScript.com"),
				Status:        to.Ptr("ongoing"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Experiment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Experiment)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentUpdateExperiment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_Delete(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentDeleteExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes an Experiment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewExperimentsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		&armfrontdoor.ExperimentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentDeleteExperiment.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentDeleteExperiment.json: %v", err)
	}
}

func TestReports_GetLatencyScorecards(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetLatencyScorecard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Latency Scorecard for a given Experiment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewReportsClient("subid", cred, &options)
	res, err := client.GetLatencyScorecards(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		armfrontdoor.LatencyScorecardAggregationIntervalDaily,
		&armfrontdoor.ReportsClientGetLatencyScorecardsOptions{EndDateTimeUTC: nil,
			Country: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetLatencyScorecard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.LatencyScorecard{
			Name: to.Ptr("DailyLatencyScorecard"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment/LatencyScorecard"),
			Properties: &armfrontdoor.LatencyScorecardProperties{
				Description:      to.Ptr("This scorecard is the latency scorecard, aggregated over a day"),
				Country:          to.Ptr("USA"),
				EndDateTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-21T17:32:28Z"); return t }()),
				EndpointA:        to.Ptr("https://endpointA.com"),
				EndpointB:        to.Ptr("https://endpoingB.com"),
				StartDateTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-21T17:32:28Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LatencyScorecard) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LatencyScorecard)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetLatencyScorecard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_GetTimeseries(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetTimeseries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Timeseries for a given Experiment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewReportsClient("subid", cred, &options)
	res, err := client.GetTimeseries(ctx,
		"MyResourceGroup",
		"MyProfile",
		"MyExperiment",
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-21T17:32:28Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-21T17:32:28Z"); return t }(),
		armfrontdoor.TimeseriesAggregationIntervalHourly,
		armfrontdoor.TimeseriesTypeMeasurementCounts,
		&armfrontdoor.ReportsClientGetTimeseriesOptions{Endpoint: nil,
			Country: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetTimeseries.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.Timeseries{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment/Timeseries"),
			Properties: &armfrontdoor.TimeseriesProperties{
				AggregationInterval: to.Ptr(armfrontdoor.AggregationIntervalHourly),
				Country:             to.Ptr("United States"),
				EndDateTimeUTC:      to.Ptr("2019-08-02"),
				Endpoint:            to.Ptr("https://endpointA.com"),
				StartDateTimeUTC:    to.Ptr("2019-07-29"),
				TimeseriesData: []*armfrontdoor.TimeseriesDataPoint{
					{
						DateTimeUTC: to.Ptr("2019-07-22T17:32:28Z"),
						Value:       to.Ptr[float32](79),
					}},
				TimeseriesType: to.Ptr(armfrontdoor.TimeseriesTypeMeasurementCounts),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Timeseries) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Timeseries)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentGetTimeseries.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoorNameAvailability_Check(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/CheckFrontdoorNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNameAvailabilityClient(cred, &options)
	res, err := client.Check(ctx,
		armfrontdoor.CheckNameAvailabilityInput{
			Name: to.Ptr("sampleName"),
			Type: to.Ptr(armfrontdoor.ResourceTypeMicrosoftNetworkFrontDoors),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/CheckFrontdoorNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.CheckNameAvailabilityOutput{
			Message:          to.Ptr("Name not available"),
			NameAvailability: to.Ptr(armfrontdoor.AvailabilityUnavailable),
			Reason:           to.Ptr("Name is already in use"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/CheckFrontdoorNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoorNameAvailabilityWithSubscription_Check(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/CheckFrontdoorNameAvailabilityWithSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailabilityWithSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewNameAvailabilityWithSubscriptionClient("subid", cred, &options)
	res, err := client.Check(ctx,
		armfrontdoor.CheckNameAvailabilityInput{
			Name: to.Ptr("sampleName"),
			Type: to.Ptr(armfrontdoor.ResourceTypeMicrosoftNetworkFrontDoorsFrontendEndpoints),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/CheckFrontdoorNameAvailabilityWithSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.CheckNameAvailabilityOutput{
			Message:          to.Ptr("Name not available"),
			NameAvailability: to.Ptr(armfrontdoor.AvailabilityUnavailable),
			Reason:           to.Ptr("Name is already in use"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/CheckFrontdoorNameAvailabilityWithSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoors_List(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Front Doors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontDoorsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.ListResult{
			Value: []*armfrontdoor.FrontDoor{
				{
					Name:     to.Ptr("frontDoor1"),
					Type:     to.Ptr("Microsoft.Network/frontDoor"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armfrontdoor.Properties{
						BackendPools: []*armfrontdoor.BackendPool{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								Name: to.Ptr("backendPool1"),
								Properties: &armfrontdoor.BackendPoolProperties{
									Backends: []*armfrontdoor.Backend{
										{
											Address:      to.Ptr("w3.contoso.com"),
											EnabledState: to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
											HTTPPort:     to.Ptr[int32](80),
											HTTPSPort:    to.Ptr[int32](443),
											Priority:     to.Ptr[int32](2),
											Weight:       to.Ptr[int32](1),
										},
										{
											Address:                    to.Ptr("contoso.com.website-us-west-2.othercloud.net"),
											EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
											HTTPPort:                   to.Ptr[int32](80),
											HTTPSPort:                  to.Ptr[int32](443),
											Priority:                   to.Ptr[int32](1),
											PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
											PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
											PrivateLinkLocation:        to.Ptr("eastus"),
											PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
											Weight:                     to.Ptr[int32](2),
										},
										{
											Address:                    to.Ptr("10.0.1.5"),
											EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
											HTTPPort:                   to.Ptr[int32](80),
											HTTPSPort:                  to.Ptr[int32](443),
											Priority:                   to.Ptr[int32](1),
											PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
											PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
											PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
											Weight:                     to.Ptr[int32](1),
										}},
									HealthProbeSettings: &armfrontdoor.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1"),
									},
									LoadBalancingSettings: &armfrontdoor.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1"),
									},
								},
							}},
						BackendPoolsSettings: &armfrontdoor.BackendPoolsSettings{
							EnforceCertificateNameCheck: to.Ptr(armfrontdoor.EnforceCertificateNameCheckEnabledStateEnabled),
						},
						EnabledState: to.Ptr(armfrontdoor.FrontDoorEnabledStateEnabled),
						FrontendEndpoints: []*armfrontdoor.FrontendEndpoint{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
								Name: to.Ptr("frontendEndpoint1"),
								Properties: &armfrontdoor.FrontendEndpointProperties{
									HostName:                    to.Ptr("www.contoso.com"),
									SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
									SessionAffinityTTLSeconds:   to.Ptr[int32](60),
									WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
									},
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
								Name: to.Ptr("default"),
								Properties: &armfrontdoor.FrontendEndpointProperties{
									HostName: to.Ptr("frontDoor1.azurefd.net"),
								},
							}},
						HealthProbeSettings: []*armfrontdoor.HealthProbeSettingsModel{
							{
								Name: to.Ptr("healthProbeSettings1"),
								Properties: &armfrontdoor.HealthProbeSettingsProperties{
									Path:              to.Ptr("/"),
									EnabledState:      to.Ptr(armfrontdoor.HealthProbeEnabledEnabled),
									HealthProbeMethod: to.Ptr(armfrontdoor.FrontDoorHealthProbeMethodHEAD),
									IntervalInSeconds: to.Ptr[int32](120),
									Protocol:          to.Ptr(armfrontdoor.FrontDoorProtocolHTTP),
								},
							}},
						LoadBalancingSettings: []*armfrontdoor.LoadBalancingSettingsModel{
							{
								Name: to.Ptr("loadBalancingSettings1"),
								Properties: &armfrontdoor.LoadBalancingSettingsProperties{
									SampleSize:                to.Ptr[int32](4),
									SuccessfulSamplesRequired: to.Ptr[int32](2),
								},
							}},
						RoutingRules: []*armfrontdoor.RoutingRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/routingRules/routingRule1"),
								Name: to.Ptr("routingRule1"),
								Properties: &armfrontdoor.RoutingRuleProperties{
									AcceptedProtocols: []*armfrontdoor.FrontDoorProtocol{
										to.Ptr(armfrontdoor.FrontDoorProtocolHTTP)},
									EnabledState: to.Ptr(armfrontdoor.RoutingRuleEnabledStateEnabled),
									FrontendEndpoints: []*armfrontdoor.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
										}},
									PatternsToMatch: []*string{
										to.Ptr("/*")},
									RouteConfiguration: &armfrontdoor.ForwardingConfiguration{
										ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
										BackendPool: &armfrontdoor.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
										},
										CustomForwardingPath: to.Ptr(""),
										ForwardingProtocol:   to.Ptr(armfrontdoor.FrontDoorForwardingProtocolMatchRequest),
									},
									RulesEngine: &armfrontdoor.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
									},
									WebApplicationFirewallPolicyLink: &armfrontdoor.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
									},
								},
							}},
						Cname:             to.Ptr("frontDoor1.azurefd.net"),
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armfrontdoor.FrontDoorResourceStateEnabled),
						RulesEngines: []*armfrontdoor.RulesEngine{
							{
								Name: to.Ptr("rulesEngine1"),
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/routingRules/rulesEngine1"),
								Properties: &armfrontdoor.RulesEngineProperties{
									Rules: []*armfrontdoor.RulesEngineRule{
										{
											Name: to.Ptr("Rule1"),
											Action: &armfrontdoor.RulesEngineAction{
												RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
													ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
													CustomFragment:    to.Ptr("fragment"),
													CustomHost:        to.Ptr("www.bing.com"),
													CustomPath:        to.Ptr("/api"),
													CustomQueryString: to.Ptr("a=b"),
													RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
													RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
												},
											},
											MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
												{
													RulesEngineMatchValue: []*string{
														to.Ptr("CH")},
													RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
													RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
												}},
											MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
											Priority:                to.Ptr[int32](1),
										},
										{
											Name: to.Ptr("Rule2"),
											Action: &armfrontdoor.RulesEngineAction{
												ResponseHeaderActions: []*armfrontdoor.HeaderAction{
													{
														HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
														HeaderName:       to.Ptr("Cache-Control"),
														Value:            to.Ptr("public, max-age=31536000"),
													}},
											},
											MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
												{
													RulesEngineMatchValue: []*string{
														to.Ptr("jpg")},
													RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariable("FilenameExtension")),
													RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
													Transforms: []*armfrontdoor.Transform{
														to.Ptr(armfrontdoor.TransformLowercase)},
												}},
											Priority: to.Ptr[int32](2),
										}},
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoors_ListByResourceGroup(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Front Doors in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontDoorsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.ListResult{
			Value: []*armfrontdoor.FrontDoor{
				{
					Name:     to.Ptr("frontDoor1"),
					Type:     to.Ptr("Microsoft.Network/frontDoor"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armfrontdoor.Properties{
						BackendPools: []*armfrontdoor.BackendPool{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								Name: to.Ptr("backendPool1"),
								Properties: &armfrontdoor.BackendPoolProperties{
									Backends: []*armfrontdoor.Backend{
										{
											Address:      to.Ptr("w3.contoso.com"),
											EnabledState: to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
											HTTPPort:     to.Ptr[int32](80),
											HTTPSPort:    to.Ptr[int32](443),
											Priority:     to.Ptr[int32](2),
											Weight:       to.Ptr[int32](1),
										},
										{
											Address:                    to.Ptr("contoso.com.website-us-west-2.othercloud.net"),
											EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
											HTTPPort:                   to.Ptr[int32](80),
											HTTPSPort:                  to.Ptr[int32](443),
											Priority:                   to.Ptr[int32](1),
											PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
											PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
											PrivateLinkLocation:        to.Ptr("eastus"),
											PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
											Weight:                     to.Ptr[int32](2),
										},
										{
											Address:                    to.Ptr("10.0.1.5"),
											EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
											HTTPPort:                   to.Ptr[int32](80),
											HTTPSPort:                  to.Ptr[int32](443),
											Priority:                   to.Ptr[int32](1),
											PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
											PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
											PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
											Weight:                     to.Ptr[int32](1),
										}},
									HealthProbeSettings: &armfrontdoor.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1"),
									},
									LoadBalancingSettings: &armfrontdoor.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1"),
									},
								},
							}},
						BackendPoolsSettings: &armfrontdoor.BackendPoolsSettings{
							EnforceCertificateNameCheck: to.Ptr(armfrontdoor.EnforceCertificateNameCheckEnabledStateEnabled),
							SendRecvTimeoutSeconds:      to.Ptr[int32](60),
						},
						EnabledState: to.Ptr(armfrontdoor.FrontDoorEnabledStateEnabled),
						FrontendEndpoints: []*armfrontdoor.FrontendEndpoint{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
								Name: to.Ptr("frontendEndpoint1"),
								Properties: &armfrontdoor.FrontendEndpointProperties{
									HostName:                    to.Ptr("www.contoso.com"),
									SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
									SessionAffinityTTLSeconds:   to.Ptr[int32](60),
									WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
									},
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
								Name: to.Ptr("default"),
								Properties: &armfrontdoor.FrontendEndpointProperties{
									HostName: to.Ptr("frontDoor1.azurefd.net"),
								},
							}},
						HealthProbeSettings: []*armfrontdoor.HealthProbeSettingsModel{
							{
								Name: to.Ptr("healthProbeSettings1"),
								Properties: &armfrontdoor.HealthProbeSettingsProperties{
									Path:              to.Ptr("/"),
									EnabledState:      to.Ptr(armfrontdoor.HealthProbeEnabledEnabled),
									HealthProbeMethod: to.Ptr(armfrontdoor.FrontDoorHealthProbeMethodHEAD),
									IntervalInSeconds: to.Ptr[int32](120),
									Protocol:          to.Ptr(armfrontdoor.FrontDoorProtocolHTTP),
								},
							}},
						LoadBalancingSettings: []*armfrontdoor.LoadBalancingSettingsModel{
							{
								Name: to.Ptr("loadBalancingSettings1"),
								Properties: &armfrontdoor.LoadBalancingSettingsProperties{
									SampleSize:                to.Ptr[int32](4),
									SuccessfulSamplesRequired: to.Ptr[int32](2),
								},
							}},
						RoutingRules: []*armfrontdoor.RoutingRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/routingRules/routingRule1"),
								Name: to.Ptr("routingRule1"),
								Properties: &armfrontdoor.RoutingRuleProperties{
									AcceptedProtocols: []*armfrontdoor.FrontDoorProtocol{
										to.Ptr(armfrontdoor.FrontDoorProtocolHTTP)},
									EnabledState: to.Ptr(armfrontdoor.RoutingRuleEnabledStateEnabled),
									FrontendEndpoints: []*armfrontdoor.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
										}},
									PatternsToMatch: []*string{
										to.Ptr("/*")},
									RouteConfiguration: &armfrontdoor.ForwardingConfiguration{
										ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
										BackendPool: &armfrontdoor.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
										},
										CustomForwardingPath: to.Ptr(""),
										ForwardingProtocol:   to.Ptr(armfrontdoor.FrontDoorForwardingProtocolMatchRequest),
									},
									RulesEngine: &armfrontdoor.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
									},
									WebApplicationFirewallPolicyLink: &armfrontdoor.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
									},
								},
							}},
						Cname:             to.Ptr("frontDoor1.azurefd.net"),
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armfrontdoor.FrontDoorResourceStateEnabled),
						RulesEngines: []*armfrontdoor.RulesEngine{
							{
								Name: to.Ptr("rulesEngine1"),
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/routingRules/rulesEngine1"),
								Properties: &armfrontdoor.RulesEngineProperties{
									Rules: []*armfrontdoor.RulesEngineRule{
										{
											Name: to.Ptr("Rule1"),
											Action: &armfrontdoor.RulesEngineAction{
												RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
													ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
													CustomFragment:    to.Ptr("fragment"),
													CustomHost:        to.Ptr("www.bing.com"),
													CustomPath:        to.Ptr("/api"),
													CustomQueryString: to.Ptr("a=b"),
													RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
													RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
												},
											},
											MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
												{
													RulesEngineMatchValue: []*string{
														to.Ptr("CH")},
													RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
													RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
												}},
											MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
											Priority:                to.Ptr[int32](1),
										},
										{
											Name: to.Ptr("Rule2"),
											Action: &armfrontdoor.RulesEngineAction{
												ResponseHeaderActions: []*armfrontdoor.HeaderAction{
													{
														HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
														HeaderName:       to.Ptr("Cache-Control"),
														Value:            to.Ptr("public, max-age=31536000"),
													}},
											},
											MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
												{
													RulesEngineMatchValue: []*string{
														to.Ptr("jpg")},
													RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariable("FilenameExtension")),
													RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
													Transforms: []*armfrontdoor.Transform{
														to.Ptr(armfrontdoor.TransformLowercase)},
												}},
											Priority: to.Ptr[int32](2),
										}},
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoors_Get(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Front Door"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontDoorsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"frontDoor1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.FrontDoor{
			Name:     to.Ptr("frontDoor1"),
			Type:     to.Ptr("Microsoft.Network/frontDoor"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.Properties{
				BackendPools: []*armfrontdoor.BackendPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
						Name: to.Ptr("backendPool1"),
						Properties: &armfrontdoor.BackendPoolProperties{
							Backends: []*armfrontdoor.Backend{
								{
									Address:      to.Ptr("w3.contoso.com"),
									EnabledState: to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
									HTTPPort:     to.Ptr[int32](80),
									HTTPSPort:    to.Ptr[int32](443),
									Priority:     to.Ptr[int32](2),
									Weight:       to.Ptr[int32](1),
								},
								{
									Address:                    to.Ptr("contoso.com.website-us-west-2.othercloud.net"),
									EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
									HTTPPort:                   to.Ptr[int32](80),
									HTTPSPort:                  to.Ptr[int32](443),
									Priority:                   to.Ptr[int32](1),
									PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
									PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
									PrivateLinkLocation:        to.Ptr("eastus"),
									PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
									Weight:                     to.Ptr[int32](2),
								},
								{
									Address:                    to.Ptr("10.0.1.5"),
									EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
									HTTPPort:                   to.Ptr[int32](80),
									HTTPSPort:                  to.Ptr[int32](443),
									Priority:                   to.Ptr[int32](1),
									PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
									PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
									PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
									Weight:                     to.Ptr[int32](1),
								}},
							HealthProbeSettings: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1"),
							},
							LoadBalancingSettings: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1"),
							},
						},
					}},
				BackendPoolsSettings: &armfrontdoor.BackendPoolsSettings{
					EnforceCertificateNameCheck: to.Ptr(armfrontdoor.EnforceCertificateNameCheckEnabledStateEnabled),
					SendRecvTimeoutSeconds:      to.Ptr[int32](60),
				},
				EnabledState: to.Ptr(armfrontdoor.FrontDoorEnabledStateEnabled),
				FrontendEndpoints: []*armfrontdoor.FrontendEndpoint{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
						Name: to.Ptr("frontendEndpoint1"),
						Properties: &armfrontdoor.FrontendEndpointProperties{
							HostName:                    to.Ptr("www.contoso.com"),
							SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
							SessionAffinityTTLSeconds:   to.Ptr[int32](60),
							WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
							},
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
						Name: to.Ptr("default"),
						Properties: &armfrontdoor.FrontendEndpointProperties{
							HostName: to.Ptr("frontDoor1.azurefd.net"),
						},
					}},
				HealthProbeSettings: []*armfrontdoor.HealthProbeSettingsModel{
					{
						Name: to.Ptr("healthProbeSettings1"),
						Properties: &armfrontdoor.HealthProbeSettingsProperties{
							Path:              to.Ptr("/"),
							EnabledState:      to.Ptr(armfrontdoor.HealthProbeEnabledEnabled),
							HealthProbeMethod: to.Ptr(armfrontdoor.FrontDoorHealthProbeMethodHEAD),
							IntervalInSeconds: to.Ptr[int32](120),
							Protocol:          to.Ptr(armfrontdoor.FrontDoorProtocolHTTP),
						},
					}},
				LoadBalancingSettings: []*armfrontdoor.LoadBalancingSettingsModel{
					{
						Name: to.Ptr("loadBalancingSettings1"),
						Properties: &armfrontdoor.LoadBalancingSettingsProperties{
							SampleSize:                to.Ptr[int32](4),
							SuccessfulSamplesRequired: to.Ptr[int32](2),
						},
					}},
				RoutingRules: []*armfrontdoor.RoutingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/routingRules/routingRule1"),
						Name: to.Ptr("routingRule1"),
						Properties: &armfrontdoor.RoutingRuleProperties{
							AcceptedProtocols: []*armfrontdoor.FrontDoorProtocol{
								to.Ptr(armfrontdoor.FrontDoorProtocolHTTP)},
							EnabledState: to.Ptr(armfrontdoor.RoutingRuleEnabledStateEnabled),
							FrontendEndpoints: []*armfrontdoor.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
							RouteConfiguration: &armfrontdoor.ForwardingConfiguration{
								ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
								BackendPool: &armfrontdoor.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								},
								CustomForwardingPath: to.Ptr(""),
								ForwardingProtocol:   to.Ptr(armfrontdoor.FrontDoorForwardingProtocolMatchRequest),
							},
							RulesEngine: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
							},
							WebApplicationFirewallPolicyLink: &armfrontdoor.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
							},
						},
					}},
				Cname:             to.Ptr("frontDoor1.azurefd.net"),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armfrontdoor.FrontDoorResourceStateEnabled),
				RulesEngines: []*armfrontdoor.RulesEngine{
					{
						Name: to.Ptr("rulesEngine1"),
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
						Properties: &armfrontdoor.RulesEngineProperties{
							Rules: []*armfrontdoor.RulesEngineRule{
								{
									Name: to.Ptr("Rule1"),
									Action: &armfrontdoor.RulesEngineAction{
										RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
											ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
											CustomFragment:    to.Ptr("fragment"),
											CustomHost:        to.Ptr("www.bing.com"),
											CustomPath:        to.Ptr("/api"),
											CustomQueryString: to.Ptr("a=b"),
											RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
											RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
										},
									},
									MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
										{
											RulesEngineMatchValue: []*string{
												to.Ptr("CH")},
											RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
											RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
										}},
									MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
									Priority:                to.Ptr[int32](1),
								},
								{
									Name: to.Ptr("Rule2"),
									Action: &armfrontdoor.RulesEngineAction{
										ResponseHeaderActions: []*armfrontdoor.HeaderAction{
											{
												HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
												HeaderName:       to.Ptr("Cache-Control"),
												Value:            to.Ptr("public, max-age=31536000"),
											}},
									},
									MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
										{
											RulesEngineMatchValue: []*string{
												to.Ptr("jpg")},
											RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariable("FilenameExtension")),
											RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
											Transforms: []*armfrontdoor.Transform{
												to.Ptr(armfrontdoor.TransformLowercase)},
										}},
									Priority: to.Ptr[int32](2),
								}},
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FrontDoor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FrontDoor)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoors_CreateOrUpdate(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update specific Front Door"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontDoorsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"frontDoor1",
		armfrontdoor.FrontDoor{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.Properties{
				BackendPools: []*armfrontdoor.BackendPool{
					{
						Name: to.Ptr("backendPool1"),
						Properties: &armfrontdoor.BackendPoolProperties{
							Backends: []*armfrontdoor.Backend{
								{
									Address:   to.Ptr("w3.contoso.com"),
									HTTPPort:  to.Ptr[int32](80),
									HTTPSPort: to.Ptr[int32](443),
									Priority:  to.Ptr[int32](2),
									Weight:    to.Ptr[int32](1),
								},
								{
									Address:                    to.Ptr("contoso.com.website-us-west-2.othercloud.net"),
									HTTPPort:                   to.Ptr[int32](80),
									HTTPSPort:                  to.Ptr[int32](443),
									Priority:                   to.Ptr[int32](1),
									PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
									PrivateLinkLocation:        to.Ptr("eastus"),
									PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
									Weight:                     to.Ptr[int32](2),
								},
								{
									Address:                    to.Ptr("10.0.1.5"),
									HTTPPort:                   to.Ptr[int32](80),
									HTTPSPort:                  to.Ptr[int32](443),
									Priority:                   to.Ptr[int32](1),
									PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
									PrivateLinkApprovalMessage: to.Ptr("Please approve this request to connect to the Private Link"),
									Weight:                     to.Ptr[int32](1),
								}},
							HealthProbeSettings: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1"),
							},
							LoadBalancingSettings: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1"),
							},
						},
					}},
				BackendPoolsSettings: &armfrontdoor.BackendPoolsSettings{
					EnforceCertificateNameCheck: to.Ptr(armfrontdoor.EnforceCertificateNameCheckEnabledStateEnabled),
					SendRecvTimeoutSeconds:      to.Ptr[int32](60),
				},
				EnabledState: to.Ptr(armfrontdoor.FrontDoorEnabledStateEnabled),
				FrontendEndpoints: []*armfrontdoor.FrontendEndpoint{
					{
						Name: to.Ptr("frontendEndpoint1"),
						Properties: &armfrontdoor.FrontendEndpointProperties{
							HostName:                    to.Ptr("www.contoso.com"),
							SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
							SessionAffinityTTLSeconds:   to.Ptr[int32](60),
							WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
							},
						},
					},
					{
						Name: to.Ptr("default"),
						Properties: &armfrontdoor.FrontendEndpointProperties{
							HostName: to.Ptr("frontDoor1.azurefd.net"),
						},
					}},
				HealthProbeSettings: []*armfrontdoor.HealthProbeSettingsModel{
					{
						Name: to.Ptr("healthProbeSettings1"),
						Properties: &armfrontdoor.HealthProbeSettingsProperties{
							Path:              to.Ptr("/"),
							EnabledState:      to.Ptr(armfrontdoor.HealthProbeEnabledEnabled),
							HealthProbeMethod: to.Ptr(armfrontdoor.FrontDoorHealthProbeMethodHEAD),
							IntervalInSeconds: to.Ptr[int32](120),
							Protocol:          to.Ptr(armfrontdoor.FrontDoorProtocolHTTP),
						},
					}},
				LoadBalancingSettings: []*armfrontdoor.LoadBalancingSettingsModel{
					{
						Name: to.Ptr("loadBalancingSettings1"),
						Properties: &armfrontdoor.LoadBalancingSettingsProperties{
							SampleSize:                to.Ptr[int32](4),
							SuccessfulSamplesRequired: to.Ptr[int32](2),
						},
					}},
				RoutingRules: []*armfrontdoor.RoutingRule{
					{
						Name: to.Ptr("routingRule1"),
						Properties: &armfrontdoor.RoutingRuleProperties{
							AcceptedProtocols: []*armfrontdoor.FrontDoorProtocol{
								to.Ptr(armfrontdoor.FrontDoorProtocolHTTP)},
							EnabledState: to.Ptr(armfrontdoor.RoutingRuleEnabledStateEnabled),
							FrontendEndpoints: []*armfrontdoor.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
							RouteConfiguration: &armfrontdoor.ForwardingConfiguration{
								ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
								BackendPool: &armfrontdoor.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								},
							},
							RulesEngine: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
							},
							WebApplicationFirewallPolicyLink: &armfrontdoor.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
							},
						},
					}},
			},
		},
		&armfrontdoor.FrontDoorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.FrontDoor{
			Name:     to.Ptr("frontDoor1"),
			Type:     to.Ptr("Microsoft.Network/frontDoor"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.Properties{
				BackendPools: []*armfrontdoor.BackendPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
						Name: to.Ptr("backendPool1"),
						Properties: &armfrontdoor.BackendPoolProperties{
							Backends: []*armfrontdoor.Backend{
								{
									Address:      to.Ptr("w3.contoso.com"),
									EnabledState: to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
									HTTPPort:     to.Ptr[int32](80),
									HTTPSPort:    to.Ptr[int32](443),
									Priority:     to.Ptr[int32](2),
									Weight:       to.Ptr[int32](1),
								},
								{
									Address:                    to.Ptr("contoso.com.website-us-west-2.othercloud.net"),
									EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
									HTTPPort:                   to.Ptr[int32](80),
									HTTPSPort:                  to.Ptr[int32](443),
									Priority:                   to.Ptr[int32](1),
									PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
									PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
									PrivateLinkLocation:        to.Ptr("eastus"),
									PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
									Weight:                     to.Ptr[int32](2),
								},
								{
									Address:                    to.Ptr("10.0.1.5"),
									EnabledState:               to.Ptr(armfrontdoor.BackendEnabledStateEnabled),
									HTTPPort:                   to.Ptr[int32](80),
									HTTPSPort:                  to.Ptr[int32](443),
									Priority:                   to.Ptr[int32](1),
									PrivateEndpointStatus:      to.Ptr(armfrontdoor.PrivateEndpointStatusApproved),
									PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
									PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
									Weight:                     to.Ptr[int32](1),
								}},
							HealthProbeSettings: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1"),
							},
							LoadBalancingSettings: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1"),
							},
						},
					}},
				BackendPoolsSettings: &armfrontdoor.BackendPoolsSettings{
					EnforceCertificateNameCheck: to.Ptr(armfrontdoor.EnforceCertificateNameCheckEnabledStateEnabled),
					SendRecvTimeoutSeconds:      to.Ptr[int32](60),
				},
				EnabledState: to.Ptr(armfrontdoor.FrontDoorEnabledStateEnabled),
				FrontendEndpoints: []*armfrontdoor.FrontendEndpoint{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
						Name: to.Ptr("frontendEndpoint1"),
						Properties: &armfrontdoor.FrontendEndpointProperties{
							HostName:                    to.Ptr("www.contoso.com"),
							SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
							SessionAffinityTTLSeconds:   to.Ptr[int32](60),
							WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
							},
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
						Name: to.Ptr("default"),
						Properties: &armfrontdoor.FrontendEndpointProperties{
							HostName: to.Ptr("frontDoor1.azurefd.net"),
						},
					}},
				HealthProbeSettings: []*armfrontdoor.HealthProbeSettingsModel{
					{
						Name: to.Ptr("healthProbeSettings1"),
						Properties: &armfrontdoor.HealthProbeSettingsProperties{
							Path:              to.Ptr("/"),
							EnabledState:      to.Ptr(armfrontdoor.HealthProbeEnabledEnabled),
							HealthProbeMethod: to.Ptr(armfrontdoor.FrontDoorHealthProbeMethodHEAD),
							IntervalInSeconds: to.Ptr[int32](120),
							Protocol:          to.Ptr(armfrontdoor.FrontDoorProtocolHTTP),
						},
					}},
				LoadBalancingSettings: []*armfrontdoor.LoadBalancingSettingsModel{
					{
						Name: to.Ptr("loadBalancingSettings1"),
						Properties: &armfrontdoor.LoadBalancingSettingsProperties{
							SampleSize:                to.Ptr[int32](4),
							SuccessfulSamplesRequired: to.Ptr[int32](2),
						},
					}},
				RoutingRules: []*armfrontdoor.RoutingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/routingRules/routingRule1"),
						Name: to.Ptr("routingRule1"),
						Properties: &armfrontdoor.RoutingRuleProperties{
							AcceptedProtocols: []*armfrontdoor.FrontDoorProtocol{
								to.Ptr(armfrontdoor.FrontDoorProtocolHTTP)},
							EnabledState: to.Ptr(armfrontdoor.RoutingRuleEnabledStateEnabled),
							FrontendEndpoints: []*armfrontdoor.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
							RouteConfiguration: &armfrontdoor.ForwardingConfiguration{
								ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
								BackendPool: &armfrontdoor.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								},
								CustomForwardingPath: to.Ptr(""),
								ForwardingProtocol:   to.Ptr(armfrontdoor.FrontDoorForwardingProtocolMatchRequest),
							},
							RulesEngine: &armfrontdoor.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
							},
							WebApplicationFirewallPolicyLink: &armfrontdoor.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
							},
						},
					}},
				Cname:             to.Ptr("frontDoor1.azurefd.net"),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armfrontdoor.FrontDoorResourceStateCreating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FrontDoor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FrontDoor)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontDoors_Delete(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Front Door"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontDoorsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"frontDoor1",
		&armfrontdoor.FrontDoorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorDelete.json: %v", err)
	}
}

func TestFrontDoors_ValidateCustomDomain(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorValidateCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FrontDoor_ValidateCustomDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontDoorsClient("subid", cred, &options)
	res, err := client.ValidateCustomDomain(ctx,
		"rg1",
		"frontDoor1",
		armfrontdoor.ValidateCustomDomainInput{
			HostName: to.Ptr("www.someDomain.com"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorValidateCustomDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.ValidateCustomDomainOutput{
			CustomDomainValidated: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateCustomDomainOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateCustomDomainOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorValidateCustomDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontendEndpoints_ListByFrontDoor(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorFrontendEndpointList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Frontend endpoints in a Front Door"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontendEndpointsClient("subid", cred, &options)
	pager := client.ListByFrontDoor("rg1",
		"frontDoor1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorFrontendEndpointList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.FrontendEndpointsListResult{
			Value: []*armfrontdoor.FrontendEndpoint{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
					Name: to.Ptr("frontendEndpoint1"),
					Properties: &armfrontdoor.FrontendEndpointProperties{
						HostName:                    to.Ptr("www.contoso.com"),
						SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
						SessionAffinityTTLSeconds:   to.Ptr[int32](60),
						WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FrontendEndpointsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FrontendEndpointsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorFrontendEndpointList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFrontendEndpoints_Get(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorFrontendEndpointGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Frontend Endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewFrontendEndpointsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"frontDoor1",
		"frontendEndpoint1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorFrontendEndpointGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.FrontendEndpoint{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1"),
			Name: to.Ptr("frontendEndpoint1"),
			Properties: &armfrontdoor.FrontendEndpointProperties{
				HostName:                    to.Ptr("www.contoso.com"),
				SessionAffinityEnabledState: to.Ptr(armfrontdoor.SessionAffinityEnabledStateEnabled),
				SessionAffinityTTLSeconds:   to.Ptr[int32](60),
				WebApplicationFirewallPolicyLink: &armfrontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FrontendEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FrontendEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorFrontendEndpointGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_PurgeContent(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorPurgeContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purge content from Front Door"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginPurgeContent(ctx,
		"rg1",
		"frontDoor1",
		armfrontdoor.PurgeParameters{
			ContentPaths: []*string{
				to.Ptr("/pictures.aspx"),
				to.Ptr("/pictures/*")},
		},
		&armfrontdoor.EndpointsClientBeginPurgeContentOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorPurgeContent.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorPurgeContent.json: %v", err)
	}
}

func TestRulesEngines_ListByFrontDoor(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Rules Engine Configurations in a Front Door"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewRulesEnginesClient("subid", cred, &options)
	pager := client.ListByFrontDoor("rg1",
		"frontDoor1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.RulesEngineListResult{
			Value: []*armfrontdoor.RulesEngine{
				{
					Name: to.Ptr("rulesEngine1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
					Properties: &armfrontdoor.RulesEngineProperties{
						Rules: []*armfrontdoor.RulesEngineRule{
							{
								Name: to.Ptr("Rule1"),
								Action: &armfrontdoor.RulesEngineAction{
									RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
										ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
										CustomFragment:    to.Ptr("fragment"),
										CustomHost:        to.Ptr("www.bing.com"),
										CustomPath:        to.Ptr("/api"),
										CustomQueryString: to.Ptr("a=b"),
										RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
										RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
									},
								},
								MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
									{
										RulesEngineMatchValue: []*string{
											to.Ptr("CH")},
										RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
										RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
									}},
								MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
								Priority:                to.Ptr[int32](1),
							},
							{
								Name: to.Ptr("Rule2"),
								Action: &armfrontdoor.RulesEngineAction{
									ResponseHeaderActions: []*armfrontdoor.HeaderAction{
										{
											HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
											HeaderName:       to.Ptr("Cache-Control"),
											Value:            to.Ptr("public, max-age=31536000"),
										}},
								},
								MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
									{
										RulesEngineMatchValue: []*string{
											to.Ptr("jpg")},
										RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestFilenameExtension),
										RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
										Transforms: []*armfrontdoor.Transform{
											to.Ptr(armfrontdoor.TransformLowercase)},
									}},
								Priority: to.Ptr[int32](2),
							},
							{
								Name: to.Ptr("Rule3"),
								Action: &armfrontdoor.RulesEngineAction{
									RouteConfigurationOverride: &armfrontdoor.ForwardingConfiguration{
										ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
										BackendPool: &armfrontdoor.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
										},
										CacheConfiguration: &armfrontdoor.CacheConfiguration{
											CacheDuration:                to.Ptr("P1DT12H20M30S"),
											DynamicCompression:           to.Ptr(armfrontdoor.DynamicCompressionEnabledDisabled),
											QueryParameterStripDirective: to.Ptr(armfrontdoor.FrontDoorQueryStripOnly),
											QueryParameters:              to.Ptr("a=b,p=q"),
										},
										ForwardingProtocol: to.Ptr(armfrontdoor.FrontDoorForwardingProtocolHTTPSOnly),
									},
								},
								MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
									{
										NegateCondition: to.Ptr(false),
										RulesEngineMatchValue: []*string{
											to.Ptr("allowoverride")},
										RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestHeader),
										RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
										Selector:                 to.Ptr("Rules-Engine-Route-Forward"),
										Transforms: []*armfrontdoor.Transform{
											to.Ptr(armfrontdoor.TransformLowercase)},
									}},
								Priority: to.Ptr[int32](3),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RulesEngineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RulesEngineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRulesEngines_Get(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Rules Engine Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewRulesEnginesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"frontDoor1",
		"rulesEngine1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.RulesEngine{
			Name: to.Ptr("rulesEngine1"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
			Properties: &armfrontdoor.RulesEngineProperties{
				Rules: []*armfrontdoor.RulesEngineRule{
					{
						Name: to.Ptr("Rule1"),
						Action: &armfrontdoor.RulesEngineAction{
							RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
								ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
								CustomFragment:    to.Ptr("fragment"),
								CustomHost:        to.Ptr("www.bing.com"),
								CustomPath:        to.Ptr("/api"),
								CustomQueryString: to.Ptr("a=b"),
								RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
								RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
							},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								RulesEngineMatchValue: []*string{
									to.Ptr("CH")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
							}},
						MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
						Priority:                to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("Rule2"),
						Action: &armfrontdoor.RulesEngineAction{
							ResponseHeaderActions: []*armfrontdoor.HeaderAction{
								{
									HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
									HeaderName:       to.Ptr("Cache-Control"),
									Value:            to.Ptr("public, max-age=31536000"),
								}},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								RulesEngineMatchValue: []*string{
									to.Ptr("jpg")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestFilenameExtension),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
								Transforms: []*armfrontdoor.Transform{
									to.Ptr(armfrontdoor.TransformLowercase)},
							}},
						Priority: to.Ptr[int32](2),
					},
					{
						Name: to.Ptr("Rule3"),
						Action: &armfrontdoor.RulesEngineAction{
							RouteConfigurationOverride: &armfrontdoor.ForwardingConfiguration{
								ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
								BackendPool: &armfrontdoor.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								},
								CacheConfiguration: &armfrontdoor.CacheConfiguration{
									CacheDuration:                to.Ptr("P1DT12H20M30S"),
									DynamicCompression:           to.Ptr(armfrontdoor.DynamicCompressionEnabledDisabled),
									QueryParameterStripDirective: to.Ptr(armfrontdoor.FrontDoorQueryStripOnly),
									QueryParameters:              to.Ptr("a=b,p=q"),
								},
								ForwardingProtocol: to.Ptr(armfrontdoor.FrontDoorForwardingProtocolHTTPSOnly),
							},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								NegateCondition: to.Ptr(false),
								RulesEngineMatchValue: []*string{
									to.Ptr("allowoverride")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestHeader),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
								Selector:                 to.Ptr("Rules-Engine-Route-Forward"),
								Transforms: []*armfrontdoor.Transform{
									to.Ptr(armfrontdoor.TransformLowercase)},
							}},
						Priority: to.Ptr[int32](3),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RulesEngine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RulesEngine)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRulesEngines_CreateOrUpdate(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a specific Rules Engine Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewRulesEnginesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"frontDoor1",
		"rulesEngine1",
		armfrontdoor.RulesEngine{
			Properties: &armfrontdoor.RulesEngineProperties{
				Rules: []*armfrontdoor.RulesEngineRule{
					{
						Name: to.Ptr("Rule1"),
						Action: &armfrontdoor.RulesEngineAction{
							RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
								ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
								CustomFragment:    to.Ptr("fragment"),
								CustomHost:        to.Ptr("www.bing.com"),
								CustomPath:        to.Ptr("/api"),
								CustomQueryString: to.Ptr("a=b"),
								RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
								RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
							},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								RulesEngineMatchValue: []*string{
									to.Ptr("CH")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
							}},
						MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
						Priority:                to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("Rule2"),
						Action: &armfrontdoor.RulesEngineAction{
							ResponseHeaderActions: []*armfrontdoor.HeaderAction{
								{
									HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
									HeaderName:       to.Ptr("Cache-Control"),
									Value:            to.Ptr("public, max-age=31536000"),
								}},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								RulesEngineMatchValue: []*string{
									to.Ptr("jpg")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestFilenameExtension),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
								Transforms: []*armfrontdoor.Transform{
									to.Ptr(armfrontdoor.TransformLowercase)},
							}},
						Priority: to.Ptr[int32](2),
					},
					{
						Name: to.Ptr("Rule3"),
						Action: &armfrontdoor.RulesEngineAction{
							RouteConfigurationOverride: &armfrontdoor.ForwardingConfiguration{
								ODataType: to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"),
								BackendPool: &armfrontdoor.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1"),
								},
								CacheConfiguration: &armfrontdoor.CacheConfiguration{
									CacheDuration:                to.Ptr("P1DT12H20M30S"),
									DynamicCompression:           to.Ptr(armfrontdoor.DynamicCompressionEnabledDisabled),
									QueryParameterStripDirective: to.Ptr(armfrontdoor.FrontDoorQueryStripOnly),
									QueryParameters:              to.Ptr("a=b,p=q"),
								},
								ForwardingProtocol: to.Ptr(armfrontdoor.FrontDoorForwardingProtocolHTTPSOnly),
							},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								NegateCondition: to.Ptr(false),
								RulesEngineMatchValue: []*string{
									to.Ptr("allowoverride")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestHeader),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
								Selector:                 to.Ptr("Rules-Engine-Route-Forward"),
								Transforms: []*armfrontdoor.Transform{
									to.Ptr(armfrontdoor.TransformLowercase)},
							}},
						Priority: to.Ptr[int32](3),
					}},
			},
		},
		&armfrontdoor.RulesEnginesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.RulesEngine{
			Name: to.Ptr("rulesEngine1"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1"),
			Properties: &armfrontdoor.RulesEngineProperties{
				Rules: []*armfrontdoor.RulesEngineRule{
					{
						Name: to.Ptr("Rule1"),
						Action: &armfrontdoor.RulesEngineAction{
							RouteConfigurationOverride: &armfrontdoor.RedirectConfiguration{
								ODataType:         to.Ptr("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"),
								CustomFragment:    to.Ptr("fragment"),
								CustomHost:        to.Ptr("www.bing.com"),
								CustomPath:        to.Ptr("/api"),
								CustomQueryString: to.Ptr("a=b"),
								RedirectProtocol:  to.Ptr(armfrontdoor.FrontDoorRedirectProtocolHTTPSOnly),
								RedirectType:      to.Ptr(armfrontdoor.FrontDoorRedirectTypeMoved),
							},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								RulesEngineMatchValue: []*string{
									to.Ptr("CH")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRemoteAddr),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorGeoMatch),
							}},
						MatchProcessingBehavior: to.Ptr(armfrontdoor.MatchProcessingBehaviorStop),
						Priority:                to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("Rule2"),
						Action: &armfrontdoor.RulesEngineAction{
							ResponseHeaderActions: []*armfrontdoor.HeaderAction{
								{
									HeaderActionType: to.Ptr(armfrontdoor.HeaderActionTypeOverwrite),
									HeaderName:       to.Ptr("Cache-Control"),
									Value:            to.Ptr("public, max-age=31536000"),
								}},
						},
						MatchConditions: []*armfrontdoor.RulesEngineMatchCondition{
							{
								RulesEngineMatchValue: []*string{
									to.Ptr("jpg")},
								RulesEngineMatchVariable: to.Ptr(armfrontdoor.RulesEngineMatchVariableRequestFilenameExtension),
								RulesEngineOperator:      to.Ptr(armfrontdoor.RulesEngineOperatorEqual),
								Transforms: []*armfrontdoor.Transform{
									to.Ptr(armfrontdoor.TransformLowercase)},
							}},
						Priority: to.Ptr[int32](2),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RulesEngine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RulesEngine)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRulesEngines_Delete(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Rules Engine Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewRulesEnginesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"frontDoor1",
		"rulesEngine1",
		&armfrontdoor.RulesEnginesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-05-01/examples/FrontdoorRulesEngineDelete.json: %v", err)
	}
}

func TestPolicies_List(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Policies in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewPoliciesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.WebApplicationFirewallPolicyList{
			Value: []*armfrontdoor.WebApplicationFirewallPolicy{
				{
					Name:     to.Ptr("Policy1"),
					Type:     to.Ptr("Microsoft.Network/frontdoorwebapplicationfirewallpolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/Policy1"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armfrontdoor.WebApplicationFirewallPolicyProperties{
						CustomRules: &armfrontdoor.CustomRuleList{
							Rules: []*armfrontdoor.CustomRule{
								{
									Name:         to.Ptr("Rule1"),
									Action:       to.Ptr(armfrontdoor.ActionTypeBlock),
									EnabledState: to.Ptr(armfrontdoor.CustomRuleEnabledStateEnabled),
									MatchConditions: []*armfrontdoor.MatchCondition{
										{
											MatchValue: []*string{
												to.Ptr("192.168.1.0/24"),
												to.Ptr("10.0.0.0/24")},
											MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armfrontdoor.OperatorIPMatch),
											Transforms:      []*armfrontdoor.TransformType{},
										}},
									Priority:                   to.Ptr[int32](1),
									RateLimitDurationInMinutes: to.Ptr[int32](0),
									RateLimitThreshold:         to.Ptr[int32](1000),
									RuleType:                   to.Ptr(armfrontdoor.RuleTypeRateLimitRule),
								},
								{
									Name:         to.Ptr("Rule2"),
									Action:       to.Ptr(armfrontdoor.ActionTypeBlock),
									EnabledState: to.Ptr(armfrontdoor.CustomRuleEnabledStateEnabled),
									MatchConditions: []*armfrontdoor.MatchCondition{
										{
											MatchValue: []*string{
												to.Ptr("CH")},
											MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armfrontdoor.OperatorGeoMatch),
										},
										{
											MatchValue: []*string{
												to.Ptr("windows")},
											MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRequestHeader),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armfrontdoor.OperatorContains),
											Selector:        to.Ptr("UserAgent"),
											Transforms: []*armfrontdoor.TransformType{
												to.Ptr(armfrontdoor.TransformTypeLowercase)},
										}},
									Priority:                   to.Ptr[int32](2),
									RateLimitDurationInMinutes: to.Ptr[int32](0),
									RateLimitThreshold:         to.Ptr[int32](0),
									RuleType:                   to.Ptr(armfrontdoor.RuleTypeMatchRule),
								}},
						},
						FrontendEndpointLinks: []*armfrontdoor.FrontendEndpointLink{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontdoors/fd1/frontendendpoints/fd1-azurefd-net"),
							}},
						ManagedRules: &armfrontdoor.ManagedRuleSetList{
							ManagedRuleSets: []*armfrontdoor.ManagedRuleSet{
								{
									Exclusions: []*armfrontdoor.ManagedRuleExclusion{
										{
											MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableRequestHeaderNames),
											Selector:              to.Ptr("User-Agent"),
											SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorEquals),
										}},
									RuleGroupOverrides: []*armfrontdoor.ManagedRuleGroupOverride{
										{
											RuleGroupName: to.Ptr("SQLI"),
											Rules: []*armfrontdoor.ManagedRuleOverride{
												{
													Action:       to.Ptr(armfrontdoor.ActionTypeRedirect),
													EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
													RuleID:       to.Ptr("942100"),
												},
												{
													EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateDisabled),
													RuleID:       to.Ptr("942110"),
												}},
										}},
									RuleSetType:    to.Ptr("DefaultRuleSet"),
									RuleSetVersion: to.Ptr("1.0"),
								}},
						},
						PolicySettings: &armfrontdoor.PolicySettings{
							CustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
							CustomBlockResponseStatusCode: to.Ptr[int32](499),
							EnabledState:                  to.Ptr(armfrontdoor.PolicyEnabledStateEnabled),
							Mode:                          to.Ptr(armfrontdoor.PolicyModePrevention),
							RedirectURL:                   to.Ptr("http://www.bing.com"),
						},
						ProvisioningState:   to.Ptr("Succeeded"),
						ResourceState:       to.Ptr(armfrontdoor.PolicyResourceStateEnabled),
						SecurityPolicyLinks: []*armfrontdoor.SecurityPolicyLink{},
					},
					SKU: &armfrontdoor.SKU{
						Name: to.Ptr(armfrontdoor.SKUNameClassicAzureFrontDoor),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebApplicationFirewallPolicyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebApplicationFirewallPolicyList)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Get(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"Policy1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.WebApplicationFirewallPolicy{
			Name:     to.Ptr("Policy1"),
			Type:     to.Ptr("Microsoft.Network/frontdoorwebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/Policy1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.WebApplicationFirewallPolicyProperties{
				CustomRules: &armfrontdoor.CustomRuleList{
					Rules: []*armfrontdoor.CustomRule{
						{
							Name:         to.Ptr("Rule1"),
							Action:       to.Ptr(armfrontdoor.ActionTypeBlock),
							EnabledState: to.Ptr(armfrontdoor.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armfrontdoor.OperatorIPMatch),
									Transforms:      []*armfrontdoor.TransformType{},
								}},
							Priority:                   to.Ptr[int32](1),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](1000),
							RuleType:                   to.Ptr(armfrontdoor.RuleTypeRateLimitRule),
						},
						{
							Name:         to.Ptr("Rule2"),
							Action:       to.Ptr(armfrontdoor.ActionTypeBlock),
							EnabledState: to.Ptr(armfrontdoor.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armfrontdoor.OperatorGeoMatch),
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRequestHeader),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armfrontdoor.OperatorContains),
									Selector:        to.Ptr("UserAgent"),
									Transforms: []*armfrontdoor.TransformType{
										to.Ptr(armfrontdoor.TransformTypeLowercase)},
								}},
							Priority:                   to.Ptr[int32](2),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](0),
							RuleType:                   to.Ptr(armfrontdoor.RuleTypeMatchRule),
						}},
				},
				FrontendEndpointLinks: []*armfrontdoor.FrontendEndpointLink{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontdoors/fd1/frontendendpoints/fd1-azurefd-net"),
					}},
				ManagedRules: &armfrontdoor.ManagedRuleSetList{
					ManagedRuleSets: []*armfrontdoor.ManagedRuleSet{
						{
							Exclusions: []*armfrontdoor.ManagedRuleExclusion{
								{
									MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableRequestHeaderNames),
									Selector:              to.Ptr("User-Agent"),
									SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorEquals),
								}},
							RuleGroupOverrides: []*armfrontdoor.ManagedRuleGroupOverride{
								{
									Exclusions:    []*armfrontdoor.ManagedRuleExclusion{},
									RuleGroupName: to.Ptr("SQLI"),
									Rules: []*armfrontdoor.ManagedRuleOverride{
										{
											Action:       to.Ptr(armfrontdoor.ActionTypeRedirect),
											EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
											Exclusions:   []*armfrontdoor.ManagedRuleExclusion{},
											RuleID:       to.Ptr("942100"),
										},
										{
											EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("942110"),
										}},
								}},
							RuleSetAction:  to.Ptr(armfrontdoor.ManagedRuleSetActionTypeBlock),
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("1.0"),
						}},
				},
				PolicySettings: &armfrontdoor.PolicySettings{
					CustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					CustomBlockResponseStatusCode: to.Ptr[int32](499),
					EnabledState:                  to.Ptr(armfrontdoor.PolicyEnabledStateEnabled),
					Mode:                          to.Ptr(armfrontdoor.PolicyModePrevention),
					RedirectURL:                   to.Ptr("http://www.bing.com"),
					RequestBodyCheck:              to.Ptr(armfrontdoor.PolicyRequestBodyCheckDisabled),
				},
				ProvisioningState:   to.Ptr("Succeeded"),
				ResourceState:       to.Ptr(armfrontdoor.PolicyResourceStateEnabled),
				SecurityPolicyLinks: []*armfrontdoor.SecurityPolicyLink{},
			},
			SKU: &armfrontdoor.SKU{
				Name: to.Ptr(armfrontdoor.SKUNameClassicAzureFrontDoor),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates specific policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewPoliciesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"Policy1",
		armfrontdoor.WebApplicationFirewallPolicy{
			Properties: &armfrontdoor.WebApplicationFirewallPolicyProperties{
				CustomRules: &armfrontdoor.CustomRuleList{
					Rules: []*armfrontdoor.CustomRule{
						{
							Name:   to.Ptr("Rule1"),
							Action: to.Ptr(armfrontdoor.ActionTypeBlock),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable: to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
									Operator:      to.Ptr(armfrontdoor.OperatorIPMatch),
								}},
							Priority:           to.Ptr[int32](1),
							RateLimitThreshold: to.Ptr[int32](1000),
							RuleType:           to.Ptr(armfrontdoor.RuleTypeRateLimitRule),
						},
						{
							Name:   to.Ptr("Rule2"),
							Action: to.Ptr(armfrontdoor.ActionTypeBlock),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable: to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
									Operator:      to.Ptr(armfrontdoor.OperatorGeoMatch),
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable: to.Ptr(armfrontdoor.MatchVariableRequestHeader),
									Operator:      to.Ptr(armfrontdoor.OperatorContains),
									Selector:      to.Ptr("UserAgent"),
									Transforms: []*armfrontdoor.TransformType{
										to.Ptr(armfrontdoor.TransformTypeLowercase)},
								}},
							Priority: to.Ptr[int32](2),
							RuleType: to.Ptr(armfrontdoor.RuleTypeMatchRule),
						}},
				},
				ManagedRules: &armfrontdoor.ManagedRuleSetList{
					ManagedRuleSets: []*armfrontdoor.ManagedRuleSet{
						{
							Exclusions: []*armfrontdoor.ManagedRuleExclusion{
								{
									MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableRequestHeaderNames),
									Selector:              to.Ptr("User-Agent"),
									SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorEquals),
								}},
							RuleGroupOverrides: []*armfrontdoor.ManagedRuleGroupOverride{
								{
									Exclusions: []*armfrontdoor.ManagedRuleExclusion{
										{
											MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableRequestCookieNames),
											Selector:              to.Ptr("token"),
											SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorStartsWith),
										}},
									RuleGroupName: to.Ptr("SQLI"),
									Rules: []*armfrontdoor.ManagedRuleOverride{
										{
											Action:       to.Ptr(armfrontdoor.ActionTypeRedirect),
											EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
											Exclusions: []*armfrontdoor.ManagedRuleExclusion{
												{
													MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableQueryStringArgNames),
													Selector:              to.Ptr("query"),
													SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorEquals),
												}},
											RuleID: to.Ptr("942100"),
										},
										{
											EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("942110"),
										}},
								}},
							RuleSetAction:  to.Ptr(armfrontdoor.ManagedRuleSetActionTypeBlock),
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("1.0"),
						}},
				},
				PolicySettings: &armfrontdoor.PolicySettings{
					CustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					CustomBlockResponseStatusCode: to.Ptr[int32](499),
					EnabledState:                  to.Ptr(armfrontdoor.PolicyEnabledStateEnabled),
					Mode:                          to.Ptr(armfrontdoor.PolicyModePrevention),
					RedirectURL:                   to.Ptr("http://www.bing.com"),
					RequestBodyCheck:              to.Ptr(armfrontdoor.PolicyRequestBodyCheckDisabled),
				},
			},
			SKU: &armfrontdoor.SKU{
				Name: to.Ptr(armfrontdoor.SKUNameClassicAzureFrontDoor),
			},
		},
		&armfrontdoor.PoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armfrontdoor.WebApplicationFirewallPolicy{
			Name:     to.Ptr("Policy1"),
			Type:     to.Ptr("Microsoft.Network/frontdoorwebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/Policy1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armfrontdoor.WebApplicationFirewallPolicyProperties{
				CustomRules: &armfrontdoor.CustomRuleList{
					Rules: []*armfrontdoor.CustomRule{
						{
							Name:         to.Ptr("Rule1"),
							Action:       to.Ptr(armfrontdoor.ActionTypeBlock),
							EnabledState: to.Ptr(armfrontdoor.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armfrontdoor.OperatorIPMatch),
									Transforms:      []*armfrontdoor.TransformType{},
								}},
							Priority:                   to.Ptr[int32](1),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](1000),
							RuleType:                   to.Ptr(armfrontdoor.RuleTypeRateLimitRule),
						},
						{
							Name:         to.Ptr("Rule2"),
							Action:       to.Ptr(armfrontdoor.ActionTypeBlock),
							EnabledState: to.Ptr(armfrontdoor.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armfrontdoor.OperatorGeoMatch),
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable:   to.Ptr(armfrontdoor.MatchVariableRequestHeader),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armfrontdoor.OperatorContains),
									Selector:        to.Ptr("UserAgent"),
									Transforms: []*armfrontdoor.TransformType{
										to.Ptr(armfrontdoor.TransformTypeLowercase)},
								}},
							Priority:                   to.Ptr[int32](2),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](0),
							RuleType:                   to.Ptr(armfrontdoor.RuleTypeMatchRule),
						}},
				},
				FrontendEndpointLinks: []*armfrontdoor.FrontendEndpointLink{},
				ManagedRules: &armfrontdoor.ManagedRuleSetList{
					ManagedRuleSets: []*armfrontdoor.ManagedRuleSet{
						{
							Exclusions: []*armfrontdoor.ManagedRuleExclusion{
								{
									MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableRequestHeaderNames),
									Selector:              to.Ptr("User-Agent"),
									SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorEquals),
								}},
							RuleGroupOverrides: []*armfrontdoor.ManagedRuleGroupOverride{
								{
									Exclusions: []*armfrontdoor.ManagedRuleExclusion{
										{
											MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableRequestCookieNames),
											Selector:              to.Ptr("token"),
											SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorStartsWith),
										}},
									RuleGroupName: to.Ptr("SQLI"),
									Rules: []*armfrontdoor.ManagedRuleOverride{
										{
											Action:       to.Ptr(armfrontdoor.ActionTypeRedirect),
											EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
											Exclusions: []*armfrontdoor.ManagedRuleExclusion{
												{
													MatchVariable:         to.Ptr(armfrontdoor.ManagedRuleExclusionMatchVariableQueryStringArgNames),
													Selector:              to.Ptr("query"),
													SelectorMatchOperator: to.Ptr(armfrontdoor.ManagedRuleExclusionSelectorMatchOperatorEquals),
												}},
											RuleID: to.Ptr("942100"),
										},
										{
											EnabledState: to.Ptr(armfrontdoor.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("942110"),
										}},
								}},
							RuleSetAction:  to.Ptr(armfrontdoor.ManagedRuleSetActionTypeBlock),
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("1.0"),
						}},
				},
				PolicySettings: &armfrontdoor.PolicySettings{
					CustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					CustomBlockResponseStatusCode: to.Ptr[int32](499),
					EnabledState:                  to.Ptr(armfrontdoor.PolicyEnabledStateEnabled),
					Mode:                          to.Ptr(armfrontdoor.PolicyModePrevention),
					RedirectURL:                   to.Ptr("http://www.bing.com"),
					RequestBodyCheck:              to.Ptr(armfrontdoor.PolicyRequestBodyCheckDisabled),
				},
				ProvisioningState:   to.Ptr("Succeeded"),
				ResourceState:       to.Ptr(armfrontdoor.PolicyResourceStateEnabled),
				SecurityPolicyLinks: []*armfrontdoor.SecurityPolicyLink{},
			},
			SKU: &armfrontdoor.SKU{
				Name: to.Ptr(armfrontdoor.SKUNameClassicAzureFrontDoor),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Delete(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete protection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewPoliciesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"Policy1",
		&armfrontdoor.PoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyDelete.json: %v", err)
	}
}

func TestManagedRuleSets_List(t *testing.T) {
	// From example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListManagedRuleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Policies in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armfrontdoor.NewManagedRuleSetsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListManagedRuleSets.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armfrontdoor.ManagedRuleSetDefinitionList{
			Value: []*armfrontdoor.ManagedRuleSetDefinition{
				{
					Name: to.Ptr("DefaultRuleSet_1.0"),
					Type: to.Ptr("Microsoft.Network/frontdoorwebapplicationfirewallmanagedrulesets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Network/FrontDoorWebApplicationFirewallManagedRuleSets"),
					Properties: &armfrontdoor.ManagedRuleSetDefinitionProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						RuleGroups: []*armfrontdoor.ManagedRuleGroupDefinition{
							{
								Description:   to.Ptr("SQL injection"),
								RuleGroupName: to.Ptr("SQLI"),
								Rules: []*armfrontdoor.ManagedRuleDefinition{
									{
										Description:   to.Ptr("SQL Injection Attack Detected via libinjection"),
										DefaultAction: to.Ptr(armfrontdoor.ActionTypeBlock),
										DefaultState:  to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
										RuleID:        to.Ptr("942100"),
									},
									{
										Description:   to.Ptr("SQL Injection Attack: Common Injection Testing Detected"),
										DefaultAction: to.Ptr(armfrontdoor.ActionTypeBlock),
										DefaultState:  to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
										RuleID:        to.Ptr("942110"),
									}},
							},
							{
								Description:   to.Ptr("Cross-site scripting"),
								RuleGroupName: to.Ptr("XSS"),
								Rules: []*armfrontdoor.ManagedRuleDefinition{
									{
										Description:   to.Ptr("XSS Attack Detected via libinjection"),
										DefaultAction: to.Ptr(armfrontdoor.ActionTypeBlock),
										DefaultState:  to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
										RuleID:        to.Ptr("941100"),
									},
									{
										Description:   to.Ptr("XSS Attack Detected via libinjection"),
										DefaultAction: to.Ptr(armfrontdoor.ActionTypeBlock),
										DefaultState:  to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
										RuleID:        to.Ptr("941101"),
									},
									{
										Description:   to.Ptr("XSS Filter - Category 1: Script Tag Vector"),
										DefaultAction: to.Ptr(armfrontdoor.ActionTypeBlock),
										DefaultState:  to.Ptr(armfrontdoor.ManagedRuleEnabledStateEnabled),
										RuleID:        to.Ptr("941110"),
									}},
							}},
						RuleSetID:      to.Ptr("8125d145-ddc5-4d90-9bc3-24c5f2de69a2"),
						RuleSetType:    to.Ptr("DefaultRuleSet"),
						RuleSetVersion: to.Ptr("1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedRuleSetDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedRuleSetDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListManagedRuleSets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
