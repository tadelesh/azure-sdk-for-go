//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicefabricmesh_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmesh/armservicefabricmesh"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSecret_Create(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/create_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateSecret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"sbz_demo",
		"dbConnectionString",
		armservicefabricmesh.SecretResourceDescription{
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.InlinedValueSecretResourceProperties{
				Kind:        to.Ptr(armservicefabricmesh.SecretKindInlinedValue),
				Description: to.Ptr("Mongo DB connection string for backend database!"),
				ContentType: to.Ptr("text/plain"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/create_update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.SecretResourceDescription{
			Name:     to.Ptr("dbConnectionString"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/secrets"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.InlinedValueSecretResourceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Kind:              to.Ptr(armservicefabricmesh.SecretKindInlinedValue),
				Description:       to.Ptr("Mongo DB connection string for backend database!"),
				ContentType:       to.Ptr("text/plain"),
				Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecretResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecretResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/create_update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecret_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetSecret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"dbConnectionString",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.SecretResourceDescription{
			Name:     to.Ptr("dbConnectionString"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/secrets"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.InlinedValueSecretResourceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Kind:              to.Ptr(armservicefabricmesh.SecretKindInlinedValue),
				Description:       to.Ptr("Mongo DB connection string for backend database!"),
				ContentType:       to.Ptr("text/plain"),
				Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecretResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecretResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecret_Delete(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteSecret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sbz_demo",
		"dbConnectionString",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/delete.json: %v", err)
	}
}

func TestSecret_ListByResourceGroup(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/list_byResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSecretsByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("sbz_demo",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/list_byResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.SecretResourceDescriptionList{
			Value: []*armservicefabricmesh.SecretResourceDescription{
				{
					Name:     to.Ptr("dbConnectionString"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/secrets"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.InlinedValueSecretResourceProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Kind:              to.Ptr(armservicefabricmesh.SecretKindInlinedValue),
						Description:       to.Ptr("Mongo DB connection string for backend database!"),
						ContentType:       to.Ptr("text/plain"),
						Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecretResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecretResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/list_byResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecret_ListBySubscription(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/list_bySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSecretsBySubscriptionId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/list_bySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.SecretResourceDescriptionList{
			Value: []*armservicefabricmesh.SecretResourceDescription{
				{
					Name:     to.Ptr("dbConnectionString"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/secrets"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.InlinedValueSecretResourceProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Kind:              to.Ptr(armservicefabricmesh.SecretKindInlinedValue),
						Description:       to.Ptr("Mongo DB connection string for backend database!"),
						ContentType:       to.Ptr("text/plain"),
						Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecretResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecretResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/list_bySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecretValue_Create(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateSecretValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretValueClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"sbz_demo",
		"dbConnectionString",
		"v1",
		armservicefabricmesh.SecretValueResourceDescription{
			Name: to.Ptr("v1"),
			Properties: &armservicefabricmesh.SecretValueResourceProperties{
				Value: to.Ptr("mongodb://contoso123:0Fc3IolnL12312asdfawejunASDF@asdfYXX2t8a97kghVcUzcDv98hawelufhawefafnoQRGwNj2nMPL1Y9qsIr9Srdw==@contoso123.documents.azure.com:10255/mydatabase?ssl=true"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.SecretValueResourceDescription{
			Name:     to.Ptr("v1"),
			Type:     to.Ptr("secrets/values"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString/values/v1"),
			Location: to.Ptr("EastUS"),
			Properties: &armservicefabricmesh.SecretValueResourceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecretValueResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecretValueResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecretValue_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetSecretValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretValueClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"dbConnectionString",
		"v1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.SecretValueResourceDescription{
			Name:     to.Ptr("v1"),
			Type:     to.Ptr("secrets/values"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString/values/v1"),
			Location: to.Ptr("EastUS"),
			Properties: &armservicefabricmesh.SecretValueResourceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecretValueResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecretValueResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecretValue_Delete(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteSecretValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretValueClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sbz_demo",
		"dbConnectionString",
		"v1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/delete.json: %v", err)
	}
}

func TestSecretValue_List(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSecretValues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretValueClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("sbz_demo",
		"dbConnectionString",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.SecretValueResourceDescriptionList{
			Value: []*armservicefabricmesh.SecretValueResourceDescription{
				{
					Name:     to.Ptr("v1"),
					Type:     to.Ptr("secrets/values"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString/values/v1"),
					Location: to.Ptr("EastUS"),
					Properties: &armservicefabricmesh.SecretValueResourceProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("v2"),
					Type:     to.Ptr("secrets/values"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/secrets/dbConnectionString/values/v2"),
					Location: to.Ptr("EastUS"),
					Properties: &armservicefabricmesh.SecretValueResourceProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecretValueResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecretValueResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecretValue_ListValue(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/list_value.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSecretValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewSecretValueClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListValue(ctx,
		"sbz_demo",
		"dbConnectionString",
		"v1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/list_value.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.SecretValue{
			Value: to.Ptr("mongodb://contoso123:0Fc3IolnL12312asdfawejunASDF@asdfYXX2t8a97kghVcUzcDv98hawelufhawefafnoQRGwNj2nMPL1Y9qsIr9Srdw==@contoso123.documents.azure.com:10255/mydatabase?ssl=true"),
		}
		if !reflect.DeepEqual(exampleRes, res.SecretValue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecretValue)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/secrets/values/list_value.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolume_Create(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/create_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateVolume"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewVolumeClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"sbz_demo",
		"sampleVolume",
		armservicefabricmesh.VolumeResourceDescription{
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.VolumeResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample volume."),
				AzureFileParameters: &armservicefabricmesh.VolumeProviderParametersAzureFile{
					AccountKey:  to.Ptr("provide-account-key-here"),
					AccountName: to.Ptr("sbzdemoaccount"),
					ShareName:   to.Ptr("sharel"),
				},
				Provider: to.Ptr(armservicefabricmesh.VolumeProviderSFAzureFile),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/create_update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.VolumeResourceDescription{
			Name:     to.Ptr("sampleVolume"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/volumes"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/volumes/sampleVolume"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.VolumeResourceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Description:       to.Ptr("Service Fabric Mesh sample volume."),
				AzureFileParameters: &armservicefabricmesh.VolumeProviderParametersAzureFile{
					AccountName: to.Ptr("sbzdemoaccount"),
					ShareName:   to.Ptr("sharel"),
				},
				Provider: to.Ptr(armservicefabricmesh.VolumeProviderSFAzureFile),
				Status:   to.Ptr(armservicefabricmesh.ResourceStatusReady),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VolumeResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VolumeResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/create_update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolume_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVolume"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewVolumeClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"sampleVolume",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.VolumeResourceDescription{
			Name:     to.Ptr("sampleVolume"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/volumes"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/volumes/sampleVolume"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.VolumeResourceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Description:       to.Ptr("Service Fabric Mesh sample volume."),
				AzureFileParameters: &armservicefabricmesh.VolumeProviderParametersAzureFile{
					AccountName: to.Ptr("sbzdemoaccount"),
					ShareName:   to.Ptr("sharel"),
				},
				Provider: to.Ptr(armservicefabricmesh.VolumeProviderSFAzureFile),
				Status:   to.Ptr(armservicefabricmesh.ResourceStatusReady),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VolumeResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VolumeResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolume_Delete(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteVolume"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewVolumeClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sbz_demo",
		"sampleVolume",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/delete.json: %v", err)
	}
}

func TestVolume_ListByResourceGroup(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/list_byResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVolumesByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewVolumeClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("sbz_demo",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/list_byResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.VolumeResourceDescriptionList{
			Value: []*armservicefabricmesh.VolumeResourceDescription{
				{
					Name:     to.Ptr("sampleVolume"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/volumes"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/volumes/sampleVolume"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.VolumeResourceProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Description:       to.Ptr("Service Fabric Mesh sample volume."),
						AzureFileParameters: &armservicefabricmesh.VolumeProviderParametersAzureFile{
							AccountName: to.Ptr("sbzdemoaccount"),
							ShareName:   to.Ptr("sharel"),
						},
						Provider: to.Ptr(armservicefabricmesh.VolumeProviderSFAzureFile),
						Status:   to.Ptr(armservicefabricmesh.ResourceStatusReady),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VolumeResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VolumeResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/list_byResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolume_ListBySubscription(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/list_bySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVolumesBySubscriptionId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewVolumeClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/list_bySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.VolumeResourceDescriptionList{
			Value: []*armservicefabricmesh.VolumeResourceDescription{
				{
					Name:     to.Ptr("sampleVolume"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/volumes"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/volumes/sampleVolume"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.VolumeResourceProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Description:       to.Ptr("Service Fabric Mesh sample volume."),
						AzureFileParameters: &armservicefabricmesh.VolumeProviderParametersAzureFile{
							AccountName: to.Ptr("sbzdemoaccount"),
							ShareName:   to.Ptr("sharel"),
						},
						Provider: to.Ptr(armservicefabricmesh.VolumeProviderSFAzureFile),
						Status:   to.Ptr(armservicefabricmesh.ResourceStatusReady),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VolumeResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VolumeResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/volumes/list_bySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetwork_Create(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/create_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewNetworkClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"sbz_demo",
		"sampleNetwork",
		armservicefabricmesh.NetworkResourceDescription{
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.LocalNetworkResourceProperties{
				Kind:                 to.Ptr(armservicefabricmesh.NetworkKindLocal),
				Description:          to.Ptr("Service Fabric Mesh sample network."),
				NetworkAddressPrefix: to.Ptr("2.0.0.0/16"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/create_update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.NetworkResourceDescription{
			Name:     to.Ptr("sampleNetwork"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/networks"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.LocalNetworkResourceProperties{
				ProvisioningState:    to.Ptr("Succeeded"),
				Kind:                 to.Ptr(armservicefabricmesh.NetworkKindLocal),
				Description:          to.Ptr("Service Fabric Mesh sample network."),
				Status:               to.Ptr(armservicefabricmesh.ResourceStatusReady),
				NetworkAddressPrefix: to.Ptr("2.0.0.0/16"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/create_update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetwork_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewNetworkClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"sampleNetwork",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.NetworkResourceDescription{
			Name:     to.Ptr("sampleNetwork"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/networks"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.LocalNetworkResourceProperties{
				ProvisioningState:    to.Ptr("Succeeded"),
				Kind:                 to.Ptr(armservicefabricmesh.NetworkKindLocal),
				Description:          to.Ptr("Service Fabric Mesh sample network."),
				Status:               to.Ptr(armservicefabricmesh.ResourceStatusReady),
				NetworkAddressPrefix: to.Ptr("2.0.0.0/16"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetwork_Delete(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewNetworkClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sbz_demo",
		"sampleNetwork",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/delete.json: %v", err)
	}
}

func TestNetwork_ListByResourceGroup(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/list_byResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListNetworksByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewNetworkClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("sbz_demo",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/list_byResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.NetworkResourceDescriptionList{
			Value: []*armservicefabricmesh.NetworkResourceDescription{
				{
					Name:     to.Ptr("sampleNetwork"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/networks"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.LocalNetworkResourceProperties{
						ProvisioningState:    to.Ptr("Succeeded"),
						Kind:                 to.Ptr(armservicefabricmesh.NetworkKindLocal),
						Description:          to.Ptr("Service Fabric Mesh sample network."),
						Status:               to.Ptr(armservicefabricmesh.ResourceStatusReady),
						NetworkAddressPrefix: to.Ptr("2.0.0.0/16"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/list_byResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetwork_ListBySubscription(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/list_bySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListNetworksBySubscriptionId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewNetworkClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/list_bySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.NetworkResourceDescriptionList{
			Value: []*armservicefabricmesh.NetworkResourceDescription{
				{
					Name:     to.Ptr("sampleNetwork"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/networks"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.LocalNetworkResourceProperties{
						ProvisioningState:    to.Ptr("Succeeded"),
						Kind:                 to.Ptr(armservicefabricmesh.NetworkKindLocal),
						Description:          to.Ptr("Service Fabric Mesh sample network."),
						Status:               to.Ptr(armservicefabricmesh.ResourceStatusReady),
						NetworkAddressPrefix: to.Ptr("2.0.0.0/16"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/networks/list_bySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_Create(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/create_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewGatewayClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"sbz_demo",
		"sampleGateway",
		armservicefabricmesh.GatewayResourceDescription{
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.GatewayResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample gateway."),
				DestinationNetwork: &armservicefabricmesh.NetworkRef{
					Name: to.Ptr("helloWorldNetwork"),
				},
				SourceNetwork: &armservicefabricmesh.NetworkRef{
					Name: to.Ptr("Open"),
				},
				TCP: []*armservicefabricmesh.TCPConfig{
					{
						Name: to.Ptr("web"),
						Destination: &armservicefabricmesh.GatewayDestination{
							ApplicationName: to.Ptr("helloWorldApp"),
							EndpointName:    to.Ptr("helloWorldListener"),
							ServiceName:     to.Ptr("helloWorldService"),
						},
						Port: to.Ptr[int32](80),
					}},
				HTTP: []*armservicefabricmesh.HTTPConfig{
					{
						Name: to.Ptr("contosoWebsite"),
						Hosts: []*armservicefabricmesh.HTTPHostConfig{
							{
								Name: to.Ptr("contoso.com"),
								Routes: []*armservicefabricmesh.HTTPRouteConfig{
									{
										Name: to.Ptr("index"),
										Destination: &armservicefabricmesh.GatewayDestination{
											ApplicationName: to.Ptr("httpHelloWorldApp"),
											EndpointName:    to.Ptr("indexHttpEndpoint"),
											ServiceName:     to.Ptr("indexService"),
										},
										Match: &armservicefabricmesh.HTTPRouteMatchRule{
											Path: &armservicefabricmesh.HTTPRouteMatchPath{
												Type:    to.Ptr(armservicefabricmesh.PathMatchTypePrefix),
												Rewrite: to.Ptr("/"),
												Value:   to.Ptr("/index"),
											},
											Headers: []*armservicefabricmesh.HTTPRouteMatchHeader{
												{
													Name:  to.Ptr("accept"),
													Type:  to.Ptr(armservicefabricmesh.HeaderMatchTypeExact),
													Value: to.Ptr("application/json"),
												}},
										},
									}},
							}},
						Port: to.Ptr[int32](8081),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/create_update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.GatewayResourceDescription{
			Name:     to.Ptr("sampleGateway"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/gateways"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/gateways/sampleGateway"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.GatewayResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample gateway."),
				DestinationNetwork: &armservicefabricmesh.NetworkRef{
					Name: to.Ptr("helloWorldNetwork"),
				},
				IPAddress: to.Ptr("192.168.1.1"),
				SourceNetwork: &armservicefabricmesh.NetworkRef{
					Name: to.Ptr("Open"),
				},
				Status: to.Ptr(armservicefabricmesh.ResourceStatusReady),
				TCP: []*armservicefabricmesh.TCPConfig{
					{
						Name: to.Ptr("web"),
						Destination: &armservicefabricmesh.GatewayDestination{
							ApplicationName: to.Ptr("helloWorldApp"),
							EndpointName:    to.Ptr("helloWorldListener"),
							ServiceName:     to.Ptr("helloWorldService"),
						},
						Port: to.Ptr[int32](80),
					}},
				HTTP: []*armservicefabricmesh.HTTPConfig{
					{
						Name: to.Ptr("contosoWebsite"),
						Hosts: []*armservicefabricmesh.HTTPHostConfig{
							{
								Name: to.Ptr("contoso.com"),
								Routes: []*armservicefabricmesh.HTTPRouteConfig{
									{
										Name: to.Ptr("index"),
										Destination: &armservicefabricmesh.GatewayDestination{
											ApplicationName: to.Ptr("httpHelloWorldApp"),
											EndpointName:    to.Ptr("indexHttpEndpoint"),
											ServiceName:     to.Ptr("indexService"),
										},
										Match: &armservicefabricmesh.HTTPRouteMatchRule{
											Path: &armservicefabricmesh.HTTPRouteMatchPath{
												Type:    to.Ptr(armservicefabricmesh.PathMatchTypePrefix),
												Rewrite: to.Ptr("/"),
												Value:   to.Ptr("/index"),
											},
											Headers: []*armservicefabricmesh.HTTPRouteMatchHeader{
												{
													Name:  to.Ptr("accept"),
													Type:  to.Ptr(armservicefabricmesh.HeaderMatchTypeExact),
													Value: to.Ptr("application/json"),
												}},
										},
									}},
							}},
						Port: to.Ptr[int32](8081),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/create_update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewGatewayClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"sampleGateway",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.GatewayResourceDescription{
			Name:     to.Ptr("sampleGateway"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/gateways"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/gateways/sampleGateway"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.GatewayResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample gateway."),
				DestinationNetwork: &armservicefabricmesh.NetworkRef{
					Name: to.Ptr("helloWorldNetwork"),
				},
				IPAddress: to.Ptr("192.168.1.1"),
				SourceNetwork: &armservicefabricmesh.NetworkRef{
					Name: to.Ptr("Open"),
				},
				Status: to.Ptr(armservicefabricmesh.ResourceStatusReady),
				TCP: []*armservicefabricmesh.TCPConfig{
					{
						Name: to.Ptr("web"),
						Destination: &armservicefabricmesh.GatewayDestination{
							ApplicationName: to.Ptr("helloWorldApp"),
							EndpointName:    to.Ptr("helloWorldListener"),
							ServiceName:     to.Ptr("helloWorldService"),
						},
						Port: to.Ptr[int32](80),
					}},
				HTTP: []*armservicefabricmesh.HTTPConfig{
					{
						Name: to.Ptr("contosoWebsite"),
						Hosts: []*armservicefabricmesh.HTTPHostConfig{
							{
								Name: to.Ptr("contoso.com"),
								Routes: []*armservicefabricmesh.HTTPRouteConfig{
									{
										Name: to.Ptr("index"),
										Destination: &armservicefabricmesh.GatewayDestination{
											ApplicationName: to.Ptr("httpHelloWorldApp"),
											EndpointName:    to.Ptr("indexHttpEndpoint"),
											ServiceName:     to.Ptr("indexService"),
										},
										Match: &armservicefabricmesh.HTTPRouteMatchRule{
											Path: &armservicefabricmesh.HTTPRouteMatchPath{
												Type:    to.Ptr(armservicefabricmesh.PathMatchTypePrefix),
												Rewrite: to.Ptr("/"),
												Value:   to.Ptr("/index"),
											},
											Headers: []*armservicefabricmesh.HTTPRouteMatchHeader{
												{
													Name:  to.Ptr("accept"),
													Type:  to.Ptr(armservicefabricmesh.HeaderMatchTypeExact),
													Value: to.Ptr("application/json"),
												}},
										},
									}},
							}},
						Port: to.Ptr[int32](8081),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_Delete(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewGatewayClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sbz_demo",
		"sampleGateway",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/delete.json: %v", err)
	}
}

func TestGateway_ListByResourceGroup(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/list_byResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListGatewaysByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewGatewayClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("sbz_demo",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/list_byResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.GatewayResourceDescriptionList{
			Value: []*armservicefabricmesh.GatewayResourceDescription{
				{
					Name:     to.Ptr("sampleGateway"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/gateways"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/gateways/sampleGateway"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.GatewayResourceProperties{
						Description: to.Ptr("Service Fabric Mesh sample gateway."),
						DestinationNetwork: &armservicefabricmesh.NetworkRef{
							Name: to.Ptr("helloWorldNetwork"),
						},
						IPAddress: to.Ptr("192.168.1.1"),
						SourceNetwork: &armservicefabricmesh.NetworkRef{
							Name: to.Ptr("Open"),
						},
						Status: to.Ptr(armservicefabricmesh.ResourceStatusReady),
						TCP: []*armservicefabricmesh.TCPConfig{
							{
								Name: to.Ptr("web"),
								Destination: &armservicefabricmesh.GatewayDestination{
									ApplicationName: to.Ptr("helloWorldApp"),
									EndpointName:    to.Ptr("helloWorldListener"),
									ServiceName:     to.Ptr("helloWorldService"),
								},
								Port: to.Ptr[int32](80),
							}},
						HTTP: []*armservicefabricmesh.HTTPConfig{
							{
								Name: to.Ptr("contosoWebsite"),
								Hosts: []*armservicefabricmesh.HTTPHostConfig{
									{
										Name: to.Ptr("contoso.com"),
										Routes: []*armservicefabricmesh.HTTPRouteConfig{
											{
												Name: to.Ptr("index"),
												Destination: &armservicefabricmesh.GatewayDestination{
													ApplicationName: to.Ptr("httpHelloWorldApp"),
													EndpointName:    to.Ptr("indexHttpEndpoint"),
													ServiceName:     to.Ptr("indexService"),
												},
												Match: &armservicefabricmesh.HTTPRouteMatchRule{
													Path: &armservicefabricmesh.HTTPRouteMatchPath{
														Type:    to.Ptr(armservicefabricmesh.PathMatchTypePrefix),
														Rewrite: to.Ptr("/"),
														Value:   to.Ptr("/index"),
													},
													Headers: []*armservicefabricmesh.HTTPRouteMatchHeader{
														{
															Name:  to.Ptr("accept"),
															Type:  to.Ptr(armservicefabricmesh.HeaderMatchTypeExact),
															Value: to.Ptr("application/json"),
														}},
												},
											}},
									}},
								Port: to.Ptr[int32](8081),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/list_byResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_ListBySubscription(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/list_bySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListGatewaysBySubscriptionId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewGatewayClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/list_bySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.GatewayResourceDescriptionList{
			Value: []*armservicefabricmesh.GatewayResourceDescription{
				{
					Name:     to.Ptr("sampleGateway"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/gateways"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/gateways/sampleGateway"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.GatewayResourceProperties{
						Description: to.Ptr("Service Fabric Mesh sample gateway."),
						DestinationNetwork: &armservicefabricmesh.NetworkRef{
							Name: to.Ptr("helloWorldNetwork"),
						},
						IPAddress: to.Ptr("192.168.1.1"),
						SourceNetwork: &armservicefabricmesh.NetworkRef{
							Name: to.Ptr("Open"),
						},
						Status: to.Ptr(armservicefabricmesh.ResourceStatusReady),
						TCP: []*armservicefabricmesh.TCPConfig{
							{
								Name: to.Ptr("web"),
								Destination: &armservicefabricmesh.GatewayDestination{
									ApplicationName: to.Ptr("helloWorldApp"),
									EndpointName:    to.Ptr("helloWorldListener"),
									ServiceName:     to.Ptr("helloWorldService"),
								},
								Port: to.Ptr[int32](80),
							}},
						HTTP: []*armservicefabricmesh.HTTPConfig{
							{
								Name: to.Ptr("contosoWebsite"),
								Hosts: []*armservicefabricmesh.HTTPHostConfig{
									{
										Name: to.Ptr("contoso.com"),
										Routes: []*armservicefabricmesh.HTTPRouteConfig{
											{
												Name: to.Ptr("index"),
												Destination: &armservicefabricmesh.GatewayDestination{
													ApplicationName: to.Ptr("httpHelloWorldApp"),
													EndpointName:    to.Ptr("indexHttpEndpoint"),
													ServiceName:     to.Ptr("indexService"),
												},
												Match: &armservicefabricmesh.HTTPRouteMatchRule{
													Path: &armservicefabricmesh.HTTPRouteMatchPath{
														Type:    to.Ptr(armservicefabricmesh.PathMatchTypePrefix),
														Rewrite: to.Ptr("/"),
														Value:   to.Ptr("/index"),
													},
													Headers: []*armservicefabricmesh.HTTPRouteMatchHeader{
														{
															Name:  to.Ptr("accept"),
															Type:  to.Ptr(armservicefabricmesh.HeaderMatchTypeExact),
															Value: to.Ptr("application/json"),
														}},
												},
											}},
									}},
								Port: to.Ptr[int32](8081),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/gateways/list_bySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_Create(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/create_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateApplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewApplicationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"sbz_demo",
		"sampleApplication",
		armservicefabricmesh.ApplicationResourceDescription{
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.ApplicationResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample application."),
				Services: []*armservicefabricmesh.ServiceResourceDescription{
					{
						Name: to.Ptr("helloWorldService"),
						Properties: &armservicefabricmesh.ServiceResourceProperties{
							Description:  to.Ptr("SeaBreeze Hello World Service."),
							ReplicaCount: to.Ptr[int32](1),
							CodePackages: []*armservicefabricmesh.ContainerCodePackageProperties{
								{
									Name: to.Ptr("helloWorldCode"),
									Endpoints: []*armservicefabricmesh.EndpointProperties{
										{
											Name: to.Ptr("helloWorldListener"),
											Port: to.Ptr[int32](80),
										}},
									Image: to.Ptr("seabreeze/sbz-helloworld:1.0-alpine"),
									Resources: &armservicefabricmesh.ResourceRequirements{
										Requests: &armservicefabricmesh.ResourceRequests{
											CPU:        to.Ptr[float64](1),
											MemoryInGB: to.Ptr[float64](1),
										},
									},
								}},
							NetworkRefs: []*armservicefabricmesh.NetworkRef{
								{
									Name: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
									EndpointRefs: []*armservicefabricmesh.EndpointRef{
										{
											Name: to.Ptr("helloWorldListener"),
										}},
								}},
							OSType: to.Ptr(armservicefabricmesh.OperatingSystemTypeLinux),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/create_update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.ApplicationResourceDescription{
			Name:     to.Ptr("sampleApplication"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/applications"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/applications/sampleApplication"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.ApplicationResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample application."),
				HealthState: to.Ptr(armservicefabricmesh.HealthStateOk),
				ServiceNames: []*string{
					to.Ptr("helloWorldService")},
				Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/create_update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetApplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewApplicationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"sampleApplication",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.ApplicationResourceDescription{
			Name:     to.Ptr("sampleApplication"),
			Type:     to.Ptr("Microsoft.ServiceFabricMesh/applications"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/applications/sampleApplication"),
			Location: to.Ptr("EastUS"),
			Tags:     map[string]*string{},
			Properties: &armservicefabricmesh.ApplicationResourceProperties{
				Description: to.Ptr("Service Fabric Mesh sample application."),
				HealthState: to.Ptr(armservicefabricmesh.HealthStateOk),
				ServiceNames: []*string{
					to.Ptr("helloWorldService")},
				Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_Delete(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteApplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewApplicationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sbz_demo",
		"sampleApplication",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/delete.json: %v", err)
	}
}

func TestApplication_ListByResourceGroup(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/list_byResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListApplicationsByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewApplicationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("sbz_demo",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/list_byResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.ApplicationResourceDescriptionList{
			Value: []*armservicefabricmesh.ApplicationResourceDescription{
				{
					Name:     to.Ptr("sampleApplication"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/applications"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/applications/sampleApplication"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.ApplicationResourceProperties{
						Description: to.Ptr("Service Fabric Mesh sample application."),
						HealthState: to.Ptr(armservicefabricmesh.HealthStateOk),
						ServiceNames: []*string{
							to.Ptr("helloWorldService")},
						Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/list_byResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_ListBySubscription(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/list_bySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListApplicationsBySubscriptionId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewApplicationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/list_bySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.ApplicationResourceDescriptionList{
			Value: []*armservicefabricmesh.ApplicationResourceDescription{
				{
					Name:     to.Ptr("sampleApplication"),
					Type:     to.Ptr("Microsoft.ServiceFabricMesh/applications"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/applications/sampleApplication"),
					Location: to.Ptr("EastUS"),
					Tags:     map[string]*string{},
					Properties: &armservicefabricmesh.ApplicationResourceProperties{
						Description: to.Ptr("Service Fabric Mesh sample application."),
						HealthState: to.Ptr(armservicefabricmesh.HealthStateOk),
						ServiceNames: []*string{
							to.Ptr("helloWorldService")},
						Status:            to.Ptr(armservicefabricmesh.ResourceStatusReady),
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/list_bySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestService_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"sampleApplication",
		"helloWorldService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.ServiceResourceDescription{
			Name: to.Ptr("helloWorldService"),
			Type: to.Ptr("Microsoft.ServiceFabricMesh/services"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/applications/sampleApplication/services/helloWorldService"),
			Properties: &armservicefabricmesh.ServiceResourceProperties{
				Description:  to.Ptr("SeaBreeze Hello World Service."),
				HealthState:  to.Ptr(armservicefabricmesh.HealthStateOk),
				ReplicaCount: to.Ptr[int32](1),
				Status:       to.Ptr(armservicefabricmesh.ResourceStatusReady),
				CodePackages: []*armservicefabricmesh.ContainerCodePackageProperties{
					{
						Name: to.Ptr("helloWorldCode"),
						Endpoints: []*armservicefabricmesh.EndpointProperties{
							{
								Name: to.Ptr("helloWorldListener"),
								Port: to.Ptr[int32](80),
							}},
						Image: to.Ptr("seabreeze/sbz-helloworld:1.0-alpine"),
						Resources: &armservicefabricmesh.ResourceRequirements{
							Requests: &armservicefabricmesh.ResourceRequests{
								CPU:        to.Ptr[float64](1),
								MemoryInGB: to.Ptr[float64](1),
							},
						},
					}},
				NetworkRefs: []*armservicefabricmesh.NetworkRef{
					{
						Name: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
						EndpointRefs: []*armservicefabricmesh.EndpointRef{
							{
								Name: to.Ptr("helloWorldListener"),
							}},
					}},
				OSType: to.Ptr(armservicefabricmesh.OperatingSystemTypeLinux),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestService_List(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("sbz_demo",
		"sampleApplication",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.ServiceResourceDescriptionList{
			Value: []*armservicefabricmesh.ServiceResourceDescription{
				{
					Name: to.Ptr("helloWorldService"),
					Type: to.Ptr("Microsoft.ServiceFabricMesh/services"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/applications/sampleApplication/services/helloWorldService"),
					Properties: &armservicefabricmesh.ServiceResourceProperties{
						Description:  to.Ptr("SeaBreeze Hello World Service."),
						HealthState:  to.Ptr(armservicefabricmesh.HealthStateOk),
						ReplicaCount: to.Ptr[int32](1),
						Status:       to.Ptr(armservicefabricmesh.ResourceStatusReady),
						CodePackages: []*armservicefabricmesh.ContainerCodePackageProperties{
							{
								Name: to.Ptr("helloWorldCode"),
								Endpoints: []*armservicefabricmesh.EndpointProperties{
									{
										Name: to.Ptr("helloWorldListener"),
										Port: to.Ptr[int32](80),
									}},
								Image: to.Ptr("seabreeze/sbz-helloworld:1.0-alpine"),
								Resources: &armservicefabricmesh.ResourceRequirements{
									Requests: &armservicefabricmesh.ResourceRequests{
										CPU:        to.Ptr[float64](1),
										MemoryInGB: to.Ptr[float64](1),
									},
								},
							}},
						NetworkRefs: []*armservicefabricmesh.NetworkRef{
							{
								Name: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
								EndpointRefs: []*armservicefabricmesh.EndpointRef{
									{
										Name: to.Ptr("helloWorldListener"),
									}},
							}},
						OSType: to.Ptr(armservicefabricmesh.OperatingSystemTypeLinux),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceReplica_Get(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicaGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewServiceReplicaClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sbz_demo",
		"helloWorldApp",
		"helloWorldService",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.ServiceReplicaDescription{
			CodePackages: []*armservicefabricmesh.ContainerCodePackageProperties{
				{
					Name: to.Ptr("helloWorldCode"),
					Endpoints: []*armservicefabricmesh.EndpointProperties{
						{
							Name: to.Ptr("helloWorldListener"),
							Port: to.Ptr[int32](80),
						}},
					Image: to.Ptr("seabreeze/sbz-helloworld:1.0-alpine"),
					InstanceView: &armservicefabricmesh.ContainerInstanceView{
						CurrentState: &armservicefabricmesh.ContainerState{
							ExitCode: to.Ptr("0"),
							State:    to.Ptr("Running"),
						},
						Events: []*armservicefabricmesh.ContainerEvent{
							{
								Name:           to.Ptr("Created"),
								Type:           to.Ptr("Normal"),
								Count:          to.Ptr[int32](3),
								FirstTimestamp: to.Ptr("2018-04-05T22:37:20.9016844"),
								LastTimestamp:  to.Ptr("2018-04-06T06:36:06.0887046"),
								Message:        to.Ptr("Container created and started."),
							},
							{
								Name:           to.Ptr("Stopped"),
								Type:           to.Ptr("Normal"),
								Count:          to.Ptr[int32](1),
								FirstTimestamp: to.Ptr("2018-04-06T06:34:00.6622454"),
								LastTimestamp:  to.Ptr("2018-04-06T06:34:00.6622454"),
								Message:        to.Ptr("Container was stopped."),
							}},
						PreviousState: &armservicefabricmesh.ContainerState{
							ExitCode: to.Ptr("0"),
							State:    to.Ptr("NotSpecified"),
						},
						RestartCount: to.Ptr[int32](1),
					},
					Resources: &armservicefabricmesh.ResourceRequirements{
						Requests: &armservicefabricmesh.ResourceRequests{
							CPU:        to.Ptr[float64](1),
							MemoryInGB: to.Ptr[float64](1),
						},
					},
				}},
			NetworkRefs: []*armservicefabricmesh.NetworkRef{
				{
					Name: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
					EndpointRefs: []*armservicefabricmesh.EndpointRef{
						{
							Name: to.Ptr("helloWorldListener"),
						}},
				}},
			OSType:      to.Ptr(armservicefabricmesh.OperatingSystemTypeLinux),
			ReplicaName: to.Ptr("0"),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceReplicaDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceReplicaDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceReplica_List(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicasGetAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewServiceReplicaClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("sbz_demo",
		"sampleApplication",
		"helloWorldService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabricmesh.ServiceReplicaDescriptionList{
			Value: []*armservicefabricmesh.ServiceReplicaDescription{
				{
					CodePackages: []*armservicefabricmesh.ContainerCodePackageProperties{
						{
							Name: to.Ptr("helloWorldCode"),
							Endpoints: []*armservicefabricmesh.EndpointProperties{
								{
									Name: to.Ptr("helloWorldListener"),
									Port: to.Ptr[int32](80),
								}},
							Image: to.Ptr("seabreeze/sbz-helloworld:1.0-alpine"),
							InstanceView: &armservicefabricmesh.ContainerInstanceView{
								CurrentState: &armservicefabricmesh.ContainerState{
									ExitCode: to.Ptr("0"),
									State:    to.Ptr("Running"),
								},
								Events: []*armservicefabricmesh.ContainerEvent{
									{
										Name:           to.Ptr("Created"),
										Type:           to.Ptr("Normal"),
										Count:          to.Ptr[int32](3),
										FirstTimestamp: to.Ptr("2018-04-05T22:37:20.9016844"),
										LastTimestamp:  to.Ptr("2018-04-06T06:36:06.0887046"),
										Message:        to.Ptr("Container created and started."),
									},
									{
										Name:           to.Ptr("Stopped"),
										Type:           to.Ptr("Normal"),
										Count:          to.Ptr[int32](1),
										FirstTimestamp: to.Ptr("2018-04-06T06:34:00.6622454"),
										LastTimestamp:  to.Ptr("2018-04-06T06:34:00.6622454"),
										Message:        to.Ptr("Container was stopped."),
									}},
								PreviousState: &armservicefabricmesh.ContainerState{
									ExitCode: to.Ptr("0"),
									State:    to.Ptr("NotSpecified"),
								},
								RestartCount: to.Ptr[int32](1),
							},
							Resources: &armservicefabricmesh.ResourceRequirements{
								Requests: &armservicefabricmesh.ResourceRequests{
									CPU:        to.Ptr[float64](1),
									MemoryInGB: to.Ptr[float64](1),
								},
							},
						}},
					NetworkRefs: []*armservicefabricmesh.NetworkRef{
						{
							Name: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork"),
							EndpointRefs: []*armservicefabricmesh.EndpointRef{
								{
									Name: to.Ptr("helloWorldListener"),
								}},
						}},
					OSType:      to.Ptr(armservicefabricmesh.OperatingSystemTypeLinux),
					ReplicaName: to.Ptr("0"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceReplicaDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceReplicaDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCodePackage_GetContainerLogs(t *testing.T) {
	// From example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/codepackages/get_logs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetContainerLogs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicefabricmesh.NewCodePackageClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetContainerLogs(ctx,
		"sbz_demo",
		"sbzDocApp",
		"sbzDocService",
		"0",
		"sbzDocCode",
		&armservicefabricmesh.CodePackageClientGetContainerLogsOptions{Tail: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/codepackages/get_logs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicefabricmesh.ContainerLogs{
			Content: to.Ptr(" * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)\n * Downloading style https://assets-cdn.github.com/assets/frameworks-8f281eb0a8d2308ceb36e714ba3c3aec.css\n * Downloading style https://assets-cdn.github.com/assets/github-a698da0d53574b056d3c79ac732d4a70.css\n * Downloading style https://assets-cdn.github.com/assets/site-83dc1f7ebc9c7461fe1eab799b56c4c4.css\n * Cached all downloads in /root/.grip/cache-4.5.2\n167.220.0.83 - - [06/Apr/2018 07:16:02] \"GET / HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:02] \"GET /__/grip/asset/frameworks-8f281eb0a8d2308ceb36e714ba3c3aec.css HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:02] \"GET /__/grip/asset/site-83dc1f7ebc9c7461fe1eab799b56c4c4.css HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:02] \"GET /__/grip/asset/github-a698da0d53574b056d3c79ac732d4a70.css HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:02] \"GET /__/grip/static/octicons/octicons.css HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:03] \"GET /__/grip/static/octicons/octicons.woff2?ef21c39f0ca9b1b5116e5eb7ac5eabe6 HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:03] \"GET /__/grip/static/favicon.ico HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:05] \"GET /seabreeze-index.md HTTP/1.1\" 200 -\n167.220.0.83 - - [06/Apr/2018 07:16:09] \"GET /seabreeze-api-application_get.md HTTP/1.1\" 200 -\n"),
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerLogs) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerLogs)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/services/replicas/codepackages/get_logs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
