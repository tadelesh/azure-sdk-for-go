//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmysql

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AdvisorsClientListByServerPager provides operations for iterating over paged responses.
type AdvisorsClientListByServerPager struct {
	client    *AdvisorsClient
	current   AdvisorsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AdvisorsClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AdvisorsClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AdvisorsResultList.NextLink == nil || len(*p.current.AdvisorsResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AdvisorsClientListByServerPager) NextPage(ctx context.Context) (AdvisorsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AdvisorsClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AdvisorsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AdvisorsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AdvisorsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return AdvisorsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationsClientListByServerPager provides operations for iterating over paged responses.
type ConfigurationsClientListByServerPager struct {
	client    *ConfigurationsClient
	current   ConfigurationsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationsClientListByServerPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationsClientListByServerPager) NextPage(ctx context.Context) (ConfigurationsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationsClientListByServerResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return ConfigurationsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DatabasesClientListByServerPager provides operations for iterating over paged responses.
type DatabasesClientListByServerPager struct {
	client    *DatabasesClient
	current   DatabasesClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DatabasesClientListByServerPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DatabasesClientListByServerPager) NextPage(ctx context.Context) (DatabasesClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DatabasesClientListByServerResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DatabasesClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DatabasesClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DatabasesClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return DatabasesClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FirewallRulesClientListByServerPager provides operations for iterating over paged responses.
type FirewallRulesClientListByServerPager struct {
	client    *FirewallRulesClient
	current   FirewallRulesClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FirewallRulesClientListByServerPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *FirewallRulesClientListByServerPager) NextPage(ctx context.Context) (FirewallRulesClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return FirewallRulesClientListByServerResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FirewallRulesClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FirewallRulesClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FirewallRulesClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return FirewallRulesClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LocationBasedPerformanceTierClientListPager provides operations for iterating over paged responses.
type LocationBasedPerformanceTierClientListPager struct {
	client    *LocationBasedPerformanceTierClient
	current   LocationBasedPerformanceTierClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LocationBasedPerformanceTierClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *LocationBasedPerformanceTierClientListPager) NextPage(ctx context.Context) (LocationBasedPerformanceTierClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return LocationBasedPerformanceTierClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LocationBasedPerformanceTierClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LocationBasedPerformanceTierClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LocationBasedPerformanceTierClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return LocationBasedPerformanceTierClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LocationBasedRecommendedActionSessionsResultClientListPager provides operations for iterating over paged responses.
type LocationBasedRecommendedActionSessionsResultClientListPager struct {
	client    *LocationBasedRecommendedActionSessionsResultClient
	current   LocationBasedRecommendedActionSessionsResultClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LocationBasedRecommendedActionSessionsResultClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LocationBasedRecommendedActionSessionsResultClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationActionsResultList.NextLink == nil || len(*p.current.RecommendationActionsResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *LocationBasedRecommendedActionSessionsResultClientListPager) NextPage(ctx context.Context) (LocationBasedRecommendedActionSessionsResultClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return LocationBasedRecommendedActionSessionsResultClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LocationBasedRecommendedActionSessionsResultClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LocationBasedRecommendedActionSessionsResultClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {

		return LocationBasedRecommendedActionSessionsResultClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return LocationBasedRecommendedActionSessionsResultClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LogFilesClientListByServerPager provides operations for iterating over paged responses.
type LogFilesClientListByServerPager struct {
	client    *LogFilesClient
	current   LogFilesClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LogFilesClientListByServerPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *LogFilesClientListByServerPager) NextPage(ctx context.Context) (LogFilesClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return LogFilesClientListByServerResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LogFilesClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LogFilesClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LogFilesClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return LogFilesClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByServerPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByServerPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByServerPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListByServerPager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListByServerPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListByServerPager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkResourcesClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// QueryTextsClientListByServerPager provides operations for iterating over paged responses.
type QueryTextsClientListByServerPager struct {
	client    *QueryTextsClient
	current   QueryTextsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, QueryTextsClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *QueryTextsClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QueryTextsResultList.NextLink == nil || len(*p.current.QueryTextsResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *QueryTextsClientListByServerPager) NextPage(ctx context.Context) (QueryTextsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return QueryTextsClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return QueryTextsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return QueryTextsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return QueryTextsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return QueryTextsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecommendedActionsClientListByServerPager provides operations for iterating over paged responses.
type RecommendedActionsClientListByServerPager struct {
	client    *RecommendedActionsClient
	current   RecommendedActionsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendedActionsClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecommendedActionsClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationActionsResultList.NextLink == nil || len(*p.current.RecommendationActionsResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecommendedActionsClientListByServerPager) NextPage(ctx context.Context) (RecommendedActionsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecommendedActionsClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecommendedActionsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecommendedActionsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecommendedActionsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return RecommendedActionsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ReplicasClientListByServerPager provides operations for iterating over paged responses.
type ReplicasClientListByServerPager struct {
	client    *ReplicasClient
	current   ReplicasClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ReplicasClientListByServerPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ReplicasClientListByServerPager) NextPage(ctx context.Context) (ReplicasClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ReplicasClientListByServerResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ReplicasClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ReplicasClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ReplicasClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return ReplicasClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServerAdministratorsClientListPager provides operations for iterating over paged responses.
type ServerAdministratorsClientListPager struct {
	client    *ServerAdministratorsClient
	current   ServerAdministratorsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServerAdministratorsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ServerAdministratorsClientListPager) NextPage(ctx context.Context) (ServerAdministratorsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ServerAdministratorsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServerAdministratorsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServerAdministratorsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServerAdministratorsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServerAdministratorsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServerBasedPerformanceTierClientListPager provides operations for iterating over paged responses.
type ServerBasedPerformanceTierClientListPager struct {
	client    *ServerBasedPerformanceTierClient
	current   ServerBasedPerformanceTierClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServerBasedPerformanceTierClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ServerBasedPerformanceTierClientListPager) NextPage(ctx context.Context) (ServerBasedPerformanceTierClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ServerBasedPerformanceTierClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServerBasedPerformanceTierClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServerBasedPerformanceTierClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServerBasedPerformanceTierClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServerBasedPerformanceTierClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServerKeysClientListPager provides operations for iterating over paged responses.
type ServerKeysClientListPager struct {
	client    *ServerKeysClient
	current   ServerKeysClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServerKeysClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServerKeysClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerKeyListResult.NextLink == nil || len(*p.current.ServerKeyListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServerKeysClientListPager) NextPage(ctx context.Context) (ServerKeysClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServerKeysClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServerKeysClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServerKeysClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServerKeysClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServerKeysClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServerSecurityAlertPoliciesClientListByServerPager provides operations for iterating over paged responses.
type ServerSecurityAlertPoliciesClientListByServerPager struct {
	client    *ServerSecurityAlertPoliciesClient
	current   ServerSecurityAlertPoliciesClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServerSecurityAlertPoliciesClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServerSecurityAlertPoliciesClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerSecurityAlertPolicyListResult.NextLink == nil || len(*p.current.ServerSecurityAlertPolicyListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServerSecurityAlertPoliciesClientListByServerPager) NextPage(ctx context.Context) (ServerSecurityAlertPoliciesClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServerSecurityAlertPoliciesClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServerSecurityAlertPoliciesClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServerSecurityAlertPoliciesClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServerSecurityAlertPoliciesClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return ServerSecurityAlertPoliciesClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServersClientListByResourceGroupPager provides operations for iterating over paged responses.
type ServersClientListByResourceGroupPager struct {
	client    *ServersClient
	current   ServersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServersClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ServersClientListByResourceGroupPager) NextPage(ctx context.Context) (ServersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ServersClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ServersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServersClientListPager provides operations for iterating over paged responses.
type ServersClientListPager struct {
	client    *ServersClient
	current   ServersClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServersClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ServersClientListPager) NextPage(ctx context.Context) (ServersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ServersClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TopQueryStatisticsClientListByServerPager provides operations for iterating over paged responses.
type TopQueryStatisticsClientListByServerPager struct {
	client    *TopQueryStatisticsClient
	current   TopQueryStatisticsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopQueryStatisticsClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TopQueryStatisticsClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopQueryStatisticsResultList.NextLink == nil || len(*p.current.TopQueryStatisticsResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TopQueryStatisticsClientListByServerPager) NextPage(ctx context.Context) (TopQueryStatisticsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TopQueryStatisticsClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TopQueryStatisticsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TopQueryStatisticsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TopQueryStatisticsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return TopQueryStatisticsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VirtualNetworkRulesClientListByServerPager provides operations for iterating over paged responses.
type VirtualNetworkRulesClientListByServerPager struct {
	client    *VirtualNetworkRulesClient
	current   VirtualNetworkRulesClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VirtualNetworkRulesClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VirtualNetworkRulesClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkRuleListResult.NextLink == nil || len(*p.current.VirtualNetworkRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VirtualNetworkRulesClientListByServerPager) NextPage(ctx context.Context) (VirtualNetworkRulesClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VirtualNetworkRulesClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VirtualNetworkRulesClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VirtualNetworkRulesClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VirtualNetworkRulesClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return VirtualNetworkRulesClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WaitStatisticsClientListByServerPager provides operations for iterating over paged responses.
type WaitStatisticsClientListByServerPager struct {
	client    *WaitStatisticsClient
	current   WaitStatisticsClientListByServerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WaitStatisticsClientListByServerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WaitStatisticsClientListByServerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WaitStatisticsResultList.NextLink == nil || len(*p.current.WaitStatisticsResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WaitStatisticsClientListByServerPager) NextPage(ctx context.Context) (WaitStatisticsClientListByServerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WaitStatisticsClientListByServerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WaitStatisticsClientListByServerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WaitStatisticsClientListByServerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WaitStatisticsClientListByServerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		return WaitStatisticsClientListByServerResponse{}, err
	}
	p.current = result
	return p.current, nil
}
