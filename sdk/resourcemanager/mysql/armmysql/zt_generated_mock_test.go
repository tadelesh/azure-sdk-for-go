//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmysql_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mysql/armmysql"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServers_Create(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database as a point in time restore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		armmysql.ServerForCreate{
			Location: to.Ptr("brazilsouth"),
			Properties: &armmysql.ServerPropertiesForRestore{
				CreateMode:         to.Ptr(armmysql.CreateModePointInTimeRestore),
				RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-14T00:00:37.467Z"); return t }()),
				SourceServerID:     to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforMySQL/servers/sourceserver"),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
		},
		&armmysql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Server{
			Name:     to.Ptr("targetserver"),
			Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/targetserver"),
			Location: to.Ptr("brazilsouth"),
			Tags: map[string]*string{
				"elasticServer": to.Ptr("1"),
			},
			Properties: &armmysql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T18:02:41.577+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("targetserver.mysql.database.azure.com"),
				SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armmysql.ServerStateReady),
				Version:          to.Ptr(armmysql.ServerVersionFive7),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new server"},
	})
	client = armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testrg",
		"mysqltestsvc4",
		armmysql.ServerForCreate{
			Location: to.Ptr("westus"),
			Properties: &armmysql.ServerPropertiesForDefaultCreate{
				CreateMode:     to.Ptr(armmysql.CreateModeDefault),
				SSLEnforcement: to.Ptr(armmysql.SSLEnforcementEnumEnabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				AdministratorLogin:         to.Ptr("cloudsa"),
				AdministratorLoginPassword: to.Ptr("<administratorLoginPassword>"),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
		},
		&armmysql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Server{
			Name:     to.Ptr("mysqltestsvc4"),
			Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"elasticServer": to.Ptr("1"),
			},
			Properties: &armmysql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T18:02:41.577+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("mysqltestsvc4.mysql.database.azure.com"),
				SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armmysql.ServerStateReady),
				Version:          to.Ptr(armmysql.ServerVersionFive7),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a replica server"},
	})
	client = armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		armmysql.ServerForCreate{
			Location: to.Ptr("westus"),
			Properties: &armmysql.ServerPropertiesForReplica{
				CreateMode:     to.Ptr(armmysql.CreateModeReplica),
				SourceServerID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/MasterResourceGroup/providers/Microsoft.DBforMySQL/servers/masterserver"),
			},
		},
		&armmysql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Server{
			Name:     to.Ptr("targetserver"),
			Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TargetResourceGroup/providers/Microsoft.DBforMySQL/servers/targetserver"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armmysql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T18:02:41.577+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("targetserver.mysql.database.azure.com"),
				MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/MasterResourceGroup/providers/Microsoft.DBforMySQL/servers/masterserver"),
				ReplicaCapacity:          to.Ptr[int32](0),
				ReplicationRole:          to.Ptr("Replica"),
				SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](14),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armmysql.ServerStateReady),
				Version:          to.Ptr(armmysql.ServerVersionFive7),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server as a geo restore "},
	})
	client = armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		armmysql.ServerForCreate{
			Location: to.Ptr("westus"),
			Properties: &armmysql.ServerPropertiesForGeoRestore{
				CreateMode:     to.Ptr(armmysql.CreateModeGeoRestore),
				SourceServerID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforMySQL/servers/sourceserver"),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
		},
		&armmysql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Server{
			Name:     to.Ptr("targetserver"),
			Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/targetserver"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"elasticServer": to.Ptr("1"),
			},
			Properties: &armmysql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T18:02:41.577+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("targetserver.mysql.database.azure.com"),
				SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](14),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armmysql.ServerStateReady),
				Version:          to.Ptr(armmysql.ServerVersionFive7),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Update(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"mysqltestsvc4",
		armmysql.ServerUpdateParameters{
			Properties: &armmysql.ServerUpdateParametersProperties{
				AdministratorLoginPassword: to.Ptr("<administratorLoginPassword>"),
				SSLEnforcement:             to.Ptr(armmysql.SSLEnforcementEnumDisabled),
			},
		},
		&armmysql.ServersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Server{
			Name:     to.Ptr("mysqltestsvc4"),
			Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armmysql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T18:02:41.577+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("mysqltestsvc4.mysql.database.azure.com"),
				SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumDisabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armmysql.ServerStateReady),
				Version:          to.Ptr(armmysql.ServerVersionFive7),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen4_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		&armmysql.ServersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerDelete.json: %v", err)
	}
}

func TestServers_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"mysqltestsvc4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Server{
			Name:     to.Ptr("mysqltestsvc4"),
			Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armmysql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T18:02:41.577+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("mysqltestsvc4.mysql.database.azure.com"),
				MasterServerID:           to.Ptr(""),
				PrivateEndpointConnections: []*armmysql.ServerPrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
						Properties: &armmysql.ServerPrivateEndpointConnectionProperties{
							PrivateEndpoint: &armmysql.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armmysql.ServerPrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr(armmysql.PrivateLinkServiceConnectionStateActionsRequireNone),
								Status:          to.Ptr(armmysql.PrivateLinkServiceConnectionStateStatusApproved),
							},
							ProvisioningState: to.Ptr(armmysql.PrivateEndpointProvisioningState("Succeeded")),
						},
					}},
				PublicNetworkAccess: to.Ptr(armmysql.PublicNetworkAccessEnumEnabled),
				ReplicaCapacity:     to.Ptr[int32](5),
				ReplicationRole:     to.Ptr("None"),
				SSLEnforcement:      to.Ptr(armmysql.SSLEnforcementEnumEnabled),
				StorageProfile: &armmysql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armmysql.ServerStateReady),
				Version:          to.Ptr(armmysql.ServerVersionFive7),
			},
			SKU: &armmysql.SKU{
				Name:     to.Ptr("GP_Gen4_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ServerListResult{
			Value: []*armmysql.Server{
				{
					Name:     to.Ptr("mysqltestsvc1"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1"),
					Location: to.Ptr("westus"),
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:         to.Ptr("testuser"),
						EarliestRestoreDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-07T18:17:35.729321+00:00"); return t }()),
						FullyQualifiedDomainName:   to.Ptr("mysqltestsvc1.mysql.database.azure.com"),
						PrivateEndpointConnections: []*armmysql.ServerPrivateEndpointConnection{},
						PublicNetworkAccess:        to.Ptr(armmysql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:             to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive7),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("B_Gen4_1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierBasic),
					},
				},
				{
					Name:     to.Ptr("mysqltstsvc2"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltstsvc2"),
					Location: to.Ptr("westus"),
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:       to.Ptr("testuser"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-07T18:17:35.729321+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("mysqltstsvc2.mysql.database.azure.com"),
						PrivateEndpointConnections: []*armmysql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltstsvc2/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armmysql.ServerPrivateEndpointConnectionProperties{
									PrivateEndpoint: &armmysql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armmysql.ServerPrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armmysql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armmysql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armmysql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess: to.Ptr(armmysql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:      to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive7),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ServerListResult{
			Value: []*armmysql.Server{
				{
					Name:     to.Ptr("mysqltestsvc1"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1"),
					Location: to.Ptr("westus"),
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:         to.Ptr("testuser"),
						EarliestRestoreDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T23:56:02.627+00:00"); return t }()),
						FullyQualifiedDomainName:   to.Ptr("mysqltestsvc1.mysql.database.azure.com"),
						PrivateEndpointConnections: []*armmysql.ServerPrivateEndpointConnection{},
						PublicNetworkAccess:        to.Ptr(armmysql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:             to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive7),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("B_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierBasic),
					},
				},
				{
					Name:     to.Ptr("mysqltstsvc2"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltstsvc2"),
					Location: to.Ptr("westus"),
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:       to.Ptr("testuser"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T23:56:54.3+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("mysqltstsvc2.mysql.database.azure.com"),
						PrivateEndpointConnections: []*armmysql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltstsvc2/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armmysql.ServerPrivateEndpointConnectionProperties{
									PrivateEndpoint: &armmysql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armmysql.ServerPrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armmysql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armmysql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armmysql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess: to.Ptr(armmysql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:      to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive7),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("mysqltestsvc3"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg1/providers/Microsoft.DBforMySQL/servers/mysqltestsvc3"),
					Location: to.Ptr("westus"),
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:       to.Ptr("testuser"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T23:59:44.847+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("mysqltestsvc3.mysql.database.azure.com"),
						PrivateEndpointConnections: []*armmysql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc3/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armmysql.ServerPrivateEndpointConnectionProperties{
									PrivateEndpoint: &armmysql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armmysql.ServerPrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armmysql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armmysql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armmysql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess: to.Ptr(armmysql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:      to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](35),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
							StorageMB:           to.Ptr[int32](102400),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive7),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("GP_Gen4_4"),
						Capacity: to.Ptr[int32](4),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Restart(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerRestart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerRestart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"TestGroup",
		"testserver",
		&armmysql.ServersClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerRestart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerRestart.json: %v", err)
	}
}

func TestServers_Start(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerStart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginStart(ctx,
		"TestGroup",
		"testserver",
		&armmysql.ServersClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerStart.json: %v", err)
	}
}

func TestServers_Stop(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginStop(ctx,
		"TestGroup",
		"testserver",
		&armmysql.ServersClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerStop.json: %v", err)
	}
}

func TestServers_Upgrade(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerUpgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerUpgrade"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginUpgrade(ctx,
		"TestGroup",
		"testserver",
		armmysql.ServerUpgradeParameters{
			Properties: &armmysql.ServerUpgradeParametersProperties{
				TargetServerVersion: to.Ptr("5.7"),
			},
		},
		&armmysql.ServersClientBeginUpgradeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerUpgrade.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerUpgrade.json: %v", err)
	}
}

func TestReplicas_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ReplicasListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicasListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewReplicasClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testmaster",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ReplicasListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ServerListResult{
			Value: []*armmysql.Server{
				{
					Name:     to.Ptr("testserver"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"elasticServer": to.Ptr("1"),
					},
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:       to.Ptr("cloudsa"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:56:54.3+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver.mysql.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testmaster"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](35),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
							StorageMB:           to.Ptr[int32](256000),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive6),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("testserver1"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"elasticServer": to.Ptr("1"),
					},
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:       to.Ptr("cloudsa"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:56:54.3+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver1.mysql.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testmaster"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](35),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
							StorageMB:           to.Ptr[int32](256000),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive6),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("testserver2"),
					Type:     to.Ptr("Microsoft.DBforMySQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver2"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"elasticServer": to.Ptr("1"),
					},
					Properties: &armmysql.ServerProperties{
						AdministratorLogin:       to.Ptr("cloudsa"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:56:54.3+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver2.mysql.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testmaster"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armmysql.SSLEnforcementEnumEnabled),
						StorageProfile: &armmysql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](35),
							GeoRedundantBackup:  to.Ptr(armmysql.GeoRedundantBackupEnabled),
							StorageMB:           to.Ptr[int32](256000),
						},
						UserVisibleState: to.Ptr(armmysql.ServerStateReady),
						Version:          to.Ptr(armmysql.ServerVersionFive6),
					},
					SKU: &armmysql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armmysql.SKUTierGeneralPurpose),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ReplicasListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		armmysql.FirewallRule{
			Properties: &armmysql.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		},
		&armmysql.FirewallRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.FirewallRule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/firewallRules/rule1"),
			Properties: &armmysql.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		&armmysql.FirewallRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleDelete.json: %v", err)
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.FirewallRule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/firewallRules/rule1"),
			Properties: &armmysql.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.FirewallRuleListResult{
			Value: []*armmysql.FirewallRule{
				{
					Name: to.Ptr("rule1"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/firewallRules/rule1"),
					Properties: &armmysql.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("255.255.255.255"),
						StartIPAddress: to.Ptr("0.0.0.0"),
					},
				},
				{
					Name: to.Ptr("rule2"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/firewallRules/rule2"),
					Properties: &armmysql.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("255.0.0.0"),
						StartIPAddress: to.Ptr("1.0.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/FirewallRuleListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.VirtualNetworkRule{
			Name: to.Ptr("vnet-firewall-rule"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/virtualNetworkRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
			Properties: &armmysql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				State:                            to.Ptr(armmysql.VirtualNetworkRuleStateReady),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		armmysql.VirtualNetworkRule{
			Properties: &armmysql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		},
		&armmysql.VirtualNetworkRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.VirtualNetworkRule{
			Name: to.Ptr("vnet-firewall-rule"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/virtualNetworkRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
			Properties: &armmysql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&armmysql.VirtualNetworkRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesDelete.json: %v", err)
	}
}

func TestVirtualNetworkRules_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual network rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"vnet-test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.VirtualNetworkRuleListResult{
			Value: []*armmysql.VirtualNetworkRule{
				{
					Name: to.Ptr("vnet-firewall-rule"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/virtualNetworkRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
					Properties: &armmysql.VirtualNetworkRuleProperties{
						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						State:                            to.Ptr(armmysql.VirtualNetworkRuleStateReady),
						VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
					},
				},
				{
					Name: to.Ptr("vnet-firewall-rule"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/virtualNetworkRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
					Properties: &armmysql.VirtualNetworkRuleProperties{
						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						State:                            to.Ptr(armmysql.VirtualNetworkRuleStateReady),
						VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/VirtualNetworkRulesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"db1",
		armmysql.Database{
			Properties: &armmysql.DatabaseProperties{
				Charset:   to.Ptr("utf8"),
				Collation: to.Ptr("utf8_general_ci"),
			},
		},
		&armmysql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Database{
			Name: to.Ptr("db1"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/databases"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/databases/db1"),
			Properties: &armmysql.DatabaseProperties{
				Charset:   to.Ptr("utf8"),
				Collation: to.Ptr("utf8_general_ci"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"db1",
		&armmysql.DatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseDelete.json: %v", err)
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"db1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Database{
			Name: to.Ptr("db1"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/databases"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/databases/db1"),
			Properties: &armmysql.DatabaseProperties{
				Charset:   to.Ptr("utf8"),
				Collation: to.Ptr("utf8_general_ci"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.DatabaseListResult{
			Value: []*armmysql.Database{
				{
					Name: to.Ptr("db1"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/databases"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/databases/db1"),
					Properties: &armmysql.DatabaseProperties{
						Charset:   to.Ptr("utf8"),
						Collation: to.Ptr("utf8_general_ci"),
					},
				},
				{
					Name: to.Ptr("db2"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/databases"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/databases/db2"),
					Properties: &armmysql.DatabaseProperties{
						Charset:   to.Ptr("utf8"),
						Collation: to.Ptr("utf8_general_ci"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/DatabaseListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"event_scheduler",
		armmysql.Configuration{
			Properties: &armmysql.ConfigurationProperties{
				Source: to.Ptr("user-override"),
				Value:  to.Ptr("off"),
			},
		},
		&armmysql.ConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Configuration{
			Name: to.Ptr("event_scheduler"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/configurations/event_scheduler"),
			Properties: &armmysql.ConfigurationProperties{
				Description:   to.Ptr("Indicates the status of the Event Scheduler."),
				AllowedValues: to.Ptr("ON,OFF,DISABLED"),
				DataType:      to.Ptr("Enumeration"),
				DefaultValue:  to.Ptr("OFF"),
				Source:        to.Ptr("user-override"),
				Value:         to.Ptr("ON"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Configuration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Configuration)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"event_scheduler",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Configuration{
			Name: to.Ptr("event_scheduler"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforMySQL/servers/testserver/configurations/event_scheduler"),
			Properties: &armmysql.ConfigurationProperties{
				Description:   to.Ptr("Indicates the status of the Event Scheduler."),
				AllowedValues: to.Ptr("ON,OFF,DISABLED"),
				DataType:      to.Ptr("Enumeration"),
				DefaultValue:  to.Ptr("OFF"),
				Source:        to.Ptr("user-override"),
				Value:         to.Ptr("ON"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Configuration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Configuration)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("testrg",
		"mysqltestsvc1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ConfigurationListResult{
			Value: []*armmysql.Configuration{
				{
					Name: to.Ptr("event_scheduler"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/event_scheduler"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Indicates the status of the Event Scheduler."),
						AllowedValues: to.Ptr("ON,OFF,DISABLED"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("div_precision_increment"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/div_precision_increment"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Number of digits by which to increase the scale of the result of division operations."),
						AllowedValues: to.Ptr("0-30"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("4"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("4"),
					},
				},
				{
					Name: to.Ptr("group_concat_max_len"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/group_concat_max_len"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Maximum allowed result length in bytes for the GROUP_CONCAT()."),
						AllowedValues: to.Ptr("4-16777216"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1024"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1024"),
					},
				},
				{
					Name: to.Ptr("innodb_adaptive_hash_index"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_adaptive_hash_index"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Whether innodb adaptive hash indexes are enabled or disabled."),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("ON"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("ON"),
					},
				},
				{
					Name: to.Ptr("innodb_lock_wait_timeout"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_lock_wait_timeout"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The length of time in seconds an InnoDB transaction waits for a row lock before giving up."),
						AllowedValues: to.Ptr("1-3600"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("50"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("50"),
					},
				},
				{
					Name: to.Ptr("interactive_timeout"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/interactive_timeout"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Number of seconds the server waits for activity on an interactive connection before closing it."),
						AllowedValues: to.Ptr("10-1800"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1800"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1800"),
					},
				},
				{
					Name: to.Ptr("log_queries_not_using_indexes"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/log_queries_not_using_indexes"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Logs queries that are expected to retrieve all rows to slow query log."),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("log_throttle_queries_not_using_indexes"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/log_throttle_queries_not_using_indexes"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Limits the number of such queries per minute that can be written to the slow query log."),
						AllowedValues: to.Ptr("0-4294967295"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("log_slow_admin_statements"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/log_slow_admin_statements"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Include slow administrative statements in the statements written to the slow query log."),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("log_slow_slave_statements"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/log_slow_slave_statements"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("When the slow query log is enabled, this variable enables logging for queries that have taken more than long_query_time seconds to execute on the slave."),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("log_bin_trust_function_creators"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/log_bin_trust_function_creators"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("This variable applies when binary logging is enabled. It controls whether stored function creators can be trusted not to create stored functions that will cause unsafe events to be written to the binary log."),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("long_query_time"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/long_query_time"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("If a query takes longer than this many seconds, the server increments the Slow_queries status variable."),
						AllowedValues: to.Ptr("0-1E+100"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("10"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("10"),
					},
				},
				{
					Name: to.Ptr("min_examined_row_limit"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/min_examined_row_limit"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Can be used to cause queries which examine fewer than the stated number of rows not to be logged."),
						AllowedValues: to.Ptr("0-18446744073709551615"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("slow_query_log"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/slow_query_log"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Enable or disable the slow query log"),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("sql_mode"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/sql_mode"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The current server SQL mode."),
						AllowedValues: to.Ptr(",ALLOW_INVALID_DATES,ANSI_QUOTES,ERROR_FOR_DIVISION_BY_ZERO,HIGH_NOT_PRECEDENCE,IGNORE_SPACE,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_BACKSLASH_ESCAPES,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION,NO_FIELD_OPTIONS,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_UNSIGNED_SUBTRACTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY,PAD_CHAR_TO_FULL_LENGTH,PIPES_AS_CONCAT,REAL_AS_FLOAT,STRICT_ALL_TABLES,STRICT_TRANS_TABLES"),
						DataType:      to.Ptr("Set"),
						DefaultValue:  to.Ptr(""),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("wait_timeout"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/wait_timeout"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of seconds the server waits for activity on a noninteractive connection before closing it."),
						AllowedValues: to.Ptr("60-86400"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("120"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("120"),
					},
				},
				{
					Name: to.Ptr("net_read_timeout"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/net_read_timeout"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of seconds the server waits for network reading action, especially for LOAD DATA LOCAL FILE."),
						AllowedValues: to.Ptr("10-3600"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("120"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("120"),
					},
				},
				{
					Name: to.Ptr("net_write_timeout"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/net_write_timeout"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of seconds the server waits for network writing action, especially for LOAD DATA LOCAL FILE."),
						AllowedValues: to.Ptr("10-3600"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("240"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("240"),
					},
				},
				{
					Name: to.Ptr("server_id"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/server_id"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The server ID, used in replication to give each master and slave a unique identity."),
						AllowedValues: to.Ptr("1000-4294967295"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1000"),
						Source:        to.Ptr("user-override"),
						Value:         to.Ptr("1381286943"),
					},
				},
				{
					Name: to.Ptr("max_allowed_packet"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/max_allowed_packet"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The maximum size of one packet or any generated/intermediate string, or any parameter sent by the mysql_stmt_send_long_data() C API function."),
						AllowedValues: to.Ptr("1024-1073741824"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("536870912"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("536870912"),
					},
				},
				{
					Name: to.Ptr("slave_net_timeout"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/slave_net_timeout"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of seconds to wait for more data from the master before the slave considers the connection broken, aborts the read, and tries to reconnect."),
						AllowedValues: to.Ptr("30-3600"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("60"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("60"),
					},
				},
				{
					Name: to.Ptr("time_zone"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/time_zone"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The server time zone"),
						AllowedValues: to.Ptr("[+|-][0]{0,1}[0-9]:[0-5][0-9]|[+|-][1][0-2]:[0-5][0-9]|SYSTEM"),
						DataType:      to.Ptr("String"),
						DefaultValue:  to.Ptr("SYSTEM"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("SYSTEM"),
					},
				},
				{
					Name: to.Ptr("binlog_group_commit_sync_delay"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/binlog_group_commit_sync_delay"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk."),
						AllowedValues: to.Ptr("0,11-1000000"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1000"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1000"),
					},
				},
				{
					Name: to.Ptr("binlog_group_commit_sync_no_delay_count"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/binlog_group_commit_sync_no_delay_count"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The maximum number of transactions to wait for before aborting the current delay as specified by binlog-group-commit-sync-delay."),
						AllowedValues: to.Ptr("0-1000000"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("character_set_server"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/character_set_server"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Use charset_name as the default server character set."),
						AllowedValues: to.Ptr("BIG5,DEC8,CP850,HP8,KOI8R,LATIN1,LATIN2,SWE7,ASCII,UJIS,SJIS,HEBREW,TIS620,EUCKR,KOI8U,GB2312,GREEK,CP1250,GBK,LATIN5,ARMSCII8,UTF8,UCS2,CP866,KEYBCS2,MACCE,MACROMAN,CP852,LATIN7,UTF8MB4,CP1251,UTF16,CP1256,CP1257,UTF32,BINARY,GEOSTD8,CP932,EUCJPMS"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("latin1"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("latin1"),
					},
				},
				{
					Name: to.Ptr("join_buffer_size"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/join_buffer_size"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans."),
						AllowedValues: to.Ptr("128-2097152"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("262144"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("262144"),
					},
				},
				{
					Name: to.Ptr("table_open_cache"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/table_open_cache"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of open tables for all threads."),
						AllowedValues: to.Ptr("1-4000"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("2000"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("2000"),
					},
				},
				{
					Name: to.Ptr("lower_case_table_names"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/lower_case_table_names"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("If set to 1, table names are stored in lowercase on disk and comparisons are not case sensitive. If set to 2, table names are stored as given but compared in lowercase."),
						AllowedValues: to.Ptr("1,2"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("1"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1"),
					},
				},
				{
					Name: to.Ptr("slave_compressed_protocol"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/slave_compressed_protocol"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("This option places an upper limit on the total size in bytes of all relay logs on the slave."),
						AllowedValues: to.Ptr("ON,OFF"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("innodb_io_capacity"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_io_capacity"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Sets an upper limit on I/O activity performed by InnoDB background tasks, such as flushing pages from the buffer pool and merging data from the change buffer."),
						AllowedValues: to.Ptr("100-1500"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("200"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("200"),
					},
				},
				{
					Name: to.Ptr("innodb_read_io_threads"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_read_io_threads"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of I/O threads for read operations in InnoDB."),
						AllowedValues: to.Ptr("1-64"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("4"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("4"),
					},
				},
				{
					Name: to.Ptr("innodb_thread_concurrency"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_thread_concurrency"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("InnoDB tries to keep the number of operating system threads concurrently inside InnoDB less than or equal to the limit given by this variable."),
						AllowedValues: to.Ptr("0-1000"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("innodb_write_io_threads"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_write_io_threads"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of I/O threads for write operations in InnoDB."),
						AllowedValues: to.Ptr("1-64"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("4"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("4"),
					},
				},
				{
					Name: to.Ptr("innodb_page_cleaners"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_page_cleaners"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The number of page cleaner threads that flush dirty pages from buffer pool instances."),
						AllowedValues: to.Ptr("1-64"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("4"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("4"),
					},
				},
				{
					Name: to.Ptr("innodb_online_alter_log_max_size"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_online_alter_log_max_size"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Specifies an upper limit on the size of the temporary log files used during online DDL operations for InnoDB tables."),
						AllowedValues: to.Ptr("65536-2147483648"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("134217728"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("134217728"),
					},
				},
				{
					Name: to.Ptr("init_connect"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/init_connect"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("A string to be executed by the server for each client that connects."),
						AllowedValues: to.Ptr(""),
						DataType:      to.Ptr("String"),
						DefaultValue:  to.Ptr(""),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("tx_isolation"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/tx_isolation"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The default transaction isolation level."),
						AllowedValues: to.Ptr("READ-UNCOMMITTED,READ-COMMITTED,REPEATABLE-READ,SERIALIZABLE"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("REPEATABLE-READ"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("REPEATABLE-READ"),
					},
				},
				{
					Name: to.Ptr("eq_range_index_dive_limit"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/eq_range_index_dive_limit"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("This variable indicates the number of equality ranges in an equality comparison condition when the optimizer should switch from using index dives to index statistics in estimating the number of qualifying rows."),
						AllowedValues: to.Ptr("0-4294967295"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("200"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("200"),
					},
				},
				{
					Name: to.Ptr("innodb_old_blocks_pct"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_old_blocks_pct"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Specifies the approximate percentage of the InnoDB buffer pool used for the old block sublist."),
						AllowedValues: to.Ptr("5-95"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("37"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("37"),
					},
				},
				{
					Name: to.Ptr("innodb_old_blocks_time"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_old_blocks_time"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Non-zero values protect against the buffer pool being filled by data that is referenced only for a brief period, such as during a full table scan."),
						AllowedValues: to.Ptr("0-4294967295"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1000"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1000"),
					},
				},
				{
					Name: to.Ptr("innodb_read_ahead_threshold"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_read_ahead_threshold"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Controls the sensitivity of linear read-ahead that InnoDB uses to prefetch pages into the buffer pool."),
						AllowedValues: to.Ptr("0-64"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("56"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("56"),
					},
				},
				{
					Name: to.Ptr("max_length_for_sort_data"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/max_length_for_sort_data"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("The cutoff on the size of index values that determines which filesort algorithm to use."),
						AllowedValues: to.Ptr("4-8388608"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1024"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1024"),
					},
				},
				{
					Name: to.Ptr("max_connect_errors"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/max_connect_errors"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("If more than this many successive connection requests from a host are interrupted without a successful connection, the server blocks that host from further connections."),
						AllowedValues: to.Ptr("1-18446744073709551615"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("100"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("100"),
					},
				},
				{
					Name: to.Ptr("innodb_thread_sleep_delay"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_thread_sleep_delay"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Defines how long InnoDB threads sleep before joining the InnoDB queue, in microseconds."),
						AllowedValues: to.Ptr("0-1000000"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("10000"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("10000"),
					},
				},
				{
					Name: to.Ptr("innodb_file_format"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/innodb_file_format"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Indicates the InnoDB file format for file-per-table tablespaces."),
						AllowedValues: to.Ptr("Antelope,Barracuda"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("Barracuda"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("Barracuda"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerParameters_ListUpdateConfigurations(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerParametersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginListUpdateConfigurations(ctx,
		"testrg",
		"mysqltestsvc1",
		armmysql.ConfigurationListResult{},
		&armmysql.ServerParametersClientBeginListUpdateConfigurationsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ConfigurationListResult{
			Value: []*armmysql.Configuration{
				{
					Name: to.Ptr("event_scheduler"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/event_scheduler"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Indicates the status of the Event Scheduler."),
						AllowedValues: to.Ptr("ON,OFF,DISABLED"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("OFF"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("OFF"),
					},
				},
				{
					Name: to.Ptr("div_precision_increment"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/configurations/div_precision_increment"),
					Properties: &armmysql.ConfigurationProperties{
						Description:   to.Ptr("Number of digits by which to increase the scale of the result of division operations."),
						AllowedValues: to.Ptr("0-30"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("4"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("4"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogFiles_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/LogFileListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogFileList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewLogFilesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/LogFileListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.LogFileListResult{
			Value: []*armmysql.LogFile{
				{
					Name: to.Ptr("mysql-slow-mysqltestsvc1-2018022823.log"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/logFiles"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc1/logFiles/mysql-slow-mysqltestsvc1-2018022823.log"),
					Properties: &armmysql.LogFileProperties{
						Type:             to.Ptr("slowlog"),
						CreatedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T06:09:20+00:00"); return t }()),
						SizeInKB:         to.Ptr[int64](1),
						URL:              to.Ptr("https://wasd2prodwus1afse42.file.core.windows.net/833c99b2f36c47349e5554b903fe0440/serverlogs/mysql-slow-mysqltestsvc1-2018022823.log?sv=2015-04-05&sr=f&sig=D9Ga4N5Pa%2BPe5Bmjpvs7A0TPD%2FF7IZpk9e4KWR0jgpM%3D&se=2018-03-01T07%3A12%3A13Z&sp=r"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogFileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogFileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/LogFileListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdministrators_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerAdministratorGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"mysqltestsvc4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerAdministratorResource{
			Name: to.Ptr("activeDirectory"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/administrators"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4/administrators/activeDirectory"),
			Properties: &armmysql.ServerAdministratorProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAdministratorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAdministratorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdministrators_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerAdministratorCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"mysqltestsvc4",
		armmysql.ServerAdministratorResource{
			Properties: &armmysql.ServerAdministratorProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&armmysql.ServerAdministratorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerAdministratorResource{
			Name: to.Ptr("activeDirectory"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/administrators"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4/administrators/activeDirectory"),
			Properties: &armmysql.ServerAdministratorProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAdministratorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAdministratorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdministrators_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerAdministratorsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"mysqltestsvc4",
		&armmysql.ServerAdministratorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminDelete.json: %v", err)
	}
}

func TestServerAdministrators_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"get a list of server administrators"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("testrg",
		"mysqltestsvc4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ServerAdministratorResourceListResult{
			Value: []*armmysql.ServerAdministratorResource{
				{
					Name: to.Ptr("ActiveDirectory"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/administrators"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/mysqltestsvc4/administrators/activeDirectory"),
					Properties: &armmysql.ServerAdministratorProperties{
						AdministratorType: to.Ptr("ActiveDirectory"),
						Login:             to.Ptr("bob@contoso.com"),
						Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
						TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerAdministratorResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerAdministratorResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerAdminList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoverableServers_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/RecoverableServersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicasListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewRecoverableServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testsvc4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/RecoverableServersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.RecoverableServerResource{
			Name: to.Ptr("recoverableServers"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/recoverableServers"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/testsvc4/recoverableServers"),
			Properties: &armmysql.RecoverableServerProperties{
				Edition:                     to.Ptr("GeneralPurpose"),
				HardwareGeneration:          to.Ptr("Gen5"),
				LastAvailableBackupDateTime: to.Ptr("2020-11-20T01:06:29.78Z"),
				ServiceLevelObjective:       to.Ptr("GP_Gen5_2"),
				VCore:                       to.Ptr[int32](2),
				Version:                     to.Ptr("5.7"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoverableServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoverableServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/RecoverableServersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerBasedPerformanceTier_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/PerformanceTiersListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PerformanceTiersList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerBasedPerformanceTierClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("testrg",
		"mysqltestsvc1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/PerformanceTiersListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.PerformanceTierListResult{
			Value: []*armmysql.PerformanceTierProperties{
				{
					ID:                     to.Ptr("Basic"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](0),
					MaxStorageMB:           to.Ptr[int32](2097152),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armmysql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_1"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](1),
						},
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						}},
				},
				{
					ID:                     to.Ptr("GeneralPurpose"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armmysql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_64"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				},
				{
					ID:                     to.Ptr("MemoryOptimized"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armmysql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PerformanceTierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PerformanceTierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/PerformanceTiersListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocationBasedPerformanceTier_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/PerformanceTiersListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PerformanceTiersList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewLocationBasedPerformanceTierClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("WestUS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/PerformanceTiersListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.PerformanceTierListResult{
			Value: []*armmysql.PerformanceTierProperties{
				{
					ID:                     to.Ptr("Basic"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](0),
					MaxStorageMB:           to.Ptr[int32](2097152),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armmysql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_1"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](1),
						},
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						}},
				},
				{
					ID:                     to.Ptr("GeneralPurpose"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armmysql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_64"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				},
				{
					ID:                     to.Ptr("MemoryOptimized"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armmysql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PerformanceTierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PerformanceTierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/PerformanceTiersListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCheckNameAvailability_Execute(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewCheckNameAvailabilityClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Execute(ctx,
		armmysql.NameAvailabilityRequest{
			Name: to.Ptr("name1"),
			Type: to.Ptr("Microsoft.DBforMySQL"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.NameAvailability{
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr(""),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/OperationList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.OperationListResult{
			Value: []*armmysql.Operation{
				{
					Name: to.Ptr("Microsoft.DBforMySQL/locations/performanceTiers/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Returns the list of Performance Tiers available."),
						Operation:   to.Ptr("List Performance Tiers"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Performance Tiers"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Return the list of firewall rules for a server or gets the properties for the specified firewall rule."),
						Operation:   to.Ptr("List/Get Firewall Rules"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules/write"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Creates a firewall rule with the specified parameters or update an existing rule."),
						Operation:   to.Ptr("Create/Update Firewall Rule"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/firewallRules/delete"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Deletes an existing firewall rule."),
						Operation:   to.Ptr("Delete Firewall Rule"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Return the list of servers or gets the properties for the specified server."),
						Operation:   to.Ptr("List/Get MySQL Servers"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("MySQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/write"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Creates a server with the specified parameters or update the properties or tags for the specified server."),
						Operation:   to.Ptr("Create/Update MySQL Server"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("MySQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/delete"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Deletes an existing server."),
						Operation:   to.Ptr("Delete MySQL Server"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("MySQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/performanceTiers/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Returns the list of Performance Tiers available."),
						Operation:   to.Ptr("List Performance Tiers"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Performance Tiers"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/recoverableServers/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Return the recoverable MySQL Server info"),
						Operation:   to.Ptr("Get Recoverable MySQL Server info"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Recoverable MySQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Return types of metrics that are available for databases"),
						Operation:   to.Ptr("Get database metric definitions"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"metricSpecifications": []interface{}{
								map[string]interface{}{
									"name":               "cpu_percent",
									"aggregationType":    "Average",
									"displayDescription": "CPU percent",
									"displayName":        "CPU percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "memory_percent",
									"aggregationType":    "Average",
									"displayDescription": "Memory percent",
									"displayName":        "Memory percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "io_consumption_percent",
									"aggregationType":    "Average",
									"displayDescription": "IO percent",
									"displayName":        "IO percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "storage_percent",
									"aggregationType":    "Average",
									"displayDescription": "Storage percentage",
									"displayName":        "Storage percentage",
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "storage_used",
									"aggregationType":    "Average",
									"displayDescription": "Storage used",
									"displayName":        "Storage used",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "storage_limit",
									"aggregationType":    "Average",
									"displayDescription": "Storage limit",
									"displayName":        "Storage limit",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "serverlog_storage_percent",
									"aggregationType":    "Average",
									"displayDescription": "Server Log storage percent",
									"displayName":        "Server Log storage percent",
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "serverlog_storage_usage",
									"aggregationType":    "Average",
									"displayDescription": "Server Log storage used",
									"displayName":        "Server Log storage used",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "serverlog_storage_limit",
									"aggregationType":    "Average",
									"displayDescription": "Server Log storage limit",
									"displayName":        "Server Log storage limit",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "active_connections",
									"aggregationType":    "Average",
									"displayDescription": "Total active connections",
									"displayName":        "Total active connections",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":               "connections_failed",
									"aggregationType":    "Average",
									"displayDescription": "Total failed connections",
									"displayName":        "Total failed connections",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":               "seconds_behind_master",
									"aggregationType":    "Average",
									"displayDescription": "Replication lag in seconds",
									"displayName":        "Replication lag in seconds",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Gets the disagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforMySQL/servers/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armmysql.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft DB for MySQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's threat detection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armmysql.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armmysql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com;user@microsoft.com")},
				RetentionDays:   to.Ptr[int32](0),
				State:           to.Ptr(armmysql.ServerSecurityAlertPolicyStateDisabled),
				StorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armmysql.SecurityAlertPolicyNameDefault,
		armmysql.ServerSecurityAlertPolicy{
			Properties: &armmysql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armmysql.ServerSecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armmysql.ServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armmysql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:   to.Ptr[int32](5),
				State:           to.Ptr(armmysql.ServerSecurityAlertPolicyStateEnabled),
				StorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's threat detection policy with minimal parameters"},
	})
	client = armmysql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armmysql.SecurityAlertPolicyNameDefault,
		armmysql.ServerSecurityAlertPolicy{
			Properties: &armmysql.SecurityAlertPolicyProperties{
				EmailAccountAdmins: to.Ptr(true),
				State:              to.Ptr(armmysql.ServerSecurityAlertPolicyStateDisabled),
			},
		},
		&armmysql.ServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armmysql.SecurityAlertPolicyProperties{
				DisabledAlerts:     []*string{},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses:     []*string{},
				RetentionDays:      to.Ptr[int32](0),
				State:              to.Ptr(armmysql.ServerSecurityAlertPolicyStateEnabled),
				StorageEndpoint:    to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the server's threat detection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("securityalert-4799",
		"securityalert-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ServerSecurityAlertPolicyListResult{
			Value: []*armmysql.ServerSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies"),
					Properties: &armmysql.SecurityAlertPolicyProperties{
						DisabledAlerts: []*string{
							to.Ptr("Access_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@microsoft.com;user@microsoft.com")},
						RetentionDays:   to.Ptr[int32](0),
						State:           to.Ptr(armmysql.ServerSecurityAlertPolicyStateDisabled),
						StorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerSecurityAlertPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerSecurityAlertPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueryTexts_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryTextsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueryTextsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewQueryTextsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryTextsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.QueryText{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/queryTexts"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/queryTexts/1"),
			Properties: &armmysql.QueryTextProperties{
				QueryID:   to.Ptr("1"),
				QueryText: to.Ptr("UPDATE `performance_schema`.`setup_instruments` SET `ENABLED` = ? , `TIMED` = ? WHERE NAME = ?"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryText) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryText)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryTextsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueryTexts_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryTextsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueryTextsListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewQueryTextsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		[]string{
			"1",
			"2"},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryTextsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.QueryTextsResultList{
			Value: []*armmysql.QueryText{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/queryTexts"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/queryTexts/1"),
					Properties: &armmysql.QueryTextProperties{
						QueryID:   to.Ptr("1"),
						QueryText: to.Ptr("UPDATE `performance_schema`.`setup_instruments` SET `ENABLED` = ? , `TIMED` = ? WHERE NAME = ?"),
					},
				},
				{
					Name: to.Ptr("2"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/queryTexts"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/queryTexts/2"),
					Properties: &armmysql.QueryTextProperties{
						QueryID:   to.Ptr("2"),
						QueryText: to.Ptr("UPDATE `performance_schema`.`setup_instruments` SET `ENABLED` = ? , `TIMED` = ? WHERE NAME LIKE ?"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QueryTextsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QueryTextsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryTextsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopQueryStatistics_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/TopQueryStatisticsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TopQueryStatisticsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewTopQueryStatisticsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"66-636923268000000000-636923277000000000-avg-duration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/TopQueryStatisticsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.QueryStatistic{
			Name: to.Ptr("66-636923268000000000-636923277000000000-avg-duration"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/queryStatistics"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/queryStatistic/66-636923268000000000-636923277000000000-avg-duration"),
			Properties: &armmysql.QueryStatisticProperties{
				AggregationFunction: to.Ptr("avg"),
				DatabaseNames: []*string{
					to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/databases/mysql")},
				EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T17:15:00Z"); return t }()),
				MetricDisplayName:   to.Ptr("Query duration"),
				MetricName:          to.Ptr("duration"),
				MetricValue:         to.Ptr[float64](123.301446136),
				MetricValueUnit:     to.Ptr("milliseconds"),
				QueryExecutionCount: to.Ptr[int64](1),
				QueryID:             to.Ptr("66"),
				StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T17:00:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryStatistic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryStatistic)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/TopQueryStatisticsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopQueryStatistics_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/TopQueryStatisticsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TopQueryStatisticsListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewTopQueryStatisticsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		armmysql.TopQueryStatisticsInput{
			Properties: &armmysql.TopQueryStatisticsInputProperties{
				AggregationFunction:  to.Ptr("avg"),
				AggregationWindow:    to.Ptr("PT15M"),
				NumberOfTopQueries:   to.Ptr[int32](5),
				ObservationEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T20:00:00.000Z"); return t }()),
				ObservationStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T20:00:00.000Z"); return t }()),
				ObservedMetric:       to.Ptr("duration"),
			},
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/TopQueryStatisticsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.TopQueryStatisticsResultList{
			Value: []*armmysql.QueryStatistic{
				{
					Name: to.Ptr("66-636923268000000000-636923277000000000-avg-duration"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/queryStatistics"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/queryStatistic/66-636923268000000000-636923277000000000-avg-duration"),
					Properties: &armmysql.QueryStatisticProperties{
						AggregationFunction: to.Ptr("avg"),
						DatabaseNames: []*string{
							to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/databases/mysql")},
						EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T17:15:00Z"); return t }()),
						MetricDisplayName:   to.Ptr("Query duration"),
						MetricName:          to.Ptr("duration"),
						MetricValue:         to.Ptr[float64](123.301446136),
						MetricValueUnit:     to.Ptr("milliseconds"),
						QueryExecutionCount: to.Ptr[int64](1),
						QueryID:             to.Ptr("66"),
						StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T17:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("66-636924483000000000-636924492000000000-avg-duration"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/queryStatistics"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/queryStatistic/66-636924483000000000-636924492000000000-avg-duration"),
					Properties: &armmysql.QueryStatisticProperties{
						AggregationFunction: to.Ptr("avg"),
						DatabaseNames: []*string{
							to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/databases/mysql")},
						EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-03T03:00:00Z"); return t }()),
						MetricDisplayName:   to.Ptr("Query duration"),
						MetricName:          to.Ptr("duration"),
						MetricValue:         to.Ptr[float64](1712.301446136),
						MetricValueUnit:     to.Ptr("milliseconds"),
						QueryExecutionCount: to.Ptr[int64](1),
						QueryID:             to.Ptr("66"),
						StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-03T02:45:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopQueryStatisticsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopQueryStatisticsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/TopQueryStatisticsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWaitStatistics_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/WaitStatisticsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WaitStatisticsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewWaitStatisticsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"636927606000000000-636927615000000000-send-wait/io/socket/sql/client_connection-2--0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/WaitStatisticsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.WaitStatistic{
			Name: to.Ptr("636927606000000000-636927615000000000-send-wait/io/socket/sql/client_connection-2--0"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/waitStatistics"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/waitStatistics/636927606000000000-636927615000000000-send-wait/io/socket/sql/client_connection-2--0"),
			Properties: &armmysql.WaitStatisticProperties{
				Count:         to.Ptr[int64](3),
				DatabaseName:  to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/databases/mysql"),
				EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-06T17:45:00Z"); return t }()),
				EventName:     to.Ptr("wait/io/socket/sql/client_connection"),
				EventTypeName: to.Ptr("send"),
				QueryID:       to.Ptr[int64](2),
				StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-06T17:30:00Z"); return t }()),
				TotalTimeInMs: to.Ptr[float64](12.345),
				UserID:        to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WaitStatistic) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WaitStatistic)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/WaitStatisticsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWaitStatistics_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/WaitStatisticsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WaitStatisticsListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewWaitStatisticsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		armmysql.WaitStatisticsInput{
			Properties: &armmysql.WaitStatisticsInputProperties{
				AggregationWindow:    to.Ptr("PT15M"),
				ObservationEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T20:00:00.000Z"); return t }()),
				ObservationStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T20:00:00.000Z"); return t }()),
			},
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/WaitStatisticsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.WaitStatisticsResultList{
			Value: []*armmysql.WaitStatistic{
				{
					Name: to.Ptr("636927606000000000-636927615000000000-send-wait/io/socket/sql/client_connection-2--0"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/waitStatistics"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/waitStatistics/636927606000000000-636927615000000000-send-wait/io/socket/sql/client_connection-2--0"),
					Properties: &armmysql.WaitStatisticProperties{
						Count:         to.Ptr[int64](2),
						DatabaseName:  to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/databases/mysql"),
						EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-06T17:45:00Z"); return t }()),
						EventName:     to.Ptr("wait/io/socket/sql/client_connection"),
						EventTypeName: to.Ptr("send"),
						QueryID:       to.Ptr[int64](2),
						StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-06T17:30:00Z"); return t }()),
						TotalTimeInMs: to.Ptr[float64](12.345),
						UserID:        to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("636927606000000000-636927615000000000-lock-wait/synch/mutex/mysys/THR_LOCK::mutex-2--0"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/waitStatistics"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/hyshim-test/providers/Microsoft.DBforMySQL/servers/hyshim-wait-stats-fix/waitStatistics/636927606000000000-636927615000000000-lock-wait/synch/mutex/mysys/THR_LOCK::mutex-2--0"),
					Properties: &armmysql.WaitStatisticProperties{
						Count:         to.Ptr[int64](4),
						DatabaseName:  to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/hyshim-test/providers/Microsoft.DBforMySQL/servers/hyshim-wait-stats-fix/databases/"),
						EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-06T17:45:00Z"); return t }()),
						EventName:     to.Ptr("wait/synch/mutex/mysys/THR_LOCK::mutex"),
						EventTypeName: to.Ptr("lock"),
						QueryID:       to.Ptr[int64](2),
						StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-06T17:30:00Z"); return t }()),
						TotalTimeInMs: to.Ptr[float64](56.789),
						UserID:        to.Ptr[int64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WaitStatisticsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WaitStatisticsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/WaitStatisticsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMySQLManagementClient_ResetQueryPerformanceInsightData(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryPerformanceInsightResetData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueryPerformanceInsightResetData"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewManagementClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.ResetQueryPerformanceInsightData(ctx,
		"testResourceGroupName",
		"testServerName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryPerformanceInsightResetData.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.QueryPerformanceInsightResetDataResult{
			Message: to.Ptr("QPI reset data successful"),
			Status:  to.Ptr(armmysql.QueryPerformanceInsightResetDataResultStateSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryPerformanceInsightResetDataResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryPerformanceInsightResetDataResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/QueryPerformanceInsightResetData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMySQLManagementClient_CreateRecommendedActionSession(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RecommendedActionSessionCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewManagementClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateRecommendedActionSession(ctx,
		"testResourceGroupName",
		"testServerName",
		"Index",
		"someDatabaseName",
		&armmysql.ManagementClientBeginCreateRecommendedActionSessionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionCreate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionCreate.json: %v", err)
	}
}

func TestAdvisors_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/AdvisorsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AdvisorsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewAdvisorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"Index",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/AdvisorsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.Advisor{
			Name:       to.Ptr("Index"),
			Type:       to.Ptr("Microsoft.DBforMySQL/servers/advisors"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/advisors/Index"),
			Properties: map[string]interface{}{},
		}
		if !reflect.DeepEqual(exampleRes, res.Advisor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Advisor)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/AdvisorsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdvisors_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/AdvisorsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AdvisorsListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewAdvisorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/AdvisorsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.AdvisorsResultList{
			Value: []*armmysql.Advisor{
				{
					Name:       to.Ptr("Index"),
					Type:       to.Ptr("Microsoft.DBforMySQL/servers/advisors"),
					ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.DBforMySQL/servers/testServerName/advisors/Index"),
					Properties: map[string]interface{}{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AdvisorsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AdvisorsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/AdvisorsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecommendedActions_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RecommendedActionsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewRecommendedActionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"Index",
		"Index-1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.RecommendationAction{
			Name: to.Ptr("Index-1"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/advisors/recommendedActions"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.Sql/servers/testServerName/advisors/Index/recommendedActions/Index-1"),
			Properties: &armmysql.RecommendationActionProperties{
				ActionID:           to.Ptr[int32](1),
				AdvisorName:        to.Ptr("Index"),
				CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T23:43:24Z"); return t }()),
				ExpirationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T23:43:24Z"); return t }()),
				Reason:             to.Ptr("Column `movies_genres`.`movie_id` appear in Join On clause(s)."),
				RecommendationType: to.Ptr("Add"),
				SessionID:          to.Ptr("c63c2114-e2a4-4c7a-98c1-85577d1a5d50"),
				Details: map[string]*string{
					"engine":          to.Ptr("InnoDB"),
					"indexColumns":    to.Ptr("`movies_genres`.`movie_id`"),
					"indexName":       to.Ptr("idx_movie_id"),
					"indexType":       to.Ptr("BTREE"),
					"parentTableName": to.Ptr("movies_genres"),
					"queryIds":        to.Ptr("779"),
					"schemaName":      to.Ptr("movies"),
					"script":          to.Ptr("alter table `movies`.`movies_genres` add index `idx_movie_id` (`movie_id`)"),
					"tableName":       to.Ptr("movies_genres"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecommendationAction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecommendationAction)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecommendedActions_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RecommendedActionsListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewRecommendedActionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		"Index",
		&armmysql.RecommendedActionsClientListByServerOptions{SessionID: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.RecommendationActionsResultList{
			Value: []*armmysql.RecommendationAction{
				{
					Name: to.Ptr("Index-1"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/advisors/recommendedActions"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.Sql/servers/testServerName/advisors/Index/recommendedActions/Index-1"),
					Properties: &armmysql.RecommendationActionProperties{
						ActionID:           to.Ptr[int32](1),
						AdvisorName:        to.Ptr("Index"),
						CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T23:43:24Z"); return t }()),
						ExpirationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T23:43:24Z"); return t }()),
						Reason:             to.Ptr("Column `movies_genres`.`movie_id` appear in Join On clause(s)."),
						RecommendationType: to.Ptr("Add"),
						SessionID:          to.Ptr("c63c2114-e2a4-4c7a-98c1-85577d1a5d50"),
						Details: map[string]*string{
							"engine":          to.Ptr("InnoDB"),
							"indexColumns":    to.Ptr("`movies_genres`.`movie_id`"),
							"indexName":       to.Ptr("idx_movie_id"),
							"indexType":       to.Ptr("BTREE"),
							"parentTableName": to.Ptr("movies_genres"),
							"queryIds":        to.Ptr("779"),
							"schemaName":      to.Ptr("movies"),
							"script":          to.Ptr("alter table `movies`.`movies_genres` add index `idx_movie_id` (`movie_id`)"),
							"tableName":       to.Ptr("movies_genres"),
						},
					},
				},
				{
					Name: to.Ptr("Index-2"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/advisors/recommendedActions"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.Sql/servers/testServerName/advisors/Index/recommendedActions/Index-2"),
					Properties: &armmysql.RecommendationActionProperties{
						ActionID:           to.Ptr[int32](2),
						AdvisorName:        to.Ptr("Index"),
						CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T23:43:24Z"); return t }()),
						ExpirationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T23:43:24Z"); return t }()),
						Reason:             to.Ptr("Column `movies_genres`.`genre` appear in Group By clause(s)."),
						RecommendationType: to.Ptr("Add"),
						SessionID:          to.Ptr("c63c2114-e2a4-4c7a-98c1-85577d1a5d50"),
						Details: map[string]*string{
							"engine":          to.Ptr("InnoDB"),
							"indexColumns":    to.Ptr("`movies_genres`.`genre`"),
							"indexName":       to.Ptr("idx_genre"),
							"indexType":       to.Ptr("BTREE"),
							"parentTableName": to.Ptr("movies_genres"),
							"queryIds":        to.Ptr("779"),
							"schemaName":      to.Ptr("movies"),
							"script":          to.Ptr("alter table `movies`.`movies_genres` add index `idx_genre` (`genre`)"),
							"tableName":       to.Ptr("movies_genres"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecommendationActionsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecommendationActionsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocationBasedRecommendedActionSessionsOperationStatus_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RecommendedActionSessionOperationStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewLocationBasedRecommendedActionSessionsOperationStatusClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"WestUS",
		"aaaabbbb-cccc-dddd-0000-111122223333",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.RecommendedActionSessionsOperationStatus{
			Name:      to.Ptr("aaaabbbb-cccc-dddd-0000-111122223333"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T17:15:00Z"); return t }()),
			Status:    to.Ptr("succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.RecommendedActionSessionsOperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecommendedActionSessionsOperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocationBasedRecommendedActionSessionsResult_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RecommendedActionSessionResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewLocationBasedRecommendedActionSessionsResultClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("WestUS",
		"aaaabbbb-cccc-dddd-0000-111122223333",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionResult.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.RecommendationActionsResultList{
			Value: []*armmysql.RecommendationAction{
				{
					Name: to.Ptr("Index-1"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/advisors/recommendedActions"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.Sql/servers/testServerName/advisors/Index/recommendedActions/Index-1"),
					Properties: &armmysql.RecommendationActionProperties{
						ActionID:           to.Ptr[int32](1),
						AdvisorName:        to.Ptr("Index"),
						CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T23:43:24Z"); return t }()),
						ExpirationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T23:43:24Z"); return t }()),
						Reason:             to.Ptr("Column `movies_genres`.`movie_id` appear in Join On clause(s)."),
						RecommendationType: to.Ptr("Add"),
						SessionID:          to.Ptr("c63c2114-e2a4-4c7a-98c1-85577d1a5d50"),
						Details: map[string]*string{
							"engine":          to.Ptr("InnoDB"),
							"indexColumns":    to.Ptr("`movies_genres`.`movie_id`"),
							"indexName":       to.Ptr("idx_movie_id"),
							"indexType":       to.Ptr("BTREE"),
							"parentTableName": to.Ptr("movies_genres"),
							"queryIds":        to.Ptr("779"),
							"schemaName":      to.Ptr("movies"),
							"script":          to.Ptr("alter table `movies`.`movies_genres` add index `idx_movie_id` (`movie_id`)"),
							"tableName":       to.Ptr("movies_genres"),
						},
					},
				},
				{
					Name: to.Ptr("Index-2"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/advisors/recommendedActions"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testResourceGroupName/providers/Microsoft.Sql/servers/testServerName/advisors/Index/recommendedActions/Index-2"),
					Properties: &armmysql.RecommendationActionProperties{
						ActionID:           to.Ptr[int32](2),
						AdvisorName:        to.Ptr("Index"),
						CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T23:43:24Z"); return t }()),
						ExpirationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T23:43:24Z"); return t }()),
						Reason:             to.Ptr("Column `movies_genres`.`genre` appear in Group By clause(s)."),
						RecommendationType: to.Ptr("Add"),
						SessionID:          to.Ptr("c63c2114-e2a4-4c7a-98c1-85577d1a5d50"),
						Details: map[string]*string{
							"engine":          to.Ptr("InnoDB"),
							"indexColumns":    to.Ptr("`movies_genres`.`genre`"),
							"indexName":       to.Ptr("idx_genre"),
							"indexType":       to.Ptr("BTREE"),
							"parentTableName": to.Ptr("movies_genres"),
							"queryIds":        to.Ptr("779"),
							"schemaName":      to.Ptr("movies"),
							"script":          to.Ptr("alter table `movies`.`movies_genres` add index `idx_genre` (`genre`)"),
							"tableName":       to.Ptr("movies_genres"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecommendationActionsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecommendationActionsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/RecommendedActionSessionResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armmysql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmysql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armmysql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		armmysql.PrivateEndpointConnection{
			Properties: &armmysql.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armmysql.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armmysql.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armmysql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmysql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armmysql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&armmysql.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_UpdateTags(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update private endpoint connection Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		armmysql.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
		},
		&armmysql.PrivateEndpointConnectionsClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armmysql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmysql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armmysql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of private endpoint connections on a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.PrivateEndpointConnectionListResult{
			Value: []*armmysql.PrivateEndpointConnection{
				{
					Name: to.Ptr("private-endpoint-connection-name"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armmysql.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmysql.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
						},
						PrivateLinkServiceConnectionState: &armmysql.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("private-endpoint-connection-name-2"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armmysql.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmysql.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name-2"),
						},
						PrivateLinkServiceConnectionState: &armmysql.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByServer(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private link resources for MySQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateLinkResourcesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.PrivateLinkResourceListResult{
			Value: []*armmysql.PrivateLinkResource{
				{
					Name: to.Ptr("plr"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/privateLinkResources"),
					ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateLinkResources/plr"),
					Properties: &armmysql.PrivateLinkResourceProperties{
						GroupID: to.Ptr("mysqlServer"),
						RequiredMembers: []*string{
							to.Ptr("mysqlServer")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a private link resource for MySQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"plr",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateLinkResourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.PrivateLinkResource{
			Name: to.Ptr("plr"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/privateLinkResources"),
			ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforMySQL/servers/test-svr/privateLinkResources/plr"),
			Properties: &armmysql.PrivateLinkResourceProperties{
				GroupID: to.Ptr("mysqlServer"),
				RequiredMembers: []*string{
					to.Ptr("mysqlServer")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2018-06-01/examples/PrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_List(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the keys for a MySQL Server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("testrg",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmysql.ServerKeyListResult{
			Value: []*armmysql.ServerKey{
				{
					Name: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
					Type: to.Ptr("Microsoft.DBforMySQL/servers/keys"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/testserver/keys/someVault_someKey_01234567890123456789012345678901"),
					Kind: to.Ptr("azurekeyvault"),
					Properties: &armmysql.ServerKeyProperties{
						CreationDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00.0Z"); return t }()),
						ServerKeyType: to.Ptr(armmysql.ServerKeyTypeAzureKeyVault),
						URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerKeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_Get(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the MySQL Server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testserver",
		"someVault_someKey_01234567890123456789012345678901",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerKey{
			Name: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/keys"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/testserver/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armmysql.ServerKeyProperties{
				CreationDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00.0Z"); return t }()),
				ServerKeyType: to.Ptr(armmysql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerKey)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_CreateOrUpdate(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a MySQL Server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testserver",
		"someVault_someKey_01234567890123456789012345678901",
		"testrg",
		armmysql.ServerKey{
			Properties: &armmysql.ServerKeyProperties{
				ServerKeyType: to.Ptr(armmysql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		},
		&armmysql.ServerKeysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmysql.ServerKey{
			Name: to.Ptr("omeVault_someKey_01234567890123456789012345678901"),
			Type: to.Ptr("Microsoft.DBforMySQL/servers/keys"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforMySQL/servers/testserver/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armmysql.ServerKeyProperties{
				CreationDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-01T00:00:00.0Z"); return t }()),
				ServerKeyType: to.Ptr(armmysql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerKey)
			t.Fatalf("Mock response is not equal to example response for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_Delete(t *testing.T) {
	// From example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the MySQL Server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmysql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testserver",
		"someVault_someKey_01234567890123456789012345678901",
		"testrg",
		&armmysql.ServerKeysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2020-01-01/examples/ServerKeyDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
