//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/billing/armbilling"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBillingAccounts_List(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAccountsClient(cred, &options)
	pager := client.List(&armbilling.AccountsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.AccountListResult{
			Value: []*armbilling.Account{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.AccountProperties{
						AccountStatus: to.Ptr(armbilling.AccountStatusActive),
						AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
						AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
						DisplayName:   to.Ptr("Test Account 1"),
						HasReadAccess: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.AccountProperties{
						AccountStatus: to.Ptr(armbilling.AccountStatusActive),
						AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
						AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
						DisplayName:   to.Ptr("Test Account 2"),
						HasReadAccess: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("20000000-0000-0000-0000-000000000002_00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/20000000-0000-0000-0000-000000000002_00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.AccountProperties{
						AccountStatus: to.Ptr(armbilling.AccountStatusActive),
						AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
						AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
						DisplayName:   to.Ptr("Test Account 3"),
						HasReadAccess: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsListWithExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountsListWithExpand"},
	})
	client = armbilling.NewAccountsClient(cred, &options)
	pager = client.List(&armbilling.AccountsClientListOptions{Expand: to.Ptr("soldTo,billingProfiles,billingProfiles/invoiceSections")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsListWithExpand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.AccountListResult{
			Value: []*armbilling.Account{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.AccountProperties{
						AccountStatus: to.Ptr(armbilling.AccountStatusActive),
						AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
						AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
						BillingProfiles: &armbilling.ProfilesOnExpand{
							HasMoreResults: to.Ptr(true),
							Value: []*armbilling.Profile{
								{
									Name: to.Ptr("11000000-0000-0000-0000-000000000000"),
									Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
									ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000000"),
									Properties: &armbilling.ProfileProperties{
										BillTo: &armbilling.AddressDetails{
											AddressLine1: to.Ptr("Test Address1"),
											AddressLine2: to.Ptr("Test Address2"),
											AddressLine3: to.Ptr("Test Address3"),
											City:         to.Ptr("City"),
											CompanyName:  to.Ptr("Contoso"),
											Country:      to.Ptr("US"),
											Email:        to.Ptr("abc@contoso.com"),
											FirstName:    to.Ptr("Test"),
											LastName:     to.Ptr("User"),
											PhoneNumber:  to.Ptr("000-000-0000"),
											PostalCode:   to.Ptr("00000"),
											Region:       to.Ptr("WA"),
										},
										BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeDirect),
										Currency:                to.Ptr("USD"),
										DisplayName:             to.Ptr("BillingProfile1"),
										EnabledAzurePlans: []*armbilling.AzurePlan{
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan"),
												SKUID:          to.Ptr("0001"),
											},
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
												SKUID:          to.Ptr("0002"),
											}},
										HasReadAccess:     to.Ptr(true),
										InvoiceDay:        to.Ptr[int32](5),
										InvoiceEmailOptIn: to.Ptr(true),
										InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
											HasMoreResults: to.Ptr(false),
											Value: []*armbilling.InvoiceSection{
												{
													Name: to.Ptr("invoiceSectionId1"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/invoiceSectionId1"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName1"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Support"),
															"pcCode":       to.Ptr("A123456"),
														},
														State:    to.Ptr(armbilling.InvoiceSectionStateActive),
														SystemID: to.Ptr("9XXX-11XX-XX1-XXXX-XXX"),
													},
												},
												{
													Name: to.Ptr("invoiceSectionId2"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/invoiceSectionId2"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName2"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Finance"),
															"pcCode":       to.Ptr("B223456"),
														},
														State:    to.Ptr(armbilling.InvoiceSectionStateActive),
														SystemID: to.Ptr("9XXX-22XX-XX1-XXXX-XXX"),
													},
												}},
										},
										PoNumber:         to.Ptr("ABC12345"),
										SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
										Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
										StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
										SystemID:         to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
									},
								},
								{
									Name: to.Ptr("11000000-0000-0000-0000-000000000001"),
									Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
									ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000001"),
									Properties: &armbilling.ProfileProperties{
										BillTo: &armbilling.AddressDetails{
											AddressLine1: to.Ptr("Test Address1"),
											AddressLine2: to.Ptr("Test Address2"),
											AddressLine3: to.Ptr("Test Address3"),
											City:         to.Ptr("City"),
											CompanyName:  to.Ptr("Contoso"),
											Country:      to.Ptr("US"),
											Email:        to.Ptr("abc@contoso.com"),
											FirstName:    to.Ptr("Test"),
											LastName:     to.Ptr("User"),
											PhoneNumber:  to.Ptr("000-000-0000"),
											PostalCode:   to.Ptr("00000"),
											Region:       to.Ptr("WA"),
										},
										BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeCSPPartner),
										Currency:                to.Ptr("USD"),
										DisplayName:             to.Ptr("BillingProfile2"),
										EnabledAzurePlans: []*armbilling.AzurePlan{
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan"),
												SKUID:          to.Ptr("0001"),
											},
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
												SKUID:          to.Ptr("0002"),
											}},
										HasReadAccess:     to.Ptr(true),
										InvoiceDay:        to.Ptr[int32](5),
										InvoiceEmailOptIn: to.Ptr(true),
										InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
											HasMoreResults: to.Ptr(false),
											Value: []*armbilling.InvoiceSection{
												{
													Name: to.Ptr("invoiceSectionId11"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000001/invoiceSections/invoiceSectionId11"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName11"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Marketing"),
															"pcCode":       to.Ptr("Z223456"),
														},
														State:    to.Ptr(armbilling.InvoiceSectionStateActive),
														SystemID: to.Ptr("9XXX-33XX-XX1-XXXX-XXX"),
													},
												}},
										},
										PoNumber:      to.Ptr("ABC12345"),
										SpendingLimit: to.Ptr(armbilling.SpendingLimitOff),
										Status:        to.Ptr(armbilling.BillingProfileStatusActive),
										SystemID:      to.Ptr("2XXX-22XX-XX1-XXXX-XXX"),
									},
								}},
						},
						DisplayName:   to.Ptr("Test Account 1"),
						HasReadAccess: to.Ptr(true),
						SoldTo: &armbilling.AddressDetails{
							AddressLine1: to.Ptr("Test Address"),
							AddressLine2: to.Ptr("Test Address"),
							AddressLine3: to.Ptr("Test Address"),
							City:         to.Ptr("City"),
							CompanyName:  to.Ptr("Contoso"),
							Country:      to.Ptr("US"),
							Email:        to.Ptr("abc@contoso.com"),
							FirstName:    to.Ptr("Test"),
							LastName:     to.Ptr("User"),
							PhoneNumber:  to.Ptr("000-000-0000"),
							PostalCode:   to.Ptr("00000"),
							Region:       to.Ptr("WA"),
						},
					},
				},
				{
					Name: to.Ptr("10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.AccountProperties{
						AccountStatus: to.Ptr(armbilling.AccountStatusActive),
						AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
						AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
						BillingProfiles: &armbilling.ProfilesOnExpand{
							HasMoreResults: to.Ptr(true),
							Value: []*armbilling.Profile{
								{
									Name: to.Ptr("11000000-0000-0000-0000-000000000004"),
									Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
									ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000004"),
									Properties: &armbilling.ProfileProperties{
										BillTo: &armbilling.AddressDetails{
											AddressLine1: to.Ptr("Test Address1"),
											AddressLine2: to.Ptr("Test Address2"),
											AddressLine3: to.Ptr("Test Address3"),
											City:         to.Ptr("City"),
											CompanyName:  to.Ptr("Contoso Test"),
											Country:      to.Ptr("US"),
											Email:        to.Ptr("abc@contoso.com"),
											FirstName:    to.Ptr("Test"),
											LastName:     to.Ptr("User"),
											PhoneNumber:  to.Ptr("000-000-0000"),
											PostalCode:   to.Ptr("00000"),
											Region:       to.Ptr("WA"),
										},
										BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeIndirectPartner),
										Currency:                to.Ptr("USD"),
										DisplayName:             to.Ptr("BillingProfile3"),
										EnabledAzurePlans: []*armbilling.AzurePlan{
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan"),
												SKUID:          to.Ptr("0001"),
											},
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
												SKUID:          to.Ptr("0002"),
											}},
										HasReadAccess: to.Ptr(true),
										IndirectRelationshipInfo: &armbilling.IndirectRelationshipInfo{
											BillingAccountName: to.Ptr("20000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
											BillingProfileName: to.Ptr("22000000-0000-0000-0000-000000000001"),
											DisplayName:        to.Ptr("Customer1"),
										},
										InvoiceDay:        to.Ptr[int32](5),
										InvoiceEmailOptIn: to.Ptr(true),
										InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
											HasMoreResults: to.Ptr(true),
											Value: []*armbilling.InvoiceSection{
												{
													Name: to.Ptr("invoiceSectionId3"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000004/invoiceSections/invoiceSectionId3"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName3"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Support"),
															"pcCode":       to.Ptr("C123456"),
														},
														State:       to.Ptr(armbilling.InvoiceSectionStateRestricted),
														SystemID:    to.Ptr("9XXX-44XX-XX1-XXXX-XXX"),
														TargetCloud: to.Ptr(armbilling.TargetCloudUSNat),
													},
												},
												{
													Name: to.Ptr("invoiceSectionId4"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000004/invoiceSections/invoiceSectionId4"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName4"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Marketing"),
															"pcCode":       to.Ptr("D123456"),
														},
														State:       to.Ptr(armbilling.InvoiceSectionStateRestricted),
														SystemID:    to.Ptr("9XXX-55XX-XX1-XXXX-XXX"),
														TargetCloud: to.Ptr(armbilling.TargetCloudUSSec),
													},
												}},
										},
										PoNumber:         to.Ptr("ABC12345"),
										SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
										Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
										StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
										SystemID:         to.Ptr("3XXX-33XX-XX1-XXXX-XXX"),
										TargetClouds: []*armbilling.TargetCloud{
											to.Ptr(armbilling.TargetCloudUSNat),
											to.Ptr(armbilling.TargetCloudUSSec)},
									},
								},
								{
									Name: to.Ptr("11000000-0000-0000-0000-000000000005"),
									Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
									ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000005"),
									Properties: &armbilling.ProfileProperties{
										BillTo: &armbilling.AddressDetails{
											AddressLine1: to.Ptr("Test Address1"),
											AddressLine2: to.Ptr("Test Address2"),
											AddressLine3: to.Ptr("Test Address3"),
											City:         to.Ptr("City"),
											CompanyName:  to.Ptr("Contoso Test"),
											Country:      to.Ptr("US"),
											Email:        to.Ptr("abc@contoso.com"),
											FirstName:    to.Ptr("Test"),
											LastName:     to.Ptr("User"),
											PhoneNumber:  to.Ptr("000-000-0000"),
											PostalCode:   to.Ptr("00000"),
											Region:       to.Ptr("WA"),
										},
										BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeIndirectCustomer),
										Currency:                to.Ptr("USD"),
										DisplayName:             to.Ptr("BillingProfile4"),
										EnabledAzurePlans: []*armbilling.AzurePlan{
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan"),
												SKUID:          to.Ptr("0001"),
											},
											{
												SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
												SKUID:          to.Ptr("0002"),
											}},
										HasReadAccess: to.Ptr(true),
										IndirectRelationshipInfo: &armbilling.IndirectRelationshipInfo{
											BillingAccountName: to.Ptr("30000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
											BillingProfileName: to.Ptr("33000000-0000-0000-0000-000000000001"),
											DisplayName:        to.Ptr("Partner1"),
										},
										InvoiceDay:        to.Ptr[int32](5),
										InvoiceEmailOptIn: to.Ptr(true),
										InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
											HasMoreResults: to.Ptr(true),
											Value: []*armbilling.InvoiceSection{
												{
													Name: to.Ptr("invoiceSectionId5"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000005/invoiceSections/invoiceSectionId5"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName5"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Finance"),
															"pcCode":       to.Ptr("E123456"),
														},
														State:    to.Ptr(armbilling.InvoiceSectionStateActive),
														SystemID: to.Ptr("9XXX-66XX-XX1-XXXX-XXX"),
													},
												},
												{
													Name: to.Ptr("invoiceSectionId6"),
													Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
													ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/10000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000005/invoiceSections/invoiceSectionId6"),
													Properties: &armbilling.InvoiceSectionProperties{
														DisplayName: to.Ptr("invoiceSectionName6"),
														Labels: map[string]*string{
															"costCategory": to.Ptr("Support"),
															"pcCode":       to.Ptr("O123456"),
														},
														State:       to.Ptr(armbilling.InvoiceSectionStateRestricted),
														SystemID:    to.Ptr("9XXX-77XX-XX1-XXXX-XXX"),
														TargetCloud: to.Ptr(armbilling.TargetCloudUSSec),
													},
												}},
										},
										PoNumber:         to.Ptr("ABC12345"),
										SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
										Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
										StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
										SystemID:         to.Ptr("4XXX-44XX-XX1-XXXX-XXX"),
										TargetClouds: []*armbilling.TargetCloud{
											to.Ptr(armbilling.TargetCloudUSSec)},
									},
								}},
						},
						DisplayName:   to.Ptr("Test Account 2"),
						HasReadAccess: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsListWithExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsListWithExpandForEnrollmentDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountsListWithExpandForEnrollmentDetails"},
	})
	client = armbilling.NewAccountsClient(cred, &options)
	pager = client.List(&armbilling.AccountsClientListOptions{Expand: to.Ptr("enrollmentDetails,departments,enrollmentAccounts")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsListWithExpandForEnrollmentDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.AccountListResult{
			Value: []*armbilling.Account{
				{
					Name: to.Ptr("7645820"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/7645820"),
					Properties: &armbilling.AccountProperties{
						AgreementType: to.Ptr(armbilling.AgreementTypeEnterpriseAgreement),
						Departments: []*armbilling.Department{
							{
								Name: to.Ptr("departmentId1"),
								Type: to.Ptr("Microsoft.Billing/departments"),
								ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/departmentId1"),
								Properties: &armbilling.DepartmentProperties{
									CostCenter:     to.Ptr("C1"),
									DepartmentName: to.Ptr("departmentName1"),
									Status:         to.Ptr("Active"),
								},
							},
							{
								Name: to.Ptr("departmentId2"),
								Type: to.Ptr("Microsoft.Billing/departments"),
								ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/departmentId2"),
								Properties: &armbilling.DepartmentProperties{
									CostCenter:     to.Ptr("C4"),
									DepartmentName: to.Ptr("departmentName2"),
									Status:         to.Ptr("Active"),
								},
							}},
						EnrollmentAccounts: []*armbilling.EnrollmentAccount{
							{
								Name: to.Ptr("accountId0"),
								Type: to.Ptr("Microsoft.Billing/enrollmentAccounts"),
								ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/accountId0"),
								Properties: &armbilling.EnrollmentAccountProperties{
									AccountName: to.Ptr("AccountName0"),
									CostCenter:  to.Ptr("C0"),
									EndDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-31T17:32:28Z"); return t }()),
									StartDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
									Status:      to.Ptr("Active"),
								},
							},
							{
								Name: to.Ptr("accountId1"),
								Type: to.Ptr("Microsoft.Billing/enrollmentAccounts"),
								ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/accountId1"),
								Properties: &armbilling.EnrollmentAccountProperties{
									AccountName: to.Ptr("AccountName1"),
									CostCenter:  to.Ptr("C4"),
									EndDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-31T17:32:28Z"); return t }()),
									StartDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
									Status:      to.Ptr("Active"),
								},
							},
							{
								Name: to.Ptr("accountId2"),
								Type: to.Ptr("Microsoft.Billing/enrollmentAccounts"),
								ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/accountId2"),
								Properties: &armbilling.EnrollmentAccountProperties{
									AccountName: to.Ptr("AccountName2"),
									CostCenter:  to.Ptr("C4"),
									EndDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-31T17:32:28Z"); return t }()),
									StartDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
									Status:      to.Ptr("Active"),
								},
							}},
						EnrollmentDetails: &armbilling.Enrollment{
							BillingCycle: to.Ptr("Monthly"),
							Channel:      to.Ptr("EaDirect"),
							CountryCode:  to.Ptr("US"),
							Currency:     to.Ptr("USD"),
							EndDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-31T17:32:28Z"); return t }()),
							Policies: &armbilling.EnrollmentPolicies{
								AccountOwnerViewCharges:    to.Ptr(true),
								DepartmentAdminViewCharges: to.Ptr(true),
								MarketplaceEnabled:         to.Ptr(true),
								ReservedInstancesEnabled:   to.Ptr(true),
							},
							StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
							Status:    to.Ptr("Active"),
							Language:  to.Ptr("en"),
						},
						SoldTo: &armbilling.AddressDetails{
							AddressLine1: to.Ptr("Test Address"),
							AddressLine2: to.Ptr("Test Address"),
							AddressLine3: to.Ptr("Test Address"),
							City:         to.Ptr("City"),
							Country:      to.Ptr("US"),
							PostalCode:   to.Ptr("00000"),
							Region:       to.Ptr("WA"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountsListWithExpandForEnrollmentDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingAccounts_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountWithExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountWithExpand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAccountsClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		&armbilling.AccountsClientGetOptions{Expand: to.Ptr("soldTo,billingProfiles,billingProfiles/invoiceSections")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountWithExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Account{
			Name: to.Ptr("{billingAccountName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
			Properties: &armbilling.AccountProperties{
				AccountStatus: to.Ptr(armbilling.AccountStatusActive),
				AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
				AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
				BillingProfiles: &armbilling.ProfilesOnExpand{
					HasMoreResults: to.Ptr(true),
					Value: []*armbilling.Profile{
						{
							Name: to.Ptr("11000000-0000-0000-0000-000000000000"),
							Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
							ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
							Properties: &armbilling.ProfileProperties{
								BillTo: &armbilling.AddressDetails{
									AddressLine1: to.Ptr("Test Address1"),
									AddressLine2: to.Ptr("Test Address2"),
									AddressLine3: to.Ptr("Test Address3"),
									City:         to.Ptr("City"),
									CompanyName:  to.Ptr("Contoso"),
									Country:      to.Ptr("US"),
									Email:        to.Ptr("abc@contoso.com"),
									FirstName:    to.Ptr("Test"),
									LastName:     to.Ptr("User"),
									PhoneNumber:  to.Ptr("000-000-0000"),
									PostalCode:   to.Ptr("00000"),
									Region:       to.Ptr("WA"),
								},
								BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeDirect),
								Currency:                to.Ptr("USD"),
								DisplayName:             to.Ptr("BillingProfile1"),
								EnabledAzurePlans: []*armbilling.AzurePlan{
									{
										SKUDescription: to.Ptr("Microsoft Azure Plan"),
										SKUID:          to.Ptr("0001"),
									},
									{
										SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
										SKUID:          to.Ptr("0002"),
									}},
								HasReadAccess:     to.Ptr(true),
								InvoiceDay:        to.Ptr[int32](5),
								InvoiceEmailOptIn: to.Ptr(true),
								InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
									HasMoreResults: to.Ptr(true),
									Value: []*armbilling.InvoiceSection{
										{
											Name: to.Ptr("invoiceSectionId1"),
											Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
											ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/invoiceSectionId1"),
											Properties: &armbilling.InvoiceSectionProperties{
												DisplayName: to.Ptr("invoiceSectionName1"),
												Labels: map[string]*string{
													"costCategory": to.Ptr("Support"),
													"pcCode":       to.Ptr("A123456"),
												},
												State:    to.Ptr(armbilling.InvoiceSectionStateActive),
												SystemID: to.Ptr("9XXX-11XX-XX1-XXXX-XXX"),
											},
										}},
								},
								PoNumber:         to.Ptr("ABC12345"),
								SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
								Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
								StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
								SystemID:         to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
							},
						},
						{
							Name: to.Ptr("11000000-0000-0000-0000-000000000001"),
							Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
							ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000001"),
							Properties: &armbilling.ProfileProperties{
								BillTo: &armbilling.AddressDetails{
									AddressLine1: to.Ptr("Test Address1"),
									AddressLine2: to.Ptr("Test Address2"),
									AddressLine3: to.Ptr("Test Address3"),
									City:         to.Ptr("City"),
									CompanyName:  to.Ptr("Contoso"),
									Country:      to.Ptr("US"),
									Email:        to.Ptr("abc@contoso.com"),
									FirstName:    to.Ptr("Test"),
									LastName:     to.Ptr("User"),
									PhoneNumber:  to.Ptr("000-000-0000"),
									PostalCode:   to.Ptr("00000"),
									Region:       to.Ptr("WA"),
								},
								BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeIndirectCustomer),
								Currency:                to.Ptr("USD"),
								DisplayName:             to.Ptr("BillingProfile2"),
								EnabledAzurePlans: []*armbilling.AzurePlan{
									{
										SKUDescription: to.Ptr("Microsoft Azure Plan"),
										SKUID:          to.Ptr("0001"),
									},
									{
										SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
										SKUID:          to.Ptr("0002"),
									}},
								HasReadAccess: to.Ptr(true),
								IndirectRelationshipInfo: &armbilling.IndirectRelationshipInfo{
									BillingAccountName: to.Ptr("30000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
									BillingProfileName: to.Ptr("33000000-0000-0000-0000-000000000001"),
									DisplayName:        to.Ptr("Partner1"),
								},
								InvoiceDay:        to.Ptr[int32](5),
								InvoiceEmailOptIn: to.Ptr(true),
								InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
									HasMoreResults: to.Ptr(true),
									Value: []*armbilling.InvoiceSection{
										{
											Name: to.Ptr("invoiceSectionId2"),
											Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
											ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000001/invoiceSections/invoiceSectionId2"),
											Properties: &armbilling.InvoiceSectionProperties{
												DisplayName: to.Ptr("invoiceSectionName2"),
												Labels: map[string]*string{
													"costCategory": to.Ptr("Marketing"),
													"pcCode":       to.Ptr("Z223456"),
												},
												State:    to.Ptr(armbilling.InvoiceSectionStateActive),
												SystemID: to.Ptr("9XXX-22XX-XX1-XXXX-XXX"),
											},
										}},
								},
								PoNumber:      to.Ptr("ABC12345"),
								SpendingLimit: to.Ptr(armbilling.SpendingLimitOff),
								Status:        to.Ptr(armbilling.BillingProfileStatusActive),
								SystemID:      to.Ptr("2XXX-22XX-XX1-XXXX-XXX"),
							},
						}},
				},
				DisplayName:   to.Ptr("Test Account 1"),
				HasReadAccess: to.Ptr(true),
				SoldTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address"),
					AddressLine2: to.Ptr("Test Address"),
					AddressLine3: to.Ptr("Test Address"),
					City:         to.Ptr("City"),
					CompanyName:  to.Ptr("Contoso"),
					Country:      to.Ptr("US"),
					Email:        to.Ptr("abc@contoso.com"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PhoneNumber:  to.Ptr("000-000-0000"),
					PostalCode:   to.Ptr("00000"),
					Region:       to.Ptr("WA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountWithExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccounts"},
	})
	client = armbilling.NewAccountsClient(cred, &options)
	res, err = client.Get(ctx,
		"{billingAccountName}",
		&armbilling.AccountsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Account{
			Name: to.Ptr("{billingAccountName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
			Properties: &armbilling.AccountProperties{
				AccountStatus: to.Ptr(armbilling.AccountStatusActive),
				AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
				AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
				DisplayName:   to.Ptr("Test Account"),
				HasReadAccess: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingAccounts_Update(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAccountsClient(cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"{billingAccountName}",
		armbilling.AccountUpdateRequest{
			Properties: &armbilling.AccountProperties{
				DisplayName: to.Ptr("Test Account"),
				SoldTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address 1"),
					City:         to.Ptr("Redmond"),
					CompanyName:  to.Ptr("Contoso"),
					Country:      to.Ptr("US"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PostalCode:   to.Ptr("12345"),
					Region:       to.Ptr("WA"),
				},
			},
		},
		&armbilling.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingAccount.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Account{
			Name: to.Ptr("{billingAccountName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
			Properties: &armbilling.AccountProperties{
				AccountStatus: to.Ptr(armbilling.AccountStatusActive),
				AccountType:   to.Ptr(armbilling.AccountTypeEnterprise),
				AgreementType: to.Ptr(armbilling.AgreementTypeMicrosoftCustomerAgreement),
				DisplayName:   to.Ptr("Test Account"),
				HasReadAccess: to.Ptr(true),
				SoldTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address 1"),
					City:         to.Ptr("Redmond"),
					CompanyName:  to.Ptr("Contoso"),
					Country:      to.Ptr("US"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PostalCode:   to.Ptr("12345"),
					Region:       to.Ptr("WA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingAccounts_ListInvoiceSectionsByCreateSubscriptionPermission(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionsListWithCreateSubPermission.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionsListWithCreateSubPermission"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAccountsClient(cred, &options)
	pager := client.ListInvoiceSectionsByCreateSubscriptionPermission("{billingAccountName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionsListWithCreateSubPermission.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceSectionListWithCreateSubPermissionResult{
			Value: []*armbilling.InvoiceSectionWithCreateSubPermission{
				{
					BillingProfileDisplayName:      to.Ptr("Contoso operations billing"),
					BillingProfileID:               to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
					BillingProfileSpendingLimit:    to.Ptr(armbilling.SpendingLimitForBillingProfileOn),
					BillingProfileStatus:           to.Ptr(armbilling.BillingProfileStatusWarned),
					BillingProfileStatusReasonCode: to.Ptr(armbilling.StatusReasonCodeForBillingProfilePastDue),
					BillingProfileSystemID:         to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
					EnabledAzurePlans: []*armbilling.AzurePlan{
						{
							SKUDescription: to.Ptr("Microsoft Azure Plan"),
							SKUID:          to.Ptr("0001"),
						},
						{
							SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
							SKUID:          to.Ptr("0002"),
						}},
					InvoiceSectionDisplayName: to.Ptr("invoiceSection1"),
					InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000"),
					InvoiceSectionSystemID:    to.Ptr("9XXX-11XX-XX1-XXXX-XXX"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceSectionListWithCreateSubPermissionResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceSectionListWithCreateSubPermissionResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionsListWithCreateSubPermission.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddress_Validate(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AddressInvalid.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AddressInvalid"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAddressClient(cred, &options)
	res, err := client.Validate(ctx,
		armbilling.AddressDetails{
			AddressLine1: to.Ptr("1 Test"),
			City:         to.Ptr("bellevue"),
			Country:      to.Ptr("us"),
			PostalCode:   to.Ptr("12345"),
			Region:       to.Ptr("wa"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AddressInvalid.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.ValidateAddressResponse{
			Status: to.Ptr(armbilling.AddressValidationStatusInvalid),
			SuggestedAddresses: []*armbilling.AddressDetails{
				{
					AddressLine1: to.Ptr("1 Test Address"),
					City:         to.Ptr("Bellevue"),
					Country:      to.Ptr("US"),
					PostalCode:   to.Ptr("98052"),
					Region:       to.Ptr("WA"),
				},
				{
					AddressLine1: to.Ptr("1 Test Address"),
					City:         to.Ptr("Bellevue"),
					Country:      to.Ptr("US"),
					PostalCode:   to.Ptr("12345-0000"),
					Region:       to.Ptr("WA"),
				}},
			ValidationMessage: to.Ptr("Invalid address"),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateAddressResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateAddressResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AddressInvalid.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AddressValid.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AddressValid"},
	})
	client = armbilling.NewAddressClient(cred, &options)
	res, err = client.Validate(ctx,
		armbilling.AddressDetails{
			AddressLine1: to.Ptr("1 Test Address"),
			City:         to.Ptr("bellevue"),
			Country:      to.Ptr("us"),
			PostalCode:   to.Ptr("12345"),
			Region:       to.Ptr("wa"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AddressValid.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.ValidateAddressResponse{
			Status: to.Ptr(armbilling.AddressValidationStatusValid),
			SuggestedAddresses: []*armbilling.AddressDetails{
				{
					AddressLine1: to.Ptr("1 Test Address"),
					City:         to.Ptr("Bellevue"),
					Country:      to.Ptr("US"),
					PostalCode:   to.Ptr("12345-0000"),
					Region:       to.Ptr("WA"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateAddressResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateAddressResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AddressValid.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableBalances_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AvailableBalanceByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailableBalanceByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAvailableBalancesClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AvailableBalanceByBillingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.AvailableBalance{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/availableBalance"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/availableBalance/default"),
			Properties: &armbilling.AvailableBalanceProperties{
				Amount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](500),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableBalance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableBalance)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AvailableBalanceByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstructions_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InstructionsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InstructionsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInstructionsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InstructionsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InstructionListResult{
			Value: []*armbilling.Instruction{
				{
					Name: to.Ptr("TO1:CLIN001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/instructions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/TO1:CLIN001"),
					Properties: &armbilling.InstructionProperties{
						Amount:    to.Ptr[float32](5000),
						EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T21:26:47.997Z"); return t }()),
						StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-30T21:26:47.997Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("TO1:CLIN002"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/instructions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/TO1:CLIN002"),
					Properties: &armbilling.InstructionProperties{
						Amount:    to.Ptr[float32](2000),
						EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T21:26:47.997Z"); return t }()),
						StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-30T21:26:47.997Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InstructionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InstructionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InstructionsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstructions_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Instruction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Instruction"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInstructionsClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{instructionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Instruction.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Instruction{
			Name: to.Ptr("{instructionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/instructions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}"),
			Properties: &armbilling.InstructionProperties{
				Amount:    to.Ptr[float32](5000),
				EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T21:26:47.997Z"); return t }()),
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-30T21:26:47.997Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Instruction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Instruction)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Instruction.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstructions_Put(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInstruction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutInstruction"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInstructionsClient(cred, &options)
	res, err := client.Put(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{instructionName}",
		armbilling.Instruction{
			Properties: &armbilling.InstructionProperties{
				Amount:    to.Ptr[float32](5000),
				EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T21:26:47.997Z"); return t }()),
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-30T21:26:47.997Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInstruction.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Instruction{
			Name: to.Ptr("{instructionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/instructions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}"),
			Properties: &armbilling.InstructionProperties{
				Amount:    to.Ptr[float32](5000),
				EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T21:26:47.997Z"); return t }()),
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-30T21:26:47.997Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Instruction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Instruction)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInstruction.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingProfiles_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilesListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfilesListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProfilesClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		&armbilling.ProfilesClientListByBillingAccountOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilesListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ProfileListResult{
			Value: []*armbilling.Profile{
				{
					Name: to.Ptr("11000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.ProfileProperties{
						BillTo: &armbilling.AddressDetails{
							AddressLine1: to.Ptr("Test Address1"),
							AddressLine2: to.Ptr("Test Address2"),
							AddressLine3: to.Ptr("Test Address3"),
							City:         to.Ptr("City"),
							CompanyName:  to.Ptr("Contoso"),
							Country:      to.Ptr("US"),
							Email:        to.Ptr("abc@contoso.com"),
							FirstName:    to.Ptr("Test"),
							LastName:     to.Ptr("User"),
							PhoneNumber:  to.Ptr("000-000-0000"),
							PostalCode:   to.Ptr("00000"),
							Region:       to.Ptr("WA"),
						},
						BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeDirect),
						Currency:                to.Ptr("USD"),
						DisplayName:             to.Ptr("BillingProfile1"),
						EnabledAzurePlans: []*armbilling.AzurePlan{
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan"),
								SKUID:          to.Ptr("0001"),
							},
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
								SKUID:          to.Ptr("0002"),
							}},
						HasReadAccess:     to.Ptr(true),
						InvoiceDay:        to.Ptr[int32](5),
						InvoiceEmailOptIn: to.Ptr(true),
						PoNumber:          to.Ptr("ABC12345"),
						SpendingLimit:     to.Ptr(armbilling.SpendingLimitOn),
						Status:            to.Ptr(armbilling.BillingProfileStatusWarned),
						StatusReasonCode:  to.Ptr(armbilling.StatusReasonCodePastDue),
						SystemID:          to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
					},
				},
				{
					Name: to.Ptr("11000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.ProfileProperties{
						BillTo: &armbilling.AddressDetails{
							AddressLine1: to.Ptr("Test Address1"),
							AddressLine2: to.Ptr("Test Address2"),
							AddressLine3: to.Ptr("Test Address3"),
							City:         to.Ptr("City"),
							CompanyName:  to.Ptr("Contoso"),
							Country:      to.Ptr("US"),
							Email:        to.Ptr("abc@contoso.com"),
							FirstName:    to.Ptr("Test"),
							LastName:     to.Ptr("User"),
							PhoneNumber:  to.Ptr("000-000-0000"),
							PostalCode:   to.Ptr("00000"),
							Region:       to.Ptr("WA"),
						},
						BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeIndirectCustomer),
						Currency:                to.Ptr("USD"),
						DisplayName:             to.Ptr("BillingProfile2"),
						EnabledAzurePlans: []*armbilling.AzurePlan{
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan"),
								SKUID:          to.Ptr("0001"),
							},
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
								SKUID:          to.Ptr("0002"),
							}},
						HasReadAccess: to.Ptr(true),
						IndirectRelationshipInfo: &armbilling.IndirectRelationshipInfo{
							BillingAccountName: to.Ptr("30000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
							BillingProfileName: to.Ptr("33000000-0000-0000-0000-000000000001"),
							DisplayName:        to.Ptr("Partner1"),
						},
						InvoiceDay:        to.Ptr[int32](5),
						InvoiceEmailOptIn: to.Ptr(true),
						PoNumber:          to.Ptr("ABC12345"),
						SpendingLimit:     to.Ptr(armbilling.SpendingLimitOff),
						Status:            to.Ptr(armbilling.BillingProfileStatusActive),
						SystemID:          to.Ptr("2XXX-22XX-XX1-XXXX-XXX"),
						TargetClouds:      []*armbilling.TargetCloud{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilesListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilesListWithExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfilesListWithExpand"},
	})
	client = armbilling.NewProfilesClient(cred, &options)
	pager = client.ListByBillingAccount("{billingAccountName}",
		&armbilling.ProfilesClientListByBillingAccountOptions{Expand: to.Ptr("invoiceSections")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilesListWithExpand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ProfileListResult{
			Value: []*armbilling.Profile{
				{
					Name: to.Ptr("11000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.ProfileProperties{
						BillTo: &armbilling.AddressDetails{
							AddressLine1: to.Ptr("Test Address1"),
							AddressLine2: to.Ptr("Test Address2"),
							AddressLine3: to.Ptr("Test Address3"),
							City:         to.Ptr("City"),
							CompanyName:  to.Ptr("Contoso"),
							Country:      to.Ptr("US"),
							Email:        to.Ptr("abc@contoso.com"),
							FirstName:    to.Ptr("Test"),
							LastName:     to.Ptr("User"),
							PhoneNumber:  to.Ptr("000-000-0000"),
							PostalCode:   to.Ptr("00000"),
							Region:       to.Ptr("WA"),
						},
						BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeDirect),
						Currency:                to.Ptr("USD"),
						DisplayName:             to.Ptr("BillingProfile1"),
						EnabledAzurePlans: []*armbilling.AzurePlan{
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan"),
								SKUID:          to.Ptr("0001"),
							},
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
								SKUID:          to.Ptr("0002"),
							}},
						HasReadAccess:     to.Ptr(true),
						InvoiceDay:        to.Ptr[int32](5),
						InvoiceEmailOptIn: to.Ptr(true),
						InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
							HasMoreResults: to.Ptr(false),
							Value: []*armbilling.InvoiceSection{
								{
									Name: to.Ptr("invoiceSectionId1"),
									Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
									ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/invoiceSectionId1"),
									Properties: &armbilling.InvoiceSectionProperties{
										DisplayName: to.Ptr("invoiceSectionName1"),
										Labels: map[string]*string{
											"costCategory": to.Ptr("Support"),
											"pcCode":       to.Ptr("A123456"),
										},
										State:    to.Ptr(armbilling.InvoiceSectionStateActive),
										SystemID: to.Ptr("9XXX-11XX-XX1-XXXX-XXX"),
									},
								}},
						},
						PoNumber:         to.Ptr("ABC12345"),
						SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
						Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
						StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
						SystemID:         to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
						TargetClouds:     []*armbilling.TargetCloud{},
					},
				},
				{
					Name: to.Ptr("11000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.ProfileProperties{
						BillTo: &armbilling.AddressDetails{
							AddressLine1: to.Ptr("Test Address1"),
							AddressLine2: to.Ptr("Test Address2"),
							AddressLine3: to.Ptr("Test Address3"),
							City:         to.Ptr("City"),
							CompanyName:  to.Ptr("Contoso"),
							Country:      to.Ptr("US"),
							Email:        to.Ptr("abc@contoso.com"),
							FirstName:    to.Ptr("Test"),
							LastName:     to.Ptr("User"),
							PhoneNumber:  to.Ptr("000-000-0000"),
							PostalCode:   to.Ptr("00000"),
							Region:       to.Ptr("WA"),
						},
						BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeIndirectCustomer),
						Currency:                to.Ptr("USD"),
						DisplayName:             to.Ptr("BillingProfile2"),
						EnabledAzurePlans: []*armbilling.AzurePlan{
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan"),
								SKUID:          to.Ptr("0001"),
							},
							{
								SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
								SKUID:          to.Ptr("0002"),
							}},
						HasReadAccess: to.Ptr(true),
						IndirectRelationshipInfo: &armbilling.IndirectRelationshipInfo{
							BillingAccountName: to.Ptr("30000000-0000-0000-0000-000000000001_00000000-0000-0000-0000-000000000000"),
							BillingProfileName: to.Ptr("33000000-0000-0000-0000-000000000001"),
							DisplayName:        to.Ptr("Partner1"),
						},
						InvoiceDay:        to.Ptr[int32](5),
						InvoiceEmailOptIn: to.Ptr(true),
						InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
							HasMoreResults: to.Ptr(false),
							Value: []*armbilling.InvoiceSection{
								{
									Name: to.Ptr("invoiceSectionId2"),
									Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
									ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000001/invoiceSections/invoiceSectionId2"),
									Properties: &armbilling.InvoiceSectionProperties{
										DisplayName: to.Ptr("invoiceSectionName2"),
										Labels: map[string]*string{
											"costCategory": to.Ptr("Marketing"),
											"pcCode":       to.Ptr("Z223456"),
										},
										State:    to.Ptr(armbilling.InvoiceSectionStateActive),
										SystemID: to.Ptr("9XXX-22XX-XX1-XXXX-XXX"),
									},
								}},
						},
						PoNumber:         to.Ptr("ABC12345"),
						SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
						Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
						StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
						SystemID:         to.Ptr("2XXX-22XX-XX1-XXXX-XXX"),
						TargetClouds:     []*armbilling.TargetCloud{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilesListWithExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingProfiles_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProfilesClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		&armbilling.ProfilesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Profile{
			Name: to.Ptr("{billingProfileName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
			Properties: &armbilling.ProfileProperties{
				BillTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address1"),
					AddressLine2: to.Ptr("Test Address2"),
					AddressLine3: to.Ptr("Test Address3"),
					City:         to.Ptr("City"),
					CompanyName:  to.Ptr("Contoso"),
					Country:      to.Ptr("US"),
					Email:        to.Ptr("abc@contoso.com"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PhoneNumber:  to.Ptr("000-000-0000"),
					PostalCode:   to.Ptr("00000"),
					Region:       to.Ptr("WA"),
				},
				BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeDirect),
				Currency:                to.Ptr("USD"),
				DisplayName:             to.Ptr("Billing Profile1"),
				EnabledAzurePlans: []*armbilling.AzurePlan{
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan"),
						SKUID:          to.Ptr("0001"),
					},
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
						SKUID:          to.Ptr("0002"),
					}},
				HasReadAccess:     to.Ptr(true),
				InvoiceDay:        to.Ptr[int32](5),
				InvoiceEmailOptIn: to.Ptr(true),
				PoNumber:          to.Ptr("ABC12345"),
				SpendingLimit:     to.Ptr(armbilling.SpendingLimitOn),
				Status:            to.Ptr(armbilling.BillingProfileStatusWarned),
				StatusReasonCode:  to.Ptr(armbilling.StatusReasonCodePastDue),
				SystemID:          to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileWithExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileWithExpand"},
	})
	client = armbilling.NewProfilesClient(cred, &options)
	res, err = client.Get(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		&armbilling.ProfilesClientGetOptions{Expand: to.Ptr("invoiceSections")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileWithExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Profile{
			Name: to.Ptr("{billingProfileName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
			Properties: &armbilling.ProfileProperties{
				BillTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address1"),
					AddressLine2: to.Ptr("Test Address2"),
					AddressLine3: to.Ptr("Test Address3"),
					City:         to.Ptr("City"),
					CompanyName:  to.Ptr("Contoso"),
					Country:      to.Ptr("US"),
					Email:        to.Ptr("abc@contoso.com"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PhoneNumber:  to.Ptr("000-000-0000"),
					PostalCode:   to.Ptr("00000"),
					Region:       to.Ptr("WA"),
				},
				BillingRelationshipType: to.Ptr(armbilling.BillingRelationshipTypeDirect),
				Currency:                to.Ptr("USD"),
				DisplayName:             to.Ptr("Billing Profile1"),
				EnabledAzurePlans: []*armbilling.AzurePlan{
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan"),
						SKUID:          to.Ptr("0001"),
					},
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
						SKUID:          to.Ptr("0002"),
					}},
				HasReadAccess:     to.Ptr(true),
				InvoiceDay:        to.Ptr[int32](5),
				InvoiceEmailOptIn: to.Ptr(true),
				InvoiceSections: &armbilling.InvoiceSectionsOnExpand{
					HasMoreResults: to.Ptr(false),
					Value: []*armbilling.InvoiceSection{
						{
							Name: to.Ptr("invoiceSectionId1"),
							Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
							ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/invoiceSectionId1"),
							Properties: &armbilling.InvoiceSectionProperties{
								DisplayName: to.Ptr("invoiceSectionName1"),
								Labels: map[string]*string{
									"costCategory": to.Ptr("Support"),
									"pcCode":       to.Ptr("A123456"),
								},
								State:    to.Ptr(armbilling.InvoiceSectionStateActive),
								SystemID: to.Ptr("9XXX-11XX-XX1-XXXX-XXX"),
							},
						}},
				},
				PoNumber:         to.Ptr("ABC12345"),
				SpendingLimit:    to.Ptr(armbilling.SpendingLimitOn),
				Status:           to.Ptr(armbilling.BillingProfileStatusWarned),
				StatusReasonCode: to.Ptr(armbilling.StatusReasonCodePastDue),
				SystemID:         to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileWithExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProfilesClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		armbilling.Profile{
			Properties: &armbilling.ProfileProperties{
				BillTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address 1"),
					City:         to.Ptr("Redmond"),
					Country:      to.Ptr("US"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PostalCode:   to.Ptr("12345"),
					Region:       to.Ptr("WA"),
				},
				DisplayName: to.Ptr("Finance"),
				EnabledAzurePlans: []*armbilling.AzurePlan{
					{
						SKUID: to.Ptr("0001"),
					},
					{
						SKUID: to.Ptr("0002"),
					}},
				InvoiceEmailOptIn: to.Ptr(true),
				PoNumber:          to.Ptr("ABC12345"),
			},
		},
		&armbilling.ProfilesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutBillingProfile.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutBillingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Profile{
			Name: to.Ptr("billingProfileId1"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/billingProfileId1"),
			Properties: &armbilling.ProfileProperties{
				BillTo: &armbilling.AddressDetails{
					AddressLine1: to.Ptr("Test Address 1"),
					City:         to.Ptr("Redmond"),
					Country:      to.Ptr("US"),
					FirstName:    to.Ptr("Test"),
					LastName:     to.Ptr("User"),
					PostalCode:   to.Ptr("12345"),
					Region:       to.Ptr("WA"),
				},
				Currency:    to.Ptr("USD"),
				DisplayName: to.Ptr("Finance"),
				EnabledAzurePlans: []*armbilling.AzurePlan{
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan"),
						SKUID:          to.Ptr("0001"),
					},
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
						SKUID:          to.Ptr("0002"),
					}},
				HasReadAccess:     to.Ptr(true),
				InvoiceDay:        to.Ptr[int32](5),
				InvoiceEmailOptIn: to.Ptr(true),
				PoNumber:          to.Ptr("ABC12345"),
				SpendingLimit:     to.Ptr(armbilling.SpendingLimitOff),
				Status:            to.Ptr(armbilling.BillingProfileStatusActive),
				SystemID:          to.Ptr("1XXX-11XX-XX1-XXXX-XXX"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomers_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomersListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomersListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewCustomersClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		&armbilling.CustomersClientListByBillingProfileOptions{Search: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomersListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.CustomerListResult{
			Value: []*armbilling.Customer{
				{
					Name: to.Ptr("22000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/customers"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/22000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.CustomerProperties{
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("customer1"),
					},
				},
				{
					Name: to.Ptr("22000000-0000-0000-0000-000000000011"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/customers"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/22000000-0000-0000-0000-000000000011"),
					Properties: &armbilling.CustomerProperties{
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("customer2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomersListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomers_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomersListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomersListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewCustomersClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		&armbilling.CustomersClientListByBillingAccountOptions{Search: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomersListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.CustomerListResult{
			Value: []*armbilling.Customer{
				{
					Name: to.Ptr("22000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/customers"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/22000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.CustomerProperties{
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("customer1"),
					},
				},
				{
					Name: to.Ptr("22000000-0000-0000-0000-000000000011"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/customers"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/22000000-0000-0000-0000-000000000011"),
					Properties: &armbilling.CustomerProperties{
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("customer2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomersListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomers_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Customer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Customer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewCustomersClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{customerName}",
		&armbilling.CustomersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Customer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Customer{
			Name: to.Ptr("{customerName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/customers"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}"),
			Properties: &armbilling.CustomerProperties{
				BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				DisplayName:               to.Ptr("customer1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Customer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Customer)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Customer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerWithExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerWithExpand"},
	})
	client = armbilling.NewCustomersClient(cred, &options)
	res, err = client.Get(ctx,
		"{billingAccountName}",
		"{customerName}",
		&armbilling.CustomersClientGetOptions{Expand: to.Ptr("enabledAzurePlans,resellers")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerWithExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Customer{
			Name: to.Ptr("{customerName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/customers"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}"),
			Properties: &armbilling.CustomerProperties{
				BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				DisplayName:               to.Ptr("customerName1"),
				EnabledAzurePlans: []*armbilling.AzurePlan{
					{
						SKUDescription: to.Ptr("Microsoft Azure Plan for DevTest"),
						SKUID:          to.Ptr("0002"),
					}},
				Resellers: []*armbilling.Reseller{
					{
						Description: to.Ptr("Reseller1"),
						ResellerID:  to.Ptr("89e87bdf-a2a2-4687-925f-4c18b27bccfd"),
					},
					{
						Description: to.Ptr("Reseller2"),
						ResellerID:  to.Ptr("3b65b5a8-bd4f-4084-90e9-e1bd667a2b19"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Customer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Customer)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerWithExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoiceSections_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoiceSectionsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceSectionListResult{
			Value: []*armbilling.InvoiceSection{
				{
					Name: to.Ptr("22000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.InvoiceSectionProperties{
						DisplayName: to.Ptr("invoiceSection1"),
						Labels: map[string]*string{
							"costCategory": to.Ptr("Support"),
							"pcCode":       to.Ptr("A123456"),
						},
						State:    to.Ptr(armbilling.InvoiceSectionStateActive),
						SystemID: to.Ptr("XX1X-XXAA-XXX-ZZZ"),
						Tags: map[string]*string{
							"costCategory": to.Ptr("Support"),
							"pcCode":       to.Ptr("A123456"),
						},
					},
				},
				{
					Name: to.Ptr("22000000-0000-0000-0000-000000000011"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000011"),
					Properties: &armbilling.InvoiceSectionProperties{
						DisplayName: to.Ptr("invoiceSection2"),
						Labels: map[string]*string{
							"costCategory": to.Ptr("Marketing"),
							"pcCode":       to.Ptr("Z223456"),
						},
						State:    to.Ptr(armbilling.InvoiceSectionStateRestricted),
						SystemID: to.Ptr("YY1X-BBAA-XXX-ZZZ"),
						Tags: map[string]*string{
							"costCategory": to.Ptr("Marketing"),
							"pcCode":       to.Ptr("Z223456"),
						},
						TargetCloud: to.Ptr(armbilling.TargetCloudUSSec),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceSectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceSectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoiceSections_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoiceSectionsClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.InvoiceSection{
			Name: to.Ptr("{invoiceSectionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
			Properties: &armbilling.InvoiceSectionProperties{
				DisplayName: to.Ptr("invoiceSection1"),
				Labels: map[string]*string{
					"costCategory": to.Ptr("Support"),
					"pcCode":       to.Ptr("A123456"),
				},
				State:    to.Ptr(armbilling.InvoiceSectionStateActive),
				SystemID: to.Ptr("XX1X-XXAA-XXX-ZZZ"),
				Tags: map[string]*string{
					"costCategory": to.Ptr("Support"),
					"pcCode":       to.Ptr("A123456"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InvoiceSection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InvoiceSection)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoiceSections_CreateOrUpdate(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInvoiceSection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutInvoiceSection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoiceSectionsClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		armbilling.InvoiceSection{
			Properties: &armbilling.InvoiceSectionProperties{
				DisplayName: to.Ptr("invoiceSection1"),
				Labels: map[string]*string{
					"costCategory": to.Ptr("Support"),
					"pcCode":       to.Ptr("A123456"),
				},
			},
		},
		&armbilling.InvoiceSectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInvoiceSection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInvoiceSection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.InvoiceSection{
			Name: to.Ptr("{invoiceSectionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
			Properties: &armbilling.InvoiceSectionProperties{
				DisplayName: to.Ptr("invoiceSection1"),
				Labels: map[string]*string{
					"costCategory": to.Ptr("Support"),
					"pcCode":       to.Ptr("A123456"),
				},
				SystemID: to.Ptr("XX1X-XXAA-XXX-ZZZ"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InvoiceSection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InvoiceSection)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/PutInvoiceSection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingPermissions_ListByCustomer(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerPermissionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfilePermissionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPermissionsClient(cred, &options)
	pager := client.ListByCustomer("{billingAccountName}",
		"{customerName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerPermissionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.PermissionsListResult{
			Value: []*armbilling.PermissionsProperties{
				{
					Actions: []*string{
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000001")},
					NotActions: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PermissionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PermissionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerPermissionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingPermissions_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountPermissionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountPermissionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPermissionsClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountPermissionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.PermissionsListResult{
			Value: []*armbilling.PermissionsProperties{
				{
					Actions: []*string{
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
						to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000008"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000001")},
					NotActions: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PermissionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PermissionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountPermissionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingPermissions_ListByInvoiceSections(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionPermissionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionPermissionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPermissionsClient(cred, &options)
	pager := client.ListByInvoiceSections("{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionPermissionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.PermissionsListResult{
			Value: []*armbilling.PermissionsProperties{
				{
					Actions: []*string{
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
						to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000008"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000001")},
					NotActions: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PermissionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PermissionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionPermissionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingPermissions_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilePermissionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfilePermissionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPermissionsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilePermissionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.PermissionsListResult{
			Value: []*armbilling.PermissionsProperties{
				{
					Actions: []*string{
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
						to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
						to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000008"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
						to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
						to.Ptr("30000000-aaaa-bbbb-cccc-200000000001")},
					NotActions: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PermissionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PermissionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfilePermissionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_ListByCustomer(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByCustomer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionsListByCustomer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("<subscription-id>", cred, &options)
	pager := client.ListByCustomer("{billingAccountName}",
		"{customerName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByCustomer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.SubscriptionsListResult{
			Value: []*armbilling.Subscription{
				{
					Name: to.Ptr("billingSubscriptionId1"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId1"),
					Properties: &armbilling.SubscriptionProperties{
						CostCenter:          to.Ptr("ABC1234"),
						CustomerDisplayName: to.Ptr("Customer1"),
						CustomerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}"),
						DisplayName:         to.Ptr("My subscription"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](600),
						},
						Reseller: &armbilling.Reseller{
							Description: to.Ptr("Reseller1"),
							ResellerID:  to.Ptr("89e87bdf-a2a2-4687-925f-4c18b27bccfd"),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan for DevTest"),
						SKUID:                     to.Ptr("0002"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
					},
				},
				{
					Name: to.Ptr("billingSubscriptionId2"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId2"),
					Properties: &armbilling.SubscriptionProperties{
						CostCenter:          to.Ptr("ABC1234"),
						CustomerDisplayName: to.Ptr("Customer1"),
						CustomerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}"),
						DisplayName:         to.Ptr("Test subscription"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](400),
						},
						Reseller: &armbilling.Reseller{
							Description: to.Ptr("Reseller3"),
							ResellerID:  to.Ptr("3b65b5a8-bd4f-4084-90e9-e1bd667a2b19"),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan for DevTest"),
						SKUID:                     to.Ptr("0002"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-6b96d3f2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByCustomer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionsListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("<subscription-id>", cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.SubscriptionsListResult{
			Value: []*armbilling.Subscription{
				{
					Name: to.Ptr("90000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/90000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("My subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](600),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
					},
				},
				{
					Name: to.Ptr("90000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/90000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("Test subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](400),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-6b96d3f2"),
					},
				},
				{
					Name: to.Ptr("90000000-0000-0000-0000-000000000002"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/90000000-0000-0000-0000-000000000002"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("Dev Subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](6000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](900),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-4a9d-9008-912f-f87744185aa3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("<subscription-id>", cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.SubscriptionsListResult{
			Value: []*armbilling.Subscription{
				{
					Name: to.Ptr("billingSubscriptionId1"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId1"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("My subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](600),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
					},
				},
				{
					Name: to.Ptr("billingSubscriptionId2"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId2"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("Test subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](400),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-6b96d3f2"),
					},
				},
				{
					Name: to.Ptr("billingSubscriptionId3"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId3"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("Dev Subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](6000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](900),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-4a9d-9008-912f-f87744185aa3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_ListByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByInvoiceSection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionsListByInvoiceSection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("<subscription-id>", cred, &options)
	pager := client.ListByInvoiceSection("{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByInvoiceSection.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.SubscriptionsListResult{
			Value: []*armbilling.Subscription{
				{
					Name: to.Ptr("billingSubscriptionId1"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId1"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("My subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](600),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
					},
				},
				{
					Name: to.Ptr("billingSubscriptionId2"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId2"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("Test subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](400),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-6b96d3f2"),
					},
				},
				{
					Name: to.Ptr("billingSubscriptionId3"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/billinSubscriptionId3"),
					Properties: &armbilling.SubscriptionProperties{
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CostCenter:                to.Ptr("ABC1234"),
						DisplayName:               to.Ptr("Dev Subscription"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
						LastMonthCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](6000),
						},
						MonthToDateCharges: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](900),
						},
						SKUDescription:            to.Ptr("Microsoft Azure Plan"),
						SKUID:                     to.Ptr("0001"),
						SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
						SubscriptionID:            to.Ptr("6b96d3f2-4a9d-9008-912f-f87744185aa3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionsListByInvoiceSection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Subscription{
			Name: to.Ptr("{subscriptionId}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}"),
			Properties: &armbilling.SubscriptionProperties{
				BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				CostCenter:                to.Ptr("ABC1234"),
				DisplayName:               to.Ptr("My Subscription"),
				InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
				InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000"),
				LastMonthCharges: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](5000),
				},
				MonthToDateCharges: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](600),
				},
				SKUDescription:            to.Ptr("Microsoft Azure Plan"),
				SKUID:                     to.Ptr("0001"),
				SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
				SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subscription)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_Update(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateBillingProperty"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"{billingAccountName}",
		armbilling.Subscription{
			Properties: &armbilling.SubscriptionProperties{
				CostCenter: to.Ptr("ABC1234"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Subscription{
			Name: to.Ptr("{subscriptionId}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}"),
			Properties: &armbilling.SubscriptionProperties{
				BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				CostCenter:                to.Ptr("ABC1234"),
				DisplayName:               to.Ptr("My Subscription"),
				InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
				InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000"),
				LastMonthCharges: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](5000),
				},
				MonthToDateCharges: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](600),
				},
				SKUDescription:            to.Ptr("Microsoft Azure Plan"),
				SKUID:                     to.Ptr("0001"),
				SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
				SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subscription)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_Move(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveBillingSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MoveBillingSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginMove(ctx,
		"{billingAccountName}",
		armbilling.TransferBillingSubscriptionRequestProperties{
			DestinationInvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}"),
		},
		&armbilling.SubscriptionsClientBeginMoveOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveBillingSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveBillingSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Subscription{
			Properties: &armbilling.SubscriptionProperties{
				BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				CostCenter:                to.Ptr("ABC1234"),
				DisplayName:               to.Ptr("My Subscription"),
				InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
				InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000"),
				LastMonthCharges: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](5000),
				},
				MonthToDateCharges: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](600),
				},
				SKUDescription:            to.Ptr("Microsoft Azure Plan"),
				SKUID:                     to.Ptr("0001"),
				SubscriptionBillingStatus: to.Ptr(armbilling.BillingSubscriptionStatusTypeActive),
				SubscriptionID:            to.Ptr("6b96d3f2-9008-4a9d-912f-f87744185aa3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subscription)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveBillingSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingSubscriptions_ValidateMove(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateSubscriptionMoveFailure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionMoveValidateFailure"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewSubscriptionsClient("{subscriptionId}", cred, &options)
	res, err := client.ValidateMove(ctx,
		"{billingAccountName}",
		armbilling.TransferBillingSubscriptionRequestProperties{
			DestinationInvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateSubscriptionMoveFailure.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.ValidateSubscriptionTransferEligibilityResult{
			ErrorDetails: &armbilling.ValidateSubscriptionTransferEligibilityError{
				Code:    to.Ptr(armbilling.SubscriptionTransferValidationErrorCodeSubscriptionNotActive),
				Message: to.Ptr("Invoice Sections can only be changed for active subscriptions."),
			},
			IsMoveEligible: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateSubscriptionTransferEligibilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateSubscriptionTransferEligibilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateSubscriptionMoveFailure.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateSubscriptionMoveSuccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionMoveValidateSuccess"},
	})
	client = armbilling.NewSubscriptionsClient("{subscriptionId}", cred, &options)
	res, err = client.ValidateMove(ctx,
		"{billingAccountName}",
		armbilling.TransferBillingSubscriptionRequestProperties{
			DestinationInvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateSubscriptionMoveSuccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.ValidateSubscriptionTransferEligibilityResult{
			IsMoveEligible: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateSubscriptionTransferEligibilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateSubscriptionTransferEligibilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateSubscriptionMoveSuccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_ListByCustomer(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByCustomer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProductsListByInvoiceSection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	pager := client.ListByCustomer("{billingAccountName}",
		"{customerName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByCustomer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ProductsListResult{
			TotalCount: to.Ptr[int32](2),
			Value: []*armbilling.Product{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyOneTime),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CustomerDisplayName:       to.Ptr("Customer 1"),
						CustomerID:                to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}"),
						DisplayName:               to.Ptr("Eng Reservation (1a13s21awe)"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Reservation"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						Reseller: &armbilling.Reseller{
							Description: to.Ptr("Reseller1"),
							ResellerID:  to.Ptr("2c917292-b7bc-42f2-99a2-e498b9087c06"),
						},
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				},
				{
					Name: to.Ptr("10000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/10000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CustomerDisplayName:       to.Ptr("Customer 1"),
						CustomerID:                to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}"),
						DisplayName:               to.Ptr("Engineering Email"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](500),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Azure subscription"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByCustomer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProductsListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		&armbilling.ProductsClientListByBillingAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ProductsListResult{
			TotalCount: to.Ptr[int32](2),
			Value: []*armbilling.Product{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyOneTime),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("Eng Reservation (1a13s21awe)"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Reservation"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				},
				{
					Name: to.Ptr("10000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/10000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("Engineering Email"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Azure subscription"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProductsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		&armbilling.ProductsClientListByBillingProfileOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ProductsListResult{
			TotalCount: to.Ptr[int32](2),
			Value: []*armbilling.Product{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyOneTime),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("Eng Reservation (1a13s21awe)"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Reservation"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				},
				{
					Name: to.Ptr("10000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/10000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("Engineering Email"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Azure subscription"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_ListByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByInvoiceSection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProductsListByInvoiceSection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	pager := client.ListByInvoiceSection("{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		&armbilling.ProductsClientListByInvoiceSectionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByInvoiceSection.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ProductsListResult{
			TotalCount: to.Ptr[int32](2),
			Value: []*armbilling.Product{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyOneTime),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("Eng Reservation (1a13s21awe)"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Reservation"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
						TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
					},
				},
				{
					Name: to.Ptr("10000000-0000-0000-0000-000000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/10000000-0000-0000-0000-000000000001"),
					Properties: &armbilling.ProductProperties{
						AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
						AvailabilityID:            to.Ptr("AvailabilityId1"),
						BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						DisplayName:               to.Ptr("Engineering Email"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
						LastCharge: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](500),
						},
						LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
						ProductType:    to.Ptr("Azure subscription"),
						ProductTypeID:  to.Ptr("A12345"),
						PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-01T17:32:28Z"); return t }()),
						Quantity:       to.Ptr[float32](4),
						SKUDescription: to.Ptr("Enterprise Agreement Development"),
						SKUID:          to.Ptr("0001"),
						Status:         to.Ptr(armbilling.ProductStatusTypeActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ProductsListByInvoiceSection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Product.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Product"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{productName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Product.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Product{
			Name: to.Ptr("{productName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
			ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/{productName}"),
			Properties: &armbilling.ProductProperties{
				AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
				AvailabilityID:            to.Ptr("AvailabilityId1"),
				BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
				BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				DisplayName:               to.Ptr("AIP Dev"),
				InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
				InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
				LastCharge: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](5000),
				},
				LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
				ProductType:    to.Ptr("Subscription"),
				ProductTypeID:  to.Ptr("A12345"),
				PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
				Quantity:       to.Ptr[float32](4),
				SKUDescription: to.Ptr("Enterprise Agreement Development"),
				SKUID:          to.Ptr("0001"),
				Status:         to.Ptr(armbilling.ProductStatusTypeActive),
				TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Product) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Product)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Product.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_Update(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateBillingProperty"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	res, err := client.Update(ctx,
		"{billingAccountName}",
		"{productName}",
		armbilling.Product{
			Properties: &armbilling.ProductProperties{
				AutoRenew: to.Ptr(armbilling.AutoRenewOff),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateProduct.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Product{
			Name: to.Ptr("{productName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
			ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/products/{productName}"),
			Properties: &armbilling.ProductProperties{
				AutoRenew:                 to.Ptr(armbilling.AutoRenewOff),
				AvailabilityID:            to.Ptr("AvailabilityId1"),
				BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
				BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				DisplayName:               to.Ptr("AIP Dev"),
				InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
				InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
				LastCharge: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](5000),
				},
				LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
				ProductType:    to.Ptr("Subscription"),
				ProductTypeID:  to.Ptr("A12345"),
				PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
				Quantity:       to.Ptr[float32](4),
				SKUDescription: to.Ptr("Enterprise Agreement Development"),
				SKUID:          to.Ptr("0001"),
				Status:         to.Ptr(armbilling.ProductStatusTypeActive),
				TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Product) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Product)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateProduct.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_Move(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MoveProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	res, err := client.Move(ctx,
		"{billingAccountName}",
		"{productName}",
		armbilling.TransferProductRequestProperties{
			DestinationInvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveProduct.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Product{
			Name: to.Ptr("{productName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/products"),
			ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}/products/{productName}"),
			Properties: &armbilling.ProductProperties{
				AutoRenew:                 to.Ptr(armbilling.AutoRenewOn),
				AvailabilityID:            to.Ptr("AvailabilityId1"),
				BillingFrequency:          to.Ptr(armbilling.BillingFrequencyMonthly),
				BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
				DisplayName:               to.Ptr("Test Product"),
				InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
				InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{newBillingProfileName}/invoiceSections/{newInvoiceSectionName}"),
				LastCharge: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](5000),
				},
				LastChargeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T17:32:28Z"); return t }()),
				ProductType:    to.Ptr("Subscription"),
				ProductTypeID:  to.Ptr("A12345"),
				PurchaseDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T17:32:28Z"); return t }()),
				Quantity:       to.Ptr[float32](4),
				SKUDescription: to.Ptr("Enterprise Agreement Development"),
				SKUID:          to.Ptr("0001"),
				Status:         to.Ptr(armbilling.ProductStatusTypeActive),
				TenantID:       to.Ptr("515a6d36-aaf8-4ca2-a5e8-c45deb0c5cce"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Product) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Product)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MoveProduct.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_ValidateMove(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateProductMoveFailure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionMoveValidateFailure"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewProductsClient(cred, &options)
	res, err := client.ValidateMove(ctx,
		"{billingAccountName}",
		"{productName}",
		armbilling.TransferProductRequestProperties{
			DestinationInvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateProductMoveFailure.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.ValidateProductTransferEligibilityResult{
			ErrorDetails: &armbilling.ValidateProductTransferEligibilityError{
				Code:    to.Ptr(armbilling.ProductTransferValidationErrorCodeProductTypeNotSupported),
				Message: to.Ptr("Product '{productName}' is not allowed to be transferred."),
			},
			IsMoveEligible: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateProductTransferEligibilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateProductTransferEligibilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateProductMoveFailure.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateProductMoveSuccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionMoveValidateSuccess"},
	})
	client = armbilling.NewProductsClient(cred, &options)
	res, err = client.ValidateMove(ctx,
		"{billingAccountName}",
		"{productName}",
		armbilling.TransferProductRequestProperties{
			DestinationInvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{newInvoiceSectionName}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateProductMoveSuccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.ValidateProductTransferEligibilityResult{
			IsMoveEligible: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateProductTransferEligibilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateProductTransferEligibilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ValidateProductMoveSuccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountInvoicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountInvoicesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		"2018-01-01",
		"2018-06-30",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountInvoicesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceListResult{
			Value: []*armbilling.Invoice{
				{
					Name: to.Ptr("1383723"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/1383723"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](8.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](25.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(false),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](1),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatusDue),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](7.53),
						},
					},
				},
				{
					Name: to.Ptr("1383724"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/1383724"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](15.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/taxreceipt.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(true),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](2),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatus("PastDue")),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountInvoicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountInvoicesListWithRebillDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountInvoicesListWithRebillDetails"},
	})
	client = armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	pager = client.ListByBillingAccount("{billingAccountName}",
		"2018-01-01",
		"2018-06-30",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountInvoicesListWithRebillDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceListResult{
			Value: []*armbilling.Invoice{
				{
					Name: to.Ptr("I000003"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/I000003"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](8.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](25.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(false),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](1),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						RebillDetails: map[string]*armbilling.RebillDetails{
							"creditNoteDocumentId": {},
							"invoiceDocumentId":    {},
							"rebillDetails":        {},
						},
						Status: to.Ptr(armbilling.InvoiceStatusDue),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](7.53),
						},
					},
				},
				{
					Name: to.Ptr("1383724"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/1383724"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](15.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/taxreceipt.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(true),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](2),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatus("PastDue")),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountInvoicesListWithRebillDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoicesListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoicesListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		"2018-01-01",
		"2018-06-30",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoicesListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceListResult{
			Value: []*armbilling.Invoice{
				{
					Name: to.Ptr("1383723"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/1383723"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](8.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](25.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
							},
							{
								Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(false),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](1),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatusDue),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](7.53),
						},
					},
				},
				{
					Name: to.Ptr("1383724"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/1383724"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](15.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
							},
							{
								Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(true),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](2),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatusDue),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoicesListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoicesListByBillingProfileWithRebillDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoicesListByBillingProfileWithRebillDetails"},
	})
	client = armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	pager = client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		"2018-01-01",
		"2018-06-30",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoicesListByBillingProfileWithRebillDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceListResult{
			Value: []*armbilling.Invoice{
				{
					Name: to.Ptr("I000003"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/I000003"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](8.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](25.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](1),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
							},
							{
								Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(false),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](1),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						RebillDetails: map[string]*armbilling.RebillDetails{
							"creditNoteDocumentId": {},
							"invoiceDocumentId":    {},
							"rebillDetails":        {},
						},
						Status: to.Ptr(armbilling.InvoiceStatusDue),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](7.53),
						},
					},
				},
				{
					Name: to.Ptr("1383724"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/1383724"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
						AzurePrepaymentApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](15.46),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						CreditAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
							},
							{
								Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
							}},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T17:32:28Z"); return t }()),
						FreeAzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-28T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						IsMonthlyInvoice:       to.Ptr(true),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](2),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatusDue),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](33.99),
						},
						TaxAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](0),
						},
						TotalAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](16.53),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoicesListByBillingProfileWithRebillDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CreditNote.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreditNote"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{invoiceName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CreditNote.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Invoice{
			Name: to.Ptr("{invoiceName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}"),
			Properties: &armbilling.InvoiceProperties{
				AmountDue: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
				AzurePrepaymentApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](15.46),
				},
				BilledAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
				CreditAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](2),
				},
				CreditForDocumentID: to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/I000001"),
				DocumentType:        to.Ptr(armbilling.InvoiceDocumentTypeCreditNote),
				Documents: []*armbilling.Document{
					{
						Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
					},
					{
						Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
					}},
				DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
				FreeAzureCreditApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
				InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				IsMonthlyInvoice:       to.Ptr(false),
				Payments: []*armbilling.PaymentProperties{
					{
						Amount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
						PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
						PaymentMethodType:   to.Ptr("visa"),
						PaymentType:         to.Ptr("credited"),
					}},
				PurchaseOrderNumber: to.Ptr("123456"),
				Status:              to.Ptr(armbilling.InvoiceStatusPaid),
				SubTotal: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				TaxAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				TotalAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Invoice) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Invoice)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CreditNote.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Invoice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Invoice"},
	})
	client = armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	res, err = client.Get(ctx,
		"{billingAccountName}",
		"{invoiceName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Invoice.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Invoice{
			Name: to.Ptr("{invoiceName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}"),
			Properties: &armbilling.InvoiceProperties{
				AmountDue: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
				AzurePrepaymentApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](15.46),
				},
				BilledAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
				CreditAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](2),
				},
				DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
				Documents: []*armbilling.Document{
					{
						Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
					},
					{
						Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
					}},
				DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
				FreeAzureCreditApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
				InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				IsMonthlyInvoice:       to.Ptr(false),
				Payments: []*armbilling.PaymentProperties{
					{
						Amount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
						PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
						PaymentMethodType:   to.Ptr("visa"),
						PaymentType:         to.Ptr("credited"),
					}},
				PurchaseOrderNumber: to.Ptr("123456"),
				Status:              to.Ptr(armbilling.InvoiceStatusDue),
				SubTotal: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				TaxAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				TotalAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Invoice) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Invoice)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Invoice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceWithRebillDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceWithRebillDetails"},
	})
	client = armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	res, err = client.Get(ctx,
		"{billingAccountName}",
		"{invoiceName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceWithRebillDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Invoice{
			Name: to.Ptr("{invoiceName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}"),
			Properties: &armbilling.InvoiceProperties{
				AmountDue: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
				AzurePrepaymentApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](15.46),
				},
				BilledAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
				CreditAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](2),
				},
				DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
				Documents: []*armbilling.Document{
					{
						Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
					},
					{
						Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
					}},
				DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
				FreeAzureCreditApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
				InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				IsMonthlyInvoice:       to.Ptr(false),
				Payments: []*armbilling.PaymentProperties{
					{
						Amount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
						PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
						PaymentMethodType:   to.Ptr("visa"),
						PaymentType:         to.Ptr("credited"),
					}},
				PurchaseOrderNumber: to.Ptr("123456"),
				RebillDetails: map[string]*armbilling.RebillDetails{
					"creditNoteDocumentId": {},
					"invoiceDocumentId":    {},
					"rebillDetails":        {},
				},
				Status: to.Ptr(armbilling.InvoiceStatusDue),
				SubTotal: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				TaxAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				TotalAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Invoice) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Invoice)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceWithRebillDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/VoidInvoice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VoidInvoice"},
	})
	client = armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	res, err = client.Get(ctx,
		"{billingAccountName}",
		"{invoiceName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/VoidInvoice.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Invoice{
			Name: to.Ptr("{invoiceName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/invoices"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}"),
			Properties: &armbilling.InvoiceProperties{
				AmountDue: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
				AzurePrepaymentApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](15.46),
				},
				BilledAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				BilledDocumentID:          to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/I000002"),
				BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
				BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
				CreditAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](2),
				},
				DocumentType: to.Ptr(armbilling.InvoiceDocumentTypeInvoice),
				Documents: []*armbilling.Document{
					{
						Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/invoice.pdf"),
					},
					{
						Kind:   to.Ptr(armbilling.DocumentTypeTaxReceipt),
						Source: to.Ptr(armbilling.DocumentSourceDRS),
						URL:    to.Ptr("https://microsoft.com/taxDoc.pdf"),
					}},
				DueDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
				FreeAzureCreditApplied: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
				InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
				IsMonthlyInvoice:       to.Ptr(false),
				Payments: []*armbilling.PaymentProperties{
					{
						Amount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2),
						},
						Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
						PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
						PaymentMethodType:   to.Ptr("visa"),
						PaymentType:         to.Ptr("credited"),
					}},
				PurchaseOrderNumber: to.Ptr("123456"),
				Status:              to.Ptr(armbilling.InvoiceStatusVoid),
				SubTotal: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](33.99),
				},
				TaxAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](0),
				},
				TotalAmount: &armbilling.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float32](16.53),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Invoice) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Invoice)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/VoidInvoice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_DownloadInvoice(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ModernInvoiceDownload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceDownload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	poller, err := client.BeginDownloadInvoice(ctx,
		"{billingAccountName}",
		"{invoiceName}",
		"DRS_12345",
		&armbilling.InvoicesClientBeginDownloadInvoiceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ModernInvoiceDownload.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ModernInvoiceDownload.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.DownloadURL{
			URL: to.Ptr("https://myaccount.blob.core.windows.net/invoices/1383724.pdf?sv=2019-02-02&sr=b&sp=r"),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURL) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURL)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ModernInvoiceDownload.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_DownloadMultipleBillingProfileInvoices(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleModernInvoiceDownload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileInvoiceDownload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("<subscription-id>", cred, &options)
	poller, err := client.BeginDownloadMultipleBillingProfileInvoices(ctx,
		"{billingAccountName}",
		[]*string{
			to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download?downloadToken={downloadToken}&useCache=True&api-version=2020-05-01"),
			to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download?downloadToken={downloadToken}&useCache=True&api-version=2020-05-01"),
			to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download?downloadToken={downloadToken}&useCache=True&api-version=2020-05-01")},
		&armbilling.InvoicesClientBeginDownloadMultipleBillingProfileInvoicesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleModernInvoiceDownload.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleModernInvoiceDownload.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.DownloadURL{
			URL: to.Ptr("https://myaccount.blob.core.windows.net/invoices/1383724.pdf?sv=2019-02-02&sr=b&sp=r"),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURL) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURL)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleModernInvoiceDownload.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_ListByBillingSubscription(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionsListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("{subscriptionId}", cred, &options)
	pager := client.ListByBillingSubscription("2018-01-01",
		"2018-06-30",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoicesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.InvoiceListResult{
			Value: []*armbilling.Invoice{
				{
					Name: to.Ptr("1383723"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions/invoices"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/11000000-0000-0000-0000-000000000000/invoices/1383723"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2000),
						},
						DueDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-16T17:32:28Z"); return t }()),
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-15T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T17:32:28Z"); return t }()),
						InvoiceType:            to.Ptr(armbilling.InvoiceType("AzureServices")),
						PurchaseOrderNumber:    to.Ptr("123456"),
						Status:                 to.Ptr(armbilling.InvoiceStatusDue),
						SubscriptionID:         to.Ptr("55000000-0000-0000-0000-000000000011"),
					},
				},
				{
					Name: to.Ptr("1383724"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingSubscriptions/invoices"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/11000000-0000-0000-0000-000000000000/invoices/1383724"),
					Properties: &armbilling.InvoiceProperties{
						AmountDue: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2000),
						},
						BilledAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2000),
						},
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/11000000-0000-0000-0000-000000000000"),
						Documents: []*armbilling.Document{
							{
								Kind:   to.Ptr(armbilling.DocumentTypeInvoice),
								Source: to.Ptr(armbilling.DocumentSourceDRS),
								URL:    to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/11000000-0000-0000-0000-000000000000/invoices/1383724/download"),
							}},
						DueDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T17:32:28Z"); return t }()),
						InvoiceDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						InvoicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-30T17:32:28Z"); return t }()),
						InvoicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T17:32:28Z"); return t }()),
						InvoiceType:            to.Ptr(armbilling.InvoiceTypeAzureMarketplace),
						Payments: []*armbilling.PaymentProperties{
							{
								Amount: &armbilling.Amount{
									Currency: to.Ptr("USD"),
									Value:    to.Ptr[float32](2000),
								},
								Date:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-14T17:32:28Z"); return t }()),
								PaymentMethodFamily: to.Ptr(armbilling.PaymentMethodFamilyCreditCard),
								PaymentMethodType:   to.Ptr("visa"),
								PaymentType:         to.Ptr("credited"),
							}},
						PurchaseOrderNumber: to.Ptr("123456"),
						Status:              to.Ptr(armbilling.InvoiceStatusPaid),
						SubscriptionID:      to.Ptr("55000000-0000-0000-0000-000000000011"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvoiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvoiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_DownloadBillingSubscriptionInvoice(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoiceDownload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionInvoiceDownload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDownloadBillingSubscriptionInvoice(ctx,
		"{invoiceName}",
		"DRS_12345",
		&armbilling.InvoicesClientBeginDownloadBillingSubscriptionInvoiceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoiceDownload.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoiceDownload.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.DownloadURL{
			URL: to.Ptr("https://myaccount.blob.core.windows.net/invoices/1383724.pdf?sv=2019-02-02&sr=b&sig=sp=r"),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURL) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURL)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingSubscriptionInvoiceDownload.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvoices_DownloadMultipleBillingSubscriptionInvoices(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleBillingSubscriptionInvoiceDownload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingSubscriptionInvoiceDownload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewInvoicesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDownloadMultipleBillingSubscriptionInvoices(ctx,
		[]*string{
			to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download?downloadToken={downloadToken}&useCache=True&api-version=2020-05-01"),
			to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download?downloadToken={downloadToken}&useCache=True&api-version=2020-05-01"),
			to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download?downloadToken={downloadToken}&useCache=True&api-version=2020-05-01")},
		&armbilling.InvoicesClientBeginDownloadMultipleBillingSubscriptionInvoicesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleBillingSubscriptionInvoiceDownload.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleBillingSubscriptionInvoiceDownload.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.DownloadURL{
			URL: to.Ptr("https://myaccount.blob.core.windows.net/invoices/1383724.pdf?sv=2019-02-02&sr=b&sp=r"),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURL) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURL)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/MultipleBillingSubscriptionInvoiceDownload.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransactions_ListByInvoice(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/TransactionsListByInvoice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransactionsListByInvoice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewTransactionsClient(cred, &options)
	pager := client.ListByInvoice("{billingAccountName}",
		"{invoiceName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/TransactionsListByInvoice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.TransactionListResult{
			Value: []*armbilling.Transaction{
				{
					Name: to.Ptr("41000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/transactions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/transactions/41000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.TransactionProperties{
						AzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](2000),
						},
						AzurePlan:                 to.Ptr("Microsoft Azure Plan for DevTest"),
						BillingCurrency:           to.Ptr("USD"),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						Date:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00Z"); return t }()),
						Discount:                  to.Ptr[float32](0.1),
						EffectivePrice: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](10),
						},
						ExchangeRate:              to.Ptr[float32](1),
						Invoice:                   to.Ptr("2344233"),
						InvoiceID:                 to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/2344233"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						Kind:                      to.Ptr(armbilling.TransactionTypeKindAll),
						MarketPrice: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](20),
						},
						PricingCurrency:        to.Ptr("USD"),
						ProductDescription:     to.Ptr("Standard D1, US West 3"),
						ProductFamily:          to.Ptr("Storage"),
						ProductType:            to.Ptr("VM Instance"),
						ProductTypeID:          to.Ptr("A12345"),
						Quantity:               to.Ptr[int32](1),
						ServicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-30T00:00:00Z"); return t }()),
						ServicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00Z"); return t }()),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](4500),
						},
						Tax: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](500),
						},
						TransactionAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5000),
						},
						TransactionType: to.Ptr(armbilling.ReservationTypePurchase),
						UnitOfMeasure:   to.Ptr("1 Minute"),
						UnitType:        to.Ptr("1 Runtime Minute"),
						Units:           to.Ptr[float32](11.25),
					},
				},
				{
					Name: to.Ptr("51000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/transactions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/{billingAccountName}/transactions/51000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.TransactionProperties{
						AzureCreditApplied: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](20),
						},
						AzurePlan:                 to.Ptr("Microsoft Azure Plan for DevTest"),
						BillingCurrency:           to.Ptr("USD"),
						BillingProfileDisplayName: to.Ptr("Contoso operations billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
						Date:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-01T00:00:00Z"); return t }()),
						Discount:                  to.Ptr[float32](0.1),
						EffectivePrice: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](10),
						},
						ExchangeRate:              to.Ptr[float32](1),
						Invoice:                   to.Ptr("pending"),
						InvoiceSectionDisplayName: to.Ptr("Contoso operations invoiceSection"),
						InvoiceSectionID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/22000000-0000-0000-0000-000000000000"),
						Kind:                      to.Ptr(armbilling.TransactionTypeKindAll),
						MarketPrice: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](20),
						},
						PricingCurrency:        to.Ptr("USD"),
						ProductDescription:     to.Ptr("Standard Support"),
						ProductFamily:          to.Ptr("Storage"),
						ProductType:            to.Ptr("VM Instance"),
						ProductTypeID:          to.Ptr("A12345"),
						Quantity:               to.Ptr[int32](1),
						ServicePeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-30T00:00:00Z"); return t }()),
						ServicePeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00Z"); return t }()),
						SubTotal: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](45),
						},
						Tax: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](5),
						},
						TransactionAmount: &armbilling.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float32](50),
						},
						TransactionType: to.Ptr(armbilling.ReservationType("Cancel")),
						UnitOfMeasure:   to.Ptr("1 Minute"),
						UnitType:        to.Ptr("1 Runtime Minute"),
						Units:           to.Ptr[float32](1.25),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransactionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransactionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/TransactionsListByInvoice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_GetByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Policy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PolicyByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPoliciesClient(cred, &options)
	res, err := client.GetByBillingProfile(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Policy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Policy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/policies"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default"),
			Properties: &armbilling.PolicyProperties{
				MarketplacePurchases: to.Ptr(armbilling.MarketplacePurchasesPolicyAllAllowed),
				ReservationPurchases: to.Ptr(armbilling.ReservationPurchasesPolicyAllowed),
				ViewCharges:          to.Ptr(armbilling.ViewChargesPolicyAllowed),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/Policy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Update(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdatePolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdatePolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPoliciesClient(cred, &options)
	res, err := client.Update(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		armbilling.Policy{
			Properties: &armbilling.PolicyProperties{
				MarketplacePurchases: to.Ptr(armbilling.MarketplacePurchasesPolicyOnlyFreeAllowed),
				ReservationPurchases: to.Ptr(armbilling.ReservationPurchasesPolicyNotAllowed),
				ViewCharges:          to.Ptr(armbilling.ViewChargesPolicyAllowed),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdatePolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Policy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/policies"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default"),
			Properties: &armbilling.PolicyProperties{
				MarketplacePurchases: to.Ptr(armbilling.MarketplacePurchasesPolicyOnlyFreeAllowed),
				ReservationPurchases: to.Ptr(armbilling.ReservationPurchasesPolicyNotAllowed),
				ViewCharges:          to.Ptr(armbilling.ViewChargesPolicyAllowed),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdatePolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_GetByCustomer(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PolicyByCustomer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPoliciesClient(cred, &options)
	res, err := client.GetByCustomer(ctx,
		"{billingAccountName}",
		"{customerName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.CustomerPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/customers/policies"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default"),
			Properties: &armbilling.CustomerPolicyProperties{
				ViewCharges: to.Ptr(armbilling.ViewChargesAllowed),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomerPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomerPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/CustomerPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_UpdateCustomer(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateCustomerPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateCustomer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPoliciesClient(cred, &options)
	res, err := client.UpdateCustomer(ctx,
		"{billingAccountName}",
		"{customerName}",
		armbilling.CustomerPolicy{
			Properties: &armbilling.CustomerPolicyProperties{
				ViewCharges: to.Ptr(armbilling.ViewChargesNotAllowed),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateCustomerPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.CustomerPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/customers/policies"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default"),
			Properties: &armbilling.CustomerPolicyProperties{
				ViewCharges: to.Ptr(armbilling.ViewChargesNotAllowed),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomerPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomerPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateCustomerPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingProperty_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProperty"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPropertyClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProperty.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Property{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingProperty"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default"),
			Properties: &armbilling.PropertyProperties{
				AccountAdminNotificationEmailAddress: to.Ptr("test@contoso.com"),
				BillingAccountDisplayName:            to.Ptr("My Account"),
				BillingAccountID:                     to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000"),
				BillingProfileDisplayName:            to.Ptr("Contoso operations billing"),
				BillingProfileID:                     to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000000"),
				BillingProfileSpendingLimit:          to.Ptr(armbilling.BillingProfileSpendingLimitOn),
				BillingProfileStatus:                 to.Ptr(armbilling.BillingProfileStatusWarned),
				BillingProfileStatusReasonCode:       to.Ptr(armbilling.BillingProfileStatusReasonCodePastDue),
				BillingTenantID:                      to.Ptr("90000000-0000-0000-0000-000000000011"),
				CostCenter:                           to.Ptr("1010"),
				InvoiceSectionDisplayName:            to.Ptr("Contoso operations invoice section"),
				InvoiceSectionID:                     to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000"),
				IsAccountAdmin:                       to.Ptr(true),
				ProductID:                            to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000/products/44000000-0000-0000-0000-000000000000"),
				ProductName:                          to.Ptr("Standard Dev"),
				SKUDescription:                       to.Ptr("Microsoft Azure Plan for DevTest"),
				SKUID:                                to.Ptr("0001"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Property) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Property)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProperty.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingProperty_Update(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateBillingProperty"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPropertyClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		armbilling.Property{
			Properties: &armbilling.PropertyProperties{
				CostCenter: to.Ptr("1010"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingProperty.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Property{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Billing/billingProperty"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default"),
			Properties: &armbilling.PropertyProperties{
				AccountAdminNotificationEmailAddress: to.Ptr("test@contoso.com"),
				BillingAccountDisplayName:            to.Ptr("My Account"),
				BillingAccountID:                     to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000"),
				BillingProfileDisplayName:            to.Ptr("Contoso operations billing"),
				BillingProfileID:                     to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/billingProfiles/11000000-0000-0000-0000-000000000000"),
				BillingProfileSpendingLimit:          to.Ptr(armbilling.BillingProfileSpendingLimitOn),
				BillingProfileStatus:                 to.Ptr(armbilling.BillingProfileStatusWarned),
				BillingProfileStatusReasonCode:       to.Ptr(armbilling.BillingProfileStatusReasonCodePastDue),
				BillingTenantID:                      to.Ptr("90000000-0000-0000-0000-000000000011"),
				CostCenter:                           to.Ptr("1010"),
				InvoiceSectionDisplayName:            to.Ptr("Contoso operations invoice section"),
				InvoiceSectionID:                     to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000"),
				IsAccountAdmin:                       to.Ptr(true),
				ProductID:                            to.Ptr("/providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000/invoiceSections/22000000-0000-0000-0000-000000000000/products/44000000-0000-0000-0000-000000000000"),
				ProductName:                          to.Ptr("Standard Dev"),
				SKUDescription:                       to.Ptr("Microsoft Azure Plan for DevTest"),
				SKUID:                                to.Ptr("0001"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Property) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Property)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/UpdateBillingProperty.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestBillingRoleDefinitions_GetByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountRoleDefinition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleDefinitionsClient(cred, &options)
	res, err := client.GetByBillingAccount(ctx,
		"{billingAccountName}",
		"{billingRoleDefinitionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleDefinition{
			Name: to.Ptr("{billingRoleDefinitionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleDefinitions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/{billingRoleDefinitionName}"),
			Properties: &armbilling.RoleDefinitionProperties{
				Description: to.Ptr("The Owner role gives the user all permissions including access management rights to the billing account."),
				Permissions: []*armbilling.PermissionsProperties{
					{
						Actions: []*string{
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
							to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
						NotActions: []*string{},
					}},
				RoleName: to.Ptr("Billing acount owner"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleDefinitions_GetByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionRoleDefinition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleDefinitionsClient(cred, &options)
	res, err := client.GetByInvoiceSection(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		"{billingRoleDefinitionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleDefinition{
			Name: to.Ptr("{billingRoleDefinitionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleDefinitions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/{billingRoleDefinitionName}"),
			Properties: &armbilling.RoleDefinitionProperties{
				Description: to.Ptr("The Owner role gives the user all permissions including access management rights to the invoice section."),
				Permissions: []*armbilling.PermissionsProperties{
					{
						Actions: []*string{
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
							to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
						NotActions: []*string{},
					}},
				RoleName: to.Ptr("Invoice section owner"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleDefinitions_GetByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileRoleDefinition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleDefinitionsClient(cred, &options)
	res, err := client.GetByBillingProfile(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{billingRoleDefinitionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleDefinition{
			Name: to.Ptr("{billingRoleDefinitionName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleDefinitions"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/{billingRoleDefinitionName}"),
			Properties: &armbilling.RoleDefinitionProperties{
				Description: to.Ptr("The Owner role gives the user all permissions including access management rights to the billing profile."),
				Permissions: []*armbilling.PermissionsProperties{
					{
						Actions: []*string{
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
							to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
							to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
							to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
							to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
						NotActions: []*string{},
					}},
				RoleName: to.Ptr("Billing profile owner"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleDefinitions_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleDefinitionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountRoleDefinitionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleDefinitionsClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleDefinitionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.RoleDefinitionListResult{
			Value: []*armbilling.RoleDefinition{
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000000"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Owner role gives the user all permissions including access management rights to the billing account."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Billing account owner"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000001"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Contributor role give the user all permissions except access management rights to the billing account."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Billing account contributor"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000002"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000002"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Reader role gives the user read only access to the billing account."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Billing account reader"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000003"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000003"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Signatory role can sign agreements on behalf of the customer."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Signatory"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleDefinitionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleDefinitions_ListByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleDefinitionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionRoleDefinitionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleDefinitionsClient(cred, &options)
	pager := client.ListByInvoiceSection("{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleDefinitionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.RoleDefinitionListResult{
			Value: []*armbilling.RoleDefinition{
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000000"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Owner role gives the user all permissions including access management rights to the invoice section."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Invoice section owner"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000001"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Contributor role give the user all permissions except access management rights to the invoice section."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Invoice section contributor"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleDefinitionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleDefinitions_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleDefinitionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileRoleDefinitionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleDefinitionsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleDefinitionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.RoleDefinitionListResult{
			Value: []*armbilling.RoleDefinition{
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000000"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Owner role gives the user all permissions including access management rights to the billing profile."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000000"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Billing profile owner"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000001"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/10000000-aaaa-bbbb-cccc-100000000001"),
					Properties: &armbilling.RoleDefinitionProperties{
						Description: to.Ptr("The Contributor role give the user all permissions except access management rights to the billing profile."),
						Permissions: []*armbilling.PermissionsProperties{
							{
								Actions: []*string{
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000008"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000003"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("10000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000009"),
									to.Ptr("20000000-aaaa-bbbb-cccc-200000000002"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000015"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000004"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000001"),
									to.Ptr("30000000-aaaa-bbbb-cccc-200000000010"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000007"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000006"),
									to.Ptr("40000000-aaaa-bbbb-cccc-200000000008")},
								NotActions: []*string{},
							}},
						RoleName: to.Ptr("Billing profile contributor"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleDefinitionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_GetByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountRoleAssignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	res, err := client.GetByBillingAccount(ctx,
		"{billingAccountName}",
		"{billingRoleAssignmentId}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleAssignment{
			Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleAssignments"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Properties: &armbilling.RoleAssignmentProperties{
				CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
				CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
				CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
				PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
				PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
				RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
				Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_DeleteByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountRoleAssignmentDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	res, err := client.DeleteByBillingAccount(ctx,
		"{billingAccountName}",
		"{billingRoleAssignmentName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignmentDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleAssignment{
			Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleAssignments"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Properties: &armbilling.RoleAssignmentProperties{
				CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
				CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
				CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
				PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
				PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
				RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
				Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignmentDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_GetByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionRoleAssignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	res, err := client.GetByInvoiceSection(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		"{billingRoleAssignmentName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleAssignment{
			Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleAssignments"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Properties: &armbilling.RoleAssignmentProperties{
				CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
				CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
				CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
				PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
				PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
				RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
				Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_DeleteByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionRoleAssignmentDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	res, err := client.DeleteByInvoiceSection(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		"{billingRoleAssignmentName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignmentDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleAssignment{
			Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleAssignments"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
			Properties: &armbilling.RoleAssignmentProperties{
				CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
				CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
				CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
				PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
				PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
				RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
				Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignmentDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_GetByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileRoleAssignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	res, err := client.GetByBillingProfile(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{billingRoleAssignmentName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleAssignment{
			Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleAssignments"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
			Properties: &armbilling.RoleAssignmentProperties{
				CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
				CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
				CreatedOn:                  to.Ptr("2018-06-21T21:58:19.9073876+00:00"),
				PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
				PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
				RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
				Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_DeleteByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileRoleAssignmentDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	res, err := client.DeleteByBillingProfile(ctx,
		"{billingAccountName}",
		"{billingProfileName}",
		"{billingRoleAssignmentName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignmentDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.RoleAssignment{
			Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleAssignments"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
			Properties: &armbilling.RoleAssignmentProperties{
				CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
				CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
				CreatedOn:                  to.Ptr("2018-06-21T21:58:19.9073876+00:00"),
				PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
				PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
				RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
				Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignmentDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignmentList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountRoleAssignmentList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignmentList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.RoleAssignmentListResult{
			Value: []*armbilling.RoleAssignment{
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleAssignments"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
					Properties: &armbilling.RoleAssignmentProperties{
						CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
						CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
						CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
						PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
						PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
						RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
						Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingRoleAssignments"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
					Properties: &armbilling.RoleAssignmentProperties{
						CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
						CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
						CreatedOn:                  to.Ptr("2018-06-21T21:58:19.9073876+00:00"),
						PrincipalID:                to.Ptr("b1839933-b3ac-42ca-8112-d29c43f3ab47"),
						PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
						RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
						Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingAccountRoleAssignmentList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_ListByInvoiceSection(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignmentList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionRoleAssignmentList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	pager := client.ListByInvoiceSection("{billingAccountName}",
		"{billingProfileName}",
		"{invoiceSectionName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignmentList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.RoleAssignmentListResult{
			Value: []*armbilling.RoleAssignment{
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleAssignments"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
					Properties: &armbilling.RoleAssignmentProperties{
						CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
						CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
						CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
						PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
						PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
						RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
						Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/invoiceSections/billingRoleAssignments"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/10000000-aaaa-bbbb-cccc-100000000000_b1839933-b3ac-42ca-8112-d29c43f3ab47"),
					Properties: &armbilling.RoleAssignmentProperties{
						CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
						CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
						CreatedOn:                  to.Ptr("2018-06-21T21:58:19.9073876+00:00"),
						PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
						PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
						RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
						Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/InvoiceSectionRoleAssignmentList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingRoleAssignments_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignmentList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileRoleAssignmentList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewRoleAssignmentsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignmentList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.RoleAssignmentListResult{
			Value: []*armbilling.RoleAssignment{
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleAssignments"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/10000000-aaaa-bbbb-cccc-100000000000_6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
					Properties: &armbilling.RoleAssignmentProperties{
						CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
						CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
						CreatedOn:                  to.Ptr("2018-06-21T21:34:12.2363515+00:00"),
						PrincipalID:                to.Ptr("6fd330f6-7d26-4aff-b9cf-7bd699f965b9"),
						PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
						RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
						Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
					},
				},
				{
					Name: to.Ptr("10000000-aaaa-bbbb-cccc-100000000000_00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/billingProfiles/billingRoleAssignments"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/10000000-aaaa-bbbb-cccc-100000000000_00000000-0000-0000-0000-000000000000"),
					Properties: &armbilling.RoleAssignmentProperties{
						CreatedByPrincipalID:       to.Ptr("10000000-aaaa-bbbb-cccc-3fd5ff9d6aa1"),
						CreatedByPrincipalTenantID: to.Ptr("7ca289b9-c32d-4f01-8566-7ff93261d76f"),
						CreatedOn:                  to.Ptr("2018-06-21T21:58:19.9073876+00:00"),
						PrincipalID:                to.Ptr("b1839933-b3ac-42ca-8112-d29c43f3ab47"),
						PrincipalTenantID:          to.Ptr("10000000-aaaa-bbbb-cccc-2d7cd011db47"),
						RoleDefinitionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/50000000-aaaa-bbbb-cccc-100000000002"),
						Scope:                      to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/BillingProfileRoleAssignmentList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgreements_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AgreementsListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgreementsListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAgreementsClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		&armbilling.AgreementsClientListByBillingAccountOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AgreementsListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.AgreementListResult{
			Value: []*armbilling.Agreement{
				{
					Name: to.Ptr("Agreement1"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/agreements"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/Agreement1"),
					Properties: &armbilling.AgreementProperties{
						AcceptanceMode: to.Ptr(armbilling.AcceptanceModeClickToAccept),
						AgreementLink:  to.Ptr("https://agreementuri1.com"),
						Category:       to.Ptr(armbilling.CategoryMicrosoftCustomerAgreement),
						EffectiveDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T00:00:00Z"); return t }()),
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T00:00:00Z"); return t }()),
						Participants: []*armbilling.Participants{
							{
								Email:      to.Ptr("abc@contoso.com"),
								Status:     to.Ptr("Accepted"),
								StatusDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00Z"); return t }()),
							},
							{
								Email:      to.Ptr("xtz@contoso.com"),
								Status:     to.Ptr("Declined"),
								StatusDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-02T00:00:00Z"); return t }()),
							}},
						Status: to.Ptr("Published"),
					},
				},
				{
					Name: to.Ptr("Agreement2"),
					Type: to.Ptr("Microsoft.Billing/billingAccounts/agreements"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/Agreement2"),
					Properties: &armbilling.AgreementProperties{
						AcceptanceMode: to.Ptr(armbilling.AcceptanceModeESignEmbedded),
						AgreementLink:  to.Ptr("https://agreementuri2.com"),
						Category:       to.Ptr(armbilling.CategoryMicrosoftCustomerAgreement),
						EffectiveDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T00:00:00Z"); return t }()),
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T00:00:00Z"); return t }()),
						Participants: []*armbilling.Participants{
							{
								Email:      to.Ptr("abc@contoso.com"),
								Status:     to.Ptr("Unknown"),
								StatusDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00Z"); return t }()),
							}},
						Status: to.Ptr("PendingSignature"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AgreementListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AgreementListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AgreementsListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgreements_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AgreementByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgreementByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewAgreementsClient(cred, &options)
	res, err := client.Get(ctx,
		"{billingAccountName}",
		"{agreementName}",
		&armbilling.AgreementsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AgreementByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Agreement{
			Name: to.Ptr("{agreementName}"),
			Type: to.Ptr("Microsoft.Billing/billingAccounts/agreements"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/{agreementName}"),
			Properties: &armbilling.AgreementProperties{
				AcceptanceMode: to.Ptr(armbilling.AcceptanceModeClickToAccept),
				AgreementLink:  to.Ptr("https://agreementuri1.com"),
				Category:       to.Ptr(armbilling.CategoryMicrosoftCustomerAgreement),
				EffectiveDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T00:00:00Z"); return t }()),
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T00:00:00Z"); return t }()),
				Participants: []*armbilling.Participants{
					{
						Email:      to.Ptr("abc@contoso.com"),
						Status:     to.Ptr("Accepted"),
						StatusDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00Z"); return t }()),
					},
					{
						Email:      to.Ptr("xyz@contoso.com"),
						Status:     to.Ptr("Declined"),
						StatusDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-02T00:00:00Z"); return t }()),
					}},
				Status: to.Ptr("Published"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Agreement) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Agreement)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/AgreementByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservations_ListByBillingAccount(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ReservationsListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationsListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewReservationsClient(cred, &options)
	pager := client.ListByBillingAccount("{billingAccountName}",
		&armbilling.ReservationsClientListByBillingAccountOptions{Filter: to.Ptr("properties/reservedResourceType eq 'VirtualMachines'"),
			Orderby:        to.Ptr("properties/userFriendlyAppliedScopeType asc"),
			RefreshSummary: nil,
			SelectedState:  to.Ptr("Succeeded"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ReservationsListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ReservationsListResult{
			Summary: &armbilling.ReservationSummary{
				CancelledCount: to.Ptr[float32](0),
				ExpiredCount:   to.Ptr[float32](0),
				ExpiringCount:  to.Ptr[float32](0),
				FailedCount:    to.Ptr[float32](0),
				PendingCount:   to.Ptr[float32](0),
				SucceededCount: to.Ptr[float32](1),
			},
			Value: []*armbilling.Reservation{
				{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000001/00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/00000000-0000-0000-0000-000000000001/reservations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					Properties: &armbilling.ReservationProperty{
						AppliedScopeType:             to.Ptr("Shared"),
						DisplayName:                  to.Ptr("VM_RI_07-21-2020_12-06"),
						DisplayProvisioningState:     to.Ptr("Succeeded"),
						EffectiveDateTime:            to.Ptr("0001-01-01T00:00:00"),
						ExpiryDate:                   to.Ptr("2023-07-21"),
						ProvisioningState:            to.Ptr("Succeeded"),
						Quantity:                     to.Ptr[float32](2),
						Renew:                        to.Ptr(false),
						ReservedResourceType:         to.Ptr("VirtualMachines"),
						UserFriendlyAppliedScopeType: to.Ptr("Shared"),
						UserFriendlyRenewState:       to.Ptr("Off"),
						Utilization: &armbilling.ReservationPropertyUtilization{
							Aggregates: []*armbilling.ReservationUtilizationAggregates{
								{
									Grain:     to.Ptr[float32](1),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								},
								{
									Grain:     to.Ptr[float32](7),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								},
								{
									Grain:     to.Ptr[float32](30),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								}},
							Trend: to.Ptr("UP"),
						},
					},
					SKU: &armbilling.ReservationSKUProperty{
						Name: to.Ptr("Standard_D1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ReservationsListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservations_ListByBillingProfile(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ReservationsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewReservationsClient(cred, &options)
	pager := client.ListByBillingProfile("{billingAccountName}",
		"{billingProfileName}",
		&armbilling.ReservationsClientListByBillingProfileOptions{Filter: to.Ptr("properties/reservedResourceType eq 'VirtualMachines'"),
			Orderby:        to.Ptr("properties/userFriendlyAppliedScopeType asc"),
			RefreshSummary: nil,
			SelectedState:  to.Ptr("Succeeded"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ReservationsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.ReservationsListResult{
			Summary: &armbilling.ReservationSummary{
				CancelledCount: to.Ptr[float32](0),
				ExpiredCount:   to.Ptr[float32](0),
				ExpiringCount:  to.Ptr[float32](0),
				FailedCount:    to.Ptr[float32](0),
				PendingCount:   to.Ptr[float32](0),
				SucceededCount: to.Ptr[float32](1),
			},
			Value: []*armbilling.Reservation{
				{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000001/00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/00000000-0000-0000-0000-000000000001/reservations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					Properties: &armbilling.ReservationProperty{
						AppliedScopeType:             to.Ptr("Shared"),
						DisplayName:                  to.Ptr("VM_RI_07-21-2020_12-06"),
						DisplayProvisioningState:     to.Ptr("Succeeded"),
						EffectiveDateTime:            to.Ptr("0001-01-01T00:00:00"),
						ExpiryDate:                   to.Ptr("2023-07-21"),
						ProvisioningState:            to.Ptr("Succeeded"),
						Quantity:                     to.Ptr[float32](2),
						Renew:                        to.Ptr(false),
						RenewSource:                  to.Ptr("/providers/Microsoft.Capacity/reservationorders/00000000-0000-0000-0000-000000000002/reservations/00000000-0000-0000-0000-000000000003"),
						ReservedResourceType:         to.Ptr("VirtualMachines"),
						UserFriendlyAppliedScopeType: to.Ptr("Shared"),
						UserFriendlyRenewState:       to.Ptr("Off"),
						Utilization: &armbilling.ReservationPropertyUtilization{
							Aggregates: []*armbilling.ReservationUtilizationAggregates{
								{
									Grain:     to.Ptr[float32](1),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								},
								{
									Grain:     to.Ptr[float32](7),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								},
								{
									Grain:     to.Ptr[float32](30),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								}},
							Trend: to.Ptr("UP"),
						},
					},
					SKU: &armbilling.ReservationSKUProperty{
						Name: to.Ptr("Standard_D1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/stable/2020-05-01/examples/ReservationsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnrollmentAccounts_List(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/EnrollmentAccountsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewEnrollmentAccountsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/EnrollmentAccountsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.EnrollmentAccountListResult{
			Value: []*armbilling.EnrollmentAccountSummary{
				{
					Name: to.Ptr("e1bf1c8c-5ac6-44a0-bdcd-aa7c1cf60556"),
					Type: to.Ptr("Microsoft.Billing/enrollmentAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/e1bf1c8c-5ac6-44a0-bdcd-aa7c1cf60556"),
					Properties: &armbilling.EnrollmentAccountSummaryProperties{
						PrincipalName: to.Ptr("kathy@contoso.com"),
					},
				},
				{
					Name: to.Ptr("edd24053-07cd-4ed4-aa5b-326160a6680d"),
					Type: to.Ptr("Microsoft.Billing/enrollmentAccounts"),
					ID:   to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/edd24053-07cd-4ed4-aa5b-326160a6680d"),
					Properties: &armbilling.EnrollmentAccountSummaryProperties{
						PrincipalName: to.Ptr("dan@contoso.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EnrollmentAccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EnrollmentAccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/EnrollmentAccountsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnrollmentAccounts_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/EnrollmentAccountsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewEnrollmentAccountsClient(cred, &options)
	res, err := client.Get(ctx,
		"e1bf1c8c-5ac6-44a0-bdcd-aa7c1cf60556",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/EnrollmentAccountsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.EnrollmentAccountSummary{
			Name: to.Ptr("e1bf1c8c-5ac6-44a0-bdcd-aa7c1cf60556"),
			Type: to.Ptr("Microsoft.Billing/enrollmentAccounts"),
			ID:   to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/e1bf1c8c-5ac6-44a0-bdcd-aa7c1cf60556"),
			Properties: &armbilling.EnrollmentAccountSummaryProperties{
				PrincipalName: to.Ptr("kathy@contoso.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EnrollmentAccountSummary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnrollmentAccountSummary)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/EnrollmentAccountsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingPeriods_List(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/BillingPeriodsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingPeriodsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPeriodsClient("subid", cred, &options)
	pager := client.List(&armbilling.PeriodsClientListOptions{Filter: nil,
		Skiptoken: nil,
		Top:       nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/BillingPeriodsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbilling.PeriodsListResult{
			Value: []*armbilling.Period{
				{
					Name: to.Ptr("201702-1"),
					Type: to.Ptr("Microsoft.Billing/billingPeriods"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/billingPeriods/201702-1"),
					Properties: &armbilling.PeriodProperties{
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2017-02-01"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2017-01-01"); return t }()),
						InvoiceIDs: []*string{
							to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/invoices/2017-02-05-123456789"),
							to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/invoices/2017-01-05-987654321")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PeriodsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PeriodsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/BillingPeriodsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingPeriods_Get(t *testing.T) {
	// From example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/BillingPeriodsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingPeriodsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbilling.NewPeriodsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"201702-1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/BillingPeriodsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbilling.Period{
			Name: to.Ptr("201702-1"),
			Type: to.Ptr("Microsoft.Billing/billingPeriods"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/billingPeriods/201702-1"),
			Properties: &armbilling.PeriodProperties{
				BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2017-02-01"); return t }()),
				BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2017-01-01"); return t }()),
				InvoiceIDs: []*string{
					to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/invoices/2017-02-05-123456789"),
					to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/invoices/2017-01-05-987654321")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Period) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Period)
			t.Fatalf("Mock response is not equal to example response for example specification/billing/resource-manager/Microsoft.Billing/preview/2018-03-01-preview/examples/BillingPeriodsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
