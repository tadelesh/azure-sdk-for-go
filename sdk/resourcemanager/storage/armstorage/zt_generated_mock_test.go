//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.OperationListResult{
			Value: []*armstorage.Operation{
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Creates a storage account with the specified parameters or update the properties or tags or adds custom domain for the specified storage account."),
						Operation:   to.Ptr("Create/Update Storage Account"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/delete"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Deletes an existing storage account."),
						Operation:   to.Ptr("Delete Storage Account"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/listkeys/action"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Returns the access keys for the specified storage account."),
						Operation:   to.Ptr("List Storage Account Keys"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/regeneratekey/action"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Regenerates the access keys for the specified storage account."),
						Operation:   to.Ptr("Regenerate Storage Account Keys"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/checknameavailability/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Checks that account name is valid and is not in use."),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Name Availability"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Returns the list of storage accounts or gets the properties for the specified storage account."),
						Operation:   to.Ptr("List/Get Storage Account(s)"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/usages/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Returns the limit and the current usage count for resources in the specified subscription"),
						Operation:   to.Ptr("Get Subscription Usages"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Usage Metrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/listAccountSas/action"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Returns the Account SAS token for the specified storage account."),
						Operation:   to.Ptr("Returns Storage Account SAS Token"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Account SAS Token"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/listServiceSas/action"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Storage Service SAS Token"),
						Operation:   to.Ptr("Returns Storage Service SAS Token"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Returns the Service SAS token for the specified storage account."),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/locations/deleteVirtualNetworkOrSubnets/action"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Notifies Microsoft.Storage that virtual network or subnet is being deleted"),
						Operation:   to.Ptr("Delete virtual network or subnets notifications"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Location"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/operations/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Polls the status of an asynchronous operation."),
						Operation:   to.Ptr("Poll Asynchronous Operation"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/register/action"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the storage resource provider and enables the creation of storage accounts."),
						Operation:   to.Ptr("Registers the Storage Resource Provider"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/skus/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Lists the Skus supported by Microsoft.Storage."),
						Operation:   to.Ptr("List Skus"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Skus"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/services/diagnosticSettings/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Create/Update storage account diagnostic settings."),
						Operation:   to.Ptr("Create/Update Diagnostic Settings"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Get list of Microsoft Storage Metrics definitions."),
						Operation:   to.Ptr("Get list of Microsoft Storage Metrics definitions"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armstorage.OperationProperties{
						ServiceSpecification: &armstorage.ServiceSpecification{
							MetricSpecifications: []*armstorage.MetricSpecification{
								{
									Name:                            to.Ptr("UsedCapacity"),
									AggregationType:                 to.Ptr("Average"),
									Category:                        to.Ptr("Capacity"),
									DisplayDescription:              to.Ptr("Account used capacity"),
									DisplayName:                     to.Ptr("Used capacity"),
									FillGapWithZero:                 to.Ptr(false),
									ResourceIDDimensionNameOverride: to.Ptr("AccountResourceId"),
									Unit:                            to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Storage Accounts"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Get list of Microsoft Storage Metrics definitions."),
						Operation:   to.Ptr("Get list of Microsoft Storage Metrics definitions"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Blob service"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armstorage.OperationProperties{
						ServiceSpecification: &armstorage.ServiceSpecification{
							MetricSpecifications: []*armstorage.MetricSpecification{
								{
									Name:            to.Ptr("BlobCapacity"),
									AggregationType: to.Ptr("Average"),
									Category:        to.Ptr("Capacity"),
									Dimensions: []*armstorage.Dimension{
										{
											Name:        to.Ptr("BlobType"),
											DisplayName: to.Ptr("Blob type"),
										}},
									DisplayDescription: to.Ptr("The amount of storage used by the storage account’s Blob service in bytes."),
									DisplayName:        to.Ptr("Blob Capacity"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("BlobCount"),
									AggregationType: to.Ptr("Average"),
									Category:        to.Ptr("Capacity"),
									Dimensions: []*armstorage.Dimension{
										{
											Name:        to.Ptr("BlobType"),
											DisplayName: to.Ptr("Blob type"),
										}},
									DisplayDescription: to.Ptr("The number of Blob in the storage account’s Blob service."),
									DisplayName:        to.Ptr("Blob Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:               to.Ptr("ContainerCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The number of containers in the storage account’s Blob service."),
									DisplayName:        to.Ptr("Blob Container Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("BlobProvisionedSize"),
									AggregationType: to.Ptr("Average"),
									Category:        to.Ptr("Capacity"),
									Dimensions: []*armstorage.Dimension{
										{
											Name:        to.Ptr("BlobType"),
											DisplayName: to.Ptr("Blob type"),
										}},
									DisplayDescription: to.Ptr("The amount of storage provisioned in the storage account’s Blob service in bytes."),
									DisplayName:        to.Ptr("Blob Provisioned Size"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Blob service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Blob service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Get list of Microsoft Storage Metrics definitions."),
						Operation:   to.Ptr("Get list of Microsoft Storage Metrics definitions"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Table service"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armstorage.OperationProperties{
						ServiceSpecification: &armstorage.ServiceSpecification{
							MetricSpecifications: []*armstorage.MetricSpecification{
								{
									Name:               to.Ptr("TableCapacity"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The amount of storage used by the storage account’s Table service in bytes."),
									DisplayName:        to.Ptr("Table Capacity"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:               to.Ptr("TableCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The number of table in the storage account’s Table service."),
									DisplayName:        to.Ptr("Table Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:               to.Ptr("TableEntityCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The number of table entities in the storage account’s Table service."),
									DisplayName:        to.Ptr("Table Entity Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Table service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Table service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Get list of Microsoft Storage Metrics definitions."),
						Operation:   to.Ptr("Get list of Microsoft Storage Metrics definitions"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Queue service"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armstorage.OperationProperties{
						ServiceSpecification: &armstorage.ServiceSpecification{
							MetricSpecifications: []*armstorage.MetricSpecification{
								{
									Name:               to.Ptr("QueueCapacity"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The amount of storage used by the storage account’s Queue service in bytes."),
									DisplayName:        to.Ptr("Queue Capacity"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:               to.Ptr("QueueCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The number of queue in the storage account’s Queue service."),
									DisplayName:        to.Ptr("Queue Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:               to.Ptr("QueueMessageCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The approximate number of queue messages in the storage account’s Queue service."),
									DisplayName:        to.Ptr("Queue Message Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Queue service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("Queue service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Get list of Microsoft Storage Metrics definitions."),
						Operation:   to.Ptr("Get list of Microsoft Storage Metrics definitions"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("File service"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armstorage.OperationProperties{
						ServiceSpecification: &armstorage.ServiceSpecification{
							MetricSpecifications: []*armstorage.MetricSpecification{
								{
									Name:               to.Ptr("FileCapacity"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The amount of storage used by the storage account’s File service in bytes."),
									DisplayName:        to.Ptr("File Capacity"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:               to.Ptr("FileProvisionedSize"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The amount of storage provisioned in the storage account’s File service in bytes."),
									DisplayName:        to.Ptr("File Provisioned Size"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:               to.Ptr("FileCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The number of file in the storage account’s File service."),
									DisplayName:        to.Ptr("File Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:               to.Ptr("FileShareCount"),
									AggregationType:    to.Ptr("Average"),
									Category:           to.Ptr("Capacity"),
									DisplayDescription: to.Ptr("The number of file shares in the storage account’s File service."),
									DisplayName:        to.Ptr("File Share Count"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("File service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armstorage.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Storage"),
						Resource:    to.Ptr("File service"),
					},
					Origin: to.Ptr("system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/SKUList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SkuList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewSKUsClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/SKUList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.SKUListResult{
			Value: []*armstorage.SKUInformation{
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2(stage)")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southeastasia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("japaneast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("japanwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("northcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("northeurope")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("brazilsouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("australiaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("australiasoutheast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("southindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westindia")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("canadaeast")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("canadacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("westcentralus")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uksouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("ukwest")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("koreacentral")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("koreasouth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uknorth")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("uksouth2")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("eastus2euap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardZRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNamePremiumLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierPremium),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardLRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportsarchivepreview"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("true"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				},
				{
					Name: to.Ptr(armstorage.SKUNameStandardRAGRS),
					Capabilities: []*armstorage.SKUCapability{
						{
							Name:  to.Ptr("supportschangenotification"),
							Value: to.Ptr("true"),
						},
						{
							Name:  to.Ptr("supportsfileencryption"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportshoeboxcapacitymetrics"),
							Value: to.Ptr("false"),
						},
						{
							Name:  to.Ptr("supportsnetworkacls"),
							Value: to.Ptr("false"),
						}},
					Kind: to.Ptr(armstorage.KindBlobStorage),
					Locations: []*string{
						to.Ptr("centraluseuap")},
					ResourceType: to.Ptr("storageAccounts"),
					Restrictions: []*armstorage.Restriction{},
					Tier:         to.Ptr(armstorage.SKUTierStandard),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/SKUList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_CheckNameAvailability(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armstorage.AccountCheckNameAvailabilityParameters{
			Name: to.Ptr("sto3363"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Create(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/NfsV3AccountCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NfsV3AccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			Kind:     to.Ptr(armstorage.KindBlockBlobStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				IsHnsEnabled: to.Ptr(true),
				EnableNfsV3:  to.Ptr(true),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:        to.Ptr(armstorage.BypassAzureServices),
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					IPRules:       []*armstorage.IPRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{
						{
							VirtualNetworkResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12"),
						}},
				},
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNamePremiumLRS),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/NfsV3AccountCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/NfsV3AccountCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Kind:     to.Ptr(armstorage.KindBlockBlobStorage),
			Properties: &armstorage.AccountProperties{
				IsHnsEnabled: to.Ptr(true),
				EnableNfsV3:  to.Ptr(true),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:        to.Ptr(armstorage.BypassAzureServices),
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					IPRules:       []*armstorage.IPRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{
						{
							VirtualNetworkResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12"),
						}},
				},
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNamePremiumLRS),
				Tier: to.Ptr(armstorage.SKUTierPremium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/NfsV3AccountCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreate"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				AllowBlobPublicAccess:        to.Ptr(false),
				AllowSharedKeyAccess:         to.Ptr(true),
				DefaultToOAuthAuthentication: to.Ptr(false),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				IsHnsEnabled:  to.Ptr(true),
				IsSftpEnabled: to.Ptr(true),
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:25:33.4863236Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled:  to.Ptr(true),
				IsSftpEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File: to.Ptr("https://sto4445.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto4445-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto4445-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto4445-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto4445-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto4445-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto4445-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto4445-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto4445-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto4445-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto4445-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2euap"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("centraluseuap"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateAllowedCopyScopeToAAD"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				AllowedCopyScope:      to.Ptr(armstorage.AllowedCopyScopeAAD),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				AllowedCopyScope:      to.Ptr(armstorage.AllowedCopyScopeAAD),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:25:33.4863236Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File: to.Ptr("https://sto4445.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto4445-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto4445-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto4445-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto4445-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto4445-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto4445-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto4445-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto4445-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto4445-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto4445-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2euap"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("centraluseuap"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateAllowedCopyScopeToPrivateLink"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				AllowedCopyScope:      to.Ptr(armstorage.AllowedCopyScopePrivateLink),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				AllowedCopyScope:      to.Ptr(armstorage.AllowedCopyScopePrivateLink),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:25:33.4863236Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File: to.Ptr("https://sto4445.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto4445-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto4445-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto4445-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto4445-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto4445-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto4445-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto4445-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto4445-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto4445-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto4445-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2euap"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("centraluseuap"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateDisallowPublicNetworkAccess"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion:   to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PublicNetworkAccess: to.Ptr(armstorage.PublicNetworkAccessDisabled),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:25:33.4863236Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File: to.Ptr("https://sto4445.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto4445-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto4445-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto4445-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto4445-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto4445-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto4445-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto4445-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto4445-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto4445-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto4445-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:     to.Ptr("eastus2euap"),
				ProvisioningState:   to.Ptr(armstorage.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armstorage.PublicNetworkAccessDisabled),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("centraluseuap"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateEnablePublicNetworkAccess"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion:   to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PublicNetworkAccess: to.Ptr(armstorage.PublicNetworkAccessEnabled),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:25:33.4863236Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource:                       to.Ptr(armstorage.KeySourceMicrosoftStorage),
					RequireInfrastructureEncryption: to.Ptr(false),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File: to.Ptr("https://sto4445.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto4445-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto4445-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto4445-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto4445-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto4445-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto4445-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto4445-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto4445-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto4445-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto4445-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:     to.Ptr("eastus2euap"),
				ProvisioningState:   to.Ptr(armstorage.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armstorage.PublicNetworkAccessEnabled),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("centraluseuap"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateUserAssignedEncryptionIdentityWithCMK"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {},
				},
			},
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionUserAssignedIdentity: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						KeyName:     to.Ptr("wrappingKey"),
						KeyVaultURI: to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:  to.Ptr(""),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {
						ClientID:    to.Ptr("fbaa6278-1ecc-415c-819f-6e2058d3acb5"),
						PrincipalID: to.Ptr("8d823284-1060-42a5-9ec4-ed3d831e24d7"),
					},
				},
			},
			Kind: to.Ptr(armstorage.KindStorageV2),
			Properties: &armstorage.AccountProperties{
				AccessTier:   to.Ptr(armstorage.AccessTierHot),
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.0839093Z"); return t }()),
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionUserAssignedIdentity: to.Ptr("/subscriptions/{subscription-id}/resourcegroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
						KeyName:                       to.Ptr("wrappingKey"),
						KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:                    to.Ptr(""),
						LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
					},
				},
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:              to.Ptr(armstorage.BypassAzureServices),
					DefaultAction:       to.Ptr(armstorage.DefaultActionAllow),
					IPRules:             []*armstorage.IPRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto4445.file.core.windows.net/"),
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:            to.Ptr("eastus"),
				PrivateEndpointConnections: []*armstorage.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armstorage.ProvisioningStateSucceeded),
				StatusOfPrimary:            to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly:     to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId."},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res131918",
		"sto131918",
		armstorage.AccountCreateParameters{
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {},
				},
			},
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionFederatedIdentityClientID: to.Ptr("f83c6b1b-4d34-47e4-bb34-9d83df58b540"),
						EncryptionUserAssignedIdentity:      to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						KeyName:     to.Ptr("wrappingKey"),
						KeyVaultURI: to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:  to.Ptr(""),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {
						ClientID:    to.Ptr("fbaa6278-1ecc-415c-819f-6e2058d3acb5"),
						PrincipalID: to.Ptr("8d823284-1060-42a5-9ec4-ed3d831e24d7"),
					},
				},
			},
			Kind: to.Ptr(armstorage.KindStorageV2),
			Properties: &armstorage.AccountProperties{
				AccessTier:   to.Ptr(armstorage.AccessTierHot),
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.0839093Z"); return t }()),
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionFederatedIdentityClientID: to.Ptr("f83c6b1b-4d34-47e4-bb34-9d83df58b540"),
						EncryptionUserAssignedIdentity:      to.Ptr("/subscriptions/{subscription-id}/resourcegroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
						KeyName:                       to.Ptr("wrappingKey"),
						KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:                    to.Ptr(""),
						LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
					},
				},
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:              to.Ptr(armstorage.BypassAzureServices),
					DefaultAction:       to.Ptr(armstorage.DefaultActionAllow),
					IPRules:             []*armstorage.IPRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto4445.file.core.windows.net/"),
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:            to.Ptr("eastus"),
				PrivateEndpointConnections: []*armstorage.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armstorage.ProvisioningStateSucceeded),
				StatusOfPrimary:            to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly:     to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateWithImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateWithImmutabilityPolicy"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountCreateParameters{
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind:     to.Ptr(armstorage.KindStorage),
			Location: to.Ptr("eastus"),
			Properties: &armstorage.AccountPropertiesCreateParameters{
				ImmutableStorageWithVersioning: &armstorage.ImmutableStorageAccount{
					Enabled: to.Ptr(true),
					ImmutabilityPolicy: &armstorage.AccountImmutabilityPolicyProperties{
						AllowProtectedAppendWrites:            to.Ptr(true),
						ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](15),
						State:                                 to.Ptr(armstorage.AccountImmutabilityPolicyStateUnlocked),
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
			},
		},
		&armstorage.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateWithImmutabilityPolicy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateWithImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			ExtendedLocation: &armstorage.ExtendedLocation{
				Name: to.Ptr("losangeles001"),
				Type: to.Ptr(armstorage.ExtendedLocationTypesEdgeZone),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:25:33.4863236Z"); return t }()),
				ImmutableStorageWithVersioning: &armstorage.ImmutableStorageAccount{
					Enabled: to.Ptr(true),
					ImmutabilityPolicy: &armstorage.AccountImmutabilityPolicyProperties{
						AllowProtectedAppendWrites:            to.Ptr(true),
						ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](15),
						State:                                 to.Ptr(armstorage.AccountImmutabilityPolicyStateUnlocked),
					},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto4445.file.core.windows.net/"),
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2euap"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateWithImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res4228",
		"sto2434",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDelete.json: %v", err)
	}
}

func TestStorageAccounts_GetProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetProperties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.GetProperties(ctx,
		"res9407",
		"sto8596",
		&armstorage.AccountsClientGetPropertiesOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				GeoReplicationStats: &armstorage.GeoReplicationStats{
					CanFailover:  to.Ptr(true),
					LastSyncTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-30T00:25:34Z"); return t }()),
					Status:       to.Ptr(armstorage.GeoReplicationStatusLive),
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:        to.Ptr(armstorage.BypassAzureServices),
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					IPRules:       []*armstorage.IPRule{},
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File: to.Ptr("https://sto8596.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto8596-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto8596-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto8596-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto8596-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto8596-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto8596-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto8596-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto8596-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto8596-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto8596-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2(stage)"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetPropertiesCMKEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetPropertiesCMKEnabled"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.GetProperties(ctx,
		"res9407",
		"sto8596",
		&armstorage.AccountsClientGetPropertiesOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetPropertiesCMKEnabled.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Identity: &armstorage.Identity{
				Type:        to.Ptr(armstorage.IdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("911871cc-ffd1-4fc4-ac11-7a316433ea66"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
						KeyName:                       to.Ptr("wrappingKey"),
						KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:                    to.Ptr(""),
						LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				GeoReplicationStats: &armstorage.GeoReplicationStats{
					CanFailover:  to.Ptr(true),
					LastSyncTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-30T00:25:34Z"); return t }()),
					Status:       to.Ptr(armstorage.GeoReplicationStatusLive),
				},
				IsHnsEnabled: to.Ptr(true),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:              to.Ptr(armstorage.BypassAzureServices),
					DefaultAction:       to.Ptr(armstorage.DefaultActionAllow),
					IPRules:             []*armstorage.IPRule{},
					ResourceAccessRules: []*armstorage.ResourceAccessRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File: to.Ptr("https://sto8596.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto8596-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto8596-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto8596-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto8596-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto8596-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto8596-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto8596-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto8596-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto8596-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto8596-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2(stage)"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetPropertiesCMKEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Update(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEnableAD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountEnableAD"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"res9407",
		"sto8596",
		armstorage.AccountUpdateParameters{
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				AzureFilesIdentityBasedAuthentication: &armstorage.AzureFilesIdentityBasedAuthentication{
					ActiveDirectoryProperties: &armstorage.ActiveDirectoryProperties{
						AccountType:       to.Ptr(armstorage.ActiveDirectoryPropertiesAccountTypeUser),
						AzureStorageSid:   to.Ptr("S-1-5-21-2400535526-2334094090-2402026252-0012"),
						DomainGUID:        to.Ptr("aebfc118-9fa9-4732-a21f-d98e41a77ae1"),
						DomainName:        to.Ptr("adtest.com"),
						DomainSid:         to.Ptr("S-1-5-21-2400535526-2334094090-2402026252"),
						ForestName:        to.Ptr("adtest.com"),
						NetBiosDomainName: to.Ptr("adtest.com"),
						SamAccountName:    to.Ptr("sam12498"),
					},
					DirectoryServiceOptions: to.Ptr(armstorage.DirectoryServiceOptionsAD),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEnableAD.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AzureFilesIdentityBasedAuthentication: &armstorage.AzureFilesIdentityBasedAuthentication{
					ActiveDirectoryProperties: &armstorage.ActiveDirectoryProperties{
						AccountType:       to.Ptr(armstorage.ActiveDirectoryPropertiesAccountTypeUser),
						AzureStorageSid:   to.Ptr("S-1-5-21-2400535526-2334094090-2402026252-0012"),
						DomainGUID:        to.Ptr("aebfc118-9fa9-4732-a21f-d98e41a77ae1"),
						DomainName:        to.Ptr("adtest.com"),
						DomainSid:         to.Ptr("S-1-5-21-2400535526-2334094090-2402026252"),
						ForestName:        to.Ptr("adtest.com"),
						NetBiosDomainName: to.Ptr("adtest.com"),
						SamAccountName:    to.Ptr("sam12498"),
					},
					DirectoryServiceOptions: to.Ptr(armstorage.DirectoryServiceOptionsAD),
				},
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto8596.file.core.windows.net/"),
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:        to.Ptr("eastus2(stage)"),
				ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEnableAD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEnableCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountEnableCMK"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res9407",
		"sto8596",
		armstorage.AccountUpdateParameters{
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						KeyName:     to.Ptr("wrappingKey"),
						KeyVaultURI: to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:  to.Ptr(""),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEnableCMK.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Identity: &armstorage.Identity{
				Type:        to.Ptr(armstorage.IdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("911871cc-ffd1-4fc4-ac11-7a316433ea66"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
						KeyName:                       to.Ptr("wrappingKey"),
						KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:                    to.Ptr(""),
						LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto8596.file.core.windows.net/"),
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:        to.Ptr("eastus2(stage)"),
				ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEnableCMK.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdate"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res9407",
		"sto8596",
		armstorage.AccountUpdateParameters{
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				AllowBlobPublicAccess:        to.Ptr(false),
				AllowSharedKeyAccess:         to.Ptr(true),
				DefaultToOAuthAuthentication: to.Ptr(false),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				IsLocalUserEnabled: to.Ptr(true),
				IsSftpEnabled:      to.Ptr(true),
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
				},
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled:       to.Ptr(true),
				IsLocalUserEnabled: to.Ptr(true),
				IsSftpEnabled:      to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:        to.Ptr(armstorage.BypassAzureServices),
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					IPRules:       []*armstorage.IPRule{},
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File: to.Ptr("https://sto8596.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto8596-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto8596-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto8596-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto8596-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto8596-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto8596-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto8596-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto8596-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto8596-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto8596-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2(stage)"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateAllowedCopyScopeToAAD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateAllowedCopyScopeToAAD"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res9407",
		"sto8596",
		armstorage.AccountUpdateParameters{
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				AllowedCopyScope:      to.Ptr(armstorage.AllowedCopyScopeAAD),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
				},
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateAllowedCopyScopeToAAD.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				AllowedCopyScope:      to.Ptr(armstorage.AllowedCopyScopeAAD),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:        to.Ptr(armstorage.BypassAzureServices),
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					IPRules:       []*armstorage.IPRule{},
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File: to.Ptr("https://sto8596.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto8596-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto8596-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto8596-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto8596-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto8596-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto8596-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto8596-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto8596-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto8596-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto8596-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:   to.Ptr("eastus2(stage)"),
				ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateAllowedCopyScopeToAAD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateDisablePublicNetworkAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateDisablePublicNetworkAccess"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res9407",
		"sto8596",
		armstorage.AccountUpdateParameters{
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
				},
				PublicNetworkAccess: to.Ptr(armstorage.PublicNetworkAccessDisabled),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateDisablePublicNetworkAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				AllowBlobPublicAccess: to.Ptr(false),
				AllowSharedKeyAccess:  to.Ptr(true),
				CreationTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
				Encryption: &armstorage.Encryption{
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
						},
					},
				},
				IsHnsEnabled: to.Ptr(true),
				KeyCreationTime: &armstorage.KeyCreationTime{
					Key1: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
					Key2: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-18T04:42:22.4322836Z"); return t }()),
				},
				KeyPolicy: &armstorage.KeyPolicy{
					KeyExpirationPeriodInDays: to.Ptr[int32](20),
				},
				MinimumTLSVersion: to.Ptr(armstorage.MinimumTLSVersionTLS12),
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:        to.Ptr(armstorage.BypassAzureServices),
					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
					IPRules:       []*armstorage.IPRule{},
					ResourceAccessRules: []*armstorage.ResourceAccessRule{
						{
							ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
							TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						}},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob: to.Ptr("https://sto8596.blob.core.windows.net/"),
					Dfs:  to.Ptr("https://sto8596.dfs.core.windows.net/"),
					File: to.Ptr("https://sto8596.file.core.windows.net/"),
					InternetEndpoints: &armstorage.AccountInternetEndpoints{
						Blob: to.Ptr("https://sto8596-internetrouting.blob.core.windows.net/"),
						Dfs:  to.Ptr("https://sto8596-internetrouting.dfs.core.windows.net/"),
						File: to.Ptr("https://sto8596-internetrouting.file.core.windows.net/"),
						Web:  to.Ptr("https://sto8596-internetrouting.web.core.windows.net/"),
					},
					MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
						Blob:  to.Ptr("https://sto8596-microsoftrouting.blob.core.windows.net/"),
						Dfs:   to.Ptr("https://sto8596-microsoftrouting.dfs.core.windows.net/"),
						File:  to.Ptr("https://sto8596-microsoftrouting.file.core.windows.net/"),
						Queue: to.Ptr("https://sto8596-microsoftrouting.queue.core.windows.net/"),
						Table: to.Ptr("https://sto8596-microsoftrouting.table.core.windows.net/"),
						Web:   to.Ptr("https://sto8596-microsoftrouting.web.core.windows.net/"),
					},
					Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
					Table: to.Ptr("https://sto8596.table.core.windows.net/"),
					Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
				},
				PrimaryLocation:     to.Ptr("eastus2(stage)"),
				ProvisioningState:   to.Ptr(armstorage.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armstorage.PublicNetworkAccessDisabled),
				RoutingPreference: &armstorage.RoutingPreference{
					PublishInternetEndpoints:  to.Ptr(true),
					PublishMicrosoftEndpoints: to.Ptr(true),
					RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
				},
				SasPolicy: &armstorage.SasPolicy{
					ExpirationAction:    to.Ptr(armstorage.ExpirationActionLog),
					SasExpirationPeriod: to.Ptr("1.15:59:59"),
				},
				SecondaryLocation:      to.Ptr("northcentralus(stage)"),
				StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
				StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly: to.Ptr(false),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateDisablePublicNetworkAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateUserAssignedEncryptionIdentityWithCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateUserAssignedEncryptionIdentityWithCMK"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res9101",
		"sto4445",
		armstorage.AccountUpdateParameters{
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {},
				},
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionUserAssignedIdentity: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						KeyName:     to.Ptr("wrappingKey"),
						KeyVaultURI: to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:  to.Ptr(""),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateUserAssignedEncryptionIdentityWithCMK.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {
						ClientID:    to.Ptr("fbaa6278-1ecc-415c-819f-6e2058d3acb5"),
						PrincipalID: to.Ptr("8d823284-1060-42a5-9ec4-ed3d831e24d7"),
					},
				},
			},
			Kind: to.Ptr(armstorage.KindStorageV2),
			Properties: &armstorage.AccountProperties{
				AccessTier:   to.Ptr(armstorage.AccessTierHot),
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.0839093Z"); return t }()),
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionUserAssignedIdentity: to.Ptr("/subscriptions/{subscription-id}/resourcegroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
						KeyName:                       to.Ptr("wrappingKey"),
						KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:                    to.Ptr(""),
						LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
					},
				},
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:              to.Ptr(armstorage.BypassAzureServices),
					DefaultAction:       to.Ptr(armstorage.DefaultActionAllow),
					IPRules:             []*armstorage.IPRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto4445.file.core.windows.net/"),
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:            to.Ptr("eastus"),
				PrivateEndpointConnections: []*armstorage.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armstorage.ProvisioningStateSucceeded),
				StatusOfPrimary:            to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly:     to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateUserAssignedEncryptionIdentityWithCMK.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateUserAssignedIdentityWithFederatedIdentityClientId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateUserAssignedIdentityWithFederatedIdentityClientId"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res131918",
		"sto131918",
		armstorage.AccountUpdateParameters{
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {},
				},
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionFederatedIdentityClientID: to.Ptr("3109d1c4-a5de-4d84-8832-feabb916a4b6"),
						EncryptionUserAssignedIdentity:      to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						KeyName:     to.Ptr("wrappingKey"),
						KeyVaultURI: to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:  to.Ptr(""),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
						File: &armstorage.EncryptionService{
							Enabled: to.Ptr(true),
							KeyType: to.Ptr(armstorage.KeyTypeAccount),
						},
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateUserAssignedIdentityWithFederatedIdentityClientId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto4445"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Identity: &armstorage.Identity{
				Type: to.Ptr(armstorage.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armstorage.UserAssignedIdentity{
					"/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {
						ClientID:    to.Ptr("fbaa6278-1ecc-415c-819f-6e2058d3acb5"),
						PrincipalID: to.Ptr("8d823284-1060-42a5-9ec4-ed3d831e24d7"),
					},
				},
			},
			Kind: to.Ptr(armstorage.KindStorageV2),
			Properties: &armstorage.AccountProperties{
				AccessTier:   to.Ptr(armstorage.AccessTierHot),
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.0839093Z"); return t }()),
				Encryption: &armstorage.Encryption{
					EncryptionIdentity: &armstorage.EncryptionIdentity{
						EncryptionFederatedIdentityClientID: to.Ptr("3109d1c4-a5de-4d84-8832-feabb916a4b6"),
						EncryptionUserAssignedIdentity:      to.Ptr("/subscriptions/{subscription-id}/resourcegroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"),
					},
					KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
					KeyVaultProperties: &armstorage.KeyVaultProperties{
						CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
						KeyName:                       to.Ptr("wrappingKey"),
						KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
						KeyVersion:                    to.Ptr(""),
						LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
					},
					Services: &armstorage.EncryptionServices{
						Blob: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
						File: &armstorage.EncryptionService{
							Enabled:         to.Ptr(true),
							KeyType:         to.Ptr(armstorage.KeyTypeAccount),
							LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-15T00:43:14.1739587Z"); return t }()),
						},
					},
				},
				NetworkRuleSet: &armstorage.NetworkRuleSet{
					Bypass:              to.Ptr(armstorage.BypassAzureServices),
					DefaultAction:       to.Ptr(armstorage.DefaultActionAllow),
					IPRules:             []*armstorage.IPRule{},
					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
				},
				PrimaryEndpoints: &armstorage.Endpoints{
					Blob:  to.Ptr("https://sto4445.blob.core.windows.net/"),
					Dfs:   to.Ptr("https://sto4445.dfs.core.windows.net/"),
					File:  to.Ptr("https://sto4445.file.core.windows.net/"),
					Queue: to.Ptr("https://sto4445.queue.core.windows.net/"),
					Table: to.Ptr("https://sto4445.table.core.windows.net/"),
					Web:   to.Ptr("https://sto4445.web.core.windows.net/"),
				},
				PrimaryLocation:            to.Ptr("eastus"),
				PrivateEndpointConnections: []*armstorage.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armstorage.ProvisioningStateSucceeded),
				StatusOfPrimary:            to.Ptr(armstorage.AccountStatusAvailable),
				EnableHTTPSTrafficOnly:     to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardLRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateUserAssignedIdentityWithFederatedIdentityClientId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateWithImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateWithImmutabilityPolicy"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res9407",
		"sto8596",
		armstorage.AccountUpdateParameters{
			Properties: &armstorage.AccountPropertiesUpdateParameters{
				ImmutableStorageWithVersioning: &armstorage.ImmutableStorageAccount{
					Enabled: to.Ptr(true),
					ImmutabilityPolicy: &armstorage.AccountImmutabilityPolicyProperties{
						AllowProtectedAppendWrites:            to.Ptr(true),
						ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](15),
						State:                                 to.Ptr(armstorage.AccountImmutabilityPolicyStateLocked),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateWithImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Account{
			Name:     to.Ptr("sto8596"),
			Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
			Location: to.Ptr("eastus2(stage)"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Kind: to.Ptr(armstorage.KindStorage),
			Properties: &armstorage.AccountProperties{
				ImmutableStorageWithVersioning: &armstorage.ImmutableStorageAccount{
					Enabled: to.Ptr(true),
					ImmutabilityPolicy: &armstorage.AccountImmutabilityPolicyProperties{
						AllowProtectedAppendWrites:            to.Ptr(true),
						ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](15),
						State:                                 to.Ptr(armstorage.AccountImmutabilityPolicyStateLocked),
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateWithImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.AccountListResult{
			Value: []*armstorage.Account{
				{
					Name:     to.Ptr("sto1125"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res2627/providers/Microsoft.Storage/storageAccounts/sto1125"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:28:53.4540398Z"); return t }()),
						Encryption: &armstorage.Encryption{
							KeySource: to.Ptr(armstorage.KeySourceMicrosoftStorage),
							Services: &armstorage.EncryptionServices{
								Blob: &armstorage.EncryptionService{
									Enabled:         to.Ptr(true),
									KeyType:         to.Ptr(armstorage.KeyTypeAccount),
									LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
								},
								File: &armstorage.EncryptionService{
									Enabled:         to.Ptr(true),
									KeyType:         to.Ptr(armstorage.KeyTypeAccount),
									LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
								},
							},
						},
						IsHnsEnabled: to.Ptr(true),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob: to.Ptr("https://sto1125.blob.core.windows.net/"),
							Dfs:  to.Ptr("https://sto1125.dfs.core.windows.net/"),
							File: to.Ptr("https://sto1125.file.core.windows.net/"),
							InternetEndpoints: &armstorage.AccountInternetEndpoints{
								Blob: to.Ptr("https://sto1125-internetrouting.blob.core.windows.net/"),
								Dfs:  to.Ptr("https://sto1125-internetrouting.dfs.core.windows.net/"),
								File: to.Ptr("https://sto1125-internetrouting.file.core.windows.net/"),
								Web:  to.Ptr("https://sto1125-internetrouting.web.core.windows.net/"),
							},
							MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
								Blob:  to.Ptr("https://sto1125-microsoftrouting.blob.core.windows.net/"),
								Dfs:   to.Ptr("https://sto1125-microsoftrouting.dfs.core.windows.net/"),
								File:  to.Ptr("https://sto1125-microsoftrouting.file.core.windows.net/"),
								Queue: to.Ptr("https://sto1125-microsoftrouting.queue.core.windows.net/"),
								Table: to.Ptr("https://sto1125-microsoftrouting.table.core.windows.net/"),
								Web:   to.Ptr("https://sto1125-microsoftrouting.web.core.windows.net/"),
							},
							Queue: to.Ptr("https://sto1125.queue.core.windows.net/"),
							Table: to.Ptr("https://sto1125.table.core.windows.net/"),
							Web:   to.Ptr("https://sto1125.web.core.windows.net/"),
						},
						PrimaryLocation:   to.Ptr("eastus"),
						ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
						RoutingPreference: &armstorage.RoutingPreference{
							PublishInternetEndpoints:  to.Ptr(true),
							PublishMicrosoftEndpoints: to.Ptr(true),
							RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
						},
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("sto3699"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/testcmk3/providers/Microsoft.Storage/storageAccounts/sto3699"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Identity: &armstorage.Identity{
						Type:        to.Ptr(armstorage.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("356d057d-cba5-44dd-8a30-b2e547bc416b"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T10:06:30.6093014Z"); return t }()),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob:  to.Ptr("https://sto3699.blob.core.windows.net/"),
							File:  to.Ptr("https://sto3699.file.core.windows.net/"),
							Queue: to.Ptr("https://sto3699.queue.core.windows.net/"),
							Table: to.Ptr("https://sto3699.table.core.windows.net/"),
						},
						PrimaryLocation:        to.Ptr("eastus"),
						ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("sto8596"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9407/providers/Microsoft.Storage/storageAccounts/sto8596"),
					Location: to.Ptr("eastus2(stage)"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Identity: &armstorage.Identity{
						Type:        to.Ptr(armstorage.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("911871cc-ffd1-4fc4-ac11-7a316433ea66"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T02:42:41.7633306Z"); return t }()),
						Encryption: &armstorage.Encryption{
							KeySource: to.Ptr(armstorage.KeySourceMicrosoftKeyvault),
							KeyVaultProperties: &armstorage.KeyVaultProperties{
								CurrentVersionedKeyIdentifier: to.Ptr("https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad"),
								KeyName:                       to.Ptr("wrappingKey"),
								KeyVaultURI:                   to.Ptr("https://myvault8569.vault.azure.net"),
								KeyVersion:                    to.Ptr(""),
								LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
							},
							Services: &armstorage.EncryptionServices{
								Blob: &armstorage.EncryptionService{
									Enabled:         to.Ptr(true),
									KeyType:         to.Ptr(armstorage.KeyTypeAccount),
									LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
								},
								File: &armstorage.EncryptionService{
									Enabled:         to.Ptr(true),
									KeyType:         to.Ptr(armstorage.KeyTypeAccount),
									LastEnabledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-11T20:49:31.7036140Z"); return t }()),
								},
							},
						},
						GeoReplicationStats: &armstorage.GeoReplicationStats{
							CanFailover:  to.Ptr(true),
							LastSyncTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-30T00:25:34Z"); return t }()),
							Status:       to.Ptr(armstorage.GeoReplicationStatusLive),
						},
						IsHnsEnabled: to.Ptr(true),
						NetworkRuleSet: &armstorage.NetworkRuleSet{
							Bypass:        to.Ptr(armstorage.BypassAzureServices),
							DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
							IPRules:       []*armstorage.IPRule{},
							ResourceAccessRules: []*armstorage.ResourceAccessRule{
								{
									ResourceID: to.Ptr("/subscriptions/a7e99807-abbf-4642-bdec-2c809a96a8bc/resourceGroups/res9407/providers/Microsoft.Synapse/workspaces/testworkspace"),
									TenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
								}},
							VirtualNetworkRules: []*armstorage.VirtualNetworkRule{},
						},
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob: to.Ptr("https://sto8596.blob.core.windows.net/"),
							Dfs:  to.Ptr("https://sto8596.dfs.core.windows.net/"),
							File: to.Ptr("https://sto8596.file.core.windows.net/"),
							InternetEndpoints: &armstorage.AccountInternetEndpoints{
								Blob: to.Ptr("https://sto8596-internetrouting.blob.core.windows.net/"),
								Dfs:  to.Ptr("https://sto8596-internetrouting.dfs.core.windows.net/"),
								File: to.Ptr("https://sto8596-internetrouting.file.core.windows.net/"),
								Web:  to.Ptr("https://sto8596-internetrouting.web.core.windows.net/"),
							},
							MicrosoftEndpoints: &armstorage.AccountMicrosoftEndpoints{
								Blob:  to.Ptr("https://sto8596-microsoftrouting.blob.core.windows.net/"),
								Dfs:   to.Ptr("https://sto8596-microsoftrouting.dfs.core.windows.net/"),
								File:  to.Ptr("https://sto8596-microsoftrouting.file.core.windows.net/"),
								Queue: to.Ptr("https://sto8596-microsoftrouting.queue.core.windows.net/"),
								Table: to.Ptr("https://sto8596-microsoftrouting.table.core.windows.net/"),
								Web:   to.Ptr("https://sto8596-microsoftrouting.web.core.windows.net/"),
							},
							Queue: to.Ptr("https://sto8596.queue.core.windows.net/"),
							Table: to.Ptr("https://sto8596.table.core.windows.net/"),
							Web:   to.Ptr("https://sto8596.web.core.windows.net/"),
						},
						PrimaryLocation:   to.Ptr("eastus2(stage)"),
						ProvisioningState: to.Ptr(armstorage.ProvisioningStateSucceeded),
						RoutingPreference: &armstorage.RoutingPreference{
							PublishInternetEndpoints:  to.Ptr(true),
							PublishMicrosoftEndpoints: to.Ptr(true),
							RoutingChoice:             to.Ptr(armstorage.RoutingChoiceMicrosoftRouting),
						},
						SecondaryLocation:      to.Ptr("northcentralus(stage)"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("sto6637"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/testcmk3/providers/Microsoft.Storage/storageAccounts/sto6637"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Identity: &armstorage.Identity{
						Type:        to.Ptr(armstorage.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("911871cc-ffd1-4fc4-ac11-7a316433ea66"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T10:09:39.5625175Z"); return t }()),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob:  to.Ptr("https://sto6637.blob.core.windows.net/"),
							File:  to.Ptr("https://sto6637.file.core.windows.net/"),
							Queue: to.Ptr("https://sto6637.queue.core.windows.net/"),
							Table: to.Ptr("https://sto6637.table.core.windows.net/"),
						},
						PrimaryLocation:        to.Ptr("eastus"),
						ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("sto834"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res8186/providers/Microsoft.Storage/storageAccounts/sto834"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:28:20.8686541Z"); return t }()),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob:  to.Ptr("https://sto834.blob.core.windows.net/"),
							File:  to.Ptr("https://sto834.file.core.windows.net/"),
							Queue: to.Ptr("https://sto834.queue.core.windows.net/"),
							Table: to.Ptr("https://sto834.table.core.windows.net/"),
						},
						PrimaryLocation:        to.Ptr("eastus"),
						ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("sto9174"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/testcmk3/providers/Microsoft.Storage/storageAccounts/sto9174"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Identity: &armstorage.Identity{
						Type:        to.Ptr(armstorage.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("933e3ddf-1802-4a51-9469-18a33b576f88"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T09:46:19.6556989Z"); return t }()),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob:  to.Ptr("https://sto9174.blob.core.windows.net/"),
							File:  to.Ptr("https://sto9174.file.core.windows.net/"),
							Queue: to.Ptr("https://sto9174.queue.core.windows.net/"),
							Table: to.Ptr("https://sto9174.table.core.windows.net/"),
						},
						PrimaryLocation:        to.Ptr("eastus"),
						ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("res6117",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.AccountListResult{
			Value: []*armstorage.Account{
				{
					Name:     to.Ptr("sto4036"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6117/providers/Microsoft.Storage/storageAccounts/sto4036"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:24:47.818801Z"); return t }()),
						IsHnsEnabled: to.Ptr(true),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob:  to.Ptr("https://sto4036.blob.core.windows.net/"),
							Dfs:   to.Ptr("https://sto4036.dfs.core.windows.net/"),
							File:  to.Ptr("https://sto4036.file.core.windows.net/"),
							Queue: to.Ptr("https://sto4036.queue.core.windows.net/"),
							Table: to.Ptr("https://sto4036.table.core.windows.net/"),
							Web:   to.Ptr("https://sto4036.web.core.windows.net/"),
						},
						PrimaryLocation:        to.Ptr("eastus"),
						ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("sto4452"),
					Type:     to.Ptr("Microsoft.Storage/storageAccounts"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6117/providers/Microsoft.Storage/storageAccounts/sto4452"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Kind: to.Ptr(armstorage.KindStorage),
					Properties: &armstorage.AccountProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T13:24:15.7068366Z"); return t }()),
						PrimaryEndpoints: &armstorage.Endpoints{
							Blob:  to.Ptr("https://sto4452.blob.core.windows.net/"),
							File:  to.Ptr("https://sto4452.file.core.windows.net/"),
							Queue: to.Ptr("https://sto4452.queue.core.windows.net/"),
							Table: to.Ptr("https://sto4452.table.core.windows.net/"),
						},
						PrimaryLocation:        to.Ptr("eastus"),
						ProvisioningState:      to.Ptr(armstorage.ProvisioningStateSucceeded),
						SecondaryLocation:      to.Ptr("centraluseuap"),
						StatusOfPrimary:        to.Ptr(armstorage.AccountStatusAvailable),
						StatusOfSecondary:      to.Ptr(armstorage.AccountStatusAvailable),
						EnableHTTPSTrafficOnly: to.Ptr(false),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_ListKeys(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.ListKeys(ctx,
		"res418",
		"sto2220",
		&armstorage.AccountsClientListKeysOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.AccountListKeysResult{
			Keys: []*armstorage.AccountKey{
				{
					KeyName:     to.Ptr("key1"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				},
				{
					KeyName:     to.Ptr("key2"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountListKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountListKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_RegenerateKey(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRegenerateKerbKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountRegenerateKerbKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"res4167",
		"sto3539",
		armstorage.AccountRegenerateKeyParameters{
			KeyName: to.Ptr("kerb1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRegenerateKerbKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.AccountListKeysResult{
			Keys: []*armstorage.AccountKey{
				{
					KeyName:     to.Ptr("key1"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				},
				{
					KeyName:     to.Ptr("key2"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				},
				{
					KeyName:     to.Ptr("kerb1"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountListKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountListKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRegenerateKerbKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountRegenerateKey"},
	})
	client = armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err = client.RegenerateKey(ctx,
		"res4167",
		"sto3539",
		armstorage.AccountRegenerateKeyParameters{
			KeyName: to.Ptr("key2"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.AccountListKeysResult{
			Keys: []*armstorage.AccountKey{
				{
					KeyName:     to.Ptr("key1"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				},
				{
					KeyName:     to.Ptr("key2"),
					Permissions: to.Ptr(armstorage.KeyPermissionFull),
					Value:       to.Ptr("<value>"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountListKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountListKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_ListAccountSAS(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListAccountSAS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListAccountSAS"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.ListAccountSAS(ctx,
		"res7985",
		"sto8588",
		armstorage.AccountSasParameters{
			KeyToSign:              to.Ptr("key1"),
			SharedAccessExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T11:42:03.1567373Z"); return t }()),
			Permissions:            to.Ptr(armstorage.PermissionsR),
			Protocols:              to.Ptr(armstorage.HTTPProtocolHTTPSHTTP),
			ResourceTypes:          to.Ptr(armstorage.SignedResourceTypesS),
			Services:               to.Ptr(armstorage.ServicesB),
			SharedAccessStartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T10:42:03.1567373Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListAccountSAS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ListAccountSasResponse{
			AccountSasToken: to.Ptr("sv=2015-04-05&ss=b&srt=s&sp=r&st=2017-05-24T10%3A42%3A03Z&se=2017-05-24T11%3A42%3A03Z&spr=https,http&sig=Z0I%2BEpM%2BPPlTC8ApfUf%2BcffO2aahMgZim3U0iArqsS0%3D"),
		}
		if !reflect.DeepEqual(exampleRes, res.ListAccountSasResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListAccountSasResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListAccountSAS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_ListServiceSAS(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListServiceSAS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListServiceSAS"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	res, err := client.ListServiceSAS(ctx,
		"res7439",
		"sto1299",
		armstorage.ServiceSasParameters{
			CanonicalizedResource:  to.Ptr("/blob/sto1299/music"),
			SharedAccessExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T11:32:48.8457197Z"); return t }()),
			Permissions:            to.Ptr(armstorage.PermissionsL),
			Resource:               to.Ptr(armstorage.SignedResourceC),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListServiceSAS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ListServiceSasResponse{
			ServiceSasToken: to.Ptr("sv=2015-04-05&sr=c&se=2017-05-24T11%3A32%3A48Z&sp=l&sig=PoF8yBUGixsjzwroLmw7vG3VbGz4KB2woZC2D4C2oio%3D"),
		}
		if !reflect.DeepEqual(exampleRes, res.ListServiceSasResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListServiceSasResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListServiceSAS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Failover(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountFailover"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"res4228",
		"sto2434",
		&armstorage.AccountsClientBeginFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountFailover.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountFailover.json: %v", err)
	}
}

func TestStorageAccounts_HierarchicalNamespaceMigration(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountHierarchicalNamespaceMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountHierarchicalNamespaceMigration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginHierarchicalNamespaceMigration(ctx,
		"res4228",
		"sto2434",
		"HnsOnValidationRequest",
		&armstorage.AccountsClientBeginHierarchicalNamespaceMigrationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountHierarchicalNamespaceMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountHierarchicalNamespaceMigration.json: %v", err)
	}
}

func TestStorageAccounts_AbortHierarchicalNamespaceMigration(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountAbortHierarchicalNamespaceMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountAbortHierarchicalNamespaceMigration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginAbortHierarchicalNamespaceMigration(ctx,
		"res4228",
		"sto2434",
		&armstorage.AccountsClientBeginAbortHierarchicalNamespaceMigrationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountAbortHierarchicalNamespaceMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountAbortHierarchicalNamespaceMigration.json: %v", err)
	}
}

func TestStorageAccounts_RestoreBlobRanges(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobRangesRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlobRangesRestore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRestoreBlobRanges(ctx,
		"res9101",
		"sto4445",
		armstorage.BlobRestoreParameters{
			BlobRanges: []*armstorage.BlobRestoreRange{
				{
					EndRange:   to.Ptr("container/blobpath2"),
					StartRange: to.Ptr("container/blobpath1"),
				},
				{
					EndRange:   to.Ptr(""),
					StartRange: to.Ptr("container2/blobpath3"),
				}},
			TimeToRestore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-20T15:30:00.0000000Z"); return t }()),
		},
		&armstorage.AccountsClientBeginRestoreBlobRangesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobRangesRestore.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobRangesRestore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobRestoreStatus{
			Parameters: &armstorage.BlobRestoreParameters{
				BlobRanges: []*armstorage.BlobRestoreRange{
					{
						EndRange:   to.Ptr("container/blobpath2"),
						StartRange: to.Ptr("container/blobpath1"),
					},
					{
						EndRange:   to.Ptr(""),
						StartRange: to.Ptr("container2/blobpath3"),
					}},
				TimeToRestore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-20T15:30:00.0000000Z"); return t }()),
			},
			RestoreID: to.Ptr("{restore_id}"),
			Status:    to.Ptr(armstorage.BlobRestoreProgressStatusComplete),
		}
		if !reflect.DeepEqual(exampleRes, res.BlobRestoreStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobRestoreStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobRangesRestore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_RevokeUserDelegationKeys(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRevokeUserDelegationKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountRevokeUserDelegationKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewAccountsClient("{subscription-id}", cred, &options)
	_, err := client.RevokeUserDelegationKeys(ctx,
		"res4167",
		"sto3539",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountRevokeUserDelegationKeys.json: %v", err)
	}
}

func TestDeletedAccounts_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletedAccountList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewDeletedAccountsClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.DeletedAccountListResult{
			Value: []*armstorage.DeletedAccount{
				{
					Name: to.Ptr("sto1125"),
					Type: to.Ptr("Microsoft.Storage/deletedAccounts"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Storage/locations/eastus/deletedAccounts/sto1125"),
					Properties: &armstorage.DeletedAccountProperties{
						CreationTime:             to.Ptr("2020-08-17T03:35:37.4588848Z"),
						DeletionTime:             to.Ptr("2020-08-17T04:41:37.3442475Z"),
						Location:                 to.Ptr("eastus"),
						RestoreReference:         to.Ptr("sto1125|2020-08-17T03:35:37.4588848Z"),
						StorageAccountResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/sto/providers/Microsoft.Storage/storageAccounts/sto1125"),
					},
				},
				{
					Name: to.Ptr("sto1126"),
					Type: to.Ptr("Microsoft.Storage/deletedAccounts"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Storage/locations/eastus/deletedAccounts/sto1126"),
					Properties: &armstorage.DeletedAccountProperties{
						CreationTime:             to.Ptr("2020-08-19T15:10:21.5902165Z"),
						DeletionTime:             to.Ptr("2020-08-20T06:11:55.1957302Z"),
						Location:                 to.Ptr("eastus"),
						RestoreReference:         to.Ptr("sto1126|2020-08-17T03:35:37.4588848Z"),
						StorageAccountResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/sto/providers/Microsoft.Storage/storageAccounts/sto1126"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedAccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedAccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedAccounts_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletedAccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewDeletedAccountsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"sto1125",
		"eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.DeletedAccount{
			Name: to.Ptr("sto1125"),
			Type: to.Ptr("Microsoft.Storage/deletedAccounts"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Storage/locations/eastus/deletedAccounts/sto1125"),
			Properties: &armstorage.DeletedAccountProperties{
				CreationTime:             to.Ptr("2020-08-17T03:35:37.4588848Z"),
				DeletionTime:             to.Ptr("2020-08-17T04:41:37.3442475Z"),
				Location:                 to.Ptr("eastus"),
				RestoreReference:         to.Ptr("sto1125|2020-08-17T03:35:37.4588848Z"),
				StorageAccountResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/sto/providers/Microsoft.Storage/storageAccounts/sto1125"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_ListByLocation(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListLocationUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewUsagesClient("{subscription-id}", cred, &options)
	pager := client.ListByLocation("eastus2(stage)",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListLocationUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.UsageListResult{
			Value: []*armstorage.Usage{
				{
					Name: &armstorage.UsageName{
						LocalizedValue: to.Ptr("Storage Accounts"),
						Value:          to.Ptr("StorageAccounts"),
					},
					CurrentValue: to.Ptr[int32](55),
					Limit:        to.Ptr[int32](250),
					Unit:         to.Ptr(armstorage.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListLocationUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementPolicies_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetManagementPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetManagementPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewManagementPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		armstorage.ManagementPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetManagementPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ManagementPolicy{
			Name: to.Ptr("DefaultManagementPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/managementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/managementPolicies/default"),
			Properties: &armstorage.ManagementPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-08T03:01:55.7168089Z"); return t }()),
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetManagementPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountSetManagementPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewManagementPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		armstorage.ManagementPolicyNameDefault,
		armstorage.ManagementPolicy{
			Properties: &armstorage.ManagementPolicyProperties{
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest1"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer1")},
								},
							},
							Enabled: to.Ptr(true),
						},
						{
							Name: to.Ptr("olcmtest2"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobIndexMatch: []*armstorage.TagFilter{
										{
											Name:  to.Ptr("tag1"),
											Op:    to.Ptr("=="),
											Value: to.Ptr("val1"),
										},
										{
											Name:  to.Ptr("tag2"),
											Op:    to.Ptr("=="),
											Value: to.Ptr("val2"),
										}},
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer2")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ManagementPolicy{
			Name: to.Ptr("DefaultManagementPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/managementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/managementPolicies/default"),
			Properties: &armstorage.ManagementPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-08T02:53:39.0932539Z"); return t }()),
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest1"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer1")},
								},
							},
							Enabled: to.Ptr(true),
						},
						{
							Name: to.Ptr("olcmtest2"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobIndexMatch: []*armstorage.TagFilter{
										{
											Name:  to.Ptr("tag1"),
											Op:    to.Ptr("=="),
											Value: to.Ptr("val1"),
										},
										{
											Name:  to.Ptr("tag2"),
											Op:    to.Ptr("=="),
											Value: to.Ptr("val2"),
										}},
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer2")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicyForBlockAndAppendBlobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountSetManagementPolicyForBlockAndAppendBlobs"},
	})
	client = armstorage.NewManagementPoliciesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		armstorage.ManagementPolicyNameDefault,
		armstorage.ManagementPolicy{
			Properties: &armstorage.ManagementPolicyProperties{
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest1"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
									},
									Version: &armstorage.ManagementPolicyVersion{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob"),
										to.Ptr("appendBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer1")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicyForBlockAndAppendBlobs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ManagementPolicy{
			Name: to.Ptr("DefaultManagementPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/managementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/managementPolicies/default"),
			Properties: &armstorage.ManagementPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-08T02:53:39.0932539Z"); return t }()),
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest1"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
									},
									Version: &armstorage.ManagementPolicyVersion{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob"),
										to.Ptr("appendBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer1")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicyForBlockAndAppendBlobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicyWithSnapshotAndVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountSetManagementPolicyWithSnapshotAndVersion"},
	})
	client = armstorage.NewManagementPoliciesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		armstorage.ManagementPolicyNameDefault,
		armstorage.ManagementPolicy{
			Properties: &armstorage.ManagementPolicyProperties{
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest1"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
									Version: &armstorage.ManagementPolicyVersion{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer1")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicyWithSnapshotAndVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ManagementPolicy{
			Name: to.Ptr("DefaultManagementPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/managementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/managementPolicies/default"),
			Properties: &armstorage.ManagementPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-08T02:53:39.0932539Z"); return t }()),
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest1"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterModificationGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
									Version: &armstorage.ManagementPolicyVersion{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](1000),
										},
										TierToArchive: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer1")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicyWithSnapshotAndVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicy_LastAccessTimeBasedBlobActions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountSetManagementPolicy_LastAccessTimeBasedBlobActions"},
	})
	client = armstorage.NewManagementPoliciesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		armstorage.ManagementPolicyNameDefault,
		armstorage.ManagementPolicy{
			Properties: &armstorage.ManagementPolicyProperties{
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterLastAccessTimeGreaterThan: to.Ptr[float32](1000),
										},
										EnableAutoTierToHotFromCool: to.Ptr(true),
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterLastAccessTimeGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterLastAccessTimeGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicy_LastAccessTimeBasedBlobActions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ManagementPolicy{
			Name: to.Ptr("DefaultManagementPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/managementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/managementPolicies/default"),
			Properties: &armstorage.ManagementPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-08T02:53:39.0932539Z"); return t }()),
				Policy: &armstorage.ManagementPolicySchema{
					Rules: []*armstorage.ManagementPolicyRule{
						{
							Name: to.Ptr("olcmtest"),
							Type: to.Ptr(armstorage.RuleTypeLifecycle),
							Definition: &armstorage.ManagementPolicyDefinition{
								Actions: &armstorage.ManagementPolicyAction{
									BaseBlob: &armstorage.ManagementPolicyBaseBlob{
										Delete: &armstorage.DateAfterModification{
											DaysAfterLastAccessTimeGreaterThan: to.Ptr[float32](1000),
										},
										EnableAutoTierToHotFromCool: to.Ptr(true),
										TierToArchive: &armstorage.DateAfterModification{
											DaysAfterLastAccessTimeGreaterThan: to.Ptr[float32](90),
										},
										TierToCool: &armstorage.DateAfterModification{
											DaysAfterLastAccessTimeGreaterThan: to.Ptr[float32](30),
										},
									},
									Snapshot: &armstorage.ManagementPolicySnapShot{
										Delete: &armstorage.DateAfterCreation{
											DaysAfterCreationGreaterThan: to.Ptr[float32](30),
										},
									},
								},
								Filters: &armstorage.ManagementPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob")},
									PrefixMatch: []*string{
										to.Ptr("olcmtestcontainer")},
								},
							},
							Enabled: to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetManagementPolicy_LastAccessTimeBasedBlobActions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementPolicies_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeleteManagementPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountDeleteManagementPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewManagementPoliciesClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		armstorage.ManagementPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeleteManagementPolicy.json: %v", err)
	}
}

func TestBlobInventoryPolicies_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetBlobInventoryPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetBlobInventoryPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobInventoryPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res7687",
		"sto9699",
		armstorage.BlobInventoryPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetBlobInventoryPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobInventoryPolicy{
			Name: to.Ptr("DefaultInventoryPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/inventoryPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/sto9699/inventoryPolicies/default"),
			Properties: &armstorage.BlobInventoryPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T02:53:39.0932539Z"); return t }()),
				Policy: &armstorage.BlobInventoryPolicySchema{
					Type:    to.Ptr(armstorage.InventoryRuleTypeInventory),
					Enabled: to.Ptr(true),
					Rules: []*armstorage.BlobInventoryPolicyRule{
						{
							Name: to.Ptr("inventoryPolicyRule1"),
							Definition: &armstorage.BlobInventoryPolicyDefinition{
								Format: to.Ptr(armstorage.FormatCSV),
								Filters: &armstorage.BlobInventoryPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob"),
										to.Ptr("appendBlob"),
										to.Ptr("pageBlob")},
									IncludeBlobVersions: to.Ptr(true),
									IncludeSnapshots:    to.Ptr(true),
									PrefixMatch: []*string{
										to.Ptr("inventoryprefix1"),
										to.Ptr("inventoryprefix2")},
								},
								ObjectType: to.Ptr(armstorage.ObjectTypeBlob),
								Schedule:   to.Ptr(armstorage.ScheduleDaily),
								SchemaFields: []*string{
									to.Ptr("Name"),
									to.Ptr("Creation-Time"),
									to.Ptr("Last-Modified"),
									to.Ptr("Content-Length"),
									to.Ptr("Content-MD5"),
									to.Ptr("BlobType"),
									to.Ptr("AccessTier"),
									to.Ptr("AccessTierChangeTime"),
									to.Ptr("Snapshot"),
									to.Ptr("VersionId"),
									to.Ptr("IsCurrentVersion"),
									to.Ptr("Metadata")},
							},
							Destination: to.Ptr("container1"),
							Enabled:     to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobInventoryPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobInventoryPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetBlobInventoryPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobInventoryPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetBlobInventoryPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountSetBlobInventoryPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobInventoryPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		armstorage.BlobInventoryPolicyNameDefault,
		armstorage.BlobInventoryPolicy{
			Properties: &armstorage.BlobInventoryPolicyProperties{
				Policy: &armstorage.BlobInventoryPolicySchema{
					Type:    to.Ptr(armstorage.InventoryRuleTypeInventory),
					Enabled: to.Ptr(true),
					Rules: []*armstorage.BlobInventoryPolicyRule{
						{
							Name: to.Ptr("inventoryPolicyRule1"),
							Definition: &armstorage.BlobInventoryPolicyDefinition{
								Format: to.Ptr(armstorage.FormatCSV),
								Filters: &armstorage.BlobInventoryPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob"),
										to.Ptr("appendBlob"),
										to.Ptr("pageBlob")},
									IncludeBlobVersions: to.Ptr(true),
									IncludeSnapshots:    to.Ptr(true),
									PrefixMatch: []*string{
										to.Ptr("inventoryprefix1"),
										to.Ptr("inventoryprefix2")},
								},
								ObjectType: to.Ptr(armstorage.ObjectTypeBlob),
								Schedule:   to.Ptr(armstorage.ScheduleDaily),
								SchemaFields: []*string{
									to.Ptr("Name"),
									to.Ptr("Creation-Time"),
									to.Ptr("Last-Modified"),
									to.Ptr("Content-Length"),
									to.Ptr("Content-MD5"),
									to.Ptr("BlobType"),
									to.Ptr("AccessTier"),
									to.Ptr("AccessTierChangeTime"),
									to.Ptr("Snapshot"),
									to.Ptr("VersionId"),
									to.Ptr("IsCurrentVersion"),
									to.Ptr("Metadata")},
							},
							Destination: to.Ptr("container1"),
							Enabled:     to.Ptr(true),
						},
						{
							Name: to.Ptr("inventoryPolicyRule2"),
							Definition: &armstorage.BlobInventoryPolicyDefinition{
								Format:     to.Ptr(armstorage.FormatParquet),
								ObjectType: to.Ptr(armstorage.ObjectTypeContainer),
								Schedule:   to.Ptr(armstorage.ScheduleWeekly),
								SchemaFields: []*string{
									to.Ptr("Name"),
									to.Ptr("Last-Modified"),
									to.Ptr("Metadata"),
									to.Ptr("LeaseStatus"),
									to.Ptr("LeaseState"),
									to.Ptr("LeaseDuration"),
									to.Ptr("PublicAccess"),
									to.Ptr("HasImmutabilityPolicy"),
									to.Ptr("HasLegalHold")},
							},
							Destination: to.Ptr("container2"),
							Enabled:     to.Ptr(true),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetBlobInventoryPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobInventoryPolicy{
			Name: to.Ptr("DefaultInventoryPolicy"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/inventoryPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/sto9699/inventoryPolicies/default"),
			Properties: &armstorage.BlobInventoryPolicyProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T02:53:39.0932539Z"); return t }()),
				Policy: &armstorage.BlobInventoryPolicySchema{
					Type:    to.Ptr(armstorage.InventoryRuleTypeInventory),
					Enabled: to.Ptr(true),
					Rules: []*armstorage.BlobInventoryPolicyRule{
						{
							Name: to.Ptr("inventoryPolicyRule1"),
							Definition: &armstorage.BlobInventoryPolicyDefinition{
								Format: to.Ptr(armstorage.FormatCSV),
								Filters: &armstorage.BlobInventoryPolicyFilter{
									BlobTypes: []*string{
										to.Ptr("blockBlob"),
										to.Ptr("appendBlob"),
										to.Ptr("pageBlob")},
									IncludeBlobVersions: to.Ptr(true),
									IncludeSnapshots:    to.Ptr(true),
									PrefixMatch: []*string{
										to.Ptr("inventoryprefix1"),
										to.Ptr("inventoryprefix2")},
								},
								ObjectType: to.Ptr(armstorage.ObjectTypeBlob),
								Schedule:   to.Ptr(armstorage.ScheduleDaily),
								SchemaFields: []*string{
									to.Ptr("Name"),
									to.Ptr("Creation-Time"),
									to.Ptr("Last-Modified"),
									to.Ptr("Content-Length"),
									to.Ptr("Content-MD5"),
									to.Ptr("BlobType"),
									to.Ptr("AccessTier"),
									to.Ptr("AccessTierChangeTime"),
									to.Ptr("Snapshot"),
									to.Ptr("VersionId"),
									to.Ptr("IsCurrentVersion"),
									to.Ptr("Metadata")},
							},
							Destination: to.Ptr("container1"),
							Enabled:     to.Ptr(true),
						},
						{
							Name: to.Ptr("inventoryPolicyRule2"),
							Definition: &armstorage.BlobInventoryPolicyDefinition{
								Format:     to.Ptr(armstorage.FormatParquet),
								ObjectType: to.Ptr(armstorage.ObjectTypeContainer),
								Schedule:   to.Ptr(armstorage.ScheduleWeekly),
								SchemaFields: []*string{
									to.Ptr("Name"),
									to.Ptr("Last-Modified"),
									to.Ptr("Metadata"),
									to.Ptr("LeaseStatus"),
									to.Ptr("LeaseState"),
									to.Ptr("LeaseDuration"),
									to.Ptr("PublicAccess"),
									to.Ptr("HasImmutabilityPolicy"),
									to.Ptr("HasLegalHold")},
							},
							Destination: to.Ptr("container2"),
							Enabled:     to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobInventoryPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobInventoryPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountSetBlobInventoryPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobInventoryPolicies_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeleteBlobInventoryPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountDeleteBlobInventoryPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobInventoryPoliciesClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		armstorage.BlobInventoryPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeleteBlobInventoryPolicy.json: %v", err)
	}
}

func TestBlobInventoryPolicies_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListBlobInventoryPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetBlobInventoryPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobInventoryPoliciesClient("{subscription-id}", cred, &options)
	pager := client.List("res7687",
		"sto9699",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListBlobInventoryPolicy.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.ListBlobInventoryPolicy{
			Value: []*armstorage.BlobInventoryPolicy{
				{
					Name: to.Ptr("DefaultInventoryPolicy"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/inventoryPolicies"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/sto9699/inventoryPolicies/default"),
					Properties: &armstorage.BlobInventoryPolicyProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T02:53:39.0932539Z"); return t }()),
						Policy: &armstorage.BlobInventoryPolicySchema{
							Type:    to.Ptr(armstorage.InventoryRuleTypeInventory),
							Enabled: to.Ptr(true),
							Rules: []*armstorage.BlobInventoryPolicyRule{
								{
									Name: to.Ptr("inventoryPolicyRule1"),
									Definition: &armstorage.BlobInventoryPolicyDefinition{
										Format: to.Ptr(armstorage.FormatCSV),
										Filters: &armstorage.BlobInventoryPolicyFilter{
											BlobTypes: []*string{
												to.Ptr("blockBlob"),
												to.Ptr("appendBlob"),
												to.Ptr("pageBlob")},
											IncludeBlobVersions: to.Ptr(true),
											IncludeSnapshots:    to.Ptr(true),
											PrefixMatch: []*string{
												to.Ptr("inventoryprefix1"),
												to.Ptr("inventoryprefix2")},
										},
										ObjectType: to.Ptr(armstorage.ObjectTypeBlob),
										Schedule:   to.Ptr(armstorage.ScheduleDaily),
										SchemaFields: []*string{
											to.Ptr("Name"),
											to.Ptr("Creation-Time"),
											to.Ptr("Last-Modified"),
											to.Ptr("Content-Length"),
											to.Ptr("Content-MD5"),
											to.Ptr("BlobType"),
											to.Ptr("AccessTier"),
											to.Ptr("AccessTierChangeTime"),
											to.Ptr("Snapshot"),
											to.Ptr("VersionId"),
											to.Ptr("IsCurrentVersion"),
											to.Ptr("Metadata")},
									},
									Destination: to.Ptr("container1"),
									Enabled:     to.Ptr(true),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListBlobInventoryPolicy) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListBlobInventoryPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListBlobInventoryPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListPrivateEndpointConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	pager := client.List("res6977",
		"sto2527",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.PrivateEndpointConnectionListResult{
			Value: []*armstorage.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armstorage.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armstorage.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armstorage.PrivateLinkServiceConnectionState{
							Description:    to.Ptr("Auto-Approved"),
							ActionRequired: to.Ptr("None"),
							Status:         to.Ptr(armstorage.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armstorage.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armstorage.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armstorage.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest02"),
						},
						PrivateLinkServiceConnectionState: &armstorage.PrivateLinkServiceConnectionState{
							Description:    to.Ptr("Auto-Approved"),
							ActionRequired: to.Ptr("None"),
							Status:         to.Ptr(armstorage.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armstorage.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armstorage.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armstorage.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armstorage.PrivateLinkServiceConnectionState{
					Description:    to.Ptr("Auto-Approved"),
					ActionRequired: to.Ptr("None"),
					Status:         to.Ptr(armstorage.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armstorage.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Put(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountPutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Put(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		armstorage.PrivateEndpointConnection{
			Properties: &armstorage.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armstorage.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armstorage.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Storage/storageAccounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armstorage.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armstorage.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armstorage.PrivateLinkServiceConnectionState{
					Description:    to.Ptr("Auto-Approved"),
					ActionRequired: to.Ptr("None"),
					Status:         to.Ptr(armstorage.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armstorage.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByStorageAccount(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewPrivateLinkResourcesClient("{subscription-id}", cred, &options)
	res, err := client.ListByStorageAccount(ctx,
		"res6977",
		"sto2527",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.PrivateLinkResourceListResult{
			Value: []*armstorage.PrivateLinkResource{
				{
					Name: to.Ptr("blob"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/privateLinkResources/blob"),
					Properties: &armstorage.PrivateLinkResourceProperties{
						GroupID: to.Ptr("blob"),
						RequiredMembers: []*string{
							to.Ptr("blob")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.blob.core.windows.net")},
					},
				},
				{
					Name: to.Ptr("blob_secondary"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/privateLinkResources/blob_secondary"),
					Properties: &armstorage.PrivateLinkResourceProperties{
						GroupID: to.Ptr("blob_secondary"),
						RequiredMembers: []*string{
							to.Ptr("blob_secondary")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.blob.core.windows.net")},
					},
				},
				{
					Name: to.Ptr("table"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/privateLinkResources/table"),
					Properties: &armstorage.PrivateLinkResourceProperties{
						GroupID: to.Ptr("table"),
						RequiredMembers: []*string{
							to.Ptr("table")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.table.core.windows.net")},
					},
				},
				{
					Name: to.Ptr("table_secondary"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/privateLinkResources/table_secondary"),
					Properties: &armstorage.PrivateLinkResourceProperties{
						GroupID: to.Ptr("table_secondary"),
						RequiredMembers: []*string{
							to.Ptr("table_secondary")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.table.core.windows.net")},
					},
				},
				{
					Name: to.Ptr("dfs"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/privateLinkResources/dfs"),
					Properties: &armstorage.PrivateLinkResourceProperties{
						GroupID: to.Ptr("dfs"),
						RequiredMembers: []*string{
							to.Ptr("dfs")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.dfs.core.windows.net")},
					},
				},
				{
					Name: to.Ptr("dfs_secondary"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/privateLinkResources/dfs_secondary"),
					Properties: &armstorage.PrivateLinkResourceProperties{
						GroupID: to.Ptr("dfs_secondary"),
						RequiredMembers: []*string{
							to.Ptr("dfs_secondary")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.dfs.core.windows.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectReplicationPolicies_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListObjectReplicationPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListObjectReplicationPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	pager := client.List("res6977",
		"sto2527",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListObjectReplicationPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.ObjectReplicationPolicies{
			Value: []*armstorage.ObjectReplicationPolicy{
				{
					Name: to.Ptr("c6c23999-fd4e-433a-bcf9-1db69d27cd8a"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/objectReplicationPolicies/c6c23999-fd4e-433a-bcf9-1db69d27cd8a"),
					Properties: &armstorage.ObjectReplicationPolicyProperties{
						DestinationAccount: to.Ptr("destAccount1"),
						SourceAccount:      to.Ptr("sto2527"),
					},
				},
				{
					Name: to.Ptr("141d23dc-8958-4b48-b6e6-5a40bf1af116"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/objectReplicationPolicies/141d23dc-8958-4b48-b6e6-5a40bf1af116"),
					Properties: &armstorage.ObjectReplicationPolicyProperties{
						DestinationAccount: to.Ptr("destAccount2"),
						SourceAccount:      to.Ptr("sto2527"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ObjectReplicationPolicies) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ObjectReplicationPolicies)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountListObjectReplicationPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectReplicationPolicies_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetObjectReplicationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetObjectReplicationPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{objectReplicationPolicy-Id}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetObjectReplicationPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ObjectReplicationPolicy{
			Name: to.Ptr("{objectReplicationPolicy-Id}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/objectReplicationPolicies/{objectReplicationPolicy-Id}"),
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("destAccount1"),
				EnabledTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-08T03:01:55.7168089Z"); return t }()),
				PolicyID:           to.Ptr("{objectReplicationPolicy-Id}"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("destContainer1"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						SourceContainer: to.Ptr("sourceContainer1"),
					},
					{
						DestinationContainer: to.Ptr("destContainer1"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobC"),
								to.Ptr("blobD")},
						},
						SourceContainer: to.Ptr("sourceContainer1"),
					}},
				SourceAccount: to.Ptr("sto2527"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectReplicationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectReplicationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetObjectReplicationPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectReplicationPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateObjectReplicationPolicyOnDestination.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateObjectReplicationPolicyOnDestination"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"res7687",
		"dst112",
		"default",
		armstorage.ObjectReplicationPolicy{
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("dcont139"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						SourceContainer: to.Ptr("scont139"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateObjectReplicationPolicyOnDestination.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ObjectReplicationPolicy{
			Name: to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/dst112/objectReplicationPolicies/2a20bb73-5717-4635-985a-5d4cf777438f"),
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				PolicyID:           to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("destContainer1"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("sourceContainer1"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectReplicationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectReplicationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateObjectReplicationPolicyOnDestination.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateObjectReplicationPolicyOnSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountCreateObjectReplicationPolicyOnSource"},
	})
	client = armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res7687",
		"src1122",
		"2a20bb73-5717-4635-985a-5d4cf777438f",
		armstorage.ObjectReplicationPolicy{
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("dcont139"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							MinCreationTime: to.Ptr("2020-02-19T16:05:00Z"),
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("scont139"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateObjectReplicationPolicyOnSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ObjectReplicationPolicy{
			Name: to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/src1122/objectReplicationPolicies/2a20bb73-5717-4635-985a-5d4cf777438f"),
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				EnabledTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-08T03:01:55.7168089Z"); return t }()),
				PolicyID:           to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("destContainer1"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							MinCreationTime: to.Ptr("2020-02-19T16:05:00Z"),
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("sourceContainer1"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectReplicationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectReplicationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountCreateObjectReplicationPolicyOnSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateObjectReplicationPolicyOnDestination.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateObjectReplicationPolicyOnDestination"},
	})
	client = armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res7687",
		"dst112",
		"2a20bb73-5717-4635-985a-5d4cf777438f",
		armstorage.ObjectReplicationPolicy{
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("dcont139"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("scont139"),
					},
					{
						DestinationContainer: to.Ptr("dcont179"),
						SourceContainer:      to.Ptr("scont179"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateObjectReplicationPolicyOnDestination.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ObjectReplicationPolicy{
			Name: to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/dst112/objectReplicationPolicies/2a20bb73-5717-4635-985a-5d4cf777438f"),
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				PolicyID:           to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("destContainer1"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("sourceContainer1"),
					},
					{
						DestinationContainer: to.Ptr("dcont179"),
						RuleID:               to.Ptr("cfbb4bc2-8b60-429f-b05a-d1e0942b33b2"),
						SourceContainer:      to.Ptr("scont179"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectReplicationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectReplicationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateObjectReplicationPolicyOnDestination.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateObjectReplicationPolicyOnSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountUpdateObjectReplicationPolicyOnSource"},
	})
	client = armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res7687",
		"src1122",
		"2a20bb73-5717-4635-985a-5d4cf777438f",
		armstorage.ObjectReplicationPolicy{
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("dcont139"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("scont139"),
					},
					{
						DestinationContainer: to.Ptr("dcont179"),
						RuleID:               to.Ptr("cfbb4bc2-8b60-429f-b05a-d1e0942b33b2"),
						SourceContainer:      to.Ptr("scont179"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateObjectReplicationPolicyOnSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ObjectReplicationPolicy{
			Name: to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/objectReplicationPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/src1122/objectReplicationPolicies/2a20bb73-5717-4635-985a-5d4cf777438f"),
			Properties: &armstorage.ObjectReplicationPolicyProperties{
				DestinationAccount: to.Ptr("dst112"),
				EnabledTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-08T03:01:55.7168089Z"); return t }()),
				PolicyID:           to.Ptr("2a20bb73-5717-4635-985a-5d4cf777438f"),
				Rules: []*armstorage.ObjectReplicationPolicyRule{
					{
						DestinationContainer: to.Ptr("destContainer1"),
						Filters: &armstorage.ObjectReplicationPolicyFilter{
							PrefixMatch: []*string{
								to.Ptr("blobA"),
								to.Ptr("blobB")},
						},
						RuleID:          to.Ptr("d5d18a48-8801-4554-aeaa-74faf65f5ef9"),
						SourceContainer: to.Ptr("sourceContainer1"),
					},
					{
						DestinationContainer: to.Ptr("dcont179"),
						RuleID:               to.Ptr("cfbb4bc2-8b60-429f-b05a-d1e0942b33b2"),
						SourceContainer:      to.Ptr("scont179"),
					}},
				SourceAccount: to.Ptr("src1122"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectReplicationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectReplicationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountUpdateObjectReplicationPolicyOnSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectReplicationPolicies_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeleteObjectReplicationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountDeleteObjectReplicationPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewObjectReplicationPoliciesClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"{objectReplicationPolicy-Id}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountDeleteObjectReplicationPolicy.json: %v", err)
	}
}

func TestLocalUsers_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUsersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListLocalUsers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	pager := client.List("res6977",
		"sto2527",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUsersList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.LocalUsers{
			Value: []*armstorage.LocalUser{
				{
					Name: to.Ptr("user1"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/localUsers"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/loalUsers/user1"),
					Properties: &armstorage.LocalUserProperties{
						HasSharedKey:   to.Ptr(true),
						HasSSHKey:      to.Ptr(true),
						HasSSHPassword: to.Ptr(true),
						HomeDirectory:  to.Ptr("homedirectory"),
						PermissionScopes: []*armstorage.PermissionScope{
							{
								Permissions:  to.Ptr("rwd"),
								ResourceName: to.Ptr("share1"),
								Service:      to.Ptr("file"),
							},
							{
								Permissions:  to.Ptr("rw"),
								ResourceName: to.Ptr("share2"),
								Service:      to.Ptr("file"),
							}},
						Sid: to.Ptr("S-1-2-0-125132-153423-36235-1000"),
					},
				},
				{
					Name: to.Ptr("user2"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/localUsers"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/loalUsers/user2"),
					Properties: &armstorage.LocalUserProperties{
						HasSharedKey:   to.Ptr(true),
						HasSSHKey:      to.Ptr(false),
						HasSSHPassword: to.Ptr(true),
						PermissionScopes: []*armstorage.PermissionScope{
							{
								Permissions:  to.Ptr("rw"),
								ResourceName: to.Ptr("resourcename"),
								Service:      to.Ptr("blob"),
							}},
						Sid: to.Ptr("S-1-2-0-533672-235636-66334-1001"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocalUsers) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocalUsers)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUsersList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalUsers_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetLocalUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"user1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LocalUser{
			Name: to.Ptr("user1"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/localUsers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/loalUsers/user1"),
			Properties: &armstorage.LocalUserProperties{
				HasSharedKey:   to.Ptr(true),
				HasSSHKey:      to.Ptr(true),
				HasSSHPassword: to.Ptr(true),
				HomeDirectory:  to.Ptr("homedirectory"),
				PermissionScopes: []*armstorage.PermissionScope{
					{
						Permissions:  to.Ptr("rwd"),
						ResourceName: to.Ptr("share1"),
						Service:      to.Ptr("file"),
					},
					{
						Permissions:  to.Ptr("rw"),
						ResourceName: to.Ptr("share2"),
						Service:      to.Ptr("file"),
					}},
				Sid: to.Ptr("S-1-2-0-125132-153423-36235-1000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalUser) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalUser)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalUsers_CreateOrUpdate(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateLocalUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"res6977",
		"sto2527",
		"user1",
		armstorage.LocalUser{
			Properties: &armstorage.LocalUserProperties{
				HasSSHPassword: to.Ptr(true),
				HomeDirectory:  to.Ptr("homedirectory"),
				PermissionScopes: []*armstorage.PermissionScope{
					{
						Permissions:  to.Ptr("rwd"),
						ResourceName: to.Ptr("share1"),
						Service:      to.Ptr("file"),
					},
					{
						Permissions:  to.Ptr("rw"),
						ResourceName: to.Ptr("share2"),
						Service:      to.Ptr("file"),
					}},
				SSHAuthorizedKeys: []*armstorage.SSHPublicKey{
					{
						Description: to.Ptr("key name"),
						Key:         to.Ptr("ssh-rsa keykeykeykeykey="),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LocalUser{
			Name: to.Ptr("user1"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/localUsers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/loalUsers/user1"),
			Properties: &armstorage.LocalUserProperties{
				HomeDirectory: to.Ptr("homedirectory"),
				PermissionScopes: []*armstorage.PermissionScope{
					{
						Permissions:  to.Ptr("rwd"),
						ResourceName: to.Ptr("share1"),
						Service:      to.Ptr("file"),
					},
					{
						Permissions:  to.Ptr("rw"),
						ResourceName: to.Ptr("share2"),
						Service:      to.Ptr("file"),
					}},
				Sid: to.Ptr("S-1-2-0-125132-153423-36235-1000"),
				SSHAuthorizedKeys: []*armstorage.SSHPublicKey{
					{
						Description: to.Ptr("key name"),
						Key:         to.Ptr("ssh-rsa keykeykeykeykey="),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalUser) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalUser)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateLocalUser"},
	})
	client = armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"res6977",
		"sto2527",
		"user1",
		armstorage.LocalUser{
			Properties: &armstorage.LocalUserProperties{
				HasSharedKey:   to.Ptr(false),
				HasSSHKey:      to.Ptr(false),
				HasSSHPassword: to.Ptr(false),
				HomeDirectory:  to.Ptr("homedirectory2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LocalUser{
			Name: to.Ptr("user1"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/localUsers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.Storage/storageAccounts/sto2527/loalUsers/user1"),
			Properties: &armstorage.LocalUserProperties{
				HasSharedKey:   to.Ptr(false),
				HasSSHKey:      to.Ptr(false),
				HasSSHPassword: to.Ptr(false),
				HomeDirectory:  to.Ptr("homedirectory2"),
				Sid:            to.Ptr("S-1-2-0-3528686663-1788730862-2791910117-1000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalUser) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalUser)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalUsers_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteLocalUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"user1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserDelete.json: %v", err)
	}
}

func TestLocalUsers_ListKeys(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListLocalUserKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	res, err := client.ListKeys(ctx,
		"res6977",
		"sto2527",
		"user1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LocalUserKeys{
			SharedKey: to.Ptr("<REDACTED>"),
			SSHAuthorizedKeys: []*armstorage.SSHPublicKey{
				{
					Description: to.Ptr("key name"),
					Key:         to.Ptr("ssh-rsa keykeykeykeykew="),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalUserKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalUserKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalUsers_RegeneratePassword(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserRegeneratePassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegenerateLocalUserPassword"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewLocalUsersClient("{subscription-id}", cred, &options)
	res, err := client.RegeneratePassword(ctx,
		"res6977",
		"sto2527",
		"user1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserRegeneratePassword.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LocalUserRegeneratePasswordResult{
			SSHPassword: to.Ptr("<REDACTED>"),
		}
		if !reflect.DeepEqual(exampleRes, res.LocalUserRegeneratePasswordResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalUserRegeneratePasswordResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/LocalUserRegeneratePassword.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionScopes_Put(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutEncryptionScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountPutEncryptionScope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewEncryptionScopesClient("{subscription-id}", cred, &options)
	res, err := client.Put(ctx,
		"resource-group-name",
		"{storage-account-name}",
		"{encryption-scope-name}",
		armstorage.EncryptionScope{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutEncryptionScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.EncryptionScope{
			Name: to.Ptr("{encryption-scope-name}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/encryptionScopes"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{storage-account-name}/encryptionScopes/{encryption-scope-name}"),
			EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				Source:           to.Ptr(armstorage.EncryptionScopeSourceMicrosoftStorage),
				State:            to.Ptr(armstorage.EncryptionScopeStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionScope)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutEncryptionScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutEncryptionScopeWithInfrastructureEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountPutEncryptionScopeWithInfrastructureEncryption"},
	})
	client = armstorage.NewEncryptionScopesClient("{subscription-id}", cred, &options)
	res, err = client.Put(ctx,
		"resource-group-name",
		"{storage-account-name}",
		"{encryption-scope-name}",
		armstorage.EncryptionScope{
			EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
				RequireInfrastructureEncryption: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutEncryptionScopeWithInfrastructureEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.EncryptionScope{
			Name: to.Ptr("{encryption-scope-name}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/encryptionScopes"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{storage-account-name}/encryptionScopes/{encryption-scope-name}"),
			EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
				CreationTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				LastModifiedTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				RequireInfrastructureEncryption: to.Ptr(true),
				Source:                          to.Ptr(armstorage.EncryptionScopeSourceMicrosoftStorage),
				State:                           to.Ptr(armstorage.EncryptionScopeStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionScope)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPutEncryptionScopeWithInfrastructureEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionScopes_Patch(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPatchEncryptionScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountPatchEncryptionScope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewEncryptionScopesClient("{subscription-id}", cred, &options)
	res, err := client.Patch(ctx,
		"resource-group-name",
		"{storage-account-name}",
		"{encryption-scope-name}",
		armstorage.EncryptionScope{
			EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
				KeyVaultProperties: &armstorage.EncryptionScopeKeyVaultProperties{
					KeyURI: to.Ptr("https://testvault.vault.core.windows.net/keys/key1/863425f1358359c"),
				},
				Source: to.Ptr(armstorage.EncryptionScopeSourceMicrosoftKeyVault),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPatchEncryptionScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.EncryptionScope{
			Name: to.Ptr("{encryption-scope-name}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/encryptionScopes"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{storage-account-name}/encryptionScopes/{encryption-scope-name}"),
			EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				KeyVaultProperties: &armstorage.EncryptionScopeKeyVaultProperties{
					CurrentVersionedKeyIdentifier: to.Ptr("https://testvault.vault.core.windows.net/keys/key1/863425f1358359c"),
					KeyURI:                        to.Ptr("https://testvault.vault.core.windows.net/keys/key1/863425f1358359c"),
					LastKeyRotationTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-13T20:36:23.7023290Z"); return t }()),
				},
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-17T06:23:14.4513306Z"); return t }()),
				Source:           to.Ptr(armstorage.EncryptionScopeSourceMicrosoftKeyVault),
				State:            to.Ptr(armstorage.EncryptionScopeStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionScope)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountPatchEncryptionScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionScopes_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetEncryptionScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetEncryptionScope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewEncryptionScopesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"resource-group-name",
		"{storage-account-name}",
		"{encryption-scope-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetEncryptionScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.EncryptionScope{
			Name: to.Ptr("{encyrption-scope-name}"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/encryptionScopes"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{storage-account-name}/encryptionScopes/{encryption-scope-name}"),
			EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
				Source:           to.Ptr(armstorage.EncryptionScopeSourceMicrosoftStorage),
				State:            to.Ptr(armstorage.EncryptionScopeStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionScope)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountGetEncryptionScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionScopes_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEncryptionScopeList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountEncryptionScopeList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewEncryptionScopesClient("{subscription-id}", cred, &options)
	pager := client.List("resource-group-name",
		"{storage-account-name}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEncryptionScopeList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.EncryptionScopeListResult{
			Value: []*armstorage.EncryptionScope{
				{
					Name: to.Ptr("scope-1"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/encryptionScopes"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{storage-account-name}/encryptionScopes/scope-1"),
					EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T02:42:41.7633306Z"); return t }()),
						Source:           to.Ptr(armstorage.EncryptionScopeSourceMicrosoftStorage),
						State:            to.Ptr(armstorage.EncryptionScopeStateEnabled),
					},
				},
				{
					Name: to.Ptr("scope-2"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/encryptionScopes"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{storage-account-name}/encryptionScopes/scope-2"),
					EncryptionScopeProperties: &armstorage.EncryptionScopeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-16T04:32:14.3355306Z"); return t }()),
						KeyVaultProperties: &armstorage.EncryptionScopeKeyVaultProperties{
							KeyURI: to.Ptr("https://testvault.vault.core.windows.net/keys/key1/863425f1358359c"),
						},
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-17T06:23:14.4513306Z"); return t }()),
						Source:           to.Ptr(armstorage.EncryptionScopeSourceMicrosoftKeyVault),
						State:            to.Ptr(armstorage.EncryptionScopeStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EncryptionScopeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EncryptionScopeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/StorageAccountEncryptionScopeList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobServices_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListBlobServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobServicesClient("{subscription-id}", cred, &options)
	pager := client.List("res4410",
		"sto8607",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.BlobServiceItems{
			Value: []*armstorage.BlobServiceProperties{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/blobServices/default"),
					BlobServiceProperties: &armstorage.BlobServicePropertiesProperties{
						ChangeFeed: &armstorage.ChangeFeed{
							Enabled:         to.Ptr(true),
							RetentionInDays: to.Ptr[int32](7),
						},
						Cors: &armstorage.CorsRules{
							CorsRules: []*armstorage.CorsRule{
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.contoso.com"),
										to.Ptr("http://www.fabrikam.com")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-*")},
									MaxAgeInSeconds: to.Ptr[int32](100),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
									AllowedOrigins: []*string{
										to.Ptr("*")},
									ExposedHeaders: []*string{
										to.Ptr("*")},
									MaxAgeInSeconds: to.Ptr[int32](2),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-12345675754564*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.abc23.com"),
										to.Ptr("https://www.fabrikam.com/*")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x -ms-meta-target*")},
									MaxAgeInSeconds: to.Ptr[int32](2000),
								}},
						},
						DefaultServiceVersion: to.Ptr("2017-07-29"),
						DeleteRetentionPolicy: &armstorage.DeleteRetentionPolicy{
							Days:    to.Ptr[int32](300),
							Enabled: to.Ptr(true),
						},
						IsVersioningEnabled: to.Ptr(true),
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BlobServiceItems) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BlobServiceItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobServices_SetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesPutLastAccessTimeBasedTracking.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlobServicesPutLastAccessTimeBasedTracking"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobServicesClient("{subscription-id}", cred, &options)
	res, err := client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.BlobServiceProperties{
			BlobServiceProperties: &armstorage.BlobServicePropertiesProperties{
				LastAccessTimeTrackingPolicy: &armstorage.LastAccessTimeTrackingPolicy{
					Name: to.Ptr(armstorage.NameAccessTimeTracking),
					BlobType: []*string{
						to.Ptr("blockBlob")},
					Enable:                    to.Ptr(true),
					TrackingGranularityInDays: to.Ptr[int32](1),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesPutLastAccessTimeBasedTracking.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/blobServices/default"),
			BlobServiceProperties: &armstorage.BlobServicePropertiesProperties{
				LastAccessTimeTrackingPolicy: &armstorage.LastAccessTimeTrackingPolicy{
					Name: to.Ptr(armstorage.NameAccessTimeTracking),
					BlobType: []*string{
						to.Ptr("blockBlob")},
					Enable:                    to.Ptr(true),
					TrackingGranularityInDays: to.Ptr[int32](1),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesPutLastAccessTimeBasedTracking.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutBlobServices"},
	})
	client = armstorage.NewBlobServicesClient("{subscription-id}", cred, &options)
	res, err = client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.BlobServiceProperties{
			BlobServiceProperties: &armstorage.BlobServicePropertiesProperties{
				ChangeFeed: &armstorage.ChangeFeed{
					Enabled:         to.Ptr(true),
					RetentionInDays: to.Ptr[int32](7),
				},
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x -ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
				DefaultServiceVersion: to.Ptr("2017-07-29"),
				DeleteRetentionPolicy: &armstorage.DeleteRetentionPolicy{
					Days:    to.Ptr[int32](300),
					Enabled: to.Ptr(true),
				},
				IsVersioningEnabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/blobServices/default"),
			BlobServiceProperties: &armstorage.BlobServicePropertiesProperties{
				ChangeFeed: &armstorage.ChangeFeed{
					Enabled:         to.Ptr(true),
					RetentionInDays: to.Ptr[int32](7),
				},
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x -ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
				DefaultServiceVersion: to.Ptr("2017-07-29"),
				DeleteRetentionPolicy: &armstorage.DeleteRetentionPolicy{
					Days:    to.Ptr[int32](300),
					Enabled: to.Ptr(true),
				},
				IsVersioningEnabled: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobServices_GetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetBlobServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobServicesClient("{subscription-id}", cred, &options)
	res, err := client.GetServiceProperties(ctx,
		"res4410",
		"sto8607",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/blobServices/default"),
			BlobServiceProperties: &armstorage.BlobServicePropertiesProperties{
				ChangeFeed: &armstorage.ChangeFeed{
					Enabled:         to.Ptr(true),
					RetentionInDays: to.Ptr[int32](7),
				},
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x -ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
				DefaultServiceVersion: to.Ptr("2017-07-29"),
				DeleteRetentionPolicy: &armstorage.DeleteRetentionPolicy{
					Days:    to.Ptr[int32](300),
					Enabled: to.Ptr(true),
				},
				IsVersioningEnabled: to.Ptr(true),
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobServicesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	pager := client.List("res9290",
		"sto1590",
		&armstorage.BlobContainersClientListOptions{Maxpagesize: nil,
			Filter:  nil,
			Include: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.ListContainerItems{
			Value: []*armstorage.ListContainerItem{
				{
					Name: to.Ptr("container1644"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container1644"),
					Etag: to.Ptr("\"0x8D589847D51C7DE\""),
					Properties: &armstorage.ContainerProperties{
						HasImmutabilityPolicy: to.Ptr(false),
						HasLegalHold:          to.Ptr(false),
						LastModifiedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T08:20:47Z"); return t }()),
						LeaseState:            to.Ptr(armstorage.LeaseStateAvailable),
						LeaseStatus:           to.Ptr(armstorage.LeaseStatusUnlocked),
						PublicAccess:          to.Ptr(armstorage.PublicAccessContainer),
					},
				},
				{
					Name: to.Ptr("container4052"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container4052"),
					Etag: to.Ptr("\"0x8D589847DAB5AF9\""),
					Properties: &armstorage.ContainerProperties{
						HasImmutabilityPolicy: to.Ptr(false),
						HasLegalHold:          to.Ptr(false),
						LastModifiedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T08:20:47Z"); return t }()),
						LeaseState:            to.Ptr(armstorage.LeaseStateAvailable),
						LeaseStatus:           to.Ptr(armstorage.LeaseStatusUnlocked),
						PublicAccess:          to.Ptr(armstorage.PublicAccessNone),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListContainerItems) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListContainerItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedBlobContainersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListDeletedContainers"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	pager = client.List("res9290",
		"sto1590",
		&armstorage.BlobContainersClientListOptions{Maxpagesize: nil,
			Filter:  nil,
			Include: to.Ptr(armstorage.ListContainersIncludeDeleted),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedBlobContainersList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.ListContainerItems{
			Value: []*armstorage.ListContainerItem{
				{
					Name: to.Ptr("container1644"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container1644"),
					Etag: to.Ptr("\"0x8D589847D51C7DE\""),
					Properties: &armstorage.ContainerProperties{
						HasImmutabilityPolicy: to.Ptr(false),
						HasLegalHold:          to.Ptr(false),
						LastModifiedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T08:20:47Z"); return t }()),
						LeaseState:            to.Ptr(armstorage.LeaseStateAvailable),
						LeaseStatus:           to.Ptr(armstorage.LeaseStatusUnlocked),
						PublicAccess:          to.Ptr(armstorage.PublicAccessContainer),
					},
				},
				{
					Name: to.Ptr("container4052"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container4052"),
					Etag: to.Ptr("\"0x8D589847DAB5AF9\""),
					Properties: &armstorage.ContainerProperties{
						Deleted:                to.Ptr(true),
						DeletedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-14T08:20:47Z"); return t }()),
						HasImmutabilityPolicy:  to.Ptr(false),
						HasLegalHold:           to.Ptr(false),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T08:20:47Z"); return t }()),
						LeaseState:             to.Ptr(armstorage.LeaseStateExpired),
						LeaseStatus:            to.Ptr(armstorage.LeaseStatusUnlocked),
						PublicAccess:           to.Ptr(armstorage.PublicAccessNone),
						RemainingRetentionDays: to.Ptr[int32](30),
						Version:                to.Ptr("1234567890"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListContainerItems) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListContainerItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedBlobContainersList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_Create(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutDefaultEncryptionScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutContainerWithDefaultEncryptionScope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"res3376",
		"sto328",
		"container6185",
		armstorage.BlobContainer{
			ContainerProperties: &armstorage.ContainerProperties{
				DefaultEncryptionScope:      to.Ptr("encryptionscope185"),
				DenyEncryptionScopeOverride: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutDefaultEncryptionScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobContainer{
			Name: to.Ptr("container6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"),
			ContainerProperties: &armstorage.ContainerProperties{
				DefaultEncryptionScope:      to.Ptr("encryptionscope185"),
				DenyEncryptionScopeOverride: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutDefaultEncryptionScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutObjectLevelWorm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutContainerWithObjectLevelWorm"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err = client.Create(ctx,
		"res3376",
		"sto328",
		"container6185",
		armstorage.BlobContainer{
			ContainerProperties: &armstorage.ContainerProperties{
				ImmutableStorageWithVersioning: &armstorage.ImmutableStorageWithVersioning{
					Enabled: to.Ptr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutObjectLevelWorm.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobContainer{
			Name: to.Ptr("container6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"),
			ContainerProperties: &armstorage.ContainerProperties{
				ImmutableStorageWithVersioning: &armstorage.ImmutableStorageWithVersioning{
					Enabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutObjectLevelWorm.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutContainers"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err = client.Create(ctx,
		"res3376",
		"sto328",
		"container6185",
		armstorage.BlobContainer{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobContainer{
			Name: to.Ptr("container6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"),
		}
		if !reflect.DeepEqual(exampleRes, res.BlobContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_Update(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"res3376",
		"sto328",
		"container6185",
		armstorage.BlobContainer{
			ContainerProperties: &armstorage.ContainerProperties{
				Metadata: map[string]*string{
					"metadata": to.Ptr("true"),
				},
				PublicAccess: to.Ptr(armstorage.PublicAccessContainer),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobContainer{
			Name: to.Ptr("container6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"),
			ContainerProperties: &armstorage.ContainerProperties{
				HasImmutabilityPolicy: to.Ptr(false),
				HasLegalHold:          to.Ptr(false),
				Metadata: map[string]*string{
					"metadata": to.Ptr("true"),
				},
				PublicAccess: to.Ptr(armstorage.PublicAccessContainer),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGetWithAllowProtectedAppendWritesAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetBlobContainersGetWithAllowProtectedAppendWritesAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res9871",
		"sto6217",
		"container1634",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGetWithAllowProtectedAppendWritesAll.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobContainer{
			Name: to.Ptr("container1634"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/blobServices/default/containers/container1634"),
			Etag: to.Ptr("\"0x8D592D74CC20EBA\""),
			ContainerProperties: &armstorage.ContainerProperties{
				HasImmutabilityPolicy: to.Ptr(true),
				HasLegalHold:          to.Ptr(true),
				ImmutabilityPolicy: &armstorage.ImmutabilityPolicyProperties{
					Etag: to.Ptr("\"8d592d74cb3011a\""),
					Properties: &armstorage.ImmutabilityPolicyProperty{
						AllowProtectedAppendWritesAll:         to.Ptr(true),
						ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](100),
						State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateLocked),
					},
					UpdateHistory: []*armstorage.UpdateHistoryProperty{
						{
							AllowProtectedAppendWritesAll:         to.Ptr(true),
							ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
							ObjectIdentifier:                      to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							TenantID:                              to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:                             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:11.431403Z"); return t }()),
							Update:                                to.Ptr(armstorage.ImmutabilityPolicyUpdateTypePut),
						},
						{
							AllowProtectedAppendWritesAll:         to.Ptr(true),
							ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
							ObjectIdentifier:                      to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							TenantID:                              to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:                             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:13.0907641Z"); return t }()),
							Update:                                to.Ptr(armstorage.ImmutabilityPolicyUpdateTypeLock),
						},
						{
							AllowProtectedAppendWritesAll:         to.Ptr(true),
							ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](100),
							ObjectIdentifier:                      to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							TenantID:                              to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:                             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:14.7097716Z"); return t }()),
							Update:                                to.Ptr(armstorage.ImmutabilityPolicyUpdateTypeExtend),
						}},
				},
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:14Z"); return t }()),
				LeaseState:       to.Ptr(armstorage.LeaseStateAvailable),
				LeaseStatus:      to.Ptr(armstorage.LeaseStatusUnlocked),
				LegalHold: &armstorage.LegalHoldProperties{
					HasLegalHold: to.Ptr(true),
					ProtectedAppendWritesHistory: &armstorage.ProtectedAppendWritesHistory{
						AllowProtectedAppendWritesAll: to.Ptr(true),
						Timestamp:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T01:58:44.5044483Z"); return t }()),
					},
					Tags: []*armstorage.TagProperty{
						{
							ObjectIdentifier: to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							Tag:              to.Ptr("tag1"),
							TenantID:         to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:09.6964643Z"); return t }()),
						},
						{
							ObjectIdentifier: to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							Tag:              to.Ptr("tag2"),
							TenantID:         to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:09.6964643Z"); return t }()),
						},
						{
							ObjectIdentifier: to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							Tag:              to.Ptr("tag3"),
							TenantID:         to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:09.6964643Z"); return t }()),
						}},
				},
				PublicAccess: to.Ptr(armstorage.PublicAccessNone),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGetWithAllowProtectedAppendWritesAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetContainers"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"res9871",
		"sto6217",
		"container1634",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.BlobContainer{
			Name: to.Ptr("container1634"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/blobServices/default/containers/container1634"),
			Etag: to.Ptr("\"0x8D592D74CC20EBA\""),
			ContainerProperties: &armstorage.ContainerProperties{
				HasImmutabilityPolicy: to.Ptr(true),
				HasLegalHold:          to.Ptr(true),
				ImmutabilityPolicy: &armstorage.ImmutabilityPolicyProperties{
					Etag: to.Ptr("\"8d592d74cb3011a\""),
					Properties: &armstorage.ImmutabilityPolicyProperty{
						ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](100),
						State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateLocked),
					},
					UpdateHistory: []*armstorage.UpdateHistoryProperty{
						{
							ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
							ObjectIdentifier:                      to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							TenantID:                              to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:                             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:11.431403Z"); return t }()),
							Update:                                to.Ptr(armstorage.ImmutabilityPolicyUpdateTypePut),
						},
						{
							ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
							ObjectIdentifier:                      to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							TenantID:                              to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:                             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:13.0907641Z"); return t }()),
							Update:                                to.Ptr(armstorage.ImmutabilityPolicyUpdateTypeLock),
						},
						{
							ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](100),
							ObjectIdentifier:                      to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							TenantID:                              to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:                             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:14.7097716Z"); return t }()),
							Update:                                to.Ptr(armstorage.ImmutabilityPolicyUpdateTypeExtend),
						}},
				},
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:14Z"); return t }()),
				LeaseState:       to.Ptr(armstorage.LeaseStateAvailable),
				LeaseStatus:      to.Ptr(armstorage.LeaseStatusUnlocked),
				LegalHold: &armstorage.LegalHoldProperties{
					HasLegalHold: to.Ptr(true),
					Tags: []*armstorage.TagProperty{
						{
							ObjectIdentifier: to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							Tag:              to.Ptr("tag1"),
							TenantID:         to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:09.6964643Z"); return t }()),
						},
						{
							ObjectIdentifier: to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							Tag:              to.Ptr("tag2"),
							TenantID:         to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:09.6964643Z"); return t }()),
						},
						{
							ObjectIdentifier: to.Ptr("ce7cd28a-fc25-4bf1-8fb9-e1b9833ffd4b"),
							Tag:              to.Ptr("tag3"),
							TenantID:         to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T05:06:09.6964643Z"); return t }()),
						}},
				},
				PublicAccess: to.Ptr(armstorage.PublicAccessNone),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BlobContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BlobContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res4079",
		"sto4506",
		"container9689",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersDelete.json: %v", err)
	}
}

func TestBlobContainers_SetLegalHold(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersSetLegalHold.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetLegalHoldContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.SetLegalHold(ctx,
		"res4303",
		"sto7280",
		"container8723",
		armstorage.LegalHold{
			Tags: []*string{
				to.Ptr("tag1"),
				to.Ptr("tag2"),
				to.Ptr("tag3")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersSetLegalHold.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LegalHold{
			HasLegalHold: to.Ptr(true),
			Tags: []*string{
				to.Ptr("tag1"),
				to.Ptr("tag2"),
				to.Ptr("tag3")},
		}
		if !reflect.DeepEqual(exampleRes, res.LegalHold) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LegalHold)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersSetLegalHold.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersSetLegalHoldAllowProtectedAppendWritesAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetLegalHoldContainersWithAllowProtectedAppendWritesAll"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err = client.SetLegalHold(ctx,
		"res4303",
		"sto7280",
		"container8723",
		armstorage.LegalHold{
			AllowProtectedAppendWritesAll: to.Ptr(true),
			Tags: []*string{
				to.Ptr("tag1"),
				to.Ptr("tag2"),
				to.Ptr("tag3")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersSetLegalHoldAllowProtectedAppendWritesAll.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LegalHold{
			AllowProtectedAppendWritesAll: to.Ptr(true),
			HasLegalHold:                  to.Ptr(true),
			Tags: []*string{
				to.Ptr("tag1"),
				to.Ptr("tag2"),
				to.Ptr("tag3")},
		}
		if !reflect.DeepEqual(exampleRes, res.LegalHold) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LegalHold)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersSetLegalHoldAllowProtectedAppendWritesAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_ClearLegalHold(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersClearLegalHold.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClearLegalHoldContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.ClearLegalHold(ctx,
		"res4303",
		"sto7280",
		"container8723",
		armstorage.LegalHold{
			Tags: []*string{
				to.Ptr("tag1"),
				to.Ptr("tag2"),
				to.Ptr("tag3")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersClearLegalHold.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LegalHold{
			HasLegalHold: to.Ptr(false),
			Tags:         []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.LegalHold) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LegalHold)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersClearLegalHold.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_CreateOrUpdateImmutabilityPolicy(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateImmutabilityPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdateImmutabilityPolicy(ctx,
		"res1782",
		"sto7069",
		"container6397",
		&armstorage.BlobContainersClientCreateOrUpdateImmutabilityPolicyOptions{IfMatch: nil,
			Parameters: &armstorage.ImmutabilityPolicy{
				Properties: &armstorage.ImmutabilityPolicyProperty{
					AllowProtectedAppendWrites:            to.Ptr(true),
					ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
				},
			},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ImmutabilityPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default"),
			Etag: to.Ptr("\"8d59f830cb130e5\""),
			Properties: &armstorage.ImmutabilityPolicyProperty{
				AllowProtectedAppendWrites:            to.Ptr(true),
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
				State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateUnlocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImmutabilityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImmutabilityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutImmutabilityPolicyAllowProtectedAppendWritesAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateImmutabilityPolicyWithAllowProtectedAppendWritesAll"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdateImmutabilityPolicy(ctx,
		"res1782",
		"sto7069",
		"container6397",
		&armstorage.BlobContainersClientCreateOrUpdateImmutabilityPolicyOptions{IfMatch: nil,
			Parameters: &armstorage.ImmutabilityPolicy{
				Properties: &armstorage.ImmutabilityPolicyProperty{
					AllowProtectedAppendWritesAll:         to.Ptr(true),
					ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
				},
			},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutImmutabilityPolicyAllowProtectedAppendWritesAll.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ImmutabilityPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default"),
			Etag: to.Ptr("\"8d59f830cb130e5\""),
			Properties: &armstorage.ImmutabilityPolicyProperty{
				AllowProtectedAppendWritesAll:         to.Ptr(true),
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
				State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateUnlocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImmutabilityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImmutabilityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersPutImmutabilityPolicyAllowProtectedAppendWritesAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_GetImmutabilityPolicy(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGetImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetImmutabilityPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.GetImmutabilityPolicy(ctx,
		"res5221",
		"sto9177",
		"container3489",
		&armstorage.BlobContainersClientGetImmutabilityPolicyOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGetImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ImmutabilityPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res5221/providers/Microsoft.Storage/storageAccounts/sto9177/blobServices/default/containers/container3489/immutabilityPolicies/default"),
			Etag: to.Ptr("\"8d59f828e64b75c\""),
			Properties: &armstorage.ImmutabilityPolicyProperty{
				AllowProtectedAppendWrites:            to.Ptr(true),
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](5),
				State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateUnlocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImmutabilityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImmutabilityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersGetImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_DeleteImmutabilityPolicy(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersDeleteImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteImmutabilityPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.DeleteImmutabilityPolicy(ctx,
		"res1581",
		"sto9621",
		"container4910",
		"\"8d59f81a7fa7be0\"",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersDeleteImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ImmutabilityPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res1581/providers/Microsoft.Storage/storageAccounts/sto9621/blobServices/default/containers/container4910/immutabilityPolicies/default"),
			Etag: to.Ptr("\"8d59f81a87b40c0\""),
			Properties: &armstorage.ImmutabilityPolicyProperty{
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](0),
				State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateUnlocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImmutabilityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImmutabilityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersDeleteImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_LockImmutabilityPolicy(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLockImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LockImmutabilityPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.LockImmutabilityPolicy(ctx,
		"res2702",
		"sto5009",
		"container1631",
		"\"8d59f825b721dd3\"",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLockImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ImmutabilityPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res2702/providers/Microsoft.Storage/storageAccounts/sto5009/blobServices/default/containers/container1631/immutabilityPolicies/default"),
			Etag: to.Ptr("\"8d57a8a5edb084a\""),
			Properties: &armstorage.ImmutabilityPolicyProperty{
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
				State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateLocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImmutabilityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImmutabilityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLockImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_ExtendImmutabilityPolicy(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersExtendImmutabilityPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExtendImmutabilityPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.ExtendImmutabilityPolicy(ctx,
		"res6238",
		"sto232",
		"container5023",
		"\"8d59f830d0c3bf9\"",
		&armstorage.BlobContainersClientExtendImmutabilityPolicyOptions{Parameters: &armstorage.ImmutabilityPolicy{
			Properties: &armstorage.ImmutabilityPolicyProperty{
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](100),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersExtendImmutabilityPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ImmutabilityPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6238/providers/Microsoft.Storage/storageAccounts/sto232/blobServices/default/containers/container5023/immutabilityPolicies/default"),
			Etag: to.Ptr("\"8d57a8b2ff50332\""),
			Properties: &armstorage.ImmutabilityPolicyProperty{
				ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](100),
				State:                                 to.Ptr(armstorage.ImmutabilityPolicyStateLocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImmutabilityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImmutabilityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersExtendImmutabilityPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_Lease(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLease_Acquire.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Acquire a lease on a container"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err := client.Lease(ctx,
		"res3376",
		"sto328",
		"container6185",
		&armstorage.BlobContainersClientLeaseOptions{Parameters: &armstorage.LeaseContainerRequest{
			Action:        to.Ptr(armstorage.LeaseContainerRequestActionAcquire),
			LeaseDuration: to.Ptr[int32](-1),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLease_Acquire.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LeaseContainerResponse{
			LeaseID: to.Ptr("8698f513-fa75-44a1-b8eb-30ba336af27d"),
		}
		if !reflect.DeepEqual(exampleRes, res.LeaseContainerResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LeaseContainerResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLease_Acquire.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLease_Break.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Break a lease on a container"},
	})
	client = armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	res, err = client.Lease(ctx,
		"res3376",
		"sto328",
		"container6185",
		&armstorage.BlobContainersClientLeaseOptions{Parameters: &armstorage.LeaseContainerRequest{
			Action:  to.Ptr(armstorage.LeaseContainerRequestActionBreak),
			LeaseID: to.Ptr("8698f513-fa75-44a1-b8eb-30ba336af27d"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLease_Break.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LeaseContainerResponse{
			LeaseTimeSeconds: to.Ptr("0"),
		}
		if !reflect.DeepEqual(exampleRes, res.LeaseContainerResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LeaseContainerResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/BlobContainersLease_Break.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlobContainers_ObjectLevelWorm(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/ObjectLevelWormContainerMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VersionLevelWormContainerMigration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewBlobContainersClient("{subscription-id}", cred, &options)
	poller, err := client.BeginObjectLevelWorm(ctx,
		"res1782",
		"sto7069",
		"container6397",
		&armstorage.BlobContainersClientBeginObjectLevelWormOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/ObjectLevelWormContainerMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/ObjectLevelWormContainerMigration.json: %v", err)
	}
}

func TestFileServices_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListFileServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileServicesClient("{subscription-id}", cred, &options)
	res, err := client.List(ctx,
		"res9290",
		"sto1590",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileServiceItems{
			Value: []*armstorage.FileServiceProperties{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/fileServices/default"),
					FileServiceProperties: &armstorage.FileServicePropertiesProperties{
						Cors: &armstorage.CorsRules{
							CorsRules: []*armstorage.CorsRule{
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.contoso.com"),
										to.Ptr("http://www.fabrikam.com")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-*")},
									MaxAgeInSeconds: to.Ptr[int32](100),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
									AllowedOrigins: []*string{
										to.Ptr("*")},
									ExposedHeaders: []*string{
										to.Ptr("*")},
									MaxAgeInSeconds: to.Ptr[int32](2),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-12345675754564*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.abc23.com"),
										to.Ptr("https://www.fabrikam.com/*")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									MaxAgeInSeconds: to.Ptr[int32](2000),
								}},
						},
					},
					SKU: &armstorage.SKU{
						Name: to.Ptr(armstorage.SKUNameStandardGRS),
						Tier: to.Ptr(armstorage.SKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.FileServiceItems) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileServiceItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileServices_SetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutFileServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileServicesClient("{subscription-id}", cred, &options)
	res, err := client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.FileServiceProperties{
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/fileServices/default"),
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut_EnableSMBMultichannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutFileServices_EnableSMBMultichannel"},
	})
	client = armstorage.NewFileServicesClient("{subscription-id}", cred, &options)
	res, err = client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.FileServiceProperties{
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				ProtocolSettings: &armstorage.ProtocolSettings{
					Smb: &armstorage.SmbSetting{
						Multichannel: &armstorage.Multichannel{
							Enabled: to.Ptr(true),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut_EnableSMBMultichannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/fileServices/default"),
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				ProtocolSettings: &armstorage.ProtocolSettings{
					Smb: &armstorage.SmbSetting{
						Multichannel: &armstorage.Multichannel{
							Enabled: to.Ptr(true),
						},
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNamePremiumLRS),
				Tier: to.Ptr(armstorage.SKUTierPremium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut_EnableSMBMultichannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut_EnableSecureSmbFeatures.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutFileServices_EnableSecureSmbFeatures"},
	})
	client = armstorage.NewFileServicesClient("{subscription-id}", cred, &options)
	res, err = client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.FileServiceProperties{
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				ProtocolSettings: &armstorage.ProtocolSettings{
					Smb: &armstorage.SmbSetting{
						AuthenticationMethods:    to.Ptr("NTLMv2;Kerberos"),
						ChannelEncryption:        to.Ptr("AES-128-CCM;AES-128-GCM;AES-256-GCM"),
						KerberosTicketEncryption: to.Ptr("RC4-HMAC;AES-256"),
						Versions:                 to.Ptr("SMB2.1;SMB3.0;SMB3.1.1"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut_EnableSecureSmbFeatures.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/fileServices/default"),
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				ProtocolSettings: &armstorage.ProtocolSettings{
					Smb: &armstorage.SmbSetting{
						AuthenticationMethods:    to.Ptr("NTLMv2;Kerberos"),
						ChannelEncryption:        to.Ptr("AES-128-CCM;AES-128-GCM;AES-256-GCM"),
						KerberosTicketEncryption: to.Ptr("RC4-HMAC;AES-256"),
						Versions:                 to.Ptr("SMB2.1;SMB3.0;SMB3.1.1"),
					},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNamePremiumLRS),
				Tier: to.Ptr(armstorage.SKUTierPremium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesPut_EnableSecureSmbFeatures.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileServices_GetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetFileServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileServicesClient("{subscription-id}", cred, &options)
	res, err := client.GetServiceProperties(ctx,
		"res4410",
		"sto8607",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/fileServices/default"),
			FileServiceProperties: &armstorage.FileServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
			SKU: &armstorage.SKU{
				Name: to.Ptr(armstorage.SKUNameStandardGRS),
				Tier: to.Ptr(armstorage.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileServicesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileShares_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedFileSharesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListDeletedShares"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	pager := client.List("res9290",
		"sto1590",
		&armstorage.FileSharesClientListOptions{Maxpagesize: nil,
			Filter: nil,
			Expand: to.Ptr("deleted"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedFileSharesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.FileShareItems{
			Value: []*armstorage.FileShareItem{
				{
					Name: to.Ptr("share1644"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default/shares/share1644_1234567890"),
					Etag: to.Ptr("\"0x8D589847D51C7DE\""),
					Properties: &armstorage.FileShareProperties{
						Deleted:                to.Ptr(true),
						DeletedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-14T08:20:47Z"); return t }()),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T08:20:47Z"); return t }()),
						RemainingRetentionDays: to.Ptr[int32](30),
						ShareQuota:             to.Ptr[int32](1024),
						Version:                to.Ptr("1234567890"),
					},
				},
				{
					Name: to.Ptr("share4052"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default/shares/share4052"),
					Etag: to.Ptr("\"0x8D589847DAB5AF9\""),
					Properties: &armstorage.FileShareProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T08:20:47Z"); return t }()),
						ShareQuota:       to.Ptr[int32](1024),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FileShareItems) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FileShareItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/DeletedFileSharesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileShareSnapshotsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListShareSnapshots"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	pager = client.List("res9290",
		"sto1590",
		&armstorage.FileSharesClientListOptions{Maxpagesize: nil,
			Filter: nil,
			Expand: to.Ptr("snapshots"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileShareSnapshotsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.FileShareItems{
			Value: []*armstorage.FileShareItem{
				{
					Name: to.Ptr("share4052"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default/shares/share4052"),
					Etag: to.Ptr("\"0x8D589847DAB5AF9\""),
					Properties: &armstorage.FileShareProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-26T05:47:05.0000000Z"); return t }()),
						ShareQuota:       to.Ptr[int32](1024),
					},
				},
				{
					Name: to.Ptr("share4052"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default/shares/share4052"),
					Etag: to.Ptr("\"0x8D589847DAB5AF9\""),
					Properties: &armstorage.FileShareProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-26T05:47:05.0000000Z"); return t }()),
						ShareQuota:       to.Ptr[int32](1024),
						SnapshotTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-26T05:48:07.0000000Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FileShareItems) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FileShareItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileShareSnapshotsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListShares"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	pager = client.List("res9290",
		"sto1590",
		&armstorage.FileSharesClientListOptions{Maxpagesize: nil,
			Filter: nil,
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.FileShareItems{
			Value: []*armstorage.FileShareItem{
				{
					Name: to.Ptr("share1644"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default/shares/share1644"),
					Etag: to.Ptr("\"0x8D589847D51C7DE\""),
					Properties: &armstorage.FileShareProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T08:20:47Z"); return t }()),
						ShareQuota:       to.Ptr[int32](1024),
					},
				},
				{
					Name: to.Ptr("share4052"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default/shares/share4052"),
					Etag: to.Ptr("\"0x8D589847DAB5AF9\""),
					Properties: &armstorage.FileShareProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T08:20:47Z"); return t }()),
						ShareQuota:       to.Ptr[int32](1024),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FileShareItems) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FileShareItems)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileShares_Create(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut_NFS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create NFS Shares"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"res346",
		"sto666",
		"share1235",
		armstorage.FileShare{
			FileShareProperties: &armstorage.FileShareProperties{
				EnabledProtocols: to.Ptr(armstorage.EnabledProtocolsNFS),
			},
		},
		&armstorage.FileSharesClientCreateOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut_NFS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share1235"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res346/providers/Microsoft.Storage/storageAccounts/sto666/fileServices/default/shares/share1235"),
			FileShareProperties: &armstorage.FileShareProperties{
				EnabledProtocols: to.Ptr(armstorage.EnabledProtocolsNFS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut_NFS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutShares"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err = client.Create(ctx,
		"res3376",
		"sto328",
		"share6185",
		armstorage.FileShare{},
		&armstorage.FileSharesClientCreateOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185"),
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut_AccessTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutShares with Access Tier"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err = client.Create(ctx,
		"res346",
		"sto666",
		"share1235",
		armstorage.FileShare{
			FileShareProperties: &armstorage.FileShareProperties{
				AccessTier: to.Ptr(armstorage.ShareAccessTierHot),
			},
		},
		&armstorage.FileSharesClientCreateOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut_AccessTier.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share1235"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res346/providers/Microsoft.Storage/storageAccounts/sto666/fileServices/default/shares/share1235"),
			FileShareProperties: &armstorage.FileShareProperties{
				AccessTier: to.Ptr(armstorage.ShareAccessTierHot),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPut_AccessTier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileShares_Update(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileShareAclsPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateShareAcls"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"res3376",
		"sto328",
		"share6185",
		armstorage.FileShare{
			FileShareProperties: &armstorage.FileShareProperties{
				SignedIdentifiers: []*armstorage.SignedIdentifier{
					{
						AccessPolicy: &armstorage.AccessPolicy{
							ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T08:49:37.0000000Z"); return t }()),
							Permission: to.Ptr("rwd"),
							StartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T08:49:37.0000000Z"); return t }()),
						},
						ID: to.Ptr("MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileShareAclsPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185"),
			FileShareProperties: &armstorage.FileShareProperties{
				SignedIdentifiers: []*armstorage.SignedIdentifier{
					{
						AccessPolicy: &armstorage.AccessPolicy{
							ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T08:49:37.0000000Z"); return t }()),
							Permission: to.Ptr("rwd"),
							StartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T08:49:37.0000000Z"); return t }()),
						},
						ID: to.Ptr("MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileShareAclsPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateShares"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err = client.Update(ctx,
		"res3376",
		"sto328",
		"share6185",
		armstorage.FileShare{
			FileShareProperties: &armstorage.FileShareProperties{
				Metadata: map[string]*string{
					"type": to.Ptr("image"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185"),
			FileShareProperties: &armstorage.FileShareProperties{
				Metadata: map[string]*string{
					"type": to.Ptr("image"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileShares_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesGet_Stats.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetShareStats"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res9871",
		"sto6217",
		"share1634",
		&armstorage.FileSharesClientGetOptions{Expand: to.Ptr("stats"),
			XMSSnapshot: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesGet_Stats.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share1634"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/fileServices/default/shares/share1634"),
			Etag: to.Ptr("\"0x8D592D74CC20EBA\""),
			FileShareProperties: &armstorage.FileShareProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-26T05:06:14Z"); return t }()),
				ShareQuota:       to.Ptr[int32](1024),
				ShareUsageBytes:  to.Ptr[int64](652945),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesGet_Stats.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetShares"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"res9871",
		"sto6217",
		"share1634",
		&armstorage.FileSharesClientGetOptions{Expand: nil,
			XMSSnapshot: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.FileShare{
			Name: to.Ptr("share1634"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/fileServices/shares"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/fileServices/default/shares/share1634"),
			Etag: to.Ptr("\"0x8D592D74CC20EBA\""),
			FileShareProperties: &armstorage.FileShareProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-26T05:06:14Z"); return t }()),
				ShareQuota:       to.Ptr[int32](1024),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FileShare) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileShare)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFileShares_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteShares"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res4079",
		"sto4506",
		"share9689",
		&armstorage.FileSharesClientDeleteOptions{XMSSnapshot: nil,
			Include: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesDelete.json: %v", err)
	}
}

func TestFileShares_Restore(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestoreShares"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	_, err := client.Restore(ctx,
		"res3376",
		"sto328",
		"share1249",
		armstorage.DeletedShare{
			DeletedShareName:    to.Ptr("share1249"),
			DeletedShareVersion: to.Ptr("1234567890"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesRestore.json: %v", err)
	}
}

func TestFileShares_Lease(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesLease_Acquire.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Acquire a lease on a share"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err := client.Lease(ctx,
		"res3376",
		"sto328",
		"share124",
		&armstorage.FileSharesClientLeaseOptions{XMSSnapshot: nil,
			Parameters: &armstorage.LeaseShareRequest{
				Action:        to.Ptr(armstorage.LeaseShareActionAcquire),
				LeaseDuration: to.Ptr[int32](-1),
			},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesLease_Acquire.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LeaseShareResponse{
			LeaseID: to.Ptr("8698f513-fa75-44a1-b8eb-30ba336af27d"),
		}
		if !reflect.DeepEqual(exampleRes, res.LeaseShareResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LeaseShareResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesLease_Acquire.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesLease_Break.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Break a lease on a share"},
	})
	client = armstorage.NewFileSharesClient("{subscription-id}", cred, &options)
	res, err = client.Lease(ctx,
		"res3376",
		"sto328",
		"share12",
		&armstorage.FileSharesClientLeaseOptions{XMSSnapshot: nil,
			Parameters: &armstorage.LeaseShareRequest{
				Action:  to.Ptr(armstorage.LeaseShareActionBreak),
				LeaseID: to.Ptr("8698f513-fa75-44a1-b8eb-30ba336af27d"),
			},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesLease_Break.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.LeaseShareResponse{
			LeaseTimeSeconds: to.Ptr("0"),
		}
		if !reflect.DeepEqual(exampleRes, res.LeaseShareResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LeaseShareResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/FileSharesLease_Break.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueueServices_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueServicesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueServicesClient("{subscription-id}", cred, &options)
	res, err := client.List(ctx,
		"res9290",
		"sto1590",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ListQueueServices{
			Value: []*armstorage.QueueServiceProperties{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/queueServices/default"),
					QueueServiceProperties: &armstorage.QueueServicePropertiesProperties{
						Cors: &armstorage.CorsRules{
							CorsRules: []*armstorage.CorsRule{
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.contoso.com"),
										to.Ptr("http://www.fabrikam.com")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-*")},
									MaxAgeInSeconds: to.Ptr[int32](100),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
									AllowedOrigins: []*string{
										to.Ptr("*")},
									ExposedHeaders: []*string{
										to.Ptr("*")},
									MaxAgeInSeconds: to.Ptr[int32](2),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-12345675754564*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.abc23.com"),
										to.Ptr("https://www.fabrikam.com/*")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									MaxAgeInSeconds: to.Ptr[int32](2000),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ListQueueServices) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListQueueServices)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueueServices_SetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueServicesPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueServicesClient("{subscription-id}", cred, &options)
	res, err := client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.QueueServiceProperties{
			QueueServiceProperties: &armstorage.QueueServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.QueueServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/queueServices/default"),
			QueueServiceProperties: &armstorage.QueueServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueueServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueueServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueueServices_GetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueServicesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueServicesClient("{subscription-id}", cred, &options)
	res, err := client.GetServiceProperties(ctx,
		"res4410",
		"sto8607",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.QueueServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/queueServices/default"),
			QueueServiceProperties: &armstorage.QueueServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueueServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueueServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueServicesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueue_Create(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueOperationPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"res3376",
		"sto328",
		"queue6185",
		armstorage.Queue{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Queue{
			Name: to.Ptr("queue6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/queues"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default/queues/queue6185"),
		}
		if !reflect.DeepEqual(exampleRes, res.Queue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Queue)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPutWithMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueOperationPutWithMetadata"},
	})
	client = armstorage.NewQueueClient("{subscription-id}", cred, &options)
	res, err = client.Create(ctx,
		"res3376",
		"sto328",
		"queue6185",
		armstorage.Queue{
			QueueProperties: &armstorage.QueueProperties{
				Metadata: map[string]*string{
					"sample1": to.Ptr("meta1"),
					"sample2": to.Ptr("meta2"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPutWithMetadata.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Queue{
			Name: to.Ptr("queue6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/queues"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default/queues/queue6185"),
			QueueProperties: &armstorage.QueueProperties{
				Metadata: map[string]*string{
					"sample1": to.Ptr("meta1"),
					"sample2": to.Ptr("meta2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Queue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Queue)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPutWithMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueue_Update(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueOperationPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"res3376",
		"sto328",
		"queue6185",
		armstorage.Queue{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Queue{
			Name: to.Ptr("queue6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/queues"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default/queues/queue6185"),
		}
		if !reflect.DeepEqual(exampleRes, res.Queue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Queue)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueue_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueOperationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res3376",
		"sto328",
		"queue6185",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Queue{
			Name: to.Ptr("queue6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/queues"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default/queues/queue6185"),
			QueueProperties: &armstorage.QueueProperties{
				Metadata: map[string]*string{
					"sample1": to.Ptr("meta1"),
					"sample2": to.Ptr("meta2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Queue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Queue)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueue_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueOperationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res3376",
		"sto328",
		"queue6185",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationDelete.json: %v", err)
	}
}

func TestQueue_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueueOperationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewQueueClient("{subscription-id}", cred, &options)
	pager := client.List("res9290",
		"sto328",
		&armstorage.QueueClientListOptions{Maxpagesize: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.ListQueueResource{
			Value: []*armstorage.ListQueue{
				{
					Name: to.Ptr("queue6185"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/queues"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default/queues/queue6185"),
					QueueProperties: &armstorage.ListQueueProperties{
						Metadata: map[string]*string{
							"sample1": to.Ptr("meta1"),
							"sample2": to.Ptr("meta2"),
						},
					},
				},
				{
					Name: to.Ptr("queue6186"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/queueServices/queues"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default/queues/queue6186"),
					QueueProperties: &armstorage.ListQueueProperties{
						Metadata: map[string]*string{
							"sample1": to.Ptr("meta1"),
							"sample2": to.Ptr("meta2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListQueueResource) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListQueueResource)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/QueueOperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableServices_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableServicesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableServicesClient("{subscription-id}", cred, &options)
	res, err := client.List(ctx,
		"res9290",
		"sto1590",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.ListTableServices{
			Value: []*armstorage.TableServiceProperties{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/tableServices/default"),
					TableServiceProperties: &armstorage.TableServicePropertiesProperties{
						Cors: &armstorage.CorsRules{
							CorsRules: []*armstorage.CorsRule{
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.contoso.com"),
										to.Ptr("http://www.fabrikam.com")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-*")},
									MaxAgeInSeconds: to.Ptr[int32](100),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
									AllowedOrigins: []*string{
										to.Ptr("*")},
									ExposedHeaders: []*string{
										to.Ptr("*")},
									MaxAgeInSeconds: to.Ptr[int32](2),
								},
								{
									AllowedHeaders: []*string{
										to.Ptr("x-ms-meta-12345675754564*")},
									AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
										to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
									AllowedOrigins: []*string{
										to.Ptr("http://www.abc23.com"),
										to.Ptr("https://www.fabrikam.com/*")},
									ExposedHeaders: []*string{
										to.Ptr("x-ms-meta-abc"),
										to.Ptr("x-ms-meta-data*"),
										to.Ptr("x-ms-meta-target*")},
									MaxAgeInSeconds: to.Ptr[int32](2000),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ListTableServices) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListTableServices)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableServices_SetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableServicesPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableServicesClient("{subscription-id}", cred, &options)
	res, err := client.SetServiceProperties(ctx,
		"res4410",
		"sto8607",
		armstorage.TableServiceProperties{
			TableServiceProperties: &armstorage.TableServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.TableServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/tableServices/default"),
			TableServiceProperties: &armstorage.TableServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TableServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TableServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableServices_GetServiceProperties(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableServicesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableServicesClient("{subscription-id}", cred, &options)
	res, err := client.GetServiceProperties(ctx,
		"res4410",
		"sto8607",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.TableServiceProperties{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res4410/providers/Microsoft.Storage/storageAccounts/sto8607/tableServices/default"),
			TableServiceProperties: &armstorage.TableServicePropertiesProperties{
				Cors: &armstorage.CorsRules{
					CorsRules: []*armstorage.CorsRule{
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemHEAD),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPOST),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemOPTIONS),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemMERGE),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-*")},
							MaxAgeInSeconds: to.Ptr[int32](100),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET)},
							AllowedOrigins: []*string{
								to.Ptr("*")},
							ExposedHeaders: []*string{
								to.Ptr("*")},
							MaxAgeInSeconds: to.Ptr[int32](2),
						},
						{
							AllowedHeaders: []*string{
								to.Ptr("x-ms-meta-12345675754564*")},
							AllowedMethods: []*armstorage.CorsRuleAllowedMethodsItem{
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemGET),
								to.Ptr(armstorage.CorsRuleAllowedMethodsItemPUT)},
							AllowedOrigins: []*string{
								to.Ptr("http://www.abc23.com"),
								to.Ptr("https://www.fabrikam.com/*")},
							ExposedHeaders: []*string{
								to.Ptr("x-ms-meta-abc"),
								to.Ptr("x-ms-meta-data*"),
								to.Ptr("x-ms-meta-target*")},
							MaxAgeInSeconds: to.Ptr[int32](2000),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TableServiceProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TableServiceProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableServicesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTable_Create(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableOperationPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"res3376",
		"sto328",
		"table6185",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Table{
			Name: to.Ptr("table6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/tables"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/tableServices/default/tables/table6185"),
			TableProperties: &armstorage.TableProperties{
				TableName: to.Ptr("table6185"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Table) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Table)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTable_Update(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableOperationPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"res3376",
		"sto328",
		"table6185",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Table{
			Name: to.Ptr("table6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/tables"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/tableServices/default/tables/table6185"),
			TableProperties: &armstorage.TableProperties{
				TableName: to.Ptr("table6185"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Table) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Table)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTable_Get(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableOperationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res3376",
		"sto328",
		"table6185",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorage.Table{
			Name: to.Ptr("table6185"),
			Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/tables"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/tableServices/default/tables/table6185"),
			TableProperties: &armstorage.TableProperties{
				TableName: to.Ptr("table6185"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Table) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Table)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTable_Delete(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableOperationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res3376",
		"sto328",
		"table6185",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationDelete.json: %v", err)
	}
}

func TestTable_List(t *testing.T) {
	// From example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TableOperationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorage.NewTableClient("{subscription-id}", cred, &options)
	pager := client.List("res9290",
		"sto328",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorage.ListTableResource{
			Value: []*armstorage.Table{
				{
					Name: to.Ptr("table6185"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/tables"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/tableServices/default/tables/table6185"),
					TableProperties: &armstorage.TableProperties{
						TableName: to.Ptr("table6185"),
					},
				},
				{
					Name: to.Ptr("table6186"),
					Type: to.Ptr("Microsoft.Storage/storageAccounts/tableServices/tables"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/tableServices/default/tables/table6186"),
					TableProperties: &armstorage.TableProperties{
						TableName: to.Ptr("table6186"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListTableResource) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListTableResource)
			t.Fatalf("Mock response is not equal to example response for example specification/storage/resource-manager/Microsoft.Storage/stable/2021-08-01/examples/TableOperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
