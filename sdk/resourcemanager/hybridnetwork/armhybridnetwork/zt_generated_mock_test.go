//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridnetwork_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridnetwork/armhybridnetwork"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestNetworkFunctions_Delete(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network function resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg",
		"testNf",
		&armhybridnetwork.NetworkFunctionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionDelete.json: %v", err)
	}
}

func TestNetworkFunctions_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network function resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"testNf",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.NetworkFunction{
			Name:     to.Ptr("testNf"),
			Type:     to.Ptr("Microsoft.HybridNetwork/networkFunctions"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/networkFunctions/testNf"),
			Location: to.Ptr("eastus"),
			Properties: &armhybridnetwork.NetworkFunctionPropertiesFormat{
				Device: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/devices/testDevice"),
				},
				ManagedApplication: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/testServiceKey"),
				},
				ManagedApplicationParameters: map[string]interface{}{},
				NetworkFunctionUserConfigurations: []*armhybridnetwork.NetworkFunctionUserConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				ServiceKey:              to.Ptr("testServiceKey"),
				SKUName:                 to.Ptr("testSku"),
				SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorName:              to.Ptr("testVendor"),
				VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateNotProvisioned),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkFunction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkFunction)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkFunctions_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network function resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"testNf",
		armhybridnetwork.NetworkFunction{
			Location: to.Ptr("eastus"),
			Properties: &armhybridnetwork.NetworkFunctionPropertiesFormat{
				Device: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/devices/testDevice"),
				},
				ManagedApplicationParameters: map[string]interface{}{},
				NetworkFunctionUserConfigurations: []*armhybridnetwork.NetworkFunctionUserConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				SKUName:    to.Ptr("testSku"),
				SKUType:    to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorName: to.Ptr("testVendor"),
			},
		},
		&armhybridnetwork.NetworkFunctionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.NetworkFunction{
			Name:     to.Ptr("testNf"),
			Type:     to.Ptr("Microsoft.HybridNetwork/networkFunctions"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/networkFunctions/testNf"),
			Location: to.Ptr("eastus"),
			Properties: &armhybridnetwork.NetworkFunctionPropertiesFormat{
				Device: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/devices/testDevice"),
				},
				ManagedApplication: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/testServiceKey"),
				},
				ManagedApplicationParameters: map[string]interface{}{},
				NetworkFunctionUserConfigurations: []*armhybridnetwork.NetworkFunctionUserConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				ServiceKey:              to.Ptr("testServiceKey"),
				SKUName:                 to.Ptr("testSku"),
				SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorName:              to.Ptr("testVendor"),
				VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateNotProvisioned),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkFunction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkFunction)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkFunctions_UpdateTags(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update tags for network function resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg",
		"testNf",
		armhybridnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.NetworkFunction{
			Name:     to.Ptr("testNf"),
			Type:     to.Ptr("Microsoft.HybridNetwork/networkFunctions"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/networkFunctions/testNf"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armhybridnetwork.NetworkFunctionPropertiesFormat{
				Device: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/devices/testDevice"),
				},
				ManagedApplication: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/testServiceKey"),
				},
				ManagedApplicationParameters: map[string]interface{}{},
				NetworkFunctionUserConfigurations: []*armhybridnetwork.NetworkFunctionUserConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				ServiceKey:              to.Ptr("testServiceKey"),
				SKUName:                 to.Ptr("testSku"),
				SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorName:              to.Ptr("testVendor"),
				VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateNotProvisioned),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkFunction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkFunction)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkFunctions_ListBySubscription(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all network function resources in subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionsClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.NetworkFunctionListResult{
			Value: []*armhybridnetwork.NetworkFunction{
				{
					Name:     to.Ptr("testNf"),
					Type:     to.Ptr("Microsoft.HybridNetwork/networkFunctions"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/networkFunctions/testNf"),
					Location: to.Ptr("eastus"),
					Properties: &armhybridnetwork.NetworkFunctionPropertiesFormat{
						Device: &armhybridnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/devices/testDevice"),
						},
						ManagedApplication: &armhybridnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/testServiceKey"),
						},
						ManagedApplicationParameters: map[string]interface{}{},
						NetworkFunctionUserConfigurations: []*armhybridnetwork.NetworkFunctionUserConfiguration{
							{
								NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
									{
										IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
											{
												Gateway:            to.Ptr(""),
												IPAddress:          to.Ptr(""),
												IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
												IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
												Subnet:             to.Ptr(""),
											}},
										MacAddress:           to.Ptr(""),
										NetworkInterfaceName: to.Ptr("nic1"),
										VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
									},
									{
										IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
											{
												Gateway:            to.Ptr(""),
												IPAddress:          to.Ptr(""),
												IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
												IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
												Subnet:             to.Ptr(""),
											}},
										MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
										NetworkInterfaceName: to.Ptr("nic2"),
										VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
									}},
								RoleName:           to.Ptr("testRole"),
								UserDataParameters: map[string]interface{}{},
							}},
						ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						ServiceKey:              to.Ptr("testServiceKey"),
						SKUName:                 to.Ptr("testSku"),
						SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
						VendorName:              to.Ptr("testVendor"),
						VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateNotProvisioned),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkFunctionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkFunctionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkFunctions_ListByResourceGroup(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List network function in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.NetworkFunctionListResult{
			Value: []*armhybridnetwork.NetworkFunction{
				{
					Name:     to.Ptr("testNf"),
					Type:     to.Ptr("Microsoft.HybridNetwork/networkFunctions"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/networkFunctions/testNf"),
					Location: to.Ptr("eastus"),
					Properties: &armhybridnetwork.NetworkFunctionPropertiesFormat{
						Device: &armhybridnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourcegroups/rg/providers/Microsoft.HybridNetwork/devices/testDevice"),
						},
						ManagedApplication: &armhybridnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/testServiceKey"),
						},
						ManagedApplicationParameters: map[string]interface{}{},
						NetworkFunctionUserConfigurations: []*armhybridnetwork.NetworkFunctionUserConfiguration{
							{
								NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
									{
										IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
											{
												Gateway:            to.Ptr(""),
												IPAddress:          to.Ptr(""),
												IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
												IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
												Subnet:             to.Ptr(""),
											}},
										MacAddress:           to.Ptr(""),
										NetworkInterfaceName: to.Ptr("nic1"),
										VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
									},
									{
										IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
											{
												Gateway:            to.Ptr(""),
												IPAddress:          to.Ptr(""),
												IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
												IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
												Subnet:             to.Ptr(""),
											}},
										MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
										NetworkInterfaceName: to.Ptr("nic2"),
										VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
									}},
								RoleName:           to.Ptr("testRole"),
								UserDataParameters: map[string]interface{}{},
							}},
						ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						ServiceKey:              to.Ptr("testServiceKey"),
						SKUName:                 to.Ptr("testSku"),
						SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
						VendorName:              to.Ptr("testVendor"),
						VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateNotProvisioned),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkFunctionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkFunctionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_Delete(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete device resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"TestDevice",
		&armhybridnetwork.DevicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceDelete.json: %v", err)
	}
}

func TestDevices_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get  device resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"TestDevice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.Device{
			Name:     to.Ptr("TestDevice"),
			Type:     to.Ptr("Microsoft.HybridNetwork/devices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HybridNetwork/devices/TestDevice"),
			Location: to.Ptr("eastus"),
			Properties: &armhybridnetwork.AzureStackEdgeFormat{
				DeviceType: to.Ptr(armhybridnetwork.DeviceTypeAzureStackEdge),
				NetworkFunctions: []*armhybridnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.HybridNetwork/networkFunctions/TestNetworkFunction"),
					}},
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				Status:            to.Ptr(armhybridnetwork.StatusNotRegistered),
				AzureStackEdge: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourcegroups/rg2/providers/Microsoft.DataboxEdge/DataboxEdgeDevices/TestDataboxEdgeDeviceName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update device"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"TestDevice",
		armhybridnetwork.Device{
			Location: to.Ptr("eastus"),
			Properties: &armhybridnetwork.AzureStackEdgeFormat{
				DeviceType: to.Ptr(armhybridnetwork.DeviceTypeAzureStackEdge),
				AzureStackEdge: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourcegroups/rg2/providers/Microsoft.DataboxEdge/DataboxEdgeDevices/TestDataboxEdgeDeviceName"),
				},
			},
		},
		&armhybridnetwork.DevicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.Device{
			Name:     to.Ptr("TestDevice"),
			Type:     to.Ptr("Microsoft.HybridNetwork/devices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HybridNetwork/devices/TestDevice"),
			Location: to.Ptr("eastus"),
			Properties: &armhybridnetwork.AzureStackEdgeFormat{
				DeviceType:        to.Ptr(armhybridnetwork.DeviceTypeAzureStackEdge),
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				Status:            to.Ptr(armhybridnetwork.StatusNotRegistered),
				AzureStackEdge: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourcegroups/rg2/providers/Microsoft.DataboxEdge/DataboxEdgeDevices/TestDataboxEdgeDeviceName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_UpdateTags(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update hybrid network device tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"TestDevice",
		armhybridnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.Device{
			Name:     to.Ptr("TestDevice"),
			Type:     to.Ptr("Microsoft.HybridNetwork/devices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HybridNetwork/devices/TestDevice"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armhybridnetwork.AzureStackEdgeFormat{
				DeviceType: to.Ptr(armhybridnetwork.DeviceTypeAzureStackEdge),
				NetworkFunctions: []*armhybridnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.HybridNetwork/networkFunctions/TestNetworkFunction"),
					}},
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				Status:            to.Ptr(armhybridnetwork.StatusNotRegistered),
				AzureStackEdge: &armhybridnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourcegroups/rg2/providers/Microsoft.DataboxEdge/DataboxEdgeDevices/TestDataboxEdgeDeviceName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_ListBySubscription(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all devices in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.DeviceListResult{
			Value: []*armhybridnetwork.Device{
				{
					Name:     to.Ptr("TestDevice"),
					Type:     to.Ptr("Microsoft.HybridNetwork/devices"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HybridNetwork/devices/TestDevice"),
					Location: to.Ptr("eastus"),
					Properties: &armhybridnetwork.AzureStackEdgeFormat{
						DeviceType: to.Ptr(armhybridnetwork.DeviceTypeAzureStackEdge),
						NetworkFunctions: []*armhybridnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.HybridNetwork/networkFunctions/TestNetworkFunction"),
							}},
						ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						Status:            to.Ptr(armhybridnetwork.StatusNotRegistered),
						AzureStackEdge: &armhybridnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourcegroups/rg2/providers/Microsoft.DataboxEdge/DataboxEdgeDevices/TestDataboxEdgeDeviceName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_ListByResourceGroup(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all devices in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.DeviceListResult{
			Value: []*armhybridnetwork.Device{
				{
					Name:     to.Ptr("TestDevice"),
					Type:     to.Ptr("Microsoft.HybridNetwork/devices"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HybridNetwork/devices/TestDevice"),
					Location: to.Ptr("eastus"),
					Properties: &armhybridnetwork.AzureStackEdgeFormat{
						DeviceType: to.Ptr(armhybridnetwork.DeviceTypeAzureStackEdge),
						NetworkFunctions: []*armhybridnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.HybridNetwork/networkFunctions/TestVirtualNetworkFunction"),
							}},
						ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						Status:            to.Ptr(armhybridnetwork.StatusNotRegistered),
						AzureStackEdge: &armhybridnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourcegroups/rg2/providers/Microsoft.DataboxEdge/DataboxEdgeDevices/TestDataboxEdgeDeviceName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_ListRegistrationKey(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListRegistrationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get device registration key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewDevicesClient("subid", cred, &options)
	res, err := client.ListRegistrationKey(ctx,
		"rg1",
		"TestDevice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListRegistrationKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.DeviceRegistrationKey{
			RegistrationKey: to.Ptr("TestRegistartionKey"),
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceRegistrationKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceRegistrationKey)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/DeviceListRegistrationKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.OperationList{
			Value: []*armhybridnetwork.Operation{
				{
					Name: to.Ptr("Microsoft.HybridNetwork/nfs/read"),
					Display: &armhybridnetwork.OperationDisplay{
						Description: to.Ptr("Gets Nf"),
						Operation:   to.Ptr("Get Nf"),
						Provider:    to.Ptr("Microsoft Hybrid Network"),
						Resource:    to.Ptr("Nf"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendors_Delete(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestVendor",
		&armhybridnetwork.VendorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorDelete.json: %v", err)
	}
}

func TestVendors_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestVendor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.Vendor{
			Name: to.Ptr("TestVendor"),
			Type: to.Ptr("Microsoft.HybridNetwork/vendors"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor"),
			Properties: &armhybridnetwork.VendorPropertiesFormat{
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				SKUs: []*armhybridnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/skus/TestVendorSku"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vendor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vendor)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendors_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update Vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestVendor",
		&armhybridnetwork.VendorsClientBeginCreateOrUpdateOptions{Parameters: &armhybridnetwork.Vendor{},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.Vendor{
			Name: to.Ptr("TestVendor"),
			Type: to.Ptr("Microsoft.HybridNetwork/vendors"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor"),
			Properties: &armhybridnetwork.VendorPropertiesFormat{
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vendor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vendor)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendors_ListBySubscription(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all vendor resources in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorsClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.VendorListResult{
			Value: []*armhybridnetwork.Vendor{
				{
					Name: to.Ptr("TestVendor"),
					Type: to.Ptr("Microsoft.HybridNetwork/vendors"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor"),
					Properties: &armhybridnetwork.VendorPropertiesFormat{
						ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						SKUs: []*armhybridnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestVendorSku1"),
							}},
					},
				},
				{
					Name: to.Ptr("TestVendor2"),
					Type: to.Ptr("Microsoft.HybridNetwork/vendors"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor2"),
					Properties: &armhybridnetwork.VendorPropertiesFormat{
						ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						SKUs: []*armhybridnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestVendorSku2"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VendorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VendorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUs_Delete(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the sku of vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestVendor",
		"TestSku",
		&armhybridnetwork.VendorSKUsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuDelete.json: %v", err)
	}
}

func TestVendorSKUs_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the sku of vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestVendor",
		"TestSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.VendorSKU{
			Name: to.Ptr("TestSku"),
			Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku"),
			Properties: &armhybridnetwork.VendorSKUPropertiesFormat{
				DeploymentMode:             to.Ptr(armhybridnetwork.SKUDeploymentModePrivateEdgeZone),
				ManagedApplicationTemplate: map[string]interface{}{},
				NetworkFunctionTemplate: &armhybridnetwork.NetworkFunctionTemplate{
					NetworkFunctionRoleConfigurations: []*armhybridnetwork.NetworkFunctionRoleConfiguration{
						{
							CustomProfile: &armhybridnetwork.CustomProfile{
								MetadataConfigurationPath: to.Ptr("/var/logs/network.cfg"),
							},
							NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.Ptr(""),
											IPAddress:          to.Ptr(""),
											IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
											IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
											Subnet:             to.Ptr(""),
										}},
									MacAddress:           to.Ptr(""),
									NetworkInterfaceName: to.Ptr("nic1"),
									VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchType("")),
								},
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.Ptr(""),
											IPAddress:          to.Ptr(""),
											IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
											IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
											Subnet:             to.Ptr(""),
										}},
									MacAddress:           to.Ptr(""),
									NetworkInterfaceName: to.Ptr("nic2"),
									VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchType("")),
								}},
							OSProfile: &armhybridnetwork.OsProfile{
								AdminUsername: to.Ptr("dummyuser"),
								CustomData:    to.Ptr("base-64 encoded string of custom data"),
								LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
									SSH: &armhybridnetwork.SSHConfiguration{
										PublicKeys: []*armhybridnetwork.SSHPublicKey{
											{
												Path:    to.Ptr("home/user/.ssh/authorized_keys"),
												KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
											}},
									},
								},
							},
							RoleName: to.Ptr("test"),
							RoleType: to.Ptr(armhybridnetwork.NetworkFunctionRoleConfigurationTypeVirtualMachine),
							StorageProfile: &armhybridnetwork.StorageProfile{
								DataDisks: []*armhybridnetwork.DataDisk{
									{
										Name:         to.Ptr("DataDisk1"),
										CreateOption: to.Ptr(armhybridnetwork.DiskCreateOptionTypesEmpty),
										DiskSizeGB:   to.Ptr[int32](10),
									}},
								ImageReference: &armhybridnetwork.ImageReference{
									Offer:     to.Ptr("UbuntuServer"),
									Publisher: to.Ptr("Canonical"),
									SKU:       to.Ptr("18.04-LTS"),
									Version:   to.Ptr("18.04.201804262"),
								},
								OSDisk: &armhybridnetwork.OsDisk{
									Name:       to.Ptr("vhdName"),
									DiskSizeGB: to.Ptr[int32](30),
									OSType:     to.Ptr(armhybridnetwork.OperatingSystemTypesLinux),
									Vhd:        &armhybridnetwork.VirtualHardDisk{},
								},
							},
							VirtualMachineSize: to.Ptr(armhybridnetwork.VirtualMachineSizeTypesStandardD3V2),
						}},
				},
				Preview:           to.Ptr(true),
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VendorSKU) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VendorSKU)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUs_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update the sku of vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestVendor",
		"TestSku",
		armhybridnetwork.VendorSKU{
			Properties: &armhybridnetwork.VendorSKUPropertiesFormat{
				DeploymentMode:             to.Ptr(armhybridnetwork.SKUDeploymentModePrivateEdgeZone),
				ManagedApplicationTemplate: map[string]interface{}{},
				NetworkFunctionTemplate: &armhybridnetwork.NetworkFunctionTemplate{
					NetworkFunctionRoleConfigurations: []*armhybridnetwork.NetworkFunctionRoleConfiguration{
						{
							CustomProfile: &armhybridnetwork.CustomProfile{
								MetadataConfigurationPath: to.Ptr("/var/logs/network.cfg"),
							},
							NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.Ptr(""),
											IPAddress:          to.Ptr(""),
											IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
											IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
											Subnet:             to.Ptr(""),
										}},
									MacAddress:           to.Ptr(""),
									NetworkInterfaceName: to.Ptr("nic1"),
									VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
								},
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.Ptr(""),
											IPAddress:          to.Ptr(""),
											IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
											IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
											Subnet:             to.Ptr(""),
										}},
									MacAddress:           to.Ptr(""),
									NetworkInterfaceName: to.Ptr("nic2"),
									VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
								}},
							OSProfile: &armhybridnetwork.OsProfile{
								AdminUsername: to.Ptr("dummyuser"),
								CustomData:    to.Ptr("base-64 encoded string of custom data"),
								LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
									SSH: &armhybridnetwork.SSHConfiguration{
										PublicKeys: []*armhybridnetwork.SSHPublicKey{
											{
												Path:    to.Ptr("home/user/.ssh/authorized_keys"),
												KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
											}},
									},
								},
							},
							RoleName: to.Ptr("test"),
							RoleType: to.Ptr(armhybridnetwork.NetworkFunctionRoleConfigurationTypeVirtualMachine),
							StorageProfile: &armhybridnetwork.StorageProfile{
								DataDisks: []*armhybridnetwork.DataDisk{
									{
										Name:         to.Ptr("DataDisk1"),
										CreateOption: to.Ptr(armhybridnetwork.DiskCreateOptionTypesEmpty),
										DiskSizeGB:   to.Ptr[int32](10),
									}},
								ImageReference: &armhybridnetwork.ImageReference{
									Offer:     to.Ptr("UbuntuServer"),
									Publisher: to.Ptr("Canonical"),
									SKU:       to.Ptr("18.04-LTS"),
									Version:   to.Ptr("18.04.201804262"),
								},
								OSDisk: &armhybridnetwork.OsDisk{
									Name:       to.Ptr("vhdName"),
									DiskSizeGB: to.Ptr[int32](30),
									OSType:     to.Ptr(armhybridnetwork.OperatingSystemTypesLinux),
									Vhd: &armhybridnetwork.VirtualHardDisk{
										URI: to.Ptr("https://contoso.net/link/vnd.vhd?sp=rl&st=2020-10-08T20:38:19Z&se=2020-12-09T19:38:00Z&sv=2019-12-12&sr=b&sig=7BM2f4yOw%3D"),
									},
								},
							},
							VirtualMachineSize: to.Ptr(armhybridnetwork.VirtualMachineSizeTypesStandardD3V2),
						}},
				},
				Preview: to.Ptr(true),
			},
		},
		&armhybridnetwork.VendorSKUsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.VendorSKU{
			Name: to.Ptr("TestSku"),
			Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku"),
			Properties: &armhybridnetwork.VendorSKUPropertiesFormat{
				DeploymentMode:             to.Ptr(armhybridnetwork.SKUDeploymentModePrivateEdgeZone),
				ManagedApplicationTemplate: map[string]interface{}{},
				NetworkFunctionTemplate: &armhybridnetwork.NetworkFunctionTemplate{
					NetworkFunctionRoleConfigurations: []*armhybridnetwork.NetworkFunctionRoleConfiguration{
						{
							CustomProfile: &armhybridnetwork.CustomProfile{
								MetadataConfigurationPath: to.Ptr("/var/logs/network.cfg"),
							},
							NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.Ptr(""),
											IPAddress:          to.Ptr(""),
											IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
											IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
											Subnet:             to.Ptr(""),
										}},
									MacAddress:           to.Ptr(""),
									NetworkInterfaceName: to.Ptr("nic1"),
									VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
								},
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.Ptr(""),
											IPAddress:          to.Ptr(""),
											IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
											IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
											Subnet:             to.Ptr(""),
										}},
									MacAddress:           to.Ptr(""),
									NetworkInterfaceName: to.Ptr("nic2"),
									VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
								}},
							OSProfile: &armhybridnetwork.OsProfile{
								AdminUsername: to.Ptr("dummyuser"),
								CustomData:    to.Ptr("base-64 encoded string of custom data"),
								LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
									SSH: &armhybridnetwork.SSHConfiguration{
										PublicKeys: []*armhybridnetwork.SSHPublicKey{
											{
												Path:    to.Ptr("home/user/.ssh/authorized_keys"),
												KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
											}},
									},
								},
							},
							RoleName: to.Ptr("test"),
							RoleType: to.Ptr(armhybridnetwork.NetworkFunctionRoleConfigurationTypeVirtualMachine),
							StorageProfile: &armhybridnetwork.StorageProfile{
								DataDisks: []*armhybridnetwork.DataDisk{
									{
										Name:         to.Ptr("DataDisk1"),
										CreateOption: to.Ptr(armhybridnetwork.DiskCreateOptionTypesEmpty),
										DiskSizeGB:   to.Ptr[int32](10),
									}},
								ImageReference: &armhybridnetwork.ImageReference{
									Offer:     to.Ptr("UbuntuServer"),
									Publisher: to.Ptr("Canonical"),
									SKU:       to.Ptr("18.04-LTS"),
									Version:   to.Ptr("18.04.201804262"),
								},
								OSDisk: &armhybridnetwork.OsDisk{
									Name:       to.Ptr("vhdName"),
									DiskSizeGB: to.Ptr[int32](30),
									OSType:     to.Ptr(armhybridnetwork.OperatingSystemTypesLinux),
									Vhd:        &armhybridnetwork.VirtualHardDisk{},
								},
							},
							VirtualMachineSize: to.Ptr(armhybridnetwork.VirtualMachineSizeTypesStandardD3V2),
						}},
				},
				Preview:           to.Ptr(true),
				ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VendorSKU) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VendorSKU)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUs_List(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuListByVendor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all the vendor skus of vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUsClient("subid", cred, &options)
	pager := client.List("TestVendor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuListByVendor.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.VendorSKUListResult{
			Value: []*armhybridnetwork.VendorSKU{
				{
					Name: to.Ptr("TestSku1"),
					Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku1"),
					Properties: &armhybridnetwork.VendorSKUPropertiesFormat{
						DeploymentMode:             to.Ptr(armhybridnetwork.SKUDeploymentModePrivateEdgeZone),
						ManagedApplicationTemplate: map[string]interface{}{},
						NetworkFunctionTemplate: &armhybridnetwork.NetworkFunctionTemplate{
							NetworkFunctionRoleConfigurations: []*armhybridnetwork.NetworkFunctionRoleConfiguration{
								{
									CustomProfile: &armhybridnetwork.CustomProfile{
										MetadataConfigurationPath: to.Ptr("/var/logs/network.cfg"),
									},
									NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
										{
											IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
												{
													Gateway:            to.Ptr(""),
													IPAddress:          to.Ptr(""),
													IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
													IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
													Subnet:             to.Ptr(""),
												}},
											MacAddress:           to.Ptr(""),
											NetworkInterfaceName: to.Ptr("nic1"),
											VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchType("")),
										},
										{
											IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
												{
													Gateway:            to.Ptr(""),
													IPAddress:          to.Ptr(""),
													IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
													IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
													Subnet:             to.Ptr(""),
												}},
											MacAddress:           to.Ptr(""),
											NetworkInterfaceName: to.Ptr("nic2"),
											VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchType("")),
										}},
									OSProfile: &armhybridnetwork.OsProfile{
										AdminUsername: to.Ptr("dummyuser"),
										CustomData:    to.Ptr("base-64 encoded string of custom data"),
										LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
											SSH: &armhybridnetwork.SSHConfiguration{
												PublicKeys: []*armhybridnetwork.SSHPublicKey{
													{
														Path:    to.Ptr("home/user/.ssh/authorized_keys"),
														KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
													}},
											},
										},
									},
									RoleName: to.Ptr("test"),
									RoleType: to.Ptr(armhybridnetwork.NetworkFunctionRoleConfigurationTypeVirtualMachine),
									StorageProfile: &armhybridnetwork.StorageProfile{
										DataDisks: []*armhybridnetwork.DataDisk{
											{
												Name:         to.Ptr("DataDisk1"),
												CreateOption: to.Ptr(armhybridnetwork.DiskCreateOptionTypesEmpty),
												DiskSizeGB:   to.Ptr[int32](10),
											}},
										ImageReference: &armhybridnetwork.ImageReference{
											Offer:     to.Ptr("UbuntuServer"),
											Publisher: to.Ptr("Canonical"),
											SKU:       to.Ptr("18.04-LTS"),
											Version:   to.Ptr("18.04.201804262"),
										},
										OSDisk: &armhybridnetwork.OsDisk{
											Name:       to.Ptr("vhdName"),
											DiskSizeGB: to.Ptr[int32](30),
											OSType:     to.Ptr(armhybridnetwork.OperatingSystemTypesLinux),
											Vhd:        &armhybridnetwork.VirtualHardDisk{},
										},
									},
									VirtualMachineSize: to.Ptr(armhybridnetwork.VirtualMachineSizeTypesStandardD3V2),
								}},
						},
						Preview:           to.Ptr(true),
						ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("TestSku2"),
					Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku2"),
					Properties: &armhybridnetwork.VendorSKUPropertiesFormat{
						DeploymentMode:             to.Ptr(armhybridnetwork.SKUDeploymentModePrivateEdgeZone),
						ManagedApplicationTemplate: map[string]interface{}{},
						NetworkFunctionTemplate: &armhybridnetwork.NetworkFunctionTemplate{
							NetworkFunctionRoleConfigurations: []*armhybridnetwork.NetworkFunctionRoleConfiguration{
								{
									CustomProfile: &armhybridnetwork.CustomProfile{
										MetadataConfigurationPath: to.Ptr("/var/logs/network.cfg"),
									},
									NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
										{
											IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
												{
													Gateway:            to.Ptr(""),
													IPAddress:          to.Ptr(""),
													IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
													IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
													Subnet:             to.Ptr(""),
												}},
											MacAddress:           to.Ptr(""),
											NetworkInterfaceName: to.Ptr("nic1"),
											VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchType("")),
										},
										{
											IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
												{
													Gateway:            to.Ptr(""),
													IPAddress:          to.Ptr(""),
													IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
													IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
													Subnet:             to.Ptr(""),
												}},
											MacAddress:           to.Ptr(""),
											NetworkInterfaceName: to.Ptr("nic2"),
											VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchType("")),
										}},
									OSProfile: &armhybridnetwork.OsProfile{
										AdminUsername: to.Ptr("dummyuser"),
										CustomData:    to.Ptr("base-64 encoded string of custom data"),
										LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
											SSH: &armhybridnetwork.SSHConfiguration{
												PublicKeys: []*armhybridnetwork.SSHPublicKey{
													{
														Path:    to.Ptr("home/user/.ssh/authorized_keys"),
														KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
													}},
											},
										},
									},
									RoleName: to.Ptr("test"),
									RoleType: to.Ptr(armhybridnetwork.NetworkFunctionRoleConfigurationTypeVirtualMachine),
									StorageProfile: &armhybridnetwork.StorageProfile{
										DataDisks: []*armhybridnetwork.DataDisk{
											{
												Name:         to.Ptr("DataDisk1"),
												CreateOption: to.Ptr(armhybridnetwork.DiskCreateOptionTypesEmpty),
												DiskSizeGB:   to.Ptr[int32](10),
											}},
										ImageReference: &armhybridnetwork.ImageReference{
											Offer:     to.Ptr("UbuntuServer"),
											Publisher: to.Ptr("Canonical"),
											SKU:       to.Ptr("18.04-LTS"),
											Version:   to.Ptr("18.04.201804262"),
										},
										OSDisk: &armhybridnetwork.OsDisk{
											Name:       to.Ptr("vhdName"),
											DiskSizeGB: to.Ptr[int32](30),
											OSType:     to.Ptr(armhybridnetwork.OperatingSystemTypesLinux),
											Vhd:        &armhybridnetwork.VirtualHardDisk{},
										},
									},
									VirtualMachineSize: to.Ptr(armhybridnetwork.VirtualMachineSizeTypesStandardD3V2),
								}},
						},
						Preview:           to.Ptr(true),
						ProvisioningState: to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VendorSKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VendorSKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuListByVendor.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUPreview_List(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewListBySku.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all preview subscriptions of vendor sku sub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUPreviewClient("subid", cred, &options)
	pager := client.List("TestVendor",
		"TestSku",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewListBySku.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.PreviewSubscriptionsList{
			Value: []*armhybridnetwork.PreviewSubscription{
				{
					Name: to.Ptr("previewSub1"),
					Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus/previewsubscriptions"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku/previewsubscriptions/previewSub1"),
				},
				{
					Name: to.Ptr("previewSub2"),
					Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus/previewsubscriptions"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku/previewsubscriptions/previewSub2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PreviewSubscriptionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PreviewSubscriptionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewListBySku.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUPreview_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update preview subscription of vendor sku sub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUPreviewClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestVendor",
		"TestSku",
		"previewSub",
		armhybridnetwork.PreviewSubscription{},
		&armhybridnetwork.VendorSKUPreviewClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.PreviewSubscription{
			Name: to.Ptr("previewSub"),
			Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus/previewsubscriptions"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku/previewsubscriptions/previewSub"),
		}
		if !reflect.DeepEqual(exampleRes, res.PreviewSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PreviewSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUPreview_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get preview subscription of vendor sku sub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUPreviewClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestVendor",
		"TestSku",
		"previewSub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.PreviewSubscription{
			Name: to.Ptr("previewSub"),
			Type: to.Ptr("Microsoft.HybridNetwork/vendors/vendorskus/previewsubscriptions"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku/previewsubscriptions/previewSub"),
		}
		if !reflect.DeepEqual(exampleRes, res.PreviewSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PreviewSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorSKUPreview_Delete(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete preview subscription of vendor sku sub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorSKUPreviewClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestVendor",
		"TestSku",
		"previewSub",
		&armhybridnetwork.VendorSKUPreviewClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuPreviewDelete.json: %v", err)
	}
}

func TestNetworkFunctionVendors_List(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionVendorAndSkuListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List vendors and skus."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionVendorsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionVendorAndSkuListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.NetworkFunctionVendorListResult{
			Value: []*armhybridnetwork.NetworkFunctionVendor{
				{
					Properties: &armhybridnetwork.VendorDetails{
						SKUList: []*armhybridnetwork.SKUOverview{
							{
								SKUName: to.Ptr("testSku"),
								SKUType: to.Ptr(armhybridnetwork.SKUTypeSDWAN),
							}},
						VendorName: to.Ptr("testVendor"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkFunctionVendorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkFunctionVendorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionVendorAndSkuListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkFunctionVendorSKUs_ListByVendor(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionSkuListByVendor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List vendors and skus."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewNetworkFunctionVendorSKUsClient("subid", cred, &options)
	pager := client.ListByVendor("testVendor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionSkuListByVendor.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.NetworkFunctionSKUListResult{
			Value: []*armhybridnetwork.SKUOverview{
				{
					SKUName: to.Ptr("testSku"),
					SKUType: to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkFunctionSKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkFunctionSKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/NetworkFunctionSkuListByVendor.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorNetworkFunctions_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get vendor network function sub resource by service key of network function."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorNetworkFunctionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"eastus",
		"testVendor",
		"testServiceKey",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.VendorNetworkFunction{
			Name: to.Ptr("testServiceKey"),
			Type: to.Ptr("Microsoft.HybridNetwork/locations/vendors/networkFunctions"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/locations/eastus/vendors/testVendor/networkFunctions/testServiceKey"),
			Properties: &armhybridnetwork.VendorNetworkFunctionPropertiesFormat{
				NetworkFunctionVendorConfigurations: []*armhybridnetwork.NetworkFunctionVendorConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						OSProfile: &armhybridnetwork.OsProfile{
							AdminUsername: to.Ptr("dummyuser"),
							CustomData:    to.Ptr("base-64 encoded string of custom data"),
							LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
								SSH: &armhybridnetwork.SSHConfiguration{
									PublicKeys: []*armhybridnetwork.SSHPublicKey{
										{
											Path:    to.Ptr("home/user/.ssh/authorized_keys"),
											KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
										}},
								},
							},
						},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				SKUName:                 to.Ptr("testSku"),
				SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateProvisioning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VendorNetworkFunction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VendorNetworkFunction)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorNetworkFunctions_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update vendor network function sub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorNetworkFunctionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"eastus",
		"testVendor",
		"testServiceKey",
		armhybridnetwork.VendorNetworkFunction{
			Properties: &armhybridnetwork.VendorNetworkFunctionPropertiesFormat{
				NetworkFunctionVendorConfigurations: []*armhybridnetwork.NetworkFunctionVendorConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						OSProfile: &armhybridnetwork.OsProfile{
							AdminUsername: to.Ptr("dummyuser"),
							CustomData:    to.Ptr("base-64 encoded string of custom data"),
							LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
								SSH: &armhybridnetwork.SSHConfiguration{
									PublicKeys: []*armhybridnetwork.SSHPublicKey{
										{
											Path:    to.Ptr("home/user/.ssh/authorized_keys"),
											KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
										}},
								},
							},
						},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateProvisioning),
			},
		},
		&armhybridnetwork.VendorNetworkFunctionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.VendorNetworkFunction{
			Name: to.Ptr("testServiceKey"),
			Type: to.Ptr("Microsoft.HybridNetwork/locations/vendors/networkFunctions"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/locations/eastus/vendors/testVendor/networkFunctions/testServiceKey"),
			Properties: &armhybridnetwork.VendorNetworkFunctionPropertiesFormat{
				NetworkFunctionVendorConfigurations: []*armhybridnetwork.NetworkFunctionVendorConfiguration{
					{
						NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr(""),
								NetworkInterfaceName: to.Ptr("nic1"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
							},
							{
								IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
									{
										Gateway:            to.Ptr(""),
										IPAddress:          to.Ptr(""),
										IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
										IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
										Subnet:             to.Ptr(""),
									}},
								MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
								NetworkInterfaceName: to.Ptr("nic2"),
								VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
							}},
						OSProfile: &armhybridnetwork.OsProfile{
							AdminUsername: to.Ptr("dummyuser"),
							CustomData:    to.Ptr("base-64 encoded string of custom data"),
							LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
								SSH: &armhybridnetwork.SSHConfiguration{
									PublicKeys: []*armhybridnetwork.SSHPublicKey{
										{
											Path:    to.Ptr("home/user/.ssh/authorized_keys"),
											KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
										}},
								},
							},
						},
						RoleName:           to.Ptr("testRole"),
						UserDataParameters: map[string]interface{}{},
					}},
				ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
				SKUName:                 to.Ptr("testSku"),
				SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
				VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateProvisioning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VendorNetworkFunction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VendorNetworkFunction)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVendorNetworkFunctions_List(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfListByVendor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all nfs of vendor resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewVendorNetworkFunctionsClient("subid", cred, &options)
	pager := client.List("eastus",
		"testVendor",
		&armhybridnetwork.VendorNetworkFunctionsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfListByVendor.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.VendorNetworkFunctionListResult{
			Value: []*armhybridnetwork.VendorNetworkFunction{
				{
					Name: to.Ptr("TestServiceKey"),
					Type: to.Ptr("Microsoft.HybridNetwork/locations/vendors/networkFunctions"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/locations/eastus/vendors/testVendor/networkFunctions/testServiceKey"),
					Properties: &armhybridnetwork.VendorNetworkFunctionPropertiesFormat{
						NetworkFunctionVendorConfigurations: []*armhybridnetwork.NetworkFunctionVendorConfiguration{
							{
								NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
									{
										IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
											{
												Gateway:            to.Ptr(""),
												IPAddress:          to.Ptr(""),
												IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
												IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
												Subnet:             to.Ptr(""),
											}},
										MacAddress:           to.Ptr(""),
										NetworkInterfaceName: to.Ptr("nic1"),
										VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeManagement),
									},
									{
										IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
											{
												Gateway:            to.Ptr(""),
												IPAddress:          to.Ptr(""),
												IPAllocationMethod: to.Ptr(armhybridnetwork.IPAllocationMethodDynamic),
												IPVersion:          to.Ptr(armhybridnetwork.IPVersionIPv4),
												Subnet:             to.Ptr(""),
											}},
										MacAddress:           to.Ptr("DC-97-F8-79-16-7D"),
										NetworkInterfaceName: to.Ptr("nic2"),
										VMSwitchType:         to.Ptr(armhybridnetwork.VMSwitchTypeWan),
									}},
								OSProfile: &armhybridnetwork.OsProfile{
									AdminUsername: to.Ptr("dummyuser"),
									CustomData:    to.Ptr("base-64 encoded string of custom data"),
									LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
										SSH: &armhybridnetwork.SSHConfiguration{
											PublicKeys: []*armhybridnetwork.SSHPublicKey{
												{
													Path:    to.Ptr("home/user/.ssh/authorized_keys"),
													KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH"),
												}},
										},
									},
								},
								RoleName:           to.Ptr("testRole"),
								UserDataParameters: map[string]interface{}{},
							}},
						ProvisioningState:       to.Ptr(armhybridnetwork.ProvisioningStateSucceeded),
						SKUName:                 to.Ptr("testSku"),
						SKUType:                 to.Ptr(armhybridnetwork.SKUTypeSDWAN),
						VendorProvisioningState: to.Ptr(armhybridnetwork.VendorProvisioningStateProvisioning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VendorNetworkFunctionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VendorNetworkFunctionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorNfListByVendor.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoleInstances_Start(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a role instance of a vendor network function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewRoleInstancesClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"eastus",
		"testVendor",
		"testServiceKey",
		"mrm",
		&armhybridnetwork.RoleInstancesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceStart.json: %v", err)
	}
}

func TestRoleInstances_Stop(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a role instance of a vendor network function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewRoleInstancesClient("subid", cred, &options)
	poller, err := client.BeginStop(ctx,
		"eastus",
		"testVendor",
		"testServiceKey",
		"mrm",
		&armhybridnetwork.RoleInstancesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceStop.json: %v", err)
	}
}

func TestRoleInstances_Restart(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceRestart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart a role instance of a vendor network function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewRoleInstancesClient("subid", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"eastus",
		"testVendor",
		"testServiceKey",
		"mrm",
		&armhybridnetwork.RoleInstancesClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceRestart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceRestart.json: %v", err)
	}
}

func TestRoleInstances_Get(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the operational state of role instance of vendor network function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewRoleInstancesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"eastus",
		"testVendor",
		"testServiceKey",
		"mrm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridnetwork.RoleInstance{
			Name: to.Ptr("mrm"),
			Type: to.Ptr("Microsoft.HybridNetwork/locations/vendors/networkFunctions/roleInstances"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/locations/eastus/vendors/testVendor/networkFunctions/testServiceKey/roleInstances/mrm"),
			Properties: &armhybridnetwork.RoleInstanceProperties{
				OperationalState: to.Ptr(armhybridnetwork.OperationalStateRunning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoleInstances_List(t *testing.T) {
	// From example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceListByVendorNetworkFunction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all role instances of vendor network function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridnetwork.NewRoleInstancesClient("subid", cred, &options)
	pager := client.List("eastus",
		"testVendor",
		"testServiceKey",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceListByVendorNetworkFunction.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridnetwork.NetworkFunctionRoleInstanceListResult{
			Value: []*armhybridnetwork.RoleInstance{
				{
					Name: to.Ptr("mrm"),
					Type: to.Ptr("Microsoft.HybridNetwork/locations/vendors/networkFunctions/roleInstances"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/locations/eastus/vendors/testVendor/networkFunctions/testServiceKey/roleInstances/mrm"),
					Properties: &armhybridnetwork.RoleInstanceProperties{
						OperationalState: to.Ptr(armhybridnetwork.OperationalStateRunning),
					},
				},
				{
					Name: to.Ptr("msm"),
					Type: to.Ptr("Microsoft.HybridNetwork/locations/vendors/networkFunctions/roleInstances"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.HybridNetwork/locations/eastus/vendors/testVendor/networkFunctions/testServiceKey/roleInstances/msm"),
					Properties: &armhybridnetwork.RoleInstanceProperties{
						OperationalState: to.Ptr(armhybridnetwork.OperationalStateStopped),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkFunctionRoleInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkFunctionRoleInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/RoleInstanceListByVendorNetworkFunction.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
