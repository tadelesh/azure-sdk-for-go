//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example Accounts_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListBySubscription(&AccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example Accounts_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		&AccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_Create(t *testing.T) {
	// From example Accounts_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup",
		"Account1",
		Account{
			DefaultDto: DefaultDto{
				Location: to.StringPtr("West US 2"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("Red"),
					"tag2": to.StringPtr("White"),
				},
			},
			Identity: &Identity{
				Type: TypeSystemAssigned.ToPtr(),
			},
		},
		&AccountsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example Accounts_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		&AccountsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example Accounts_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Update(ctx,
		"SampleResourceGroup",
		"Account1",
		AccountUpdateParameters{
			Tags: map[string]*string{
				"tag1": to.StringPtr("Red"),
				"tag2": to.StringPtr("White"),
			},
		},
		&AccountsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example Accounts_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("SampleResourceGroup",
		&AccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestConsumerInvitations_ListInvitations(t *testing.T) {
	// From example ConsumerInvitations_ListInvitations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerInvitationsClient(con)
	pager := client.ListInvitations(&ConsumerInvitationsListInvitationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConsumerInvitation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConsumerInvitation.ID should not be nil!")
			}
		}
	}
}

func TestConsumerInvitations_Get(t *testing.T) {
	// From example ConsumerInvitations_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerInvitationsClient(con)
	res, err := client.Get(ctx,
		"East US 2",
		"dfbbc788-19eb-4607-a5a1-c74181bfff03",
		&ConsumerInvitationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConsumerInvitation.ID == nil {
		t.Fatal("ConsumerInvitation.ID should not be nil!")
	}
}

func TestConsumerInvitations_RejectInvitation(t *testing.T) {
	// From example ConsumerInvitations_RejectInvitation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerInvitationsClient(con)
	res, err := client.RejectInvitation(ctx,
		"East US 2",
		ConsumerInvitation{
			Properties: &ConsumerInvitationProperties{
				InvitationID: to.StringPtr("dfbbc788-19eb-4607-a5a1-c74181bfff03"),
			},
		},
		&ConsumerInvitationsRejectInvitationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConsumerInvitation.ID == nil {
		t.Fatal("ConsumerInvitation.ID should not be nil!")
	}
}

func TestDataSets_Get(t *testing.T) {
	// From example DataSets_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&DataSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}
}

func TestDataSets_Create(t *testing.T) {
	// From example DataSets_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		BlobDataSet{
			DataSet: DataSet{
				Kind: DataSetKindBlob.ToPtr(),
			},
			Properties: &BlobProperties{
				ContainerName:      to.StringPtr("C1"),
				FilePath:           to.StringPtr("file21"),
				ResourceGroup:      to.StringPtr("SampleResourceGroup"),
				StorageAccountName: to.StringPtr("storage2"),
				SubscriptionID:     to.StringPtr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
			},
		},
		&DataSetsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}

	// From example DataSets_KustoCluster_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		KustoClusterDataSet{
			DataSet: DataSet{
				Kind: DataSetKindKustoCluster.ToPtr(),
			},
			Properties: &KustoClusterDataSetProperties{
				KustoClusterResourceID: to.StringPtr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Kusto/clusters/Cluster1"),
			},
		},
		&DataSetsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}

	// From example DataSets_KustoDatabase_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		KustoDatabaseDataSet{
			DataSet: DataSet{
				Kind: DataSetKindKustoDatabase.ToPtr(),
			},
			Properties: &KustoDatabaseDataSetProperties{
				KustoDatabaseResourceID: to.StringPtr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Kusto/clusters/Cluster1/databases/Database1"),
			},
		},
		&DataSetsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}

	// From example DataSets_SqlDBTable_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		SQLDBTableDataSet{
			DataSet: DataSet{
				Kind: DataSetKindSQLDBTable.ToPtr(),
			},
			Properties: &SQLDBTableProperties{
				DatabaseName:        to.StringPtr("SqlDB1"),
				SchemaName:          to.StringPtr("dbo"),
				SQLServerResourceID: to.StringPtr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.StringPtr("Table1"),
			},
		},
		&DataSetsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}

	// From example DataSets_SqlDWTable_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		SQLDWTableDataSet{
			DataSet: DataSet{
				Kind: DataSetKindSQLDWTable.ToPtr(),
			},
			Properties: &SQLDWTableProperties{
				DataWarehouseName:   to.StringPtr("DataWarehouse1"),
				SchemaName:          to.StringPtr("dbo"),
				SQLServerResourceID: to.StringPtr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.StringPtr("Table1"),
			},
		},
		&DataSetsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}

	// From example DataSets_SynapseWorkspaceSqlPoolTable_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"sourceAccount",
		"share1",
		"dataset1",
		SynapseWorkspaceSQLPoolTableDataSet{
			DataSet: DataSet{
				Kind: DataSetKindSynapseWorkspaceSQLPoolTable.ToPtr(),
			},
			Properties: &SynapseWorkspaceSQLPoolTableDataSetProperties{
				SynapseWorkspaceSQLPoolTableResourceID: to.StringPtr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool/schemas/dbo/tables/table1"),
			},
		},
		&DataSetsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSet.ID == nil {
		t.Fatal("DataSet.ID should not be nil!")
	}
}

func TestDataSets_Delete(t *testing.T) {
	// From example DataSets_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&DataSetsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataSets_ListByShare(t *testing.T) {
	// From example DataSets_ListByShare
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&DataSetsListByShareOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataSet.ID should not be nil!")
			}
		}
	}
}

func TestDataSetMappings_Get(t *testing.T) {
	// From example DataSetMappings_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetMappingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		&DataSetMappingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSetMapping.ID == nil {
		t.Fatal("DataSetMapping.ID should not be nil!")
	}
}

func TestDataSetMappings_Create(t *testing.T) {
	// From example DataSetMappings_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetMappingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		BlobDataSetMapping{
			DataSetMapping: DataSetMapping{
				Kind: DataSetMappingKindBlob.ToPtr(),
			},
			Properties: &BlobMappingProperties{
				ContainerName:      to.StringPtr("C1"),
				DataSetID:          to.StringPtr("a08f184b-0567-4b11-ba22-a1199336d226"),
				FilePath:           to.StringPtr("file21"),
				ResourceGroup:      to.StringPtr("SampleResourceGroup"),
				StorageAccountName: to.StringPtr("storage2"),
				SubscriptionID:     to.StringPtr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
			},
		},
		&DataSetMappingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSetMapping.ID == nil {
		t.Fatal("DataSetMapping.ID should not be nil!")
	}

	// From example DataSetMappings_SqlDB_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		SQLDBTableDataSetMapping{
			DataSetMapping: DataSetMapping{
				Kind: DataSetMappingKindSQLDBTable.ToPtr(),
			},
			Properties: &SQLDBTableDataSetMappingProperties{
				DataSetID:           to.StringPtr("a08f184b-0567-4b11-ba22-a1199336d226"),
				DatabaseName:        to.StringPtr("Database1"),
				SchemaName:          to.StringPtr("dbo"),
				SQLServerResourceID: to.StringPtr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.StringPtr("Table1"),
			},
		},
		&DataSetMappingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSetMapping.ID == nil {
		t.Fatal("DataSetMapping.ID should not be nil!")
	}

	// From example DataSetMappings_SqlDWDataSetToAdlsGen2File_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		ADLSGen2FileDataSetMapping{
			DataSetMapping: DataSetMapping{
				Kind: DataSetMappingKindAdlsGen2File.ToPtr(),
			},
			Properties: &ADLSGen2FileDataSetMappingProperties{
				DataSetID:          to.StringPtr("a08f184b-0567-4b11-ba22-a1199336d226"),
				FilePath:           to.StringPtr("file21"),
				FileSystem:         to.StringPtr("fileSystem"),
				OutputType:         OutputTypeCSV.ToPtr(),
				ResourceGroup:      to.StringPtr("SampleResourceGroup"),
				StorageAccountName: to.StringPtr("storage2"),
				SubscriptionID:     to.StringPtr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
			},
		},
		&DataSetMappingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSetMapping.ID == nil {
		t.Fatal("DataSetMapping.ID should not be nil!")
	}

	// From example DataSetMappings_SqlDW_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		SQLDWTableDataSetMapping{
			DataSetMapping: DataSetMapping{
				Kind: DataSetMappingKindSQLDWTable.ToPtr(),
			},
			Properties: &SQLDWTableDataSetMappingProperties{
				DataSetID:           to.StringPtr("a08f184b-0567-4b11-ba22-a1199336d226"),
				DataWarehouseName:   to.StringPtr("DataWarehouse1"),
				SchemaName:          to.StringPtr("dbo"),
				SQLServerResourceID: to.StringPtr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.StringPtr("Table1"),
			},
		},
		&DataSetMappingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSetMapping.ID == nil {
		t.Fatal("DataSetMapping.ID should not be nil!")
	}

	// From example DataSetMappings_SynapseWorkspaceSqlPoolTable_Create
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"consumerAccount",
		"ShareSubscription1",
		"datasetMappingName1",
		SynapseWorkspaceSQLPoolTableDataSetMapping{
			DataSetMapping: DataSetMapping{
				Kind: DataSetMappingKindSynapseWorkspaceSQLPoolTable.ToPtr(),
			},
			Properties: &SynapseWorkspaceSQLPoolTableDataSetMappingProperties{
				DataSetID:                              to.StringPtr("3dc64e49-1fc3-4186-b3dc-d388c4d3076a"),
				SynapseWorkspaceSQLPoolTableResourceID: to.StringPtr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool/schemas/dbo/tables/table1"),
			},
		},
		&DataSetMappingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSetMapping.ID == nil {
		t.Fatal("DataSetMapping.ID should not be nil!")
	}
}

func TestDataSetMappings_Delete(t *testing.T) {
	// From example DataSetMappings_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetMappingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	_, err := client.Delete(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		&DataSetMappingsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataSetMappings_ListByShareSubscription(t *testing.T) {
	// From example DataSetMappings_ListByShareSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSetMappingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListByShareSubscription("SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&DataSetMappingsListByShareSubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataSetMapping.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataSetMapping.ID should not be nil!")
			}
		}
	}
}

func TestEmailRegistrations_ActivateEmail(t *testing.T) {
	// From example EmailRegistrations_ActivateEmail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailRegistrationsClient(con)
	_, err := client.ActivateEmail(ctx,
		"East US 2",
		EmailRegistration{
			ActivationCode: to.StringPtr("djsfhakj2lekowd3wepfklpwe9lpflcd"),
		},
		&EmailRegistrationsActivateEmailOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEmailRegistrations_RegisterEmail(t *testing.T) {
	// From example EmailRegistrations_RegisterEmail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailRegistrationsClient(con)
	_, err := client.RegisterEmail(ctx,
		"East US 2",
		&EmailRegistrationsRegisterEmailOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestInvitations_Get(t *testing.T) {
	// From example Invitations_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInvitationsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Invitation1",
		&InvitationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Invitation.ID == nil {
		t.Fatal("Invitation.ID should not be nil!")
	}
}

func TestInvitations_Create(t *testing.T) {
	// From example Invitations_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInvitationsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Invitation1",
		Invitation{
			Properties: &InvitationProperties{
				ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				TargetEmail:    to.StringPtr("receiver@microsoft.com"),
			},
		},
		&InvitationsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Invitation.ID == nil {
		t.Fatal("Invitation.ID should not be nil!")
	}
}

func TestInvitations_Delete(t *testing.T) {
	// From example Invitations_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInvitationsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	_, err := client.Delete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Invitation1",
		&InvitationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestInvitations_ListByShare(t *testing.T) {
	// From example Invitations_ListByShare
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInvitationsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&InvitationsListByShareOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Invitation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Invitation.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestShares_ListSynchronizationDetails(t *testing.T) {
	// From example Shares_ListSynchronizationDetails
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListSynchronizationDetails("SampleResourceGroup",
		"Account1",
		"Share1",
		ShareSynchronization{
			SynchronizationID: to.StringPtr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
		},
		&SharesListSynchronizationDetailsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestShares_ListSynchronizations(t *testing.T) {
	// From example Shares_ListSynchronizations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListSynchronizations("SampleResourceGroup",
		"Account1",
		"Share1",
		&SharesListSynchronizationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestShares_Get(t *testing.T) {
	// From example Shares_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		&SharesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Share.ID == nil {
		t.Fatal("Share.ID should not be nil!")
	}
}

func TestShares_Create(t *testing.T) {
	// From example Shares_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		Share{
			Properties: &ShareProperties{
				Description: to.StringPtr("share description"),
				ShareKind:   ShareKindCopyBased.ToPtr(),
				Terms:       to.StringPtr("Confidential"),
			},
		},
		&SharesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Share.ID == nil {
		t.Fatal("Share.ID should not be nil!")
	}
}

func TestShares_Delete(t *testing.T) {
	// From example Shares_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"12345678-1234-1234-12345678abc")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		&SharesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShares_ListByAccount(t *testing.T) {
	// From example Shares_ListByAccount
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"12345678-1234-1234-12345678abc")
	pager := client.ListByAccount("SampleResourceGroup",
		"Account1",
		&SharesListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Share.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Share.ID should not be nil!")
			}
		}
	}
}

func TestProviderShareSubscriptions_Adjust(t *testing.T) {
	// From example ProviderShareSubscriptions_Adjust
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Adjust(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		ProviderShareSubscription{
			Properties: &ProviderShareSubscriptionProperties{
				ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
			},
		},
		&ProviderShareSubscriptionsAdjustOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProviderShareSubscription.ID == nil {
		t.Fatal("ProviderShareSubscription.ID should not be nil!")
	}
}

func TestProviderShareSubscriptions_Reinstate(t *testing.T) {
	// From example ProviderShareSubscriptions_Reinstate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Reinstate(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		ProviderShareSubscription{
			Properties: &ProviderShareSubscriptionProperties{
				ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
			},
		},
		&ProviderShareSubscriptionsReinstateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProviderShareSubscription.ID == nil {
		t.Fatal("ProviderShareSubscription.ID should not be nil!")
	}
}

func TestProviderShareSubscriptions_Revoke(t *testing.T) {
	// From example ProviderShareSubscriptions_Revoke
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	poller, err := client.BeginRevoke(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		&ProviderShareSubscriptionsBeginRevokeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ProviderShareSubscription.ID == nil {
		t.Fatal("ProviderShareSubscription.ID should not be nil!")
	}
}

func TestProviderShareSubscriptions_GetByShare(t *testing.T) {
	// From example ProviderShareSubscriptions_GetByShare
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.GetByShare(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		&ProviderShareSubscriptionsGetByShareOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProviderShareSubscription.ID == nil {
		t.Fatal("ProviderShareSubscription.ID should not be nil!")
	}
}

func TestProviderShareSubscriptions_ListByShare(t *testing.T) {
	// From example ProviderShareSubscriptions_ListByShare
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&ProviderShareSubscriptionsListByShareOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProviderShareSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProviderShareSubscription.ID should not be nil!")
			}
		}
	}
}

func TestShareSubscriptions_CancelSynchronization(t *testing.T) {
	// From example ShareSubscriptions_CancelSynchronization
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	poller, err := client.BeginCancelSynchronization(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		ShareSubscriptionSynchronization{
			SynchronizationID: to.StringPtr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
		},
		&ShareSubscriptionsBeginCancelSynchronizationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShareSubscriptions_ListSourceShareSynchronizationSettings(t *testing.T) {
	// From example ShareSubscriptions_ListSourceShareSynchronizationSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListSourceShareSynchronizationSettings("SampleResourceGroup",
		"Account1",
		"ShareSub1",
		&ShareSubscriptionsListSourceShareSynchronizationSettingsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestShareSubscriptions_ListSynchronizationDetails(t *testing.T) {
	// From example ShareSubscriptions_ListSynchronizationDetails
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListSynchronizationDetails("SampleResourceGroup",
		"Account1",
		"ShareSub1",
		ShareSubscriptionSynchronization{
			SynchronizationID: to.StringPtr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
		},
		&ShareSubscriptionsListSynchronizationDetailsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestShareSubscriptions_ListSynchronizations(t *testing.T) {
	// From example ShareSubscriptions_ListSynchronizations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListSynchronizations("SampleResourceGroup",
		"Account1",
		"ShareSub1",
		&ShareSubscriptionsListSynchronizationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestShareSubscriptions_Synchronize(t *testing.T) {
	// From example ShareSubscriptions_Synchronize
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	poller, err := client.BeginSynchronize(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		Synchronize{
			SynchronizationMode: SynchronizationModeIncremental.ToPtr(),
		},
		&ShareSubscriptionsBeginSynchronizeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShareSubscriptions_Get(t *testing.T) {
	// From example ShareSubscriptions_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&ShareSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ShareSubscription.ID == nil {
		t.Fatal("ShareSubscription.ID should not be nil!")
	}
}

func TestShareSubscriptions_Create(t *testing.T) {
	// From example ShareSubscriptions_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		ShareSubscription{
			Properties: &ShareSubscriptionProperties{
				ExpirationDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationID:        to.StringPtr("12345678-1234-1234-12345678abd"),
				SourceShareLocation: to.StringPtr("eastus2"),
			},
		},
		&ShareSubscriptionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ShareSubscription.ID == nil {
		t.Fatal("ShareSubscription.ID should not be nil!")
	}
}

func TestShareSubscriptions_Delete(t *testing.T) {
	// From example ShareSubscriptions_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&ShareSubscriptionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShareSubscriptions_ListByAccount(t *testing.T) {
	// From example ShareSubscriptions_ListByAccount
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewShareSubscriptionsClient(con,
		"12345678-1234-1234-12345678abc")
	pager := client.ListByAccount("SampleResourceGroup",
		"Account1",
		&ShareSubscriptionsListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ShareSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ShareSubscription.ID should not be nil!")
			}
		}
	}
}

func TestConsumerSourceDataSets_ListByShareSubscription(t *testing.T) {
	// From example ConsumerSourceDataSets_ListByShareSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerSourceDataSetsClient(con,
		"12345678-1234-1234-12345678abc")
	pager := client.ListByShareSubscription("SampleResourceGroup",
		"Account1",
		"Share1",
		&ConsumerSourceDataSetsListByShareSubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConsumerSourceDataSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConsumerSourceDataSet.ID should not be nil!")
			}
		}
	}
}

func TestSynchronizationSettings_Get(t *testing.T) {
	// From example SynchronizationSettings_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSynchronizationSettingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"SynchronizationSetting1",
		&SynchronizationSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SynchronizationSetting.ID == nil {
		t.Fatal("SynchronizationSetting.ID should not be nil!")
	}
}

func TestSynchronizationSettings_Create(t *testing.T) {
	// From example SynchronizationSettings_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSynchronizationSettingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		ScheduledSynchronizationSetting{
			SynchronizationSetting: SynchronizationSetting{
				Kind: SynchronizationSettingKindScheduleBased.ToPtr(),
			},
			Properties: &ScheduledSynchronizationSettingProperties{
				RecurrenceInterval:  RecurrenceIntervalDay.ToPtr(),
				SynchronizationTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
			},
		},
		&SynchronizationSettingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SynchronizationSetting.ID == nil {
		t.Fatal("SynchronizationSetting.ID should not be nil!")
	}
}

func TestSynchronizationSettings_Delete(t *testing.T) {
	// From example SynchronizationSettings_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSynchronizationSettingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"SynchronizationSetting1",
		&SynchronizationSettingsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSynchronizationSettings_ListByShare(t *testing.T) {
	// From example SynchronizationSettings_ListByShare
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSynchronizationSettingsClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&SynchronizationSettingsListByShareOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SynchronizationSetting.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SynchronizationSetting.ID should not be nil!")
			}
		}
	}
}

func TestTriggers_Get(t *testing.T) {
	// From example Triggers_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"Trigger1",
		&TriggersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Trigger.ID == nil {
		t.Fatal("Trigger.ID should not be nil!")
	}
}

func TestTriggers_Create(t *testing.T) {
	// From example Triggers_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"Trigger1",
		ScheduledTrigger{
			Trigger: Trigger{
				Kind: TriggerKindScheduleBased.ToPtr(),
			},
			Properties: &ScheduledTriggerProperties{
				RecurrenceInterval:  RecurrenceIntervalDay.ToPtr(),
				SynchronizationMode: SynchronizationModeIncremental.ToPtr(),
				SynchronizationTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
			},
		},
		&TriggersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Trigger.ID == nil {
		t.Fatal("Trigger.ID should not be nil!")
	}
}

func TestTriggers_Delete(t *testing.T) {
	// From example Triggers_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"Trigger1",
		&TriggersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTriggers_ListByShareSubscription(t *testing.T) {
	// From example Triggers_ListByShareSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"433a8dfd-e5d5-4e77-ad86-90acdc75eb1a")
	pager := client.ListByShareSubscription("SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&TriggersListByShareSubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Trigger.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Trigger.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
