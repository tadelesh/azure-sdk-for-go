//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datashare/armdatashare"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(&armdatashare.AccountsClientListBySubscriptionOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.AccountList{
			Value: []*armdatashare.Account{
				{
					Name:     to.Ptr("Account1"),
					Type:     to.Ptr("Microsoft.DataShare/accounts"),
					ID:       to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1"),
					Location: to.Ptr("West US 2"),
					Tags: map[string]*string{
						"tag1": to.Ptr("Red"),
						"tag2": to.Ptr("White"),
					},
					Identity: &armdatashare.Identity{
						Type: to.Ptr(armdatashare.TypeSystemAssigned),
					},
					Properties: &armdatashare.AccountProperties{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
						UserEmail: to.Ptr("johnsmith@microsoft.com"),
						UserName:  to.Ptr("John Smith"),
					},
				},
				{
					Name:     to.Ptr("Account2"),
					Type:     to.Ptr("Microsoft.DataShare/accounts"),
					ID:       to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account2"),
					Location: to.Ptr("East US 2"),
					Identity: &armdatashare.Identity{
						Type: to.Ptr(armdatashare.TypeSystemAssigned),
					},
					Properties: &armdatashare.AccountProperties{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
						UserEmail: to.Ptr("johnsmith@microsoft.com"),
						UserName:  to.Ptr("John Smith"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewAccountsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Account{
			Name: to.Ptr("Account1"),
			Type: to.Ptr("Microsoft.DataShare/accounts"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1"),
			SystemData: &armdatashare.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdatashare.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdatashare.LastModifiedByTypeUser),
			},
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("Red"),
				"tag2": to.Ptr("White"),
			},
			Identity: &armdatashare.Identity{
				Type: to.Ptr(armdatashare.TypeSystemAssigned),
			},
			Properties: &armdatashare.AccountProperties{
				CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
				ProvisioningState: to.Ptr(armdatashare.ProvisioningStateSucceeded),
				UserEmail:         to.Ptr("johnsmith@microsoft.com"),
				UserName:          to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewAccountsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup",
		"Account1",
		armdatashare.Account{
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("Red"),
				"tag2": to.Ptr("White"),
			},
			Identity: &armdatashare.Identity{
				Type: to.Ptr(armdatashare.TypeSystemAssigned),
			},
		},
		&armdatashare.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Account{
			Name: to.Ptr("Account1"),
			Type: to.Ptr("Microsoft.DataShare/accounts"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1"),
			SystemData: &armdatashare.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdatashare.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdatashare.LastModifiedByTypeUser),
			},
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("Red"),
				"tag2": to.Ptr("White"),
			},
			Identity: &armdatashare.Identity{
				Type: to.Ptr(armdatashare.TypeSystemAssigned),
			},
			Properties: &armdatashare.AccountProperties{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
				UserEmail: to.Ptr("johnsmith@microsoft.com"),
				UserName:  to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewAccountsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		&armdatashare.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Delete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.OperationResponse{
			Status: to.Ptr(armdatashare.StatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewAccountsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Update(ctx,
		"SampleResourceGroup",
		"Account1",
		armdatashare.AccountUpdateParameters{
			Tags: map[string]*string{
				"tag1": to.Ptr("Red"),
				"tag2": to.Ptr("White"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Account{
			Name: to.Ptr("Account1"),
			Type: to.Ptr("Microsoft.DataShare/accounts"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1"),
			SystemData: &armdatashare.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdatashare.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdatashare.LastModifiedByTypeUser),
			},
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("Red"),
				"tag2": to.Ptr("White"),
			},
			Identity: &armdatashare.Identity{
				Type: to.Ptr(armdatashare.TypeSystemAssigned),
			},
			Properties: &armdatashare.AccountProperties{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
				UserEmail: to.Ptr("johnsmith@microsoft.com"),
				UserName:  to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("SampleResourceGroup",
		&armdatashare.AccountsClientListByResourceGroupOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.AccountList{
			Value: []*armdatashare.Account{
				{
					Name:     to.Ptr("Account1"),
					Type:     to.Ptr("Microsoft.DataShare/accounts"),
					ID:       to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1"),
					Location: to.Ptr("West US 2"),
					Tags: map[string]*string{
						"tag1": to.Ptr("Red"),
						"tag2": to.Ptr("White"),
					},
					Identity: &armdatashare.Identity{
						Type: to.Ptr(armdatashare.TypeSystemAssigned),
					},
					Properties: &armdatashare.AccountProperties{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
						UserEmail: to.Ptr("johnsmith@microsoft.com"),
						UserName:  to.Ptr("John Smith,"),
					},
				},
				{
					Name:     to.Ptr("Account2"),
					Type:     to.Ptr("Microsoft.DataShare/accounts"),
					ID:       to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account2"),
					Location: to.Ptr("East US 2"),
					Identity: &armdatashare.Identity{
						Type: to.Ptr(armdatashare.TypeSystemAssigned),
					},
					Properties: &armdatashare.AccountProperties{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
						UserEmail: to.Ptr("johnsmith@microsoft.com"),
						UserName:  to.Ptr("John Smith,"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Accounts_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConsumerInvitations_ListInvitations(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_ListInvitations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConsumerInvitations_ListInvitations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewConsumerInvitationsClient(cred, &options)
	pager := client.ListInvitations(&armdatashare.ConsumerInvitationsClientListInvitationsOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_ListInvitations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ConsumerInvitationList{
			Value: []*armdatashare.ConsumerInvitation{
				{
					Name: to.Ptr("invitation1"),
					Type: to.Ptr("Microsoft.DataShare/locations/consumerInvitations"),
					ID:   to.Ptr("providers/Microsoft.DataShare/locations/eastus2/consumerInvitations/4256e2cf-0f82-4865-961b-12f83333f487"),
					Properties: &armdatashare.ConsumerInvitationProperties{
						Description:        to.Ptr("Some share"),
						DataSetCount:       to.Ptr[int32](1),
						ExpirationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
						InvitationID:       to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
						InvitationStatus:   to.Ptr(armdatashare.InvitationStatusAccepted),
						Location:           to.Ptr("eastus2"),
						ProviderEmail:      to.Ptr("john.smith@microsoft.com"),
						ProviderName:       to.Ptr("John Smith"),
						ProviderTenantName: to.Ptr("microsoft"),
						RespondedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-15T02:01:51.8953054Z"); return t }()),
						SentAt:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-15T01:45:25.6226946Z"); return t }()),
						ShareName:          to.Ptr("share1"),
						TermsOfUse:         to.Ptr("Confidential"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConsumerInvitationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConsumerInvitationList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_ListInvitations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConsumerInvitations_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConsumerInvitations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewConsumerInvitationsClient(cred, &options)
	res, err := client.Get(ctx,
		"East US 2",
		"dfbbc788-19eb-4607-a5a1-c74181bfff03",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ConsumerInvitation{
			Name: to.Ptr("invitation1"),
			Type: to.Ptr("Microsoft.DataShare/locations/consumerInvitations"),
			ID:   to.Ptr("providers/Microsoft.DataShare/locations/eastus2/consumerInvitations/4256e2cf-0f82-4865-961b-12f83333f487"),
			Properties: &armdatashare.ConsumerInvitationProperties{
				Description:        to.Ptr("Some share"),
				DataSetCount:       to.Ptr[int32](1),
				ExpirationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationID:       to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
				InvitationStatus:   to.Ptr(armdatashare.InvitationStatusAccepted),
				Location:           to.Ptr("eastus2"),
				ProviderEmail:      to.Ptr("john.smith@microsoft.com"),
				ProviderName:       to.Ptr("John Smith"),
				ProviderTenantName: to.Ptr("Microsoft"),
				RespondedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-15T02:01:51.8953054Z"); return t }()),
				SentAt:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-15T01:45:25.6226946Z"); return t }()),
				ShareName:          to.Ptr("share1"),
				TermsOfUse:         to.Ptr("Confidential"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConsumerInvitation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConsumerInvitation)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConsumerInvitations_RejectInvitation(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_RejectInvitation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConsumerInvitations_RejectInvitation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewConsumerInvitationsClient(cred, &options)
	res, err := client.RejectInvitation(ctx,
		"East US 2",
		armdatashare.ConsumerInvitation{
			Properties: &armdatashare.ConsumerInvitationProperties{
				InvitationID: to.Ptr("dfbbc788-19eb-4607-a5a1-c74181bfff03"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_RejectInvitation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ConsumerInvitation{
			Name: to.Ptr("invitation1"),
			Type: to.Ptr("Microsoft.DataShare/locations/consumerInvitations"),
			ID:   to.Ptr("providers/Microsoft.DataShare/locations/eastus2/consumerInvitations/4256e2cf-0f82-4865-961b-12f83333f487"),
			Properties: &armdatashare.ConsumerInvitationProperties{
				Description:        to.Ptr("Some share"),
				DataSetCount:       to.Ptr[int32](1),
				ExpirationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationID:       to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
				InvitationStatus:   to.Ptr(armdatashare.InvitationStatusRejected),
				Location:           to.Ptr("eastus2"),
				ProviderEmail:      to.Ptr("john.smith@microsoft.com"),
				ProviderName:       to.Ptr("John Smith"),
				ProviderTenantName: to.Ptr("microsoft"),
				RespondedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-15T02:01:51.8953054Z"); return t }()),
				SentAt:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-15T01:45:25.6226946Z"); return t }()),
				ShareName:          to.Ptr("share1"),
				TermsOfUse:         to.Ptr("Confidential"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConsumerInvitation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConsumerInvitation)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerInvitations_RejectInvitation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSets_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientGetResponse{
			&armdatashare.BlobDataSet{
				Name: to.Ptr("Dataset1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindBlob),
				Properties: &armdatashare.BlobProperties{
					ContainerName:      to.Ptr("C1"),
					FilePath:           to.Ptr("file21"),
					ResourceGroup:      to.Ptr("SampleResourceGroup"),
					StorageAccountName: to.Ptr("storage2"),
					SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSets_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.BlobDataSet{
			Kind: to.Ptr(armdatashare.DataSetKindBlob),
			Properties: &armdatashare.BlobProperties{
				ContainerName:      to.Ptr("C1"),
				FilePath:           to.Ptr("file21"),
				ResourceGroup:      to.Ptr("SampleResourceGroup"),
				StorageAccountName: to.Ptr("storage2"),
				SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientCreateResponse{
			&armdatashare.BlobDataSet{
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindBlob),
				Properties: &armdatashare.BlobProperties{
					ContainerName:      to.Ptr("C1"),
					DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					FilePath:           to.Ptr("inputpath"),
					ResourceGroup:      to.Ptr("SampleResourceGroup"),
					StorageAccountName: to.Ptr("adspipelinemetadatatable"),
					SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_KustoCluster_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_KustoCluster_Create"},
	})
	client = armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.KustoClusterDataSet{
			Kind: to.Ptr(armdatashare.DataSetKindKustoCluster),
			Properties: &armdatashare.KustoClusterDataSetProperties{
				KustoClusterResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Kusto/clusters/Cluster1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_KustoCluster_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientCreateResponse{
			&armdatashare.KustoClusterDataSet{
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindKustoCluster),
				Properties: &armdatashare.KustoClusterDataSetProperties{
					DataSetID:              to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					KustoClusterResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Kusto/clusters/Cluster1"),
					Location:               to.Ptr("West US 2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_KustoCluster_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_KustoDatabase_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_KustoDatabase_Create"},
	})
	client = armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.KustoDatabaseDataSet{
			Kind: to.Ptr(armdatashare.DataSetKindKustoDatabase),
			Properties: &armdatashare.KustoDatabaseDataSetProperties{
				KustoDatabaseResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Kusto/clusters/Cluster1/databases/Database1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_KustoDatabase_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientCreateResponse{
			&armdatashare.KustoDatabaseDataSet{
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindKustoDatabase),
				Properties: &armdatashare.KustoDatabaseDataSetProperties{
					DataSetID:               to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					KustoDatabaseResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Kusto/clusters/Cluster1/databases/Database1"),
					Location:                to.Ptr("West US 2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_KustoDatabase_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SqlDBTable_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_SqlDBTable_Create"},
	})
	client = armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.SQLDBTableDataSet{
			Kind: to.Ptr(armdatashare.DataSetKindSQLDBTable),
			Properties: &armdatashare.SQLDBTableProperties{
				DatabaseName:        to.Ptr("SqlDB1"),
				SchemaName:          to.Ptr("dbo"),
				SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.Ptr("Table1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SqlDBTable_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientCreateResponse{
			&armdatashare.SQLDBTableDataSet{
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindSQLDBTable),
				Properties: &armdatashare.SQLDBTableProperties{
					DataSetID:           to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					DatabaseName:        to.Ptr("SqlDB1"),
					SchemaName:          to.Ptr("dbo"),
					SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
					TableName:           to.Ptr("Table1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SqlDBTable_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SqlDWTable_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_SqlDWTable_Create"},
	})
	client = armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.SQLDWTableDataSet{
			Kind: to.Ptr(armdatashare.DataSetKindSQLDWTable),
			Properties: &armdatashare.SQLDWTableProperties{
				DataWarehouseName:   to.Ptr("DataWarehouse1"),
				SchemaName:          to.Ptr("dbo"),
				SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.Ptr("Table1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SqlDWTable_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientCreateResponse{
			&armdatashare.SQLDWTableDataSet{
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindSQLDWTable),
				Properties: &armdatashare.SQLDWTableProperties{
					DataSetID:           to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					DataWarehouseName:   to.Ptr("DataWarehouse1"),
					SchemaName:          to.Ptr("dbo"),
					SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
					TableName:           to.Ptr("Table1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SqlDWTable_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SynapseWorkspaceSqlPoolTable_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_SynapseWorkspaceSqlPoolTable_Create"},
	})
	client = armdatashare.NewDataSetsClient("0f3dcfc3-18f8-4099-b381-8353e19d43a7", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"sourceAccount",
		"share1",
		"dataset1",
		&armdatashare.SynapseWorkspaceSQLPoolTableDataSet{
			Kind: to.Ptr(armdatashare.DataSetKindSynapseWorkspaceSQLPoolTable),
			Properties: &armdatashare.SynapseWorkspaceSQLPoolTableDataSetProperties{
				SynapseWorkspaceSQLPoolTableResourceID: to.Ptr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool/schemas/dbo/tables/table1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SynapseWorkspaceSqlPoolTable_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetsClientCreateResponse{
			&armdatashare.SynapseWorkspaceSQLPoolTableDataSet{
				Name: to.Ptr("dataset1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
				ID:   to.Ptr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/sourceAccount/shares/share1/dataSets/dataset1"),
				Kind: to.Ptr(armdatashare.DataSetKindSynapseWorkspaceSQLPoolTable),
				Properties: &armdatashare.SynapseWorkspaceSQLPoolTableDataSetProperties{
					SynapseWorkspaceSQLPoolTableResourceID: to.Ptr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool/schemas/dbo/tables/table1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_SynapseWorkspaceSqlPoolTable_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSets_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.DataSetsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_Delete.json: %v", err)
	}
}

func TestDataSets_ListByShare(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_ListByShare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSets_ListByShare"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.DataSetsClientListByShareOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_ListByShare.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.DataSetList{
			Value: []armdatashare.DataSetClassification{
				&armdatashare.BlobDataSet{
					Name: to.Ptr("Dataset1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset1"),
					Kind: to.Ptr(armdatashare.DataSetKindBlob),
					Properties: &armdatashare.BlobProperties{
						ContainerName:      to.Ptr("C1"),
						FilePath:           to.Ptr("file22"),
						ResourceGroup:      to.Ptr("SampleResourceGroup"),
						StorageAccountName: to.Ptr("storage1"),
						SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
					},
				},
				&armdatashare.BlobDataSet{
					Name: to.Ptr("Dataset1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shares/dataSets"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/datasets/Dataset2"),
					Kind: to.Ptr(armdatashare.DataSetKindBlob),
					Properties: &armdatashare.BlobProperties{
						ContainerName:      to.Ptr("C1"),
						FilePath:           to.Ptr("file21"),
						ResourceGroup:      to.Ptr("SampleResourceGroup"),
						StorageAccountName: to.Ptr("storage2"),
						SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataSetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataSetList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSets_ListByShare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSetMappings_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetMappingsClientGetResponse{
			&armdatashare.BlobDataSetMapping{
				Name: to.Ptr("DatasetMapping1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
				Kind: to.Ptr(armdatashare.DataSetMappingKindBlob),
				Properties: &armdatashare.BlobMappingProperties{
					ContainerName:      to.Ptr("C1"),
					DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					FilePath:           to.Ptr("file21"),
					ResourceGroup:      to.Ptr("SampleResourceGroup"),
					StorageAccountName: to.Ptr("storage2"),
					SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSetMappings_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		&armdatashare.BlobDataSetMapping{
			Kind: to.Ptr(armdatashare.DataSetMappingKindBlob),
			Properties: &armdatashare.BlobMappingProperties{
				ContainerName:      to.Ptr("C1"),
				DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
				FilePath:           to.Ptr("file21"),
				ResourceGroup:      to.Ptr("SampleResourceGroup"),
				StorageAccountName: to.Ptr("storage2"),
				SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetMappingsClientCreateResponse{
			&armdatashare.BlobDataSetMapping{
				Name: to.Ptr("DatasetMapping1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
				Kind: to.Ptr(armdatashare.DataSetMappingKindBlob),
				Properties: &armdatashare.BlobMappingProperties{
					ContainerName:      to.Ptr("C1"),
					DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					FilePath:           to.Ptr("file21"),
					ResourceGroup:      to.Ptr("SampleResourceGroup"),
					StorageAccountName: to.Ptr("storage2"),
					SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDB_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_SqlDB_Create"},
	})
	client = armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		&armdatashare.SQLDBTableDataSetMapping{
			Kind: to.Ptr(armdatashare.DataSetMappingKindSQLDBTable),
			Properties: &armdatashare.SQLDBTableDataSetMappingProperties{
				DataSetID:           to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
				DatabaseName:        to.Ptr("Database1"),
				SchemaName:          to.Ptr("dbo"),
				SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.Ptr("Table1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDB_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetMappingsClientCreateResponse{
			&armdatashare.SQLDBTableDataSetMapping{
				Name: to.Ptr("DatasetMapping1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
				Kind: to.Ptr(armdatashare.DataSetMappingKindSQLDBTable),
				Properties: &armdatashare.SQLDBTableDataSetMappingProperties{
					DataSetID:           to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					DatabaseName:        to.Ptr("Database1"),
					SchemaName:          to.Ptr("dbo"),
					SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
					TableName:           to.Ptr("Table1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDB_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDWDataSetToAdlsGen2File_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_SqlDWDataSetToAdlsGen2File_Create"},
	})
	client = armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		&armdatashare.ADLSGen2FileDataSetMapping{
			Kind: to.Ptr(armdatashare.DataSetMappingKindAdlsGen2File),
			Properties: &armdatashare.ADLSGen2FileDataSetMappingProperties{
				DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
				FilePath:           to.Ptr("file21"),
				FileSystem:         to.Ptr("fileSystem"),
				OutputType:         to.Ptr(armdatashare.OutputTypeCSV),
				ResourceGroup:      to.Ptr("SampleResourceGroup"),
				StorageAccountName: to.Ptr("storage2"),
				SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDWDataSetToAdlsGen2File_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetMappingsClientCreateResponse{
			&armdatashare.ADLSGen2FileDataSetMapping{
				Name: to.Ptr("DatasetMapping1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
				Kind: to.Ptr(armdatashare.DataSetMappingKindAdlsGen2File),
				Properties: &armdatashare.ADLSGen2FileDataSetMappingProperties{
					DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					FilePath:           to.Ptr("file21"),
					FileSystem:         to.Ptr("fileSystem"),
					OutputType:         to.Ptr(armdatashare.OutputTypeCSV),
					ResourceGroup:      to.Ptr("SampleResourceGroup"),
					StorageAccountName: to.Ptr("storage2"),
					SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDWDataSetToAdlsGen2File_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDW_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_SqlDW_Create"},
	})
	client = armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		&armdatashare.SQLDWTableDataSetMapping{
			Kind: to.Ptr(armdatashare.DataSetMappingKindSQLDWTable),
			Properties: &armdatashare.SQLDWTableDataSetMappingProperties{
				DataSetID:           to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
				DataWarehouseName:   to.Ptr("DataWarehouse1"),
				SchemaName:          to.Ptr("dbo"),
				SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
				TableName:           to.Ptr("Table1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDW_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetMappingsClientCreateResponse{
			&armdatashare.SQLDWTableDataSetMapping{
				Name: to.Ptr("DatasetMapping1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
				Kind: to.Ptr(armdatashare.DataSetMappingKindSQLDWTable),
				Properties: &armdatashare.SQLDWTableDataSetMappingProperties{
					DataSetID:           to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
					DataWarehouseName:   to.Ptr("DataWarehouse1"),
					SchemaName:          to.Ptr("dbo"),
					SQLServerResourceID: to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.Sql/servers/Server1"),
					TableName:           to.Ptr("Table1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SqlDW_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SynapseWorkspaceSqlPoolTable_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_SynapseWorkspaceSqlPoolTable_Create"},
	})
	client = armdatashare.NewDataSetMappingsClient("0f3dcfc3-18f8-4099-b381-8353e19d43a7", cred, &options)
	res, err = client.Create(ctx,
		"SampleResourceGroup",
		"consumerAccount",
		"ShareSubscription1",
		"datasetMappingName1",
		&armdatashare.SynapseWorkspaceSQLPoolTableDataSetMapping{
			Kind: to.Ptr(armdatashare.DataSetMappingKindSynapseWorkspaceSQLPoolTable),
			Properties: &armdatashare.SynapseWorkspaceSQLPoolTableDataSetMappingProperties{
				DataSetID:                              to.Ptr("3dc64e49-1fc3-4186-b3dc-d388c4d3076a"),
				SynapseWorkspaceSQLPoolTableResourceID: to.Ptr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool/schemas/dbo/tables/table1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SynapseWorkspaceSqlPoolTable_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.DataSetMappingsClientCreateResponse{
			&armdatashare.SynapseWorkspaceSQLPoolTableDataSetMapping{
				Name: to.Ptr("datasetMappingName"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
				ID:   to.Ptr("/subscriptions/4e745bb7-c420-479b-b0d6-a0f92d48a227/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/consumerAccount/shareSubscriptions/ShareSubscription1/dataSetMappings/datasetMappingName1"),
				Kind: to.Ptr(armdatashare.DataSetMappingKindSynapseWorkspaceSQLPoolTable),
				Properties: &armdatashare.SynapseWorkspaceSQLPoolTableDataSetMappingProperties{
					DataSetID:                              to.Ptr("3dc64e49-1fc3-4186-b3dc-d388c4d3076a"),
					DataSetMappingStatus:                   to.Ptr(armdatashare.DataSetMappingStatusOk),
					ProvisioningState:                      to.Ptr(armdatashare.ProvisioningStateSucceeded),
					SynapseWorkspaceSQLPoolTableResourceID: to.Ptr("/subscriptions/0f3dcfc3-18f8-4099-b381-8353e19d43a7/resourceGroups/SampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool/schemas/dbo/tables/table1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_SynapseWorkspaceSqlPoolTable_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSetMappings_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	_, err := client.Delete(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"DatasetMapping1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_Delete.json: %v", err)
	}
}

func TestDataSetMappings_ListByShareSubscription(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_ListByShareSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSetMappings_ListByShareSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewDataSetMappingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListByShareSubscription("SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&armdatashare.DataSetMappingsClientListByShareSubscriptionOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_ListByShareSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.DataSetMappingList{
			Value: []armdatashare.DataSetMappingClassification{
				&armdatashare.BlobDataSetMapping{
					Name: to.Ptr("DatasetMapping1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
					Kind: to.Ptr(armdatashare.DataSetMappingKindBlob),
					Properties: &armdatashare.BlobMappingProperties{
						ContainerName:      to.Ptr("C1"),
						DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d226"),
						FilePath:           to.Ptr("file21"),
						ResourceGroup:      to.Ptr("SampleResourceGroup"),
						StorageAccountName: to.Ptr("storage2"),
						SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
					},
				},
				&armdatashare.BlobDataSetMapping{
					Name: to.Ptr("DatasetMapping1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/dataSetMappings"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/dataSetMappings/DatasetMapping1"),
					Kind: to.Ptr(armdatashare.DataSetMappingKindBlob),
					Properties: &armdatashare.BlobMappingProperties{
						ContainerName:      to.Ptr("C1"),
						DataSetID:          to.Ptr("a08f184b-0567-4b11-ba22-a1199336d227"),
						FilePath:           to.Ptr("file21"),
						ResourceGroup:      to.Ptr("SampleResourceGroup"),
						StorageAccountName: to.Ptr("storage2"),
						SubscriptionID:     to.Ptr("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataSetMappingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataSetMappingList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/DataSetMappings_ListByShareSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailRegistrations_ActivateEmail(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/EmailRegistrations_ActivateEmail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EmailRegistrations_ActivateEmail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewEmailRegistrationsClient(cred, &options)
	res, err := client.ActivateEmail(ctx,
		"East US 2",
		armdatashare.EmailRegistration{
			ActivationCode: to.Ptr("djsfhakj2lekowd3wepfklpwe9lpflcd"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/EmailRegistrations_ActivateEmail.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.EmailRegistration{
			ActivationExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-08-12T16:44:53.688049Z"); return t }()),
			Email:                    to.Ptr("receiver@microsoft.com"),
			RegistrationStatus:       to.Ptr(armdatashare.RegistrationStatusActivated),
			TenantID:                 to.Ptr("9f532315-b048-4374-8de1-14734d9b7f77"),
		}
		if !reflect.DeepEqual(exampleRes, res.EmailRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmailRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/EmailRegistrations_ActivateEmail.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailRegistrations_RegisterEmail(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/EmailRegistrations_RegisterEmail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EmailRegistrations_RegisterEmail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewEmailRegistrationsClient(cred, &options)
	res, err := client.RegisterEmail(ctx,
		"East US 2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/EmailRegistrations_RegisterEmail.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.EmailRegistration{
			ActivationExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-08-12T16:44:53.688049Z"); return t }()),
			Email:                    to.Ptr("receiver@microsoft.com"),
			RegistrationStatus:       to.Ptr(armdatashare.RegistrationStatusActivationPending),
			TenantID:                 to.Ptr("9f532315-b048-4374-8de1-14734d9b7f77"),
		}
		if !reflect.DeepEqual(exampleRes, res.EmailRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmailRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/EmailRegistrations_RegisterEmail.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvitations_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Invitations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewInvitationsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Invitation1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Invitation{
			Name: to.Ptr("Invitation1"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares/invitations"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/invitations/Invitation1"),
			Properties: &armdatashare.InvitationProperties{
				ExpirationDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationStatus: to.Ptr(armdatashare.InvitationStatusPending),
				SentAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-26T22:33:24.5785265Z"); return t }()),
				TargetEmail:      to.Ptr("receiver@microsoft.com"),
				UserEmail:        to.Ptr("johnsmith@microsoft.com"),
				UserName:         to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Invitation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Invitation)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvitations_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Invitations_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewInvitationsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Invitation1",
		armdatashare.Invitation{
			Properties: &armdatashare.InvitationProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				TargetEmail:    to.Ptr("receiver@microsoft.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Invitation{
			Name: to.Ptr("Invitation1"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares/invitations"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/invitations/Invitation1"),
			Properties: &armdatashare.InvitationProperties{
				ExpirationDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationStatus: to.Ptr(armdatashare.InvitationStatusPending),
				SentAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-26T22:33:24.5785265Z"); return t }()),
				TargetEmail:      to.Ptr("receiver@microsoft.com"),
				UserEmail:        to.Ptr("johnsmith@microsoft.com"),
				UserName:         to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Invitation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Invitation)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInvitations_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Invitations_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewInvitationsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	_, err := client.Delete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Invitation1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_Delete.json: %v", err)
	}
}

func TestInvitations_ListByShare(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_ListByShare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Invitations_ListByShare"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewInvitationsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.InvitationsClientListByShareOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_ListByShare.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.InvitationList{
			Value: []*armdatashare.Invitation{
				{
					Name: to.Ptr("ancd"),
					Type: to.Ptr("Microsoft.DataShare/Invitation"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/testrg/providers/Microsoft.DataShare/accounts/account1/shares/share1/invitations/ancd"),
					Properties: &armdatashare.InvitationProperties{
						ExpirationDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
						InvitationStatus: to.Ptr(armdatashare.InvitationStatusAccepted),
						SentAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-26T22:33:24.5785265Z"); return t }()),
						TargetEmail:      to.Ptr("johnsmith@microsoft.com"),
						UserEmail:        to.Ptr("johnsmith@microsoft.com"),
						UserName:         to.Ptr("John Smith"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InvitationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InvitationList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Invitations_ListByShare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.OperationList{
			Value: []*armdatashare.OperationModel{
				{
					Name: to.Ptr("Microsoft.DataShare/operations/read"),
					Display: &armdatashare.OperationModelProperties{
						Description: to.Ptr("Reads all available operations in Data Share Resource Provider."),
						Operation:   to.Ptr("Read all operations"),
						Provider:    to.Ptr("Microsoft Data Share"),
						Resource:    to.Ptr("Data Share Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataShare/register/action"),
					Display: &armdatashare.OperationModelProperties{
						Description: to.Ptr("Register the subscription for the Data Share Resource Provider."),
						Operation:   to.Ptr("Register Data Share Resource Provider"),
						Provider:    to.Ptr("Microsoft Data Share"),
						Resource:    to.Ptr("Data Share Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataShare/unregister/action"),
					Display: &armdatashare.OperationModelProperties{
						Description: to.Ptr("Unregister the subscription for the Data Share Resource Provider."),
						Operation:   to.Ptr("Unregister Data Share Resource Provider"),
						Provider:    to.Ptr("Microsoft Data Share"),
						Resource:    to.Ptr("Data Share Resource Provider"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_ListSynchronizationDetails(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListSynchronizationDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Shares_ListSynchronizationDetails"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSharesClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListSynchronizationDetails("SampleResourceGroup",
		"Account1",
		"Share1",
		armdatashare.ShareSynchronization{
			SynchronizationID: to.Ptr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
		},
		&armdatashare.SharesClientListSynchronizationDetailsOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListSynchronizationDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.SynchronizationDetailsList{
			Value: []*armdatashare.SynchronizationDetails{
				{
					Name:        to.Ptr("dataset1"),
					DataSetID:   to.Ptr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
					DataSetType: to.Ptr(armdatashare.DataSetTypeBlob),
					DurationMs:  to.Ptr[int32](2000),
					EndTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					Status:      to.Ptr("Completed"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SynchronizationDetailsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SynchronizationDetailsList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListSynchronizationDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_ListSynchronizations(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListSynchronizations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Shares_ListSynchronizations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSharesClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListSynchronizations("SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.SharesClientListSynchronizationsOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListSynchronizations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ShareSynchronizationList{
			Value: []*armdatashare.ShareSynchronization{
				{
					ConsumerName:        to.Ptr("abc@yahoo.com"),
					ConsumerTenantName:  to.Ptr("nda"),
					DurationMs:          to.Ptr[int32](2000),
					EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					Message:             to.Ptr("nda"),
					StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					Status:              to.Ptr("Completed"),
					SynchronizationID:   to.Ptr("runId"),
					SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ShareSynchronizationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ShareSynchronizationList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListSynchronizations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Shares_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSharesClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Share{
			Name: to.Ptr("Share1"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1"),
			Properties: &armdatashare.ShareProperties{
				Description: to.Ptr("share description"),
				CreatedAt:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T06:15:15.6818898Z"); return t }()),
				ShareKind:   to.Ptr(armdatashare.ShareKindCopyBased),
				Terms:       to.Ptr("Confidential"),
				UserEmail:   to.Ptr("johnsmith@microsoft.com"),
				UserName:    to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Share) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Share)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Shares_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSharesClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		armdatashare.Share{
			Properties: &armdatashare.ShareProperties{
				Description: to.Ptr("share description"),
				ShareKind:   to.Ptr(armdatashare.ShareKindCopyBased),
				Terms:       to.Ptr("Confidential"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.Share{
			Name: to.Ptr("Share1"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1"),
			Properties: &armdatashare.ShareProperties{
				Description: to.Ptr("share description"),
				CreatedAt:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T06:15:15.6818898Z"); return t }()),
				ShareKind:   to.Ptr(armdatashare.ShareKindCopyBased),
				Terms:       to.Ptr("Confidential"),
				UserEmail:   to.Ptr("johnsmith@microsoft.com"),
				UserName:    to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Share) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Share)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Shares_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSharesClient("12345678-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.SharesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Delete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.OperationResponse{
			Status: to.Ptr(armdatashare.StatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_ListByAccount(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Shares_ListByAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSharesClient("12345678-1234-1234-12345678abc", cred, &options)
	pager := client.ListByAccount("SampleResourceGroup",
		"Account1",
		&armdatashare.SharesClientListByAccountOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ShareList{
			Value: []*armdatashare.Share{
				{
					Name: to.Ptr("Share1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shares"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1"),
					Properties: &armdatashare.ShareProperties{
						Description: to.Ptr("share description"),
						CreatedAt:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T06:15:15.6818898Z"); return t }()),
						ShareKind:   to.Ptr(armdatashare.ShareKindCopyBased),
						Terms:       to.Ptr("Confidential"),
						UserEmail:   to.Ptr("johnsmith@microsoft.com"),
						UserName:    to.Ptr("John Smith"),
					},
				},
				{
					Name: to.Ptr("Share1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shares"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1"),
					Properties: &armdatashare.ShareProperties{
						Description: to.Ptr("share description"),
						CreatedAt:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T06:15:15.6818898Z"); return t }()),
						ShareKind:   to.Ptr(armdatashare.ShareKindCopyBased),
						Terms:       to.Ptr("Confidential"),
						UserEmail:   to.Ptr("johnsmith@microsoft.com"),
						UserName:    to.Ptr("John Smith"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ShareList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ShareList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Shares_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderShareSubscriptions_Adjust(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Adjust.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderShareSubscriptions_Adjust"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewProviderShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Adjust(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		armdatashare.ProviderShareSubscription{
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Adjust.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ProviderShareSubscription{
			Name: to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares/providerShareSubscriptions"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/providerShareSubscripitons/4256e2cf-0f82-4865-961b-12f83333f487"),
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ConsumerEmail:             to.Ptr("john.smith@microsoft.com"),
				ConsumerName:              to.Ptr("John Smith"),
				ConsumerTenantName:        to.Ptr("Microsoft"),
				CreatedAt:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-18T08:45:40.9005877Z"); return t }()),
				ExpirationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
				ProviderEmail:             to.Ptr("john.smith@microsoft.com"),
				ProviderName:              to.Ptr("John Smith"),
				ShareSubscriptionObjectID: to.Ptr("1ce51340-19be-4ef2-9450-0ea0b1324cbb"),
				ShareSubscriptionStatus:   to.Ptr(armdatashare.ShareSubscriptionStatusActive),
				SharedAt:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T08:45:40.9005877Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderShareSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderShareSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Adjust.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderShareSubscriptions_Reinstate(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Reinstate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderShareSubscriptions_Reinstate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewProviderShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Reinstate(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		armdatashare.ProviderShareSubscription{
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Reinstate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ProviderShareSubscription{
			Name: to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares/providerShareSubscriptions"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/providerShareSubscripitons/4256e2cf-0f82-4865-961b-12f83333f487"),
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ConsumerEmail:             to.Ptr("john.smith@microsoft.com"),
				ConsumerName:              to.Ptr("John Smith"),
				ConsumerTenantName:        to.Ptr("Microsoft"),
				CreatedAt:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:52:42.6224087Z"); return t }()),
				ExpirationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				ProviderEmail:             to.Ptr("john.smith@microsoft.com"),
				ProviderName:              to.Ptr("John Smith"),
				ShareSubscriptionObjectID: to.Ptr("1ce51340-19be-4ef2-9450-0ea0b1324cbb"),
				ShareSubscriptionStatus:   to.Ptr(armdatashare.ShareSubscriptionStatusActive),
				SharedAt:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:45:40.9005877Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderShareSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderShareSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Reinstate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderShareSubscriptions_Revoke(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Revoke.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderShareSubscriptions_Revoke"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewProviderShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginRevoke(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		&armdatashare.ProviderShareSubscriptionsClientBeginRevokeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Revoke.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Revoke.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ProviderShareSubscription{
			Name: to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares/providerShareSubscriptions"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/providerShareSubscripitons/4256e2cf-0f82-4865-961b-12f83333f487"),
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ConsumerEmail:           to.Ptr("john.smith@microsoft.com"),
				ConsumerName:            to.Ptr("John Smith"),
				ConsumerTenantName:      to.Ptr("Microsoft"),
				CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:52:42.6224087Z"); return t }()),
				ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				ProviderEmail:           to.Ptr("john.smith@microsoft.com"),
				ProviderName:            to.Ptr("John Smith"),
				ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusRevoked),
				SharedAt:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:45:40.9005877Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderShareSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderShareSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Revoke.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderShareSubscriptions_GetByShare(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_GetByShare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderShareSubscriptions_GetByShare"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewProviderShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.GetByShare(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"4256e2cf-0f82-4865-961b-12f83333f487",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_GetByShare.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ProviderShareSubscription{
			Name: to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shares/providerShareSubscriptions"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/providerShareSubscripitons/4256e2cf-0f82-4865-961b-12f83333f487"),
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ConsumerEmail:           to.Ptr("john.smith@microsoft.com"),
				ConsumerName:            to.Ptr("John Smith"),
				ConsumerTenantName:      to.Ptr("Microsoft"),
				CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:52:42.6224087Z"); return t }()),
				ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				ProviderEmail:           to.Ptr("john.smith@microsoft.com"),
				ProviderName:            to.Ptr("John Smith"),
				ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusActive),
				SharedAt:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:45:40.9005877Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderShareSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderShareSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_GetByShare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderShareSubscriptions_ListByShare(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_ListByShare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderShareSubscriptions_ListByShare"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewProviderShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.ProviderShareSubscriptionsClientListByShareOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_ListByShare.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ProviderShareSubscriptionList{
			Value: []*armdatashare.ProviderShareSubscription{
				{
					Name: to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shares/providerShareSubscriptions"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/providerShareSubscripitons/4256e2cf-0f82-4865-961b-12f83333f487"),
					Properties: &armdatashare.ProviderShareSubscriptionProperties{
						ConsumerEmail:           to.Ptr("john.smith@microsoft.com"),
						ConsumerName:            to.Ptr("John Smith"),
						ConsumerTenantName:      to.Ptr("Microsoft"),
						CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:52:42.6224087Z"); return t }()),
						ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
						ProviderEmail:           to.Ptr("john.smith@microsoft.com"),
						ProviderName:            to.Ptr("John Smith"),
						ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusActive),
						SharedAt:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-13T08:45:40.9005877Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProviderShareSubscriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProviderShareSubscriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_ListByShare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_CancelSynchronization(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_CancelSynchronization.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_CancelSynchronization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginCancelSynchronization(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		armdatashare.ShareSubscriptionSynchronization{
			SynchronizationID: to.Ptr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
		},
		&armdatashare.ShareSubscriptionsClientBeginCancelSynchronizationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_CancelSynchronization.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_CancelSynchronization.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ShareSubscriptionSynchronization{
			StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-30T02:37:48.4979104Z"); return t }()),
			Status:            to.Ptr("Cancelled"),
			SynchronizationID: to.Ptr("343c4772-ad68-41aa-91b9-bab1c92f9c27"),
		}
		if !reflect.DeepEqual(exampleRes, res.ShareSubscriptionSynchronization) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ShareSubscriptionSynchronization)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_CancelSynchronization.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_ListSourceShareSynchronizationSettings(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSourceShareSynchronizationSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_ListSourceShareSynchronizationSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListSourceShareSynchronizationSettings("SampleResourceGroup",
		"Account1",
		"ShareSub1",
		&armdatashare.ShareSubscriptionsClientListSourceShareSynchronizationSettingsOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSourceShareSynchronizationSettings.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.SourceShareSynchronizationSettingList{
			Value: []armdatashare.SourceShareSynchronizationSettingClassification{
				&armdatashare.ScheduledSourceSynchronizationSetting{
					Kind: to.Ptr(armdatashare.SourceShareSynchronizationSettingKindScheduleBased),
					Properties: &armdatashare.ScheduledSourceShareSynchronizationSettingProperties{
						RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalHour),
						SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-15T19:45:58Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SourceShareSynchronizationSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SourceShareSynchronizationSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSourceShareSynchronizationSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_ListSynchronizationDetails(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSynchronizationDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_ListSynchronizationDetails"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListSynchronizationDetails("SampleResourceGroup",
		"Account1",
		"ShareSub1",
		armdatashare.ShareSubscriptionSynchronization{
			SynchronizationID: to.Ptr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
		},
		&armdatashare.ShareSubscriptionsClientListSynchronizationDetailsOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSynchronizationDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.SynchronizationDetailsList{
			Value: []*armdatashare.SynchronizationDetails{
				{
					Name:        to.Ptr("datasetmapping1"),
					DataSetID:   to.Ptr("7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"),
					DataSetType: to.Ptr(armdatashare.DataSetTypeBlob),
					DurationMs:  to.Ptr[int32](2000),
					EndTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					Status:      to.Ptr("Completed"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SynchronizationDetailsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SynchronizationDetailsList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSynchronizationDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_ListSynchronizations(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSynchronizations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_ListSynchronizations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListSynchronizations("SampleResourceGroup",
		"Account1",
		"ShareSub1",
		&armdatashare.ShareSubscriptionsClientListSynchronizationsOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSynchronizations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ShareSubscriptionSynchronizationList{
			Value: []*armdatashare.ShareSubscriptionSynchronization{
				{
					DurationMs:          to.Ptr[int32](2000),
					EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					Message:             to.Ptr("nda"),
					StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					Status:              to.Ptr("Completed"),
					SynchronizationID:   to.Ptr("runId"),
					SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ShareSubscriptionSynchronizationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ShareSubscriptionSynchronizationList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListSynchronizations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_Synchronize(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Synchronize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_Synchronize"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginSynchronize(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		armdatashare.Synchronize{
			SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
		},
		&armdatashare.ShareSubscriptionsClientBeginSynchronizeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Synchronize.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Synchronize.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ShareSubscriptionSynchronization{
			StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-30T02:37:48.4979104Z"); return t }()),
			Status:            to.Ptr("Succeeded"),
			SynchronizationID: to.Ptr("343c4772-ad68-41aa-91b9-bab1c92f9c27"),
		}
		if !reflect.DeepEqual(exampleRes, res.ShareSubscriptionSynchronization) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ShareSubscriptionSynchronization)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Synchronize.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ShareSubscription{
			Name: to.Ptr("ShareSubscription1"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/sharesubscriptions/ShareSubscription1"),
			Properties: &armdatashare.ShareSubscriptionProperties{
				CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-17T22:32:36.8185016Z"); return t }()),
				ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationID:            to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
				ProviderEmail:           to.Ptr("jack.rose@microsoft.com"),
				ProviderName:            to.Ptr("Jack Rose"),
				ProviderTenantName:      to.Ptr("ShareSenderCompanyName"),
				ProvisioningState:       to.Ptr(armdatashare.ProvisioningStateSucceeded),
				ShareDescription:        to.Ptr("Some share"),
				ShareKind:               to.Ptr(armdatashare.ShareKindCopyBased),
				ShareName:               to.Ptr("share1"),
				ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusActive),
				ShareTerms:              to.Ptr("Confidential"),
				SourceShareLocation:     to.Ptr("eastus2"),
				UserEmail:               to.Ptr("john.smith@microsoft.com"),
				UserName:                to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ShareSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ShareSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		armdatashare.ShareSubscription{
			Properties: &armdatashare.ShareSubscriptionProperties{
				ExpirationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationID:        to.Ptr("12345678-1234-1234-12345678abd"),
				SourceShareLocation: to.Ptr("eastus2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.ShareSubscription{
			Name: to.Ptr("ShareSubscription1"),
			Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions"),
			ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/sharesubscriptions/ShareSubscription1"),
			Properties: &armdatashare.ShareSubscriptionProperties{
				CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-17T22:32:36.8185016Z"); return t }()),
				ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
				InvitationID:            to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
				ProviderEmail:           to.Ptr("jack.rose@microsoft.com"),
				ProviderName:            to.Ptr("Jack Rose"),
				ProviderTenantName:      to.Ptr("Microsoft"),
				ShareDescription:        to.Ptr("Some share"),
				ShareKind:               to.Ptr(armdatashare.ShareKindCopyBased),
				ShareName:               to.Ptr("share1"),
				ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusActive),
				ShareTerms:              to.Ptr("Confidential"),
				SourceShareLocation:     to.Ptr("eastus2"),
				UserEmail:               to.Ptr("john.smith@microsoft.com"),
				UserName:                to.Ptr("John Smith"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ShareSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ShareSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&armdatashare.ShareSubscriptionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Delete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.OperationResponse{
			Status: to.Ptr(armdatashare.StatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShareSubscriptions_ListByAccount(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareSubscriptions_ListByAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewShareSubscriptionsClient("12345678-1234-1234-12345678abc", cred, &options)
	pager := client.ListByAccount("SampleResourceGroup",
		"Account1",
		&armdatashare.ShareSubscriptionsClientListByAccountOptions{SkipToken: nil,
			Filter:  nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ShareSubscriptionList{
			Value: []*armdatashare.ShareSubscription{
				{
					Name: to.Ptr("ShareSubscription1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/sharesubscriptions/ShareSubscription1"),
					Properties: &armdatashare.ShareSubscriptionProperties{
						CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T06:15:15.6818898Z"); return t }()),
						ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
						InvitationID:            to.Ptr("12345678-1234-1234-12345678abd"),
						ProviderEmail:           to.Ptr("jack.rose@microsoft.com"),
						ProviderName:            to.Ptr("Jack Rose"),
						ProviderTenantName:      to.Ptr("Microsoft"),
						ShareDescription:        to.Ptr("Some share"),
						ShareKind:               to.Ptr(armdatashare.ShareKindCopyBased),
						ShareName:               to.Ptr("share1"),
						ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusActive),
						ShareTerms:              to.Ptr("Confidential"),
						SourceShareLocation:     to.Ptr("eastus2"),
						UserEmail:               to.Ptr("john.smith@microsoft.com"),
						UserName:                to.Ptr("johnsmith@microsoft.com"),
					},
				},
				{
					Name: to.Ptr("ShareSubscription1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/sharesubscriptions/ShareSubscription1"),
					Properties: &armdatashare.ShareSubscriptionProperties{
						CreatedAt:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T22:32:36.8185016Z"); return t }()),
						ExpirationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-26T22:33:24.5785265Z"); return t }()),
						InvitationID:            to.Ptr("4256e2cf-0f82-4865-961b-12f83333f487"),
						ProviderEmail:           to.Ptr("jack.rose@microsoft.com"),
						ProviderName:            to.Ptr("Jack Rose"),
						ProviderTenantName:      to.Ptr("Microsoft"),
						ShareDescription:        to.Ptr("Some share"),
						ShareKind:               to.Ptr(armdatashare.ShareKindCopyBased),
						ShareName:               to.Ptr("share1"),
						ShareSubscriptionStatus: to.Ptr(armdatashare.ShareSubscriptionStatusActive),
						ShareTerms:              to.Ptr("Confidential"),
						SourceShareLocation:     to.Ptr("eastus2"),
						UserEmail:               to.Ptr("john.smith@microsoft.com"),
						UserName:                to.Ptr("John Smith"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ShareSubscriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ShareSubscriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ShareSubscriptions_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConsumerSourceDataSets_ListByShareSubscription(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerSourceDataSets_ListByShareSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConsumerSourceDataSets_ListByShareSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewConsumerSourceDataSetsClient("12345678-1234-1234-12345678abc", cred, &options)
	pager := client.ListByShareSubscription("SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.ConsumerSourceDataSetsClientListByShareSubscriptionOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerSourceDataSets_ListByShareSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.ConsumerSourceDataSetList{
			Value: []*armdatashare.ConsumerSourceDataSet{
				{
					Name: to.Ptr("invitation1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/sharesubscriptions/consumerSourceDataSets"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/consumerSourceDataSets/4256e2cf-0f82-4865-961b-12f83333f487"),
					Properties: &armdatashare.ConsumerSourceDataSetProperties{
						DataSetID:   to.Ptr("0b9d4394-8bb3-49a1-aa4f-4be49cd10375"),
						DataSetName: to.Ptr("input.text"),
						DataSetPath: to.Ptr("cars.text"),
						DataSetType: to.Ptr(armdatashare.DataSetTypeBlob),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConsumerSourceDataSetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConsumerSourceDataSetList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ConsumerSourceDataSets_ListByShareSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSynchronizationSettings_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SynchronizationSettings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSynchronizationSettingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"SynchronizationSetting1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.SynchronizationSettingsClientGetResponse{
			&armdatashare.ScheduledSynchronizationSetting{
				Name: to.Ptr("SynchronizationSetting1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/synchronizationSettings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/synchronizationSettings/SynchronizationSetting1"),
				Kind: to.Ptr(armdatashare.SynchronizationSettingKindScheduleBased),
				Properties: &armdatashare.ScheduledSynchronizationSettingProperties{
					ProvisioningState:   to.Ptr(armdatashare.ProvisioningStateSucceeded),
					RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
					SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					UserName:            to.Ptr("John Smith"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSynchronizationSettings_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SynchronizationSettings_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSynchronizationSettingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"Dataset1",
		&armdatashare.ScheduledSynchronizationSetting{
			Kind: to.Ptr(armdatashare.SynchronizationSettingKindScheduleBased),
			Properties: &armdatashare.ScheduledSynchronizationSettingProperties{
				RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
				SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.SynchronizationSettingsClientCreateResponse{
			&armdatashare.ScheduledSynchronizationSetting{
				Name: to.Ptr("SynchronizationSetting1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shares/synchronizationSettings"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/synchronizationSettings/SynchronizationSetting1"),
				Kind: to.Ptr(armdatashare.SynchronizationSettingKindScheduleBased),
				Properties: &armdatashare.ScheduledSynchronizationSettingProperties{
					ProvisioningState:   to.Ptr(armdatashare.ProvisioningStateSucceeded),
					RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
					SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					UserName:            to.Ptr("John Smith"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSynchronizationSettings_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SynchronizationSettings_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSynchronizationSettingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"Share1",
		"SynchronizationSetting1",
		&armdatashare.SynchronizationSettingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Delete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.OperationResponse{
			Status: to.Ptr(armdatashare.StatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSynchronizationSettings_ListByShare(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_ListByShare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SynchronizationSettings_ListByShare"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewSynchronizationSettingsClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListByShare("SampleResourceGroup",
		"Account1",
		"Share1",
		&armdatashare.SynchronizationSettingsClientListByShareOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_ListByShare.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.SynchronizationSettingList{
			Value: []armdatashare.SynchronizationSettingClassification{
				&armdatashare.ScheduledSynchronizationSetting{
					Name: to.Ptr("SynchronizationSetting1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shares/synchronizationSettings"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shares/Share1/synchronizationSettings/SynchronizationSetting1"),
					Kind: to.Ptr(armdatashare.SynchronizationSettingKindScheduleBased),
					Properties: &armdatashare.ScheduledSynchronizationSettingProperties{
						RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
						SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
						UserName:            to.Ptr("John Smith"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SynchronizationSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SynchronizationSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/SynchronizationSettings_ListByShare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Get(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewTriggersClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"Trigger1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.TriggersClientGetResponse{
			&armdatashare.ScheduledTrigger{
				Name: to.Ptr("Trigger1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/triggers"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/triggers/Trigger1"),
				Kind: to.Ptr(armdatashare.TriggerKindScheduleBased),
				Properties: &armdatashare.ScheduledTriggerProperties{
					ProvisioningState:   to.Ptr(armdatashare.ProvisioningStateSucceeded),
					RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
					SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
					SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					TriggerStatus:       to.Ptr(armdatashare.TriggerStatusActive),
					UserName:            to.Ptr("John Smith"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Create(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewTriggersClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"Trigger1",
		&armdatashare.ScheduledTrigger{
			Kind: to.Ptr(armdatashare.TriggerKindScheduleBased),
			Properties: &armdatashare.ScheduledTriggerProperties{
				RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
				SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
				SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
			},
		},
		&armdatashare.TriggersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.TriggersClientCreateResponse{
			&armdatashare.ScheduledTrigger{
				Name: to.Ptr("Trigger1"),
				Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/triggers"),
				ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/triggers/Trigger1"),
				Kind: to.Ptr(armdatashare.TriggerKindScheduleBased),
				Properties: &armdatashare.ScheduledTriggerProperties{
					ProvisioningState:   to.Ptr(armdatashare.ProvisioningStateSucceeded),
					RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
					SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
					SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
					TriggerStatus:       to.Ptr(armdatashare.TriggerStatusActive),
					UserName:            to.Ptr("John Smith"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Delete(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewTriggersClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		"Trigger1",
		&armdatashare.TriggersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Delete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatashare.OperationResponse{
			Status: to.Ptr(armdatashare.StatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_ListByShareSubscription(t *testing.T) {
	// From example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_ListByShareSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_ListByShareSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatashare.NewTriggersClient("433a8dfd-e5d5-4e77-ad86-90acdc75eb1a", cred, &options)
	pager := client.ListByShareSubscription("SampleResourceGroup",
		"Account1",
		"ShareSubscription1",
		&armdatashare.TriggersClientListByShareSubscriptionOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_ListByShareSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatashare.TriggerList{
			Value: []armdatashare.TriggerClassification{
				&armdatashare.ScheduledTrigger{
					Name: to.Ptr("Trigger1"),
					Type: to.Ptr("Microsoft.DataShare/accounts/shareSubscriptions/triggers"),
					ID:   to.Ptr("/subscriptions/433a8dfd-e5d5-4e77-ad86-90acdc75eb1a/resourceGroups/SampleResourceGroup/providers/Microsoft.DataShare/accounts/Account1/shareSubscriptions/ShareSubscription1/triggers/Trigger1"),
					Kind: to.Ptr(armdatashare.TriggerKindScheduleBased),
					Properties: &armdatashare.ScheduledTriggerProperties{
						ProvisioningState:   to.Ptr(armdatashare.ProvisioningStateSucceeded),
						RecurrenceInterval:  to.Ptr(armdatashare.RecurrenceIntervalDay),
						SynchronizationMode: to.Ptr(armdatashare.SynchronizationModeIncremental),
						SynchronizationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-14T04:47:52.9614956Z"); return t }()),
						UserName:            to.Ptr("John Smith"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TriggerList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TriggerList)
			t.Fatalf("Mock response is not equal to example response for example specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/Triggers_ListByShareSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
