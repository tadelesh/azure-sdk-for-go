//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragepool

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DiskPoolZonesClientListPager provides operations for iterating over paged responses.
type DiskPoolZonesClientListPager struct {
	client    *DiskPoolZonesClient
	current   DiskPoolZonesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolZonesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DiskPoolZonesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskPoolZoneListResult.NextLink == nil || len(*p.current.DiskPoolZoneListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DiskPoolZonesClientListPager) NextPage(ctx context.Context) (DiskPoolZonesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DiskPoolZonesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DiskPoolZonesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DiskPoolZonesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DiskPoolZonesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DiskPoolZonesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DiskPoolsClientListByResourceGroupPager provides operations for iterating over paged responses.
type DiskPoolsClientListByResourceGroupPager struct {
	client    *DiskPoolsClient
	current   DiskPoolsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DiskPoolsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskPoolListResult.NextLink == nil || len(*p.current.DiskPoolListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DiskPoolsClientListByResourceGroupPager) NextPage(ctx context.Context) (DiskPoolsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DiskPoolsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DiskPoolsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DiskPoolsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DiskPoolsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return DiskPoolsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DiskPoolsClientListBySubscriptionPager provides operations for iterating over paged responses.
type DiskPoolsClientListBySubscriptionPager struct {
	client    *DiskPoolsClient
	current   DiskPoolsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DiskPoolsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskPoolListResult.NextLink == nil || len(*p.current.DiskPoolListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DiskPoolsClientListBySubscriptionPager) NextPage(ctx context.Context) (DiskPoolsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DiskPoolsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DiskPoolsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DiskPoolsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DiskPoolsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return DiskPoolsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DiskPoolsClientListOutboundNetworkDependenciesEndpointsPager provides operations for iterating over paged responses.
type DiskPoolsClientListOutboundNetworkDependenciesEndpointsPager struct {
	client    *DiskPoolsClient
	current   DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DiskPoolsClientListOutboundNetworkDependenciesEndpointsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundEnvironmentEndpointList.NextLink == nil || len(*p.current.OutboundEnvironmentEndpointList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DiskPoolsClientListOutboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) (DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOutboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		return DiskPoolsClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// IscsiTargetsClientListByDiskPoolPager provides operations for iterating over paged responses.
type IscsiTargetsClientListByDiskPoolPager struct {
	client    *IscsiTargetsClient
	current   IscsiTargetsClientListByDiskPoolResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IscsiTargetsClientListByDiskPoolResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *IscsiTargetsClientListByDiskPoolPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IscsiTargetList.NextLink == nil || len(*p.current.IscsiTargetList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *IscsiTargetsClientListByDiskPoolPager) NextPage(ctx context.Context) (IscsiTargetsClientListByDiskPoolResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return IscsiTargetsClientListByDiskPoolResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return IscsiTargetsClientListByDiskPoolResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return IscsiTargetsClientListByDiskPoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return IscsiTargetsClientListByDiskPoolResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDiskPoolHandleResponse(resp)
	if err != nil {
		return IscsiTargetsClientListByDiskPoolResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceSKUsClientListPager provides operations for iterating over paged responses.
type ResourceSKUsClientListPager struct {
	client    *ResourceSKUsClient
	current   ResourceSKUsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceSKUsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceSKUsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceSKUListResult.NextLink == nil || len(*p.current.ResourceSKUListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceSKUsClientListPager) NextPage(ctx context.Context) (ResourceSKUsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceSKUsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceSKUsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceSKUsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceSKUsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ResourceSKUsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
