//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragepool_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagepool/armstoragepool"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.OperationListResult{
			Value: []*armstoragepool.RPOperation{
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/read"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Read Disk Pool"),
						Operation:   to.Ptr("Read Microsoft.StoragePool/diskPools"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("Disk Pool"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/write"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Create or Update Disk Pool"),
						Operation:   to.Ptr("Create or Update Microsoft.StoragePool/diskPools"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("Disk Pool"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/delete"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Delete Disk Pool"),
						Operation:   to.Ptr("Delete Microsoft.StoragePool/diskPools"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("Microsoft.StoragePool/diskPools"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/start/action"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Start Disk Pool"),
						Operation:   to.Ptr("Start Microsoft.StoragePool/diskPools"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("Microsoft.StoragePool/diskPools"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/deallocate/action"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Deallocate Disk Pool"),
						Operation:   to.Ptr("Deallocate Microsoft.StoragePool/diskPools"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("Microsoft.StoragePool/diskPools"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets/read"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Read iSCSI targets"),
						Operation:   to.Ptr("Read Microsoft.StoragePool/diskPools/iscsiTargets"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("iSCSI targets"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets/write"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Create or Update iSCSI targets"),
						Operation:   to.Ptr("Create or Update Microsoft.StoragePool/diskPools/iscsiTargets"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("iSCSI targets"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets/delete"),
					Display: &armstoragepool.OperationDisplay{
						Description: to.Ptr("Delete iSCSI targets"),
						Operation:   to.Ptr("Delete Microsoft.StoragePool/diskPools/iscsiTargets"),
						Provider:    to.Ptr("Microsoft.StoragePool"),
						Resource:    to.Ptr("iSCSI targets"),
					},
					IsDataAction: to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_ListBySubscription(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Disk Pools by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.DiskPoolListResult{
			Value: []*armstoragepool.DiskPool{
				{
					Name:     to.Ptr("myDiskPool"),
					Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"env": to.Ptr("int"),
					},
					ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
					ManagedByExtended: []*string{
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
					Properties: &armstoragepool.DiskPoolProperties{
						AvailabilityZones: []*string{
							to.Ptr("1")},
						Disks: []*armstoragepool.Disk{
							{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk_0"),
							}},
						ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
						Status:            to.Ptr(armstoragepool.OperationalStatusHealthy),
						SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
					},
					SKU: &armstoragepool.SKU{
						Name: to.Ptr("Basic_V1"),
						Tier: to.Ptr("Basic"),
					},
					SystemData: &armstoragepool.SystemMetadata{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						CreatedBy:          to.Ptr("alias"),
						CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("alias"),
						LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("myDiskPool2"),
					Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool2"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"env": to.Ptr("int"),
					},
					ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
					ManagedByExtended: []*string{
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
					Properties: &armstoragepool.DiskPoolProperties{
						AvailabilityZones: []*string{
							to.Ptr("1")},
						Disks: []*armstoragepool.Disk{
							{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk_0"),
							}},
						ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
						Status:            to.Ptr(armstoragepool.OperationalStatusHealthy),
						SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
					},
					SKU: &armstoragepool.SKU{
						Name: to.Ptr("Basic_V1"),
						Tier: to.Ptr("Basic"),
					},
					SystemData: &armstoragepool.SystemMetadata{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						CreatedBy:          to.Ptr("alias"),
						CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("alias"),
						LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_ListByResourceGroup(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Disk Pools"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.DiskPoolListResult{
			Value: []*armstoragepool.DiskPool{
				{
					Name:     to.Ptr("myDiskPool"),
					Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"env": to.Ptr("int"),
					},
					ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
					ManagedByExtended: []*string{
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
					Properties: &armstoragepool.DiskPoolProperties{
						AvailabilityZones: []*string{
							to.Ptr("1")},
						Disks: []*armstoragepool.Disk{
							{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk_0"),
							}},
						ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
						Status:            to.Ptr(armstoragepool.OperationalStatusUnknown),
						SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
					},
					SKU: &armstoragepool.SKU{
						Name: to.Ptr("Basic_V1"),
						Tier: to.Ptr("Basic"),
					},
					SystemData: &armstoragepool.SystemMetadata{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						CreatedBy:          to.Ptr("alias"),
						CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("alias"),
						LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("myDiskPool2"),
					Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool2"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"env": to.Ptr("int"),
					},
					ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
					ManagedByExtended: []*string{
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
					Properties: &armstoragepool.DiskPoolProperties{
						AvailabilityZones: []*string{
							to.Ptr("1")},
						Disks: []*armstoragepool.Disk{
							{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk_0"),
							}},
						ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
						Status:            to.Ptr(armstoragepool.OperationalStatusUnknown),
						SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
					},
					SKU: &armstoragepool.SKU{
						Name: to.Ptr("Basic_V1"),
						Tier: to.Ptr("Basic"),
					},
					SystemData: &armstoragepool.SystemMetadata{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						CreatedBy:          to.Ptr("alias"),
						CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("alias"),
						LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_CreateOrUpdate(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Disk pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskPool",
		armstoragepool.DiskPoolCreate{
			Location: to.Ptr("westus"),
			Properties: &armstoragepool.DiskPoolCreateProperties{
				AvailabilityZones: []*string{
					to.Ptr("1")},
				Disks: []*armstoragepool.Disk{
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_0"),
					},
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
			},
			SKU: &armstoragepool.SKU{
				Name: to.Ptr("Basic_V1"),
				Tier: to.Ptr("Basic"),
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armstoragepool.DiskPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Put.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragepool.DiskPool{
			Name:     to.Ptr("myDiskPool"),
			Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool"),
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"env": to.Ptr("int"),
			},
			ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
			ManagedByExtended: []*string{
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
			Properties: &armstoragepool.DiskPoolProperties{
				AvailabilityZones: []*string{
					to.Ptr("1")},
				Disks: []*armstoragepool.Disk{
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_0"),
					},
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
				Status:            to.Ptr(armstoragepool.OperationalStatusUnknown),
				SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
			},
			SKU: &armstoragepool.SKU{
				Name: to.Ptr("Basic_0"),
				Tier: to.Ptr("Basic"),
			},
			SystemData: &armstoragepool.SystemMetadata{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				CreatedBy:          to.Ptr("alias"),
				CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("alias"),
				LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskPool)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_Update(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Disk pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskPool",
		armstoragepool.DiskPoolUpdate{
			Properties: &armstoragepool.DiskPoolUpdateProperties{
				Disks: []*armstoragepool.Disk{
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_0"),
					},
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
			},
			SKU: &armstoragepool.SKU{
				Name: to.Ptr("Basic_B1"),
				Tier: to.Ptr("Basic"),
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armstoragepool.DiskPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragepool.DiskPool{
			Name:     to.Ptr("myDiskPool"),
			Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool"),
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"env": to.Ptr("int"),
			},
			ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
			ManagedByExtended: []*string{
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
			Properties: &armstoragepool.DiskPoolProperties{
				AvailabilityZones: []*string{
					to.Ptr("1")},
				Disks: []*armstoragepool.Disk{
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_0"),
					},
					{
						ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
				Status:            to.Ptr(armstoragepool.OperationalStatusUnknown),
				SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
			},
			SKU: &armstoragepool.SKU{
				Name: to.Ptr("Basic_V1"),
				Tier: to.Ptr("Basic"),
			},
			SystemData: &armstoragepool.SystemMetadata{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				CreatedBy:          to.Ptr("alias"),
				CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("alias"),
				LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskPool)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_Delete(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Disk pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskPool",
		&armstoragepool.DiskPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Delete.json: %v", err)
	}
}

func TestDiskPools_Get(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Disk pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskPool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragepool.DiskPool{
			Name:     to.Ptr("myDiskPool"),
			Type:     to.Ptr("Microsoft.StoragePool/diskPools"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool"),
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"env": to.Ptr("int"),
			},
			ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
			ManagedByExtended: []*string{
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
			Properties: &armstoragepool.DiskPoolProperties{
				AvailabilityZones: []*string{
					to.Ptr("1")},
				Disks: []*armstoragepool.Disk{
					{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk_0"),
					}},
				ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
				Status:            to.Ptr(armstoragepool.OperationalStatusHealthy),
				SubnetID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
			},
			SKU: &armstoragepool.SKU{
				Name: to.Ptr("Basic_V1"),
				Tier: to.Ptr("Basic"),
			},
			SystemData: &armstoragepool.SystemMetadata{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				CreatedBy:          to.Ptr("alias"),
				CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("alias"),
				LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskPool)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_GetOutboundNetworkDependencies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Disk Pool outbound network dependencies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListOutboundNetworkDependenciesEndpoints("Sample-WestUSResourceGroup",
		"SampleAse",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_GetOutboundNetworkDependencies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.OutboundEnvironmentEndpointList{
			Value: []*armstoragepool.OutboundEnvironmentEndpoint{
				{
					Category: to.Ptr("Azure Storage"),
					Endpoints: []*armstoragepool.EndpointDependency{
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.36"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](42.0469),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.36"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](41.7038),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](37.326),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](37.513600000000004),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](32.789),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.8702),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](36.7378),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](36.7108),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](4.0261000000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.8264),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](40.8523),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](40.7501),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.2071),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](38.2975),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](59.383700000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](60.0775),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.5512),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.6777),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.5204),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.8193),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2720000000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.0147),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2387),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2804),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.16"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](43.025200000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.16"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](43.1683),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](41.8598),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](41.9805),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](30.542900000000003),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](0.9832000000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](35.9562),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](36.0643),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2829),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.3393),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.4103000000000003),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](4.1032),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.1141),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.0247),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.834),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.8198000000000003),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.3855000000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.0594000000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.4717000000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.4827),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.395),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.1701),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.4308),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](22.5866),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.5372),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.4626),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.7873),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](4.1911000000000005),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.9162000000000003),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.7896),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](26.723100000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](26.735200000000003),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure SQL Database"),
					Endpoints: []*armstoragepool.EndpointDependency{
						{
							DomainName: to.Ptr("database.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.226.202"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.5964),
									Port:         to.Ptr[int32](1433),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Management"),
					Endpoints: []*armstoragepool.EndpointDependency{
						{
							DomainName: to.Ptr("management.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.102.135.246"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](46.5764),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("admin.core.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.102.135.247"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](47.408),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("management.azure.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.151.25.45"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.9529),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Active Directory"),
					Endpoints: []*armstoragepool.EndpointDependency{
						{
							DomainName: to.Ptr("graph.windows.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("20.190.133.83"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("20.190.133.81"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("20.190.133.67"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("40.126.5.34"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Regional Service"),
					Endpoints: []*armstoragepool.EndpointDependency{
						{
							DomainName: to.Ptr("gr-prod-mwh.cloudapp.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.225.188"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.3826),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("az-prod.metrics.nsatc.net"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("40.77.24.27"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](38.5647),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("SSL Certificate Verification"),
					Endpoints: []*armstoragepool.EndpointDependency{
						{
							DomainName: to.Ptr("ocsp.msocsp.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("104.18.25.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.0651),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.25.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](12.888),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("104.18.24.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.0651),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.24.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](12.888),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("mscrl.microsoft.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("152.199.4.33"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.742900000000001),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("152.199.4.33"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](7.436100000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("crl.microsoft.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.215.102.10"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.136200000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("23.215.102.10"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.0085),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("23.215.102.42"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.136200000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("23.215.102.42"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.0085),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("www.microsoft.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.49.13.56"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](7.9229),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("23.49.13.56"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](8.4871),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("crl3.digicert.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](5.4074),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](5.577),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("ocsp.digicert.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.8989),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](5.667400000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("cacerts.digicert.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("104.18.11.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.772400000000001),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.11.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.7705),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("104.18.10.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.772400000000001),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.10.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.7705),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("www.thawte.com"),
							EndpointDetails: []*armstoragepool.EndpointDetail{
								{
									IPAddress:    to.Ptr("54.69.98.161"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](47.532900000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("54.69.98.161"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](48.5362),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("35.167.62.148"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](47.532900000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("35.167.62.148"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](48.5362),
									Port:         to.Ptr[int32](443),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundEnvironmentEndpointList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundEnvironmentEndpointList)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_GetOutboundNetworkDependencies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskPools_Start(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Disk Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myDiskPool",
		&armstoragepool.DiskPoolsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Start.json: %v", err)
	}
}

func TestDiskPools_Deallocate(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Deallocate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deallocate Disk Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDeallocate(ctx,
		"myResourceGroup",
		"myDiskPool",
		&armstoragepool.DiskPoolsClientBeginDeallocateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Deallocate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Deallocate.json: %v", err)
	}
}

func TestDiskPools_Upgrade(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Upgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upgrade Disk Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpgrade(ctx,
		"myResourceGroup",
		"myDiskPool",
		&armstoragepool.DiskPoolsClientBeginUpgradeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Upgrade.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPools_Upgrade.json: %v", err)
	}
}

func TestDiskPoolZones_List(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPoolZones_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Disk Pool Zones"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewDiskPoolZonesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPoolZones_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.DiskPoolZoneListResult{
			Value: []*armstoragepool.DiskPoolZoneInfo{
				{
					AdditionalCapabilities: []*string{},
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					SKU: &armstoragepool.SKU{
						Name: to.Ptr("Basic"),
						Tier: to.Ptr("Basic_V1"),
					},
				},
				{
					AdditionalCapabilities: []*string{},
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2")},
					SKU: &armstoragepool.SKU{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard_V1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskPoolZoneListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskPoolZoneListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/DiskPoolZones_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceSKUs_List(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/Skus_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Disk Pool Skus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewResourceSKUsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/Skus_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.ResourceSKUListResult{
			Value: []*armstoragepool.ResourceSKUInfo{
				{
					Name:       to.Ptr("Standard_V1"),
					APIVersion: to.Ptr("2021-08-01"),
					Capabilities: []*armstoragepool.ResourceSKUCapability{
						{
							Name:  to.Ptr("MaxNumberOfDisks"),
							Value: to.Ptr("1"),
						}},
					LocationInfo: &armstoragepool.ResourceSKULocationInfo{
						Location: to.Ptr("eastus"),
						ZoneDetails: []*armstoragepool.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armstoragepool.ResourceSKUCapability{
									{
										Name:  to.Ptr("DiskPool.CapabilityA"),
										Value: to.Ptr("True"),
									}},
							},
							{
								Name: []*string{
									to.Ptr("1")},
								Capabilities: []*armstoragepool.ResourceSKUCapability{
									{
										Name:  to.Ptr("DiskPool.CapabilityA"),
										Value: to.Ptr("True"),
									},
									{
										Name:  to.Ptr("DiskPool.CapabilityB"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					},
					ResourceType: to.Ptr("diskPools"),
					Restrictions: []*armstoragepool.ResourceSKURestrictions{
						{
							Type:       to.Ptr(armstoragepool.ResourceSKURestrictionsTypeLocation),
							ReasonCode: to.Ptr(armstoragepool.ResourceSKURestrictionsReasonCodeNotAvailableForSubscription),
							RestrictionInfo: &armstoragepool.ResourceSKURestrictionInfo{
								Locations: []*string{
									to.Ptr("FranceSouth")},
							},
							Values: []*string{
								to.Ptr("FranceSouth")},
						},
						{
							Type:       to.Ptr(armstoragepool.ResourceSKURestrictionsTypeZone),
							ReasonCode: to.Ptr(armstoragepool.ResourceSKURestrictionsReasonCodeNotAvailableForSubscription),
							RestrictionInfo: &armstoragepool.ResourceSKURestrictionInfo{
								Locations: []*string{
									to.Ptr("FranceCentral")},
								Zones: []*string{
									to.Ptr("2"),
									to.Ptr("3"),
									to.Ptr("1")},
							},
							Values: []*string{
								to.Ptr("FranceCentral")},
						}},
					Tier: to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("Standard_V1"),
					Capabilities: []*armstoragepool.ResourceSKUCapability{
						{
							Name:  to.Ptr("MaxNumberOfDisks"),
							Value: to.Ptr("1"),
						}},
					LocationInfo: &armstoragepool.ResourceSKULocationInfo{
						Location: to.Ptr("eastus"),
						ZoneDetails: []*armstoragepool.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armstoragepool.ResourceSKUCapability{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							},
							{
								Name: []*string{
									to.Ptr("1")},
								Capabilities: []*armstoragepool.ResourceSKUCapability{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					},
					ResourceType: to.Ptr("diskPools"),
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/Skus_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIscsiTargets_ListByDiskPool(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_ListByDiskPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Disk Pools by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewIscsiTargetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByDiskPool("myResourceGroup",
		"myDiskPool",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_ListByDiskPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragepool.IscsiTargetList{
			Value: []*armstoragepool.IscsiTarget{
				{
					Name:      to.Ptr("myIscsiTarget"),
					Type:      to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets"),
					ID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool/iscsiTargets/myIscsiTarget"),
					ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
					ManagedByExtended: []*string{
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
					Properties: &armstoragepool.IscsiTargetProperties{
						ACLMode: to.Ptr(armstoragepool.IscsiTargetACLModeStatic),
						Endpoints: []*string{
							to.Ptr("10.0.0.1:3260")},
						Luns: []*armstoragepool.IscsiLun{
							{
								Name:                       to.Ptr("lun0"),
								Lun:                        to.Ptr[int32](3),
								ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
							}},
						Port:              to.Ptr[int32](3260),
						ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
						Sessions: []*string{
							to.Ptr("iqn.2005-03.org.iscsi:client")},
						StaticACLs: []*armstoragepool.ACL{
							{
								InitiatorIqn: to.Ptr("iqn.2005-03.org.iscsi:client"),
								MappedLuns: []*string{
									to.Ptr("lun0")},
							}},
						Status:    to.Ptr(armstoragepool.OperationalStatusHealthy),
						TargetIqn: to.Ptr("iqn.2005-03.org.iscsi:server1"),
					},
					SystemData: &armstoragepool.SystemMetadata{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						CreatedBy:          to.Ptr("alias"),
						CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("alias"),
						LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
					},
				},
				{
					Name:      to.Ptr("myIscsiTarget2"),
					Type:      to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets"),
					ID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool/iscsiTargets/myIscsiTarget"),
					ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
					ManagedByExtended: []*string{
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
						to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
					Properties: &armstoragepool.IscsiTargetProperties{
						ACLMode: to.Ptr(armstoragepool.IscsiTargetACLModeDynamic),
						Endpoints: []*string{
							to.Ptr("10.0.0.1:3261")},
						Luns: []*armstoragepool.IscsiLun{
							{
								Name:                       to.Ptr("lun0"),
								Lun:                        to.Ptr[int32](2),
								ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_2"),
							}},
						Port:              to.Ptr[int32](3261),
						ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
						Sessions: []*string{
							to.Ptr("iqn.2005-03.org.iscsi:client")},
						StaticACLs: []*armstoragepool.ACL{},
						Status:     to.Ptr(armstoragepool.OperationalStatusHealthy),
						TargetIqn:  to.Ptr("iqn.2005-03.org.iscsi:server2"),
					},
					SystemData: &armstoragepool.SystemMetadata{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						CreatedBy:          to.Ptr("alias"),
						CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("alias"),
						LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IscsiTargetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IscsiTargetList)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_ListByDiskPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIscsiTargets_CreateOrUpdate(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update iSCSI Target"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewIscsiTargetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskPool",
		"myIscsiTarget",
		armstoragepool.IscsiTargetCreate{
			Properties: &armstoragepool.IscsiTargetCreateProperties{
				ACLMode: to.Ptr(armstoragepool.IscsiTargetACLModeDynamic),
				Luns: []*armstoragepool.IscsiLun{
					{
						Name:                       to.Ptr("lun0"),
						ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				TargetIqn: to.Ptr("iqn.2005-03.org.iscsi:server1"),
			},
		},
		&armstoragepool.IscsiTargetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Put.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragepool.IscsiTarget{
			Name:      to.Ptr("myIscsiTarget"),
			Type:      to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets"),
			ID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool/iscsiTargets/myIscsiTarget"),
			ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
			ManagedByExtended: []*string{
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
			Properties: &armstoragepool.IscsiTargetProperties{
				ACLMode: to.Ptr(armstoragepool.IscsiTargetACLModeDynamic),
				Endpoints: []*string{
					to.Ptr("10.0.0.1:3260")},
				Luns: []*armstoragepool.IscsiLun{
					{
						Name:                       to.Ptr("lun0"),
						Lun:                        to.Ptr[int32](3),
						ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				Port:              to.Ptr[int32](3260),
				ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
				Sessions: []*string{
					to.Ptr("iqn.2005-03.org.iscsi:client")},
				Status:    to.Ptr(armstoragepool.OperationalStatusUnknown),
				TargetIqn: to.Ptr("iqn.2005-03.org.iscsi:server1"),
			},
			SystemData: &armstoragepool.SystemMetadata{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				CreatedBy:          to.Ptr("alias"),
				CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("alias"),
				LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IscsiTarget) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IscsiTarget)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIscsiTargets_Update(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update iSCSI Target"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewIscsiTargetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskPool",
		"myIscsiTarget",
		armstoragepool.IscsiTargetUpdate{
			Properties: &armstoragepool.IscsiTargetUpdateProperties{
				Luns: []*armstoragepool.IscsiLun{
					{
						Name:                       to.Ptr("lun0"),
						ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				StaticACLs: []*armstoragepool.ACL{
					{
						InitiatorIqn: to.Ptr("iqn.2005-03.org.iscsi:client"),
						MappedLuns: []*string{
							to.Ptr("lun0")},
					}},
			},
		},
		&armstoragepool.IscsiTargetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragepool.IscsiTarget{
			Name:      to.Ptr("myIscsiTarget"),
			Type:      to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets"),
			ID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool/iscsiTargets/myIscsiTarget"),
			ManagedBy: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
			ManagedByExtended: []*string{
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore1"),
				to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.AVS/privateClouds/myPrivateCloud/clusters/Cluster-1/datastores/datastore2")},
			Properties: &armstoragepool.IscsiTargetProperties{
				ACLMode: to.Ptr(armstoragepool.IscsiTargetACLModeStatic),
				Endpoints: []*string{
					to.Ptr("10.0.0.1:3260")},
				Luns: []*armstoragepool.IscsiLun{
					{
						Name:                       to.Ptr("lun0"),
						Lun:                        to.Ptr[int32](3),
						ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				Port:              to.Ptr[int32](3260),
				ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
				Sessions: []*string{
					to.Ptr("iqn.2005-03.org.iscsi:client")},
				StaticACLs: []*armstoragepool.ACL{
					{
						InitiatorIqn: to.Ptr("iqn.2005-03.org.iscsi:client"),
						MappedLuns: []*string{
							to.Ptr("lun0")},
					}},
				Status:    to.Ptr(armstoragepool.OperationalStatusUnknown),
				TargetIqn: to.Ptr("iqn.2005-03.org.iscsi:server1"),
			},
			SystemData: &armstoragepool.SystemMetadata{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				CreatedBy:          to.Ptr("alias"),
				CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("alias"),
				LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IscsiTarget) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IscsiTarget)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIscsiTargets_Delete(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete iSCSI Target"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewIscsiTargetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskPool",
		"myIscsiTarget",
		&armstoragepool.IscsiTargetsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Delete.json: %v", err)
	}
}

func TestIscsiTargets_Get(t *testing.T) {
	// From example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get iSCSI Target"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragepool.NewIscsiTargetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskPool",
		"myIscsiTarget",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragepool.IscsiTarget{
			Name: to.Ptr("myIscsiTarget"),
			Type: to.Ptr("Microsoft.StoragePool/diskPools/iscsiTargets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.StoragePool/diskPools/myDiskPool/iscsiTargets/myIscsiTarget"),
			Properties: &armstoragepool.IscsiTargetProperties{
				ACLMode: to.Ptr(armstoragepool.IscsiTargetACLModeStatic),
				Endpoints: []*string{
					to.Ptr("10.0.0.1:3260")},
				Luns: []*armstoragepool.IscsiLun{
					{
						Name:                       to.Ptr("lun0"),
						Lun:                        to.Ptr[int32](0),
						ManagedDiskAzureResourceID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm-name_DataDisk_1"),
					}},
				Port:              to.Ptr[int32](3260),
				ProvisioningState: to.Ptr(armstoragepool.ProvisioningStatesSucceeded),
				Sessions: []*string{
					to.Ptr("iqn.2005-03.org.iscsi:client")},
				StaticACLs: []*armstoragepool.ACL{
					{
						InitiatorIqn: to.Ptr("iqn.2005-03.org.iscsi:client"),
						MappedLuns: []*string{
							to.Ptr("lun0")},
					}},
				Status:    to.Ptr(armstoragepool.OperationalStatusHealthy),
				TargetIqn: to.Ptr("iqn.2005-03.org.iscsi:server1"),
			},
			SystemData: &armstoragepool.SystemMetadata{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				CreatedBy:          to.Ptr("alias"),
				CreatedByType:      to.Ptr(armstoragepool.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-24T06:53:57+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("alias"),
				LastModifiedByType: to.Ptr(armstoragepool.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IscsiTarget) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IscsiTarget)
			t.Fatalf("Mock response is not equal to example response for example specification/storagepool/resource-manager/Microsoft.StoragePool/stable/2021-08-01/examples/IscsiTargets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
