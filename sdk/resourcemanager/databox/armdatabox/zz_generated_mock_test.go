//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatabox

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example OperationsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestJobs_List(t *testing.T) {
	// From example JobsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	pager := client.List(&JobsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobResource.ID should not be nil!")
			}
		}
	}
}

func TestJobs_MarkDevicesShipped(t *testing.T) {
	// From example MarkDevicesShipped
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.MarkDevicesShipped(ctx,
		"SdkJob8367",
		"SdkRg9836",
		MarkDevicesShippedRequest{
			DeliverToDcPackageDetails: &PackageCarrierInfo{
				CarrierName: to.StringPtr("DHL"),
				TrackingID:  to.StringPtr("123456"),
			},
		},
		&JobsMarkDevicesShippedOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_ListByResourceGroup(t *testing.T) {
	// From example JobsListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	pager := client.ListByResourceGroup("SdkRg5154",
		&JobsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobResource.ID should not be nil!")
			}
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example JobsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	res, err := client.Get(ctx,
		"SdkRg5154",
		"SdkJob952",
		&JobsGetOptions{Expand: to.StringPtr("details")})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsGetCmk
	res, err = client.Get(ctx,
		"SdkRg7937",
		"SdkJob1735",
		&JobsGetOptions{Expand: to.StringPtr("details")})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsGetCopyStuck
	res, err = client.Get(ctx,
		"dmstestresource",
		"TJx-637505258985313014",
		&JobsGetOptions{Expand: to.StringPtr("details")})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsGetExport
	res, err = client.Get(ctx,
		"SdkRg8091",
		"SdkJob6429",
		&JobsGetOptions{Expand: to.StringPtr("details")})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsGetWaitingForAction
	res, err = client.Get(ctx,
		"dmstestresource",
		"TJx-637505258985313014",
		&JobsGetOptions{Expand: to.StringPtr("details")})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}
}

func TestJobs_Create(t *testing.T) {
	// From example JobsCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	poller, err := client.BeginCreate(ctx,
		"SdkRg5154",
		"SdkJob952",
		JobResource{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				SKU: &SKU{
					Name: SKUNameDataBox.ToPtr(),
				},
			},
			Properties: &JobProperties{
				TransferType: TransferTypeImportToAzure.ToPtr(),
				Details: &DataBoxJobDetails{
					JobDetails: JobDetails{
						ContactDetails: &ContactDetails{
							ContactName: to.StringPtr("Public SDK Test"),
							EmailList: []*string{
								to.StringPtr("testing@microsoft.com")},
							Phone:          to.StringPtr("1234567890"),
							PhoneExtension: to.StringPtr("1234"),
						},
						DataImportDetails: []*DataImportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourcegroups/databoxbvt/providers/Microsoft.Storage/storageAccounts/databoxbvttestaccount"),
								},
							}},
						JobDetailsType: ClassDiscriminatorDataBox.ToPtr(),
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
					},
				},
			},
		},
		&JobsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsCreateDevicePassword
	poller, err = client.BeginCreate(ctx,
		"SdkRg7478",
		"SdkJob9640",
		JobResource{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				SKU: &SKU{
					Name: SKUNameDataBox.ToPtr(),
				},
			},
			Properties: &JobProperties{
				TransferType: TransferTypeImportToAzure.ToPtr(),
				Details: &DataBoxJobDetails{
					JobDetails: JobDetails{
						ContactDetails: &ContactDetails{
							ContactName: to.StringPtr("Public SDK Test"),
							EmailList: []*string{
								to.StringPtr("testing@microsoft.com")},
							Phone:          to.StringPtr("1234567890"),
							PhoneExtension: to.StringPtr("1234"),
						},
						DataImportDetails: []*DataImportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
										SharePassword:   to.StringPtr("<sharePassword>"),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/databoxbvt1/providers/Microsoft.Storage/storageAccounts/databoxbvttestaccount2"),
								},
							}},
						JobDetailsType: ClassDiscriminatorDataBox.ToPtr(),
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
					},
					DevicePassword: to.StringPtr("<devicePassword>"),
				},
			},
		},
		&JobsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsCreateDoubleEncryption
	poller, err = client.BeginCreate(ctx,
		"SdkRg608",
		"SdkJob6599",
		JobResource{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				SKU: &SKU{
					Name: SKUNameDataBox.ToPtr(),
				},
			},
			Properties: &JobProperties{
				TransferType: TransferTypeImportToAzure.ToPtr(),
				Details: &DataBoxJobDetails{
					JobDetails: JobDetails{
						ContactDetails: &ContactDetails{
							ContactName: to.StringPtr("Public SDK Test"),
							EmailList: []*string{
								to.StringPtr("testing@microsoft.com")},
							Phone:          to.StringPtr("1234567890"),
							PhoneExtension: to.StringPtr("1234"),
						},
						DataImportDetails: []*DataImportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourcegroups/databoxbvt/providers/Microsoft.Storage/storageAccounts/databoxbvttestaccount"),
								},
							}},
						JobDetailsType: ClassDiscriminatorDataBox.ToPtr(),
						Preferences: &Preferences{
							EncryptionPreferences: &EncryptionPreferences{
								DoubleEncryption: DoubleEncryptionEnabled.ToPtr(),
							},
						},
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
					},
				},
			},
		},
		&JobsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsCreateExport
	poller, err = client.BeginCreate(ctx,
		"SdkRg8091",
		"SdkJob6429",
		JobResource{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				SKU: &SKU{
					Name: SKUNameDataBox.ToPtr(),
				},
			},
			Properties: &JobProperties{
				TransferType: TransferTypeExportFromAzure.ToPtr(),
				Details: &DataBoxJobDetails{
					JobDetails: JobDetails{
						ContactDetails: &ContactDetails{
							ContactName: to.StringPtr("Public SDK Test"),
							EmailList: []*string{
								to.StringPtr("testing@microsoft.com")},
							Phone:          to.StringPtr("1234567890"),
							PhoneExtension: to.StringPtr("1234"),
						},
						DataExportDetails: []*DataExportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akvenkat/providers/Microsoft.Storage/storageAccounts/aaaaaa2"),
								},
								TransferConfiguration: &TransferConfiguration{
									TransferAllDetails: &TransferConfigurationTransferAllDetails{
										Include: &TransferAllDetails{
											DataAccountType:  DataAccountTypeStorageAccount.ToPtr(),
											TransferAllBlobs: to.BoolPtr(true),
											TransferAllFiles: to.BoolPtr(true),
										},
									},
									TransferConfigurationType: TransferConfigurationTypeTransferAll.ToPtr(),
								},
							}},
						JobDetailsType: ClassDiscriminatorDataBox.ToPtr(),
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
					},
				},
			},
		},
		&JobsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsCreateWithUserAssignedIdentity
	poller, err = client.BeginCreate(ctx,
		"SdkRg7552",
		"SdkJob5337",
		JobResource{
			Resource: Resource{
				Identity: &ResourceIdentity{
					Type: to.StringPtr("UserAssigned"),
					UserAssignedIdentities: map[string]*UserAssignedIdentity{
						"/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akvenkat/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sdkIdentity": &UserAssignedIdentity{},
					},
				},
				Location: to.StringPtr("westus"),
				SKU: &SKU{
					Name: SKUNameDataBox.ToPtr(),
				},
			},
			Properties: &JobProperties{
				TransferType: TransferTypeImportToAzure.ToPtr(),
				Details: &DataBoxJobDetails{
					JobDetails: JobDetails{
						ContactDetails: &ContactDetails{
							ContactName: to.StringPtr("Public SDK Test"),
							EmailList: []*string{
								to.StringPtr("testing@microsoft.com")},
							Phone:          to.StringPtr("1234567890"),
							PhoneExtension: to.StringPtr("1234"),
						},
						DataImportDetails: []*DataImportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/databoxbvt1/providers/Microsoft.Storage/storageAccounts/databoxbvttestaccount2"),
								},
							}},
						JobDetailsType: ClassDiscriminatorDataBox.ToPtr(),
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
					},
				},
			},
		},
		&JobsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}
}

func TestJobs_Delete(t *testing.T) {
	// From example JobsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	poller, err := client.BeginDelete(ctx,
		"SdkRg5154",
		"SdkJob952",
		&JobsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_Update(t *testing.T) {
	// From example JobsPatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	poller, err := client.BeginUpdate(ctx,
		"SdkRg5154",
		"SdkJob952",
		JobResourceUpdateParameter{
			Properties: &UpdateJobProperties{
				Details: &UpdateJobDetails{
					ContactDetails: &ContactDetails{
						ContactName: to.StringPtr("Update Job"),
						EmailList: []*string{
							to.StringPtr("testing@microsoft.com")},
						Phone:          to.StringPtr("1234567890"),
						PhoneExtension: to.StringPtr("1234"),
					},
					ShippingAddress: &ShippingAddress{
						AddressType:     AddressTypeCommercial.ToPtr(),
						City:            to.StringPtr("San Francisco"),
						CompanyName:     to.StringPtr("Microsoft"),
						Country:         to.StringPtr("US"),
						PostalCode:      to.StringPtr("94107"),
						StateOrProvince: to.StringPtr("CA"),
						StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
						StreetAddress2:  to.StringPtr("Unit 1"),
					},
				},
			},
		},
		&JobsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsPatchCmk
	poller, err = client.BeginUpdate(ctx,
		"SdkRg7937",
		"SdkJob1735",
		JobResourceUpdateParameter{
			Properties: &UpdateJobProperties{
				Details: &UpdateJobDetails{
					KeyEncryptionKey: &KeyEncryptionKey{
						KekType:            KekTypeCustomerManaged.ToPtr(),
						KekURL:             to.StringPtr("https://sdkkeyvault.vault.azure.net/keys/SSDKEY/"),
						KekVaultResourceID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akvenkat/providers/Microsoft.KeyVault/vaults/SDKKeyVault"),
					},
				},
			},
		},
		&JobsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}

	// From example JobsPatchSystemAssignedToUserAssigned
	poller, err = client.BeginUpdate(ctx,
		"SdkRg9765",
		"SdkJob2965",
		JobResourceUpdateParameter{
			Identity: &ResourceIdentity{
				Type: to.StringPtr("SystemAssigned,UserAssigned"),
				UserAssignedIdentities: map[string]*UserAssignedIdentity{
					"/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akvenkat/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sdkIdentity": &UserAssignedIdentity{},
				},
			},
			Properties: &UpdateJobProperties{
				Details: &UpdateJobDetails{
					KeyEncryptionKey: &KeyEncryptionKey{
						IdentityProperties: &IdentityProperties{
							Type: to.StringPtr("UserAssigned"),
							UserAssigned: &UserAssignedProperties{
								ResourceID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akvenkat/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sdkIdentity"),
							},
						},
						KekType:            KekTypeCustomerManaged.ToPtr(),
						KekURL:             to.StringPtr("https://sdkkeyvault.vault.azure.net/keys/SSDKEY/"),
						KekVaultResourceID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akvenkat/providers/Microsoft.KeyVault/vaults/SDKKeyVault"),
					},
				},
			},
		},
		&JobsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobResource.ID == nil {
		t.Fatal("JobResource.ID should not be nil!")
	}
}

func TestJobs_BookShipmentPickUp(t *testing.T) {
	// From example BookShipmentPickupPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.BookShipmentPickUp(ctx,
		"bvttoolrg6",
		"TJ-636646322037905056",
		ShipmentPickUpRequest{
			EndTime:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-22T18:30:00Z"); return t }()),
			ShipmentLocation: to.StringPtr("Front desk"),
			StartTime:        to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-20T18:30:00Z"); return t }()),
		},
		&JobsBookShipmentPickUpOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_Cancel(t *testing.T) {
	// From example JobsCancelPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.Cancel(ctx,
		"SdkRg5154",
		"SdkJob952",
		CancellationReason{
			Reason: to.StringPtr("CancelTest"),
		},
		&JobsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_ListCredentials(t *testing.T) {
	// From example JobsListCredentials
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.ListCredentials(ctx,
		"bvttoolrg6",
		"TJ-636646322037905056",
		&JobsListCredentialsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_Mitigate(t *testing.T) {
	// From example Mitigate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataBoxManagementClientClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.Mitigate(ctx,
		"SdkJob8367",
		"SdkRg9836",
		MitigateJobRequest{
			CustomerResolutionCode: CustomerResolutionCodeMoveToCleanUpDevice.ToPtr(),
		},
		&DataBoxManagementClientMitigateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestService_ListAvailableSkusByResourceGroup(t *testing.T) {
	// From example AvailableSkusPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	pager := client.ListAvailableSKUsByResourceGroup("bvttoolrg6",
		"westus",
		AvailableSKURequest{
			Country:      to.StringPtr("US"),
			Location:     to.StringPtr("westus"),
			TransferType: TransferTypeImportToAzure.ToPtr(),
		},
		&ServiceListAvailableSKUsByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestService_ValidateAddress(t *testing.T) {
	// From example ValidateAddressPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.ValidateAddress(ctx,
		"westus",
		ValidateAddress{
			ValidationInputRequest: ValidationInputRequest{
				ValidationType: ValidationInputDiscriminatorValidateAddress.ToPtr(),
			},
			DeviceType: SKUNameDataBox.ToPtr(),
			ShippingAddress: &ShippingAddress{
				AddressType:     AddressTypeCommercial.ToPtr(),
				City:            to.StringPtr("San Francisco"),
				CompanyName:     to.StringPtr("Microsoft"),
				Country:         to.StringPtr("US"),
				PostalCode:      to.StringPtr("94107"),
				StateOrProvince: to.StringPtr("CA"),
				StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
				StreetAddress2:  to.StringPtr("Unit 1"),
			},
		},
		&ServiceValidateAddressOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestService_ValidateInputsByResourceGroup(t *testing.T) {
	// From example ValidateInputsByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.ValidateInputsByResourceGroup(ctx,
		"SdkRg6861",
		"westus",
		CreateJobValidations{
			ValidationRequest: ValidationRequest{
				IndividualRequestDetails: []ValidationInputRequest{
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateDataTransferDetails.ToPtr(),
						},
						DataImportDetails: []*DataImportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourcegroups/databoxbvt/providers/Microsoft.Storage/storageAccounts/databoxbvttestaccount"),
								},
							}},
						DeviceType:   SKUNameDataBox.ToPtr(),
						TransferType: TransferTypeImportToAzure.ToPtr(),
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateAddress.ToPtr(),
						},
						DeviceType: SKUNameDataBox.ToPtr(),
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
						TransportPreferences: &TransportPreferences{
							PreferredShipmentType: TransportShipmentTypesMicrosoftManaged.ToPtr(),
						},
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateSubscriptionIsAllowedToCreateJob.ToPtr(),
						},
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateSKUAvailability.ToPtr(),
						},
						Country:      to.StringPtr("US"),
						DeviceType:   SKUNameDataBox.ToPtr(),
						Location:     to.StringPtr("westus"),
						TransferType: TransferTypeImportToAzure.ToPtr(),
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateCreateOrderLimit.ToPtr(),
						},
						DeviceType: SKUNameDataBox.ToPtr(),
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidatePreferences.ToPtr(),
						},
						DeviceType: SKUNameDataBox.ToPtr(),
						Preference: &Preferences{
							TransportPreferences: &TransportPreferences{
								PreferredShipmentType: TransportShipmentTypesMicrosoftManaged.ToPtr(),
							},
						},
					}},
				ValidationCategory: to.StringPtr("JobCreationValidation"),
			},
		},
		&ServiceValidateInputsByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestService_ValidateInputs(t *testing.T) {
	// From example ValidateInputs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.ValidateInputs(ctx,
		"westus",
		CreateJobValidations{
			ValidationRequest: ValidationRequest{
				IndividualRequestDetails: []ValidationInputRequest{
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateDataTransferDetails.ToPtr(),
						},
						DataImportDetails: []*DataImportDetails{
							{
								AccountDetails: &StorageAccountDetails{
									DataAccountDetails: DataAccountDetails{
										DataAccountType: DataAccountTypeStorageAccount.ToPtr(),
									},
									StorageAccountID: to.StringPtr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourcegroups/databoxbvt/providers/Microsoft.Storage/storageAccounts/databoxbvttestaccount"),
								},
							}},
						DeviceType:   SKUNameDataBox.ToPtr(),
						TransferType: TransferTypeImportToAzure.ToPtr(),
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateAddress.ToPtr(),
						},
						DeviceType: SKUNameDataBox.ToPtr(),
						ShippingAddress: &ShippingAddress{
							AddressType:     AddressTypeCommercial.ToPtr(),
							City:            to.StringPtr("San Francisco"),
							CompanyName:     to.StringPtr("Microsoft"),
							Country:         to.StringPtr("US"),
							PostalCode:      to.StringPtr("94107"),
							StateOrProvince: to.StringPtr("CA"),
							StreetAddress1:  to.StringPtr("16 TOWNSEND ST"),
							StreetAddress2:  to.StringPtr("Unit 1"),
						},
						TransportPreferences: &TransportPreferences{
							PreferredShipmentType: TransportShipmentTypesMicrosoftManaged.ToPtr(),
						},
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateSubscriptionIsAllowedToCreateJob.ToPtr(),
						},
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateSKUAvailability.ToPtr(),
						},
						Country:      to.StringPtr("US"),
						DeviceType:   SKUNameDataBox.ToPtr(),
						Location:     to.StringPtr("westus"),
						TransferType: TransferTypeImportToAzure.ToPtr(),
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidateCreateOrderLimit.ToPtr(),
						},
						DeviceType: SKUNameDataBox.ToPtr(),
					},
					{
						ValidationInputRequest: ValidationInputRequest{
							ValidationType: ValidationInputDiscriminatorValidatePreferences.ToPtr(),
						},
						DeviceType: SKUNameDataBox.ToPtr(),
						Preference: &Preferences{
							TransportPreferences: &TransportPreferences{
								PreferredShipmentType: TransportShipmentTypesMicrosoftManaged.ToPtr(),
							},
						},
					}},
				ValidationCategory: to.StringPtr("JobCreationValidation"),
			},
		},
		&ServiceValidateInputsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestService_RegionConfiguration(t *testing.T) {
	// From example RegionConfiguration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.RegionConfiguration(ctx,
		"westus",
		RegionConfigurationRequest{
			ScheduleAvailabilityRequest: &DataBoxScheduleAvailabilityRequest{
				ScheduleAvailabilityRequest: ScheduleAvailabilityRequest{
					SKUName:         SKUNameDataBox.ToPtr(),
					StorageLocation: to.StringPtr("westus"),
				},
			},
		},
		&ServiceRegionConfigurationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestService_RegionConfigurationByResourceGroup(t *testing.T) {
	// From example RegionConfigurationByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceClient(con,
		"fa68082f-8ff7-4a25-95c7-ce9da541242f")
	_, err := client.RegionConfigurationByResourceGroup(ctx,
		"SdkRg4981",
		"westus",
		RegionConfigurationRequest{
			ScheduleAvailabilityRequest: &DataBoxScheduleAvailabilityRequest{
				ScheduleAvailabilityRequest: ScheduleAvailabilityRequest{
					SKUName:         SKUNameDataBox.ToPtr(),
					StorageLocation: to.StringPtr("westus"),
				},
			},
		},
		&ServiceRegionConfigurationByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
