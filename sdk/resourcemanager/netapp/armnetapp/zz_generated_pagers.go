//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetapp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccountBackupsClientListPager provides operations for iterating over paged responses.
type AccountBackupsClientListPager struct {
	client    *AccountBackupsClient
	current   AccountBackupsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountBackupsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AccountBackupsClientListPager) NextPage(ctx context.Context) (AccountBackupsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AccountBackupsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountBackupsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountBackupsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountBackupsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AccountBackupsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AccountsClientListBySubscriptionPager provides operations for iterating over paged responses.
type AccountsClientListBySubscriptionPager struct {
	client    *AccountsClient
	current   AccountsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountList.NextLink == nil || len(*p.current.AccountList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListBySubscriptionPager) NextPage(ctx context.Context) (AccountsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AccountsClientListPager provides operations for iterating over paged responses.
type AccountsClientListPager struct {
	client    *AccountsClient
	current   AccountsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountList.NextLink == nil || len(*p.current.AccountList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListPager) NextPage(ctx context.Context) (AccountsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AccountsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BackupPoliciesClientListPager provides operations for iterating over paged responses.
type BackupPoliciesClientListPager struct {
	client    *BackupPoliciesClient
	current   BackupPoliciesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BackupPoliciesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *BackupPoliciesClientListPager) NextPage(ctx context.Context) (BackupPoliciesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return BackupPoliciesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BackupPoliciesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BackupPoliciesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BackupPoliciesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BackupPoliciesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BackupsClientListPager provides operations for iterating over paged responses.
type BackupsClientListPager struct {
	client    *BackupsClient
	current   BackupsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BackupsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *BackupsClientListPager) NextPage(ctx context.Context) (BackupsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return BackupsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BackupsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BackupsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BackupsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BackupsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PoolsClientListPager provides operations for iterating over paged responses.
type PoolsClientListPager struct {
	client    *PoolsClient
	current   PoolsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PoolsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PoolsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapacityPoolList.NextLink == nil || len(*p.current.CapacityPoolList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PoolsClientListPager) NextPage(ctx context.Context) (PoolsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PoolsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PoolsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PoolsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PoolsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PoolsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceQuotaLimitsClientListPager provides operations for iterating over paged responses.
type ResourceQuotaLimitsClientListPager struct {
	client    *ResourceQuotaLimitsClient
	current   ResourceQuotaLimitsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceQuotaLimitsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ResourceQuotaLimitsClientListPager) NextPage(ctx context.Context) (ResourceQuotaLimitsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ResourceQuotaLimitsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceQuotaLimitsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceQuotaLimitsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceQuotaLimitsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ResourceQuotaLimitsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SnapshotPoliciesClientListPager provides operations for iterating over paged responses.
type SnapshotPoliciesClientListPager struct {
	client    *SnapshotPoliciesClient
	current   SnapshotPoliciesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SnapshotPoliciesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *SnapshotPoliciesClientListPager) NextPage(ctx context.Context) (SnapshotPoliciesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return SnapshotPoliciesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SnapshotPoliciesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SnapshotPoliciesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SnapshotPoliciesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SnapshotPoliciesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SnapshotsClientListPager provides operations for iterating over paged responses.
type SnapshotsClientListPager struct {
	client    *SnapshotsClient
	current   SnapshotsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SnapshotsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *SnapshotsClientListPager) NextPage(ctx context.Context) (SnapshotsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return SnapshotsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SnapshotsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SnapshotsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SnapshotsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SnapshotsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListPager provides operations for iterating over paged responses.
type VaultsClientListPager struct {
	client    *VaultsClient
	current   VaultsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListPager) NextPage(ctx context.Context) (VaultsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return VaultsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return VaultsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VolumeGroupsClientListByNetAppAccountPager provides operations for iterating over paged responses.
type VolumeGroupsClientListByNetAppAccountPager struct {
	client    *VolumeGroupsClient
	current   VolumeGroupsClientListByNetAppAccountResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VolumeGroupsClientListByNetAppAccountPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *VolumeGroupsClientListByNetAppAccountPager) NextPage(ctx context.Context) (VolumeGroupsClientListByNetAppAccountResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return VolumeGroupsClientListByNetAppAccountResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VolumeGroupsClientListByNetAppAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VolumeGroupsClientListByNetAppAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VolumeGroupsClientListByNetAppAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByNetAppAccountHandleResponse(resp)
	if err != nil {
		return VolumeGroupsClientListByNetAppAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VolumesClientListPager provides operations for iterating over paged responses.
type VolumesClientListPager struct {
	client    *VolumesClient
	current   VolumesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VolumesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VolumesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VolumeList.NextLink == nil || len(*p.current.VolumeList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VolumesClientListPager) NextPage(ctx context.Context) (VolumesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VolumesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VolumesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VolumesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VolumesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return VolumesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
