//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetapp_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/netapp/armnetapp"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/OperationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.OperationListResult{
			Value: []*armnetapp.Operation{
				{
					Name: to.Ptr("Microsoft.NetApp/register/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Subscription Registration Action"),
						Operation:   to.Ptr("Subscription Registration Action"),
						Provider:    to.Ptr("Microsoft.NetApp"),
						Resource:    to.Ptr("Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a volume resource."),
						Operation:   to.Ptr("Read volume resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a volume resource."),
						Operation:   to.Ptr("Write volume resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a volume resource."),
						Operation:   to.Ptr("Delete volume resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/Revert/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Revert volume to specific snapshot"),
						Operation:   to.Ptr("Revert volume resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/BreakReplication/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Break volume replication relations"),
						Operation:   to.Ptr("Break volume replication resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ReplicationStatus/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads the statuses of the Volume Replication."),
						Operation:   to.Ptr("Read Volume Replication Status."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ListReplications/action"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource: to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ReInitializeReplication/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Attempts to re-initialize an uninitialized replication"),
						Operation:   to.Ptr("Re-Initialize replication"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for Volume resource."),
						Operation:   to.Ptr("Read volume metric definitions."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("system"),
					Properties: &armnetapp.OperationProperties{
						ServiceSpecification: &armnetapp.ServiceSpecification{
							MetricSpecifications: []*armnetapp.MetricSpecification{
								{
									Name:                     to.Ptr("AverageReadLatency"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Average read latency in milliseconds per operation"),
									DisplayName:              to.Ptr("Average read latency"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("AverageReadLatency"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("MilliSeconds"),
								},
								{
									Name:                     to.Ptr("AverageWriteLatency"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Average write latency in milliseconds per operation"),
									DisplayName:              to.Ptr("Average write latency"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("AverageWriteLatency"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("MilliSeconds"),
								},
								{
									Name:                     to.Ptr("VolumeLogicalSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Logical size of the volume (used bytes)"),
									DisplayName:              to.Ptr("Volume Consumed Size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeLogicalSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumeSnapshotSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Size of all snapshots in volume"),
									DisplayName:              to.Ptr("Volume snapshot size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeSnapshotSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("ReadIops"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Read In/out operations per second"),
									DisplayName:              to.Ptr("Read iops"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("ReadIops"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("CountPerSecond"),
								},
								{
									Name:                     to.Ptr("WriteIops"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Write In/out operations per second"),
									DisplayName:              to.Ptr("Write iops"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("WriteIops"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("CountPerSecond"),
								},
								{
									Name:                     to.Ptr("VolumeAllocatedSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("The provisioned size of a volume"),
									DisplayName:              to.Ptr("Volume allocated size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeAllocatedSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumeCoolTierSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Volume Footprint for Cool Tier"),
									DisplayName:              to.Ptr("Volume cool tier size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeCoolTierSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumeCoolTierDataReadSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Data read in using GET per volume"),
									DisplayName:              to.Ptr("Volume cool tier data read size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeCoolTierDataReadSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumeCoolTierDataWriteSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Data tiered out using PUT per volume"),
									DisplayName:              to.Ptr("Volume cool tier data write size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeCoolTierDataWriteSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("XregionReplicationLastTransferDuration"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("The amount of time in seconds it took for the last transfer to complete."),
									DisplayName:              to.Ptr("Volume replication last transfer duration"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationLastTransferDuration"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Seconds"),
								},
								{
									Name:                     to.Ptr("XregionReplicationLastTransferSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("The total number of bytes transferred as part of the last transfer."),
									DisplayName:              to.Ptr("Volume replication last transfer size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationLastTransferSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("XregionReplicationHealthy"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Condition of the relationship, 1 or 0."),
									DisplayName:              to.Ptr("Is volume replication status healthy"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationHealthy"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Count"),
								},
								{
									Name:                     to.Ptr("XregionReplicationLagTime"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("The amount of time in seconds by which the data on the mirror lags behind the source."),
									DisplayName:              to.Ptr("Volume replication lag time"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationLagTime"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Seconds"),
								},
								{
									Name:                     to.Ptr("XregionReplicationTotalTransferBytes"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Cumulative bytes transferred for the relationship."),
									DisplayName:              to.Ptr("Volume replication total transfer"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationTotalTransferBytes"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("XregionReplicationRelationshipProgress"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Total amount of data transferred for the current transfer operation."),
									DisplayName:              to.Ptr("Volume replication progress"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationRelationshipProgress"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("XregionReplicationRelationshipTransferring"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Whether the status of the Volume Replication is 'transferring'."),
									DisplayName:              to.Ptr("Is volume replication transferring"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("XregionReplicationRelationshipTransferring"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Count"),
								},
								{
									Name:                     to.Ptr("CbsVolumeLogicalBackupBytes"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Total bytes backed up for this Volume."),
									DisplayName:              to.Ptr("Volume Backup Bytes"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("CbsVolumeLogicalBackupBytes"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("CbsVolumeProtected"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Is backup enabled for the volume? 1 if yes, 0 if no."),
									DisplayName:              to.Ptr("Is Volume Backup Enabled"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("CbsVolumeProtected"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Count"),
								},
								{
									Name:                     to.Ptr("CbsVolumeBackupActive"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Is the backup policy suspended for the volume? 0 if yes, 1 if no."),
									DisplayName:              to.Ptr("Is Volume Backup suspended"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("CbsVolumeBackupActive"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Count"),
								},
								{
									Name:                     to.Ptr("CbsVolumeOperationTransferredBytes"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Total bytes transferred for last backup or restore operation."),
									DisplayName:              to.Ptr("Volume Backup Last Transferred Bytes"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("CbsVolumeOperationTransferredBytes"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("CbsVolumeOperationComplete"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Did the last volume backup or restore operation complete successfully? 1 if yes, 0 if no."),
									DisplayName:              to.Ptr("Is Volume Backup Operation Complete"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("CbsVolumeOperationComplete"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Count"),
								},
								{
									Name:                     to.Ptr("VolumeConsumedSizePercentage"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("The percentage of the volume consumed including snapshots."),
									DisplayName:              to.Ptr("Percentage Volume Consumed Size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumeConsumedSizePercentage"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Percent"),
								},
								{
									Name:                     to.Ptr("OtherThroughput"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Other throughput (that is not read or write) in bytes per second"),
									DisplayName:              to.Ptr("Other throughput"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("OtherThroughput"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("BytesPerSecond"),
								},
								{
									Name:                     to.Ptr("ReadThroughput"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Read throughput in bytes per second"),
									DisplayName:              to.Ptr("Read throughput"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("ReadThroughput"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("BytesPerSecond"),
								},
								{
									Name:                     to.Ptr("TotalThroughput"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Sum of all throughput in bytes per second"),
									DisplayName:              to.Ptr("Total throughput"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("TotalThroughput"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("BytesPerSecond"),
								},
								{
									Name:                     to.Ptr("WriteThroughput"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Write throughput in bytes per second"),
									DisplayName:              to.Ptr("Write throughput"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("WriteThroughput"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("BytesPerSecond"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/AuthorizeReplication/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Authorize the source volume replication"),
						Operation:   to.Ptr("Authorize Replication"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ResyncReplication/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Resync the replication on the destination volume"),
						Operation:   to.Ptr("Resync Replication"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/DeleteReplication/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Delete the replication on the destination volume"),
						Operation:   to.Ptr("Delete Replication"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ReplicationStatus/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads the statuses of the Volume Replication."),
						Operation:   to.Ptr("Read Volume Replication Status."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/MountTargets/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a mount target resource."),
						Operation:   to.Ptr("Read mount target resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/BackupStatus/read"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource: to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/RestoreStatus/read"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource: to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/PoolChange/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Moves volume to another pool."),
						Operation:   to.Ptr("Change pool for volume"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/RelocateVolume/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Relocate volume to a new stamp."),
						Operation:   to.Ptr("Relocate volume to a new stamp."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/FinalizeRelocation/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Finalize relocation by cleaning up the old volume."),
						Operation:   to.Ptr("Finalize relocation of volume."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/RevertRelocation/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Revert the relocation and revert back to the old volume."),
						Operation:   to.Ptr("Revert the relocation of volume."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads an account resource."),
						Operation:   to.Ptr("Read account resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Accounts resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes an account resource."),
						Operation:   to.Ptr("Write account resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Accounts resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a account resource."),
						Operation:   to.Ptr("Delete account resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Accounts resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/RenewCredentials/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Renews MSI credentials of account, if account has MSI credentials that are due for renewal."),
						Operation:   to.Ptr("Renew MSI credentials, if possible."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Accounts resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a pool resource."),
						Operation:   to.Ptr("Read pool resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a pool resource."),
						Operation:   to.Ptr("Write pool resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a pool resource."),
						Operation:   to.Ptr("Delete pool resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for Volume resource."),
						Operation:   to.Ptr("Read volume metric definitions."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("system"),
					Properties: &armnetapp.OperationProperties{
						ServiceSpecification: &armnetapp.ServiceSpecification{
							MetricSpecifications: []*armnetapp.MetricSpecification{
								{
									Name:                     to.Ptr("VolumePoolAllocatedUsed"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Allocated used size of the pool"),
									DisplayName:              to.Ptr("Pool Allocated To Volume Size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumePoolAllocatedUsed"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumePoolTotalLogicalSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Sum of the logical size of all the volumes belonging to the pool"),
									DisplayName:              to.Ptr("Pool Consumed Size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumePoolTotalLogicalSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage),
										to.Ptr(armnetapp.MetricAggregationType("Total"))},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumePoolAllocatedSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Provisioned size of this pool"),
									DisplayName:              to.Ptr("Pool Allocated Size"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumePoolAllocatedSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage),
										to.Ptr(armnetapp.MetricAggregationType("Total"))},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumePoolTotalSnapshotSize"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Sum of snapshot size of all volumes in this pool"),
									DisplayName:              to.Ptr("Total Snapshot size for the pool"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumePoolTotalSnapshotSize"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("VolumePoolProvisionedThroughput"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Provisioned throughput of this pool"),
									DisplayName:              to.Ptr("Provisioned throughput for the pool"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumePoolProvisionedThroughput"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("BytesPerSecond"),
								},
								{
									Name:                     to.Ptr("VolumePoolAllocatedToVolumeThroughput"),
									AggregationType:          to.Ptr("Average"),
									Dimensions:               []*armnetapp.Dimension{},
									DisplayDescription:       to.Ptr("Sum of the throughput of all the volumes belonging to the pool"),
									DisplayName:              to.Ptr("Pool allocated throughput"),
									EnableRegionalMdmAccount: to.Ptr(true),
									FillGapWithZero:          to.Ptr(false),
									InternalMetricName:       to.Ptr("VolumePoolAllocatedToVolumeThroughput"),
									IsInternal:               to.Ptr(false),
									SourceMdmAccount:         to.Ptr("MicrosoftNetAppShoebox2"),
									SourceMdmNamespace:       to.Ptr("NetAppUsageAndMetrics"),
									SupportedAggregationTypes: []*armnetapp.MetricAggregationType{
										to.Ptr(armnetapp.MetricAggregationTypeAverage)},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("BytesPerSecond"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Gets the log definitions for the resource."),
						Operation:   to.Ptr("Read log definitions."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("system"),
					Properties: &armnetapp.OperationProperties{
						ServiceSpecification: &armnetapp.ServiceSpecification{
							LogSpecifications: []*armnetapp.LogSpecification{
								{
									Name:        to.Ptr("Autoscale"),
									DisplayName: to.Ptr("Capacity Pool Autoscaled"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Pools resource type"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a snapshot resource."),
						Operation:   to.Ptr("Read snapshot resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshots resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a snapshot resource."),
						Operation:   to.Ptr("Write snapshot resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshots resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a snapshot resource."),
						Operation:   to.Ptr("Delete snapshot resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshots resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/RestoreFiles/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Restores files from a snapshot resource"),
						Operation:   to.Ptr("Single File Snapshot Restore"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshots resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/read"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource: to.Ptr("Subvolume resource type."),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Write a subvolume resource."),
						Operation:   to.Ptr("Write subvolume Resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Subvolume resource type."),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/delete"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource: to.Ptr("Subvolume resource type."),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/GetMetadata/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Read subvolume metadata resource."),
						Operation:   to.Ptr("Subvolume Metadata resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Subvolume resource type."),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a snapshot policy resource."),
						Operation:   to.Ptr("Read snapshot policy resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshot Policies resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a snapshot policy resource."),
						Operation:   to.Ptr("Write snapshot policy resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshot Policies resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a snapshot policy resource."),
						Operation:   to.Ptr("Delete snapshot policy resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshot Policies resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies/Volumes/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("List volumes connected to snapshot policy"),
						Operation:   to.Ptr("List connected volumes"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshot Policies resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies/ListVolumes/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("List volumes connected to snapshot policy"),
						Operation:   to.Ptr("List connected volumes"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Snapshot Policies resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a backup resource."),
						Operation:   to.Ptr("Read backup resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Backup resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a backup resource."),
						Operation:   to.Ptr("Write backup resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Backup resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a backup resource."),
						Operation:   to.Ptr("Delete backup resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Backup resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppIPSecPolicies/read"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppIPSecPolicies/write"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppIPSecPolicies/delete"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppIPSecPolicies/Apply/action"),
					Display: &armnetapp.OperationDisplay{
						Provider: to.Ptr("Microsoft.NetApp Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a backup policy resource."),
						Operation:   to.Ptr("Read backup policy resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Backup Policy resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a backup policy resource."),
						Operation:   to.Ptr("Write backup policy resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Backup Policy resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a backup policy resource."),
						Operation:   to.Ptr("Delete backup policy resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Backup Policy resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/vaults/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a vault resource."),
						Operation:   to.Ptr("Read vault resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Vault resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/accountBackups/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads an account backup resource."),
						Operation:   to.Ptr("Read an account backup resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Account backup resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/accountBackups/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes an account backup resource."),
						Operation:   to.Ptr("Write an account backup resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Account backup resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/accountBackups/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes an account backup resource."),
						Operation:   to.Ptr("Delete an account backup resource."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Account backup resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/volumeGroups/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a volume group resource."),
						Operation:   to.Ptr("Read volume group resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volume Group resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/volumeGroups/write"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Writes a volume group resource."),
						Operation:   to.Ptr("Write volume group resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volume Group resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/netAppAccounts/volumeGroups/delete"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Deletes a volume group resource."),
						Operation:   to.Ptr("Delete volume group resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volume Group resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/locations/quotaLimits/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a Quotalimit resource type."),
						Operation:   to.Ptr("Read QuotaLimit resource type"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("QuotaLimit resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/Operations/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads an operation resources."),
						Operation:   to.Ptr("Read operation resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Operations resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/locations/operationresults/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads an operation result resource."),
						Operation:   to.Ptr("Read operation result resource"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Operation results resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/locations/read"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Reads a location wide operation."),
						Operation:   to.Ptr("Read location wide operation"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Location wide operation"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/locations/checknameavailability/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Check if resource name is available"),
						Operation:   to.Ptr("Check if resource name is available"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("NetApp resources"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/locations/checkfilepathavailability/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Check if file path is available"),
						Operation:   to.Ptr("Check if file path is available"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Volumes resource type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/unregister/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Unregisters Subscription with Microsoft.NetApp resource provider"),
						Operation:   to.Ptr("Unregister Subscription for Azure NetApp Files"),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.NetApp/locations/checkinventory/action"),
					Display: &armnetapp.OperationDisplay{
						Description: to.Ptr("Checks ReservedCapacity inventory."),
						Operation:   to.Ptr("Checks ReservedCapacity inventory."),
						Provider:    to.Ptr("Microsoft.NetApp Resource Provider"),
						Resource:    to.Ptr("ReservedCapacity reservation resource."),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetAppResource_CheckNameAvailability(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewResourceClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		armnetapp.ResourceNameAvailabilityRequest{
			Name:          to.Ptr("accName"),
			Type:          to.Ptr(armnetapp.CheckNameResourceTypes("netAppAccount")),
			ResourceGroup: to.Ptr("myRG"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.CheckAvailabilityResponse{
			IsAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetAppResource_CheckFilePathAvailability(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckFilePathAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckFilePathAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewResourceClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.CheckFilePathAvailability(ctx,
		"eastus",
		armnetapp.FilePathAvailabilityRequest{
			Name:     to.Ptr("my-exact-filepth"),
			SubnetID: to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckFilePathAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.CheckAvailabilityResponse{
			IsAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckFilePathAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetAppResource_CheckQuotaAvailability(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckQuotaAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckQuotaAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewResourceClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.CheckQuotaAvailability(ctx,
		"eastus",
		armnetapp.QuotaAvailabilityRequest{
			Name:          to.Ptr("resource1"),
			Type:          to.Ptr(armnetapp.CheckQuotaNameResourceTypesMicrosoftNetAppNetAppAccounts),
			ResourceGroup: to.Ptr("myRG"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckQuotaAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.CheckAvailabilityResponse{
			IsAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/CheckQuotaAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetAppResourceQuotaLimits_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/QuotaLimits_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaLimits"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewResourceQuotaLimitsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/QuotaLimits_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.SubscriptionQuotaItemList{
			Value: []*armnetapp.SubscriptionQuotaItem{
				{
					Name: to.Ptr("eastus/accountsPerSubscription"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/accountsPerSubscription"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](10),
						Current: to.Ptr[int32](10),
					},
				},
				{
					Name: to.Ptr("eastus/poolsPerAccount"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/poolsPerAccount"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](25),
						Current: to.Ptr[int32](25),
					},
				},
				{
					Name: to.Ptr("eastus/volumesPerPool"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/volumesPerPool"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](500),
						Current: to.Ptr[int32](500),
					},
				},
				{
					Name: to.Ptr("eastus/snapshotsPerVolume"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/snapshotsPerVolume"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](255),
						Current: to.Ptr[int32](255),
					},
				},
				{
					Name: to.Ptr("eastus/totalTiBsPerSubscription"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/totalTiBsPerSubscription"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](25),
						Current: to.Ptr[int32](1000),
					},
				},
				{
					Name: to.Ptr("eastus/totalDPVolumesPerSubscription"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/totalDPVolumesPerSubscription"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](10),
						Current: to.Ptr[int32](10),
					},
				},
				{
					Name: to.Ptr("eastus/totalVolumesPerSubscription"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/totalVolumesPerSubscription"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](500),
						Current: to.Ptr[int32](500),
					},
				},
				{
					Name: to.Ptr("eastus/totalCoolAccessVolumesPerSubscription"),
					Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
					ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/totalCoolAccessVolumesPerSubscription"),
					Properties: &armnetapp.SubscriptionQuotaItemProperties{
						Default: to.Ptr[int32](10),
						Current: to.Ptr[int32](10),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionQuotaItemList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionQuotaItemList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/QuotaLimits_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetAppResourceQuotaLimits_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/QuotaLimits_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaLimits"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewResourceQuotaLimitsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"eastus",
		"totalCoolAccessVolumesPerSubscription",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/QuotaLimits_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.SubscriptionQuotaItem{
			Name: to.Ptr("eastus/totalCoolAccessVolumesPerSubscription"),
			Type: to.Ptr("Microsoft.NetApp/locations/quotaLimits"),
			ID:   to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/quotaLimists/totalCoolAccessVolumesPerSubscription"),
			Properties: &armnetapp.SubscriptionQuotaItemProperties{
				Default: to.Ptr[int32](10),
				Current: to.Ptr[int32](10),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionQuotaItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionQuotaItem)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/QuotaLimits_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.AccountList{
			Value: []*armnetapp.Account{
				{
					Name:     to.Ptr("account1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.AccountProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.AccountList{
			Value: []*armnetapp.Account{
				{
					Name:     to.Ptr("account1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.AccountProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Account{
			Name:     to.Ptr("account1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.AccountProperties{
				ActiveDirectories: []*armnetapp.ActiveDirectory{
					{
						ActiveDirectoryID:  to.Ptr("02da3711-6c58-2d64-098a-e3af7afaf936"),
						AesEncryption:      to.Ptr(true),
						DNS:                to.Ptr("10.10.10.3, 10.10.10.4"),
						Domain:             to.Ptr("10.10.10.3"),
						LdapSigning:        to.Ptr(true),
						OrganizationalUnit: to.Ptr("OU=Engineering"),
						Site:               to.Ptr("SiteName"),
						SmbServerName:      to.Ptr("SMBServer"),
						Status:             to.Ptr(armnetapp.ActiveDirectoryStatusInUse),
						StatusDetails:      to.Ptr("Status Details"),
						Username:           to.Ptr("ad_user_name"),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myRG",
		"account1",
		armnetapp.Account{
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.AccountProperties{
				ActiveDirectories: []*armnetapp.ActiveDirectory{
					{
						AesEncryption:      to.Ptr(true),
						DNS:                to.Ptr("10.10.10.3, 10.10.10.4"),
						Domain:             to.Ptr("10.10.10.3"),
						LdapOverTLS:        to.Ptr(false),
						LdapSigning:        to.Ptr(false),
						OrganizationalUnit: to.Ptr("OU=Engineering"),
						Password:           to.Ptr("ad_password"),
						Site:               to.Ptr("SiteName"),
						SmbServerName:      to.Ptr("SMBServer"),
						Username:           to.Ptr("ad_user_name"),
					}},
			},
		},
		&armnetapp.AccountsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Account{
			Name:     to.Ptr("account1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.AccountProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		&armnetapp.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Delete.json: %v", err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		armnetapp.AccountPatch{
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
			},
		},
		&armnetapp.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Account{
			Name:     to.Ptr("account1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.AccountProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Accounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPools_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pools_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewPoolsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.CapacityPoolList{
			Value: []*armnetapp.CapacityPool{
				{
					Name:     to.Ptr("account1/pool1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.PoolProperties{
						PoolID:               to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
						ProvisioningState:    to.Ptr("Succeeded"),
						QosType:              to.Ptr(armnetapp.QosTypeAuto),
						ServiceLevel:         to.Ptr(armnetapp.ServiceLevelPremium),
						Size:                 to.Ptr[int64](4398046511104),
						TotalThroughputMibps: to.Ptr[float32](281.474),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapacityPoolList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapacityPoolList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPools_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pools_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewPoolsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.CapacityPool{
			Name:     to.Ptr("account1/pool1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.PoolProperties{
				PoolID:                  to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
				ProvisioningState:       to.Ptr("Succeeded"),
				QosType:                 to.Ptr(armnetapp.QosTypeManual),
				ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
				Size:                    to.Ptr[int64](4398046511104),
				TotalThroughputMibps:    to.Ptr[float32](281.474),
				UtilizedThroughputMibps: to.Ptr[float32](100.47),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CapacityPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapacityPool)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPools_CreateOrUpdate(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pools_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewPoolsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		armnetapp.CapacityPool{
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.PoolProperties{
				QosType:      to.Ptr(armnetapp.QosTypeAuto),
				ServiceLevel: to.Ptr(armnetapp.ServiceLevelPremium),
				Size:         to.Ptr[int64](4398046511104),
			},
		},
		&armnetapp.PoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.CapacityPool{
			Name:     to.Ptr("account1/pool1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.PoolProperties{
				PoolID:               to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
				ProvisioningState:    to.Ptr("Succeeded"),
				QosType:              to.Ptr(armnetapp.QosTypeAuto),
				ServiceLevel:         to.Ptr(armnetapp.ServiceLevelPremium),
				Size:                 to.Ptr[int64](4398046511104),
				TotalThroughputMibps: to.Ptr[float32](281.474),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CapacityPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapacityPool)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPools_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pools_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewPoolsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		armnetapp.CapacityPoolPatch{},
		&armnetapp.PoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.CapacityPool{
			Name:     to.Ptr("account1/pool1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.PoolProperties{
				PoolID:                  to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
				ProvisioningState:       to.Ptr("Succeeded"),
				QosType:                 to.Ptr(armnetapp.QosTypeManual),
				ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
				Size:                    to.Ptr[int64](4398046511104),
				TotalThroughputMibps:    to.Ptr[float32](281.474),
				UtilizedThroughputMibps: to.Ptr[float32](100.47),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CapacityPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapacityPool)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPools_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pools_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewPoolsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"pool1",
		&armnetapp.PoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Pools_Delete.json: %v", err)
	}
}

func TestVolumes_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		"pool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.VolumeList{
			Value: []*armnetapp.Volume{
				{
					Name:     to.Ptr("account1/pool1/volume1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.VolumeProperties{
						CreationToken:             to.Ptr("some-amazing-filepath"),
						FileSystemID:              to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
						NetworkFeatures:           to.Ptr(armnetapp.NetworkFeaturesStandard),
						NetworkSiblingSetID:       to.Ptr("0f434a03-ce0b-4935-81af-d98652ffb1c4"),
						ProvisioningState:         to.Ptr("Succeeded"),
						ServiceLevel:              to.Ptr(armnetapp.ServiceLevelPremium),
						StorageToNetworkProximity: to.Ptr(armnetapp.VolumeStorageToNetworkProximityT2),
						SubnetID:                  to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
						ThroughputMibps:           to.Ptr[float32](128),
						UsageThreshold:            to.Ptr[int64](107374182400),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VolumeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VolumeList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumes_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Volume{
			Name:     to.Ptr("account1/pool1/volume1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.VolumeProperties{
				CreationToken:             to.Ptr("some-amazing-filepath"),
				FileSystemID:              to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
				NetworkFeatures:           to.Ptr(armnetapp.NetworkFeaturesStandard),
				NetworkSiblingSetID:       to.Ptr("0f434a03-ce0b-4935-81af-d98652ffb1c4"),
				ProvisioningState:         to.Ptr("Succeeded"),
				ServiceLevel:              to.Ptr(armnetapp.ServiceLevelPremium),
				StorageToNetworkProximity: to.Ptr(armnetapp.VolumeStorageToNetworkProximityT2),
				SubnetID:                  to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
				ThroughputMibps:           to.Ptr[float32](128),
				UsageThreshold:            to.Ptr[int64](107374182400),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Volume) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Volume)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumes_CreateOrUpdate(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		armnetapp.Volume{
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.VolumeProperties{
				CreationToken:       to.Ptr("my-unique-file-path"),
				EncryptionKeySource: to.Ptr("Microsoft.KeyVault"),
				ServiceLevel:        to.Ptr(armnetapp.ServiceLevelPremium),
				SubnetID:            to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
				ThroughputMibps:     to.Ptr[float32](128),
				UsageThreshold:      to.Ptr[int64](107374182400),
			},
		},
		&armnetapp.VolumesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Volume{
			Name:     to.Ptr("account1/pool1/volume1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.VolumeProperties{
				CreationToken:       to.Ptr("some-amazing-filepath"),
				EncryptionKeySource: to.Ptr("Microsoft.KeyVault"),
				FileSystemID:        to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
				ProvisioningState:   to.Ptr("Succeeded"),
				ServiceLevel:        to.Ptr(armnetapp.ServiceLevelPremium),
				SubnetID:            to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
				ThroughputMibps:     to.Ptr[float32](128),
				UsageThreshold:      to.Ptr[int64](107374182400),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Volume) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Volume)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumes_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		armnetapp.VolumePatch{},
		&armnetapp.VolumesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Volume{
			Name:     to.Ptr("account1/pool1/volume1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.VolumeProperties{
				CreationToken: to.Ptr("some-amazing-filepath"),
				DataProtection: &armnetapp.VolumePropertiesDataProtection{
					Snapshot: &armnetapp.VolumeSnapshotProperties{
						SnapshotPolicyID: to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRP/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotPolicy1"),
					},
				},
				FileSystemID:              to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
				NetworkFeatures:           to.Ptr(armnetapp.NetworkFeaturesStandard),
				NetworkSiblingSetID:       to.Ptr("0f434a03-ce0b-4935-81af-d98652ffb1c4"),
				ProvisioningState:         to.Ptr("Succeeded"),
				ServiceLevel:              to.Ptr(armnetapp.ServiceLevelPremium),
				StorageToNetworkProximity: to.Ptr(armnetapp.VolumeStorageToNetworkProximityT2),
				SubnetID:                  to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
				ThroughputMibps:           to.Ptr[float32](128),
				UsageThreshold:            to.Ptr[int64](107374182400),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Volume) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Volume)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumes_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&armnetapp.VolumesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Delete.json: %v", err)
	}
}

func TestVolumes_Revert(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Revert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_Revert"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginRevert(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		armnetapp.VolumeRevert{
			SnapshotID: to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1"),
		},
		&armnetapp.VolumesClientBeginRevertOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Revert.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_Revert.json: %v", err)
	}
}

func TestVolumes_BreakReplication(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_BreakReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_BreakReplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginBreakReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&armnetapp.VolumesClientBeginBreakReplicationOptions{Body: &armnetapp.BreakReplicationRequest{
			ForceBreakReplication: to.Ptr(false),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_BreakReplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_BreakReplication.json: %v", err)
	}
}

func TestVolumes_ReplicationStatus(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_ReplicationStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.ReplicationStatus(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ReplicationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.ReplicationStatus{
			ErrorMessage:       to.Ptr(""),
			Healthy:            to.Ptr(true),
			MirrorState:        to.Ptr(armnetapp.MirrorStateMirrored),
			RelationshipStatus: to.Ptr(armnetapp.RelationshipStatusIdle),
			TotalProgress:      to.Ptr("1048576"),
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumes_ResyncReplication(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ResyncReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_ResyncReplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginResyncReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&armnetapp.VolumesClientBeginResyncReplicationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ResyncReplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ResyncReplication.json: %v", err)
	}
}

func TestVolumes_DeleteReplication(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_DeleteReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_DeleteReplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDeleteReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&armnetapp.VolumesClientBeginDeleteReplicationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_DeleteReplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_DeleteReplication.json: %v", err)
	}
}

func TestVolumes_AuthorizeReplication(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_AuthorizeReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_AuthorizeReplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginAuthorizeReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		armnetapp.AuthorizeRequest{
			RemoteVolumeResourceID: to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRemoteRG/providers/Microsoft.NetApp/netAppAccounts/remoteAccount1/capacityPools/remotePool1/volumes/remoteVolume1"),
		},
		&armnetapp.VolumesClientBeginAuthorizeReplicationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_AuthorizeReplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_AuthorizeReplication.json: %v", err)
	}
}

func TestVolumes_ReInitializeReplication(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ReInitializeReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_ReInitializeReplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginReInitializeReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&armnetapp.VolumesClientBeginReInitializeReplicationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ReInitializeReplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_ReInitializeReplication.json: %v", err)
	}
}

func TestVolumes_PoolChange(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_PoolChange.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_AuthorizeReplication"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginPoolChange(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		armnetapp.PoolChangeRequest{
			NewPoolResourceID: to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
		},
		&armnetapp.VolumesClientBeginPoolChangeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_PoolChange.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_PoolChange.json: %v", err)
	}
}

func TestSnapshots_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Snapshots_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		"pool1",
		"volume1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.SnapshotsList{
			Value: []*armnetapp.Snapshot{
				{
					Name:     to.Ptr("account1/pool1/volume1/snapshot1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.SnapshotProperties{
						Created:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						SnapshotID:        to.Ptr("9760acf5-4638-11e7-9bdb-020073ca3333"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotsList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Snapshots_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Snapshot{
			Name:     to.Ptr("account1/pool1/volume1/snapshot1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotProperties{
				Created:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				SnapshotID:        to.Ptr("9760acf5-4638-11e7-9bdb-020073ca3333"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Create(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Snapshots_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		armnetapp.Snapshot{
			Location: to.Ptr("eastus"),
		},
		&armnetapp.SnapshotsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Create.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Create.json: %v", err)
	}
}

func TestSnapshots_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Snapshots_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		map[string]interface{}{},
		&armnetapp.SnapshotsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Snapshot{
			Name:     to.Ptr("account1/pool1/volume1/snapshot1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotProperties{
				Created:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				SnapshotID:        to.Ptr("9760acf5-4638-11e7-9bdb-020073ca3333"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Snapshots_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		&armnetapp.SnapshotsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Snapshots_Delete.json: %v", err)
	}
}

func TestSnapshotPolicies_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SnapshotPolicies_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.SnapshotPoliciesList{
			Value: []*armnetapp.SnapshotPolicy{
				{
					Name:     to.Ptr("account1/snapshotPolicy1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotPolicy1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.SnapshotPolicyProperties{
						DailySchedule: &armnetapp.DailySchedule{
							Hour:            to.Ptr[int32](14),
							Minute:          to.Ptr[int32](30),
							SnapshotsToKeep: to.Ptr[int32](4),
						},
						Enabled: to.Ptr(true),
						HourlySchedule: &armnetapp.HourlySchedule{
							Minute:          to.Ptr[int32](50),
							SnapshotsToKeep: to.Ptr[int32](2),
						},
						MonthlySchedule: &armnetapp.MonthlySchedule{
							DaysOfMonth:     to.Ptr("10,11,12"),
							Hour:            to.Ptr[int32](14),
							Minute:          to.Ptr[int32](15),
							SnapshotsToKeep: to.Ptr[int32](5),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						WeeklySchedule: &armnetapp.WeeklySchedule{
							Day:             to.Ptr("Wednesday"),
							Hour:            to.Ptr[int32](14),
							Minute:          to.Ptr[int32](45),
							SnapshotsToKeep: to.Ptr[int32](3),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshotPolicies_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SnapshotPolicies_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.SnapshotPolicy{
			Name:     to.Ptr("account1/snapshotPolicy1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotPolicy1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotPolicyProperties{
				DailySchedule: &armnetapp.DailySchedule{
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](30),
					SnapshotsToKeep: to.Ptr[int32](4),
				},
				Enabled: to.Ptr(true),
				HourlySchedule: &armnetapp.HourlySchedule{
					Minute:          to.Ptr[int32](50),
					SnapshotsToKeep: to.Ptr[int32](2),
				},
				MonthlySchedule: &armnetapp.MonthlySchedule{
					DaysOfMonth:     to.Ptr("10,11,12"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](15),
					SnapshotsToKeep: to.Ptr[int32](5),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				WeeklySchedule: &armnetapp.WeeklySchedule{
					Day:             to.Ptr("Wednesday"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](45),
					SnapshotsToKeep: to.Ptr[int32](3),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SnapshotPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SnapshotPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshotPolicies_Create(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SnapshotPolicies_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Create(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		armnetapp.SnapshotPolicy{
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotPolicyProperties{
				DailySchedule: &armnetapp.DailySchedule{
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](30),
					SnapshotsToKeep: to.Ptr[int32](4),
				},
				Enabled: to.Ptr(true),
				HourlySchedule: &armnetapp.HourlySchedule{
					Minute:          to.Ptr[int32](50),
					SnapshotsToKeep: to.Ptr[int32](2),
				},
				MonthlySchedule: &armnetapp.MonthlySchedule{
					DaysOfMonth:     to.Ptr("10,11,12"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](15),
					SnapshotsToKeep: to.Ptr[int32](5),
				},
				WeeklySchedule: &armnetapp.WeeklySchedule{
					Day:             to.Ptr("Wednesday"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](45),
					SnapshotsToKeep: to.Ptr[int32](3),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.SnapshotPolicy{
			Name:     to.Ptr("account1/snapshotPolicy1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotPolicy1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotPolicyProperties{
				DailySchedule: &armnetapp.DailySchedule{
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](30),
					SnapshotsToKeep: to.Ptr[int32](4),
				},
				Enabled: to.Ptr(true),
				HourlySchedule: &armnetapp.HourlySchedule{
					Minute:          to.Ptr[int32](50),
					SnapshotsToKeep: to.Ptr[int32](2),
				},
				MonthlySchedule: &armnetapp.MonthlySchedule{
					DaysOfMonth:     to.Ptr("10,11,12"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](15),
					SnapshotsToKeep: to.Ptr[int32](5),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				WeeklySchedule: &armnetapp.WeeklySchedule{
					Day:             to.Ptr("Wednesday"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](45),
					SnapshotsToKeep: to.Ptr[int32](3),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SnapshotPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SnapshotPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshotPolicies_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SnapshotPolicies_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		armnetapp.SnapshotPolicyPatch{
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotPolicyProperties{
				DailySchedule: &armnetapp.DailySchedule{
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](30),
					SnapshotsToKeep: to.Ptr[int32](4),
				},
				Enabled: to.Ptr(true),
				HourlySchedule: &armnetapp.HourlySchedule{
					Minute:          to.Ptr[int32](50),
					SnapshotsToKeep: to.Ptr[int32](2),
				},
				MonthlySchedule: &armnetapp.MonthlySchedule{
					DaysOfMonth:     to.Ptr("10,11,12"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](15),
					SnapshotsToKeep: to.Ptr[int32](5),
				},
				WeeklySchedule: &armnetapp.WeeklySchedule{
					Day:             to.Ptr("Wednesday"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](45),
					SnapshotsToKeep: to.Ptr[int32](3),
				},
			},
		},
		&armnetapp.SnapshotPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.SnapshotPolicy{
			Name:     to.Ptr("account1/snapshotPolicy1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/snapshotPolicies"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotPolicy1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.SnapshotPolicyProperties{
				DailySchedule: &armnetapp.DailySchedule{
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](30),
					SnapshotsToKeep: to.Ptr[int32](4),
				},
				Enabled: to.Ptr(true),
				HourlySchedule: &armnetapp.HourlySchedule{
					Minute:          to.Ptr[int32](50),
					SnapshotsToKeep: to.Ptr[int32](2),
				},
				MonthlySchedule: &armnetapp.MonthlySchedule{
					DaysOfMonth:     to.Ptr("10,11,12"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](15),
					SnapshotsToKeep: to.Ptr[int32](5),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				WeeklySchedule: &armnetapp.WeeklySchedule{
					Day:             to.Ptr("Wednesday"),
					Hour:            to.Ptr[int32](14),
					Minute:          to.Ptr[int32](45),
					SnapshotsToKeep: to.Ptr[int32](3),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SnapshotPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SnapshotPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshotPolicies_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SnapshotPolicies_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"snapshotPolicyName",
		&armnetapp.SnapshotPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_Delete.json: %v", err)
	}
}

func TestSnapshotPolicies_ListVolumes(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_ListVolumes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SnapshotPolicies_ListVolumes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewSnapshotPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.ListVolumes(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_ListVolumes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.SnapshotPolicyVolumeList{
			Value: []*armnetapp.Volume{
				{
					Name:     to.Ptr("account1/pool1/volume1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.VolumeProperties{
						CreationToken:     to.Ptr("some-amazing-filepath"),
						FileSystemID:      to.Ptr("9760acf5-4638-11e7-9bdb-020073ca7778"),
						ProvisioningState: to.Ptr("Succeeded"),
						ServiceLevel:      to.Ptr(armnetapp.ServiceLevelPremium),
						SubnetID:          to.Ptr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
						ThroughputMibps:   to.Ptr[float32](128),
						UsageThreshold:    to.Ptr[int64](107374182400),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SnapshotPolicyVolumeList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SnapshotPolicyVolumeList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/SnapshotPolicies_ListVolumes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_GetStatus(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_BackupStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_BackupStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.GetStatus(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_BackupStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.BackupStatus{
			ErrorMessage:       to.Ptr(""),
			Healthy:            to.Ptr(true),
			LastTransferSize:   to.Ptr[int64](100000),
			LastTransferType:   to.Ptr(""),
			MirrorState:        to.Ptr(armnetapp.MirrorStateMirrored),
			RelationshipStatus: to.Ptr(armnetapp.RelationshipStatusIdle),
			TotalTransferBytes: to.Ptr[int64](100000),
			UnhealthyReason:    to.Ptr(""),
		}
		if !reflect.DeepEqual(exampleRes, res.BackupStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_BackupStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_GetVolumeRestoreStatus(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_RestoreStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Volumes_RestoreStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.GetVolumeRestoreStatus(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_RestoreStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.RestoreStatus{
			ErrorMessage:       to.Ptr(""),
			Healthy:            to.Ptr(true),
			MirrorState:        to.Ptr(armnetapp.MirrorStateUninitialized),
			RelationshipStatus: to.Ptr(armnetapp.RelationshipStatusIdle),
			TotalTransferBytes: to.Ptr[int64](100000),
			UnhealthyReason:    to.Ptr(""),
		}
		if !reflect.DeepEqual(exampleRes, res.RestoreStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestoreStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Volumes_RestoreStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		"pool1",
		"volume1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.BackupsList{
			Value: []*armnetapp.Backup{
				{
					Name:     to.Ptr("account1/pool1/volume1/backup1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/backups/backup1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.BackupProperties{
						BackupType:        to.Ptr(armnetapp.BackupTypeManual),
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
						Label:             to.Ptr("myLabel"),
						ProvisioningState: to.Ptr("Succeeded"),
						Size:              to.Ptr[int64](10011),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupsList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"backup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Backup{
			Name:     to.Ptr("account1/pool1/volume1/backup1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/backups/backup1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.BackupProperties{
				BackupType:        to.Ptr(armnetapp.BackupTypeManual),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
				Label:             to.Ptr("myLabel"),
				ProvisioningState: to.Ptr("Succeeded"),
				Size:              to.Ptr[int64](10011),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Backup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Backup)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_Create(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"backup1",
		armnetapp.Backup{
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.BackupProperties{
				Label: to.Ptr("myLabel"),
			},
		},
		&armnetapp.BackupsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Backup{
			Name:     to.Ptr("account1/pool1/volume1/backup1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/backups/backup1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.BackupProperties{
				BackupType:        to.Ptr(armnetapp.BackupTypeManual),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
				Label:             to.Ptr("myLabel"),
				ProvisioningState: to.Ptr("Succeeded"),
				Size:              to.Ptr[int64](10011),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Backup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Backup)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"backup1",
		&armnetapp.BackupsClientBeginUpdateOptions{Body: &armnetapp.BackupPatch{},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Backup{
			Name:     to.Ptr("account1/pool1/volume1/backup1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/backups/backup1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.BackupProperties{
				BackupType:        to.Ptr(armnetapp.BackupTypeManual),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
				Label:             to.Ptr("myLabel"),
				ProvisioningState: to.Ptr("Succeeded"),
				Size:              to.Ptr[int64](10011),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Backup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Backup)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"poolName",
		"volumeName",
		"backupName",
		&armnetapp.BackupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Delete.json: %v", err)
	}
}

func TestAccountBackups_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountBackups_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.BackupsList{
			Value: []*armnetapp.Backup{
				{
					Name:     to.Ptr("account1/backup1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/accountBackups"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/accountBackups/backup1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.BackupProperties{
						BackupType:        to.Ptr(armnetapp.BackupTypeManual),
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
						Label:             to.Ptr("myLabel"),
						ProvisioningState: to.Ptr("Succeeded"),
						Size:              to.Ptr[int64](10011),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupsList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountBackups_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountBackups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"backup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.Backup{
			Name:     to.Ptr("account1/backup1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/accountBackups"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/accountBackups/backup1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.BackupProperties{
				BackupType:        to.Ptr(armnetapp.BackupTypeManual),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T13:23:33Z"); return t }()),
				Label:             to.Ptr("myLabel"),
				ProvisioningState: to.Ptr("Succeeded"),
				Size:              to.Ptr[int64](10011),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Backup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Backup)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountBackups_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountBackups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewAccountBackupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"backupName",
		&armnetapp.AccountBackupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Backups_Account_Delete.json: %v", err)
	}
}

func TestBackupPolicies_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.BackupPoliciesList{
			Value: []*armnetapp.BackupPolicy{
				{
					Name:     to.Ptr("account1/backupPolicy1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/backupPolocies/backupPolicy1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.BackupPolicyProperties{
						DailyBackupsToKeep:   to.Ptr[int32](10),
						Enabled:              to.Ptr(true),
						MonthlyBackupsToKeep: to.Ptr[int32](10),
						VolumesAssigned:      to.Ptr[int32](0),
						WeeklyBackupsToKeep:  to.Ptr[int32](10),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"backupPolicyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.BackupPolicy{
			Name:     to.Ptr("account1/backupPolicyName"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/backupPolocies/backupPolicyName"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.BackupPolicyProperties{
				DailyBackupsToKeep:   to.Ptr[int32](10),
				Enabled:              to.Ptr(true),
				MonthlyBackupsToKeep: to.Ptr[int32](10),
				VolumeBackups: []*armnetapp.VolumeBackups{
					{
						BackupsCount:  to.Ptr[int32](5),
						PolicyEnabled: to.Ptr(true),
						VolumeName:    to.Ptr("volume 1"),
					}},
				VolumesAssigned:     to.Ptr[int32](0),
				WeeklyBackupsToKeep: to.Ptr[int32](10),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_Create(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BackupPolicies_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"backupPolicyName",
		armnetapp.BackupPolicy{
			Location: to.Ptr("westus"),
			Properties: &armnetapp.BackupPolicyProperties{
				DailyBackupsToKeep:   to.Ptr[int32](10),
				Enabled:              to.Ptr(true),
				MonthlyBackupsToKeep: to.Ptr[int32](10),
				WeeklyBackupsToKeep:  to.Ptr[int32](10),
			},
		},
		&armnetapp.BackupPoliciesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.BackupPolicy{
			Name:     to.Ptr("account1/backupPolicyName"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/backupPolocies/backupPolicyName"),
			Location: to.Ptr("westus"),
			Properties: &armnetapp.BackupPolicyProperties{
				DailyBackupsToKeep:   to.Ptr[int32](10),
				Enabled:              to.Ptr(true),
				MonthlyBackupsToKeep: to.Ptr[int32](10),
				ProvisioningState:    to.Ptr("Succeeded"),
				WeeklyBackupsToKeep:  to.Ptr[int32](10),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_Update(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BackupPolicies_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"backupPolicyName",
		armnetapp.BackupPolicyPatch{
			Location: to.Ptr("westus"),
			Properties: &armnetapp.BackupPolicyProperties{
				DailyBackupsToKeep:   to.Ptr[int32](5),
				Enabled:              to.Ptr(false),
				MonthlyBackupsToKeep: to.Ptr[int32](10),
				WeeklyBackupsToKeep:  to.Ptr[int32](10),
			},
		},
		&armnetapp.BackupPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.BackupPolicy{
			Name:     to.Ptr("account1/backupPolicyName"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/backupPolicies"),
			ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/backupPolocies/backupPolicyName"),
			Location: to.Ptr("westus"),
			Properties: &armnetapp.BackupPolicyProperties{
				DailyBackupsToKeep:   to.Ptr[int32](5),
				Enabled:              to.Ptr(false),
				MonthlyBackupsToKeep: to.Ptr[int32](10),
				ProvisioningState:    to.Ptr("Succeeded"),
				VolumeBackups: []*armnetapp.VolumeBackups{
					{
						BackupsCount:  to.Ptr[int32](5),
						PolicyEnabled: to.Ptr(true),
						VolumeName:    to.Ptr("volume 1"),
					}},
				VolumesAssigned:     to.Ptr[int32](1),
				WeeklyBackupsToKeep: to.Ptr[int32](10),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Backups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewBackupPoliciesClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"backupPolicyName",
		&armnetapp.BackupPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/BackupPolicies_Delete.json: %v", err)
	}
}

func TestVaults_List(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Vaults_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Vaults_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVaultsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.List("myRG",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Vaults_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.VaultList{
			Value: []*armnetapp.Vault{
				{
					Name:     to.Ptr("account1/vault1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/vaults"),
					ID:       to.Ptr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/vaults/vault1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.VaultProperties{
						VaultName: to.Ptr("east US"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VaultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VaultList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/Vaults_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumeGroups_ListByNetAppAccount(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VolumeGroups_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumeGroupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	pager := client.ListByNetAppAccount("myRG",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetapp.VolumeGroupList{
			Value: []*armnetapp.VolumeGroup{
				{
					Name:     to.Ptr("group1"),
					Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/volumeGroups"),
					ID:       to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/volumeGroups/group1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetapp.VolumeGroupListProperties{
						GroupMetaData: &armnetapp.VolumeGroupMetaData{
							ApplicationIdentifier: to.Ptr("DEV"),
							ApplicationType:       to.Ptr(armnetapp.ApplicationTypeSAPHANA),
							GroupDescription:      to.Ptr("Volume group"),
							VolumesCount:          to.Ptr[int64](5),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VolumeGroupList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VolumeGroupList)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumeGroups_Get(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VolumeGroups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumeGroupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"group1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetapp.VolumeGroupDetails{
			Name:     to.Ptr("group1"),
			Type:     to.Ptr("Microsoft.NetApp/netAppAccounts/volumeGroups"),
			ID:       to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/volumeGroups/group1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetapp.VolumeGroupProperties{
				GroupMetaData: &armnetapp.VolumeGroupMetaData{
					ApplicationIdentifier: to.Ptr("DEV"),
					ApplicationType:       to.Ptr(armnetapp.ApplicationTypeSAPHANA),
					GroupDescription:      to.Ptr("Volume group"),
					VolumesCount:          to.Ptr[int64](5),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Volumes: []*armnetapp.VolumeGroupVolumeProperties{
					{
						Name: to.Ptr("account1/pool1/testVol1"),
						Properties: &armnetapp.VolumeProperties{
							CreationToken:           to.Ptr("testVol1"),
							ProvisioningState:       to.Ptr("Succeeded"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("data"),
						},
					},
					{
						Name: to.Ptr("account1/pool1/testVol2"),
						Properties: &armnetapp.VolumeProperties{
							CreationToken:           to.Ptr("testVol2"),
							ProvisioningState:       to.Ptr("Succeeded"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("log"),
						},
					},
					{
						Name: to.Ptr("account1/pool1/testVol3"),
						Properties: &armnetapp.VolumeProperties{
							CreationToken:           to.Ptr("testVol3"),
							ProvisioningState:       to.Ptr("Succeeded"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("shared"),
						},
					},
					{
						Name: to.Ptr("account1/pool1/testVol4"),
						Properties: &armnetapp.VolumeProperties{
							CreationToken:           to.Ptr("testVol4"),
							ProvisioningState:       to.Ptr("Succeeded"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("data-log"),
						},
					},
					{
						Name: to.Ptr("account1/pool1/testVol5"),
						Properties: &armnetapp.VolumeProperties{
							CreationToken:           to.Ptr("testVol5"),
							ProvisioningState:       to.Ptr("Succeeded"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("shared-log"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VolumeGroupDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VolumeGroupDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVolumeGroups_Create(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VolumeGroups_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumeGroupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"group1",
		armnetapp.VolumeGroupDetails{
			Location: to.Ptr("westus"),
			Properties: &armnetapp.VolumeGroupProperties{
				GroupMetaData: &armnetapp.VolumeGroupMetaData{
					ApplicationIdentifier: to.Ptr("DEV"),
					ApplicationType:       to.Ptr(armnetapp.ApplicationTypeSAPHANA),
					DeploymentSpecID:      to.Ptr("fb04dbeb-005d-2703-197e-6208dfadb5d9"),
					GroupDescription:      to.Ptr("Volume group"),
				},
				Volumes: []*armnetapp.VolumeGroupVolumeProperties{
					{
						Name: to.Ptr("testVol1"),
						Properties: &armnetapp.VolumeProperties{
							CapacityPoolResourceID:  to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
							CreationToken:           to.Ptr("testVol1"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("data"),
						},
					},
					{
						Name: to.Ptr("testVol2"),
						Properties: &armnetapp.VolumeProperties{
							CapacityPoolResourceID:  to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
							CreationToken:           to.Ptr("testVol2"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("log"),
						},
					},
					{
						Name: to.Ptr("testVol3"),
						Properties: &armnetapp.VolumeProperties{
							CapacityPoolResourceID:  to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
							CreationToken:           to.Ptr("testVol3"),
							ProximityPlacementGroup: to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/cys_sjain_fcp_rg/providers/Microsoft.Compute/proximityPlacementGroups/svlqa_sjain_multivolume_ppg"),
							ServiceLevel:            to.Ptr(armnetapp.ServiceLevelPremium),
							SubnetID:                to.Ptr("/subscriptions/d633cc2e-722b-4ae1-b636-bbd9e4c60ed9/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
							ThroughputMibps:         to.Ptr[float32](10),
							UsageThreshold:          to.Ptr[int64](107374182400),
							VolumeSpecName:          to.Ptr("shared"),
						},
					}},
			},
		},
		&armnetapp.VolumeGroupsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Create.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Create.json: %v", err)
	}
}

func TestVolumeGroups_Delete(t *testing.T) {
	// From example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VolumeGroups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetapp.NewVolumeGroupsClient("D633CC2E-722B-4AE1-B636-BBD9E4C60ED9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"group1",
		&armnetapp.VolumeGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/netapp/resource-manager/Microsoft.NetApp/stable/2021-08-01/examples/VolumeGroups_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
