//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetapp

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestNetAppResource_CheckNameAvailability(t *testing.T) {
	// From example CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetAppResourceClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.CheckNameAvailability(ctx,
		"eastus",
		ResourceNameAvailabilityRequest{
			Name:          to.StringPtr("accName"),
			Type:          CheckNameResourceTypesMicrosoftNetAppNetAppAccounts.ToPtr(),
			ResourceGroup: to.StringPtr("myRG"),
		},
		&NetAppResourceCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetAppResource_CheckFilePathAvailability(t *testing.T) {
	// From example CheckFilePathAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetAppResourceClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.CheckFilePathAvailability(ctx,
		"eastus",
		FilePathAvailabilityRequest{
			Name:     to.StringPtr("my-exact-filepth"),
			SubnetID: to.StringPtr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
		},
		&NetAppResourceCheckFilePathAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetAppResource_CheckQuotaAvailability(t *testing.T) {
	// From example CheckQuotaAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetAppResourceClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.CheckQuotaAvailability(ctx,
		"eastus",
		QuotaAvailabilityRequest{
			Name:          to.StringPtr("resource1"),
			Type:          CheckQuotaNameResourceTypesMicrosoftNetAppNetAppAccounts.ToPtr(),
			ResourceGroup: to.StringPtr("myRG"),
		},
		&NetAppResourceCheckQuotaAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetAppResourceQuotaLimits_List(t *testing.T) {
	// From example QuotaLimits
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetAppResourceQuotaLimitsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"eastus",
		&NetAppResourceQuotaLimitsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetAppResourceQuotaLimits_Get(t *testing.T) {
	// From example QuotaLimits
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetAppResourceQuotaLimitsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"eastus",
		"totalCoolAccessVolumesPerSubscription",
		&NetAppResourceQuotaLimitsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SubscriptionQuotaItem.ID == nil {
		t.Fatal("SubscriptionQuotaItem.ID should not be nil!")
	}
}

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example Accounts_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	pager := client.ListBySubscription(&AccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetAppAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetAppAccount.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example Accounts_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	pager := client.List("myRG",
		&AccountsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetAppAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetAppAccount.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example Accounts_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		&AccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetAppAccount.ID == nil {
		t.Fatal("NetAppAccount.ID should not be nil!")
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example Accounts_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myRG",
		"account1",
		NetAppAccount{
			Location: to.StringPtr("eastus"),
			Properties: &AccountProperties{
				ActiveDirectories: []*ActiveDirectory{
					{
						AesEncryption:      to.BoolPtr(true),
						DNS:                to.StringPtr("10.10.10.3, 10.10.10.4"),
						Domain:             to.StringPtr("10.10.10.3"),
						LdapOverTLS:        to.BoolPtr(false),
						LdapSigning:        to.BoolPtr(false),
						OrganizationalUnit: to.StringPtr("Engineering"),
						Password:           to.StringPtr("ad_password"),
						Site:               to.StringPtr("SiteName"),
						SmbServerName:      to.StringPtr("SMBServer"),
						Username:           to.StringPtr("ad_user_name"),
					}},
			},
		},
		&AccountsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetAppAccount.ID == nil {
		t.Fatal("NetAppAccount.ID should not be nil!")
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example Accounts_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		&AccountsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example Accounts_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		NetAppAccountPatch{
			Tags: map[string]*string{
				"Tag1": to.StringPtr("Value1"),
			},
		},
		&AccountsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetAppAccount.ID == nil {
		t.Fatal("NetAppAccount.ID should not be nil!")
	}
}

func TestPools_List(t *testing.T) {
	// From example Pools_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	pager := client.List("myRG",
		"account1",
		&PoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CapacityPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CapacityPool.ID should not be nil!")
			}
		}
	}
}

func TestPools_Get(t *testing.T) {
	// From example Pools_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		&PoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CapacityPool.ID == nil {
		t.Fatal("CapacityPool.ID should not be nil!")
	}
}

func TestPools_CreateOrUpdate(t *testing.T) {
	// From example Pools_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		CapacityPool{
			Location: to.StringPtr("eastus"),
			Properties: &PoolProperties{
				QosType:      QosTypeAuto.ToPtr(),
				ServiceLevel: ServiceLevelPremium.ToPtr(),
				Size:         to.Int64Ptr(4398046511104),
			},
		},
		&PoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CapacityPool.ID == nil {
		t.Fatal("CapacityPool.ID should not be nil!")
	}
}

func TestPools_Update(t *testing.T) {
	// From example Pools_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		CapacityPoolPatch{},
		&PoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CapacityPool.ID == nil {
		t.Fatal("CapacityPool.ID should not be nil!")
	}
}

func TestPools_Delete(t *testing.T) {
	// From example Pools_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"pool1",
		&PoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_List(t *testing.T) {
	// From example Volumes_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	pager := client.List("myRG",
		"account1",
		"pool1",
		&VolumesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Volume.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Volume.ID should not be nil!")
			}
		}
	}
}

func TestVolumes_Get(t *testing.T) {
	// From example Volumes_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Volume.ID == nil {
		t.Fatal("Volume.ID should not be nil!")
	}
}

func TestVolumes_CreateOrUpdate(t *testing.T) {
	// From example Volumes_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		Volume{
			Location: to.StringPtr("eastus"),
			Properties: &VolumeProperties{
				CreationToken:       to.StringPtr("my-unique-file-path"),
				EncryptionKeySource: to.StringPtr("Microsoft.KeyVault"),
				ServiceLevel:        ServiceLevelPremium.ToPtr(),
				SubnetID:            to.StringPtr("/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3"),
				ThroughputMibps:     to.Float32Ptr(128),
				UsageThreshold:      to.Int64Ptr(107374182400),
			},
		},
		&VolumesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Volume.ID == nil {
		t.Fatal("Volume.ID should not be nil!")
	}
}

func TestVolumes_Update(t *testing.T) {
	// From example Volumes_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		VolumePatch{},
		&VolumesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Volume.ID == nil {
		t.Fatal("Volume.ID should not be nil!")
	}
}

func TestVolumes_Delete(t *testing.T) {
	// From example Volumes_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_Revert(t *testing.T) {
	// From example Volumes_Revert
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginRevert(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		VolumeRevert{
			SnapshotID: to.StringPtr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1"),
		},
		&VolumesBeginRevertOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_BreakReplication(t *testing.T) {
	// From example Volumes_BreakReplication
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginBreakReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesBeginBreakReplicationOptions{Body: &BreakReplicationRequest{
			ForceBreakReplication: to.BoolPtr(false),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ReplicationStatus(t *testing.T) {
	// From example Volumes_ReplicationStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.ReplicationStatus(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesReplicationStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ResyncReplication(t *testing.T) {
	// From example Volumes_ResyncReplication
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginResyncReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesBeginResyncReplicationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_DeleteReplication(t *testing.T) {
	// From example Volumes_DeleteReplication
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDeleteReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesBeginDeleteReplicationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_AuthorizeReplication(t *testing.T) {
	// From example Volumes_AuthorizeReplication
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginAuthorizeReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		AuthorizeRequest{
			RemoteVolumeResourceID: to.StringPtr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRemoteRG/providers/Microsoft.NetApp/netAppAccounts/remoteAccount1/capacityPools/remotePool1/volumes/remoteVolume1"),
		},
		&VolumesBeginAuthorizeReplicationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ReInitializeReplication(t *testing.T) {
	// From example Volumes_ReInitializeReplication
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginReInitializeReplication(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&VolumesBeginReInitializeReplicationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_PoolChange(t *testing.T) {
	// From example Volumes_AuthorizeReplication
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginPoolChange(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		PoolChangeRequest{
			NewPoolResourceID: to.StringPtr("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1"),
		},
		&VolumesBeginPoolChangeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSnapshots_List(t *testing.T) {
	// From example Snapshots_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&SnapshotsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSnapshots_Get(t *testing.T) {
	// From example Snapshots_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		&SnapshotsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Snapshot.ID == nil {
		t.Fatal("Snapshot.ID should not be nil!")
	}
}

func TestSnapshots_Create(t *testing.T) {
	// From example Snapshots_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		Snapshot{
			Location: to.StringPtr("eastus"),
		},
		&SnapshotsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Snapshot.ID == nil {
		t.Fatal("Snapshot.ID should not be nil!")
	}
}

func TestSnapshots_Update(t *testing.T) {
	// From example Snapshots_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		map[string]interface{}{},
		&SnapshotsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Snapshot.ID == nil {
		t.Fatal("Snapshot.ID should not be nil!")
	}
}

func TestSnapshots_Delete(t *testing.T) {
	// From example Snapshots_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"snapshot1",
		&SnapshotsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSnapshotPolicies_List(t *testing.T) {
	// From example SnapshotPolicies_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"myRG",
		"account1",
		&SnapshotPoliciesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSnapshotPolicies_Get(t *testing.T) {
	// From example SnapshotPolicies_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		&SnapshotPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SnapshotPolicy.ID == nil {
		t.Fatal("SnapshotPolicy.ID should not be nil!")
	}
}

func TestSnapshotPolicies_Create(t *testing.T) {
	// From example SnapshotPolicies_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Create(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		SnapshotPolicy{
			Location: to.StringPtr("eastus"),
			Properties: &SnapshotPolicyProperties{
				DailySchedule: &DailySchedule{
					Hour:            to.Int32Ptr(14),
					Minute:          to.Int32Ptr(30),
					SnapshotsToKeep: to.Int32Ptr(4),
				},
				HourlySchedule: &HourlySchedule{
					Minute:          to.Int32Ptr(50),
					SnapshotsToKeep: to.Int32Ptr(2),
				},
				MonthlySchedule: &MonthlySchedule{
					DaysOfMonth:     to.StringPtr("10,11,12"),
					Hour:            to.Int32Ptr(14),
					Minute:          to.Int32Ptr(15),
					SnapshotsToKeep: to.Int32Ptr(5),
				},
				WeeklySchedule: &WeeklySchedule{
					Day:             to.StringPtr("Wednesday"),
					Hour:            to.Int32Ptr(14),
					Minute:          to.Int32Ptr(45),
					SnapshotsToKeep: to.Int32Ptr(3),
				},
			},
		},
		&SnapshotPoliciesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SnapshotPolicy.ID == nil {
		t.Fatal("SnapshotPolicy.ID should not be nil!")
	}
}

func TestSnapshotPolicies_Update(t *testing.T) {
	// From example SnapshotPolicies_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		SnapshotPolicyPatch{
			Location: to.StringPtr("eastus"),
			Properties: &SnapshotPolicyProperties{
				DailySchedule: &DailySchedule{
					Hour:            to.Int32Ptr(14),
					Minute:          to.Int32Ptr(30),
					SnapshotsToKeep: to.Int32Ptr(4),
				},
				Enabled: to.BoolPtr(true),
				HourlySchedule: &HourlySchedule{
					Minute:          to.Int32Ptr(50),
					SnapshotsToKeep: to.Int32Ptr(2),
				},
				MonthlySchedule: &MonthlySchedule{
					DaysOfMonth:     to.StringPtr("10,11,12"),
					Hour:            to.Int32Ptr(14),
					Minute:          to.Int32Ptr(15),
					SnapshotsToKeep: to.Int32Ptr(5),
				},
				WeeklySchedule: &WeeklySchedule{
					Day:             to.StringPtr("Wednesday"),
					Hour:            to.Int32Ptr(14),
					Minute:          to.Int32Ptr(45),
					SnapshotsToKeep: to.Int32Ptr(3),
				},
			},
		},
		&SnapshotPoliciesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SnapshotPolicy.ID == nil {
		t.Fatal("SnapshotPolicy.ID should not be nil!")
	}
}

func TestSnapshotPolicies_Delete(t *testing.T) {
	// From example SnapshotPolicies_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"snapshotPolicyName",
		&SnapshotPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSnapshotPolicies_ListVolumes(t *testing.T) {
	// From example SnapshotPolicies_ListVolumes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSnapshotPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.ListVolumes(ctx,
		"myRG",
		"account1",
		"snapshotPolicyName",
		&SnapshotPoliciesListVolumesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_GetStatus(t *testing.T) {
	// From example Volumes_BackupStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.GetStatus(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&BackupsGetStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_GetVolumeRestoreStatus(t *testing.T) {
	// From example Volumes_RestoreStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.GetVolumeRestoreStatus(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&BackupsGetVolumeRestoreStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_List(t *testing.T) {
	// From example Backups_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		&BackupsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_Get(t *testing.T) {
	// From example Backups_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"backup1",
		&BackupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Backup.ID == nil {
		t.Fatal("Backup.ID should not be nil!")
	}
}

func TestBackups_Create(t *testing.T) {
	// From example Backups_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"backup1",
		Backup{
			Location: to.StringPtr("eastus"),
			Properties: &BackupProperties{
				Label: to.StringPtr("myLabel"),
			},
		},
		&BackupsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Backup.ID == nil {
		t.Fatal("Backup.ID should not be nil!")
	}
}

func TestBackups_Update(t *testing.T) {
	// From example Backups_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"pool1",
		"volume1",
		"backup1",
		&BackupsBeginUpdateOptions{Body: &BackupPatch{}})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Backup.ID == nil {
		t.Fatal("Backup.ID should not be nil!")
	}
}

func TestBackups_Delete(t *testing.T) {
	// From example Backups_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"poolName",
		"volumeName",
		"backupName",
		&BackupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccountBackups_List(t *testing.T) {
	// From example AccountBackups_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"myRG",
		"account1",
		&AccountBackupsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccountBackups_Get(t *testing.T) {
	// From example AccountBackups_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"backup1",
		&AccountBackupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Backup.ID == nil {
		t.Fatal("Backup.ID should not be nil!")
	}
}

func TestAccountBackups_Delete(t *testing.T) {
	// From example AccountBackups_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountBackupsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"backupName",
		&AccountBackupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupPolicies_List(t *testing.T) {
	// From example Backups_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"myRG",
		"account1",
		&BackupPoliciesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupPolicies_Get(t *testing.T) {
	// From example Backups_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	res, err := client.Get(ctx,
		"myRG",
		"account1",
		"backupPolicyName",
		&BackupPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupPolicy.ID == nil {
		t.Fatal("BackupPolicy.ID should not be nil!")
	}
}

func TestBackupPolicies_Create(t *testing.T) {
	// From example BackupPolicies_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginCreate(ctx,
		"myRG",
		"account1",
		"backupPolicyName",
		BackupPolicy{
			Location: to.StringPtr("westus"),
			Properties: &BackupPolicyProperties{
				DailyBackupsToKeep:   to.Int32Ptr(10),
				Enabled:              to.BoolPtr(true),
				MonthlyBackupsToKeep: to.Int32Ptr(10),
				WeeklyBackupsToKeep:  to.Int32Ptr(10),
			},
		},
		&BackupPoliciesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupPolicy.ID == nil {
		t.Fatal("BackupPolicy.ID should not be nil!")
	}
}

func TestBackupPolicies_Update(t *testing.T) {
	// From example BackupPolicies_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginUpdate(ctx,
		"myRG",
		"account1",
		"backupPolicyName",
		BackupPolicyPatch{
			Location: to.StringPtr("westus"),
			Properties: &BackupPolicyProperties{
				DailyBackupsToKeep:   to.Int32Ptr(5),
				Enabled:              to.BoolPtr(false),
				MonthlyBackupsToKeep: to.Int32Ptr(10),
				WeeklyBackupsToKeep:  to.Int32Ptr(10),
			},
		},
		&BackupPoliciesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupPolicy.ID == nil {
		t.Fatal("BackupPolicy.ID should not be nil!")
	}
}

func TestBackupPolicies_Delete(t *testing.T) {
	// From example Backups_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"accountName",
		"backupPolicyName",
		&BackupPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVaults_List(t *testing.T) {
	// From example Vaults_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9")
	_, err := client.List(ctx,
		"myRG",
		"account1",
		&VaultsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
