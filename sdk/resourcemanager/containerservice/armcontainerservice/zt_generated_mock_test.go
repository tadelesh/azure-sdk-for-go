//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerservice_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/Operation_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations for the container service resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/Operation_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.OperationListResult{
			Value: []*armcontainerservice.OperationValue{
				{
					Name: to.Ptr("Microsoft.ContainerService/locations/operations/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the status of an asynchronous operation"),
						Operation:   to.Ptr("Get Operation"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Operation"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/locations/orchestrators/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Lists the supported orchestrators"),
						Operation:   to.Ptr("List Orchestrators"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Orchestrator"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/locations/osOptions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets OS options"),
						Operation:   to.Ptr("Get OS Options"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("OSOptions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/operations/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Lists operations available on Microsoft.ContainerService resource provider"),
						Operation:   to.Ptr("List Available Container Service Operations"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Available Container Service Operations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/register/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Registers Subscription with Microsoft.ContainerService resource provider"),
						Operation:   to.Ptr("Register Subscription for Container Service"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Container Service Register Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/unregister/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Unregisters Subscription with Microsoft.ContainerService resource provider"),
						Operation:   to.Ptr("Unregister Subscription for Container Service"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Container Service Unregister Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/locations/operationresults/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the status of an asynchronous operation result"),
						Operation:   to.Ptr("Get Operation Result"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("OperationResult"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/containerServices/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a container service"),
						Operation:   to.Ptr("Get Container Service"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Container Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/containerServices/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new container service or updates an existing one"),
						Operation:   to.Ptr("Create or Update Container Service"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Container Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/containerServices/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes a container service"),
						Operation:   to.Ptr("Delete Container Service"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Container Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a managed cluster"),
						Operation:   to.Ptr("Get Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new managed cluster or updates an existing one"),
						Operation:   to.Ptr("Create or Update Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes a managed cluster"),
						Operation:   to.Ptr("Delete Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/start/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Starts a managed cluster"),
						Operation:   to.Ptr("Start Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/stop/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Stops a managed cluster"),
						Operation:   to.Ptr("Stop Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets a maintenance configuration"),
						Operation:   to.Ptr("Get a maintenance configuration"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Maintenance Configurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new MaintenanceConfiguration or updates an existing one"),
						Operation:   to.Ptr("Create or Update maintenance configuratio"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Maintenance Configurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes a maintenance configuration"),
						Operation:   to.Ptr("Delete Maintenance Configuration"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Maintenance Configurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets an agent pool"),
						Operation:   to.Ptr("Get Agent Pool"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Agent Pools"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new agent pool or updates an existing one"),
						Operation:   to.Ptr("Create or Update Agent Pool"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Agent Pools"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes an agent pool"),
						Operation:   to.Ptr("Delete Agent Pool"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Agent Pools"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/upgradeProfiles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the upgrade profile of the Agent Pool"),
						Operation:   to.Ptr("Get Agent Pool UpgradeProfile"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Agent Pools"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/upgradeNodeImageVersion/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Upgrade the node image version of agent pool"),
						Operation:   to.Ptr("Upgrade agent pool node image version"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Agent Pools"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/availableAgentPoolVersions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the available agent pool versions of the cluster"),
						Operation:   to.Ptr("Get Available Agent Pool Versions"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/accessProfiles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a managed cluster access profile by role name"),
						Operation:   to.Ptr("Get Managed Cluster AccessProfile"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/accessProfiles/listCredential/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a managed cluster access profile by role name using list credential"),
						Operation:   to.Ptr("Get Managed Cluster AccessProfile by List Credential"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/upgradeProfiles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the upgrade profile of the cluster"),
						Operation:   to.Ptr("Get UpgradeProfile"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("UpgradeProfile"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/listClusterAdminCredential/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("List the clusterAdmin credential of a managed cluster"),
						Operation:   to.Ptr("List clusterAdmin credential"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/listClusterUserCredential/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("List the clusterUser credential of a managed cluster"),
						Operation:   to.Ptr("List clusterUser credential"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/listClusterMonitoringUserCredential/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("List the clusterMonitoringUser credential of a managed cluster"),
						Operation:   to.Ptr("List clusterMonitoringUser credential"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resetServicePrincipalProfile/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reset the service principal profile of a managed cluster"),
						Operation:   to.Ptr("Reset service principal profile"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resolvePrivateLinkServiceId/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Resolve the private link service id of a managed cluster"),
						Operation:   to.Ptr("Resolve private link service id"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resetAADProfile/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reset the AAD profile of a managed cluster"),
						Operation:   to.Ptr("Reset AAD profile"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rotateClusterCertificates/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Rotate certificates of a managed cluster"),
						Operation:   to.Ptr("Rotate certificates of the cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/runCommand/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Run user issued command against managed kubernetes server."),
						Operation:   to.Ptr("RunCommand"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/commandResults/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Retrieve result from previous issued command."),
						Operation:   to.Ptr("CommandResult"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get the diagnostic setting for a managed cluster resource"),
						Operation:   to.Ptr("Read Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for a managed cluster resource"),
						Operation:   to.Ptr("Write Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Clusters"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/detectors/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get Managed Cluster Detector"),
						Operation:   to.Ptr("Get Managed Cluster Detector"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Managed Cluster Detector"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/diagnosticsState/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the diagnostics state of the cluster"),
						Operation:   to.Ptr("Get Diagnostics State"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Diagnostics State"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnectionsApproval/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Determines if user is allowed to approve a private endpoint connection"),
						Operation:   to.Ptr("Approve Private Endpoint Connections"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Approve Private Endpoint Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnections/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get private endpoint connection"),
						Operation:   to.Ptr("Get private endpoint connection"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Private Endpoint Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnections/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Approve or Reject a private endpoint connection"),
						Operation:   to.Ptr("Update private endpoint connection"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Private Endpoint Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnections/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Delete private endpoint connection"),
						Operation:   to.Ptr("Delete private endpoint connection"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Private Endpoint Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensionaddons/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets an extension addon"),
						Operation:   to.Ptr("Get an extension addon"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("ExtensionAddons"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensionaddons/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new extension addon or updates an existing one"),
						Operation:   to.Ptr("Create or Update extension addon"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("ExtensionAddons"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensionaddons/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes an extension addon"),
						Operation:   to.Ptr("Delete an extension addon"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("ExtensionAddons"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/snapshots/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a snapshot"),
						Operation:   to.Ptr("Get Snapshot"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Snapshots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/snapshots/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new snapshot"),
						Operation:   to.Ptr("Create Snapshot"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Snapshots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/snapshots/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes a snapshot"),
						Operation:   to.Ptr("Delete Snapshot"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Snapshots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/eventGridFilters/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get eventgrid filter"),
						Operation:   to.Ptr("Get eventgrid filter"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("EventGridFilters"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/eventGridFilters/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Create or Update eventgrid filter"),
						Operation:   to.Ptr("Create or Update eventgrid filter"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("EventGridFilters"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/eventGridFilters/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Delete an eventgrid filter"),
						Operation:   to.Ptr("Delete an eventgrid filter"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("EventGridFilters"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/initializerconfigurations/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads initializerconfigurations"),
						Operation:   to.Ptr("Gets/List initializerconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Initializerconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/initializerconfigurations/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes initializerconfigurations"),
						Operation:   to.Ptr("Creates/Updates initializerconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Initializerconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/initializerconfigurations/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes/DeletesCollection initializerconfigurations resource"),
						Operation:   to.Ptr("Initializerconfigurations"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Initializerconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/mutatingwebhookconfigurations/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads mutatingwebhookconfigurations"),
						Operation:   to.Ptr("Gets/List mutatingwebhookconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Mutatingwebhookconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/mutatingwebhookconfigurations/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes mutatingwebhookconfigurations"),
						Operation:   to.Ptr("Creates/Updates mutatingwebhookconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Mutatingwebhookconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/mutatingwebhookconfigurations/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes mutatingwebhookconfigurations"),
						Operation:   to.Ptr("Deletes/DeletesCollection mutatingwebhookconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Mutatingwebhookconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/validatingwebhookconfigurations/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads validatingwebhookconfigurations"),
						Operation:   to.Ptr("Gets/List validatingwebhookconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Validatingwebhookconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/validatingwebhookconfigurations/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes validatingwebhookconfigurations"),
						Operation:   to.Ptr("Creates/Updates validatingwebhookconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Validatingwebhookconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/validatingwebhookconfigurations/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes validatingwebhookconfigurations"),
						Operation:   to.Ptr("Deletes/DeletesCollection validatingwebhookconfigurations resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Validatingwebhookconfigurations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiextensions.k8s.io/customresourcedefinitions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads customresourcedefinitions"),
						Operation:   to.Ptr("Gets/List customresourcedefinitions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Customresourcedefinitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiextensions.k8s.io/customresourcedefinitions/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes customresourcedefinitions"),
						Operation:   to.Ptr("Creates/Updates customresourcedefinitions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Customresourcedefinitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiextensions.k8s.io/customresourcedefinitions/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes customresourcedefinitions"),
						Operation:   to.Ptr("Deletes/DeletesCollection customresourcedefinitions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Customresourcedefinitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiregistration.k8s.io/apiservices/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservices"),
						Operation:   to.Ptr("Gets/List apiservices resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiservices"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiregistration.k8s.io/apiservices/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes apiservices"),
						Operation:   to.Ptr("Creates/Updates apiservices resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiservices"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiregistration.k8s.io/apiservices/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes apiservices"),
						Operation:   to.Ptr("Deletes/DeletesCollection apiservices resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiservices"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/controllerrevisions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads controllerrevisions"),
						Operation:   to.Ptr("Gets/List controllerrevisions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Controllerrevisions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/controllerrevisions/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes controllerrevisions"),
						Operation:   to.Ptr("Creates/Updates controllerrevisions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Controllerrevisions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/controllerrevisions/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes controllerrevisions"),
						Operation:   to.Ptr("Deletes/DeletesCollection controllerrevisions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Controllerrevisions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/daemonsets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads daemonsets"),
						Operation:   to.Ptr("Gets/List daemonsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Daemonsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/daemonsets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes daemonsets"),
						Operation:   to.Ptr("Creates/Updates daemonsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Daemonsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/daemonsets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes daemonsets"),
						Operation:   to.Ptr("Deletes/DeletesCollection daemonsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Daemonsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/deployments/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads deployments"),
						Operation:   to.Ptr("Gets/List deployments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/deployments/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes deployments"),
						Operation:   to.Ptr("Creates/Updates deployments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/deployments/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes deployments"),
						Operation:   to.Ptr("Deletes/DeletesCollection deployments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/replicasets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads replicasets"),
						Operation:   to.Ptr("Gets/List replicasets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicasets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/replicasets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes replicasets"),
						Operation:   to.Ptr("Creates/Updates replicasets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicasets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/replicasets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes replicasets"),
						Operation:   to.Ptr("Deletes/DeletesCollection replicasets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicasets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/statefulsets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads statefulsets"),
						Operation:   to.Ptr("Gets/List statefulsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Statefulsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/statefulsets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes statefulsets"),
						Operation:   to.Ptr("Creates/Updates statefulsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Statefulsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/statefulsets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes statefulsets"),
						Operation:   to.Ptr("Deletes/DeletesCollection statefulsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Statefulsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/authentication.k8s.io/tokenreviews/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes tokenreviews"),
						Operation:   to.Ptr("Creates/Updates tokenreviews resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Tokenreviews"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/localsubjectaccessreviews/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes localsubjectaccessreviews"),
						Operation:   to.Ptr("Creates/Updates localsubjectaccessreviews resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Localsubjectaccessreviews"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/selfsubjectaccessreviews/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes selfsubjectaccessreviews"),
						Operation:   to.Ptr("Creates/Updates selfsubjectaccessreviews resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Selfsubjectaccessreviews"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/selfsubjectrulesreviews/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes selfsubjectrulesreviews"),
						Operation:   to.Ptr("Creates/Updates selfsubjectrulesreviews resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Selfsubjectrulesreviews"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/subjectaccessreviews/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes subjectaccessreviews"),
						Operation:   to.Ptr("Creates/Updates subjectaccessreviews resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Subjectaccessreviews"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads horizontalpodautoscalers"),
						Operation:   to.Ptr("Gets/List horizontalpodautoscalers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Horizontalpodautoscalers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes horizontalpodautoscalers"),
						Operation:   to.Ptr("Creates/Updates horizontalpodautoscalers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Horizontalpodautoscalers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes horizontalpodautoscalers"),
						Operation:   to.Ptr("Deletes/DeletesCollection horizontalpodautoscalers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Horizontalpodautoscalers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/cronjobs/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads cronjobs"),
						Operation:   to.Ptr("Gets/List cronjobs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Cronjobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/cronjobs/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes cronjobs"),
						Operation:   to.Ptr("Creates/Updates cronjobs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Cronjobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/cronjobs/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes cronjobs"),
						Operation:   to.Ptr("Deletes/DeletesCollection cronjobs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Cronjobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/jobs/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads jobs"),
						Operation:   to.Ptr("Gets/List jobs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/jobs/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes jobs"),
						Operation:   to.Ptr("Creates/Updates jobs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/jobs/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes jobs"),
						Operation:   to.Ptr("Deletes/DeletesCollection jobs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/certificates.k8s.io/certificatesigningrequests/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads certificatesigningrequests"),
						Operation:   to.Ptr("Gets/List certificatesigningrequests resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Certificatesigningrequests"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/certificates.k8s.io/certificatesigningrequests/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes certificatesigningrequests"),
						Operation:   to.Ptr("Creates/Updates certificatesigningrequests resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Certificatesigningrequests"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/certificates.k8s.io/certificatesigningrequests/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes certificatesigningrequests"),
						Operation:   to.Ptr("Deletes/DeletesCollection certificatesigningrequests resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Certificatesigningrequests"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads leases"),
						Operation:   to.Ptr("Gets/List leases resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Leases"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes leases"),
						Operation:   to.Ptr("Creates/Updates leases resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Leases"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes leases"),
						Operation:   to.Ptr("Deletes/DeletesCollection leases resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Leases"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/bindings/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes bindings"),
						Operation:   to.Ptr("Creates/Updates bindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/componentstatuses/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads componentstatuses"),
						Operation:   to.Ptr("Gets/List componentstatuses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Componentstatuses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/componentstatuses/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes componentstatuses"),
						Operation:   to.Ptr("Creates/Updates componentstatuses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Componentstatuses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/componentstatuses/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes componentstatuses"),
						Operation:   to.Ptr("Deletes/DeletesCollection componentstatuses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Componentstatuses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/configmaps/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads configmaps"),
						Operation:   to.Ptr("Gets/List configmaps resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Configmaps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/configmaps/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes configmaps"),
						Operation:   to.Ptr("Creates/Updates configmaps resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Configmaps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/configmaps/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes configmaps"),
						Operation:   to.Ptr("Deletes/DeletesCollection configmaps resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Configmaps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/endpoints/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads endpoints"),
						Operation:   to.Ptr("Gets/List endpoints resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Endpoints"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/endpoints/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes endpoints"),
						Operation:   to.Ptr("Creates/Updates endpoints resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Endpoints"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/endpoints/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes endpoints"),
						Operation:   to.Ptr("Deletes/DeletesCollection endpoints resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Endpoints"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/events/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads events"),
						Operation:   to.Ptr("Gets/List events resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/events/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes events"),
						Operation:   to.Ptr("Creates/Updates events resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/events/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes events"),
						Operation:   to.Ptr("Deletes/DeletesCollection events resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/limitranges/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads limitranges"),
						Operation:   to.Ptr("Gets/List limitranges resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Limitranges"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/limitranges/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes limitranges"),
						Operation:   to.Ptr("Creates/Updates limitranges resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Limitranges"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/limitranges/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes limitranges"),
						Operation:   to.Ptr("Deletes/DeletesCollection limitranges resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Limitranges"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/namespaces/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads namespaces"),
						Operation:   to.Ptr("Gets/List namespaces resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Namespaces"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/namespaces/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes namespaces"),
						Operation:   to.Ptr("Creates/Updates namespaces resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Namespaces"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/namespaces/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes namespaces"),
						Operation:   to.Ptr("Deletes/DeletesCollection namespaces resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Namespaces"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/nodes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads nodes"),
						Operation:   to.Ptr("Gets/List nodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Nodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/nodes/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes nodes"),
						Operation:   to.Ptr("Creates/Updates nodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Nodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/nodes/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes nodes"),
						Operation:   to.Ptr("Deletes/DeletesCollection nodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Nodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumeclaims/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads persistentvolumeclaims"),
						Operation:   to.Ptr("Gets/List persistentvolumeclaims resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Persistentvolumeclaims"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumeclaims/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes persistentvolumeclaims"),
						Operation:   to.Ptr("Creates/Updates persistentvolumeclaims resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Persistentvolumeclaims"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumeclaims/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes persistentvolumeclaims"),
						Operation:   to.Ptr("Deletes/DeletesCollection persistentvolumeclaims resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Persistentvolumeclaims"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads persistentvolumes"),
						Operation:   to.Ptr("Gets/List persistentvolumes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Persistentvolumes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumes/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes persistentvolumes"),
						Operation:   to.Ptr("Creates/Updates persistentvolumes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Persistentvolumes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumes/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes persistentvolumes"),
						Operation:   to.Ptr("Deletes/DeletesCollection persistentvolumes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Persistentvolumes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads pods"),
						Operation:   to.Ptr("Gets/List pods resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Pods"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes pods"),
						Operation:   to.Ptr("Creates/Updates pods resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Pods"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes pods"),
						Operation:   to.Ptr("Deletes/DeletesCollection pods resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Pods"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/exec/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Exec into pods resource"),
						Operation:   to.Ptr("Exec into pods resource "),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Pods"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/podtemplates/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads podtemplates"),
						Operation:   to.Ptr("Gets/List podtemplates resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podtemplates"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/podtemplates/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes podtemplates"),
						Operation:   to.Ptr("Creates/Updates podtemplates resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podtemplates"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/podtemplates/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes podtemplates"),
						Operation:   to.Ptr("Deletes/DeletesCollection podtemplates resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podtemplates"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/replicationcontrollers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads replicationcontrollers"),
						Operation:   to.Ptr("Gets/List replicationcontrollers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicationcontrollers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/replicationcontrollers/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes replicationcontrollers"),
						Operation:   to.Ptr("Creates/Updates replicationcontrollers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicationcontrollers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/replicationcontrollers/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes replicationcontrollers"),
						Operation:   to.Ptr("Deletes/DeletesCollection replicationcontrollers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicationcontrollers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resourcequotas/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads resourcequotas"),
						Operation:   to.Ptr("Gets/List resourcequotas resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Resourcequotas"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resourcequotas/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes resourcequotas"),
						Operation:   to.Ptr("Creates/Updates resourcequotas resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Resourcequotas"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resourcequotas/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes resourcequotas"),
						Operation:   to.Ptr("Deletes/DeletesCollection resourcequotas resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Resourcequotas"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/secrets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads secrets"),
						Operation:   to.Ptr("Gets/List secrets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Secrets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/secrets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes secrets"),
						Operation:   to.Ptr("Creates/Updates secrets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Secrets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/secrets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes secrets"),
						Operation:   to.Ptr("Deletes/DeletesCollection secrets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Secrets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads serviceaccounts"),
						Operation:   to.Ptr("Gets/List serviceaccounts resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Serviceaccounts"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes serviceaccounts"),
						Operation:   to.Ptr("Creates/Updates serviceaccounts resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Serviceaccounts"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes serviceaccounts"),
						Operation:   to.Ptr("Deletes/DeletesCollection serviceaccounts resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Serviceaccounts"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/services/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads services"),
						Operation:   to.Ptr("Gets/List services resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/services/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes services"),
						Operation:   to.Ptr("Creates/Updates services resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/services/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes services"),
						Operation:   to.Ptr("Deletes/DeletesCollection services resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/events.k8s.io/events/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads events"),
						Operation:   to.Ptr("Gets/List events resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/events.k8s.io/events/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes events"),
						Operation:   to.Ptr("Creates/Updates events resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/events.k8s.io/events/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes events"),
						Operation:   to.Ptr("Deletes/DeletesCollection events resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/daemonsets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads daemonsets"),
						Operation:   to.Ptr("Gets/List daemonsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Daemonsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/daemonsets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes daemonsets"),
						Operation:   to.Ptr("Creates/Updates daemonsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Daemonsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/daemonsets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes daemonsets"),
						Operation:   to.Ptr("Deletes/DeletesCollection daemonsets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Daemonsets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/deployments/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads deployments"),
						Operation:   to.Ptr("Gets/List deployments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/deployments/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes deployments"),
						Operation:   to.Ptr("Creates/Updates deployments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/deployments/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes deployments"),
						Operation:   to.Ptr("Deletes/DeletesCollection deployments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/ingresses/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ingresses"),
						Operation:   to.Ptr("Gets/List ingresses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ingresses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/ingresses/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes ingresses"),
						Operation:   to.Ptr("Creates/Updates ingresses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ingresses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/ingresses/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes ingresses"),
						Operation:   to.Ptr("Deletes/DeletesCollection ingresses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ingresses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/networkpolicies/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads networkpolicies"),
						Operation:   to.Ptr("Gets/List networkpolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networkpolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/networkpolicies/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes networkpolicies"),
						Operation:   to.Ptr("Creates/Updates networkpolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networkpolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/networkpolicies/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes networkpolicies"),
						Operation:   to.Ptr("Deletes/DeletesCollection networkpolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networkpolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/podsecuritypolicies/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads podsecuritypolicies"),
						Operation:   to.Ptr("Gets/List podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/podsecuritypolicies/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes podsecuritypolicies"),
						Operation:   to.Ptr("Creates/Updates podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/podsecuritypolicies/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes podsecuritypolicies"),
						Operation:   to.Ptr("Deletes/DeletesCollection podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/replicasets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads replicasets"),
						Operation:   to.Ptr("Gets/List replicasets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicasets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/replicasets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes replicasets"),
						Operation:   to.Ptr("Creates/Updates replicasets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicasets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/replicasets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes replicasets"),
						Operation:   to.Ptr("Deletes/DeletesCollection replicasets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Replicasets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/metrics.k8s.io/pods/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads pods"),
						Operation:   to.Ptr("Gets/List pods resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Pods"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/metrics.k8s.io/nodes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads nodes"),
						Operation:   to.Ptr("Gets/List nodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Nodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads networkpolicies"),
						Operation:   to.Ptr("Gets/List networkpolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networkpolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes networkpolicies"),
						Operation:   to.Ptr("Creates/Updates networkpolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networkpolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes networkpolicies"),
						Operation:   to.Ptr("Deletes/DeletesCollection networkpolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networkpolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ingresses"),
						Operation:   to.Ptr("Gets/List ingresses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ingresses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes ingresses"),
						Operation:   to.Ptr("Creates/Updates ingresses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ingresses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes ingresses"),
						Operation:   to.Ptr("Deletes/DeletesCollection ingresses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ingresses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/node.k8s.io/runtimeclasses/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads runtimeclasses"),
						Operation:   to.Ptr("Gets/List runtimeclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Runtimeclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/node.k8s.io/runtimeclasses/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes runtimeclasses"),
						Operation:   to.Ptr("Creates/Updates runtimeclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Runtimeclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/node.k8s.io/runtimeclasses/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes runtimeclasses"),
						Operation:   to.Ptr("Deletes/DeletesCollection runtimeclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Runtimeclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/api/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads api"),
						Operation:   to.Ptr("Gets/List api resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Api"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/api/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads api/v1"),
						Operation:   to.Ptr("Gets/List api/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Api/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apis"),
						Operation:   to.Ptr("Gets/List apis resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/admissionregistration.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads admissionregistration.k8s.io"),
						Operation:   to.Ptr("Gets/List admissionregistration.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Admissionregistration.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/admissionregistration.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads admissionregistration.k8s.io/v1"),
						Operation:   to.Ptr("Gets/List admissionregistration.k8s.io/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Admissionregistration.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/admissionregistration.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads admissionregistration.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List admissionregistration.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Admissionregistration.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiextensions.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiextensions.k8s.io"),
						Operation:   to.Ptr("Gets/List apiextensions.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiextensions.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiextensions.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiextensions.k8s.io/v1"),
						Operation:   to.Ptr("Gets/List apiextensions.k8s.io/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiextensions.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiextensions.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiextensions.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List apiextensions.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiextensions.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiregistration.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiregistration.k8s.io"),
						Operation:   to.Ptr("Gets/List apiregistration.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiregistration.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiregistration.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiregistration.k8s.io/v1"),
						Operation:   to.Ptr("Gets/List apiregistration.k8s.io/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiregistration.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiregistration.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiregistration.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List apiregistration.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apiregistration.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apps"),
						Operation:   to.Ptr("Gets/List apps resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apps/v1"),
						Operation:   to.Ptr("Gets/List apps/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apps/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apps/v1beta1"),
						Operation:   to.Ptr("Gets/List apps/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apps/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/v1beta2/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apps/v1beta2"),
						Operation:   to.Ptr("Gets/List apps/v1beta2 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Apps/V1beta2"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authentication.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads authentication.k8s.io"),
						Operation:   to.Ptr("Gets/List authentication.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Authentication.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authentication.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads authentication.k8s.io/v1"),
						Operation:   to.Ptr("Gets/List authentication.k8s.io/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Authentication.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authentication.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads authentication.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List authentication.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Authentication.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authorization.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads authorization.k8s.io"),
						Operation:   to.Ptr("Gets/List authorization.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Authorization.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authorization.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads authorization.k8s.io/v1"),
						Operation:   to.Ptr("Gets/List authorization.k8s.io/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Authorization.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authorization.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads authorization.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List authorization.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Authorization.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoscaling"),
						Operation:   to.Ptr("Gets/List autoscaling resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Autoscaling"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoscaling/v1"),
						Operation:   to.Ptr("Gets/List autoscaling/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Autoscaling/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/v2beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoscaling/v2beta1"),
						Operation:   to.Ptr("Gets/List autoscaling/v2beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Autoscaling/V2beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/v2beta2/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoscaling/v2beta2"),
						Operation:   to.Ptr("Gets/List autoscaling/v2beta2 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Autoscaling/V2beta2"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/batch/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads batch"),
						Operation:   to.Ptr("Gets/List batch resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Batch"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/batch/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads batch/v1"),
						Operation:   to.Ptr("Gets/List batch/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Batch/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/batch/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads batch/v1beta1"),
						Operation:   to.Ptr("Gets/List batch/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Batch/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/certificates.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads certificates.k8s.io"),
						Operation:   to.Ptr("Gets/List certificates.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Certificates.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/certificates.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads certificates.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List certificates.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Certificates.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/coordination.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads coordination.k8s.io"),
						Operation:   to.Ptr("Gets/List coordination.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Coordination.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/coordination.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads coordination/v1"),
						Operation:   to.Ptr("Gets/List coordination/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Coordination.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/coordination.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads coordination.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List coordination.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Coordination.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/events.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads events.k8s.io"),
						Operation:   to.Ptr("Gets/List events.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/events.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads events.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List events.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Events.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/extensions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads extensions"),
						Operation:   to.Ptr("Gets/List extensions resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/extensions/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads extensions/v1beta1"),
						Operation:   to.Ptr("Gets/List extensions/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Extensions/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/metrics.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads metrics.k8s.io"),
						Operation:   to.Ptr("Gets/List metrics.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Metrics.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/metrics.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads metrics.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List metrics.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Metrics.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/networking.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads networking.k8s.io"),
						Operation:   to.Ptr("Gets/List networking.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networking.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/networking.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads networking/v1"),
						Operation:   to.Ptr("Gets/List networking/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networking.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/networking.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads networking.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List networking.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Networking.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/node.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads node.k8s.io"),
						Operation:   to.Ptr("Gets/List node.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Node.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/node.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads node.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List node.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Node.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/policy/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads policy"),
						Operation:   to.Ptr("Gets/List policy resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Policy"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/policy/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads policy/v1beta1"),
						Operation:   to.Ptr("Gets/List policy/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Policy/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/rbac.authorization.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads rbac.authorization.k8s.io"),
						Operation:   to.Ptr("Gets/List rbac.authorization.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Rbac.Authorization.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/rbac.authorization.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads rbac.authorization/v1"),
						Operation:   to.Ptr("Gets/List rbac.authorization/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Rbac.Authorization.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/rbac.authorization.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads rbac.authorization.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List rbac.authorization.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Rbac.Authorization.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/scheduling.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads scheduling.k8s.io"),
						Operation:   to.Ptr("Gets/List scheduling.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Scheduling.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/scheduling.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads scheduling/v1"),
						Operation:   to.Ptr("Gets/List scheduling/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Scheduling.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/scheduling.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads scheduling.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List scheduling.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Scheduling.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/storage.k8s.io/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads storage.k8s.io"),
						Operation:   to.Ptr("Gets/List storage.k8s.io resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Storage.K8s.Io"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/storage.k8s.io/v1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads storage/v1"),
						Operation:   to.Ptr("Gets/List storage/v1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Storage.K8s.Io/V1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/storage.k8s.io/v1beta1/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads storage.k8s.io/v1beta1"),
						Operation:   to.Ptr("Gets/List storage.k8s.io/v1beta1 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Storage.K8s.Io/V1beta1"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads healthz"),
						Operation:   to.Ptr("Gets/List healthz resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/autoregister-completion/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoregister-completion"),
						Operation:   to.Ptr("Gets/List autoregister-completion resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Autoregister-Completion"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/etcd/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads etcd"),
						Operation:   to.Ptr("Gets/List etcd resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Etcd"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/log/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads log"),
						Operation:   to.Ptr("Gets/List log resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Log"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/ping/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ping"),
						Operation:   to.Ptr("Gets/List ping resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Ping"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/apiservice-openapi-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-openapi-controller"),
						Operation:   to.Ptr("Gets/List apiservice-openapi-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Apiservice-Openapi-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/apiservice-registration-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-registration-controller"),
						Operation:   to.Ptr("Gets/List apiservice-registration-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Apiservice-Registration-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/apiservice-status-available-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-status-available-controller"),
						Operation:   to.Ptr("Gets/List apiservice-status-available-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Apiservice-Status-Available-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/bootstrap-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-controller"),
						Operation:   to.Ptr("Gets/List bootstrap-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Bootstrap-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/ca-registration/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ca-registration"),
						Operation:   to.Ptr("Gets/List ca-registration resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Ca-Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/crd-informer-synced/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads crd-informer-synced"),
						Operation:   to.Ptr("Gets/List crd-informer-synced resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Crd-Informer-Synced"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/generic-apiserver-start-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads generic-apiserver-start-informers"),
						Operation:   to.Ptr("Gets/List generic-apiserver-start-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Generic-Apiserver-Start-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/kube-apiserver-autoregistration/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads kube-apiserver-autoregistration"),
						Operation:   to.Ptr("Gets/List kube-apiserver-autoregistration resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Kube-Apiserver-Autoregistration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/rbac/bootstrap-roles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-roles"),
						Operation:   to.Ptr("Gets/List bootstrap-roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Bootstrap-Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/scheduling/bootstrap-system-priority-classes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-system-priority-classes"),
						Operation:   to.Ptr("Gets/List bootstrap-system-priority-classes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Bootstrap-System-Priority-Classes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-apiextensions-controllers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-apiextensions-controllers"),
						Operation:   to.Ptr("Gets/List start-apiextensions-controllers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Start-Apiextensions-Controllers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-apiextensions-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-apiextensions-informers"),
						Operation:   to.Ptr("Gets/List start-apiextensions-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Start-Apiextensions-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-kube-aggregator-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-kube-aggregator-informers"),
						Operation:   to.Ptr("Gets/List start-kube-aggregator-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Start-Kube-Aggregator-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-kube-apiserver-admission-initializer/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-kube-apiserver-admission-initializer"),
						Operation:   to.Ptr("Gets/List start-kube-apiserver-admission-initializer resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Healthz/Poststarthook/Start-Kube-Apiserver-Admission-Initializer"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads livez"),
						Operation:   to.Ptr("Gets/List livez resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/autoregister-completion/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoregister-completion"),
						Operation:   to.Ptr("Gets/List autoregister-completion resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Autoregister-Completion"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/etcd/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads etcd"),
						Operation:   to.Ptr("Gets/List etcd resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Etcd"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/log/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads log"),
						Operation:   to.Ptr("Gets/List log resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Log"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/ping/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ping"),
						Operation:   to.Ptr("Gets/List ping resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Ping"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/apiservice-openapi-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-openapi-controller"),
						Operation:   to.Ptr("Gets/List apiservice-openapi-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Apiservice-Openapi-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/apiservice-registration-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-registration-controller"),
						Operation:   to.Ptr("Gets/List apiservice-registration-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Apiservice-Registration-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/apiservice-status-available-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-status-available-controller"),
						Operation:   to.Ptr("Gets/List apiservice-status-available-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Apiservice-Status-Available-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/bootstrap-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-controller"),
						Operation:   to.Ptr("Gets/List bootstrap-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Bootstrap-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/ca-registration/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ca-registration"),
						Operation:   to.Ptr("Gets/List ca-registration resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Ca-Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/crd-informer-synced/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads crd-informer-synced"),
						Operation:   to.Ptr("Gets/List crd-informer-synced resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Crd-Informer-Synced"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/generic-apiserver-start-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads generic-apiserver-start-informers"),
						Operation:   to.Ptr("Gets/List generic-apiserver-start-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Generic-Apiserver-Start-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/kube-apiserver-autoregistration/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads kube-apiserver-autoregistration"),
						Operation:   to.Ptr("Gets/List kube-apiserver-autoregistration resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Kube-Apiserver-Autoregistration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/rbac/bootstrap-roles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-roles"),
						Operation:   to.Ptr("Gets/List bootstrap-roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Bootstrap-Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/scheduling/bootstrap-system-priority-classes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-system-priority-classes"),
						Operation:   to.Ptr("Gets/List bootstrap-system-priority-classes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Bootstrap-System-Priority-Classes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-apiextensions-controllers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-apiextensions-controllers"),
						Operation:   to.Ptr("Gets/List start-apiextensions-controllers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Start-Apiextensions-Controllers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-apiextensions-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-apiextensions-informers"),
						Operation:   to.Ptr("Gets/List start-apiextensions-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Start-Apiextensions-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-kube-aggregator-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-kube-aggregator-informers"),
						Operation:   to.Ptr("Gets/List start-kube-aggregator-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Start-Kube-Aggregator-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-kube-apiserver-admission-initializer/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-kube-apiserver-admission-initializer"),
						Operation:   to.Ptr("Gets/List start-kube-apiserver-admission-initializer resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Livez/Poststarthook/Start-Kube-Apiserver-Admission-Initializer"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/logs/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads logs"),
						Operation:   to.Ptr("Gets/List logs resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Logs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/metrics/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads metrics"),
						Operation:   to.Ptr("Gets/List metrics resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Metrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/openapi/v2/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads v2"),
						Operation:   to.Ptr("Gets/List v2 resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Openapi/V2"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads readyz"),
						Operation:   to.Ptr("Gets/List readyz resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/autoregister-completion/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads autoregister-completion"),
						Operation:   to.Ptr("Gets/List autoregister-completion resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Autoregister-Completion"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/etcd/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads etcd"),
						Operation:   to.Ptr("Gets/List etcd resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Etcd"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/log/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads log"),
						Operation:   to.Ptr("Gets/List log resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Log"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/ping/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ping"),
						Operation:   to.Ptr("Gets/List ping resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Ping"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/apiservice-openapi-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-openapi-controller"),
						Operation:   to.Ptr("Gets/List apiservice-openapi-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Apiservice-Openapi-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/apiservice-registration-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-registration-controller"),
						Operation:   to.Ptr("Gets/List apiservice-registration-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Apiservice-Registration-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/apiservice-status-available-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads apiservice-status-available-controller"),
						Operation:   to.Ptr("Gets/List apiservice-status-available-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Apiservice-Status-Available-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/bootstrap-controller/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-controller"),
						Operation:   to.Ptr("Gets/List bootstrap-controller resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Bootstrap-Controller"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/ca-registration/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ca-registration"),
						Operation:   to.Ptr("Gets/List ca-registration resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Ca-Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/crd-informer-synced/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads crd-informer-synced"),
						Operation:   to.Ptr("Gets/List crd-informer-synced resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Crd-Informer-Synced"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/generic-apiserver-start-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads generic-apiserver-start-informers"),
						Operation:   to.Ptr("Gets/List generic-apiserver-start-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Generic-Apiserver-Start-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/kube-apiserver-autoregistration/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads kube-apiserver-autoregistration"),
						Operation:   to.Ptr("Gets/List kube-apiserver-autoregistration resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Kube-Apiserver-Autoregistration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/rbac/bootstrap-roles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-roles"),
						Operation:   to.Ptr("Gets/List bootstrap-roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Bootstrap-Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/scheduling/bootstrap-system-priority-classes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads bootstrap-system-priority-classes"),
						Operation:   to.Ptr("Gets/List bootstrap-system-priority-classes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Bootstrap-System-Priority-Classes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-apiextensions-controllers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-apiextensions-controllers"),
						Operation:   to.Ptr("Gets/List start-apiextensions-controllers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Start-Apiextensions-Controllers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-apiextensions-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-apiextensions-informers"),
						Operation:   to.Ptr("Gets/List start-apiextensions-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Start-Apiextensions-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-kube-aggregator-informers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-kube-aggregator-informers"),
						Operation:   to.Ptr("Gets/List start-kube-aggregator-informers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Start-Kube-Aggregator-Informers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-kube-apiserver-admission-initializer/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads start-kube-apiserver-admission-initializer"),
						Operation:   to.Ptr("Gets/List start-kube-apiserver-admission-initializer resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Poststarthook/Start-Kube-Apiserver-Admission-Initializer"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/shutdown/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads shutdown"),
						Operation:   to.Ptr("Gets/List shutdown resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Readyz/Shutdown"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/resetMetrics/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads resetMetrics"),
						Operation:   to.Ptr("Gets/List resetMetrics resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Resetmetrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/swagger-ui/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads swagger-ui"),
						Operation:   to.Ptr("Gets/List swagger-ui resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Swagger-Ui"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/swagger-api/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads swagger-api"),
						Operation:   to.Ptr("Gets/List swagger-api resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Swagger-Api"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/ui/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads ui"),
						Operation:   to.Ptr("Gets/List ui resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Ui"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/version/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads version"),
						Operation:   to.Ptr("Gets/List version resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Version"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads poddisruptionbudgets"),
						Operation:   to.Ptr("Gets/List poddisruptionbudgets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Poddisruptionbudgets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes poddisruptionbudgets"),
						Operation:   to.Ptr("Creates/Updates poddisruptionbudgets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Poddisruptionbudgets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes poddisruptionbudgets"),
						Operation:   to.Ptr("Deletes/DeletesCollection poddisruptionbudgets resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Poddisruptionbudgets"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads podsecuritypolicies"),
						Operation:   to.Ptr("Gets/List podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes podsecuritypolicies"),
						Operation:   to.Ptr("Creates/Updates podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes podsecuritypolicies"),
						Operation:   to.Ptr("Deletes/DeletesCollection podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterrolebindings/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads clusterrolebindings"),
						Operation:   to.Ptr("Gets/List clusterrolebindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterrolebindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterrolebindings/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes clusterrolebindings"),
						Operation:   to.Ptr("Creates/Updates clusterrolebindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterrolebindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterrolebindings/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes clusterrolebindings"),
						Operation:   to.Ptr("Deletes/DeletesCollection clusterrolebindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterrolebindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads clusterroles"),
						Operation:   to.Ptr("Gets/List clusterroles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterroles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes clusterroles"),
						Operation:   to.Ptr("Creates/Updates clusterroles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterroles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes clusterroles"),
						Operation:   to.Ptr("Deletes/DeletesCollection clusterroles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterroles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/rolebindings/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads rolebindings"),
						Operation:   to.Ptr("Gets/List rolebindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Rolebindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/rolebindings/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes rolebindings"),
						Operation:   to.Ptr("Creates/Updates rolebindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Rolebindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/rolebindings/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes rolebindings"),
						Operation:   to.Ptr("Deletes/DeletesCollection rolebindings resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Rolebindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads roles"),
						Operation:   to.Ptr("Gets/List roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes roles"),
						Operation:   to.Ptr("Creates/Updates roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes roles"),
						Operation:   to.Ptr("Deletes/DeletesCollection roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/scheduling.k8s.io/priorityclasses/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads priorityclasses"),
						Operation:   to.Ptr("Gets/List priorityclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Priorityclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/scheduling.k8s.io/priorityclasses/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes priorityclasses"),
						Operation:   to.Ptr("Creates/Updates priorityclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Priorityclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/scheduling.k8s.io/priorityclasses/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes priorityclasses"),
						Operation:   to.Ptr("Deletes/DeletesCollection priorityclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Priorityclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/use/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Use action on podsecuritypolicies"),
						Operation:   to.Ptr("Use podsecuritypolicies resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Podsecuritypolicies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/bind/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Binds clusterroles"),
						Operation:   to.Ptr("Bind clusterroles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterroles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/escalate/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Escalates"),
						Operation:   to.Ptr("Escalate clusterroles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Clusterroles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/bind/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Binds roles"),
						Operation:   to.Ptr("Bind roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/escalate/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Escalates roles"),
						Operation:   to.Ptr("Escalate roles resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Roles"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/impersonate/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Impersonate serviceaccounts"),
						Operation:   to.Ptr("Impersonate serviceaccounts resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Serviceaccounts"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/users/impersonate/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Impersonate users"),
						Operation:   to.Ptr("Impersonate users resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Users"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/groups/impersonate/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Impersonate groups"),
						Operation:   to.Ptr("Impersonate groups resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Groups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/authentication.k8s.io/userextras/impersonate/action"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Impersonate userextras"),
						Operation:   to.Ptr("Impersonate userextras resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Userextras"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/storageclasses/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads storageclasses"),
						Operation:   to.Ptr("Gets/List storageclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Storageclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/storageclasses/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes storageclasses"),
						Operation:   to.Ptr("Creates/Updates storageclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Storageclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/storageclasses/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes storageclasses"),
						Operation:   to.Ptr("Deletes/DeletesCollection storageclasses resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Storageclasses"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/volumeattachments/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads volumeattachments"),
						Operation:   to.Ptr("Gets/List volumeattachments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Volumeattachments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/volumeattachments/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes volumeattachments"),
						Operation:   to.Ptr("Creates/Updates volumeattachments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Volumeattachments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/volumeattachments/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes volumeattachments"),
						Operation:   to.Ptr("Deletes/DeletesCollection volumeattachments resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Volumeattachments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csidrivers/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads csidrivers"),
						Operation:   to.Ptr("Gets/List csidrivers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Csidrivers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csidrivers/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes csidrivers"),
						Operation:   to.Ptr("Creates/Updates csidrivers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Csidrivers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csidrivers/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes csidrivers"),
						Operation:   to.Ptr("Deletes/DeletesCollection csidrivers resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Csidrivers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csinodes/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Reads csinodes"),
						Operation:   to.Ptr("Gets/List csinodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Csinodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csinodes/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Writes csinodes"),
						Operation:   to.Ptr("Creates/Updates csinodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Csinodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csinodes/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Deletes csinodes"),
						Operation:   to.Ptr("Deletes/DeletesCollection csinodes resource"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Csinodes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the available metrics for Managed Cluster"),
						Operation:   to.Ptr("Read Managed Cluster metric definitions"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("The metric definition of Managed Cluster"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Gets the available logs for Managed Cluster"),
						Operation:   to.Ptr("Read Managed Cluster log definitions"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("The log definition of Managed Cluster"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/openShiftManagedClusters/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a Open Shift Managed Cluster"),
						Operation:   to.Ptr("Get Open Shift Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Open Shift Managed Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/openShiftManagedClusters/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new Open Shift Managed Cluster or updates an existing one"),
						Operation:   to.Ptr("Create or Update Open Shift Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Open Shift Managed Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/openShiftManagedClusters/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Delete a Open Shift Managed Cluster"),
						Operation:   to.Ptr("Delete Open Shift Managed Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Open Shift Managed Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/openShiftClusters/read"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Get a Open Shift Cluster"),
						Operation:   to.Ptr("Get Open Shift Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Open Shift Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/openShiftClusters/write"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Creates a new Open Shift Cluster or updates an existing one"),
						Operation:   to.Ptr("Create or Update Open Shift Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Open Shift Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ContainerService/openShiftClusters/delete"),
					Display: &armcontainerservice.OperationValueDisplay{
						Description: to.Ptr("Delete a Open Shift Cluster"),
						Operation:   to.Ptr("Delete Open Shift Cluster"),
						Provider:    to.Ptr("Microsoft Container Service"),
						Resource:    to.Ptr("Open Shift Cluster"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/Operation_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_GetOSOptions(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ContainerServiceGetOSOptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Container Service OS Options"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.GetOSOptions(ctx,
		"location1",
		&armcontainerservice.ManagedClustersClientGetOSOptionsOptions{ResourceType: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ContainerServiceGetOSOptions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.OSOptionProfile{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ContainerService/locations/osOptions"),
			ID:   to.Ptr("/subscriptions/subid1/providers/Microsoft.ContainerService/locations/location1/osOptions/default"),
			Properties: &armcontainerservice.OSOptionPropertyList{
				OSOptionPropertyList: []*armcontainerservice.OSOptionProperty{
					{
						EnableFipsImage: to.Ptr(false),
						OSType:          to.Ptr("Linux"),
					},
					{
						EnableFipsImage: to.Ptr(false),
						OSType:          to.Ptr("Windows"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OSOptionProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OSOptionProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ContainerServiceGetOSOptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_List(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Managed Clusters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.ManagedClusterListResult{
			Value: []*armcontainerservice.ManagedCluster{
				{
					Name:     to.Ptr("clustername1"),
					Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
					ID:       to.Ptr("/subscriptions/subid1/providers/Microsoft.ContainerService/managedClusters"),
					Location: to.Ptr("location1"),
					Tags: map[string]*string{
						"archv2": to.Ptr(""),
						"tier":   to.Ptr("production"),
					},
					Properties: &armcontainerservice.ManagedClusterProperties{
						AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
							{
								Count:               to.Ptr[int32](3),
								MaxPods:             to.Ptr[int32](110),
								OrchestratorVersion: to.Ptr("1.9.6"),
								OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
								ProvisioningState:   to.Ptr("Succeeded"),
								VMSize:              to.Ptr("Standard_DS1_v2"),
								Name:                to.Ptr("nodepool1"),
							}},
						DiskEncryptionSetID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
						DNSPrefix:           to.Ptr("dnsprefix1"),
						EnableRBAC:          to.Ptr(false),
						Fqdn:                to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
						KubernetesVersion:   to.Ptr("1.9.6"),
						LinuxProfile: &armcontainerservice.LinuxProfile{
							AdminUsername: to.Ptr("azureuser"),
							SSH: &armcontainerservice.SSHConfiguration{
								PublicKeys: []*armcontainerservice.SSHPublicKey{
									{
										KeyData: to.Ptr("keydata"),
									}},
							},
						},
						MaxAgentPools: to.Ptr[int32](1),
						NetworkProfile: &armcontainerservice.NetworkProfile{
							DNSServiceIP:     to.Ptr("10.0.0.10"),
							DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
							NetworkPlugin:    to.Ptr(armcontainerservice.NetworkPluginKubenet),
							PodCidr:          to.Ptr("10.244.0.0/16"),
							ServiceCidr:      to.Ptr("10.0.0.0/16"),
						},
						NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
						ProvisioningState: to.Ptr("Succeeded"),
						ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
							ClientID: to.Ptr("clientid"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Clusters by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.ManagedClusterListResult{
			Value: []*armcontainerservice.ManagedCluster{
				{
					Name:     to.Ptr("clustername1"),
					Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
					ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters"),
					Location: to.Ptr("location1"),
					Tags: map[string]*string{
						"archv2": to.Ptr(""),
						"tier":   to.Ptr("production"),
					},
					Properties: &armcontainerservice.ManagedClusterProperties{
						AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
							{
								Count:               to.Ptr[int32](3),
								MaxPods:             to.Ptr[int32](110),
								OrchestratorVersion: to.Ptr("1.9.6"),
								OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
								ProvisioningState:   to.Ptr("Succeeded"),
								VMSize:              to.Ptr("Standard_DS1_v2"),
								Name:                to.Ptr("nodepool1"),
							}},
						DiskEncryptionSetID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
						DNSPrefix:           to.Ptr("dnsprefix1"),
						EnableRBAC:          to.Ptr(false),
						Fqdn:                to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
						KubernetesVersion:   to.Ptr("1.9.6"),
						LinuxProfile: &armcontainerservice.LinuxProfile{
							AdminUsername: to.Ptr("azureuser"),
							SSH: &armcontainerservice.SSHConfiguration{
								PublicKeys: []*armcontainerservice.SSHPublicKey{
									{
										KeyData: to.Ptr("keydata"),
									}},
							},
						},
						MaxAgentPools: to.Ptr[int32](1),
						NetworkProfile: &armcontainerservice.NetworkProfile{
							DNSServiceIP:     to.Ptr("10.0.0.10"),
							DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
							NetworkPlugin:    to.Ptr(armcontainerservice.NetworkPluginKubenet),
							PodCidr:          to.Ptr("10.244.0.0/16"),
							ServiceCidr:      to.Ptr("10.0.0.0/16"),
						},
						NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
						ProvisioningState: to.Ptr("Succeeded"),
						ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
							ClientID: to.Ptr("clientid"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_GetUpgradeProfile(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGetUpgradeProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Upgrade Profile for Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.GetUpgradeProfile(ctx,
		"rg1",
		"clustername1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGetUpgradeProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedClusterUpgradeProfile{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/upgradeprofiles"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/upgradeprofiles/default"),
			Properties: &armcontainerservice.ManagedClusterUpgradeProfileProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterPoolUpgradeProfile{
					{
						Name:              to.Ptr("agent"),
						KubernetesVersion: to.Ptr("1.7.7"),
						OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
						Upgrades: []*armcontainerservice.ManagedClusterPoolUpgradeProfileUpgradesItem{
							{
								KubernetesVersion: to.Ptr("1.7.9"),
							},
							{
								IsPreview:         to.Ptr(true),
								KubernetesVersion: to.Ptr("1.7.11"),
							}},
					}},
				ControlPlaneProfile: &armcontainerservice.ManagedClusterPoolUpgradeProfile{
					Name:              to.Ptr("master"),
					KubernetesVersion: to.Ptr("1.7.7"),
					OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
					Upgrades: []*armcontainerservice.ManagedClusterPoolUpgradeProfileUpgradesItem{
						{
							IsPreview:         to.Ptr(true),
							KubernetesVersion: to.Ptr("1.7.9"),
						},
						{
							KubernetesVersion: to.Ptr("1.7.11"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedClusterUpgradeProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedClusterUpgradeProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGetUpgradeProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_GetAccessProfile(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGetAccessProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.GetAccessProfile(ctx,
		"rg1",
		"clustername1",
		"clusterUser",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGetAccessProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedClusterAccessProfile{
			Name:     to.Ptr("clusterUser"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters/AccessProfiles"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/accessProfiles/clusterUser"),
			Location: to.Ptr("location1"),
			Properties: &armcontainerservice.AccessProfile{
				KubeConfig: []byte("kubeConfig1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedClusterAccessProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedClusterAccessProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGetAccessProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_ListClusterAdminCredentials(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.ListClusterAdminCredentials(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientListClusterAdminCredentialsOptions{ServerFqdn: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.CredentialResults{
			Kubeconfigs: []*armcontainerservice.CredentialResult{
				{
					Name:  to.Ptr("credentialName1"),
					Value: []byte("credentialValue1"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CredentialResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CredentialResults)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_ListClusterUserCredentials(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.ListClusterUserCredentials(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientListClusterUserCredentialsOptions{ServerFqdn: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.CredentialResults{
			Kubeconfigs: []*armcontainerservice.CredentialResult{
				{
					Name:  to.Ptr("credentialName1"),
					Value: []byte("credentialValue1"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CredentialResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CredentialResults)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_ListClusterMonitoringUserCredentials(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.ListClusterMonitoringUserCredentials(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsOptions{ServerFqdn: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.CredentialResults{
			Kubeconfigs: []*armcontainerservice.CredentialResult{
				{
					Name:  to.Ptr("credentialName1"),
					Value: []byte("credentialValue1"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CredentialResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CredentialResults)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersListClusterCredentialResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_Get(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"clustername1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						MaxPods:             to.Ptr[int32](110),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						UpgradeSettings: &armcontainerservice.AgentPoolUpgradeSettings{
							MaxSurge: to.Ptr("33%"),
						},
						VMSize: to.Ptr("Standard_DS1_v2"),
						Name:   to.Ptr("nodepool1"),
					}},
				AzurePortalFQDN:     to.Ptr("dnsprefix1-abcd1234.portal.hcp.eastus.azmk8s.io"),
				DiskEncryptionSetID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:           to.Ptr("dnsprefix1"),
				EnableRBAC:          to.Ptr(false),
				Fqdn:                to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:   to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						OutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileOutboundIPs{
							PublicIPs: []*armcontainerservice.ResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/customeroutboundip1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/customeroutboundip2"),
								}},
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersAssociate_CRG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Associate Managed Cluster with Capacity Reservation Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						CapacityReservationGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/capacityReservationGroups/crg1"),
						Count:                      to.Ptr[int32](3),
						EnableNodePublicIP:         to.Ptr(true),
						Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:                     to.Ptr("Standard_DS2_v2"),
						Name:                       to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersAssociate_CRG.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersAssociate_CRG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						CapacityReservationGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/capacityReservationGroups/crg1"),
						Count:                      to.Ptr[int32](3),
						EnableNodePublicIP:         to.Ptr(true),
						MaxPods:                    to.Ptr[int32](110),
						Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion:        to.Ptr("1.9.6"),
						OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:          to.Ptr("Succeeded"),
						VMSize:                     to.Ptr("Standard_DS2_v2"),
						Name:                       to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersAssociate_CRG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Snapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster using an agent pool snapshot"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:  to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count: to.Ptr[int32](3),
						CreationData: &armcontainerservice.CreationData{
							SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
						},
						EnableFIPS:         to.Ptr(true),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(false),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Snapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Snapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:  to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count: to.Ptr[int32](3),
						CreationData: &armcontainerservice.CreationData{
							SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
						},
						EnableFIPS:          to.Ptr(true),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(false),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Snapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_ManagedNATGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with AKS-managed NAT gateway as outbound type"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(false),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					NatGatewayProfile: &armcontainerservice.ManagedClusterNATGatewayProfile{
						ManagedOutboundIPProfile: &armcontainerservice.ManagedClusterManagedOutboundIPProfile{
							Count: to.Ptr[int32](2),
						},
					},
					OutboundType: to.Ptr(armcontainerservice.OutboundTypeManagedNATGateway),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_ManagedNATGateway.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_ManagedNATGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(false),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					LoadBalancerSKU:  to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NatGatewayProfile: &armcontainerservice.ManagedClusterNATGatewayProfile{
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						ManagedOutboundIPProfile: &armcontainerservice.ManagedClusterManagedOutboundIPProfile{
							Count: to.Ptr[int32](2),
						},
					},
					NetworkPlugin: to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:  to.Ptr(armcontainerservice.OutboundTypeManagedNATGateway),
					PodCidr:       to.Ptr("10.244.0.0/16"),
					ServiceCidr:   to.Ptr("10.0.0.0/16"),
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_ManagedNATGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with EncryptionAtHost enabled"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableEncryptionAtHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						MaxPods:                to.Ptr[int32](110),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:       to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion:    to.Ptr("1.9.6"),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:      to.Ptr("Succeeded"),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnabledFIPS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with FIPS enabled OS"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableFIPS:         to.Ptr(true),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(false),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnabledFIPS.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnabledFIPS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableFIPS:          to.Ptr(true),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(false),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnabledFIPS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_GPUMIG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with GPUMIG"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG3G),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_ND96asr_v4"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
					HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
					HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
					NoProxy: []*string{
						to.Ptr("localhost"),
						to.Ptr("127.0.0.1")},
					TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
				},
				KubernetesVersion: to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_GPUMIG.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_GPUMIG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						GpuInstanceProfile:  to.Ptr(armcontainerservice.GPUInstanceProfileMIG3G),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_ND96asr_v4"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
					HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
					HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
					NoProxy: []*string{
						to.Ptr("localhost"),
						to.Ptr("127.0.0.1")},
					TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
				},
				KubernetesVersion: to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_GPUMIG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_HTTPProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with HTTP proxy configured"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
					HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
					HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
					NoProxy: []*string{
						to.Ptr("localhost"),
						to.Ptr("127.0.0.1")},
					TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
				},
				KubernetesVersion: to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_HTTPProxy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_HTTPProxy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
					HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
					HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
					NoProxy: []*string{
						to.Ptr("localhost"),
						to.Ptr("127.0.0.1")},
					TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
				},
				KubernetesVersion: to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_HTTPProxy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_NodePublicIPPrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with Node Public IP Prefix"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                 to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                to.Ptr[int32](3),
						EnableNodePublicIP:   to.Ptr(true),
						Mode:                 to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodePublicIPPrefixID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix"),
						OSType:               to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:               to.Ptr("Standard_DS2_v2"),
						Name:                 to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_NodePublicIPPrefix.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_NodePublicIPPrefix.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                 to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                to.Ptr[int32](3),
						EnableNodePublicIP:   to.Ptr(true),
						MaxPods:              to.Ptr[int32](110),
						Mode:                 to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:     to.Ptr("AKSUbuntu:1604:2020.03.11"),
						NodePublicIPPrefixID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix"),
						OrchestratorVersion:  to.Ptr("1.9.6"),
						OSType:               to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:    to.Ptr("Succeeded"),
						VMSize:               to.Ptr("Standard_DS2_v2"),
						Name:                 to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_NodePublicIPPrefix.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_OSSKU.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with OSSKU"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSSKU:              to.Ptr(armcontainerservice.OSSKUCBLMariner),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
					HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
					HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
					NoProxy: []*string{
						to.Ptr("localhost"),
						to.Ptr("127.0.0.1")},
					TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
				},
				KubernetesVersion: to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_OSSKU.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_OSSKU.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSSKU:               to.Ptr(armcontainerservice.OSSKUCBLMariner),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
					HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
					HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
					NoProxy: []*string{
						to.Ptr("localhost"),
						to.Ptr("127.0.0.1")},
					TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
				},
				KubernetesVersion: to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_OSSKU.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PPG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with PPG"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                      to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                     to.Ptr[int32](3),
						EnableNodePublicIP:        to.Ptr(true),
						Mode:                      to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
						ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/proximityPlacementGroups/ppg1"),
						VMSize:                    to.Ptr("Standard_DS2_v2"),
						Name:                      to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PPG.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PPG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                      to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                     to.Ptr[int32](3),
						EnableNodePublicIP:        to.Ptr(true),
						MaxPods:                   to.Ptr[int32](110),
						Mode:                      to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:          to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion:       to.Ptr("1.9.6"),
						OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:         to.Ptr("Succeeded"),
						ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/proximityPlacementGroups/ppg1"),
						VMSize:                    to.Ptr("Standard_DS2_v2"),
						Name:                      to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PPG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PodIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with PodIdentity enabled"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				PodIdentityProfile: &armcontainerservice.ManagedClusterPodIdentityProfile{
					AllowNetworkPluginKubenet: to.Ptr(true),
					Enabled:                   to.Ptr(true),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PodIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PodIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				PodIdentityProfile: &armcontainerservice.ManagedClusterPodIdentityProfile{
					AllowNetworkPluginKubenet: to.Ptr(true),
					Enabled:                   to.Ptr(true),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PodIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DisableRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with RunCommand disabled"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
					DisableRunCommand: to.Ptr(true),
				},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DisableRunCommand.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DisableRunCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						MaxPods:                to.Ptr[int32](110),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:       to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion:    to.Ptr("1.9.6"),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:      to.Ptr("Succeeded"),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
					DisableRunCommand: to.Ptr(true),
				},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-ee788a1f.hcp.location1.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				PrivateFQDN:       to.Ptr("dnsprefix1-aae7e0f0.5cef6058-b6b5-414d-8cb1-4bd14eb0b15c.privatelink.location1.azmk8s.io"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DisableRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_SecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with Security Profile configured"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				DNSPrefix:         to.Ptr("dnsprefix1"),
				KubernetesVersion: to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				SecurityProfile: &armcontainerservice.ManagedClusterSecurityProfile{
					AzureDefender: &armcontainerservice.ManagedClusterSecurityProfileAzureDefender{
						Enabled:                         to.Ptr(true),
						LogAnalyticsWorkspaceResourceID: to.Ptr("/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME"),
					},
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_SecurityProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_SecurityProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				SecurityProfile: &armcontainerservice.ManagedClusterSecurityProfile{
					AzureDefender: &armcontainerservice.ManagedClusterSecurityProfileAzureDefender{
						Enabled:                         to.Ptr(true),
						LogAnalyticsWorkspaceResourceID: to.Ptr("/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME"),
					},
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_SecurityProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableUltraSSD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with UltraSSD enabled"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						EnableUltraSSD:     to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableUltraSSD.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableUltraSSD.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						EnableUltraSSD:      to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_EnableUltraSSD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UserAssignedNATGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with user-assigned NAT gateway as outbound type"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(false),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS2_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeUserAssignedNATGateway),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UserAssignedNATGateway.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UserAssignedNATGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(false),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS2_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					LoadBalancerSKU:  to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:    to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:     to.Ptr(armcontainerservice.OutboundTypeUserAssignedNATGateway),
					PodCidr:          to.Ptr("10.244.0.0/16"),
					ServiceCidr:      to.Ptr("10.0.0.0/16"),
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UserAssignedNATGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Private Cluster with Public FQDN specified"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
					EnablePrivateCluster:           to.Ptr(true),
					EnablePrivateClusterPublicFQDN: to.Ptr(true),
				},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						MaxPods:                to.Ptr[int32](110),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:       to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion:    to.Ptr("1.9.6"),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:      to.Ptr("Succeeded"),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
					EnablePrivateCluster:           to.Ptr(true),
					EnablePrivateClusterPublicFQDN: to.Ptr(true),
					PrivateDNSZone:                 to.Ptr("system"),
				},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-ee788a1f.hcp.location1.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				PrivateFQDN:       to.Ptr("dnsprefix1-aae7e0f0.5cef6058-b6b5-414d-8cb1-4bd14eb0b15c.privatelink.location1.azmk8s.io"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Private Cluster with fqdn subdomain specified"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
					EnablePrivateCluster: to.Ptr(true),
					PrivateDNSZone:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io"),
				},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				FqdnSubdomain:           to.Ptr("domain1"),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						Count:                  to.Ptr[int32](3),
						EnableEncryptionAtHost: to.Ptr(true),
						EnableNodePublicIP:     to.Ptr(true),
						MaxPods:                to.Ptr[int32](110),
						Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:       to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion:    to.Ptr("1.9.6"),
						OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:      to.Ptr("Succeeded"),
						VMSize:                 to.Ptr("Standard_DS2_v2"),
						Name:                   to.Ptr("nodepool1"),
					}},
				APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
					EnablePrivateCluster: to.Ptr(true),
					PrivateDNSZone:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io"),
				},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				FqdnSubdomain:           to.Ptr("domain1"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				PrivateFQDN:       to.Ptr("domain1.privatelink.location1.azmk8s.io"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update AAD Managed Cluster with EnableAzureRBAC"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AADProfile: &armcontainerservice.ManagedClusterAADProfile{
					EnableAzureRBAC: to.Ptr(true),
					Managed:         to.Ptr(true),
				},
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS1_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AADProfile: &armcontainerservice.ManagedClusterAADProfile{
					EnableAzureRBAC: to.Ptr(true),
					Managed:         to.Ptr(true),
					TenantID:        to.Ptr("tenantID"),
				},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						ScaleDownMode:      to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
						VMSize:             to.Ptr("Standard_DS1_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					BalanceSimilarNodeGroups: to.Ptr("true"),
					Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
					MaxNodeProvisionTime:     to.Ptr("15m"),
					NewPodScaleUpDelay:       to.Ptr("1m"),
					ScaleDownDelayAfterAdd:   to.Ptr("15m"),
					ScanInterval:             to.Ptr("20s"),
					SkipNodesWithSystemPods:  to.Ptr("false"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Update.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {
						ClientID:    to.Ptr("clientId1"),
						PrincipalID: to.Ptr("principalId1"),
					},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						ScaleDownMode:       to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					BalanceSimilarNodeGroups: to.Ptr("true"),
					Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
					MaxNodeProvisionTime:     to.Ptr("15m"),
					NewPodScaleUpDelay:       to.Ptr("1m"),
					ScaleDownDelayAfterAdd:   to.Ptr("15m"),
					ScanInterval:             to.Ptr("20s"),
					SkipNodesWithSystemPods:  to.Ptr("false"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithAHUB.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with EnableAHUB"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS1_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
					LicenseType:   to.Ptr(armcontainerservice.LicenseTypeWindowsServer),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithAHUB.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithAHUB.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {
						ClientID:    to.Ptr("clientId1"),
						PrincipalID: to.Ptr("principalId1"),
					},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
					LicenseType:   to.Ptr(armcontainerservice.LicenseTypeWindowsServer),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithAHUB.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableNamespaceResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with EnableNamespaceResources"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS1_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:                to.Ptr("dnsprefix1"),
				EnableNamespaceResources: to.Ptr(true),
				EnablePodSecurityPolicy:  to.Ptr(true),
				EnableRBAC:               to.Ptr(true),
				KubernetesVersion:        to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableNamespaceResources.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableNamespaceResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:                to.Ptr("dnsprefix1"),
				EnableNamespaceResources: to.Ptr(true),
				EnablePodSecurityPolicy:  to.Ptr(true),
				EnableRBAC:               to.Ptr(true),
				Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:        to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWithEnableNamespaceResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWindowsGmsa.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with Windows gMSA enabled"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						VMSize:             to.Ptr("Standard_DS1_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
					GmsaProfile: &armcontainerservice.WindowsGmsaProfile{
						Enabled: to.Ptr(true),
					},
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWindowsGmsa.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWindowsGmsa.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {
						ClientID:    to.Ptr("clientId1"),
						PrincipalID: to.Ptr("principalId1"),
					},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					ScaleDownDelayAfterAdd: to.Ptr("15m"),
					ScanInterval:           to.Ptr("20s"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
					GmsaProfile: &armcontainerservice.WindowsGmsaProfile{
						Enabled: to.Ptr(true),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_UpdateWindowsGmsa.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DualStackNetworking.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with dual-stack networking"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedCluster{
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:              to.Ptr[int32](3),
						EnableNodePublicIP: to.Ptr(true),
						Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
						OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
						ScaleDownMode:      to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
						VMSize:             to.Ptr("Standard_DS1_v2"),
						Name:               to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					BalanceSimilarNodeGroups: to.Ptr("true"),
					Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
					MaxNodeProvisionTime:     to.Ptr("15m"),
					NewPodScaleUpDelay:       to.Ptr("1m"),
					ScaleDownDelayAfterAdd:   to.Ptr("15m"),
					ScanInterval:             to.Ptr("20s"),
					SkipNodesWithSystemPods:  to.Ptr("false"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				KubernetesVersion:       to.Ptr(""),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4),
						to.Ptr(armcontainerservice.IPFamilyIPv6)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count: to.Ptr[int32](2),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				},
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
					Secret:   to.Ptr("secret"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminPassword: to.Ptr("replacePassword1234$"),
					AdminUsername: to.Ptr("azureuser"),
				},
			},
			SKU: &armcontainerservice.ManagedClusterSKU{
				Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBasic),
				Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DualStackNetworking.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DualStackNetworking.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv2": to.Ptr(""),
				"tier":   to.Ptr("production"),
			},
			Identity: &armcontainerservice.ManagedClusterIdentity{
				Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {
						ClientID:    to.Ptr("clientId1"),
						PrincipalID: to.Ptr("principalId1"),
					},
				},
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
						AvailabilityZones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
						Count:               to.Ptr[int32](3),
						EnableNodePublicIP:  to.Ptr(true),
						MaxPods:             to.Ptr[int32](110),
						Mode:                to.Ptr(armcontainerservice.AgentPoolModeSystem),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						ScaleDownMode:       to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
					BalanceSimilarNodeGroups: to.Ptr("true"),
					Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
					MaxNodeProvisionTime:     to.Ptr("15m"),
					NewPodScaleUpDelay:       to.Ptr("1m"),
					ScaleDownDelayAfterAdd:   to.Ptr("15m"),
					ScanInterval:             to.Ptr("20s"),
					SkipNodesWithSystemPods:  to.Ptr("false"),
				},
				DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:               to.Ptr("dnsprefix1"),
				EnablePodSecurityPolicy: to.Ptr(true),
				EnableRBAC:              to.Ptr(true),
				Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:       to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				MaxAgentPools: to.Ptr[int32](1),
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					IPFamilies: []*armcontainerservice.IPFamily{
						to.Ptr(armcontainerservice.IPFamilyIPv4),
						to.Ptr(armcontainerservice.IPFamilyIPv6)},
					LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
						AllocatedOutboundPorts: to.Ptr[int32](2000),
						EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip3-ipv6"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
							Count:     to.Ptr[int32](2),
							CountIPv6: to.Ptr[int32](1),
						},
					},
					LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
					NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
					OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
					PodCidr:         to.Ptr("10.244.0.0/16"),
					PodCidrs: []*string{
						to.Ptr("10.244.0.0/16"),
						to.Ptr("fd11:1234::/64")},
					ServiceCidr: to.Ptr("10.0.0.0/16"),
					ServiceCidrs: []*string{
						to.Ptr("10.0.0.0/16"),
						to.Ptr("fd00:1234::/108")},
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
				WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
					AdminUsername: to.Ptr("azureuser"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersCreate_DualStackNetworking.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_UpdateTags(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Managed Cluster Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.TagsObject{
			Tags: map[string]*string{
				"archv3": to.Ptr(""),
				"tier":   to.Ptr("testing"),
			},
		},
		&armcontainerservice.ManagedClustersClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.ManagedCluster{
			Name:     to.Ptr("clustername1"),
			Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
			Location: to.Ptr("location1"),
			Tags: map[string]*string{
				"archv3": to.Ptr(""),
				"tier":   to.Ptr("testing"),
			},
			Properties: &armcontainerservice.ManagedClusterProperties{
				AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
					{
						Count:               to.Ptr[int32](3),
						MaxPods:             to.Ptr[int32](110),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS1_v2"),
						Name:                to.Ptr("nodepool1"),
					}},
				DiskEncryptionSetID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
				DNSPrefix:           to.Ptr("dnsprefix1"),
				EnableRBAC:          to.Ptr(false),
				Fqdn:                to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
				KubernetesVersion:   to.Ptr("1.9.6"),
				LinuxProfile: &armcontainerservice.LinuxProfile{
					AdminUsername: to.Ptr("azureuser"),
					SSH: &armcontainerservice.SSHConfiguration{
						PublicKeys: []*armcontainerservice.SSHPublicKey{
							{
								KeyData: to.Ptr("keydata"),
							}},
					},
				},
				NetworkProfile: &armcontainerservice.NetworkProfile{
					DNSServiceIP:     to.Ptr("10.0.0.10"),
					DockerBridgeCidr: to.Ptr("172.17.0.1/16"),
					NetworkPlugin:    to.Ptr(armcontainerservice.NetworkPluginKubenet),
					PodCidr:          to.Ptr("10.244.0.0/16"),
					ServiceCidr:      to.Ptr("10.0.0.0/16"),
				},
				NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
					ClientID: to.Ptr("clientid"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_Delete(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersDelete.json: %v", err)
	}
}

func TestManagedClusters_ResetServicePrincipalProfile(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersResetServicePrincipalProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reset Service Principal Profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginResetServicePrincipalProfile(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedClusterServicePrincipalProfile{
			ClientID: to.Ptr("clientid"),
			Secret:   to.Ptr("secret"),
		},
		&armcontainerservice.ManagedClustersClientBeginResetServicePrincipalProfileOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersResetServicePrincipalProfile.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersResetServicePrincipalProfile.json: %v", err)
	}
}

func TestManagedClusters_ResetAADProfile(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersResetAADProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reset AAD Profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginResetAADProfile(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.ManagedClusterAADProfile{
			ClientAppID:     to.Ptr("clientappid"),
			ServerAppID:     to.Ptr("serverappid"),
			ServerAppSecret: to.Ptr("serverappsecret"),
			TenantID:        to.Ptr("tenantid"),
		},
		&armcontainerservice.ManagedClustersClientBeginResetAADProfileOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersResetAADProfile.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersResetAADProfile.json: %v", err)
	}
}

func TestManagedClusters_RotateClusterCertificates(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersRotateClusterCertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rotate Cluster Certificates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginRotateClusterCertificates(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientBeginRotateClusterCertificatesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersRotateClusterCertificates.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersRotateClusterCertificates.json: %v", err)
	}
}

func TestManagedClusters_Stop(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginStop(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersStop.json: %v", err)
	}
}

func TestManagedClusters_Start(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginStart(ctx,
		"rg1",
		"clustername1",
		&armcontainerservice.ManagedClustersClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ManagedClustersStart.json: %v", err)
	}
}

func TestManagedClusters_RunCommand(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"submitNewCommand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	poller, err := client.BeginRunCommand(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.RunCommandRequest{
			ClusterToken: to.Ptr(""),
			Command:      to.Ptr("kubectl apply -f ns.yaml"),
			Context:      to.Ptr(""),
		},
		&armcontainerservice.ManagedClustersClientBeginRunCommandOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandRequest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.RunCommandResult{
			ID: to.Ptr("def7b3ea71bd4f7e9d226ddbc0f00ad9"),
			Properties: &armcontainerservice.CommandResultProperties{
				ExitCode:          to.Ptr[int32](0),
				FinishedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:33Z"); return t }()),
				Logs:              to.Ptr("namespace dummy created"),
				ProvisioningState: to.Ptr("Succeeded"),
				StartedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:20Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunCommandResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_GetCommandResult(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandResultFailed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"commandFailedResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err := client.GetCommandResult(ctx,
		"rg1",
		"clustername1",
		"def7b3ea71bd4f7e9d226ddbc0f00ad9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandResultFailed.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.RunCommandResult{
			ID: to.Ptr("def7b3ea71bd4f7e9d226ddbc0f00ad9"),
			Properties: &armcontainerservice.CommandResultProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Reason:            to.Ptr("ImagePullBackoff"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunCommandResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandResultFailed.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandResultSucceed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"commandSucceedResult"},
	})
	client = armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	res, err = client.GetCommandResult(ctx,
		"rg1",
		"clustername1",
		"def7b3ea71bd4f7e9d226ddbc0f00ad9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandResultSucceed.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.RunCommandResult{
			ID: to.Ptr("def7b3ea71bd4f7e9d226ddbc0f00ad9"),
			Properties: &armcontainerservice.CommandResultProperties{
				ExitCode:          to.Ptr[int32](0),
				FinishedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:33Z"); return t }()),
				Logs:              to.Ptr("namespace dummy created"),
				ProvisioningState: to.Ptr("Succeeded"),
				StartedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:20Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunCommandResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/RunCommandResultSucceed.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedClusters_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/OutboundNetworkDependenciesEndpointsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OutboundNetworkDependenciesEndpoints by Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewManagedClustersClient("subid1", cred, &options)
	pager := client.ListOutboundNetworkDependenciesEndpoints("rg1",
		"clustername1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/OutboundNetworkDependenciesEndpointsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.OutboundEnvironmentEndpointCollection{
			Value: []*armcontainerservice.OutboundEnvironmentEndpoint{
				{
					Category: to.Ptr("azure-resource-management"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("management.azure.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("login.microsoftonline.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						}},
				},
				{
					Category: to.Ptr("images"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("mcr.microsoft.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("*.data.mcr.microsoft.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Description: to.Ptr("mcr cdn"),
									Port:        to.Ptr[int32](443),
									Protocol:    to.Ptr("Https"),
								}},
						}},
				},
				{
					Category: to.Ptr("artifacts"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("packages.microsoft.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("acs-mirror.azureedge.net"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						}},
				},
				{
					Category: to.Ptr("time-sync"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("ntp.ubuntu.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](123),
									Protocol: to.Ptr("UDP"),
								}},
						}},
				},
				{
					Category: to.Ptr("ubuntu-optional"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("security.ubuntu.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr("Http"),
								}},
						},
						{
							DomainName: to.Ptr("azure.archive.ubuntu.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr("Http"),
								}},
						},
						{
							DomainName: to.Ptr("changelogs.ubuntu.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr("Http"),
								}},
						}},
				},
				{
					Category: to.Ptr("gpu"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("nvidia.github.io"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("us.download.nvidia.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("apt.dockerproject.org"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						}},
				},
				{
					Category: to.Ptr("windows"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("onegetcdn.azureedge.net"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("go.microsoft.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						},
						{
							DomainName: to.Ptr("*.mp.microsoft.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr("Http"),
								}},
						},
						{
							DomainName: to.Ptr("www.msftconnecttest.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr("Http"),
								}},
						},
						{
							DomainName: to.Ptr("ctldl.windowsupdate.com"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr("Http"),
								}},
						}},
				},
				{
					Category: to.Ptr("apiserver"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("*.azmk8s.io"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("Https"),
								}},
						}},
				},
				{
					Category: to.Ptr("tunnel-classic"),
					Endpoints: []*armcontainerservice.EndpointDependency{
						{
							DomainName: to.Ptr("*.azmk8s.io"),
							EndpointDetails: []*armcontainerservice.EndpointDetail{
								{
									Port:     to.Ptr[int32](9000),
									Protocol: to.Ptr("TCP"),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundEnvironmentEndpointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundEnvironmentEndpointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/OutboundNetworkDependenciesEndpointsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceConfigurations_ListByManagedCluster(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List maintenance configurations by Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", cred, &options)
	pager := client.ListByManagedCluster("rg1",
		"clustername1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.MaintenanceConfigurationListResult{
			Value: []*armcontainerservice.MaintenanceConfiguration{
				{
					Name: to.Ptr("default"),
					ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/default"),
					Properties: &armcontainerservice.MaintenanceConfigurationProperties{
						NotAllowedTime: []*armcontainerservice.TimeSpan{
							{
								End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
								Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
							}},
						TimeInWeek: []*armcontainerservice.TimeInWeek{
							{
								Day: to.Ptr(armcontainerservice.WeekDayMonday),
								HourSlots: []*int32{
									to.Ptr[int32](1),
									to.Ptr[int32](2)},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MaintenanceConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MaintenanceConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceConfigurations_Get(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Maintenance Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"clustername1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.MaintenanceConfiguration{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/default"),
			Properties: &armcontainerservice.MaintenanceConfigurationProperties{
				NotAllowedTime: []*armcontainerservice.TimeSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
					}},
				TimeInWeek: []*armcontainerservice.TimeInWeek{
					{
						Day: to.Ptr(armcontainerservice.WeekDayMonday),
						HourSlots: []*int32{
							to.Ptr[int32](1),
							to.Ptr[int32](2)},
					}},
			},
			SystemData: &armcontainerservice.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armcontainerservice.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MaintenanceConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MaintenanceConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Maintenance Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"default",
		armcontainerservice.MaintenanceConfiguration{
			Properties: &armcontainerservice.MaintenanceConfigurationProperties{
				NotAllowedTime: []*armcontainerservice.TimeSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
					}},
				TimeInWeek: []*armcontainerservice.TimeInWeek{
					{
						Day: to.Ptr(armcontainerservice.WeekDayMonday),
						HourSlots: []*int32{
							to.Ptr[int32](1),
							to.Ptr[int32](2)},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsCreate_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.MaintenanceConfiguration{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/default"),
			Properties: &armcontainerservice.MaintenanceConfigurationProperties{
				NotAllowedTime: []*armcontainerservice.TimeSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
					}},
				TimeInWeek: []*armcontainerservice.TimeInWeek{
					{
						Day: to.Ptr(armcontainerservice.WeekDayMonday),
						HourSlots: []*int32{
							to.Ptr[int32](1),
							to.Ptr[int32](2)},
					}},
			},
			SystemData: &armcontainerservice.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armcontainerservice.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MaintenanceConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MaintenanceConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsCreate_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceConfigurations_Delete(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Maintenance Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"clustername1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/MaintenanceConfigurationsDelete.json: %v", err)
	}
}

func TestAgentPools_List(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Agent Pools by Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	pager := client.List("rg1",
		"clustername1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.AgentPoolListResult{
			Value: []*armcontainerservice.AgentPool{
				{
					Name: to.Ptr("agentpool1"),
					ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
					Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
						Count:               to.Ptr[int32](3),
						MaxPods:             to.Ptr[int32](110),
						NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
						OrchestratorVersion: to.Ptr("1.9.6"),
						OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
						ProvisioningState:   to.Ptr("Succeeded"),
						VMSize:              to.Ptr("Standard_DS1_v2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AgentPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AgentPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_Get(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Agent Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				MaxPods:             to.Ptr[int32](110),
				NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
				OrchestratorVersion: to.Ptr("1.9.6"),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				UpgradeSettings: &armcontainerservice.AgentPoolUpgradeSettings{
					MaxSurge: to.Ptr("33%"),
				},
				VMSize: to.Ptr("Standard_DS1_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_CreateOrUpdate(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsAssociate_CRG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Associate Agent Pool with Capacity Reservation Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				CapacityReservationGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/CapacityReservationGroups/crg1"),
				Count:                      to.Ptr[int32](3),
				OrchestratorVersion:        to.Ptr(""),
				OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:                     to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsAssociate_CRG.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsAssociate_CRG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				CapacityReservationGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/CapacityReservationGroups/crg1"),
				Count:                      to.Ptr[int32](3),
				MaxPods:                    to.Ptr[int32](110),
				OrchestratorVersion:        to.Ptr("1.9.6"),
				OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:          to.Ptr("Succeeded"),
				VMSize:                     to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsAssociate_CRG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Snapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool using an agent pool snapshot"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				CreationData: &armcontainerservice.CreationData{
					SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
				},
				EnableFIPS:          to.Ptr(true),
				OrchestratorVersion: to.Ptr(""),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Snapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Snapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				CreationData: &armcontainerservice.CreationData{
					SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
				},
				EnableFIPS:          to.Ptr(true),
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.19.6"),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Snapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with EncryptionAtHost enabled"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:                  to.Ptr[int32](3),
				EnableEncryptionAtHost: to.Ptr(true),
				OrchestratorVersion:    to.Ptr(""),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:                 to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableEncryptionAtHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:                  to.Ptr[int32](3),
				EnableEncryptionAtHost: to.Ptr(true),
				MaxPods:                to.Ptr[int32](110),
				OrchestratorVersion:    to.Ptr("1.17.13"),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:      to.Ptr("Succeeded"),
				VMSize:                 to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Ephemeral.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Ephemeral OS Disk"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				OrchestratorVersion: to.Ptr(""),
				OSDiskSizeGB:        to.Ptr[int32](64),
				OSDiskType:          to.Ptr(armcontainerservice.OSDiskTypeEphemeral),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Ephemeral.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Ephemeral.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.17.8"),
				OSDiskSizeGB:        to.Ptr[int32](64),
				OSDiskType:          to.Ptr(armcontainerservice.OSDiskTypeEphemeral),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Ephemeral.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableFIPS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with FIPS enabled OS"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				EnableFIPS:          to.Ptr(true),
				OrchestratorVersion: to.Ptr(""),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableFIPS.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableFIPS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				EnableFIPS:          to.Ptr(true),
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.19.6"),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableFIPS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_GPUMIG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with GPUMIG"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:              to.Ptr[int32](3),
				GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG2G),
				KubeletConfig: &armcontainerservice.KubeletConfig{
					AllowedUnsafeSysctls: []*string{
						to.Ptr("kernel.msg*"),
						to.Ptr("net.core.somaxconn")},
					CPUCfsQuota:           to.Ptr(true),
					CPUCfsQuotaPeriod:     to.Ptr("200ms"),
					CPUManagerPolicy:      to.Ptr("static"),
					FailSwapOn:            to.Ptr(false),
					ImageGcHighThreshold:  to.Ptr[int32](90),
					ImageGcLowThreshold:   to.Ptr[int32](70),
					TopologyManagerPolicy: to.Ptr("best-effort"),
				},
				LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
					SwapFileSizeMB: to.Ptr[int32](1500),
					Sysctls: &armcontainerservice.SysctlConfig{
						KernelThreadsMax:        to.Ptr[int32](99999),
						NetCoreWmemDefault:      to.Ptr[int32](12345),
						NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
						NetIPv4TCPTwReuse:       to.Ptr(true),
					},
					TransparentHugePageDefrag:  to.Ptr("madvise"),
					TransparentHugePageEnabled: to.Ptr("always"),
				},
				OrchestratorVersion: to.Ptr(""),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_ND96asr_v4"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_GPUMIG.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_GPUMIG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:              to.Ptr[int32](3),
				GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG2G),
				KubeletConfig: &armcontainerservice.KubeletConfig{
					AllowedUnsafeSysctls: []*string{
						to.Ptr("kernel.msg*"),
						to.Ptr("net.core.somaxconn")},
					CPUCfsQuota:           to.Ptr(true),
					CPUCfsQuotaPeriod:     to.Ptr("200ms"),
					CPUManagerPolicy:      to.Ptr("static"),
					FailSwapOn:            to.Ptr(false),
					ImageGcHighThreshold:  to.Ptr[int32](90),
					ImageGcLowThreshold:   to.Ptr[int32](70),
					TopologyManagerPolicy: to.Ptr("best-effort"),
				},
				LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
					SwapFileSizeMB: to.Ptr[int32](1500),
					Sysctls: &armcontainerservice.SysctlConfig{
						KernelThreadsMax:        to.Ptr[int32](99999),
						NetCoreWmemDefault:      to.Ptr[int32](12345),
						NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
						NetIPv4TCPTwReuse:       to.Ptr(true),
					},
					TransparentHugePageDefrag:  to.Ptr("madvise"),
					TransparentHugePageEnabled: to.Ptr("always"),
				},
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.17.8"),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_ND96asr_v4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_GPUMIG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_WasmWasi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Krustlet and the WASI runtime"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				Mode:                to.Ptr(armcontainerservice.AgentPoolModeUser),
				OrchestratorVersion: to.Ptr(""),
				OSDiskSizeGB:        to.Ptr[int32](64),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
				WorkloadRuntime:     to.Ptr(armcontainerservice.WorkloadRuntimeWasmWasi),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_WasmWasi.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_WasmWasi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				MaxPods:             to.Ptr[int32](110),
				Mode:                to.Ptr(armcontainerservice.AgentPoolModeUser),
				OrchestratorVersion: to.Ptr("1.17.8"),
				OSDiskSizeGB:        to.Ptr[int32](64),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
				WorkloadRuntime:     to.Ptr(armcontainerservice.WorkloadRuntimeWasmWasi),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_WasmWasi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_CustomNodeConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with KubeletConfig and LinuxOSConfig"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				KubeletConfig: &armcontainerservice.KubeletConfig{
					AllowedUnsafeSysctls: []*string{
						to.Ptr("kernel.msg*"),
						to.Ptr("net.core.somaxconn")},
					CPUCfsQuota:           to.Ptr(true),
					CPUCfsQuotaPeriod:     to.Ptr("200ms"),
					CPUManagerPolicy:      to.Ptr("static"),
					FailSwapOn:            to.Ptr(false),
					ImageGcHighThreshold:  to.Ptr[int32](90),
					ImageGcLowThreshold:   to.Ptr[int32](70),
					TopologyManagerPolicy: to.Ptr("best-effort"),
				},
				LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
					SwapFileSizeMB: to.Ptr[int32](1500),
					Sysctls: &armcontainerservice.SysctlConfig{
						KernelThreadsMax:        to.Ptr[int32](99999),
						NetCoreWmemDefault:      to.Ptr[int32](12345),
						NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
						NetIPv4TCPTwReuse:       to.Ptr(true),
					},
					TransparentHugePageDefrag:  to.Ptr("madvise"),
					TransparentHugePageEnabled: to.Ptr("always"),
				},
				OrchestratorVersion: to.Ptr(""),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_CustomNodeConfig.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_CustomNodeConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				KubeletConfig: &armcontainerservice.KubeletConfig{
					AllowedUnsafeSysctls: []*string{
						to.Ptr("kernel.msg*"),
						to.Ptr("net.core.somaxconn")},
					CPUCfsQuota:           to.Ptr(true),
					CPUCfsQuotaPeriod:     to.Ptr("200ms"),
					CPUManagerPolicy:      to.Ptr("static"),
					FailSwapOn:            to.Ptr(false),
					ImageGcHighThreshold:  to.Ptr[int32](90),
					ImageGcLowThreshold:   to.Ptr[int32](70),
					TopologyManagerPolicy: to.Ptr("best-effort"),
				},
				LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
					SwapFileSizeMB: to.Ptr[int32](1500),
					Sysctls: &armcontainerservice.SysctlConfig{
						KernelThreadsMax:        to.Ptr[int32](99999),
						NetCoreWmemDefault:      to.Ptr[int32](12345),
						NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
						NetIPv4TCPTwReuse:       to.Ptr(true),
					},
					TransparentHugePageDefrag:  to.Ptr("madvise"),
					TransparentHugePageEnabled: to.Ptr("always"),
				},
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.17.8"),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_CustomNodeConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_MessageOfTheDay.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Message of the Day"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				MessageOfTheDay:     to.Ptr("Zm9vCg=="),
				Mode:                to.Ptr(armcontainerservice.AgentPoolModeUser),
				OrchestratorVersion: to.Ptr(""),
				OSDiskSizeGB:        to.Ptr[int32](64),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_MessageOfTheDay.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_MessageOfTheDay.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				MaxPods:             to.Ptr[int32](110),
				MessageOfTheDay:     to.Ptr("Zm9vCg=="),
				Mode:                to.Ptr(armcontainerservice.AgentPoolModeUser),
				OrchestratorVersion: to.Ptr("1.17.8"),
				OSDiskSizeGB:        to.Ptr[int32](64),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_MessageOfTheDay.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_OSSKU.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with OSSKU"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				KubeletConfig: &armcontainerservice.KubeletConfig{
					AllowedUnsafeSysctls: []*string{
						to.Ptr("kernel.msg*"),
						to.Ptr("net.core.somaxconn")},
					CPUCfsQuota:           to.Ptr(true),
					CPUCfsQuotaPeriod:     to.Ptr("200ms"),
					CPUManagerPolicy:      to.Ptr("static"),
					FailSwapOn:            to.Ptr(false),
					ImageGcHighThreshold:  to.Ptr[int32](90),
					ImageGcLowThreshold:   to.Ptr[int32](70),
					TopologyManagerPolicy: to.Ptr("best-effort"),
				},
				LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
					SwapFileSizeMB: to.Ptr[int32](1500),
					Sysctls: &armcontainerservice.SysctlConfig{
						KernelThreadsMax:        to.Ptr[int32](99999),
						NetCoreWmemDefault:      to.Ptr[int32](12345),
						NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
						NetIPv4TCPTwReuse:       to.Ptr(true),
					},
					TransparentHugePageDefrag:  to.Ptr("madvise"),
					TransparentHugePageEnabled: to.Ptr("always"),
				},
				OrchestratorVersion: to.Ptr(""),
				OSSKU:               to.Ptr(armcontainerservice.OSSKUCBLMariner),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_OSSKU.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_OSSKU.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				KubeletConfig: &armcontainerservice.KubeletConfig{
					AllowedUnsafeSysctls: []*string{
						to.Ptr("kernel.msg*"),
						to.Ptr("net.core.somaxconn")},
					CPUCfsQuota:           to.Ptr(true),
					CPUCfsQuotaPeriod:     to.Ptr("200ms"),
					CPUManagerPolicy:      to.Ptr("static"),
					FailSwapOn:            to.Ptr(false),
					ImageGcHighThreshold:  to.Ptr[int32](90),
					ImageGcLowThreshold:   to.Ptr[int32](70),
					TopologyManagerPolicy: to.Ptr("best-effort"),
				},
				LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
					SwapFileSizeMB: to.Ptr[int32](1500),
					Sysctls: &armcontainerservice.SysctlConfig{
						KernelThreadsMax:        to.Ptr[int32](99999),
						NetCoreWmemDefault:      to.Ptr[int32](12345),
						NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
						NetIPv4TCPTwReuse:       to.Ptr(true),
					},
					TransparentHugePageDefrag:  to.Ptr("madvise"),
					TransparentHugePageEnabled: to.Ptr("always"),
				},
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.17.8"),
				OSSKU:               to.Ptr(armcontainerservice.OSSKUCBLMariner),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_OSSKU.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_PPG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with PPG"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:                     to.Ptr[int32](3),
				OrchestratorVersion:       to.Ptr(""),
				OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
				ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/proximityPlacementGroups/ppg1"),
				VMSize:                    to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_PPG.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_PPG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:                     to.Ptr[int32](3),
				MaxPods:                   to.Ptr[int32](110),
				OrchestratorVersion:       to.Ptr("1.9.6"),
				OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:         to.Ptr("Succeeded"),
				ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/proximityPlacementGroups/ppg1"),
				VMSize:                    to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_PPG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableUltraSSD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with UltraSSD enabled"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				EnableUltraSSD:      to.Ptr(true),
				OrchestratorVersion: to.Ptr(""),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableUltraSSD.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableUltraSSD.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:               to.Ptr[int32](3),
				EnableUltraSSD:      to.Ptr(true),
				MaxPods:             to.Ptr[int32](110),
				OrchestratorVersion: to.Ptr("1.17.13"),
				OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:   to.Ptr("Succeeded"),
				VMSize:              to.Ptr("Standard_DS2_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_EnableUltraSSD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Spot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Spot Agent Pool"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				NodeLabels: map[string]*string{
					"key1": to.Ptr("val1"),
				},
				NodeTaints: []*string{
					to.Ptr("Key1=Value1:NoSchedule")},
				OrchestratorVersion:    to.Ptr(""),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
				ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
				Tags: map[string]*string{
					"name1": to.Ptr("val1"),
				},
				VMSize: to.Ptr("Standard_DS1_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Spot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Spot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:   to.Ptr[int32](3),
				MaxPods: to.Ptr[int32](110),
				NodeLabels: map[string]*string{
					"key1": to.Ptr("val1"),
				},
				NodeTaints: []*string{
					to.Ptr("Key1=Value1:NoSchedule")},
				OrchestratorVersion:    to.Ptr("1.9.6"),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:      to.Ptr("Succeeded"),
				ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
				ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
				SpotMaxPrice:           to.Ptr[float32](-1),
				Tags: map[string]*string{
					"name1": to.Ptr("val1"),
				},
				VMSize: to.Ptr("Standard_DS1_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Spot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Agent Pool"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count: to.Ptr[int32](3),
				Mode:  to.Ptr(armcontainerservice.AgentPoolModeUser),
				NodeLabels: map[string]*string{
					"key1": to.Ptr("val1"),
				},
				NodeTaints: []*string{
					to.Ptr("Key1=Value1:NoSchedule")},
				OrchestratorVersion:    to.Ptr(""),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
				ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
				Tags: map[string]*string{
					"name1": to.Ptr("val1"),
				},
				VMSize: to.Ptr("Standard_DS1_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Update.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:            to.Ptr[int32](3),
				MaxPods:          to.Ptr[int32](110),
				Mode:             to.Ptr(armcontainerservice.AgentPoolModeUser),
				NodeImageVersion: to.Ptr("AKSUbuntu:1604:2020.03.11"),
				NodeLabels: map[string]*string{
					"key1": to.Ptr("val1"),
				},
				NodeTaints: []*string{
					to.Ptr("Key1=Value1:NoSchedule")},
				OrchestratorVersion:    to.Ptr("1.9.6"),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:      to.Ptr("Succeeded"),
				ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
				ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
				Tags: map[string]*string{
					"name1": to.Ptr("val1"),
				},
				VMSize: to.Ptr("Standard_DS1_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsCreate_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Agent Pool"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				PowerState: &armcontainerservice.PowerState{
					Code: to.Ptr(armcontainerservice.CodeRunning),
				},
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Start.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Start.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:             to.Ptr[int32](50),
				EnableAutoScaling: to.Ptr(true),
				MaxCount:          to.Ptr[int32](55),
				MinCount:          to.Ptr[int32](3),
				PowerState: &armcontainerservice.PowerState{
					Code: to.Ptr(armcontainerservice.CodeRunning),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Start.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop Agent Pool"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				PowerState: &armcontainerservice.PowerState{
					Code: to.Ptr(armcontainerservice.CodeStopped),
				},
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Stop.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Stop.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:             to.Ptr[int32](0),
				EnableAutoScaling: to.Ptr(false),
				PowerState: &armcontainerservice.PowerState{
					Code: to.Ptr(armcontainerservice.CodeStopped),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Stop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Agent Pool"},
	})
	client = armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		armcontainerservice.AgentPool{
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:             to.Ptr[int32](3),
				EnableAutoScaling: to.Ptr(true),
				MaxCount:          to.Ptr[int32](2),
				MinCount:          to.Ptr[int32](2),
				NodeTaints: []*string{
					to.Ptr("Key1=Value1:NoSchedule")},
				OrchestratorVersion:    to.Ptr(""),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
				ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
				VMSize:                 to.Ptr("Standard_DS1_v2"),
			},
		},
		&armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Update.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPool{
			Name: to.Ptr("agentpool1"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
			Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
				Count:             to.Ptr[int32](3),
				EnableAutoScaling: to.Ptr(true),
				MaxCount:          to.Ptr[int32](2),
				MaxPods:           to.Ptr[int32](110),
				MinCount:          to.Ptr[int32](2),
				NodeTaints: []*string{
					to.Ptr("Key1=Value1:NoSchedule")},
				OrchestratorVersion:    to.Ptr("1.9.6"),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				ProvisioningState:      to.Ptr("Succeeded"),
				ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
				ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
				VMSize:                 to.Ptr("Standard_DS1_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPools_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_Delete(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Agent Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		&armcontainerservice.AgentPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsDelete.json: %v", err)
	}
}

func TestAgentPools_GetUpgradeProfile(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGetUpgradeProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Upgrade Profile for Agent Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	res, err := client.GetUpgradeProfile(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGetUpgradeProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPoolUpgradeProfile{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/upgradeProfiles"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1/upgradeprofiles/default"),
			Properties: &armcontainerservice.AgentPoolUpgradeProfileProperties{
				KubernetesVersion:      to.Ptr("1.12.8"),
				LatestNodeImageVersion: to.Ptr("AKSUbuntu:1604:2020.03.11"),
				OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
				Upgrades: []*armcontainerservice.AgentPoolUpgradeProfilePropertiesUpgradesItem{
					{
						KubernetesVersion: to.Ptr("1.13.5"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPoolUpgradeProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPoolUpgradeProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGetUpgradeProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_GetAvailableAgentPoolVersions(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGetAgentPoolAvailableVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available versions for agent pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	res, err := client.GetAvailableAgentPoolVersions(ctx,
		"rg1",
		"clustername1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGetAgentPoolAvailableVersions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.AgentPoolAvailableVersions{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ContainerService/managedClusters/availableAgentpoolVersions"),
			ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/availableagentpoolversions"),
			Properties: &armcontainerservice.AgentPoolAvailableVersionsProperties{
				AgentPoolVersions: []*armcontainerservice.AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem{
					{
						KubernetesVersion: to.Ptr("1.12.7"),
					},
					{
						KubernetesVersion: to.Ptr("1.12.8"),
					},
					{
						Default:           to.Ptr(true),
						IsPreview:         to.Ptr(true),
						KubernetesVersion: to.Ptr("1.13.5"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPoolAvailableVersions) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPoolAvailableVersions)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsGetAgentPoolAvailableVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_UpgradeNodeImageVersion(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsUpgradeNodeImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upgrade Agent Pool Node Image Version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewAgentPoolsClient("subid1", cred, &options)
	poller, err := client.BeginUpgradeNodeImageVersion(ctx,
		"rg1",
		"clustername1",
		"agentpool1",
		&armcontainerservice.AgentPoolsClientBeginUpgradeNodeImageVersionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsUpgradeNodeImageVersion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/AgentPoolsUpgradeNodeImageVersion.json: %v", err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Private Endpoint Connections by Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"clustername1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.PrivateEndpointConnectionListResult{
			Value: []*armcontainerservice.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateendpointconnection1"),
					Type: to.Ptr("Microsoft.Network/privateLinkServices/privateEndpointConnections"),
					Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcontainerservice.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
						},
						PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
							Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcontainerservice.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"clustername1",
		"privateendpointconnection1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.PrivateEndpointConnection{
			Name: to.Ptr("privateendpointconnection1"),
			Type: to.Ptr("Microsoft.Network/privateLinkServices/privateEndpointConnections"),
			Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armcontainerservice.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
				},
				PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
					Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armcontainerservice.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"clustername1",
		"privateendpointconnection1",
		armcontainerservice.PrivateEndpointConnection{
			Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
					Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.PrivateEndpointConnection{
			Name: to.Ptr("privateendpointconnection1"),
			Type: to.Ptr("Microsoft.Network/privateLinkServices/privateEndpointConnections"),
			Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armcontainerservice.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
				},
				PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
					Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armcontainerservice.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"clustername1",
		"privateendpointconnection1",
		&armcontainerservice.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateEndpointConnectionsDelete.json: %v", err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Private Link Resources by Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewPrivateLinkResourcesClient("subid1", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"clustername1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateLinkResourcesList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.PrivateLinkResourcesListResult{
			Value: []*armcontainerservice.PrivateLinkResource{
				{
					Name:                 to.Ptr("management"),
					Type:                 to.Ptr("Microsoft.ContainerService/managedClusters/privateLinkResources"),
					GroupID:              to.Ptr("management"),
					PrivateLinkServiceID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateLinkServices/plsName"),
					RequiredMembers: []*string{
						to.Ptr("management")},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourcesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourcesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/PrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResolvePrivateLinkServiceID_POST(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ResolvePrivateLinkServiceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resolve the Private Link Service ID for Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewResolvePrivateLinkServiceIDClient("subid1", cred, &options)
	res, err := client.POST(ctx,
		"rg1",
		"clustername1",
		armcontainerservice.PrivateLinkResource{
			Name: to.Ptr("management"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ResolvePrivateLinkServiceId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.PrivateLinkResource{
			PrivateLinkServiceID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateLinkServices/plsName"),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/ResolvePrivateLinkServiceId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_List(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Snapshots"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewSnapshotsClient("subid1", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.SnapshotListResult{
			Value: []*armcontainerservice.Snapshot{
				{
					Name:     to.Ptr("snapshot1"),
					Type:     to.Ptr("Microsoft.ContainerService/Snapshots"),
					ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
						"key2": to.Ptr("val2"),
					},
					Properties: &armcontainerservice.SnapshotProperties{
						CreationData: &armcontainerservice.CreationData{
							SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
						},
						EnableFIPS:        to.Ptr(false),
						KubernetesVersion: to.Ptr("1.20.5"),
						NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
						OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
						OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
						SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
						VMSize:            to.Ptr("Standard_D2s_v3"),
					},
					SystemData: &armcontainerservice.SystemData{
						CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
						CreatedBy:     to.Ptr("user1"),
						CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_ListByResourceGroup(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Snapshots by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewSnapshotsClient("subid1", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerservice.SnapshotListResult{
			Value: []*armcontainerservice.Snapshot{
				{
					Name:     to.Ptr("snapshot1"),
					Type:     to.Ptr("Microsoft.ContainerService/Snapshots"),
					ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
						"key2": to.Ptr("val2"),
					},
					Properties: &armcontainerservice.SnapshotProperties{
						CreationData: &armcontainerservice.CreationData{
							SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
						},
						EnableFIPS:        to.Ptr(false),
						KubernetesVersion: to.Ptr("1.20.5"),
						NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
						OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
						OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
						SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
						VMSize:            to.Ptr("Standard_D2s_v3"),
					},
					SystemData: &armcontainerservice.SystemData{
						CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
						CreatedBy:     to.Ptr("user1"),
						CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Get(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Snapshot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewSnapshotsClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"snapshot1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.Snapshot{
			Name:     to.Ptr("snapshot1"),
			Type:     to.Ptr("Microsoft.ContainerService/Snapshots"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
			Properties: &armcontainerservice.SnapshotProperties{
				CreationData: &armcontainerservice.CreationData{
					SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
				},
				EnableFIPS:        to.Ptr(false),
				KubernetesVersion: to.Ptr("1.20.5"),
				NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
				OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
				OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
				SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
				VMSize:            to.Ptr("Standard_D2s_v3"),
			},
			SystemData: &armcontainerservice.SystemData{
				CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
				CreatedBy:     to.Ptr("user1"),
				CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_CreateOrUpdate(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Snapshot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewSnapshotsClient("subid1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"snapshot1",
		armcontainerservice.Snapshot{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
			Properties: &armcontainerservice.SnapshotProperties{
				CreationData: &armcontainerservice.CreationData{
					SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.Snapshot{
			Name:     to.Ptr("snapshot1"),
			Type:     to.Ptr("Microsoft.ContainerService/Snapshots"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
			Properties: &armcontainerservice.SnapshotProperties{
				CreationData: &armcontainerservice.CreationData{
					SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
				},
				EnableFIPS:        to.Ptr(false),
				KubernetesVersion: to.Ptr("1.20.5"),
				NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
				OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
				OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
				SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
				VMSize:            to.Ptr("Standard_D2s_v3"),
			},
			SystemData: &armcontainerservice.SystemData{
				CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
				CreatedBy:     to.Ptr("user1"),
				CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_UpdateTags(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Snapshot Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewSnapshotsClient("subid1", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"snapshot1",
		armcontainerservice.TagsObject{
			Tags: map[string]*string{
				"key2": to.Ptr("new-val2"),
				"key3": to.Ptr("val3"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerservice.Snapshot{
			Name:     to.Ptr("snapshot1"),
			Type:     to.Ptr("Microsoft.ContainerService/Snapshots"),
			ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
			Properties: &armcontainerservice.SnapshotProperties{
				CreationData: &armcontainerservice.CreationData{
					SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
				},
				EnableFIPS:        to.Ptr(false),
				KubernetesVersion: to.Ptr("1.20.5"),
				NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
				OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
				OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
				SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
				VMSize:            to.Ptr("Standard_D2s_v3"),
			},
			SystemData: &armcontainerservice.SystemData{
				CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
				CreatedBy:     to.Ptr("user1"),
				CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Delete(t *testing.T) {
	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Snapshot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerservice.NewSnapshotsClient("subid1", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"snapshot1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/preview/2021-11-01-preview/examples/SnapshotsDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
