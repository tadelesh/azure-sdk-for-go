//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AgentPoolsClientListPager provides operations for iterating over paged responses.
type AgentPoolsClientListPager struct {
	client    *AgentPoolsClient
	current   AgentPoolsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AgentPoolsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AgentPoolsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AgentPoolListResult.NextLink == nil || len(*p.current.AgentPoolListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AgentPoolsClientListPager) NextPage(ctx context.Context) (AgentPoolsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AgentPoolsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AgentPoolsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AgentPoolsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AgentPoolsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AgentPoolsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MaintenanceConfigurationsClientListByManagedClusterPager provides operations for iterating over paged responses.
type MaintenanceConfigurationsClientListByManagedClusterPager struct {
	client    *MaintenanceConfigurationsClient
	current   MaintenanceConfigurationsClientListByManagedClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MaintenanceConfigurationsClientListByManagedClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MaintenanceConfigurationsClientListByManagedClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MaintenanceConfigurationListResult.NextLink == nil || len(*p.current.MaintenanceConfigurationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MaintenanceConfigurationsClientListByManagedClusterPager) NextPage(ctx context.Context) (MaintenanceConfigurationsClientListByManagedClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MaintenanceConfigurationsClientListByManagedClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MaintenanceConfigurationsClientListByManagedClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MaintenanceConfigurationsClientListByManagedClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MaintenanceConfigurationsClientListByManagedClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByManagedClusterHandleResponse(resp)
	if err != nil {
		return MaintenanceConfigurationsClientListByManagedClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedClustersClientListByResourceGroupPager provides operations for iterating over paged responses.
type ManagedClustersClientListByResourceGroupPager struct {
	client    *ManagedClustersClient
	current   ManagedClustersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedClustersClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedClustersClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedClusterListResult.NextLink == nil || len(*p.current.ManagedClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedClustersClientListByResourceGroupPager) NextPage(ctx context.Context) (ManagedClustersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedClustersClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedClustersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedClustersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedClustersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ManagedClustersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedClustersClientListOutboundNetworkDependenciesEndpointsPager provides operations for iterating over paged responses.
type ManagedClustersClientListOutboundNetworkDependenciesEndpointsPager struct {
	client    *ManagedClustersClient
	current   ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedClustersClientListOutboundNetworkDependenciesEndpointsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundEnvironmentEndpointCollection.NextLink == nil || len(*p.current.OutboundEnvironmentEndpointCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedClustersClientListOutboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) (ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOutboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		return ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedClustersClientListPager provides operations for iterating over paged responses.
type ManagedClustersClientListPager struct {
	client    *ManagedClustersClient
	current   ManagedClustersClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedClustersClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedClustersClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedClusterListResult.NextLink == nil || len(*p.current.ManagedClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedClustersClientListPager) NextPage(ctx context.Context) (ManagedClustersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedClustersClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedClustersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedClustersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedClustersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ManagedClustersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SnapshotsClientListByResourceGroupPager provides operations for iterating over paged responses.
type SnapshotsClientListByResourceGroupPager struct {
	client    *SnapshotsClient
	current   SnapshotsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SnapshotsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SnapshotsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotListResult.NextLink == nil || len(*p.current.SnapshotListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SnapshotsClientListByResourceGroupPager) NextPage(ctx context.Context) (SnapshotsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SnapshotsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SnapshotsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SnapshotsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SnapshotsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return SnapshotsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SnapshotsClientListPager provides operations for iterating over paged responses.
type SnapshotsClientListPager struct {
	client    *SnapshotsClient
	current   SnapshotsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SnapshotsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SnapshotsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotListResult.NextLink == nil || len(*p.current.SnapshotListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SnapshotsClientListPager) NextPage(ctx context.Context) (SnapshotsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SnapshotsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SnapshotsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SnapshotsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SnapshotsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SnapshotsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
