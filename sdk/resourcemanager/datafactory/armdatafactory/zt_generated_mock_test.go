//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.OperationListResponse{
			Value: []*armdatafactory.Operation{
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for datafactories"),
						Operation:   to.Ptr("Read datafactories metric definitions"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("datafactories"),
					},
					Origin: to.Ptr("system"),
					Properties: &armdatafactory.OperationProperties{
						ServiceSpecification: &armdatafactory.OperationServiceSpecification{
							MetricSpecifications: []*armdatafactory.OperationMetricSpecification{
								{
									Name:            to.Ptr("FailedRuns"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armdatafactory.OperationMetricAvailability{
										{
											BlobDuration: to.Ptr("P1D"),
											TimeGrain:    to.Ptr("PT1H"),
										}},
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("pipelineName"),
											DisplayName:            to.Ptr("Pipeline"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("activityName"),
											DisplayName:            to.Ptr("Activity"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("windowEnd"),
											DisplayName:            to.Ptr("Window End"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("windowStart"),
											DisplayName:            to.Ptr("Window Start"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Failed Runs"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetricsV1"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("SuccessfulRuns"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armdatafactory.OperationMetricAvailability{
										{
											BlobDuration: to.Ptr("P1D"),
											TimeGrain:    to.Ptr("PT1H"),
										}},
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("pipelineName"),
											DisplayName:            to.Ptr("Pipeline"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("activityName"),
											DisplayName:            to.Ptr("Activity"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("windowEnd"),
											DisplayName:            to.Ptr("Window End"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("windowStart"),
											DisplayName:            to.Ptr("Window Start"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Successful Runs"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetricsV1"),
									Unit:                     to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("datafactories"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("datafactories"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the available logs for factories"),
						Operation:   to.Ptr("Read factories log definitions"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("The log definition of factories"),
					},
					Origin: to.Ptr("system"),
					Properties: &armdatafactory.OperationProperties{
						ServiceSpecification: &armdatafactory.OperationServiceSpecification{
							LogSpecifications: []*armdatafactory.OperationLogSpecification{
								{
									Name:         to.Ptr("ActivityRuns"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Pipeline activity runs log"),
								},
								{
									Name:         to.Ptr("PipelineRuns"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Pipeline runs log"),
								},
								{
									Name:         to.Ptr("TriggerRuns"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Trigger runs log"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("factories"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("factories"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for factories"),
						Operation:   to.Ptr("Read metric definitions"),
						Provider:    to.Ptr("Microsoft.DataFactory"),
						Resource:    to.Ptr("factories"),
					},
					Origin: to.Ptr("system"),
					Properties: &armdatafactory.OperationProperties{
						ServiceSpecification: &armdatafactory.OperationServiceSpecification{
							MetricSpecifications: []*armdatafactory.OperationMetricSpecification{
								{
									Name:            to.Ptr("PipelineFailedRuns"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("FailureType"),
											DisplayName:            to.Ptr("Failure Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("Name"),
											DisplayName:            to.Ptr("Pipeline"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Failed pipeline runs metrics"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("PipelineSucceededRuns"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("FailureType"),
											DisplayName:            to.Ptr("Failure Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("Name"),
											DisplayName:            to.Ptr("Pipeline"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Succeeded pipeline runs metrics"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("ActivityFailedRuns"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("ActivityType"),
											DisplayName:            to.Ptr("Activity Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("PipelineName"),
											DisplayName:            to.Ptr("Pipeline"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("FailureType"),
											DisplayName:            to.Ptr("Failure Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("Name"),
											DisplayName:            to.Ptr("Activity"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Failed activity runs metrics"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("ActivitySucceededRuns"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("ActivityType"),
											DisplayName:            to.Ptr("Activity Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("PipelineName"),
											DisplayName:            to.Ptr("Pipeline"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("FailureType"),
											DisplayName:            to.Ptr("Failure Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("Name"),
											DisplayName:            to.Ptr("Activity"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Succeeded activity runs metrics"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("TriggerFailedRuns"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("Name"),
											DisplayName:            to.Ptr("Trigger"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("FailureType"),
											DisplayName:            to.Ptr("Failure Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Failed trigger runs metrics"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("TriggerSucceededRuns"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("Name"),
											DisplayName:            to.Ptr("Trigger"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("FailureType"),
											DisplayName:            to.Ptr("Failure Type"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Succeeded trigger runs metrics"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IntegrationRuntimeCpuPercentage"),
									AggregationType: to.Ptr("Average"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("IntegrationRuntimeName"),
											DisplayName:            to.Ptr("Integration Runtime"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("NodeName"),
											DisplayName:            to.Ptr("Integration Runtime Node"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Integration runtime CPU utilization"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Percent"),
								},
								{
									Name:            to.Ptr("IntegrationRuntimeAvailableMemory"),
									AggregationType: to.Ptr("Average"),
									Dimensions: []*armdatafactory.OperationMetricDimension{
										{
											Name:                   to.Ptr("IntegrationRuntimeName"),
											DisplayName:            to.Ptr("Integration Runtime"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("NodeName"),
											DisplayName:            to.Ptr("Integration Runtime Node"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayName:              to.Ptr("Integration runtime available memory"),
									EnableRegionalMdmAccount: to.Ptr("false"),
									SourceMdmAccount:         to.Ptr("MicrosoftDataFactoryProdShoebox"),
									SourceMdmNamespace:       to.Ptr("ADFMetrics"),
									Unit:                     to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/register/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the Data Factory Resource Provider."),
						Operation:   to.Ptr("Register Data Factory Resource Provider"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/unregister/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Unregisters the subscription for the Data Factory Resource Provider."),
						Operation:   to.Ptr("Unregister Data Factory Resource Provider"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads the Data Factory."),
						Operation:   to.Ptr("Read Data Factory"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates the Data Factory."),
						Operation:   to.Ptr("Create or Update Data Factory"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes the Data Factory."),
						Operation:   to.Ptr("Delete Data Factory"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/linkedServices/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Linked Service."),
						Operation:   to.Ptr("Read Linked Service"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Linked Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/linkedServices/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Linked Service."),
						Operation:   to.Ptr("Delete Linked Service"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Linked Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/linkedServices/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Linked Service."),
						Operation:   to.Ptr("Create or Update Linked Service"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Linked Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Pipeline."),
						Operation:   to.Ptr("Read Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Pipeline."),
						Operation:   to.Ptr("Delete Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/pause/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Pauses any Pipeline."),
						Operation:   to.Ptr("Pause Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/resume/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Resumes any Pipeline."),
						Operation:   to.Ptr("Resume Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/update/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Updates any Pipeline."),
						Operation:   to.Ptr("Update Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Pipeline."),
						Operation:   to.Ptr("Create or Update Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Dataset."),
						Operation:   to.Ptr("Read Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Dataset."),
						Operation:   to.Ptr("Delete Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Dataset."),
						Operation:   to.Ptr("Create or Update Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/tables/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Dataset."),
						Operation:   to.Ptr("Read Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/tables/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Dataset."),
						Operation:   to.Ptr("Delete Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/tables/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Dataset."),
						Operation:   to.Ptr("Create or Update Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/slices/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the Data Slices in the given period."),
						Operation:   to.Ptr("Read Data Slices"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Slice"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/slices/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Update the Status of the Data Slice."),
						Operation:   to.Ptr("Update Data Slice Status"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Slice"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/sliceruns/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads the Data Slice Run for the given dataset with the given start time."),
						Operation:   to.Ptr("Read Data Slice Run"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Slice"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/runs/loginfo/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads a SAS URI to a blob container containing the logs."),
						Operation:   to.Ptr("Read Run Log Info"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Run Log"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/activitywindows/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Activity Windows in the Data Factory with specified parameters."),
						Operation:   to.Ptr("Read Activity Windows in any Data Factory"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Activity Windows"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/activitywindows/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Activity Windows for the Pipeline with specified parameters."),
						Operation:   to.Ptr("Read Activity Windows for any Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Activity Windows"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datapipelines/activities/activitywindows/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Activity Windows for the Pipeline Activity with specified parameters."),
						Operation:   to.Ptr("Read Activity Windows for any Pipeline Activity"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Activity Windows"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/datasets/activitywindows/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Activity Windows for the Dataset with specified parameters."),
						Operation:   to.Ptr("Read Activity Windows for any Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Activity Windows"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/gateways/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Gateway."),
						Operation:   to.Ptr("Read Gateway"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Gateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/gateways/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Gateway."),
						Operation:   to.Ptr("Create or Update Gateway"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Gateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/gateways/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Gateway."),
						Operation:   to.Ptr("Delete Gateway"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Gateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/gateways/connectioninfo/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads the Connection Info for any Gateway."),
						Operation:   to.Ptr("Read Gateway Connection Info"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Gateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/gateways/listauthkeys/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Lists the Authentication Keys for any Gateway."),
						Operation:   to.Ptr("List Gateway Authentication Keys"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Gateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/datafactories/gateways/regenerateauthkey/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Regenerates the Authentication Keys for any Gateway."),
						Operation:   to.Ptr("Regenerate Gateway Authentication Keys"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Gateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Data Factory."),
						Operation:   to.Ptr("Read Data Factory"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Create or Update Data Factory"),
						Operation:   to.Ptr("Create or Update any Data Factory."),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes Data Factory."),
						Operation:   to.Ptr("Delete Data Factory"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/linkedServices/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Linked Service."),
						Operation:   to.Ptr("Read Linked Service"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Linked Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/linkedServices/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes Linked Service."),
						Operation:   to.Ptr("Delete Linked Service"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Linked Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/linkedServices/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Create or Update Linked Service"),
						Operation:   to.Ptr("Create or Update any Linked Service."),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Linked Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/pipelines/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Pipeline."),
						Operation:   to.Ptr("Read Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/pipelines/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes Pipeline."),
						Operation:   to.Ptr("Delete Pipeline"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/pipelines/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Create or Update Pipeline"),
						Operation:   to.Ptr("Create or Update any Pipeline."),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/pipelines/createrun/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates a run for the Pipeline."),
						Operation:   to.Ptr("Create Pipeline Run"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Pipeline"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/cancelpipelinerun/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Cancels the pipeline run specified by the run ID."),
						Operation:   to.Ptr("Cancel any Pipeline Run"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/pipelineruns/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads the Pipeline Runs."),
						Operation:   to.Ptr("Read Pipeline Runs"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/pipelineruns/activityruns/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads the activity runs for the specified pipeline run ID."),
						Operation:   to.Ptr("Read Activity Runs"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/datasets/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Dataset."),
						Operation:   to.Ptr("Read Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/datasets/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Dataset."),
						Operation:   to.Ptr("Delete Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/datasets/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Dataset."),
						Operation:   to.Ptr("Create or Update Dataset"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Dataset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Integration Runtime."),
						Operation:   to.Ptr("Read Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Integration Runtime."),
						Operation:   to.Ptr("Create or Update Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Integration Runtime."),
						Operation:   to.Ptr("Delete Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/start/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Starts any Integration Runtime."),
						Operation:   to.Ptr("Start Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/stop/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Stops any Integration Runtime."),
						Operation:   to.Ptr("Stop Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/getconnectioninfo/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Integration Runtime Connection Info."),
						Operation:   to.Ptr("Read Integration Runtime Connection Info"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/getstatus/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads Integration Runtime Status."),
						Operation:   to.Ptr("Read Integration Runtime Status"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/listauthkeys/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Lists the Authentication Keys for any Integration Runtime."),
						Operation:   to.Ptr("List Integration Runtime Authentication Keys"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/monitoringdata/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Gets the Monitoring Data for any Integration Runtime."),
						Operation:   to.Ptr("Get Integration Runtime Monitoring Data"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/nodes/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes the Node for the specified Integration Runtime."),
						Operation:   to.Ptr("Delete Integration Runtime Node"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/nodes/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Updates a self-hosted Integration Runtime Node."),
						Operation:   to.Ptr("Update Integration Runtime Node"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/nodes/ipAddress/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Returns the IP Address for the specified node of the Integration Runtime."),
						Operation:   to.Ptr("Read Integration Runtime Node IP Address"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/synccredentials/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Syncs the Credentials for the specified Integration Runtime."),
						Operation:   to.Ptr("Sync Credentials for Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/upgrade/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Upgrades the specified Integration Runtime."),
						Operation:   to.Ptr("Upgrade Integration Runtime"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes/regenerateauthkey/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Regenerates the Authentication Keys for the specified Integration Runtime."),
						Operation:   to.Ptr("Regenerate Integration Runtime Authentication Keys"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Integration Runtime"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/triggers/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads any Trigger."),
						Operation:   to.Ptr("Read Trigger"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/triggers/write"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Creates or Updates any Trigger."),
						Operation:   to.Ptr("Create or Update Trigger"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/triggers/delete"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Deletes any Trigger."),
						Operation:   to.Ptr("Delete Trigger"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/triggers/start/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Starts any Trigger."),
						Operation:   to.Ptr("Start Trigger"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/triggers/stop/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Stops any Trigger."),
						Operation:   to.Ptr("Stop Trigger"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/factories/triggers/triggerruns/read"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Reads the Trigger Runs."),
						Operation:   to.Ptr("Read Trigger Runs"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataFactory/locations/configureFactoryRepo/action"),
					Display: &armdatafactory.OperationDisplay{
						Description: to.Ptr("Configures the repository for the factory."),
						Operation:   to.Ptr("Configure Factory Repository"),
						Provider:    to.Ptr("Microsoft Data Factory"),
						Resource:    to.Ptr("Data Factory"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_List(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.FactoryListResponse{
			Value: []*armdatafactory.Factory{
				{
					Name:     to.Ptr("rpV2OrigDF-72c7d3d4-5e17-4ec6-91de-9ab433f15e79"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"0000aa0d-0000-0000-0000-5b0d58170000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/rg-yanzhang-dfv2/providers/Microsoft.DataFactory/factories/rpv2origdf-72c7d3d4-5e17-4ec6-91de-9ab433f15e79"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("399c3de2-6072-4326-bfa9-4d0c116f1a7b"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-29T13:39:35.615921Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("df-dogfood-yanzhang-we"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"0000f301-0000-0000-0000-5b21b16c0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/rg-yanzhang-dfv2/providers/Microsoft.DataFactory/factories/df-dogfood-yanzhang-we"),
					Location: to.Ptr("West Europe"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("e8dd6df9-bad5-4dea-8fb8-0d13d1845d9e"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T00:06:04.6667461Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("exampleFactoryName-linked"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00008a02-0000-0000-0000-5b237f270000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName-linked"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("10743799-44d2-42fe-8c4d-5bc5c51c0684"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T08:56:07.1828318Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("FactoryToUpgrade"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00003d04-0000-0000-0000-5b28962f0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/factorytoupgrade"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:35:35.7133828Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2018-06-01"),
					},
				},
				{
					Name:     to.Ptr("exampleFactoryName"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00004004-0000-0000-0000-5b28979e0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"exampleTag": to.Ptr("exampleValue"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						RepoConfiguration: &armdatafactory.FactoryVSTSConfiguration{
							Type:                to.Ptr("FactoryVSTSConfiguration"),
							AccountName:         to.Ptr("ADF"),
							CollaborationBranch: to.Ptr("master"),
							LastCommitID:        to.Ptr(""),
							RepositoryName:      to.Ptr("repo"),
							RootFolder:          to.Ptr("/"),
							ProjectName:         to.Ptr("project"),
							TenantID:            to.Ptr(""),
						},
						Version: to.Ptr("2018-06-01"),
					},
				},
				{
					Name:     to.Ptr("rpV2OrigDF-72c7d3d4-5e17-4ec6-91de-9ab433f15e79"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"0000aa0d-0000-0000-0000-5b0d58170000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/rg-yanzhang-dfv2/providers/Microsoft.DataFactory/factories/rpv2origdf-72c7d3d4-5e17-4ec6-91de-9ab433f15e79"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("399c3de2-6072-4326-bfa9-4d0c116f1a7b"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-29T13:39:35.615921Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("df-dogfood-yanzhang-we"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"0000f301-0000-0000-0000-5b21b16c0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/rg-yanzhang-dfv2/providers/Microsoft.DataFactory/factories/df-dogfood-yanzhang-we"),
					Location: to.Ptr("West Europe"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("e8dd6df9-bad5-4dea-8fb8-0d13d1845d9e"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T00:06:04.6667461Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("exampleFactoryName-linked"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00008a02-0000-0000-0000-5b237f270000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName-linked"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("10743799-44d2-42fe-8c4d-5bc5c51c0684"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T08:56:07.1828318Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("FactoryToUpgrade"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00003d04-0000-0000-0000-5b28962f0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/factorytoupgrade"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:35:35.7133828Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2018-06-01"),
					},
				},
				{
					Name:     to.Ptr("exampleFactoryName"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00004004-0000-0000-0000-5b28979e0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"exampleTag": to.Ptr("exampleValue"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						RepoConfiguration: &armdatafactory.FactoryVSTSConfiguration{
							Type:                to.Ptr("FactoryVSTSConfiguration"),
							AccountName:         to.Ptr("ADF"),
							CollaborationBranch: to.Ptr("master"),
							LastCommitID:        to.Ptr(""),
							RepositoryName:      to.Ptr("repo"),
							RootFolder:          to.Ptr("/"),
							ProjectName:         to.Ptr("project"),
							TenantID:            to.Ptr(""),
						},
						Version: to.Ptr("2018-06-01"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FactoryListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FactoryListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_ConfigureFactoryRepo(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_ConfigureFactoryRepo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_ConfigureFactoryRepo"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.ConfigureFactoryRepo(ctx,
		"East US",
		armdatafactory.FactoryRepoUpdate{
			FactoryResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			RepoConfiguration: &armdatafactory.FactoryVSTSConfiguration{
				Type:                to.Ptr("FactoryVSTSConfiguration"),
				AccountName:         to.Ptr("ADF"),
				CollaborationBranch: to.Ptr("master"),
				LastCommitID:        to.Ptr(""),
				RepositoryName:      to.Ptr("repo"),
				RootFolder:          to.Ptr("/"),
				ProjectName:         to.Ptr("project"),
				TenantID:            to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_ConfigureFactoryRepo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.Factory{
			Name:     to.Ptr("exampleFactoryName"),
			Type:     to.Ptr("Microsoft.DataFactory/factories"),
			ETag:     to.Ptr("\"00004004-0000-0000-0000-5b28979e0000\""),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"exampleTag": to.Ptr("exampleValue"),
			},
			Properties: &armdatafactory.FactoryProperties{
				CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				RepoConfiguration: &armdatafactory.FactoryVSTSConfiguration{
					Type:                to.Ptr("FactoryVSTSConfiguration"),
					AccountName:         to.Ptr("ADF"),
					CollaborationBranch: to.Ptr("master"),
					LastCommitID:        to.Ptr(""),
					RepositoryName:      to.Ptr("repo"),
					RootFolder:          to.Ptr("/"),
					ProjectName:         to.Ptr("project"),
					TenantID:            to.Ptr(""),
				},
				Version: to.Ptr("2018-06-01"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Factory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Factory)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_ConfigureFactoryRepo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_ListByResourceGroup(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByResourceGroup("exampleResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.FactoryListResponse{
			Value: []*armdatafactory.Factory{
				{
					Name:     to.Ptr("exampleFactoryName-linked"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00008a02-0000-0000-0000-5b237f270000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName-linked"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Identity: &armdatafactory.FactoryIdentity{
						Type:        to.Ptr(armdatafactory.FactoryIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("10743799-44d2-42fe-8c4d-5bc5c51c0684"),
						TenantID:    to.Ptr("12345678-1234-1234-1234-123456789abc"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T08:56:07.1828318Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2017-09-01-preview"),
					},
				},
				{
					Name:     to.Ptr("FactoryToUpgrade"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00003d04-0000-0000-0000-5b28962f0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/factorytoupgrade"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:35:35.7133828Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Version:           to.Ptr("2018-06-01"),
					},
				},
				{
					Name:     to.Ptr("exampleFactoryName"),
					Type:     to.Ptr("Microsoft.DataFactory/factories"),
					ETag:     to.Ptr("\"00004004-0000-0000-0000-5b28979e0000\""),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"exampleTag": to.Ptr("exampleValue"),
					},
					Properties: &armdatafactory.FactoryProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						RepoConfiguration: &armdatafactory.FactoryVSTSConfiguration{
							Type:                to.Ptr("FactoryVSTSConfiguration"),
							AccountName:         to.Ptr("ADF"),
							CollaborationBranch: to.Ptr("master"),
							LastCommitID:        to.Ptr(""),
							RepositoryName:      to.Ptr("repo"),
							RootFolder:          to.Ptr("/"),
							ProjectName:         to.Ptr("project"),
							TenantID:            to.Ptr(""),
						},
						Version: to.Ptr("2018-06-01"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FactoryListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FactoryListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.Factory{
			Location: to.Ptr("East US"),
		},
		&armdatafactory.FactoriesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.Factory{
			Name:     to.Ptr("exampleFactoryName"),
			Type:     to.Ptr("Microsoft.DataFactory/factories"),
			ETag:     to.Ptr("\"00003e04-0000-0000-0000-5b28979e0000\""),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armdatafactory.FactoryProperties{
				CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				Version:           to.Ptr("2018-06-01"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Factory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Factory)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_Update(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.FactoryUpdateParameters{
			Tags: map[string]*string{
				"exampleTag": to.Ptr("exampleValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.Factory{
			Name:     to.Ptr("exampleFactoryName"),
			Type:     to.Ptr("Microsoft.DataFactory/factories"),
			ETag:     to.Ptr("\"00003f04-0000-0000-0000-5b28979e0000\""),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"exampleTag": to.Ptr("exampleValue"),
			},
			Properties: &armdatafactory.FactoryProperties{
				CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				Version:           to.Ptr("2018-06-01"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Factory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Factory)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		&armdatafactory.FactoriesClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.Factory{
			Name:     to.Ptr("exampleFactoryName"),
			Type:     to.Ptr("Microsoft.DataFactory/factories"),
			ETag:     to.Ptr("\"00004004-0000-0000-0000-5b28979e0000\""),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"exampleTag": to.Ptr("exampleValue"),
			},
			Properties: &armdatafactory.FactoryProperties{
				CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-19T05:41:50.0041314Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				RepoConfiguration: &armdatafactory.FactoryVSTSConfiguration{
					Type:                to.Ptr("FactoryVSTSConfiguration"),
					AccountName:         to.Ptr("ADF"),
					CollaborationBranch: to.Ptr("master"),
					LastCommitID:        to.Ptr(""),
					RepositoryName:      to.Ptr("repo"),
					RootFolder:          to.Ptr("/"),
					ProjectName:         to.Ptr("project"),
					TenantID:            to.Ptr(""),
				},
				Version: to.Ptr("2018-06-01"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Factory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Factory)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_Delete.json: %v", err)
	}
}

func TestFactories_GetGitHubAccessToken(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_GetGitHubAccessToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_GetGitHubAccessToken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetGitHubAccessToken(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.GitHubAccessTokenRequest{
			GitHubAccessCode:         to.Ptr("some"),
			GitHubAccessTokenBaseURL: to.Ptr("some"),
			GitHubClientID:           to.Ptr("some"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_GetGitHubAccessToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.GitHubAccessTokenResponse{
			GitHubAccessToken: to.Ptr("myAccessTokenExample"),
		}
		if !reflect.DeepEqual(exampleRes, res.GitHubAccessTokenResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GitHubAccessTokenResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_GetGitHubAccessToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFactories_GetDataPlaneAccess(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_GetDataPlaneAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Factories_GetDataPlaneAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewFactoriesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetDataPlaneAccess(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.UserAccessPolicy{
			AccessResourcePath: to.Ptr(""),
			ExpireTime:         to.Ptr("2018-11-10T09:46:20.2659347Z"),
			Permissions:        to.Ptr("r"),
			ProfileName:        to.Ptr("DefaultProfile"),
			StartTime:          to.Ptr("2018-11-10T02:46:20.2659347Z"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_GetDataPlaneAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.AccessPolicyResponse{
			AccessToken:  to.Ptr("**********"),
			DataPlaneURL: to.Ptr("https://rpeastus.svc.datafactory.azure.com:4433"),
			Policy: &armdatafactory.UserAccessPolicy{
				AccessResourcePath: to.Ptr(""),
				ExpireTime:         to.Ptr("2018-11-10T09:46:20.2659347Z"),
				Permissions:        to.Ptr("r"),
				ProfileName:        to.Ptr("DefaultProfile"),
				StartTime:          to.Ptr("2018-11-10T02:46:20.2659347Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessPolicyResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessPolicyResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Factories_GetDataPlaneAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExposureControl_GetFeatureValue(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_GetFeatureValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExposureControl_GetFeatureValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewExposureControlClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetFeatureValue(ctx,
		"WestEurope",
		armdatafactory.ExposureControlRequest{
			FeatureName: to.Ptr("ADFIntegrationRuntimeSharingRbac"),
			FeatureType: to.Ptr("Feature"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_GetFeatureValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ExposureControlResponse{
			FeatureName: to.Ptr("ADFIntegrationRuntimeSharingRbac"),
			Value:       to.Ptr("False"),
		}
		if !reflect.DeepEqual(exampleRes, res.ExposureControlResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExposureControlResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_GetFeatureValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExposureControl_GetFeatureValueByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_GetFeatureValueByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExposureControl_GetFeatureValueByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewExposureControlClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetFeatureValueByFactory(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.ExposureControlRequest{
			FeatureName: to.Ptr("ADFIntegrationRuntimeSharingRbac"),
			FeatureType: to.Ptr("Feature"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_GetFeatureValueByFactory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ExposureControlResponse{
			FeatureName: to.Ptr("ADFIntegrationRuntimeSharingRbac"),
			Value:       to.Ptr("False"),
		}
		if !reflect.DeepEqual(exampleRes, res.ExposureControlResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExposureControlResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_GetFeatureValueByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExposureControl_QueryFeatureValuesByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_QueryFeatureValuesByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExposureControl_QueryFeatureValuesByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewExposureControlClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.QueryFeatureValuesByFactory(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.ExposureControlBatchRequest{
			ExposureControlRequests: []*armdatafactory.ExposureControlRequest{
				{
					FeatureName: to.Ptr("ADFIntegrationRuntimeSharingRbac"),
					FeatureType: to.Ptr("Feature"),
				},
				{
					FeatureName: to.Ptr("ADFSampleFeature"),
					FeatureType: to.Ptr("Feature"),
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_QueryFeatureValuesByFactory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ExposureControlBatchResponse{
			ExposureControlResponses: []*armdatafactory.ExposureControlResponse{
				{
					FeatureName: to.Ptr("ADFIntegrationRuntimeSharingRbac"),
					Value:       to.Ptr("False"),
				},
				{
					FeatureName: to.Ptr("ADFSampleFeature"),
					Value:       to.Ptr("True"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExposureControlBatchResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExposureControlBatchResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ExposureControl_QueryFeatureValuesByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.IntegrationRuntimeListResponse{
			Value: []*armdatafactory.IntegrationRuntimeResource{
				{
					Name: to.Ptr("exampleIntegrationRuntime"),
					Type: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes"),
					Etag: to.Ptr("0400f1a1-0000-0000-0000-5b2188640000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/integrationruntimes/exampleIntegrationRuntime"),
					Properties: &armdatafactory.SelfHostedIntegrationRuntime{
						Type:        to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
						Description: to.Ptr("A selfhosted integration runtime"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationRuntimeListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationRuntimeListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		armdatafactory.IntegrationRuntimeResource{
			Properties: &armdatafactory.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		},
		&armdatafactory.IntegrationRuntimesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeResource{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Type: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes"),
			Etag: to.Ptr("000046c4-0000-0000-0000-5b2198bf0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/integrationruntimes/exampleIntegrationRuntime"),
			Properties: &armdatafactory.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		&armdatafactory.IntegrationRuntimesClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeResource{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Type: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes"),
			Etag: to.Ptr("15003c4f-0000-0200-0000-5cbe090b0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/integrationruntimes/exampleIntegrationRuntime"),
			Properties: &armdatafactory.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Update(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		armdatafactory.UpdateIntegrationRuntimeRequest{
			AutoUpdate:        to.Ptr(armdatafactory.IntegrationRuntimeAutoUpdateOff),
			UpdateDelayOffset: to.Ptr("\"PT3H\""),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeResource{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Type: to.Ptr("Microsoft.DataFactory/factories/integrationruntimes"),
			Etag: to.Ptr("0400f1a1-0000-0000-0000-5b2188640000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/integrationruntimes/exampleIntegrationRuntime"),
			Properties: &armdatafactory.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Delete.json: %v", err)
	}
}

func TestIntegrationRuntimes_GetStatus(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_GetStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetStatus(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeStatusResponse{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Properties: &armdatafactory.SelfHostedIntegrationRuntimeStatus{
				Type:  to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
				State: to.Ptr(armdatafactory.IntegrationRuntimeStateOnline),
				TypeProperties: &armdatafactory.SelfHostedIntegrationRuntimeStatusTypeProperties{
					AutoUpdate: to.Ptr(armdatafactory.IntegrationRuntimeAutoUpdateOff),
					Capabilities: map[string]*string{
						"connectedToResourceManager": to.Ptr("True"),
						"credentialInSync":           to.Ptr("True"),
						"httpsPortEnabled":           to.Ptr("True"),
						"nodeEnabled":                to.Ptr("True"),
						"serviceBusConnected":        to.Ptr("True"),
					},
					CreateTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T09:17:45.1839685Z"); return t }()),
					LatestVersion:       to.Ptr("3.7.6711.1"),
					LocalTimeZoneOffset: to.Ptr("PT8H"),
					Nodes: []*armdatafactory.SelfHostedIntegrationRuntimeNode{
						{
							Capabilities: map[string]*string{
								"connectedToResourceManager": to.Ptr("True"),
								"credentialInSync":           to.Ptr("True"),
								"httpsPortEnabled":           to.Ptr("True"),
								"nodeEnabled":                to.Ptr("True"),
								"serviceBusConnected":        to.Ptr("True"),
							},
							HostServiceURI:     to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
							IsActiveDispatcher: to.Ptr(true),
							LastConnectTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:52:59.8933313Z"); return t }()),
							LastStartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:52:59.8933313Z"); return t }()),
							LastUpdateResult:   to.Ptr(armdatafactory.IntegrationRuntimeUpdateResultNone),
							MachineName:        to.Ptr("YANZHANG-DT"),
							MaxConcurrentJobs:  to.Ptr[int32](56),
							NodeName:           to.Ptr("Node_1"),
							RegisterTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:51:44.9237069Z"); return t }()),
							Status:             to.Ptr(armdatafactory.SelfHostedIntegrationRuntimeNodeStatusOnline),
							Version:            to.Ptr("3.8.6730.2"),
							VersionStatus:      to.Ptr("UpToDate"),
						}},
					ServiceUrls: []*string{
						to.Ptr("wu.frontend.int.clouddatahub-int.net"),
						to.Ptr("*.servicebus.windows.net")},
					TaskQueueID:       to.Ptr("1a6296ab-423c-4346-9bcc-85a78c2c0582"),
					UpdateDelayOffset: to.Ptr("PT3H"),
					Version:           to.Ptr("3.8.6730.2"),
					VersionStatus:     to.Ptr("UpToDate"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_OutboundNetworkDependenciesEndpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("7ad7c73b-38b8-4df3-84ee-52ff91092f61", cred, &options)
	res, err := client.ListOutboundNetworkDependenciesEndpoints(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse{
			Value: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint{
				{
					Category: to.Ptr("Azure Data Factory (Management)"),
					Endpoints: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("wu.frontend.int.clouddatahub-int.net"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Storage (Management)"),
					Endpoints: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("*.blob.core.windows.net"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("*.table.core.windows.net"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Event Hub (Logging)"),
					Endpoints: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("*.servicebus.windows.net"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Microsoft Logging service (Internal Use)"),
					Endpoints: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("gcs.prod.monitoring.core.windows.net"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("prod.warmpath.msftcloudes.com"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("azurewatsonanalysis-prod.core.windows.net"),
							EndpointDetails: []*armdatafactory.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_GetConnectionInfo(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetConnectionInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_GetConnectionInfo"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetConnectionInfo(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetConnectionInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeConnectionInfo{
			HostServiceURI:         to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
			IdentityCertThumbprint: to.Ptr("**********"),
			IsIdentityCertExprired: to.Ptr(false),
			PublicKey:              to.Ptr("**********"),
			ServiceToken:           to.Ptr("**********"),
			Version:                to.Ptr("3.8.6730.2"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeConnectionInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeConnectionInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetConnectionInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_RegenerateAuthKey(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_RegenerateAuthKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_RegenerateAuthKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.RegenerateAuthKey(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		armdatafactory.IntegrationRuntimeRegenerateKeyParameters{
			KeyName: to.Ptr(armdatafactory.IntegrationRuntimeAuthKeyNameAuthKey2),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_RegenerateAuthKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeAuthKeys{
			AuthKey2: to.Ptr("**********"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeAuthKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeAuthKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_RegenerateAuthKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_ListAuthKeys(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListAuthKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_ListAuthKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.ListAuthKeys(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListAuthKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeAuthKeys{
			AuthKey1: to.Ptr("**********"),
			AuthKey2: to.Ptr("**********"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeAuthKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeAuthKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_ListAuthKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Start(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginStart(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedIntegrationRuntime",
		&armdatafactory.IntegrationRuntimesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Start.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Start.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeStatusResponse{
			Name: to.Ptr("exampleManagedIntegrationRuntime"),
			Properties: &armdatafactory.ManagedIntegrationRuntimeStatus{
				Type:            to.Ptr(armdatafactory.IntegrationRuntimeTypeManaged),
				DataFactoryName: to.Ptr("exampleFactoryName"),
				State:           to.Ptr(armdatafactory.IntegrationRuntimeStateStarted),
				TypeProperties: &armdatafactory.ManagedIntegrationRuntimeStatusTypeProperties{
					CreateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-13T21:11:01.8695494Z"); return t }()),
					Nodes:       []*armdatafactory.ManagedIntegrationRuntimeNode{},
					OtherErrors: []*armdatafactory.ManagedIntegrationRuntimeError{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Start.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Stop(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginStop(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedIntegrationRuntime",
		&armdatafactory.IntegrationRuntimesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Stop.json: %v", err)
	}
}

func TestIntegrationRuntimes_SyncCredentials(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_SyncCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_SyncCredentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.SyncCredentials(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_SyncCredentials.json: %v", err)
	}
}

func TestIntegrationRuntimes_GetMonitoringData(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetMonitoringData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_GetMonitoringData"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetMonitoringData(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetMonitoringData.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeMonitoringData{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Nodes: []*armdatafactory.IntegrationRuntimeNodeMonitoringData{
				{
					AvailableMemoryInMB:   to.Ptr[int32](16740),
					ConcurrentJobsLimit:   to.Ptr[int32](28),
					ConcurrentJobsRunning: to.Ptr[int32](0),
					CPUUtilization:        to.Ptr[int32](15),
					NodeName:              to.Ptr("Node_1"),
					ReceivedBytes:         to.Ptr[float32](6.731423377990723),
					SentBytes:             to.Ptr[float32](2.647491693496704),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeMonitoringData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeMonitoringData)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_GetMonitoringData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Upgrade(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Upgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Upgrade"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Upgrade(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_Upgrade.json: %v", err)
	}
}

func TestIntegrationRuntimes_RemoveLinks(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_RemoveLinks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_Upgrade"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.RemoveLinks(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		armdatafactory.LinkedIntegrationRuntimeRequest{
			LinkedFactoryName: to.Ptr("exampleFactoryName-linked"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_RemoveLinks.json: %v", err)
	}
}

func TestIntegrationRuntimes_CreateLinkedIntegrationRuntime(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_CreateLinkedIntegrationRuntime.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimes_CreateLinkedIntegrationRuntime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateLinkedIntegrationRuntime(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		armdatafactory.CreateLinkedIntegrationRuntimeRequest{
			Name:                to.Ptr("bfa92911-9fb6-4fbe-8f23-beae87bc1c83"),
			DataFactoryLocation: to.Ptr("West US"),
			DataFactoryName:     to.Ptr("e9955d6d-56ea-4be3-841c-52a12c1a9981"),
			SubscriptionID:      to.Ptr("061774c7-4b5a-4159-a55b-365581830283"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_CreateLinkedIntegrationRuntime.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.IntegrationRuntimeStatusResponse{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Properties: &armdatafactory.SelfHostedIntegrationRuntimeStatus{
				Type:            to.Ptr(armdatafactory.IntegrationRuntimeTypeSelfHosted),
				DataFactoryName: to.Ptr("exampleFactoryName"),
				State:           to.Ptr(armdatafactory.IntegrationRuntimeStateOnline),
				TypeProperties: &armdatafactory.SelfHostedIntegrationRuntimeStatusTypeProperties{
					AutoUpdate:    to.Ptr(armdatafactory.IntegrationRuntimeAutoUpdateOn),
					AutoUpdateETA: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-20T19:00:00Z"); return t }()),
					Capabilities: map[string]*string{
						"connectedToResourceManager": to.Ptr("True"),
						"credentialInSync":           to.Ptr("True"),
						"httpsPortEnabled":           to.Ptr("True"),
						"nodeEnabled":                to.Ptr("True"),
						"serviceBusConnected":        to.Ptr("True"),
					},
					CreateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:43:25.7055573Z"); return t }()),
					LatestVersion: to.Ptr("3.9.6774.1"),
					Links: []*armdatafactory.LinkedIntegrationRuntime{
						{
							Name:                to.Ptr("bfa92911-9fb6-4fbe-8f23-beae87bc1c83"),
							CreateTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T06:31:04.0617928Z"); return t }()),
							DataFactoryLocation: to.Ptr("West US"),
							DataFactoryName:     to.Ptr("e9955d6d-56ea-4be3-841c-52a12c1a9981"),
							SubscriptionID:      to.Ptr("061774c7-4b5a-4159-a55b-365581830283"),
						}},
					LocalTimeZoneOffset: to.Ptr("PT8H"),
					Nodes: []*armdatafactory.SelfHostedIntegrationRuntimeNode{
						{
							Capabilities: map[string]*string{
								"connectedToResourceManager": to.Ptr("True"),
								"credentialInSync":           to.Ptr("True"),
								"httpsPortEnabled":           to.Ptr("True"),
								"nodeEnabled":                to.Ptr("True"),
								"serviceBusConnected":        to.Ptr("True"),
							},
							HostServiceURI:     to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
							IsActiveDispatcher: to.Ptr(true),
							LastConnectTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T06:30:46.6262976Z"); return t }()),
							LastStartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:45:30.8499851Z"); return t }()),
							LastUpdateResult:   to.Ptr(armdatafactory.IntegrationRuntimeUpdateResultNone),
							MachineName:        to.Ptr("YANZHANG-DT"),
							MaxConcurrentJobs:  to.Ptr[int32](20),
							NodeName:           to.Ptr("Node_1"),
							RegisterTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:44:55.8012825Z"); return t }()),
							Status:             to.Ptr(armdatafactory.SelfHostedIntegrationRuntimeNodeStatusOnline),
							Version:            to.Ptr("3.8.6743.6"),
							VersionStatus:      to.Ptr("UpToDate"),
						}},
					PushedVersion:       to.Ptr("3.9.6774.1"),
					ScheduledUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-20T00:00:00Z"); return t }()),
					ServiceUrls: []*string{
						to.Ptr("wu.frontend.int.clouddatahub-int.net"),
						to.Ptr("*.servicebus.windows.net")},
					TaskQueueID:       to.Ptr("823da112-f2d9-426b-a0d8-5f361b94f72a"),
					UpdateDelayOffset: to.Ptr("PT19H"),
					Version:           to.Ptr("3.8.6743.6"),
					VersionStatus:     to.Ptr("UpdateAvailable"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimes_CreateLinkedIntegrationRuntime.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeObjectMetadata_Refresh(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Refresh.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimeObjectMetadata_Refresh"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimeObjectMetadataClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginRefresh(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"testactivityv2",
		&armdatafactory.IntegrationRuntimeObjectMetadataClientBeginRefreshOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Refresh.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Refresh.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.SsisObjectMetadataStatusResponse{
			Name:   to.Ptr("ca63c855b72d44959653ffcc6eb0b96c"),
			Status: to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.SsisObjectMetadataStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SsisObjectMetadataStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Refresh.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeObjectMetadata_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimeObjectMetadata_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimeObjectMetadataClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"testactivityv2",
		&armdatafactory.IntegrationRuntimeObjectMetadataClientGetOptions{GetMetadataRequest: &armdatafactory.GetSsisObjectMetadataRequest{
			MetadataPath: to.Ptr("ssisFolders"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.SsisObjectMetadataListResponse{
			Value: []armdatafactory.SsisObjectMetadataClassification{
				&armdatafactory.SsisObjectMetadata{
					Name:        to.Ptr("TestFolder"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](1),
				},
				&armdatafactory.SsisObjectMetadata{
					Name:        to.Ptr("EnvironmentFolder"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](2),
				},
				&armdatafactory.SsisObjectMetadata{
					Name:        to.Ptr("ActivityTest"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](3),
				},
				&armdatafactory.SsisObjectMetadata{
					Name:        to.Ptr("这是文件夹"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](4),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("1"),
					ID:   to.Ptr[int64](5),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("2"),
					ID:   to.Ptr[int64](6),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("3"),
					ID:   to.Ptr[int64](7),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("4"),
					ID:   to.Ptr[int64](8),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("5"),
					ID:   to.Ptr[int64](9),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("6"),
					ID:   to.Ptr[int64](10),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("7"),
					ID:   to.Ptr[int64](11),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("8"),
					ID:   to.Ptr[int64](12),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("9"),
					ID:   to.Ptr[int64](13),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("10"),
					ID:   to.Ptr[int64](14),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("11"),
					ID:   to.Ptr[int64](15),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("12"),
					ID:   to.Ptr[int64](16),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("13"),
					ID:   to.Ptr[int64](17),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("14"),
					ID:   to.Ptr[int64](18),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("15"),
					ID:   to.Ptr[int64](19),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("16"),
					ID:   to.Ptr[int64](20),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("17"),
					ID:   to.Ptr[int64](21),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("18"),
					ID:   to.Ptr[int64](22),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("19"),
					ID:   to.Ptr[int64](23),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("20"),
					ID:   to.Ptr[int64](24),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("21"),
					ID:   to.Ptr[int64](25),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("22"),
					ID:   to.Ptr[int64](26),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("23"),
					ID:   to.Ptr[int64](27),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("24"),
					ID:   to.Ptr[int64](28),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("25"),
					ID:   to.Ptr[int64](29),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("26"),
					ID:   to.Ptr[int64](30),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("27"),
					ID:   to.Ptr[int64](31),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("28"),
					ID:   to.Ptr[int64](32),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("29"),
					ID:   to.Ptr[int64](33),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("30"),
					ID:   to.Ptr[int64](34),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("31"),
					ID:   to.Ptr[int64](35),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("32"),
					ID:   to.Ptr[int64](36),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("33"),
					ID:   to.Ptr[int64](37),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("34"),
					ID:   to.Ptr[int64](38),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("35"),
					ID:   to.Ptr[int64](39),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("36"),
					ID:   to.Ptr[int64](40),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("37"),
					ID:   to.Ptr[int64](41),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("38"),
					ID:   to.Ptr[int64](42),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("39"),
					ID:   to.Ptr[int64](43),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("40"),
					ID:   to.Ptr[int64](44),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("41"),
					ID:   to.Ptr[int64](45),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("42"),
					ID:   to.Ptr[int64](46),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("43"),
					ID:   to.Ptr[int64](47),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("44"),
					ID:   to.Ptr[int64](48),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("45"),
					ID:   to.Ptr[int64](49),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("46"),
					ID:   to.Ptr[int64](50),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("47"),
					ID:   to.Ptr[int64](51),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("48"),
					ID:   to.Ptr[int64](52),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("49"),
					ID:   to.Ptr[int64](53),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("50"),
					ID:   to.Ptr[int64](54),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("51"),
					ID:   to.Ptr[int64](55),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("52"),
					ID:   to.Ptr[int64](56),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("53"),
					ID:   to.Ptr[int64](57),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("54"),
					ID:   to.Ptr[int64](58),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("55"),
					ID:   to.Ptr[int64](59),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("56"),
					ID:   to.Ptr[int64](60),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("57"),
					ID:   to.Ptr[int64](61),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("58"),
					ID:   to.Ptr[int64](62),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("59"),
					ID:   to.Ptr[int64](63),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("60"),
					ID:   to.Ptr[int64](64),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("61"),
					ID:   to.Ptr[int64](65),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("62"),
					ID:   to.Ptr[int64](66),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("63"),
					ID:   to.Ptr[int64](67),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("64"),
					ID:   to.Ptr[int64](68),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("65"),
					ID:   to.Ptr[int64](69),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("66"),
					ID:   to.Ptr[int64](70),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("67"),
					ID:   to.Ptr[int64](71),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("68"),
					ID:   to.Ptr[int64](72),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("69"),
					ID:   to.Ptr[int64](73),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("70"),
					ID:   to.Ptr[int64](74),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("71"),
					ID:   to.Ptr[int64](75),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("72"),
					ID:   to.Ptr[int64](76),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("73"),
					ID:   to.Ptr[int64](77),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("74"),
					ID:   to.Ptr[int64](78),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("75"),
					ID:   to.Ptr[int64](79),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("76"),
					ID:   to.Ptr[int64](80),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("77"),
					ID:   to.Ptr[int64](81),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("78"),
					ID:   to.Ptr[int64](82),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("79"),
					ID:   to.Ptr[int64](83),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("80"),
					ID:   to.Ptr[int64](84),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("81"),
					ID:   to.Ptr[int64](85),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("82"),
					ID:   to.Ptr[int64](86),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("83"),
					ID:   to.Ptr[int64](87),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("84"),
					ID:   to.Ptr[int64](88),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("85"),
					ID:   to.Ptr[int64](89),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("86"),
					ID:   to.Ptr[int64](90),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("87"),
					ID:   to.Ptr[int64](91),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("88"),
					ID:   to.Ptr[int64](92),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("89"),
					ID:   to.Ptr[int64](93),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("90"),
					ID:   to.Ptr[int64](94),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("91"),
					ID:   to.Ptr[int64](95),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("92"),
					ID:   to.Ptr[int64](96),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("93"),
					ID:   to.Ptr[int64](97),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("94"),
					ID:   to.Ptr[int64](98),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("95"),
					ID:   to.Ptr[int64](99),
				},
				&armdatafactory.SsisObjectMetadata{
					Name: to.Ptr("96"),
					ID:   to.Ptr[int64](100),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SsisObjectMetadataListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SsisObjectMetadataListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeObjectMetadata_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeNodes_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimeNodes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimeNodesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		"Node_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.SelfHostedIntegrationRuntimeNode{
			Capabilities: map[string]*string{
				"connectedToResourceManager": to.Ptr("True"),
				"credentialInSync":           to.Ptr("True"),
				"httpsPortEnabled":           to.Ptr("True"),
				"nodeEnabled":                to.Ptr("True"),
				"serviceBusConnected":        to.Ptr("True"),
			},
			HostServiceURI:     to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
			IsActiveDispatcher: to.Ptr(true),
			LastConnectTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T06:30:46.6262976Z"); return t }()),
			LastStartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:45:30.8499851Z"); return t }()),
			LastUpdateResult:   to.Ptr(armdatafactory.IntegrationRuntimeUpdateResultNone),
			MachineName:        to.Ptr("YANZHANG-DT"),
			MaxConcurrentJobs:  to.Ptr[int32](20),
			NodeName:           to.Ptr("Node_1"),
			RegisterTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:44:55.8012825Z"); return t }()),
			Status:             to.Ptr(armdatafactory.SelfHostedIntegrationRuntimeNodeStatusOnline),
			Version:            to.Ptr("3.8.6743.6"),
			VersionStatus:      to.Ptr("UpToDate"),
		}
		if !reflect.DeepEqual(exampleRes, res.SelfHostedIntegrationRuntimeNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SelfHostedIntegrationRuntimeNode)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeNodes_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimesNodes_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimeNodesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		"Node_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Delete.json: %v", err)
	}
}

func TestIntegrationRuntimeNodes_Update(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntegrationRuntimeNodes_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewIntegrationRuntimeNodesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleIntegrationRuntime",
		"Node_1",
		armdatafactory.UpdateIntegrationRuntimeNodeRequest{
			ConcurrentJobsLimit: to.Ptr[int32](2),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.SelfHostedIntegrationRuntimeNode{
			Capabilities: map[string]*string{
				"connectedToResourceManager": to.Ptr("True"),
				"credentialInSync":           to.Ptr("True"),
				"httpsPortEnabled":           to.Ptr("True"),
				"nodeEnabled":                to.Ptr("True"),
				"serviceBusConnected":        to.Ptr("True"),
			},
			ConcurrentJobsLimit: to.Ptr[int32](2),
			HostServiceURI:      to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
			IsActiveDispatcher:  to.Ptr(true),
			LastConnectTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T15:00:35.7544322Z"); return t }()),
			LastStartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:52:59.8933313Z"); return t }()),
			LastUpdateResult:    to.Ptr(armdatafactory.IntegrationRuntimeUpdateResultNone),
			MachineName:         to.Ptr("YANZHANG-DT"),
			MaxConcurrentJobs:   to.Ptr[int32](56),
			NodeName:            to.Ptr("Node_1"),
			RegisterTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:51:44.9237069Z"); return t }()),
			Status:              to.Ptr(armdatafactory.SelfHostedIntegrationRuntimeNodeStatusOnline),
			Version:             to.Ptr("3.8.6730.2"),
			VersionStatus:       to.Ptr("UpToDate"),
		}
		if !reflect.DeepEqual(exampleRes, res.SelfHostedIntegrationRuntimeNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SelfHostedIntegrationRuntimeNode)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/IntegrationRuntimeNodes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServices_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewLinkedServicesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.LinkedServiceListResponse{
			Value: []*armdatafactory.LinkedServiceResource{
				{
					Name: to.Ptr("exampleLinkedService"),
					Type: to.Ptr("Microsoft.DataFactory/factories/linkedservices"),
					Etag: to.Ptr("0a0064d4-0000-0000-0000-5b245bd00000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/linkedservices/exampleLinkedService"),
					Properties: &armdatafactory.AzureStorageLinkedService{
						Type:        to.Ptr("AzureStorage"),
						Description: to.Ptr("Example description"),
						TypeProperties: &armdatafactory.AzureStorageLinkedServiceTypeProperties{
							ConnectionString: map[string]interface{}{
								"type":  "SecureString",
								"value": "**********",
							},
							EncryptedCredential: to.Ptr("ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRGLURPR0ZPT0QtWUFOWkhBTkctV1VfMGI2M2EyMmYtMGEzNC00NDg2LWIzMDktNzM0NTlkODUyY2Q1Ig0KfQ=="),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkedServiceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkedServiceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServices_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewLinkedServicesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleLinkedService",
		armdatafactory.LinkedServiceResource{
			Properties: &armdatafactory.AzureStorageLinkedService{
				Type: to.Ptr("AzureStorage"),
				TypeProperties: &armdatafactory.AzureStorageLinkedServiceTypeProperties{
					ConnectionString: map[string]interface{}{
						"type":  "SecureString",
						"value": "DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;AccountKey=<storage key>",
					},
				},
			},
		},
		&armdatafactory.LinkedServicesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.LinkedServiceResource{
			Name: to.Ptr("exampleLinkedService"),
			Type: to.Ptr("Microsoft.DataFactory/factories/linkedservices"),
			Etag: to.Ptr("0a0062d4-0000-0000-0000-5b245bcf0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/linkedservices/exampleLinkedService"),
			Properties: &armdatafactory.AzureStorageLinkedService{
				Type: to.Ptr("AzureStorage"),
				TypeProperties: &armdatafactory.AzureStorageLinkedServiceTypeProperties{
					ConnectionString: map[string]interface{}{
						"type":  "SecureString",
						"value": "**********",
					},
					EncryptedCredential: to.Ptr("ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRGLURPR0ZPT0QtWUFOWkhBTkctV1VfM2FiMTk0NjYtNWUxNi00NzU1LWJlNzktMjI2ZTVmZWU3YzY0Ig0KfQ=="),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServices_Update"},
	})
	client = armdatafactory.NewLinkedServicesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleLinkedService",
		armdatafactory.LinkedServiceResource{
			Properties: &armdatafactory.AzureStorageLinkedService{
				Type:        to.Ptr("AzureStorage"),
				Description: to.Ptr("Example description"),
				TypeProperties: &armdatafactory.AzureStorageLinkedServiceTypeProperties{
					ConnectionString: map[string]interface{}{
						"type":  "SecureString",
						"value": "DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;AccountKey=<storage key>",
					},
				},
			},
		},
		&armdatafactory.LinkedServicesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.LinkedServiceResource{
			Name: to.Ptr("exampleLinkedService"),
			Type: to.Ptr("Microsoft.DataFactory/factories/linkedservices"),
			Etag: to.Ptr("0a0064d4-0000-0000-0000-5b245bd00000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/linkedservices/exampleLinkedService"),
			Properties: &armdatafactory.AzureStorageLinkedService{
				Type:        to.Ptr("AzureStorage"),
				Description: to.Ptr("Example description"),
				TypeProperties: &armdatafactory.AzureStorageLinkedServiceTypeProperties{
					ConnectionString: map[string]interface{}{
						"type":  "SecureString",
						"value": "**********",
					},
					EncryptedCredential: to.Ptr("ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRGLURPR0ZPT0QtWUFOWkhBTkctV1VfMGI2M2EyMmYtMGEzNC00NDg2LWIzMDktNzM0NTlkODUyY2Q1Ig0KfQ=="),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServices_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewLinkedServicesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleLinkedService",
		&armdatafactory.LinkedServicesClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.LinkedServiceResource{
			Name: to.Ptr("exampleLinkedService"),
			Type: to.Ptr("Microsoft.DataFactory/factories/linkedservices"),
			Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/linkedservices/exampleLinkedService"),
			Properties: &armdatafactory.AzureStorageLinkedService{
				Type:        to.Ptr("AzureStorage"),
				Description: to.Ptr("Example description"),
				TypeProperties: &armdatafactory.AzureStorageLinkedServiceTypeProperties{
					ConnectionString: map[string]interface{}{
						"type":  "SecureString",
						"value": "**********",
					},
					EncryptedCredential: to.Ptr("ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkhWVEVTVEVYQU1QTEVTXzg5MjU1NGY0LTViNGItNDFhOS1hYWYxLTg4ZWI5ZDBjOWIzMyINCn0="),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServices_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewLinkedServicesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleLinkedService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/LinkedServices_Delete.json: %v", err)
	}
}

func TestDatasets_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datasets_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDatasetsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.DatasetListResponse{
			Value: []*armdatafactory.DatasetResource{
				{
					Name: to.Ptr("exampleDataset"),
					Type: to.Ptr("Microsoft.DataFactory/factories/datasets"),
					Etag: to.Ptr("0a0068d4-0000-0000-0000-5b245bd30000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset"),
					Properties: &armdatafactory.AzureBlobDataset{
						Type:        to.Ptr("AzureBlob"),
						Description: to.Ptr("Example description"),
						LinkedServiceName: &armdatafactory.LinkedServiceReference{
							Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
							ReferenceName: to.Ptr("exampleLinkedService"),
						},
						Parameters: map[string]*armdatafactory.ParameterSpecification{
							"MyFileName": {
								Type: to.Ptr(armdatafactory.ParameterTypeString),
							},
							"MyFolderPath": {
								Type: to.Ptr(armdatafactory.ParameterTypeString),
							},
						},
						TypeProperties: &armdatafactory.AzureBlobDatasetTypeProperties{
							Format: &armdatafactory.TextFormat{
								Type: to.Ptr("TextFormat"),
							},
							FileName: map[string]interface{}{
								"type":  "Expression",
								"value": "@dataset().MyFileName",
							},
							FolderPath: map[string]interface{}{
								"type":  "Expression",
								"value": "@dataset().MyFolderPath",
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatasetListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatasetListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatasets_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datasets_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDatasetsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataset",
		armdatafactory.DatasetResource{
			Properties: &armdatafactory.AzureBlobDataset{
				Type: to.Ptr("AzureBlob"),
				LinkedServiceName: &armdatafactory.LinkedServiceReference{
					Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
					ReferenceName: to.Ptr("exampleLinkedService"),
				},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"MyFileName": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"MyFolderPath": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
				},
				TypeProperties: &armdatafactory.AzureBlobDatasetTypeProperties{
					Format: &armdatafactory.TextFormat{
						Type: to.Ptr("TextFormat"),
					},
					FileName: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFileName",
					},
					FolderPath: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFolderPath",
					},
				},
			},
		},
		&armdatafactory.DatasetsClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DatasetResource{
			Name: to.Ptr("exampleDataset"),
			Type: to.Ptr("Microsoft.DataFactory/factories/datasets"),
			Etag: to.Ptr("0a0066d4-0000-0000-0000-5b245bd20000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset"),
			Properties: &armdatafactory.AzureBlobDataset{
				Type: to.Ptr("AzureBlob"),
				Schema: []interface{}{
					map[string]interface{}{
						"name": "col1",
						"type": "INT_32",
					},
					map[string]interface{}{
						"name":      "col2",
						"type":      "Decimal",
						"precision": "38",
						"scale":     "2",
					},
				},
				LinkedServiceName: &armdatafactory.LinkedServiceReference{
					Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
					ReferenceName: to.Ptr("exampleLinkedService"),
				},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"MyFileName": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"MyFolderPath": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
				},
				TypeProperties: &armdatafactory.AzureBlobDatasetTypeProperties{
					Format: &armdatafactory.TextFormat{
						Type: to.Ptr("TextFormat"),
					},
					FileName: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFileName",
					},
					FolderPath: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFolderPath",
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatasetResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatasetResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datasets_Update"},
	})
	client = armdatafactory.NewDatasetsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataset",
		armdatafactory.DatasetResource{
			Properties: &armdatafactory.AzureBlobDataset{
				Type:        to.Ptr("AzureBlob"),
				Description: to.Ptr("Example description"),
				LinkedServiceName: &armdatafactory.LinkedServiceReference{
					Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
					ReferenceName: to.Ptr("exampleLinkedService"),
				},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"MyFileName": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"MyFolderPath": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
				},
				TypeProperties: &armdatafactory.AzureBlobDatasetTypeProperties{
					Format: &armdatafactory.TextFormat{
						Type: to.Ptr("TextFormat"),
					},
					FileName: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFileName",
					},
					FolderPath: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFolderPath",
					},
				},
			},
		},
		&armdatafactory.DatasetsClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DatasetResource{
			Name: to.Ptr("exampleDataset"),
			Type: to.Ptr("Microsoft.DataFactory/factories/datasets"),
			Etag: to.Ptr("0a0068d4-0000-0000-0000-5b245bd30000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset"),
			Properties: &armdatafactory.AzureBlobDataset{
				Type:        to.Ptr("AzureBlob"),
				Description: to.Ptr("Example description"),
				LinkedServiceName: &armdatafactory.LinkedServiceReference{
					Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
					ReferenceName: to.Ptr("exampleLinkedService"),
				},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"MyFileName": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"MyFolderPath": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
				},
				TypeProperties: &armdatafactory.AzureBlobDatasetTypeProperties{
					Format: &armdatafactory.TextFormat{
						Type: to.Ptr("TextFormat"),
					},
					FileName: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFileName",
					},
					FolderPath: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFolderPath",
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatasetResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatasetResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatasets_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datasets_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDatasetsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataset",
		&armdatafactory.DatasetsClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DatasetResource{
			Name: to.Ptr("exampleDataset"),
			Type: to.Ptr("Microsoft.DataFactory/factories/datasets"),
			Etag: to.Ptr("15004c4f-0000-0200-0000-5cbe090e0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset"),
			Properties: &armdatafactory.AzureBlobDataset{
				Type:        to.Ptr("AzureBlob"),
				Description: to.Ptr("Example description"),
				LinkedServiceName: &armdatafactory.LinkedServiceReference{
					Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
					ReferenceName: to.Ptr("exampleLinkedService"),
				},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"MyFileName": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"MyFolderPath": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
				},
				TypeProperties: &armdatafactory.AzureBlobDatasetTypeProperties{
					Format: &armdatafactory.TextFormat{
						Type: to.Ptr("TextFormat"),
					},
					FileName: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFileName",
					},
					FolderPath: map[string]interface{}{
						"type":  "Expression",
						"value": "@dataset().MyFolderPath",
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatasetResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatasetResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatasets_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datasets_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDatasetsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataset",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Datasets_Delete.json: %v", err)
	}
}

func TestPipelines_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pipelines_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelinesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.PipelineListResponse{
			Value: []*armdatafactory.PipelineResource{
				{
					Name: to.Ptr("examplePipeline"),
					Type: to.Ptr("Microsoft.DataFactory/factories/pipelines"),
					Etag: to.Ptr("0a006cd4-0000-0000-0000-5b245bd60000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/pipelines/examplePipeline"),
					Properties: &armdatafactory.Pipeline{
						Description: to.Ptr("Example description"),
						Activities: []armdatafactory.ActivityClassification{
							&armdatafactory.ForEachActivity{
								Name: to.Ptr("ExampleForeachActivity"),
								Type: to.Ptr("ForEach"),
								TypeProperties: &armdatafactory.ForEachActivityTypeProperties{
									Activities: []armdatafactory.ActivityClassification{
										&armdatafactory.CopyActivity{
											Name: to.Ptr("ExampleCopyActivity"),
											Type: to.Ptr("Copy"),
											Inputs: []*armdatafactory.DatasetReference{
												{
													Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
													Parameters: map[string]interface{}{
														"MyFileName":   "examplecontainer.csv",
														"MyFolderPath": "examplecontainer",
													},
													ReferenceName: to.Ptr("exampleDataset"),
												}},
											Outputs: []*armdatafactory.DatasetReference{
												{
													Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
													Parameters: map[string]interface{}{
														"MyFileName": map[string]interface{}{
															"type":  "Expression",
															"value": "@item()",
														},
														"MyFolderPath": "examplecontainer",
													},
													ReferenceName: to.Ptr("exampleDataset"),
												}},
											TypeProperties: &armdatafactory.CopyActivityTypeProperties{
												DataIntegrationUnits: float64(32),
												Sink: &armdatafactory.BlobSink{
													Type: to.Ptr("BlobSink"),
												},
												Source: &armdatafactory.BlobSource{
													Type: to.Ptr("BlobSource"),
												},
											},
										}},
									IsSequential: to.Ptr(true),
									Items: &armdatafactory.Expression{
										Type:  to.Ptr(armdatafactory.ExpressionTypeExpression),
										Value: to.Ptr("@pipeline().parameters.OutputBlobNameList"),
									},
								},
							}},
						Parameters: map[string]*armdatafactory.ParameterSpecification{
							"OutputBlobNameList": {
								Type: to.Ptr(armdatafactory.ParameterTypeArray),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PipelineListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PipelineListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pipelines_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelinesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"examplePipeline",
		armdatafactory.PipelineResource{
			Properties: &armdatafactory.Pipeline{
				Activities: []armdatafactory.ActivityClassification{
					&armdatafactory.ForEachActivity{
						Name: to.Ptr("ExampleForeachActivity"),
						Type: to.Ptr("ForEach"),
						TypeProperties: &armdatafactory.ForEachActivityTypeProperties{
							Activities: []armdatafactory.ActivityClassification{
								&armdatafactory.CopyActivity{
									Name: to.Ptr("ExampleCopyActivity"),
									Type: to.Ptr("Copy"),
									Inputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName":   "examplecontainer.csv",
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									Outputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName": map[string]interface{}{
													"type":  "Expression",
													"value": "@item()",
												},
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									TypeProperties: &armdatafactory.CopyActivityTypeProperties{
										DataIntegrationUnits: float64(32),
										Sink: &armdatafactory.BlobSink{
											Type: to.Ptr("BlobSink"),
										},
										Source: &armdatafactory.BlobSource{
											Type: to.Ptr("BlobSource"),
										},
									},
								}},
							IsSequential: to.Ptr(true),
							Items: &armdatafactory.Expression{
								Type:  to.Ptr(armdatafactory.ExpressionTypeExpression),
								Value: to.Ptr("@pipeline().parameters.OutputBlobNameList"),
							},
						},
					}},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"JobId": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"OutputBlobNameList": {
						Type: to.Ptr(armdatafactory.ParameterTypeArray),
					},
				},
				Policy: &armdatafactory.PipelinePolicy{
					ElapsedTimeMetric: &armdatafactory.PipelineElapsedTimeMetricPolicy{
						Duration: "0.00:10:00",
					},
				},
				RunDimensions: map[string]interface{}{
					"JobId": map[string]interface{}{
						"type":  "Expression",
						"value": "@pipeline().parameters.JobId",
					},
				},
				Variables: map[string]*armdatafactory.VariableSpecification{
					"TestVariableArray": {
						Type: to.Ptr(armdatafactory.VariableTypeArray),
					},
				},
			},
		},
		&armdatafactory.PipelinesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PipelineResource{
			Name: to.Ptr("examplePipeline"),
			Type: to.Ptr("Microsoft.DataFactory/factories/pipelines"),
			Etag: to.Ptr("0a0069d4-0000-0000-0000-5b245bd50000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/pipelines/examplePipeline"),
			Properties: &armdatafactory.Pipeline{
				Activities: []armdatafactory.ActivityClassification{
					&armdatafactory.ForEachActivity{
						Name: to.Ptr("ExampleForeachActivity"),
						Type: to.Ptr("ForEach"),
						TypeProperties: &armdatafactory.ForEachActivityTypeProperties{
							Activities: []armdatafactory.ActivityClassification{
								&armdatafactory.CopyActivity{
									Name: to.Ptr("ExampleCopyActivity"),
									Type: to.Ptr("Copy"),
									Inputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName":   "examplecontainer.csv",
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									Outputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName": map[string]interface{}{
													"type":  "Expression",
													"value": "@item()",
												},
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									TypeProperties: &armdatafactory.CopyActivityTypeProperties{
										DataIntegrationUnits: float64(32),
										Sink: &armdatafactory.BlobSink{
											Type: to.Ptr("BlobSink"),
										},
										Source: &armdatafactory.BlobSource{
											Type: to.Ptr("BlobSource"),
										},
									},
								}},
							IsSequential: to.Ptr(true),
							Items: &armdatafactory.Expression{
								Type:  to.Ptr(armdatafactory.ExpressionTypeExpression),
								Value: to.Ptr("@pipeline().parameters.OutputBlobNameList"),
							},
						},
					}},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"JobId": {
						Type: to.Ptr(armdatafactory.ParameterTypeString),
					},
					"OutputBlobNameList": {
						Type: to.Ptr(armdatafactory.ParameterTypeArray),
					},
				},
				RunDimensions: map[string]interface{}{
					"JobId": map[string]interface{}{
						"type":  "Expression",
						"value": "@pipeline().parameters.JobId",
					},
				},
				Variables: map[string]*armdatafactory.VariableSpecification{
					"TestVariableArray": {
						Type: to.Ptr(armdatafactory.VariableTypeArray),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pipelines_Update"},
	})
	client = armdatafactory.NewPipelinesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"examplePipeline",
		armdatafactory.PipelineResource{
			Properties: &armdatafactory.Pipeline{
				Description: to.Ptr("Example description"),
				Activities: []armdatafactory.ActivityClassification{
					&armdatafactory.ForEachActivity{
						Name: to.Ptr("ExampleForeachActivity"),
						Type: to.Ptr("ForEach"),
						TypeProperties: &armdatafactory.ForEachActivityTypeProperties{
							Activities: []armdatafactory.ActivityClassification{
								&armdatafactory.CopyActivity{
									Name: to.Ptr("ExampleCopyActivity"),
									Type: to.Ptr("Copy"),
									Inputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName":   "examplecontainer.csv",
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									Outputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName": map[string]interface{}{
													"type":  "Expression",
													"value": "@item()",
												},
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									TypeProperties: &armdatafactory.CopyActivityTypeProperties{
										DataIntegrationUnits: float64(32),
										Sink: &armdatafactory.BlobSink{
											Type: to.Ptr("BlobSink"),
										},
										Source: &armdatafactory.BlobSource{
											Type: to.Ptr("BlobSource"),
										},
									},
								}},
							IsSequential: to.Ptr(true),
							Items: &armdatafactory.Expression{
								Type:  to.Ptr(armdatafactory.ExpressionTypeExpression),
								Value: to.Ptr("@pipeline().parameters.OutputBlobNameList"),
							},
						},
					}},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"OutputBlobNameList": {
						Type: to.Ptr(armdatafactory.ParameterTypeArray),
					},
				},
				Policy: &armdatafactory.PipelinePolicy{
					ElapsedTimeMetric: &armdatafactory.PipelineElapsedTimeMetricPolicy{
						Duration: "0.00:10:00",
					},
				},
			},
		},
		&armdatafactory.PipelinesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PipelineResource{
			Name: to.Ptr("examplePipeline"),
			Type: to.Ptr("Microsoft.DataFactory/factories/pipelines"),
			Etag: to.Ptr("0a006cd4-0000-0000-0000-5b245bd60000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/pipelines/examplePipeline"),
			Properties: &armdatafactory.Pipeline{
				Description: to.Ptr("Example description"),
				Activities: []armdatafactory.ActivityClassification{
					&armdatafactory.ForEachActivity{
						Name: to.Ptr("ExampleForeachActivity"),
						Type: to.Ptr("ForEach"),
						TypeProperties: &armdatafactory.ForEachActivityTypeProperties{
							Activities: []armdatafactory.ActivityClassification{
								&armdatafactory.CopyActivity{
									Name: to.Ptr("ExampleCopyActivity"),
									Type: to.Ptr("Copy"),
									Inputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName":   "examplecontainer.csv",
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									Outputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName": map[string]interface{}{
													"type":  "Expression",
													"value": "@item()",
												},
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									TypeProperties: &armdatafactory.CopyActivityTypeProperties{
										DataIntegrationUnits: float64(32),
										Sink: &armdatafactory.BlobSink{
											Type: to.Ptr("BlobSink"),
										},
										Source: &armdatafactory.BlobSource{
											Type: to.Ptr("BlobSource"),
										},
									},
								}},
							IsSequential: to.Ptr(true),
							Items: &armdatafactory.Expression{
								Type:  to.Ptr(armdatafactory.ExpressionTypeExpression),
								Value: to.Ptr("@pipeline().parameters.OutputBlobNameList"),
							},
						},
					}},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"OutputBlobNameList": {
						Type: to.Ptr(armdatafactory.ParameterTypeArray),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pipelines_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelinesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"examplePipeline",
		&armdatafactory.PipelinesClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PipelineResource{
			Name: to.Ptr("examplePipeline"),
			Type: to.Ptr("Microsoft.DataFactory/factories/pipelines"),
			Etag: to.Ptr("1500504f-0000-0200-0000-5cbe090f0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/pipelines/examplePipeline"),
			Properties: &armdatafactory.Pipeline{
				Description: to.Ptr("Example description"),
				Activities: []armdatafactory.ActivityClassification{
					&armdatafactory.ForEachActivity{
						Name: to.Ptr("ExampleForeachActivity"),
						Type: to.Ptr("ForEach"),
						TypeProperties: &armdatafactory.ForEachActivityTypeProperties{
							Activities: []armdatafactory.ActivityClassification{
								&armdatafactory.CopyActivity{
									Name: to.Ptr("ExampleCopyActivity"),
									Type: to.Ptr("Copy"),
									Inputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName":   "examplecontainer.csv",
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									Outputs: []*armdatafactory.DatasetReference{
										{
											Type: to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
											Parameters: map[string]interface{}{
												"MyFileName": map[string]interface{}{
													"type":  "Expression",
													"value": "@item()",
												},
												"MyFolderPath": "examplecontainer",
											},
											ReferenceName: to.Ptr("exampleDataset"),
										}},
									TypeProperties: &armdatafactory.CopyActivityTypeProperties{
										DataIntegrationUnits: float64(32),
										Sink: &armdatafactory.BlobSink{
											Type: to.Ptr("BlobSink"),
										},
										Source: &armdatafactory.BlobSource{
											Type: to.Ptr("BlobSource"),
										},
									},
								}},
							IsSequential: to.Ptr(true),
							Items: &armdatafactory.Expression{
								Type:  to.Ptr(armdatafactory.ExpressionTypeExpression),
								Value: to.Ptr("@pipeline().parameters.OutputBlobNameList"),
							},
						},
					}},
				Parameters: map[string]*armdatafactory.ParameterSpecification{
					"OutputBlobNameList": {
						Type: to.Ptr(armdatafactory.ParameterTypeArray),
					},
				},
				Policy: &armdatafactory.PipelinePolicy{
					ElapsedTimeMetric: &armdatafactory.PipelineElapsedTimeMetricPolicy{
						Duration: "0.00:10:00",
					},
				},
				Variables: map[string]*armdatafactory.VariableSpecification{
					"TestVariableArray": {
						Type: to.Ptr(armdatafactory.VariableTypeArray),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pipelines_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelinesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"examplePipeline",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Delete.json: %v", err)
	}
}

func TestPipelines_CreateRun(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_CreateRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pipelines_CreateRun"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelinesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateRun(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"examplePipeline",
		&armdatafactory.PipelinesClientCreateRunOptions{ReferencePipelineRunID: nil,
			IsRecovery:        nil,
			StartActivityName: nil,
			StartFromFailure:  nil,
			Parameters: map[string]interface{}{
				"OutputBlobNameList": []interface{}{
					"exampleoutput.csv",
				},
			},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_CreateRun.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.CreateRunResponse{
			RunID: to.Ptr("2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"),
		}
		if !reflect.DeepEqual(exampleRes, res.CreateRunResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CreateRunResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_CreateRun.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_QueryByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_QueryByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRuns_QueryByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelineRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.QueryByFactory(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.RunFilterParameters{
			Filters: []*armdatafactory.RunQueryFilter{
				{
					Operand:  to.Ptr(armdatafactory.RunQueryFilterOperandPipelineName),
					Operator: to.Ptr(armdatafactory.RunQueryFilterOperatorEquals),
					Values: []*string{
						to.Ptr("examplePipeline")},
				}},
			LastUpdatedAfter:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:36:44.3345758Z"); return t }()),
			LastUpdatedBefore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:49:48.3686473Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_QueryByFactory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PipelineRunsQueryResponse{
			Value: []*armdatafactory.PipelineRun{
				{
					AdditionalProperties: map[string]interface{}{
						"annotations": []interface{}{},
						"runDimension": map[string]interface{}{
							"JobId": "79c1cc52-265f-41a5-9553-be65e736fbd3",
						},
					},
					DurationInMs: to.Ptr[int32](28105),
					InvokedBy: &armdatafactory.PipelineRunInvokedBy{
						Name: to.Ptr("Manual"),
						ID:   to.Ptr("80a01654a9d34ad18b3fcac5d5d76b67"),
					},
					LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:38:12.7314495Z"); return t }()),
					Message:     to.Ptr(""),
					Parameters: map[string]*string{
						"OutputBlobNameList": to.Ptr("[\"exampleoutput.csv\"]"),
					},
					PipelineName: to.Ptr("examplePipeline"),
					RunEnd:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:38:12.7314495Z"); return t }()),
					RunID:        to.Ptr("2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"),
					RunStart:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:37:44.6257014Z"); return t }()),
					Status:       to.Ptr("Succeeded"),
				},
				{
					AdditionalProperties: map[string]interface{}{
						"annotations": []interface{}{},
						"runDimension": map[string]interface{}{
							"JobId": "84a3c493-0628-4b44-852f-ef5b3a11bdab",
						},
					},
					InvokedBy: &armdatafactory.PipelineRunInvokedBy{
						Name: to.Ptr("Manual"),
						ID:   to.Ptr("7c5fd7ef7e8a464b98b931cf15fcac66"),
					},
					LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:51.216097Z"); return t }()),
					Message:     to.Ptr(""),
					Parameters: map[string]*string{
						"OutputBlobNameList": to.Ptr("[\"exampleoutput.csv\"]"),
					},
					PipelineName: to.Ptr("examplePipeline"),
					RunID:        to.Ptr("16ac5348-ff82-4f95-a80d-638c1d47b721"),
					RunStart:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:49.2745128Z"); return t }()),
					Status:       to.Ptr("Cancelled"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineRunsQueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineRunsQueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_QueryByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRuns_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelineRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"2f7fdb90-5df1-4b8e-ac2f-064cfa58202b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PipelineRun{
			AdditionalProperties: map[string]interface{}{
				"annotations": []interface{}{},
			},
			DurationInMs: to.Ptr[int32](28105),
			InvokedBy: &armdatafactory.PipelineRunInvokedBy{
				Name: to.Ptr("Manual"),
				ID:   to.Ptr("80a01654a9d34ad18b3fcac5d5d76b67"),
			},
			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:38:12.7314495Z"); return t }()),
			Message:     to.Ptr(""),
			Parameters: map[string]*string{
				"OutputBlobNameList": to.Ptr("[\"exampleoutput.csv\"]"),
			},
			PipelineName: to.Ptr("examplePipeline"),
			RunEnd:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:38:12.7314495Z"); return t }()),
			RunID:        to.Ptr("2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"),
			RunStart:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:37:44.6257014Z"); return t }()),
			Status:       to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineRun)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_Cancel(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_Cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRuns_Cancel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPipelineRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Cancel(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"16ac5348-ff82-4f95-a80d-638c1d47b721",
		&armdatafactory.PipelineRunsClientCancelOptions{IsRecursive: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PipelineRuns_Cancel.json: %v", err)
	}
}

func TestActivityRuns_QueryByPipelineRun(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ActivityRuns_QueryByPipelineRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ActivityRuns_QueryByPipelineRun"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewActivityRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.QueryByPipelineRun(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"2f7fdb90-5df1-4b8e-ac2f-064cfa58202b",
		armdatafactory.RunFilterParameters{
			LastUpdatedAfter:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:36:44.3345758Z"); return t }()),
			LastUpdatedBefore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:49:48.3686473Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ActivityRuns_QueryByPipelineRun.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ActivityRunsQueryResponse{
			Value: []*armdatafactory.ActivityRun{
				{
					AdditionalProperties: map[string]interface{}{
						"retryAttempt":   nil,
						"userProperties": map[string]interface{}{},
					},
					ActivityName:     to.Ptr("ExampleForeachActivity"),
					ActivityRunEnd:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:38:11.5445431Z"); return t }()),
					ActivityRunID:    to.Ptr("f30c5514-fb85-43ed-9fa4-768d42e58680"),
					ActivityRunStart: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:37:49.4804925Z"); return t }()),
					ActivityType:     to.Ptr("ForEach"),
					DurationInMs:     to.Ptr[int32](22064),
					Error: map[string]interface{}{
						"errorCode":   "",
						"failureType": "",
						"message":     "",
						"target":      "ExampleForeachActivity",
					},
					Input:             map[string]interface{}{},
					LinkedServiceName: to.Ptr(""),
					Output:            map[string]interface{}{},
					PipelineName:      to.Ptr("examplePipeline"),
					PipelineRunID:     to.Ptr("2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"),
					Status:            to.Ptr("Succeeded"),
				},
				{
					AdditionalProperties: map[string]interface{}{
						"retryAttempt":   nil,
						"userProperties": map[string]interface{}{},
					},
					ActivityName:     to.Ptr("ExampleCopyActivity"),
					ActivityRunEnd:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:38:07.4188923Z"); return t }()),
					ActivityRunID:    to.Ptr("a96678c8-7167-4f00-b629-afccfbad4e51"),
					ActivityRunStart: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:37:50.2460952Z"); return t }()),
					ActivityType:     to.Ptr("Copy"),
					DurationInMs:     to.Ptr[int32](17172),
					Error: map[string]interface{}{
						"errorCode":   "",
						"failureType": "",
						"message":     "",
						"target":      "ExampleCopyActivity",
					},
					Input: map[string]interface{}{
						"dataIntegrationUnits": float64(32),
						"sink": map[string]interface{}{
							"type": "BlobSink",
						},
						"source": map[string]interface{}{
							"type": "BlobSource",
						},
					},
					LinkedServiceName: to.Ptr(""),
					Output: map[string]interface{}{
						"copyDuration":                float64(6),
						"dataRead":                    float64(142000),
						"dataWritten":                 float64(142000),
						"effectiveIntegrationRuntime": "DefaultIntegrationRuntime (East US)",
						"errors":                      []interface{}{},
						"executionDetails": []interface{}{
							map[string]interface{}{
								"detailedDurations": map[string]interface{}{
									"queuingDuration":  float64(4),
									"transferDuration": float64(2),
								},
								"duration": float64(6),
								"sink": map[string]interface{}{
									"type": "AzureBlob",
								},
								"source": map[string]interface{}{
									"type": "AzureBlob",
								},
								"start":                      "2018-06-16T00:37:50.68834Z",
								"status":                     "Succeeded",
								"usedCloudDataMovementUnits": float64(4),
								"usedParallelCopies":         float64(1),
							},
						},
						"filesRead":                  float64(1),
						"filesWritten":               float64(1),
						"throughput":                 float64(23.112),
						"usedCloudDataMovementUnits": float64(4),
						"usedParallelCopies":         float64(1),
					},
					PipelineName:  to.Ptr("examplePipeline"),
					PipelineRunID: to.Ptr("2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"),
					Status:        to.Ptr("Succeeded"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ActivityRunsQueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivityRunsQueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ActivityRuns_QueryByPipelineRun.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.TriggerListResponse{
			Value: []*armdatafactory.TriggerResource{
				{
					Name: to.Ptr("exampleTrigger"),
					Type: to.Ptr("Microsoft.DataFactory/factories/triggers"),
					Etag: to.Ptr("0a008ed4-0000-0000-0000-5b245c740000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/triggers/exampleTrigger"),
					Properties: &armdatafactory.ScheduleTrigger{
						Type:         to.Ptr("ScheduleTrigger"),
						Description:  to.Ptr("Example description"),
						RuntimeState: to.Ptr(armdatafactory.TriggerRuntimeStateStarted),
						Pipelines: []*armdatafactory.TriggerPipelineReference{
							{
								Parameters: map[string]interface{}{
									"OutputBlobNameList": []interface{}{
										"exampleoutput.csv",
									},
								},
								PipelineReference: &armdatafactory.PipelineReference{
									Type:          to.Ptr(armdatafactory.PipelineReferenceTypePipelineReference),
									ReferenceName: to.Ptr("examplePipeline"),
								},
							}},
						TypeProperties: &armdatafactory.ScheduleTriggerTypeProperties{
							Recurrence: &armdatafactory.ScheduleTriggerRecurrence{
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:55:14.905167Z"); return t }()),
								Frequency: to.Ptr(armdatafactory.RecurrenceFrequencyMinute),
								Interval:  to.Ptr[int32](4),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:14.905167Z"); return t }()),
								TimeZone:  to.Ptr("UTC"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TriggerListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TriggerListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_QueryByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_QueryByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_QueryByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.QueryByFactory(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.TriggerFilterParameters{
			ParentTriggerName: to.Ptr("exampleTrigger"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_QueryByFactory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerQueryResponse{
			Value: []*armdatafactory.TriggerResource{
				{
					Name: to.Ptr("exampleRerunTrigger"),
					Type: to.Ptr("Microsoft.DataFactory/factories/triggers"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/triggers/exampleRerunTrigger"),
					Properties: &armdatafactory.RerunTumblingWindowTrigger{
						Type:        to.Ptr("RerunTumblingWindowTrigger"),
						Description: to.Ptr("Example description"),
						TypeProperties: &armdatafactory.RerunTumblingWindowTriggerTypeProperties{
							ParentTrigger:      "exampleTrigger",
							RequestedEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:55:14.905167Z"); return t }()),
							RequestedStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:14.905167Z"); return t }()),
							RerunConcurrency:   to.Ptr[int32](4),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerQueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerQueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_QueryByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		armdatafactory.TriggerResource{
			Properties: &armdatafactory.ScheduleTrigger{
				Type: to.Ptr("ScheduleTrigger"),
				Pipelines: []*armdatafactory.TriggerPipelineReference{
					{
						Parameters: map[string]interface{}{
							"OutputBlobNameList": []interface{}{
								"exampleoutput.csv",
							},
						},
						PipelineReference: &armdatafactory.PipelineReference{
							Type:          to.Ptr(armdatafactory.PipelineReferenceTypePipelineReference),
							ReferenceName: to.Ptr("examplePipeline"),
						},
					}},
				TypeProperties: &armdatafactory.ScheduleTriggerTypeProperties{
					Recurrence: &armdatafactory.ScheduleTriggerRecurrence{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:55:13.8441801Z"); return t }()),
						Frequency: to.Ptr(armdatafactory.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](4),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:13.8441801Z"); return t }()),
						TimeZone:  to.Ptr("UTC"),
					},
				},
			},
		},
		&armdatafactory.TriggersClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerResource{
			Name: to.Ptr("exampleTrigger"),
			Type: to.Ptr("Microsoft.DataFactory/factories/triggers"),
			Etag: to.Ptr("0a008ad4-0000-0000-0000-5b245c6e0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/triggers/exampleTrigger"),
			Properties: &armdatafactory.ScheduleTrigger{
				Type:         to.Ptr("ScheduleTrigger"),
				RuntimeState: to.Ptr(armdatafactory.TriggerRuntimeStateStopped),
				Pipelines: []*armdatafactory.TriggerPipelineReference{
					{
						Parameters: map[string]interface{}{
							"OutputBlobNameList": []interface{}{
								"exampleoutput.csv",
							},
						},
						PipelineReference: &armdatafactory.PipelineReference{
							Type:          to.Ptr(armdatafactory.PipelineReferenceTypePipelineReference),
							ReferenceName: to.Ptr("examplePipeline"),
						},
					}},
				TypeProperties: &armdatafactory.ScheduleTriggerTypeProperties{
					Recurrence: &armdatafactory.ScheduleTriggerRecurrence{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:55:13.8441801Z"); return t }()),
						Frequency: to.Ptr(armdatafactory.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](4),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:13.8441801Z"); return t }()),
						TimeZone:  to.Ptr("UTC"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Update"},
	})
	client = armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		armdatafactory.TriggerResource{
			Properties: &armdatafactory.ScheduleTrigger{
				Type:        to.Ptr("ScheduleTrigger"),
				Description: to.Ptr("Example description"),
				Pipelines: []*armdatafactory.TriggerPipelineReference{
					{
						Parameters: map[string]interface{}{
							"OutputBlobNameList": []interface{}{
								"exampleoutput.csv",
							},
						},
						PipelineReference: &armdatafactory.PipelineReference{
							Type:          to.Ptr(armdatafactory.PipelineReferenceTypePipelineReference),
							ReferenceName: to.Ptr("examplePipeline"),
						},
					}},
				TypeProperties: &armdatafactory.ScheduleTriggerTypeProperties{
					Recurrence: &armdatafactory.ScheduleTriggerRecurrence{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:55:14.905167Z"); return t }()),
						Frequency: to.Ptr(armdatafactory.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](4),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:14.905167Z"); return t }()),
						TimeZone:  to.Ptr("UTC"),
					},
				},
			},
		},
		&armdatafactory.TriggersClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerResource{
			Name: to.Ptr("exampleTrigger"),
			Type: to.Ptr("Microsoft.DataFactory/factories/triggers"),
			Etag: to.Ptr("0a008dd4-0000-0000-0000-5b245c6f0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/triggers/exampleTrigger"),
			Properties: &armdatafactory.ScheduleTrigger{
				Type:         to.Ptr("ScheduleTrigger"),
				Description:  to.Ptr("Example description"),
				RuntimeState: to.Ptr(armdatafactory.TriggerRuntimeStateStopped),
				Pipelines: []*armdatafactory.TriggerPipelineReference{
					{
						Parameters: map[string]interface{}{
							"OutputBlobNameList": []interface{}{
								"exampleoutput.csv",
							},
						},
						PipelineReference: &armdatafactory.PipelineReference{
							Type:          to.Ptr(armdatafactory.PipelineReferenceTypePipelineReference),
							ReferenceName: to.Ptr("examplePipeline"),
						},
					}},
				TypeProperties: &armdatafactory.ScheduleTriggerTypeProperties{
					Recurrence: &armdatafactory.ScheduleTriggerRecurrence{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:55:14.905167Z"); return t }()),
						Frequency: to.Ptr(armdatafactory.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](4),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:39:14.905167Z"); return t }()),
						TimeZone:  to.Ptr("UTC"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		&armdatafactory.TriggersClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerResource{
			Name: to.Ptr("exampleTrigger"),
			Type: to.Ptr("Microsoft.DataFactory/factories/triggers"),
			Etag: to.Ptr("1500544f-0000-0200-0000-5cbe09100000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/triggers/exampleTrigger"),
			Properties: &armdatafactory.ScheduleTrigger{
				Type:         to.Ptr("ScheduleTrigger"),
				RuntimeState: to.Ptr(armdatafactory.TriggerRuntimeStateStopped),
				Pipelines: []*armdatafactory.TriggerPipelineReference{
					{
						Parameters: map[string]interface{}{
							"OutputBlobNameList": []interface{}{
								"exampleoutput.csv",
							},
						},
						PipelineReference: &armdatafactory.PipelineReference{
							Type:          to.Ptr(armdatafactory.PipelineReferenceTypePipelineReference),
							ReferenceName: to.Ptr("examplePipeline"),
						},
					}},
				TypeProperties: &armdatafactory.ScheduleTriggerTypeProperties{
					Recurrence: &armdatafactory.ScheduleTriggerRecurrence{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-22T18:48:52.5281747Z"); return t }()),
						Frequency: to.Ptr(armdatafactory.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](4),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-22T18:32:52.527912Z"); return t }()),
						TimeZone:  to.Ptr("UTC"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Delete.json: %v", err)
	}
}

func TestTriggers_SubscribeToEvents(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_SubscribeToEvents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_SubscribeToEvents"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginSubscribeToEvents(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		&armdatafactory.TriggersClientBeginSubscribeToEventsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_SubscribeToEvents.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_SubscribeToEvents.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerSubscriptionOperationStatus{
			Status:      to.Ptr(armdatafactory.EventSubscriptionStatusEnabled),
			TriggerName: to.Ptr("exampleTrigger"),
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerSubscriptionOperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerSubscriptionOperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_SubscribeToEvents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_GetEventSubscriptionStatus(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_GetEventSubscriptionStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_GetEventSubscriptionStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.GetEventSubscriptionStatus(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_GetEventSubscriptionStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerSubscriptionOperationStatus{
			Status:      to.Ptr(armdatafactory.EventSubscriptionStatusEnabled),
			TriggerName: to.Ptr("exampleTrigger"),
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerSubscriptionOperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerSubscriptionOperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_GetEventSubscriptionStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_UnsubscribeFromEvents(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_UnsubscribeFromEvents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_UnsubscribeFromEvents"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginUnsubscribeFromEvents(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		&armdatafactory.TriggersClientBeginUnsubscribeFromEventsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_UnsubscribeFromEvents.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_UnsubscribeFromEvents.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerSubscriptionOperationStatus{
			Status:      to.Ptr(armdatafactory.EventSubscriptionStatusDisabled),
			TriggerName: to.Ptr("exampleTrigger"),
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerSubscriptionOperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerSubscriptionOperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_UnsubscribeFromEvents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Start(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginStart(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		&armdatafactory.TriggersClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Start.json: %v", err)
	}
}

func TestTriggers_Stop(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggersClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginStop(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		&armdatafactory.TriggersClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Triggers_Stop.json: %v", err)
	}
}

func TestTriggerRuns_Rerun(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_Rerun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Rerun"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggerRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Rerun(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		"2f7fdb90-5df1-4b8e-ac2f-064cfa58202b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_Rerun.json: %v", err)
	}
}

func TestTriggerRuns_Cancel(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_Cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Triggers_Cancel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggerRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Cancel(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleTrigger",
		"2f7fdb90-5df1-4b8e-ac2f-064cfa58202b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_Cancel.json: %v", err)
	}
}

func TestTriggerRuns_QueryByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_QueryByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TriggerRuns_QueryByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewTriggerRunsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.QueryByFactory(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.RunFilterParameters{
			Filters: []*armdatafactory.RunQueryFilter{
				{
					Operand:  to.Ptr(armdatafactory.RunQueryFilterOperandTriggerName),
					Operator: to.Ptr(armdatafactory.RunQueryFilterOperatorEquals),
					Values: []*string{
						to.Ptr("exampleTrigger")},
				}},
			LastUpdatedAfter:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:36:44.3345758Z"); return t }()),
			LastUpdatedBefore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:49:48.3686473Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_QueryByFactory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.TriggerRunsQueryResponse{
			Value: []*armdatafactory.TriggerRun{
				{
					Message: to.Ptr(""),
					Properties: map[string]*string{
						"ScheduleTime": to.Ptr("6/16/2018 12:43:14 AM"),
						"TriggerTime":  to.Ptr("6/16/2018 12:43:15 AM"),
					},
					Status:              to.Ptr(armdatafactory.TriggerRunStatusSucceeded),
					TriggerName:         to.Ptr("exampleTrigger"),
					TriggerRunID:        to.Ptr("08586724970898148904457116912CU27"),
					TriggerRunTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-16T00:43:15.660141Z"); return t }()),
					TriggerType:         to.Ptr("ScheduleTrigger"),
					TriggeredPipelines: map[string]*string{
						"examplePipeline": to.Ptr("9f3ce8b3-37d7-43eb-96ac-a656c0476283"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.TriggerRunsQueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TriggerRunsQueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/TriggerRuns_QueryByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlows_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlows_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataFlow",
		armdatafactory.DataFlowResource{
			Properties: &armdatafactory.MappingDataFlow{
				Type:        to.Ptr("MappingDataFlow"),
				Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
				TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
					Script: to.Ptr("source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"),
					Sinks: []*armdatafactory.DataFlowSink{
						{
							Name: to.Ptr("USDSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("USDOutput"),
							},
						},
						{
							Name: to.Ptr("CADSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CADOutput"),
							},
						}},
					Sources: []*armdatafactory.DataFlowSource{
						{
							Name: to.Ptr("USDCurrency"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetUSD"),
							},
						},
						{
							Name: to.Ptr("CADSource"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetCAD"),
							},
						}},
				},
			},
		},
		&armdatafactory.DataFlowsClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DataFlowResource{
			Name: to.Ptr("exampleDataFlow"),
			Type: to.Ptr("Microsoft.DataFactory/factories/dataflows"),
			Etag: to.Ptr("0a0066d4-0000-0000-0000-5b245bd20000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset"),
			Properties: &armdatafactory.MappingDataFlow{
				Type:        to.Ptr("MappingDataFlow"),
				Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
				TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
					Script: to.Ptr("source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"),
					Sinks: []*armdatafactory.DataFlowSink{
						{
							Name: to.Ptr("USDSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("USDOutput"),
							},
						},
						{
							Name: to.Ptr("CADSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CADOutput"),
							},
						}},
					Sources: []*armdatafactory.DataFlowSource{
						{
							Name: to.Ptr("USDCurrency"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetUSD"),
							},
						},
						{
							Name: to.Ptr("CADSource"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetCAD"),
							},
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataFlowResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataFlowResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlows_Update"},
	})
	client = armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataFlow",
		armdatafactory.DataFlowResource{
			Properties: &armdatafactory.MappingDataFlow{
				Type:        to.Ptr("MappingDataFlow"),
				Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
				TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
					Script: to.Ptr("source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"),
					Sinks: []*armdatafactory.DataFlowSink{
						{
							Name: to.Ptr("USDSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("USDOutput"),
							},
						},
						{
							Name: to.Ptr("CADSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CADOutput"),
							},
						}},
					Sources: []*armdatafactory.DataFlowSource{
						{
							Name: to.Ptr("USDCurrency"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetUSD"),
							},
						},
						{
							Name: to.Ptr("CADSource"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetCAD"),
							},
						}},
				},
			},
		},
		&armdatafactory.DataFlowsClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DataFlowResource{
			Name: to.Ptr("exampleDataFlow"),
			Type: to.Ptr("Microsoft.DataFactory/factories/dataflows"),
			Etag: to.Ptr("0a0068d4-0000-0000-0000-5b245bd30002"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset"),
			Properties: &armdatafactory.MappingDataFlow{
				Type:        to.Ptr("MappingDataFlow"),
				Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
				TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
					Script: to.Ptr("source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"),
					Sinks: []*armdatafactory.DataFlowSink{
						{
							Name: to.Ptr("USDSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("USDOutput"),
							},
						},
						{
							Name: to.Ptr("CADSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CADOutput"),
							},
						}},
					Sources: []*armdatafactory.DataFlowSource{
						{
							Name: to.Ptr("USDCurrency"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetUSD"),
							},
						},
						{
							Name: to.Ptr("CADSource"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetCAD"),
							},
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataFlowResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataFlowResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlows_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlows_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataFlow",
		&armdatafactory.DataFlowsClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DataFlowResource{
			Name: to.Ptr("exampleDataFlow"),
			Type: to.Ptr("Microsoft.DataFactory/factories/dataflows"),
			Etag: to.Ptr("15004c4f-0000-0200-0000-5cbe090e0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/dataflows/exampleDataFlow"),
			Properties: &armdatafactory.MappingDataFlow{
				Type:        to.Ptr("MappingDataFlow"),
				Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
				TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
					Script: to.Ptr("source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"),
					Sinks: []*armdatafactory.DataFlowSink{
						{
							Name: to.Ptr("USDSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("USDOutput"),
							},
						},
						{
							Name: to.Ptr("CADSink"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CADOutput"),
							},
						}},
					Sources: []*armdatafactory.DataFlowSource{
						{
							Name: to.Ptr("USDCurrency"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetUSD"),
							},
						},
						{
							Name: to.Ptr("CADSource"),
							Dataset: &armdatafactory.DatasetReference{
								Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
								ReferenceName: to.Ptr("CurrencyDatasetCAD"),
							},
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataFlowResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataFlowResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlows_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlows_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleDataFlow",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Delete.json: %v", err)
	}
}

func TestDataFlows_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlows_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.DataFlowListResponse{
			Value: []*armdatafactory.DataFlowResource{
				{
					Name: to.Ptr("exampleDataFlow"),
					Type: to.Ptr("Microsoft.DataFactory/factories/dataflows"),
					Etag: to.Ptr("0a0068d4-0000-0000-0000-5b245bd30000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/dataflows/exampleDataFlow"),
					Properties: &armdatafactory.MappingDataFlow{
						Type:        to.Ptr("MappingDataFlow"),
						Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
						TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
							Script: to.Ptr("source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"),
							Sinks: []*armdatafactory.DataFlowSink{
								{
									Name: to.Ptr("USDSink"),
									Dataset: &armdatafactory.DatasetReference{
										Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
										ReferenceName: to.Ptr("USDOutput"),
									},
								},
								{
									Name: to.Ptr("CADSink"),
									Dataset: &armdatafactory.DatasetReference{
										Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
										ReferenceName: to.Ptr("CADOutput"),
									},
								}},
							Sources: []*armdatafactory.DataFlowSource{
								{
									Name: to.Ptr("USDCurrency"),
									Dataset: &armdatafactory.DatasetReference{
										Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
										ReferenceName: to.Ptr("CurrencyDatasetUSD"),
									},
								},
								{
									Name: to.Ptr("CADSource"),
									Dataset: &armdatafactory.DatasetReference{
										Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
										ReferenceName: to.Ptr("CurrencyDatasetCAD"),
									},
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataFlowListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataFlowListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlowDebugSession_Create(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlowDebugSession_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowDebugSessionClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.CreateDataFlowDebugSessionRequest{
			IntegrationRuntime: &armdatafactory.IntegrationRuntimeDebugResource{
				Name: to.Ptr("ir1"),
				Properties: &armdatafactory.ManagedIntegrationRuntime{
					Type: to.Ptr(armdatafactory.IntegrationRuntimeTypeManaged),
					TypeProperties: &armdatafactory.ManagedIntegrationRuntimeTypeProperties{
						ComputeProperties: &armdatafactory.IntegrationRuntimeComputeProperties{
							DataFlowProperties: &armdatafactory.IntegrationRuntimeDataFlowProperties{
								ComputeType: to.Ptr(armdatafactory.DataFlowComputeTypeGeneral),
								CoreCount:   to.Ptr[int32](48),
								TimeToLive:  to.Ptr[int32](10),
							},
							Location: to.Ptr("AutoResolve"),
						},
					},
				},
			},
			TimeToLive: to.Ptr[int32](60),
		},
		&armdatafactory.DataFlowDebugSessionClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.CreateDataFlowDebugSessionResponse{
			SessionID: to.Ptr("229c688c-944c-44ac-b31a-82d50f347154"),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.CreateDataFlowDebugSessionResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CreateDataFlowDebugSessionResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlowDebugSession_QueryByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_QueryByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlowDebugSession_QueryByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowDebugSessionClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.QueryByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_QueryByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.QueryDataFlowDebugSessionsResponse{
			Value: []*armdatafactory.DataFlowDebugSessionInfo{
				{
					AdditionalProperties: map[string]interface{}{
						"dataflowName": "DebugSession-0a7e0d6e-f2b7-48cc-8cd8-618326f5662f",
						"userObjectId": "0a7e0d6e-f2b7-48cc-8cd8-618326f5662f",
					},
					ComputeType:         to.Ptr("General"),
					CoreCount:           to.Ptr[int32](48),
					LastActivityTime:    to.Ptr("2019-09-05T18:28:00.9459674+00:00"),
					SessionID:           to.Ptr("229c688c-944c-44ac-b31a-82d50f347154"),
					StartTime:           to.Ptr("2019-09-05T18:23:20.3257799+00:00"),
					TimeToLiveInMinutes: to.Ptr[int32](60),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QueryDataFlowDebugSessionsResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QueryDataFlowDebugSessionsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_QueryByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlowDebugSession_AddDataFlow(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_AddDataFlow.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlowDebugSession_AddDataFlow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowDebugSessionClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.AddDataFlow(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.DataFlowDebugPackage{
			DataFlow: &armdatafactory.DataFlowDebugResource{
				Name: to.Ptr("dataflow1"),
				Properties: &armdatafactory.MappingDataFlow{
					Type: to.Ptr("MappingDataFlow"),
					TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
						Script: to.Ptr("\n\nsource(output(\n		Column_1 as string\n	),\n	allowSchemaDrift: true,\n	validateSchema: false) ~> source1"),
						Sinks: []*armdatafactory.DataFlowSink{},
						Sources: []*armdatafactory.DataFlowSource{
							{
								Name: to.Ptr("source1"),
								Dataset: &armdatafactory.DatasetReference{
									Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
									ReferenceName: to.Ptr("DelimitedText2"),
								},
							}},
						Transformations: []*armdatafactory.Transformation{},
					},
				},
			},
			Datasets: []*armdatafactory.DatasetDebugResource{
				{
					Name: to.Ptr("dataset1"),
					Properties: &armdatafactory.DelimitedTextDataset{
						Type: to.Ptr("DelimitedText"),
						Schema: []interface{}{
							map[string]interface{}{
								"type": "String",
							},
						},
						Annotations: []interface{}{},
						LinkedServiceName: &armdatafactory.LinkedServiceReference{
							Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
							ReferenceName: to.Ptr("linkedService5"),
						},
						TypeProperties: &armdatafactory.DelimitedTextDatasetTypeProperties{
							ColumnDelimiter:  ",",
							EscapeChar:       "\\",
							FirstRowAsHeader: true,
							Location: &armdatafactory.AzureBlobStorageLocation{
								Type:      to.Ptr("AzureBlobStorageLocation"),
								FileName:  "Ansiencoding.csv",
								Container: "dataflow-sample-data",
							},
							QuoteChar: "\"",
						},
					},
				}},
			DebugSettings: &armdatafactory.DataFlowDebugPackageDebugSettings{
				DatasetParameters: map[string]interface{}{
					"Movies": map[string]interface{}{
						"path": "abc",
					},
					"Output": map[string]interface{}{
						"time": "def",
					},
				},
				Parameters: map[string]interface{}{
					"sourcePath": "Toy",
				},
				SourceSettings: []*armdatafactory.DataFlowSourceSetting{
					{
						RowLimit:   to.Ptr[int32](1000),
						SourceName: to.Ptr("source1"),
					},
					{
						RowLimit:   to.Ptr[int32](222),
						SourceName: to.Ptr("source2"),
					}},
			},
			LinkedServices: []*armdatafactory.LinkedServiceDebugResource{
				{
					Name: to.Ptr("linkedService1"),
					Properties: &armdatafactory.AzureBlobStorageLinkedService{
						Type:        to.Ptr("AzureBlobStorage"),
						Annotations: []interface{}{},
						TypeProperties: &armdatafactory.AzureBlobStorageLinkedServiceTypeProperties{
							ConnectionString:    "DefaultEndpointsProtocol=https;AccountName=<storageName>;EndpointSuffix=core.windows.net;",
							EncryptedCredential: to.Ptr("<credential>"),
						},
					},
				}},
			SessionID: to.Ptr("f06ed247-9d07-49b2-b05e-2cb4a2fc871e"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_AddDataFlow.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.AddDataFlowToDebugSessionResponse{
			JobVersion: to.Ptr("e5328ee7-c524-4207-8ba4-b709010db33d"),
		}
		if !reflect.DeepEqual(exampleRes, res.AddDataFlowToDebugSessionResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AddDataFlowToDebugSessionResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_AddDataFlow.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataFlowDebugSession_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlowDebugSession_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowDebugSessionClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.DeleteDataFlowDebugSessionRequest{
			SessionID: to.Ptr("91fb57e0-8292-47be-89ff-c8f2d2bb2a7e"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Delete.json: %v", err)
	}
}

func TestDataFlowDebugSession_ExecuteCommand(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataFlowDebugSession_ExecuteCommand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewDataFlowDebugSessionClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginExecuteCommand(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		armdatafactory.DataFlowDebugCommandRequest{
			Command: to.Ptr(armdatafactory.DataFlowDebugCommandTypeExecutePreviewQuery),
			CommandPayload: &armdatafactory.DataFlowDebugCommandPayload{
				RowLimits:  to.Ptr[int32](100),
				StreamName: to.Ptr("source1"),
			},
			SessionID: to.Ptr("f06ed247-9d07-49b2-b05e-2cb4a2fc871e"),
		},
		&armdatafactory.DataFlowDebugSessionClientBeginExecuteCommandOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.DataFlowDebugCommandResponse{
			Data:   to.Ptr("some output"),
			Status: to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.DataFlowDebugCommandResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataFlowDebugCommandResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedVirtualNetworks_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedVirtualNetworks_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedVirtualNetworksClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.ManagedVirtualNetworkListResponse{
			Value: []*armdatafactory.ManagedVirtualNetworkResource{
				{
					Name: to.Ptr("exampleManagedVirtualNetworkName"),
					Type: to.Ptr("Microsoft.DataFactory/factories/managedVirtualNetworks"),
					Etag: to.Ptr("0400f1a1-0000-0000-0000-5b2188640000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/exampleManagedVirtualNetworkName"),
					Properties: &armdatafactory.ManagedVirtualNetwork{
						Alias:  to.Ptr("exampleFactoryName"),
						VNetID: to.Ptr("5a7bd944-87e6-454a-8d4d-9fba446514fd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedVirtualNetworkListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedVirtualNetworkListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedVirtualNetworks_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedVirtualNetworks_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedVirtualNetworksClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedVirtualNetworkName",
		armdatafactory.ManagedVirtualNetworkResource{
			Properties: &armdatafactory.ManagedVirtualNetwork{},
		},
		&armdatafactory.ManagedVirtualNetworksClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ManagedVirtualNetworkResource{
			Name: to.Ptr("exampleManagedVirtualNetworkName"),
			Type: to.Ptr("Microsoft.DataFactory/factories/managedVirtualNetworks"),
			Etag: to.Ptr("000046c4-0000-0000-0000-5b2198bf0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/exampleManagedVirtualNetworkName"),
			Properties: &armdatafactory.ManagedVirtualNetwork{
				Alias:  to.Ptr("exampleFactoryName"),
				VNetID: to.Ptr("12345678-1234-1234-1234-12345678123"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedVirtualNetworkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedVirtualNetworkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedVirtualNetworks_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedVirtualNetworks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedVirtualNetworksClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedVirtualNetworkName",
		&armdatafactory.ManagedVirtualNetworksClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ManagedVirtualNetworkResource{
			Name: to.Ptr("exampleManagedVirtualNetworkName"),
			Type: to.Ptr("Microsoft.DataFactory/factories/managedVirtualNetworks"),
			Etag: to.Ptr("15003c4f-0000-0200-0000-5cbe090b0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/exampleManagedVirtualNetworkName"),
			Properties: &armdatafactory.ManagedVirtualNetwork{
				Alias:  to.Ptr("exampleFactoryName"),
				VNetID: to.Ptr("5a7bd944-87e6-454a-8d4d-9fba446514fd"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedVirtualNetworkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedVirtualNetworkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedVirtualNetworks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedPrivateEndpoints_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedVirtualNetworkName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.ManagedPrivateEndpointListResponse{
			Value: []*armdatafactory.ManagedPrivateEndpointResource{
				{
					Name: to.Ptr("exampleManagedPrivateEndpointName"),
					Type: to.Ptr("Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints"),
					Etag: to.Ptr("000046c4-0000-0000-0000-5b2198bf0000"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/exampleManagedVirtualNetworkName/managedPrivateEndpoints/exampleManagedPrivateEndpointName"),
					Properties: &armdatafactory.ManagedPrivateEndpoint{
						ConnectionState: &armdatafactory.ConnectionStateProperties{
							Description:     to.Ptr(""),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Pending"),
						},
						Fqdns:                 []*string{},
						GroupID:               to.Ptr("blob"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Storage/storageAccounts/exampleBlobStorage"),
						ProvisioningState:     to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedPrivateEndpointListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedPrivateEndpointListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedVirtualNetworks_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedVirtualNetworkName",
		"exampleManagedPrivateEndpointName",
		armdatafactory.ManagedPrivateEndpointResource{
			Properties: &armdatafactory.ManagedPrivateEndpoint{
				Fqdns:                 []*string{},
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Storage/storageAccounts/exampleBlobStorage"),
			},
		},
		&armdatafactory.ManagedPrivateEndpointsClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ManagedPrivateEndpointResource{
			Name: to.Ptr("exampleManagedPrivateEndpointName"),
			Type: to.Ptr("Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints"),
			Etag: to.Ptr("000046c4-0000-0000-0000-5b2198bf0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/exampleManagedVirtualNetworkName/managedPrivateEndpoints/exampleManagedPrivateEndpointName"),
			Properties: &armdatafactory.ManagedPrivateEndpoint{
				ConnectionState: &armdatafactory.ConnectionStateProperties{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Pending"),
				},
				Fqdns:                 []*string{},
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Storage/storageAccounts/exampleBlobStorage"),
				ProvisioningState:     to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedPrivateEndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedPrivateEndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedPrivateEndpoints_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedVirtualNetworkName",
		"exampleManagedPrivateEndpointName",
		&armdatafactory.ManagedPrivateEndpointsClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.ManagedPrivateEndpointResource{
			Name: to.Ptr("exampleManagedPrivateEndpointName"),
			Type: to.Ptr("Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints"),
			Etag: to.Ptr("000046c4-0000-0000-0000-5b2198bf0000"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/exampleManagedVirtualNetworkName/managedPrivateEndpoints/exampleManagedPrivateEndpointName"),
			Properties: &armdatafactory.ManagedPrivateEndpoint{
				ConnectionState: &armdatafactory.ConnectionStateProperties{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Pending"),
				},
				Fqdns:                 []*string{},
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Storage/storageAccounts/exampleBlobStorage"),
				ProvisioningState:     to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedPrivateEndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedPrivateEndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedVirtualNetworks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"exampleManagedVirtualNetworkName",
		"exampleManagedPrivateEndpointName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ManagedPrivateEndpoints_Delete.json: %v", err)
	}
}

func TestPrivateEndPointConnections_ListByFactory(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PrivateEndPointConnections_ListByFactory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"privateEndPointConnections_ListByFactory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPrivateEndPointConnectionsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByFactory("exampleResourceGroup",
		"exampleFactoryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PrivateEndPointConnections_ListByFactory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatafactory.PrivateEndpointConnectionListResponse{
			Value: []*armdatafactory.PrivateEndpointConnectionResource{
				{
					Name: to.Ptr("factories"),
					Type: to.Ptr("Microsoft.DataFactory/factories/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/privateEndpoints/myPrivateEndpoint"),
					Properties: &armdatafactory.RemotePrivateEndpointConnection{
						PrivateEndpoint: &armdatafactory.ArmIDWrapper{
							ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/managedVirtualNetworks/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armdatafactory.PrivateLinkConnectionState{
							Description:     to.Ptr("Approved by admin."),
							ActionsRequired: to.Ptr("exampleActionsRequired"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/PrivateEndPointConnections_ListByFactory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_CreateOrUpdate(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ApproveRejectPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approves or rejects a private endpoint connection for a factory."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPrivateEndpointConnectionClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"connection",
		armdatafactory.PrivateLinkConnectionApprovalRequestResource{
			Properties: &armdatafactory.PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &armdatafactory.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
			},
		},
		&armdatafactory.PrivateEndpointConnectionClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ApproveRejectPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PrivateEndpointConnectionResource{
			Name: to.Ptr("exampleFactoryName"),
			Type: to.Ptr("Microsoft.DataFactory/factories/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			Properties: &armdatafactory.RemotePrivateEndpointConnection{
				PrivateEndpoint: &armdatafactory.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdatafactory.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/ApproveRejectPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private endpoint connection for a datafactory."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPrivateEndpointConnectionClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"connection",
		&armdatafactory.PrivateEndpointConnectionClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PrivateEndpointConnectionResource{
			Name: to.Ptr("exampleFactoryName"),
			Type: to.Ptr("Microsoft.DataFactory/factories/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
			Properties: &armdatafactory.RemotePrivateEndpointConnection{
				PrivateEndpoint: &armdatafactory.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdatafactory.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Delete(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection for a datafactory."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPrivateEndpointConnectionClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		"connection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/GetPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources of a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatafactory.NewPrivateLinkResourcesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleFactoryName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/GetPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatafactory.PrivateLinkResourcesWrapper{
			Value: []*armdatafactory.PrivateLinkResource{
				{
					Name: to.Ptr("exampleFactoryName"),
					Type: to.Ptr("Microsoft.DataFactory/factories/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName"),
					Properties: &armdatafactory.PrivateLinkResourceProperties{
						GroupID: to.Ptr("dataFactory"),
						RequiredMembers: []*string{
							to.Ptr("dataFactory")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.datafactory.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourcesWrapper) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourcesWrapper)
			t.Fatalf("Mock response is not equal to example response for example specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/GetPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
