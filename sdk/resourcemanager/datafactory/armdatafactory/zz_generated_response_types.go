//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// ActivityRunsClientQueryByPipelineRunResponse contains the response from method ActivityRunsClient.QueryByPipelineRun.
type ActivityRunsClientQueryByPipelineRunResponse struct {
	ActivityRunsQueryResponse
}

// DataFlowDebugSessionClientAddDataFlowResponse contains the response from method DataFlowDebugSessionClient.AddDataFlow.
type DataFlowDebugSessionClientAddDataFlowResponse struct {
	AddDataFlowToDebugSessionResponse
}

// DataFlowDebugSessionClientCreatePollerResponse contains the response from method DataFlowDebugSessionClient.Create.
type DataFlowDebugSessionClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataFlowDebugSessionClientCreatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataFlowDebugSessionClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataFlowDebugSessionClientCreateResponse, error) {
	respType := DataFlowDebugSessionClientCreateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CreateDataFlowDebugSessionResponse)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a DataFlowDebugSessionClientCreatePollerResponse from the provided client and resume token.
func (l *DataFlowDebugSessionClientCreatePollerResponse) Resume(ctx context.Context, client *DataFlowDebugSessionClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataFlowDebugSessionClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataFlowDebugSessionClientCreatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// DataFlowDebugSessionClientCreateResponse contains the response from method DataFlowDebugSessionClient.Create.
type DataFlowDebugSessionClientCreateResponse struct {
	CreateDataFlowDebugSessionResponse
}

// DataFlowDebugSessionClientDeleteResponse contains the response from method DataFlowDebugSessionClient.Delete.
type DataFlowDebugSessionClientDeleteResponse struct {
	// placeholder for future response values
}

// DataFlowDebugSessionClientExecuteCommandPollerResponse contains the response from method DataFlowDebugSessionClient.ExecuteCommand.
type DataFlowDebugSessionClientExecuteCommandPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataFlowDebugSessionClientExecuteCommandPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataFlowDebugSessionClientExecuteCommandPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataFlowDebugSessionClientExecuteCommandResponse, error) {
	respType := DataFlowDebugSessionClientExecuteCommandResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataFlowDebugCommandResponse)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a DataFlowDebugSessionClientExecuteCommandPollerResponse from the provided client and resume token.
func (l *DataFlowDebugSessionClientExecuteCommandPollerResponse) Resume(ctx context.Context, client *DataFlowDebugSessionClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataFlowDebugSessionClient.ExecuteCommand", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataFlowDebugSessionClientExecuteCommandPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// DataFlowDebugSessionClientExecuteCommandResponse contains the response from method DataFlowDebugSessionClient.ExecuteCommand.
type DataFlowDebugSessionClientExecuteCommandResponse struct {
	DataFlowDebugCommandResponse
}

// DataFlowDebugSessionClientQueryByFactoryResponse contains the response from method DataFlowDebugSessionClient.QueryByFactory.
type DataFlowDebugSessionClientQueryByFactoryResponse struct {
	QueryDataFlowDebugSessionsResponse
}

// DataFlowsClientCreateOrUpdateResponse contains the response from method DataFlowsClient.CreateOrUpdate.
type DataFlowsClientCreateOrUpdateResponse struct {
	DataFlowResource
}

// DataFlowsClientDeleteResponse contains the response from method DataFlowsClient.Delete.
type DataFlowsClientDeleteResponse struct {
	// placeholder for future response values
}

// DataFlowsClientGetResponse contains the response from method DataFlowsClient.Get.
type DataFlowsClientGetResponse struct {
	DataFlowResource
}

// DataFlowsClientListByFactoryResponse contains the response from method DataFlowsClient.ListByFactory.
type DataFlowsClientListByFactoryResponse struct {
	DataFlowListResponse
}

// DatasetsClientCreateOrUpdateResponse contains the response from method DatasetsClient.CreateOrUpdate.
type DatasetsClientCreateOrUpdateResponse struct {
	DatasetResource
}

// DatasetsClientDeleteResponse contains the response from method DatasetsClient.Delete.
type DatasetsClientDeleteResponse struct {
	// placeholder for future response values
}

// DatasetsClientGetResponse contains the response from method DatasetsClient.Get.
type DatasetsClientGetResponse struct {
	DatasetResource
}

// DatasetsClientListByFactoryResponse contains the response from method DatasetsClient.ListByFactory.
type DatasetsClientListByFactoryResponse struct {
	DatasetListResponse
}

// ExposureControlClientGetFeatureValueByFactoryResponse contains the response from method ExposureControlClient.GetFeatureValueByFactory.
type ExposureControlClientGetFeatureValueByFactoryResponse struct {
	ExposureControlResponse
}

// ExposureControlClientGetFeatureValueResponse contains the response from method ExposureControlClient.GetFeatureValue.
type ExposureControlClientGetFeatureValueResponse struct {
	ExposureControlResponse
}

// ExposureControlClientQueryFeatureValuesByFactoryResponse contains the response from method ExposureControlClient.QueryFeatureValuesByFactory.
type ExposureControlClientQueryFeatureValuesByFactoryResponse struct {
	ExposureControlBatchResponse
}

// FactoriesClientConfigureFactoryRepoResponse contains the response from method FactoriesClient.ConfigureFactoryRepo.
type FactoriesClientConfigureFactoryRepoResponse struct {
	Factory
}

// FactoriesClientCreateOrUpdateResponse contains the response from method FactoriesClient.CreateOrUpdate.
type FactoriesClientCreateOrUpdateResponse struct {
	Factory
}

// FactoriesClientDeleteResponse contains the response from method FactoriesClient.Delete.
type FactoriesClientDeleteResponse struct {
	// placeholder for future response values
}

// FactoriesClientGetDataPlaneAccessResponse contains the response from method FactoriesClient.GetDataPlaneAccess.
type FactoriesClientGetDataPlaneAccessResponse struct {
	AccessPolicyResponse
}

// FactoriesClientGetGitHubAccessTokenResponse contains the response from method FactoriesClient.GetGitHubAccessToken.
type FactoriesClientGetGitHubAccessTokenResponse struct {
	GitHubAccessTokenResponse
}

// FactoriesClientGetResponse contains the response from method FactoriesClient.Get.
type FactoriesClientGetResponse struct {
	Factory
}

// FactoriesClientListByResourceGroupResponse contains the response from method FactoriesClient.ListByResourceGroup.
type FactoriesClientListByResourceGroupResponse struct {
	FactoryListResponse
}

// FactoriesClientListResponse contains the response from method FactoriesClient.List.
type FactoriesClientListResponse struct {
	FactoryListResponse
}

// FactoriesClientUpdateResponse contains the response from method FactoriesClient.Update.
type FactoriesClientUpdateResponse struct {
	Factory
}

// IntegrationRuntimeNodesClientDeleteResponse contains the response from method IntegrationRuntimeNodesClient.Delete.
type IntegrationRuntimeNodesClientDeleteResponse struct {
	// placeholder for future response values
}

// IntegrationRuntimeNodesClientGetIPAddressResponse contains the response from method IntegrationRuntimeNodesClient.GetIPAddress.
type IntegrationRuntimeNodesClientGetIPAddressResponse struct {
	IntegrationRuntimeNodeIPAddress
}

// IntegrationRuntimeNodesClientGetResponse contains the response from method IntegrationRuntimeNodesClient.Get.
type IntegrationRuntimeNodesClientGetResponse struct {
	SelfHostedIntegrationRuntimeNode
}

// IntegrationRuntimeNodesClientUpdateResponse contains the response from method IntegrationRuntimeNodesClient.Update.
type IntegrationRuntimeNodesClientUpdateResponse struct {
	SelfHostedIntegrationRuntimeNode
}

// IntegrationRuntimeObjectMetadataClientGetResponse contains the response from method IntegrationRuntimeObjectMetadataClient.Get.
type IntegrationRuntimeObjectMetadataClientGetResponse struct {
	SsisObjectMetadataListResponse
}

// IntegrationRuntimeObjectMetadataClientRefreshPollerResponse contains the response from method IntegrationRuntimeObjectMetadataClient.Refresh.
type IntegrationRuntimeObjectMetadataClientRefreshPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimeObjectMetadataClientRefreshPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimeObjectMetadataClientRefreshPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimeObjectMetadataClientRefreshResponse, error) {
	respType := IntegrationRuntimeObjectMetadataClientRefreshResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SsisObjectMetadataStatusResponse)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimeObjectMetadataClientRefreshPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimeObjectMetadataClientRefreshPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimeObjectMetadataClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimeObjectMetadataClient.Refresh", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimeObjectMetadataClientRefreshPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IntegrationRuntimeObjectMetadataClientRefreshResponse contains the response from method IntegrationRuntimeObjectMetadataClient.Refresh.
type IntegrationRuntimeObjectMetadataClientRefreshResponse struct {
	SsisObjectMetadataStatusResponse
}

// IntegrationRuntimesClientCreateLinkedIntegrationRuntimeResponse contains the response from method IntegrationRuntimesClient.CreateLinkedIntegrationRuntime.
type IntegrationRuntimesClientCreateLinkedIntegrationRuntimeResponse struct {
	IntegrationRuntimeStatusResponse
}

// IntegrationRuntimesClientCreateOrUpdateResponse contains the response from method IntegrationRuntimesClient.CreateOrUpdate.
type IntegrationRuntimesClientCreateOrUpdateResponse struct {
	IntegrationRuntimeResource
}

// IntegrationRuntimesClientDeleteResponse contains the response from method IntegrationRuntimesClient.Delete.
type IntegrationRuntimesClientDeleteResponse struct {
	// placeholder for future response values
}

// IntegrationRuntimesClientGetConnectionInfoResponse contains the response from method IntegrationRuntimesClient.GetConnectionInfo.
type IntegrationRuntimesClientGetConnectionInfoResponse struct {
	IntegrationRuntimeConnectionInfo
}

// IntegrationRuntimesClientGetMonitoringDataResponse contains the response from method IntegrationRuntimesClient.GetMonitoringData.
type IntegrationRuntimesClientGetMonitoringDataResponse struct {
	IntegrationRuntimeMonitoringData
}

// IntegrationRuntimesClientGetResponse contains the response from method IntegrationRuntimesClient.Get.
type IntegrationRuntimesClientGetResponse struct {
	IntegrationRuntimeResource
}

// IntegrationRuntimesClientGetStatusResponse contains the response from method IntegrationRuntimesClient.GetStatus.
type IntegrationRuntimesClientGetStatusResponse struct {
	IntegrationRuntimeStatusResponse
}

// IntegrationRuntimesClientListAuthKeysResponse contains the response from method IntegrationRuntimesClient.ListAuthKeys.
type IntegrationRuntimesClientListAuthKeysResponse struct {
	IntegrationRuntimeAuthKeys
}

// IntegrationRuntimesClientListByFactoryResponse contains the response from method IntegrationRuntimesClient.ListByFactory.
type IntegrationRuntimesClientListByFactoryResponse struct {
	IntegrationRuntimeListResponse
}

// IntegrationRuntimesClientListOutboundNetworkDependenciesEndpointsResponse contains the response from method IntegrationRuntimesClient.ListOutboundNetworkDependenciesEndpoints.
type IntegrationRuntimesClientListOutboundNetworkDependenciesEndpointsResponse struct {
	IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse
}

// IntegrationRuntimesClientRegenerateAuthKeyResponse contains the response from method IntegrationRuntimesClient.RegenerateAuthKey.
type IntegrationRuntimesClientRegenerateAuthKeyResponse struct {
	IntegrationRuntimeAuthKeys
}

// IntegrationRuntimesClientRemoveLinksResponse contains the response from method IntegrationRuntimesClient.RemoveLinks.
type IntegrationRuntimesClientRemoveLinksResponse struct {
	// placeholder for future response values
}

// IntegrationRuntimesClientStartPollerResponse contains the response from method IntegrationRuntimesClient.Start.
type IntegrationRuntimesClientStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesClientStartPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesClientStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesClientStartResponse, error) {
	respType := IntegrationRuntimesClientStartResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.IntegrationRuntimeStatusResponse)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesClientStartPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesClientStartPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.Start", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesClientStartPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IntegrationRuntimesClientStartResponse contains the response from method IntegrationRuntimesClient.Start.
type IntegrationRuntimesClientStartResponse struct {
	IntegrationRuntimeStatusResponse
}

// IntegrationRuntimesClientStopPollerResponse contains the response from method IntegrationRuntimesClient.Stop.
type IntegrationRuntimesClientStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesClientStopPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesClientStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesClientStopResponse, error) {
	respType := IntegrationRuntimesClientStopResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesClientStopPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesClientStopPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.Stop", token, client.pl)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesClientStopPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// IntegrationRuntimesClientStopResponse contains the response from method IntegrationRuntimesClient.Stop.
type IntegrationRuntimesClientStopResponse struct {
	// placeholder for future response values
}

// IntegrationRuntimesClientSyncCredentialsResponse contains the response from method IntegrationRuntimesClient.SyncCredentials.
type IntegrationRuntimesClientSyncCredentialsResponse struct {
	// placeholder for future response values
}

// IntegrationRuntimesClientUpdateResponse contains the response from method IntegrationRuntimesClient.Update.
type IntegrationRuntimesClientUpdateResponse struct {
	IntegrationRuntimeResource
}

// IntegrationRuntimesClientUpgradeResponse contains the response from method IntegrationRuntimesClient.Upgrade.
type IntegrationRuntimesClientUpgradeResponse struct {
	// placeholder for future response values
}

// LinkedServicesClientCreateOrUpdateResponse contains the response from method LinkedServicesClient.CreateOrUpdate.
type LinkedServicesClientCreateOrUpdateResponse struct {
	LinkedServiceResource
}

// LinkedServicesClientDeleteResponse contains the response from method LinkedServicesClient.Delete.
type LinkedServicesClientDeleteResponse struct {
	// placeholder for future response values
}

// LinkedServicesClientGetResponse contains the response from method LinkedServicesClient.Get.
type LinkedServicesClientGetResponse struct {
	LinkedServiceResource
}

// LinkedServicesClientListByFactoryResponse contains the response from method LinkedServicesClient.ListByFactory.
type LinkedServicesClientListByFactoryResponse struct {
	LinkedServiceListResponse
}

// ManagedPrivateEndpointsClientCreateOrUpdateResponse contains the response from method ManagedPrivateEndpointsClient.CreateOrUpdate.
type ManagedPrivateEndpointsClientCreateOrUpdateResponse struct {
	ManagedPrivateEndpointResource
}

// ManagedPrivateEndpointsClientDeleteResponse contains the response from method ManagedPrivateEndpointsClient.Delete.
type ManagedPrivateEndpointsClientDeleteResponse struct {
	// placeholder for future response values
}

// ManagedPrivateEndpointsClientGetResponse contains the response from method ManagedPrivateEndpointsClient.Get.
type ManagedPrivateEndpointsClientGetResponse struct {
	ManagedPrivateEndpointResource
}

// ManagedPrivateEndpointsClientListByFactoryResponse contains the response from method ManagedPrivateEndpointsClient.ListByFactory.
type ManagedPrivateEndpointsClientListByFactoryResponse struct {
	ManagedPrivateEndpointListResponse
}

// ManagedVirtualNetworksClientCreateOrUpdateResponse contains the response from method ManagedVirtualNetworksClient.CreateOrUpdate.
type ManagedVirtualNetworksClientCreateOrUpdateResponse struct {
	ManagedVirtualNetworkResource
}

// ManagedVirtualNetworksClientGetResponse contains the response from method ManagedVirtualNetworksClient.Get.
type ManagedVirtualNetworksClientGetResponse struct {
	ManagedVirtualNetworkResource
}

// ManagedVirtualNetworksClientListByFactoryResponse contains the response from method ManagedVirtualNetworksClient.ListByFactory.
type ManagedVirtualNetworksClientListByFactoryResponse struct {
	ManagedVirtualNetworkListResponse
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationListResponse
}

// PipelineRunsClientCancelResponse contains the response from method PipelineRunsClient.Cancel.
type PipelineRunsClientCancelResponse struct {
	// placeholder for future response values
}

// PipelineRunsClientGetResponse contains the response from method PipelineRunsClient.Get.
type PipelineRunsClientGetResponse struct {
	PipelineRun
}

// PipelineRunsClientQueryByFactoryResponse contains the response from method PipelineRunsClient.QueryByFactory.
type PipelineRunsClientQueryByFactoryResponse struct {
	PipelineRunsQueryResponse
}

// PipelinesClientCreateOrUpdateResponse contains the response from method PipelinesClient.CreateOrUpdate.
type PipelinesClientCreateOrUpdateResponse struct {
	PipelineResource
}

// PipelinesClientCreateRunResponse contains the response from method PipelinesClient.CreateRun.
type PipelinesClientCreateRunResponse struct {
	CreateRunResponse
}

// PipelinesClientDeleteResponse contains the response from method PipelinesClient.Delete.
type PipelinesClientDeleteResponse struct {
	// placeholder for future response values
}

// PipelinesClientGetResponse contains the response from method PipelinesClient.Get.
type PipelinesClientGetResponse struct {
	PipelineResource
}

// PipelinesClientListByFactoryResponse contains the response from method PipelinesClient.ListByFactory.
type PipelinesClientListByFactoryResponse struct {
	PipelineListResponse
}

// PrivateEndPointConnectionsClientListByFactoryResponse contains the response from method PrivateEndPointConnectionsClient.ListByFactory.
type PrivateEndPointConnectionsClientListByFactoryResponse struct {
	PrivateEndpointConnectionListResponse
}

// PrivateEndpointConnectionClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionClient.CreateOrUpdate.
type PrivateEndpointConnectionClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionResource
}

// PrivateEndpointConnectionClientDeleteResponse contains the response from method PrivateEndpointConnectionClient.Delete.
type PrivateEndpointConnectionClientDeleteResponse struct {
	// placeholder for future response values
}

// PrivateEndpointConnectionClientGetResponse contains the response from method PrivateEndpointConnectionClient.Get.
type PrivateEndpointConnectionClientGetResponse struct {
	PrivateEndpointConnectionResource
}

// PrivateLinkResourcesClientGetResponse contains the response from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResponse struct {
	PrivateLinkResourcesWrapper
}

// TriggerRunsClientCancelResponse contains the response from method TriggerRunsClient.Cancel.
type TriggerRunsClientCancelResponse struct {
	// placeholder for future response values
}

// TriggerRunsClientQueryByFactoryResponse contains the response from method TriggerRunsClient.QueryByFactory.
type TriggerRunsClientQueryByFactoryResponse struct {
	TriggerRunsQueryResponse
}

// TriggerRunsClientRerunResponse contains the response from method TriggerRunsClient.Rerun.
type TriggerRunsClientRerunResponse struct {
	// placeholder for future response values
}

// TriggersClientCreateOrUpdateResponse contains the response from method TriggersClient.CreateOrUpdate.
type TriggersClientCreateOrUpdateResponse struct {
	TriggerResource
}

// TriggersClientDeleteResponse contains the response from method TriggersClient.Delete.
type TriggersClientDeleteResponse struct {
	// placeholder for future response values
}

// TriggersClientGetEventSubscriptionStatusResponse contains the response from method TriggersClient.GetEventSubscriptionStatus.
type TriggersClientGetEventSubscriptionStatusResponse struct {
	TriggerSubscriptionOperationStatus
}

// TriggersClientGetResponse contains the response from method TriggersClient.Get.
type TriggersClientGetResponse struct {
	TriggerResource
}

// TriggersClientListByFactoryResponse contains the response from method TriggersClient.ListByFactory.
type TriggersClientListByFactoryResponse struct {
	TriggerListResponse
}

// TriggersClientQueryByFactoryResponse contains the response from method TriggersClient.QueryByFactory.
type TriggersClientQueryByFactoryResponse struct {
	TriggerQueryResponse
}

// TriggersClientStartPollerResponse contains the response from method TriggersClient.Start.
type TriggersClientStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TriggersClientStartPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TriggersClientStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TriggersClientStartResponse, error) {
	respType := TriggersClientStartResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TriggersClientStartPollerResponse from the provided client and resume token.
func (l *TriggersClientStartPollerResponse) Resume(ctx context.Context, client *TriggersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TriggersClient.Start", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TriggersClientStartPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TriggersClientStartResponse contains the response from method TriggersClient.Start.
type TriggersClientStartResponse struct {
	// placeholder for future response values
}

// TriggersClientStopPollerResponse contains the response from method TriggersClient.Stop.
type TriggersClientStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TriggersClientStopPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TriggersClientStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TriggersClientStopResponse, error) {
	respType := TriggersClientStopResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TriggersClientStopPollerResponse from the provided client and resume token.
func (l *TriggersClientStopPollerResponse) Resume(ctx context.Context, client *TriggersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TriggersClient.Stop", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TriggersClientStopPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TriggersClientStopResponse contains the response from method TriggersClient.Stop.
type TriggersClientStopResponse struct {
	// placeholder for future response values
}

// TriggersClientSubscribeToEventsPollerResponse contains the response from method TriggersClient.SubscribeToEvents.
type TriggersClientSubscribeToEventsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TriggersClientSubscribeToEventsPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TriggersClientSubscribeToEventsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TriggersClientSubscribeToEventsResponse, error) {
	respType := TriggersClientSubscribeToEventsResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.TriggerSubscriptionOperationStatus)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TriggersClientSubscribeToEventsPollerResponse from the provided client and resume token.
func (l *TriggersClientSubscribeToEventsPollerResponse) Resume(ctx context.Context, client *TriggersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TriggersClient.SubscribeToEvents", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TriggersClientSubscribeToEventsPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TriggersClientSubscribeToEventsResponse contains the response from method TriggersClient.SubscribeToEvents.
type TriggersClientSubscribeToEventsResponse struct {
	TriggerSubscriptionOperationStatus
}

// TriggersClientUnsubscribeFromEventsPollerResponse contains the response from method TriggersClient.UnsubscribeFromEvents.
type TriggersClientUnsubscribeFromEventsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TriggersClientUnsubscribeFromEventsPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TriggersClientUnsubscribeFromEventsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TriggersClientUnsubscribeFromEventsResponse, error) {
	respType := TriggersClientUnsubscribeFromEventsResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.TriggerSubscriptionOperationStatus)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TriggersClientUnsubscribeFromEventsPollerResponse from the provided client and resume token.
func (l *TriggersClientUnsubscribeFromEventsPollerResponse) Resume(ctx context.Context, client *TriggersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TriggersClient.UnsubscribeFromEvents", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TriggersClientUnsubscribeFromEventsPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TriggersClientUnsubscribeFromEventsResponse contains the response from method TriggersClient.UnsubscribeFromEvents.
type TriggersClientUnsubscribeFromEventsResponse struct {
	TriggerSubscriptionOperationStatus
}
