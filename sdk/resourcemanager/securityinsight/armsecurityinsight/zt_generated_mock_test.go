//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsight_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsight/armsecurityinsight"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAlertRules_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetAllAlertRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all alert rules."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetAllAlertRules.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.AlertRulesList{
			Value: []armsecurityinsight.AlertRuleClassification{
				&armsecurityinsight.ScheduledAlertRule{
					Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.AlertRuleKindScheduled),
					Properties: &armsecurityinsight.ScheduledAlertRuleProperties{
						Description: to.Ptr("An example for a scheduled rule"),
						AlertDetailsOverride: &armsecurityinsight.AlertDetailsOverride{
							AlertDescriptionFormat: to.Ptr("Suspicious activity was made by {{ComputerIP}}"),
							AlertDisplayNameFormat: to.Ptr("Alert from {{Computer}}"),
						},
						CustomDetails: map[string]*string{
							"OperatingSystemName": to.Ptr("OSName"),
							"OperatingSystemType": to.Ptr("OSType"),
						},
						DisplayName: to.Ptr("My scheduled rule"),
						Enabled:     to.Ptr(true),
						EntityMappings: []*armsecurityinsight.EntityMapping{
							{
								EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeHost),
								FieldMappings: []*armsecurityinsight.FieldMapping{
									{
										ColumnName: to.Ptr("Computer"),
										Identifier: to.Ptr("FullName"),
									}},
							},
							{
								EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeIP),
								FieldMappings: []*armsecurityinsight.FieldMapping{
									{
										ColumnName: to.Ptr("ComputerIP"),
										Identifier: to.Ptr("Address"),
									}},
							}},
						IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
							CreateIncident: to.Ptr(true),
							GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
								Enabled: to.Ptr(true),
								GroupByAlertDetails: []*armsecurityinsight.AlertDetail{
									to.Ptr(armsecurityinsight.AlertDetailDisplayName)},
								GroupByCustomDetails: []*string{
									to.Ptr("OperatingSystemType"),
									to.Ptr("OperatingSystemName")},
								GroupByEntities: []*armsecurityinsight.EntityMappingType{
									to.Ptr(armsecurityinsight.EntityMappingTypeHost)},
								LookbackDuration:     to.Ptr("PT5H"),
								MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
								ReopenClosedIncident: to.Ptr(false),
							},
						},
						LastModifiedUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T13:17:30Z"); return t }()),
						Query:               to.Ptr("Heartbeat"),
						Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
						SuppressionDuration: to.Ptr("PT1H"),
						SuppressionEnabled:  to.Ptr(false),
						Tactics: []*armsecurityinsight.AttackTactic{
							to.Ptr(armsecurityinsight.AttackTacticPersistence),
							to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
						EventGroupingSettings: &armsecurityinsight.EventGroupingSettings{
							AggregationKind: to.Ptr(armsecurityinsight.EventGroupingAggregationKindAlertPerResult),
						},
						QueryFrequency:   to.Ptr("PT1H"),
						QueryPeriod:      to.Ptr("P2DT1H30M"),
						TriggerOperator:  to.Ptr(armsecurityinsight.TriggerOperatorGreaterThan),
						TriggerThreshold: to.Ptr[int32](0),
					},
				},
				&armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRule{
					Name: to.Ptr("microsoftSecurityIncidentCreationRuleExample"),
					Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/microsoftSecurityIncidentCreationRuleExample"),
					Etag: to.Ptr("\"260097e0-0000-0d00-0000-5d6fa88f0000\""),
					Kind: to.Ptr(armsecurityinsight.AlertRuleKindMicrosoftSecurityIncidentCreation),
					Properties: &armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRuleProperties{
						ProductFilter:   to.Ptr(armsecurityinsight.MicrosoftSecurityProductNameMicrosoftCloudAppSecurity),
						DisplayName:     to.Ptr("testing displayname"),
						Enabled:         to.Ptr(true),
						LastModifiedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T12:05:35.7296311Z"); return t }()),
					},
				},
				&armsecurityinsight.FusionAlertRule{
					Name: to.Ptr("myFirstFusionRule"),
					Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/myFirstFusionRule"),
					Etag: to.Ptr("\"25005c11-0000-0d00-0000-5d6cc0e20000\""),
					Kind: to.Ptr(armsecurityinsight.AlertRuleKindFusion),
					Properties: &armsecurityinsight.FusionAlertRuleProperties{
						Description:           to.Ptr("In this mode, Sentinel combines low fidelity alerts, which themselves may not be actionable, and events across multiple products, into high fidelity security interesting incidents. The system looks at multiple products to produce actionable incidents. Custom tailored to each tenant, Fusion not only reduces false positive rates but also can detect attacks with limited or missing information. \nIncidents generated by Fusion system will encase two or more alerts. By design, Fusion incidents are low volume, high fidelity and will be high severity, which is why Fusion is turned ON by default in Azure Sentinel.\n\nFor Fusion to work, please configure the following data sources in Data Connectors tab:\nRequired - Azure Active Directory Identity Protection\nRequired - Microsoft Cloud App Security\nIf Available - Palo Alto Network\n\nFor full list of scenarios covered by Fusion, and detail instructions on how to configure the required data sources, go to aka.ms/SentinelFusion"),
						AlertRuleTemplateName: to.Ptr("f71aba3d-28fb-450b-b192-4e76a83015c8"),
						DisplayName:           to.Ptr("Advanced Multi-Stage Attack Detection"),
						Enabled:               to.Ptr(false),
						LastModifiedUTC:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-02T07:12:34.9065092Z"); return t }()),
						Severity:              to.Ptr(armsecurityinsight.AlertSeverityHigh),
						Tactics: []*armsecurityinsight.AttackTactic{
							to.Ptr(armsecurityinsight.AttackTacticPersistence),
							to.Ptr(armsecurityinsight.AttackTacticLateralMovement),
							to.Ptr(armsecurityinsight.AttackTacticExfiltration),
							to.Ptr(armsecurityinsight.AttackTacticCommandAndControl)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertRulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertRulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetAllAlertRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetFusionAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Fusion alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"myFirstFusionRule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetFusionAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientGetResponse{
			&armsecurityinsight.FusionAlertRule{
				Name: to.Ptr("myFirstFusionRule"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/myFirstFusionRule"),
				Etag: to.Ptr("\"260090e2-0000-0d00-0000-5d6fb8670000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindFusion),
				Properties: &armsecurityinsight.FusionAlertRuleProperties{
					Description:           to.Ptr("In this mode, Sentinel combines low fidelity alerts, which themselves may not be actionable, and events across multiple products, into high fidelity security interesting incidents. The system looks at multiple products to produce actionable incidents. Custom tailored to each tenant, Fusion not only reduces false positive rates but also can detect attacks with limited or missing information. \nIncidents generated by Fusion system will encase two or more alerts. By design, Fusion incidents are low volume, high fidelity and will be high severity, which is why Fusion is turned ON by default in Azure Sentinel.\n\nFor Fusion to work, please configure the following data sources in Data Connectors tab:\nRequired - Azure Active Directory Identity Protection\nRequired - Microsoft Cloud App Security\nIf Available - Palo Alto Network\n\nFor full list of scenarios covered by Fusion, and detail instructions on how to configure the required data sources, go to aka.ms/SentinelFusion"),
					AlertRuleTemplateName: to.Ptr("f71aba3d-28fb-450b-b192-4e76a83015c8"),
					DisplayName:           to.Ptr("Advanced Multi-Stage Attack Detection"),
					Enabled:               to.Ptr(true),
					LastModifiedUTC:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T13:13:11.5340061Z"); return t }()),
					Severity:              to.Ptr(armsecurityinsight.AlertSeverityHigh),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement),
						to.Ptr(armsecurityinsight.AttackTacticExfiltration),
						to.Ptr(armsecurityinsight.AttackTacticCommandAndControl)},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetFusionAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetMicrosoftSecurityIncidentCreationAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a MicrosoftSecurityIncidentCreation rule."},
	})
	client = armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"microsoftSecurityIncidentCreationRuleExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetMicrosoftSecurityIncidentCreationAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientGetResponse{
			&armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRule{
				Name: to.Ptr("microsoftSecurityIncidentCreationRuleExample"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/microsoftSecurityIncidentCreationRuleExample"),
				Etag: to.Ptr("\"260097e0-0000-0d00-0000-5d6fa88f0000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindMicrosoftSecurityIncidentCreation),
				Properties: &armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRuleProperties{
					ProductFilter:   to.Ptr(armsecurityinsight.MicrosoftSecurityProductNameMicrosoftCloudAppSecurity),
					DisplayName:     to.Ptr("testing displayname"),
					Enabled:         to.Ptr(true),
					LastModifiedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T12:05:35.7296311Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetMicrosoftSecurityIncidentCreationAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetScheduledAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Scheduled alert rule."},
	})
	client = armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetScheduledAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientGetResponse{
			&armsecurityinsight.ScheduledAlertRule{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindScheduled),
				Properties: &armsecurityinsight.ScheduledAlertRuleProperties{
					Description: to.Ptr("An example for a scheduled rule"),
					AlertDetailsOverride: &armsecurityinsight.AlertDetailsOverride{
						AlertDescriptionFormat: to.Ptr("Suspicious activity was made by {{ComputerIP}}"),
						AlertDisplayNameFormat: to.Ptr("Alert from {{Computer}}"),
					},
					CustomDetails: map[string]*string{
						"OperatingSystemName": to.Ptr("OSName"),
						"OperatingSystemType": to.Ptr("OSType"),
					},
					DisplayName: to.Ptr("My scheduled rule"),
					Enabled:     to.Ptr(true),
					EntityMappings: []*armsecurityinsight.EntityMapping{
						{
							EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeHost),
							FieldMappings: []*armsecurityinsight.FieldMapping{
								{
									ColumnName: to.Ptr("Computer"),
									Identifier: to.Ptr("FullName"),
								}},
						},
						{
							EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeIP),
							FieldMappings: []*armsecurityinsight.FieldMapping{
								{
									ColumnName: to.Ptr("ComputerIP"),
									Identifier: to.Ptr("Address"),
								}},
						}},
					IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
						CreateIncident: to.Ptr(true),
						GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
							Enabled: to.Ptr(true),
							GroupByAlertDetails: []*armsecurityinsight.AlertDetail{
								to.Ptr(armsecurityinsight.AlertDetailDisplayName)},
							GroupByCustomDetails: []*string{
								to.Ptr("OperatingSystemType"),
								to.Ptr("OperatingSystemName")},
							GroupByEntities: []*armsecurityinsight.EntityMappingType{
								to.Ptr(armsecurityinsight.EntityMappingTypeHost)},
							LookbackDuration:     to.Ptr("PT5H"),
							MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
							ReopenClosedIncident: to.Ptr(false),
						},
					},
					LastModifiedUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T13:17:30Z"); return t }()),
					Query:               to.Ptr("Heartbeat"),
					Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
					SuppressionDuration: to.Ptr("PT1H"),
					SuppressionEnabled:  to.Ptr(false),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
					EventGroupingSettings: &armsecurityinsight.EventGroupingSettings{
						AggregationKind: to.Ptr(armsecurityinsight.EventGroupingAggregationKindAlertPerResult),
					},
					QueryFrequency:   to.Ptr("PT1H"),
					QueryPeriod:      to.Ptr("P2DT1H30M"),
					TriggerOperator:  to.Ptr(armsecurityinsight.TriggerOperatorGreaterThan),
					TriggerThreshold: to.Ptr[int32](0),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetScheduledAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetNrtAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Nrt alert rule."},
	})
	client = armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetNrtAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientGetResponse{
			&armsecurityinsight.NrtAlertRule{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindNRT),
				Properties: &armsecurityinsight.NrtAlertRuleProperties{
					Description: to.Ptr(""),
					DisplayName: to.Ptr("Rule2"),
					Enabled:     to.Ptr(true),
					IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
						CreateIncident: to.Ptr(true),
						GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
							Enabled: to.Ptr(true),
							GroupByEntities: []*armsecurityinsight.EntityMappingType{
								to.Ptr(armsecurityinsight.EntityMappingTypeHost),
								to.Ptr(armsecurityinsight.EntityMappingTypeAccount)},
							LookbackDuration:     to.Ptr("PT5H"),
							MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
							ReopenClosedIncident: to.Ptr(false),
						},
					},
					LastModifiedUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
					Query:               to.Ptr("ProtectionStatus | extend HostCustomEntity = Computer | extend IPCustomEntity = ComputerIP_Hidden"),
					Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
					SuppressionDuration: to.Ptr("PT1H"),
					SuppressionEnabled:  to.Ptr(false),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/GetNrtAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateFusionAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a Fusion alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"myFirstFusionRule",
		&armsecurityinsight.FusionAlertRule{
			Etag: to.Ptr("3d00c3ca-0000-0100-0000-5d42d5010000"),
			Kind: to.Ptr(armsecurityinsight.AlertRuleKindFusion),
			Properties: &armsecurityinsight.FusionAlertRuleProperties{
				AlertRuleTemplateName: to.Ptr("f71aba3d-28fb-450b-b192-4e76a83015c8"),
				Enabled:               to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateFusionAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientCreateOrUpdateResponse{
			&armsecurityinsight.FusionAlertRule{
				Name: to.Ptr("myFirstFusionRule"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/myFirstFusionRule"),
				Etag: to.Ptr("\"260090e2-0000-0d00-0000-5d6fb8670000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindFusion),
				Properties: &armsecurityinsight.FusionAlertRuleProperties{
					Description:           to.Ptr("In this mode, Sentinel combines low fidelity alerts, which themselves may not be actionable, and events across multiple products, into high fidelity security interesting incidents. The system looks at multiple products to produce actionable incidents. Custom tailored to each tenant, Fusion not only reduces false positive rates but also can detect attacks with limited or missing information. \nIncidents generated by Fusion system will encase two or more alerts. By design, Fusion incidents are low volume, high fidelity and will be high severity, which is why Fusion is turned ON by default in Azure Sentinel.\n\nFor Fusion to work, please configure the following data sources in Data Connectors tab:\nRequired - Azure Active Directory Identity Protection\nRequired - Microsoft Cloud App Security\nIf Available - Palo Alto Network\n\nFor full list of scenarios covered by Fusion, and detail instructions on how to configure the required data sources, go to aka.ms/SentinelFusion"),
					AlertRuleTemplateName: to.Ptr("f71aba3d-28fb-450b-b192-4e76a83015c8"),
					DisplayName:           to.Ptr("Advanced Multi-Stage Attack Detection"),
					Enabled:               to.Ptr(true),
					LastModifiedUTC:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T13:13:11.5340061Z"); return t }()),
					Severity:              to.Ptr(armsecurityinsight.AlertSeverityHigh),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement),
						to.Ptr(armsecurityinsight.AttackTacticExfiltration),
						to.Ptr(armsecurityinsight.AttackTacticCommandAndControl)},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateFusionAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateMicrosoftSecurityIncidentCreationAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a MicrosoftSecurityIncidentCreation rule."},
	})
	client = armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"microsoftSecurityIncidentCreationRuleExample",
		&armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRule{
			Etag: to.Ptr("\"260097e0-0000-0d00-0000-5d6fa88f0000\""),
			Kind: to.Ptr(armsecurityinsight.AlertRuleKindMicrosoftSecurityIncidentCreation),
			Properties: &armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRuleProperties{
				ProductFilter: to.Ptr(armsecurityinsight.MicrosoftSecurityProductNameMicrosoftCloudAppSecurity),
				DisplayName:   to.Ptr("testing displayname"),
				Enabled:       to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateMicrosoftSecurityIncidentCreationAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientCreateOrUpdateResponse{
			&armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRule{
				Name: to.Ptr("microsoftSecurityIncidentCreationRuleExample"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/microsoftSecurityIncidentCreationRuleExample"),
				Etag: to.Ptr("\"260097e0-0000-0d00-0000-5d6fa88f0000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindMicrosoftSecurityIncidentCreation),
				Properties: &armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRuleProperties{
					ProductFilter:   to.Ptr(armsecurityinsight.MicrosoftSecurityProductNameMicrosoftCloudAppSecurity),
					DisplayName:     to.Ptr("testing displayname"),
					Enabled:         to.Ptr(true),
					LastModifiedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T12:05:35.7296311Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateMicrosoftSecurityIncidentCreationAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateNrtAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a Nrt alert rule."},
	})
	client = armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		&armsecurityinsight.NrtAlertRule{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Kind: to.Ptr(armsecurityinsight.AlertRuleKindNRT),
			Properties: &armsecurityinsight.NrtAlertRuleProperties{
				Description: to.Ptr(""),
				DisplayName: to.Ptr("Rule2"),
				Enabled:     to.Ptr(true),
				IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
					CreateIncident: to.Ptr(true),
					GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
						Enabled: to.Ptr(true),
						GroupByEntities: []*armsecurityinsight.EntityMappingType{
							to.Ptr(armsecurityinsight.EntityMappingTypeHost),
							to.Ptr(armsecurityinsight.EntityMappingTypeAccount)},
						LookbackDuration:     to.Ptr("PT5H"),
						MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
						ReopenClosedIncident: to.Ptr(false),
					},
				},
				Query:               to.Ptr("ProtectionStatus | extend HostCustomEntity = Computer | extend IPCustomEntity = ComputerIP_Hidden"),
				Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
				SuppressionDuration: to.Ptr("PT1H"),
				SuppressionEnabled:  to.Ptr(false),
				Tactics: []*armsecurityinsight.AttackTactic{
					to.Ptr(armsecurityinsight.AttackTacticPersistence),
					to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateNrtAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientCreateOrUpdateResponse{
			&armsecurityinsight.NrtAlertRule{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindNRT),
				Properties: &armsecurityinsight.NrtAlertRuleProperties{
					Description: to.Ptr(""),
					DisplayName: to.Ptr("Rule2"),
					Enabled:     to.Ptr(true),
					IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
						CreateIncident: to.Ptr(true),
						GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
							Enabled: to.Ptr(true),
							GroupByEntities: []*armsecurityinsight.EntityMappingType{
								to.Ptr(armsecurityinsight.EntityMappingTypeHost),
								to.Ptr(armsecurityinsight.EntityMappingTypeAccount)},
							LookbackDuration:     to.Ptr("PT5H"),
							MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
							ReopenClosedIncident: to.Ptr(false),
						},
					},
					LastModifiedUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
					Query:               to.Ptr("ProtectionStatus | extend HostCustomEntity = Computer | extend IPCustomEntity = ComputerIP_Hidden"),
					Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
					SuppressionDuration: to.Ptr("PT1H"),
					SuppressionEnabled:  to.Ptr(false),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateNrtAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateScheduledAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a Scheduled alert rule."},
	})
	client = armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		&armsecurityinsight.ScheduledAlertRule{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Kind: to.Ptr(armsecurityinsight.AlertRuleKindScheduled),
			Properties: &armsecurityinsight.ScheduledAlertRuleProperties{
				Description: to.Ptr("An example for a scheduled rule"),
				AlertDetailsOverride: &armsecurityinsight.AlertDetailsOverride{
					AlertDescriptionFormat: to.Ptr("Suspicious activity was made by {{ComputerIP}}"),
					AlertDisplayNameFormat: to.Ptr("Alert from {{Computer}}"),
				},
				CustomDetails: map[string]*string{
					"OperatingSystemName": to.Ptr("OSName"),
					"OperatingSystemType": to.Ptr("OSType"),
				},
				DisplayName: to.Ptr("My scheduled rule"),
				Enabled:     to.Ptr(true),
				EntityMappings: []*armsecurityinsight.EntityMapping{
					{
						EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeHost),
						FieldMappings: []*armsecurityinsight.FieldMapping{
							{
								ColumnName: to.Ptr("Computer"),
								Identifier: to.Ptr("FullName"),
							}},
					},
					{
						EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeIP),
						FieldMappings: []*armsecurityinsight.FieldMapping{
							{
								ColumnName: to.Ptr("ComputerIP"),
								Identifier: to.Ptr("Address"),
							}},
					}},
				IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
					CreateIncident: to.Ptr(true),
					GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
						Enabled: to.Ptr(true),
						GroupByAlertDetails: []*armsecurityinsight.AlertDetail{
							to.Ptr(armsecurityinsight.AlertDetailDisplayName)},
						GroupByCustomDetails: []*string{
							to.Ptr("OperatingSystemType"),
							to.Ptr("OperatingSystemName")},
						GroupByEntities: []*armsecurityinsight.EntityMappingType{
							to.Ptr(armsecurityinsight.EntityMappingTypeHost)},
						LookbackDuration:     to.Ptr("PT5H"),
						MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
						ReopenClosedIncident: to.Ptr(false),
					},
				},
				Query:               to.Ptr("Heartbeat"),
				Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
				SuppressionDuration: to.Ptr("PT1H"),
				SuppressionEnabled:  to.Ptr(false),
				Tactics: []*armsecurityinsight.AttackTactic{
					to.Ptr(armsecurityinsight.AttackTacticPersistence),
					to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
				EventGroupingSettings: &armsecurityinsight.EventGroupingSettings{
					AggregationKind: to.Ptr(armsecurityinsight.EventGroupingAggregationKindAlertPerResult),
				},
				QueryFrequency:   to.Ptr("PT1H"),
				QueryPeriod:      to.Ptr("P2DT1H30M"),
				TriggerOperator:  to.Ptr(armsecurityinsight.TriggerOperatorGreaterThan),
				TriggerThreshold: to.Ptr[int32](0),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateScheduledAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRulesClientCreateOrUpdateResponse{
			&armsecurityinsight.ScheduledAlertRule{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/alertRules"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"01005144-0000-0d00-0000-6058632c0000\""),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindScheduled),
				Properties: &armsecurityinsight.ScheduledAlertRuleProperties{
					Description: to.Ptr("An example for a scheduled rule"),
					AlertDetailsOverride: &armsecurityinsight.AlertDetailsOverride{
						AlertDescriptionFormat: to.Ptr("Suspicious activity was made by {{ComputerIP}}"),
						AlertDisplayNameFormat: to.Ptr("Alert from {{Computer}}"),
					},
					CustomDetails: map[string]*string{
						"OperatingSystemName": to.Ptr("OSName"),
						"OperatingSystemType": to.Ptr("OSType"),
					},
					DisplayName: to.Ptr("My scheduled rule"),
					Enabled:     to.Ptr(true),
					EntityMappings: []*armsecurityinsight.EntityMapping{
						{
							EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeHost),
							FieldMappings: []*armsecurityinsight.FieldMapping{
								{
									ColumnName: to.Ptr("Computer"),
									Identifier: to.Ptr("FullName"),
								}},
						},
						{
							EntityType: to.Ptr(armsecurityinsight.EntityMappingTypeIP),
							FieldMappings: []*armsecurityinsight.FieldMapping{
								{
									ColumnName: to.Ptr("ComputerIP"),
									Identifier: to.Ptr("Address"),
								}},
						}},
					IncidentConfiguration: &armsecurityinsight.IncidentConfiguration{
						CreateIncident: to.Ptr(true),
						GroupingConfiguration: &armsecurityinsight.GroupingConfiguration{
							Enabled: to.Ptr(true),
							GroupByAlertDetails: []*armsecurityinsight.AlertDetail{
								to.Ptr(armsecurityinsight.AlertDetailDisplayName)},
							GroupByCustomDetails: []*string{
								to.Ptr("OperatingSystemType"),
								to.Ptr("OperatingSystemName")},
							GroupByEntities: []*armsecurityinsight.EntityMappingType{
								to.Ptr(armsecurityinsight.EntityMappingTypeHost)},
							LookbackDuration:     to.Ptr("PT5H"),
							MatchingMethod:       to.Ptr(armsecurityinsight.MatchingMethodSelected),
							ReopenClosedIncident: to.Ptr(false),
						},
					},
					LastModifiedUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T13:17:30Z"); return t }()),
					Query:               to.Ptr("Heartbeat"),
					Severity:            to.Ptr(armsecurityinsight.AlertSeverityHigh),
					SuppressionDuration: to.Ptr("PT1H"),
					SuppressionEnabled:  to.Ptr(false),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
					EventGroupingSettings: &armsecurityinsight.EventGroupingSettings{
						AggregationKind: to.Ptr(armsecurityinsight.EventGroupingAggregationKindAlertPerResult),
					},
					QueryFrequency:   to.Ptr("PT1H"),
					QueryPeriod:      to.Ptr("P2DT1H30M"),
					TriggerOperator:  to.Ptr(armsecurityinsight.TriggerOperatorGreaterThan),
					TriggerThreshold: to.Ptr[int32](0),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/CreateScheduledAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/DeleteAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAlertRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRules/DeleteAlertRule.json: %v", err)
	}
}

func TestActions_ListByAlertRule(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/GetAllActionsByAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all actions of alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewActionsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.ListByAlertRule("myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/GetAllActionsByAlertRule.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.ActionsList{
			Value: []*armsecurityinsight.ActionResponse{
				{
					Name: to.Ptr("912bec42-cb66-4c03-ac63-1761b6898c3e"),
					Type: to.Ptr("Microsoft.SecurityInsights/alertRules/actions"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5/actions/912bec42-cb66-4c03-ac63-1761b6898c3e"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Properties: &armsecurityinsight.ActionResponseProperties{
						LogicAppResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/MyAlerts"),
						WorkflowID:         to.Ptr("cd3765391efd48549fd7681ded1d48d7"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ActionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ActionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/GetAllActionsByAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActions_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/GetActionOfAlertRuleById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an action of alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewActionsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		"912bec42-cb66-4c03-ac63-1761b6898c3e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/GetActionOfAlertRuleById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ActionResponse{
			Name: to.Ptr("912bec42-cb66-4c03-ac63-1761b6898c3e"),
			Type: to.Ptr("Microsoft.SecurityInsights/alertRules/actions"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5/actions/912bec42-cb66-4c03-ac63-1761b6898c3e"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.ActionResponseProperties{
				LogicAppResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/MyAlerts"),
				WorkflowID:         to.Ptr("cd3765391efd48549fd7681ded1d48d7"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActionResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActionResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/GetActionOfAlertRuleById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActions_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/CreateActionOfAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an action of alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewActionsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		"912bec42-cb66-4c03-ac63-1761b6898c3e",
		armsecurityinsight.ActionRequest{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.ActionRequestProperties{
				LogicAppResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/MyAlerts"),
				TriggerURI:         to.Ptr("https://prod-31.northcentralus.logic.azure.com:443/workflows/cd3765391efd48549fd7681ded1d48d7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=signature"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/CreateActionOfAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ActionResponse{
			Name: to.Ptr("912bec42-cb66-4c03-ac63-1761b6898c3e"),
			Type: to.Ptr("Microsoft.SecurityInsights/alertRules/actions"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5/actions/912bec42-cb66-4c03-ac63-1761b6898c3e"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.ActionResponseProperties{
				LogicAppResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/MyAlerts"),
				WorkflowID:         to.Ptr("cd3765391efd48549fd7681ded1d48d7"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActionResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActionResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/CreateActionOfAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActions_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/DeleteActionOfAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an action of alert rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewActionsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		"912bec42-cb66-4c03-ac63-1761b6898c3e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/actions/DeleteActionOfAlertRule.json: %v", err)
	}
}

func TestAlertRuleTemplates_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRuleTemplates/GetAlertRuleTemplates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all alert rule templates."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAlertRuleTemplatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRuleTemplates/GetAlertRuleTemplates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.AlertRuleTemplatesList{
			Value: []armsecurityinsight.AlertRuleTemplateClassification{
				&armsecurityinsight.ScheduledAlertRuleTemplate{
					Name: to.Ptr("65360bb0-8986-4ade-a89d-af3cf44d28aa"),
					Type: to.Ptr("Microsoft.SecurityInsights/AlertRuleTemplates"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/AlertRuleTemplates/65360bb0-8986-4ade-a89d-af3cf44d28aa"),
					Kind: to.Ptr(armsecurityinsight.AlertRuleKindScheduled),
					Properties: &armsecurityinsight.ScheduledAlertRuleTemplateProperties{
						Description:                      to.Ptr("This alert monitors changes to Amazon VPC (Virtual Private Cloud) settings such as new ACL entries and routes in route tables.\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \nand https://aws.amazon.com/vpc/"),
						AlertRulesCreatedByTemplateCount: to.Ptr[int32](0),
						CreatedDateUTC:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-27T00:00:00Z"); return t }()),
						DisplayName:                      to.Ptr("Changes to Amazon VPC settings"),
						LastUpdatedDateUTC:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T00:00:00Z"); return t }()),
						RequiredDataConnectors: []*armsecurityinsight.AlertRuleTemplateDataSource{
							{
								ConnectorID: to.Ptr("AWS"),
								DataTypes: []*string{
									to.Ptr("AWSCloudTrail")},
							}},
						Status:   to.Ptr(armsecurityinsight.TemplateStatusAvailable),
						Query:    to.Ptr("let timeframe = 1d;\nAWSCloudTrail\n| where TimeGenerated >= ago(timeframe)\n| where EventName == \"CreateNetworkAclEntry\"\n    or EventName == \"CreateRoute\"\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress"),
						Severity: to.Ptr(armsecurityinsight.AlertSeverityLow),
						Tactics: []*armsecurityinsight.AttackTactic{
							to.Ptr(armsecurityinsight.AttackTacticPrivilegeEscalation),
							to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
						Version:          to.Ptr("1.0.1"),
						QueryFrequency:   to.Ptr("P1D"),
						QueryPeriod:      to.Ptr("P1D"),
						TriggerOperator:  to.Ptr(armsecurityinsight.TriggerOperatorGreaterThan),
						TriggerThreshold: to.Ptr[int32](0),
					},
				},
				&armsecurityinsight.FusionAlertRuleTemplate{
					Name: to.Ptr("f71aba3d-28fb-450b-b192-4e76a83015c8"),
					Type: to.Ptr("Microsoft.SecurityInsights/AlertRuleTemplates"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f71aba3d-28fb-450b-b192-4e76a83015c8"),
					Kind: to.Ptr(armsecurityinsight.AlertRuleKindFusion),
					Properties: &armsecurityinsight.FusionAlertRuleTemplateProperties{
						Description:                      to.Ptr("Place holder: Fusion uses graph powered machine learning algorithms to correlate between millions of lower fidelity anomalous activities from different products such as Azure AD Identity Protection, and Microsoft Cloud App Security, to combine them into a manageable number of interesting security cases.\n"),
						AlertRulesCreatedByTemplateCount: to.Ptr[int32](0),
						CreatedDateUTC:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-25T00:00:00Z"); return t }()),
						DisplayName:                      to.Ptr("Advanced Multi-Stage Attack Detection"),
						LastUpdatedDateUTC:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T00:00:00Z"); return t }()),
						Status:                           to.Ptr(armsecurityinsight.TemplateStatusAvailable),
						Severity:                         to.Ptr(armsecurityinsight.AlertSeverityHigh),
						Tactics: []*armsecurityinsight.AttackTactic{
							to.Ptr(armsecurityinsight.AttackTacticPersistence),
							to.Ptr(armsecurityinsight.AttackTacticLateralMovement),
							to.Ptr(armsecurityinsight.AttackTacticExfiltration),
							to.Ptr(armsecurityinsight.AttackTacticCommandAndControl)},
					},
				},
				&armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRuleTemplate{
					Name: to.Ptr("b3cfc7c0-092c-481c-a55b-34a3979758cb"),
					Type: to.Ptr("Microsoft.SecurityInsights/AlertRuleTemplates"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b3cfc7c0-092c-481c-a55b-34a3979758cb"),
					Kind: to.Ptr(armsecurityinsight.AlertRuleKindMicrosoftSecurityIncidentCreation),
					Properties: &armsecurityinsight.MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties{
						Description:                      to.Ptr("Create incidents based on all alerts generated in Microsoft Cloud App Security"),
						AlertRulesCreatedByTemplateCount: to.Ptr[int32](0),
						CreatedDateUTC:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-16T00:00:00Z"); return t }()),
						DisplayName:                      to.Ptr("Create incidents based on Microsoft Cloud App Security alerts"),
						LastUpdatedDateUTC:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T00:00:00Z"); return t }()),
						Status:                           to.Ptr(armsecurityinsight.TemplateStatusAvailable),
						ProductFilter:                    to.Ptr(armsecurityinsight.MicrosoftSecurityProductNameMicrosoftCloudAppSecurity),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertRuleTemplatesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertRuleTemplatesList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRuleTemplates/GetAlertRuleTemplates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRuleTemplates_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRuleTemplates/GetAlertRuleTemplateById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get alert rule template by Id."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAlertRuleTemplatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"65360bb0-8986-4ade-a89d-af3cf44d28aa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRuleTemplates/GetAlertRuleTemplateById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AlertRuleTemplatesClientGetResponse{
			&armsecurityinsight.ScheduledAlertRuleTemplate{
				Name: to.Ptr("65360bb0-8986-4ade-a89d-af3cf44d28aa"),
				Type: to.Ptr("Microsoft.SecurityInsights/AlertRuleTemplates"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRuleTemplates/65360bb0-8986-4ade-a89d-af3cf44d28aa"),
				Kind: to.Ptr(armsecurityinsight.AlertRuleKindScheduled),
				Properties: &armsecurityinsight.ScheduledAlertRuleTemplateProperties{
					Description:                      to.Ptr("This alert monitors changes to Amazon VPC (Virtual Private Cloud) settings such as new ACL entries and routes in route tables.\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \nand https://aws.amazon.com/vpc/"),
					AlertRulesCreatedByTemplateCount: to.Ptr[int32](0),
					CreatedDateUTC:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-27T00:00:00Z"); return t }()),
					DisplayName:                      to.Ptr("Changes to Amazon VPC settings"),
					LastUpdatedDateUTC:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T00:00:00Z"); return t }()),
					RequiredDataConnectors: []*armsecurityinsight.AlertRuleTemplateDataSource{
						{
							ConnectorID: to.Ptr("AWS"),
							DataTypes: []*string{
								to.Ptr("AWSCloudTrail")},
						}},
					Status:   to.Ptr(armsecurityinsight.TemplateStatusAvailable),
					Query:    to.Ptr("let timeframe = 1d;\nAWSCloudTrail\n| where TimeGenerated >= ago(timeframe)\n| where EventName == \"CreateNetworkAclEntry\"\n    or EventName == \"CreateRoute\"\n| project TimeGenerated, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\n| extend AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress"),
					Severity: to.Ptr(armsecurityinsight.AlertSeverityLow),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPrivilegeEscalation),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
					Version: to.Ptr("1.0.2"),
					EventGroupingSettings: &armsecurityinsight.EventGroupingSettings{
						AggregationKind: to.Ptr(armsecurityinsight.EventGroupingAggregationKindAlertPerResult),
					},
					QueryFrequency:   to.Ptr("P1D"),
					QueryPeriod:      to.Ptr("P1D"),
					TriggerOperator:  to.Ptr(armsecurityinsight.TriggerOperatorGreaterThan),
					TriggerThreshold: to.Ptr[int32](0),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/alertRuleTemplates/GetAlertRuleTemplateById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationRules_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/GetAllAutomationRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all automation rules."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAutomationRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/GetAllAutomationRules.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.AutomationRulesList{
			Value: []*armsecurityinsight.AutomationRule{
				{
					Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Type: to.Ptr("Microsoft.SecurityInsights/automationRules"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/automationRules/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Properties: &armsecurityinsight.AutomationRuleProperties{
						Actions: []armsecurityinsight.AutomationRuleActionClassification{
							&armsecurityinsight.AutomationRuleModifyPropertiesAction{
								ActionType: to.Ptr(armsecurityinsight.AutomationRuleActionTypeModifyProperties),
								Order:      to.Ptr[int32](1),
								ActionConfiguration: &armsecurityinsight.AutomationRuleModifyPropertiesActionConfiguration{
									Severity: to.Ptr(armsecurityinsight.IncidentSeverityHigh),
								},
							}},
						CreatedBy: &armsecurityinsight.ClientInfo{
							Name:              to.Ptr("john doe"),
							Email:             to.Ptr("john.doe@contoso.com"),
							ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
							UserPrincipalName: to.Ptr("john@contoso.com"),
						},
						CreatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:00:30Z"); return t }()),
						DisplayName:    to.Ptr("High severity incidents escalation"),
						LastModifiedBy: &armsecurityinsight.ClientInfo{
							Name:              to.Ptr("john doe"),
							Email:             to.Ptr("john.doe@contoso.com"),
							ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
							UserPrincipalName: to.Ptr("john@contoso.com"),
						},
						LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:00:30Z"); return t }()),
						Order:               to.Ptr[int32](1),
						TriggeringLogic: &armsecurityinsight.AutomationRuleTriggeringLogic{
							Conditions: []armsecurityinsight.AutomationRuleConditionClassification{
								&armsecurityinsight.AutomationRulePropertyValuesCondition{
									ConditionType: to.Ptr(armsecurityinsight.AutomationRuleConditionTypeProperty),
									ConditionProperties: &armsecurityinsight.AutomationRulePropertyValuesConditionProperties{
										Operator:     to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedOperatorContains),
										PropertyName: to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedPropertyIncidentRelatedAnalyticRuleIDs),
										PropertyValues: []*string{
											to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/fab3d2d4-747f-46a7-8ef0-9c0be8112bf7"),
											to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/8deb8303-e94d-46ff-96e0-5fd94b33df1a")},
									},
								}},
							IsEnabled:    to.Ptr(true),
							TriggersOn:   to.Ptr(armsecurityinsight.TriggersOnIncidents),
							TriggersWhen: to.Ptr(armsecurityinsight.TriggersWhenCreated),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutomationRulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutomationRulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/GetAllAutomationRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationRules_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/GetAutomationRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an automation rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAutomationRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/GetAutomationRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AutomationRule{
			Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.AutomationRuleProperties{
				Actions: []armsecurityinsight.AutomationRuleActionClassification{
					&armsecurityinsight.AutomationRuleModifyPropertiesAction{
						ActionType: to.Ptr(armsecurityinsight.AutomationRuleActionTypeModifyProperties),
						Order:      to.Ptr[int32](1),
						ActionConfiguration: &armsecurityinsight.AutomationRuleModifyPropertiesActionConfiguration{
							Classification:       to.Ptr(armsecurityinsight.IncidentClassificationBenignPositive),
							ClassificationReason: to.Ptr(armsecurityinsight.IncidentClassificationReasonSuspiciousButExpected),
							Status:               to.Ptr(armsecurityinsight.IncidentStatusClosed),
						},
					}},
				CreatedBy: &armsecurityinsight.ClientInfo{
					Name:              to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				CreatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:00:30Z"); return t }()),
				DisplayName:    to.Ptr("High severity incidents escalation"),
				LastModifiedBy: &armsecurityinsight.ClientInfo{
					Name:              to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:00:30Z"); return t }()),
				Order:               to.Ptr[int32](1),
				TriggeringLogic: &armsecurityinsight.AutomationRuleTriggeringLogic{
					Conditions: []armsecurityinsight.AutomationRuleConditionClassification{
						&armsecurityinsight.AutomationRulePropertyValuesCondition{
							ConditionType: to.Ptr(armsecurityinsight.AutomationRuleConditionTypeProperty),
							ConditionProperties: &armsecurityinsight.AutomationRulePropertyValuesConditionProperties{
								Operator:     to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedOperatorContains),
								PropertyName: to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedPropertyIncidentTitle),
								PropertyValues: []*string{
									to.Ptr("logon failure")},
							},
						},
						&armsecurityinsight.AutomationRulePropertyValuesCondition{
							ConditionType: to.Ptr(armsecurityinsight.AutomationRuleConditionTypeProperty),
							ConditionProperties: &armsecurityinsight.AutomationRulePropertyValuesConditionProperties{
								Operator:     to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedOperatorEquals),
								PropertyName: to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedPropertyHostName),
								PropertyValues: []*string{
									to.Ptr("TestVM")},
							},
						}},
					IsEnabled:    to.Ptr(true),
					TriggersOn:   to.Ptr(armsecurityinsight.TriggersOnIncidents),
					TriggersWhen: to.Ptr(armsecurityinsight.TriggersWhenCreated),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutomationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutomationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/GetAutomationRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationRules_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/CreateAutomationRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an automation rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAutomationRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		armsecurityinsight.AutomationRule{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.AutomationRuleProperties{
				Actions: []armsecurityinsight.AutomationRuleActionClassification{
					&armsecurityinsight.AutomationRuleModifyPropertiesAction{
						ActionType: to.Ptr(armsecurityinsight.AutomationRuleActionTypeModifyProperties),
						Order:      to.Ptr[int32](1),
						ActionConfiguration: &armsecurityinsight.AutomationRuleModifyPropertiesActionConfiguration{
							Severity: to.Ptr(armsecurityinsight.IncidentSeverityHigh),
						},
					},
					&armsecurityinsight.AutomationRuleRunPlaybookAction{
						ActionType: to.Ptr(armsecurityinsight.AutomationRuleActionTypeRunPlaybook),
						Order:      to.Ptr[int32](2),
						ActionConfiguration: &armsecurityinsight.AutomationRuleRunPlaybookActionConfiguration{
							LogicAppResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/IncidentPlaybook"),
							TenantID:           to.Ptr("ee48efaf-50c6-411b-9345-b2bdc3eb4abc"),
						},
					}},
				DisplayName: to.Ptr("High severity incidents escalation"),
				Order:       to.Ptr[int32](1),
				TriggeringLogic: &armsecurityinsight.AutomationRuleTriggeringLogic{
					Conditions: []armsecurityinsight.AutomationRuleConditionClassification{
						&armsecurityinsight.AutomationRulePropertyValuesCondition{
							ConditionType: to.Ptr(armsecurityinsight.AutomationRuleConditionTypeProperty),
							ConditionProperties: &armsecurityinsight.AutomationRulePropertyValuesConditionProperties{
								Operator:     to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedOperatorContains),
								PropertyName: to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedPropertyIncidentRelatedAnalyticRuleIDs),
								PropertyValues: []*string{
									to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/fab3d2d4-747f-46a7-8ef0-9c0be8112bf7"),
									to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/8deb8303-e94d-46ff-96e0-5fd94b33df1a")},
							},
						}},
					IsEnabled:    to.Ptr(true),
					TriggersOn:   to.Ptr(armsecurityinsight.TriggersOnIncidents),
					TriggersWhen: to.Ptr(armsecurityinsight.TriggersWhenCreated),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/CreateAutomationRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.AutomationRule{
			Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0001\""),
			Properties: &armsecurityinsight.AutomationRuleProperties{
				Actions: []armsecurityinsight.AutomationRuleActionClassification{
					&armsecurityinsight.AutomationRuleModifyPropertiesAction{
						ActionType: to.Ptr(armsecurityinsight.AutomationRuleActionTypeModifyProperties),
						Order:      to.Ptr[int32](1),
						ActionConfiguration: &armsecurityinsight.AutomationRuleModifyPropertiesActionConfiguration{
							Severity: to.Ptr(armsecurityinsight.IncidentSeverityHigh),
						},
					},
					&armsecurityinsight.AutomationRuleRunPlaybookAction{
						ActionType: to.Ptr(armsecurityinsight.AutomationRuleActionTypeRunPlaybook),
						Order:      to.Ptr[int32](2),
						ActionConfiguration: &armsecurityinsight.AutomationRuleRunPlaybookActionConfiguration{
							LogicAppResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/IncidentPlaybook"),
							TenantID:           to.Ptr("ee48efaf-50c6-411b-9345-b2bdc3eb4abc"),
						},
					}},
				CreatedBy: &armsecurityinsight.ClientInfo{
					Name:              to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				CreatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:00:30Z"); return t }()),
				DisplayName:    to.Ptr("High severity incidents escalation"),
				LastModifiedBy: &armsecurityinsight.ClientInfo{
					Name:              to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:00:30Z"); return t }()),
				Order:               to.Ptr[int32](1),
				TriggeringLogic: &armsecurityinsight.AutomationRuleTriggeringLogic{
					Conditions: []armsecurityinsight.AutomationRuleConditionClassification{
						&armsecurityinsight.AutomationRulePropertyValuesCondition{
							ConditionType: to.Ptr(armsecurityinsight.AutomationRuleConditionTypeProperty),
							ConditionProperties: &armsecurityinsight.AutomationRulePropertyValuesConditionProperties{
								Operator:     to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedOperatorContains),
								PropertyName: to.Ptr(armsecurityinsight.AutomationRulePropertyConditionSupportedPropertyIncidentRelatedAnalyticRuleIDs),
								PropertyValues: []*string{
									to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/fab3d2d4-747f-46a7-8ef0-9c0be8112bf7"),
									to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/8deb8303-e94d-46ff-96e0-5fd94b33df1a")},
							},
						}},
					IsEnabled:    to.Ptr(true),
					TriggersOn:   to.Ptr(armsecurityinsight.TriggersOnIncidents),
					TriggersWhen: to.Ptr(armsecurityinsight.TriggersWhenCreated),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutomationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutomationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/CreateAutomationRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationRules_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/DeleteAutomationRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an automation rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewAutomationRulesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/automationRules/DeleteAutomationRule.json: %v", err)
	}
}

func TestBookmarks_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/GetBookmarks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all bookmarks."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarksClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/GetBookmarks.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.BookmarkList{
			Value: []*armsecurityinsight.Bookmark{
				{
					Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Type: to.Ptr("Microsoft.SecurityInsights/bookmarks"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Properties: &armsecurityinsight.BookmarkProperties{
						Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
						CreatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("john doe"),
							Email:    to.Ptr("john@contoso.com"),
							ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
						},
						DisplayName: to.Ptr("My bookmark"),
						IncidentInfo: &armsecurityinsight.IncidentInfo{
							IncidentID:   to.Ptr("DDA55F97-170B-40B9-B8ED-CBFD05481E7D"),
							RelationName: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0018"),
							Severity:     to.Ptr(armsecurityinsight.IncidentSeverityLow),
							Title:        to.Ptr("New case 1"),
						},
						Labels: []*string{
							to.Ptr("Tag1"),
							to.Ptr("Tag2")},
						Notes:       to.Ptr("Found a suspicious activity"),
						Query:       to.Ptr("SecurityEvent | where TimeGenerated > ago(1d) and TimeGenerated < ago(2d)"),
						QueryResult: to.Ptr("Security Event query result"),
						Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
						UpdatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("john doe"),
							Email:    to.Ptr("john@contoso.com"),
							ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BookmarkList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BookmarkList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/GetBookmarks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBookmarks_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/GetBookmarkById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a bookmark."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarksClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/GetBookmarkById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Bookmark{
			Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Type: to.Ptr("Microsoft.SecurityInsights/bookmarks"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.BookmarkProperties{
				Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				DisplayName: to.Ptr("My bookmark"),
				IncidentInfo: &armsecurityinsight.IncidentInfo{
					IncidentID:   to.Ptr("DDA55F97-170B-40B9-B8ED-CBFD05481E7D"),
					RelationName: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0018"),
					Severity:     to.Ptr(armsecurityinsight.IncidentSeverityLow),
					Title:        to.Ptr("New case 1"),
				},
				Labels: []*string{
					to.Ptr("Tag1"),
					to.Ptr("Tag2")},
				Notes:       to.Ptr("Found a suspicious activity"),
				Query:       to.Ptr("SecurityEvent | where TimeGenerated > ago(1d) and TimeGenerated < ago(2d)"),
				QueryResult: to.Ptr("Security Event query result"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Bookmark) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Bookmark)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/GetBookmarkById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBookmarks_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/CreateBookmark.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a bookmark."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarksClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		armsecurityinsight.Bookmark{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.BookmarkProperties{
				Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				DisplayName: to.Ptr("My bookmark"),
				Labels: []*string{
					to.Ptr("Tag1"),
					to.Ptr("Tag2")},
				Notes:       to.Ptr("Found a suspicious activity"),
				Query:       to.Ptr("SecurityEvent | where TimeGenerated > ago(1d) and TimeGenerated < ago(2d)"),
				QueryResult: to.Ptr("Security Event query result"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/CreateBookmark.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Bookmark{
			Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Type: to.Ptr("Microsoft.SecurityInsights/bookmarks"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.BookmarkProperties{
				Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				DisplayName: to.Ptr("My bookmark"),
				Labels: []*string{
					to.Ptr("Tag1"),
					to.Ptr("Tag2")},
				Notes:       to.Ptr("Found a suspicious activity"),
				Query:       to.Ptr("SecurityEvent | where TimeGenerated > ago(1d) and TimeGenerated < ago(2d)"),
				QueryResult: to.Ptr("Security Event query result"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:15:30Z"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Bookmark) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Bookmark)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/CreateBookmark.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBookmarks_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/DeleteBookmark.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a bookmark."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarksClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/DeleteBookmark.json: %v", err)
	}
}

func TestBookmarkRelations_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/GetAllBookmarkRelations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all bookmark relations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarkRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		"2216d0e1-91e3-4902-89fd-d2df8c535096",
		&armsecurityinsight.BookmarkRelationsClientListOptions{Filter: nil,
			Orderby:   nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/GetAllBookmarkRelations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.RelationList{
			Value: []*armsecurityinsight.Relation{
				{
					Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Type: to.Ptr("Microsoft.SecurityInsights/bookmarks/relations"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
					Properties: &armsecurityinsight.RelationProperties{
						RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812"),
						RelatedResourceName: to.Ptr("afbd324f-6c48-459c-8710-8d1e1cd03812"),
						RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/incidents"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RelationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RelationList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/GetAllBookmarkRelations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBookmarkRelations_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/GetBookmarkRelationByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a bookmark relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarkRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"2216d0e1-91e3-4902-89fd-d2df8c535096",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/GetBookmarkRelationByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Relation{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/bookmarks/relations"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812"),
				RelatedResourceName: to.Ptr("afbd324f-6c48-459c-8710-8d1e1cd03812"),
				RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/incidents"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Relation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Relation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/GetBookmarkRelationByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBookmarkRelations_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/CreateBookmarkRelation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a bookmark relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarkRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"2216d0e1-91e3-4902-89fd-d2df8c535096",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		armsecurityinsight.Relation{
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/CreateBookmarkRelation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Relation{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/bookmarks/relations"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812"),
				RelatedResourceName: to.Ptr("afbd324f-6c48-459c-8710-8d1e1cd03812"),
				RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/incidents"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Relation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Relation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/CreateBookmarkRelation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBookmarkRelations_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/DeleteBookmarkRelation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the bookmark relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarkRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"2216d0e1-91e3-4902-89fd-d2df8c535096",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/relations/DeleteBookmarkRelation.json: %v", err)
	}
}

func TestBookmark_Expand(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/expand/PostExpandBookmark.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Expand an bookmark"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewBookmarkClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Expand(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		armsecurityinsight.BookmarkExpandParameters{
			EndTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-24T17:21:00.000Z"); return t }()),
			ExpansionID: to.Ptr("27f76e63-c41b-480f-bb18-12ad2e011d49"),
			StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-25T17:21:00.000Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/expand/PostExpandBookmark.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.BookmarkExpandResponse{
			MetaData: &armsecurityinsight.ExpansionResultsMetadata{
				Aggregations: []*armsecurityinsight.ExpansionResultAggregation{
					{
						Count:      to.Ptr[int32](1),
						EntityKind: to.Ptr(armsecurityinsight.EntityKindAccount),
					}},
			},
			Value: &armsecurityinsight.BookmarkExpandResponseValue{
				Entities: []armsecurityinsight.EntityClassification{
					&armsecurityinsight.AccountEntity{
						Name: to.Ptr("fe4ddab5-8cea-eca3-c8b8-9e92e830a387"),
						Type: to.Ptr("Microsoft.SecurityInsights/entities"),
						ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/fe4ddab5-8cea-eca3-c8b8-9e92e830a387"),
						Kind: to.Ptr(armsecurityinsight.EntityKindAccount),
						Properties: &armsecurityinsight.AccountEntityProperties{
							FriendlyName: to.Ptr("administrator"),
							AccountName:  to.Ptr("administrator"),
							NtDomain:     to.Ptr("domain"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BookmarkExpandResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BookmarkExpandResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/bookmarks/expand/PostExpandBookmark.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPGeodata_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/enrichment/GetGeodataByIp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get geodata for a single IP address"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIPGeodataClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"1.2.3.4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/enrichment/GetGeodataByIp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EnrichmentIPGeodata{
			Asn:              to.Ptr("12345"),
			Carrier:          to.Ptr("Microsoft"),
			City:             to.Ptr("Redmond"),
			CityCf:           to.Ptr[int32](90),
			Continent:        to.Ptr("north america"),
			Country:          to.Ptr("united states"),
			CountryCf:        to.Ptr[int32](99),
			IPAddr:           to.Ptr("1.2.3.4"),
			IPRoutingType:    to.Ptr("fixed"),
			Latitude:         to.Ptr("40.2436"),
			Longitude:        to.Ptr("-100.8891"),
			Organization:     to.Ptr("Microsoft"),
			OrganizationType: to.Ptr("tech"),
			Region:           to.Ptr("western usa"),
			State:            to.Ptr("washington"),
			StateCode:        to.Ptr("wa"),
		}
		if !reflect.DeepEqual(exampleRes, res.EnrichmentIPGeodata) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnrichmentIPGeodata)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/enrichment/GetGeodataByIp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainWhois_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/enrichment/GetWhoisByDomainName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get whois information for a single domain name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDomainWhoisClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"microsoft.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/enrichment/GetWhoisByDomainName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EnrichmentDomainWhois{
			Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T16:15:01.187045Z"); return t }()),
			Domain:  to.Ptr("microsoft.com"),
			ParsedWhois: &armsecurityinsight.EnrichmentDomainWhoisDetails{
				Contacts: &armsecurityinsight.EnrichmentDomainWhoisContacts{
					Admin: &armsecurityinsight.EnrichmentDomainWhoisContact{
						Name:    to.Ptr("Administrator"),
						Country: to.Ptr("United States"),
						Email:   to.Ptr("mail@microsoft.com"),
						Org:     to.Ptr("Microsoft"),
						Phone:   to.Ptr("1-800-555-1234"),
						Postal:  to.Ptr("98052"),
						State:   to.Ptr("WA"),
						Street: []*string{
							to.Ptr("One Microsoft Way")},
					},
					Billing: &armsecurityinsight.EnrichmentDomainWhoisContact{
						Name:    to.Ptr("Administrator"),
						Country: to.Ptr("United States"),
						Email:   to.Ptr("mail@microsoft.com"),
						Org:     to.Ptr("Microsoft"),
						Phone:   to.Ptr("1-800-555-1234"),
						Postal:  to.Ptr("98052"),
						State:   to.Ptr("WA"),
						Street: []*string{
							to.Ptr("One Microsoft Way")},
					},
					Tech: &armsecurityinsight.EnrichmentDomainWhoisContact{
						Name:    to.Ptr("Administrator"),
						Country: to.Ptr("United States"),
						Email:   to.Ptr("mail@microsoft.com"),
						Org:     to.Ptr("Microsoft"),
						Phone:   to.Ptr("1-800-555-1234"),
						Postal:  to.Ptr("98052"),
						State:   to.Ptr("WA"),
						Street: []*string{
							to.Ptr("One Microsoft Way")},
					},
				},
				NameServers: []*string{
					to.Ptr("ns1-205.azure-dns.com"),
					to.Ptr("ns2-205.azure-dns.net"),
					to.Ptr("ns3-205.azure-dns.org"),
					to.Ptr("ns4-205.azure-dns.info")},
				Registrar: &armsecurityinsight.EnrichmentDomainWhoisRegistrarDetails{
					Name:              to.Ptr("MarkMonitor, Inc"),
					AbuseContactEmail: to.Ptr("abuse@microsoft.com"),
					AbuseContactPhone: to.Ptr("12083895770"),
					URL:               to.Ptr("http://www.markmonitor.com"),
					WhoisServer:       to.Ptr("whois.markmonitor.com"),
				},
				Statuses: []*string{
					to.Ptr("clientUpdateProhibited"),
					to.Ptr("clientTransferProhibited"),
					to.Ptr("clientDeleteProhibited"),
					to.Ptr("serverUpdateProhibited"),
					to.Ptr("serverTransferProhibited"),
					to.Ptr("serverDeleteProhibited")},
			},
			Updated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T16:15:01.187045Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.EnrichmentDomainWhois) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnrichmentDomainWhois)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/enrichment/GetWhoisByDomainName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntityQueries_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetEntityQueries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all entity queries."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityQueriesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		&armsecurityinsight.EntityQueriesClientListOptions{Kind: to.Ptr(armsecurityinsight.Enum8Expansion)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetEntityQueries.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.EntityQueryList{
			Value: []armsecurityinsight.EntityQueryClassification{
				&armsecurityinsight.ExpansionEntityQuery{
					Name: to.Ptr("37ca3555-c135-4a73-a65e-9c1d00323f5d"),
					Type: to.Ptr("Microsoft.SecurityInsights/entityQueries"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueries/37ca3555-c135-4a73-a65e-9c1d00323f5d"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryKindExpansion),
					Properties: &armsecurityinsight.ExpansionEntityQueriesProperties{
						DataSources: []*string{
							to.Ptr("AzureActivity")},
						DisplayName:     to.Ptr("Least active accounts on Azure from this IP"),
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeIP),
						InputFields: []*string{
							to.Ptr("address")},
						OutputEntityTypes: []*armsecurityinsight.EntityType{
							to.Ptr(armsecurityinsight.EntityTypeAccount)},
						QueryTemplate: to.Ptr("let AccountActivity_byIP = (v_IP_Address:string){\r\n                            AzureActivity\r\n                            | where Caller != '' and CallerIpAddress == v_IP_Address\r\n                            | summarize Account_Aux_StartTime = min(TimeGenerated), Account_Aux_EndTime = max(TimeGenerated), Count = count() by Caller, TenantId\r\n                            | top 10 by Count asc nulls last \r\n                            | extend UPN = iff(Caller contains '@', Caller, ''), Account_AadUserId = iff(Caller !contains '@', Caller,'')\r\n                            | extend Account_Name = split(UPN,'@')[0] , Account_UPNSuffix = split(UPN,'@')[1]\r\n                            | project Account_Name, Account_UPNSuffix, Account_AadUserId, Account_AadTenantId=TenantId, Account_Aux_StartTime , Account_Aux_EndTime};\r\n                            AccountActivity_byIP('<address>')"),
					},
				},
				&armsecurityinsight.ExpansionEntityQuery{
					Name: to.Ptr("97a1d515-abf2-4231-9a35-985f9de0bb91"),
					Type: to.Ptr("Microsoft.SecurityInsights/entityQueries"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueries/97a1d515-abf2-4231-9a35-985f9de0bb91"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryKindExpansion),
					Properties: &armsecurityinsight.ExpansionEntityQueriesProperties{
						DataSources: []*string{
							to.Ptr("AzureActivity")},
						DisplayName:     to.Ptr("Most active accounts on Azure from this IP"),
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeIP),
						InputFields: []*string{
							to.Ptr("address")},
						OutputEntityTypes: []*armsecurityinsight.EntityType{
							to.Ptr(armsecurityinsight.EntityTypeAccount)},
						QueryTemplate: to.Ptr("let AccountActivity_byIP = (v_IP_Address:string){\r\n                            AzureActivity\r\n                            | where Caller != '' and CallerIpAddress == v_IP_Address\r\n                            | summarize Account_Aux_StartTime = min(TimeGenerated), Account_Aux_EndTime = max(TimeGenerated), Count = count() by Caller, TenantId\r\n                            | top 10 by Count desc nulls last \r\n                            | extend UPN = iff(Caller contains '@', Caller, ''), Account_AadUserId = iff(Caller !contains '@', Caller,'')\r\n                            | extend Account_Name = split(UPN,'@')[0] , Account_UPNSuffix = split(UPN,'@')[1]\r\n                            | project Account_Name, Account_UPNSuffix, Account_AadUserId, Account_AadTenantId=TenantId, Account_Aux_StartTime , Account_Aux_EndTime};\r\n                            AccountActivity_byIP('<address>')"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EntityQueryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EntityQueryList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetEntityQueries.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntityQueries_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetActivityEntityQueryById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Activity entity query."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityQueriesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"07da3cc8-c8ad-4710-a44e-334cdcb7882b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetActivityEntityQueryById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityQueriesClientGetResponse{
			&armsecurityinsight.ActivityEntityQuery{
				Name: to.Ptr("07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Type: to.Ptr("Microsoft.SecurityInsights/entityQueries"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueries/07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Kind: to.Ptr(armsecurityinsight.EntityQueryKindActivity),
				Properties: &armsecurityinsight.ActivityEntityQueriesProperties{
					Description:    to.Ptr("Account deleted on host"),
					Content:        to.Ptr("On '{{Computer}}' the account '{{TargetAccount}}' was deleted by '{{AddedBy}}'"),
					CreatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
					Enabled:        to.Ptr(true),
					EntitiesFilter: map[string][]*string{
						"Host_OsFamily": {
							to.Ptr("Windows")},
					},
					InputEntityType:     to.Ptr(armsecurityinsight.EntityTypeHost),
					LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
					QueryDefinitions: &armsecurityinsight.ActivityEntityQueriesPropertiesQueryDefinitions{
						Query: to.Ptr("let GetAccountActions = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){\nSecurityEvent\n| where EventID in (4725, 4726, 4767, 4720, 4722, 4723, 4724)\n// parsing for Host to handle variety of conventions coming from data\n| extend Host_HostName = case(\nComputer has '@', tostring(split(Computer, '@')[0]),\nComputer has '\\\\', tostring(split(Computer, '\\\\')[1]),\nComputer has '.', tostring(split(Computer, '.')[0]),\nComputer\n)\n| extend Host_NTDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', tostring(split(Computer, '.')[-2]), \nComputer\n)\n| extend Host_DnsDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), \nComputer\n)\n| where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) \nor (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) \nor v_Host_AzureID =~ _ResourceId \nor v_Host_OMSAgentID == SourceComputerId\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, SubjectUserName, SubjectUserSid, _ResourceId, SourceComputerId\n| extend AddedBy = SubjectUserName\n// Future support for Activities\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount\n};\nGetAccountActions('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')\n \n| where EventID == 4726 "),
					},
					RequiredInputFieldsSets: [][]*string{
						{
							to.Ptr("Host_HostName"),
							to.Ptr("Host_NTDomain")},
						{
							to.Ptr("Host_HostName"),
							to.Ptr("Host_DnsDomain")},
						{
							to.Ptr("Host_AzureID")},
						{
							to.Ptr("Host_OMSAgentID")}},
					Title: to.Ptr("An account was deleted on this host"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetActivityEntityQueryById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetExpansionEntityQueryById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Expansion entity query."},
	})
	client = armsecurityinsight.NewEntityQueriesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"07da3cc8-c8ad-4710-a44e-334cdcb7882b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetExpansionEntityQueryById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityQueriesClientGetResponse{
			&armsecurityinsight.ExpansionEntityQuery{
				Name: to.Ptr("07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Type: to.Ptr("Microsoft.SecurityInsights/entityQueries"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueries/07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Kind: to.Ptr(armsecurityinsight.EntityQueryKindExpansion),
				Properties: &armsecurityinsight.ExpansionEntityQueriesProperties{
					DataSources: []*string{
						to.Ptr("SecurityEvent")},
					DisplayName:     to.Ptr("Parent processes running on host"),
					InputEntityType: to.Ptr(armsecurityinsight.EntityTypeHost),
					InputFields: []*string{
						to.Ptr("hostName")},
					OutputEntityTypes: []*armsecurityinsight.EntityType{
						to.Ptr(armsecurityinsight.EntityTypeProcess)},
					QueryTemplate: to.Ptr("let GetParentProcessesOnHost = (v_Host_HostName:string){\r\n                            SecurityEvent \r\n                            | where EventID == 4688 \r\n                            | where isnotempty(ParentProcessName)\r\n                            | where NewProcessName !contains ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !contains ':\\\\Windows\\\\System32\\\\conhost.exe'\r\n                            and NewProcessName !contains ':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v2.0.50727\\\\csc.exe' and ParentProcessName !contains ':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v2.0.50727\\\\csc.exe'\r\n                            and NewProcessName !contains ':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v2.0.50727\\\\cvtres.exe' and ParentProcessName !contains ':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v2.0.50727\\\\cvtres.exe'\r\n                            and NewProcessName!contains ':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\MonitoringHost.exe' and ParentProcessName !contains ':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\MonitoringHost.exe'\r\n                            and ParentProcessName !contains ':\\\\Windows\\\\CCM\\\\CcmExec.exe'\r\n                            | where(ParentProcessName !contains ':\\\\Windows\\\\System32\\\\svchost.exe' and (NewProcessName !contains ':\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe' or NewProcessName !contains ':\\\\Windows\\\\SysWOW64\\\\wbem\\\\WmiPrvSE.exe'))\r\n                            | where(ParentProcessName !contains ':\\\\Windows\\\\System32\\\\services.exe' and NewProcessName !contains ':\\\\Windows\\\\servicing\\\\TrustedInstaller.exe')\r\n                            | where toupper(Computer) contains v_Host_HostName or toupper(WorkstationName) contains v_Host_HostName\r\n                            | summarize min(TimeGenerated), max(TimeGenerated) by Account, Computer, ParentProcessName, NewProcessName, CommandLine, ProcessId\r\n                            | project min_TimeGenerated, max_TimeGenerated, Account, Computer, ParentProcessName, NewProcessName, CommandLine, ProcessId\r\n                            | project-rename Process_Host_UnstructuredName=Computer, Process_Account_UnstructuredName=Account, Process_CommandLine=CommandLine, Process_ProcessId=ProcessId, Process_ImageFile_FullPath=NewProcessName, Process_ParentProcess_ImageFile_FullPath=ParentProcessName\r\n                            | top 10 by min_TimeGenerated asc};\r\n                            GetParentProcessesOnHost(toupper('<hostName>'))"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/GetExpansionEntityQueryById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntityQueries_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/CreateEntityQueryActivity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an Activity entity query."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityQueriesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"07da3cc8-c8ad-4710-a44e-334cdcb7882b",
		&armsecurityinsight.ActivityCustomEntityQuery{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Kind: to.Ptr(armsecurityinsight.CustomEntityQueryKindActivity),
			Properties: &armsecurityinsight.ActivityEntityQueriesProperties{
				Description: to.Ptr("Account deleted on host"),
				Content:     to.Ptr("On '{{Computer}}' the account '{{TargetAccount}}' was deleted by '{{AddedBy}}'"),
				Enabled:     to.Ptr(true),
				EntitiesFilter: map[string][]*string{
					"Host_OsFamily": {
						to.Ptr("Windows")},
				},
				InputEntityType: to.Ptr(armsecurityinsight.EntityTypeHost),
				QueryDefinitions: &armsecurityinsight.ActivityEntityQueriesPropertiesQueryDefinitions{
					Query: to.Ptr("let GetAccountActions = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){\nSecurityEvent\n| where EventID in (4725, 4726, 4767, 4720, 4722, 4723, 4724)\n// parsing for Host to handle variety of conventions coming from data\n| extend Host_HostName = case(\nComputer has '@', tostring(split(Computer, '@')[0]),\nComputer has '\\\\', tostring(split(Computer, '\\\\')[1]),\nComputer has '.', tostring(split(Computer, '.')[0]),\nComputer\n)\n| extend Host_NTDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', tostring(split(Computer, '.')[-2]), \nComputer\n)\n| extend Host_DnsDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), \nComputer\n)\n| where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) \nor (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) \nor v_Host_AzureID =~ _ResourceId \nor v_Host_OMSAgentID == SourceComputerId\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, SubjectUserName, SubjectUserSid, _ResourceId, SourceComputerId\n| extend AddedBy = SubjectUserName\n// Future support for Activities\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount\n};\nGetAccountActions('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')\n \n| where EventID == 4726 "),
				},
				RequiredInputFieldsSets: [][]*string{
					{
						to.Ptr("Host_HostName"),
						to.Ptr("Host_NTDomain")},
					{
						to.Ptr("Host_HostName"),
						to.Ptr("Host_DnsDomain")},
					{
						to.Ptr("Host_AzureID")},
					{
						to.Ptr("Host_OMSAgentID")}},
				Title: to.Ptr("An account was deleted on this host"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/CreateEntityQueryActivity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityQueriesClientCreateOrUpdateResponse{
			&armsecurityinsight.ActivityEntityQuery{
				Name: to.Ptr("07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Type: to.Ptr("Microsoft.SecurityInsights/entityQueries"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueries/07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.EntityQueryKindActivity),
				Properties: &armsecurityinsight.ActivityEntityQueriesProperties{
					Description:    to.Ptr("Account deleted on host"),
					Content:        to.Ptr("On '{{Computer}}' the account '{{TargetAccount}}' was deleted by '{{AddedBy}}'"),
					CreatedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
					Enabled:        to.Ptr(true),
					EntitiesFilter: map[string][]*string{
						"Host_OsFamily": {
							to.Ptr("Windows")},
					},
					InputEntityType:     to.Ptr(armsecurityinsight.EntityTypeHost),
					LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
					QueryDefinitions: &armsecurityinsight.ActivityEntityQueriesPropertiesQueryDefinitions{
						Query: to.Ptr("let GetAccountActions = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){\nSecurityEvent\n| where EventID in (4725, 4726, 4767, 4720, 4722, 4723, 4724)\n// parsing for Host to handle variety of conventions coming from data\n| extend Host_HostName = case(\nComputer has '@', tostring(split(Computer, '@')[0]),\nComputer has '\\\\', tostring(split(Computer, '\\\\')[1]),\nComputer has '.', tostring(split(Computer, '.')[0]),\nComputer\n)\n| extend Host_NTDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', tostring(split(Computer, '.')[-2]), \nComputer\n)\n| extend Host_DnsDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), \nComputer\n)\n| where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) \nor (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) \nor v_Host_AzureID =~ _ResourceId \nor v_Host_OMSAgentID == SourceComputerId\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, SubjectUserName, SubjectUserSid, _ResourceId, SourceComputerId\n| extend AddedBy = SubjectUserName\n// Future support for Activities\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount\n};\nGetAccountActions('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')\n \n| where EventID == 4726 "),
					},
					RequiredInputFieldsSets: [][]*string{
						{
							to.Ptr("Host_HostName"),
							to.Ptr("Host_NTDomain")},
						{
							to.Ptr("Host_HostName"),
							to.Ptr("Host_DnsDomain")},
						{
							to.Ptr("Host_AzureID")},
						{
							to.Ptr("Host_OMSAgentID")}},
					Title: to.Ptr("An account was deleted on this host"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/CreateEntityQueryActivity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntityQueries_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/DeleteEntityQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an entity query."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityQueriesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"07da3cc8-c8ad-4710-a44e-334cdcb7882b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueries/DeleteEntityQuery.json: %v", err)
	}
}

func TestEntities_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetEntities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all entities."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetEntities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.EntityList{
			Value: []armsecurityinsight.EntityClassification{
				&armsecurityinsight.AccountEntity{
					Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
					Kind: to.Ptr(armsecurityinsight.EntityKindAccount),
					Properties: &armsecurityinsight.AccountEntityProperties{
						FriendlyName:   to.Ptr("administrator"),
						AADTenantID:    to.Ptr("70fbdad0-7441-4564-b2b5-2b8862d0fee0"),
						AADUserID:      to.Ptr("f7033626-2572-46b1-bba0-06646f4f95b3"),
						AccountName:    to.Ptr("administrator"),
						IsDomainJoined: to.Ptr(true),
						NtDomain:       to.Ptr("domain"),
						ObjectGUID:     to.Ptr("11227b78-3c6e-436e-a2a2-02fc7662eca0"),
						Puid:           to.Ptr("ee3cb2d8-14ba-45ef-8009-d6f1cacfa04d"),
						Sid:            to.Ptr("S-1-5-18"),
						UpnSuffix:      to.Ptr("contoso"),
					},
				},
				&armsecurityinsight.HostEntity{
					Name: to.Ptr("fed9fe89-dce8-40f2-bf44-70f23fe93b3c"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/fed9fe89-dce8-40f2-bf44-70f23fe93b3c"),
					Kind: to.Ptr(armsecurityinsight.EntityKindHost),
					Properties: &armsecurityinsight.HostEntityProperties{
						FriendlyName:   to.Ptr("vm1"),
						AzureID:        to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1"),
						DNSDomain:      to.Ptr("contoso"),
						HostName:       to.Ptr("vm1"),
						IsDomainJoined: to.Ptr(true),
						NetBiosName:    to.Ptr("contoso"),
						NtDomain:       to.Ptr("domain"),
						OmsAgentID:     to.Ptr("70fbdad0-7441-4564-b2b5-2b8862d0fee0"),
						OSFamily:       to.Ptr(armsecurityinsight.OSFamilyWindows),
						OSVersion:      to.Ptr("1.0"),
					},
				},
				&armsecurityinsight.FileEntity{
					Name: to.Ptr("af378b21-b4aa-4fe7-bc70-13f8621a322f"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/af378b21-b4aa-4fe7-bc70-13f8621a322f"),
					Kind: to.Ptr(armsecurityinsight.EntityKindFile),
					Properties: &armsecurityinsight.FileEntityProperties{
						FriendlyName: to.Ptr("cmd.exe"),
						Directory:    to.Ptr("C:\\Windows\\System32"),
						FileName:     to.Ptr("cmd.exe"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EntityList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EntityList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetEntities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntities_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetCloudApplicationEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a cloud application entity."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetCloudApplicationEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.CloudApplicationEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindCloudApplication),
				Properties: &armsecurityinsight.CloudApplicationEntityProperties{
					FriendlyName: to.Ptr("AppName"),
					AppID:        to.Ptr[int32](1),
					AppName:      to.Ptr("AppName"),
					InstanceName: to.Ptr("InstanceName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetCloudApplicationEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetDnsEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dns entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"f4e74920-f2c0-4412-a45f-66d94fdf01f8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetDnsEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.DNSEntity{
				Name: to.Ptr("f4e74920-f2c0-4412-a45f-66d94fdf01f8"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/f4e74920-f2c0-4412-a45f-66d94fdf01f8"),
				Kind: to.Ptr(armsecurityinsight.EntityKindDNSResolution),
				Properties: &armsecurityinsight.DNSEntityProperties{
					FriendlyName: to.Ptr("domain"),
					DomainName:   to.Ptr("domain"),
					IPAddressEntityIDs: []*string{
						to.Ptr("475d3120-33e0-4841-9f1c-a8f15a801d19")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetDnsEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetFileEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a file entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"af378b21-b4aa-4fe7-bc70-13f8621a322f",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetFileEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.FileEntity{
				Name: to.Ptr("af378b21-b4aa-4fe7-bc70-13f8621a322f"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/af378b21-b4aa-4fe7-bc70-13f8621a322f"),
				Kind: to.Ptr(armsecurityinsight.EntityKindFile),
				Properties: &armsecurityinsight.FileEntityProperties{
					FriendlyName: to.Ptr("cmd.exe"),
					Directory:    to.Ptr("C:\\Windows\\System32"),
					FileName:     to.Ptr("cmd.exe"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetFileEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetFileHashEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a file hash entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"ea359fa6-c1e5-f878-e105-6344f3e399a1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetFileHashEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.FileHashEntity{
				Name: to.Ptr("ea359fa6-c1e5-f878-e105-6344f3e399a1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/ea359fa6-c1e5-f878-e105-6344f3e399a1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindFileHash),
				Properties: &armsecurityinsight.FileHashEntityProperties{
					FriendlyName: to.Ptr("E923636F1093C414AAB39F846E9D7A372BEEFA7B628B28179197E539C56AA0F0(SHA256)"),
					Algorithm:    to.Ptr(armsecurityinsight.FileHashAlgorithmSHA256),
					HashValue:    to.Ptr("E923636F1093C414AAB39F846E9D7A372BEEFA7B628B28179197E539C56AA0F0"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetFileHashEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetHostEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a host entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetHostEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.HostEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindHost),
				Properties: &armsecurityinsight.HostEntityProperties{
					FriendlyName:   to.Ptr("vm1"),
					AzureID:        to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1"),
					DNSDomain:      to.Ptr("contoso"),
					HostName:       to.Ptr("vm1"),
					IsDomainJoined: to.Ptr(true),
					NetBiosName:    to.Ptr("contoso"),
					NtDomain:       to.Ptr("domain"),
					OmsAgentID:     to.Ptr("70fbdad0-7441-4564-b2b5-2b8862d0fee0"),
					OSFamily:       to.Ptr(armsecurityinsight.OSFamilyWindows),
					OSVersion:      to.Ptr("1.0"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetHostEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailClusterEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a mailCluster entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailClusterEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.MailClusterEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindMailCluster),
				Properties: &armsecurityinsight.MailClusterEntityProperties{
					FriendlyName:            to.Ptr("ClusterSourceIdentifier"),
					ClusterGroup:            to.Ptr("cluster group"),
					ClusterSourceIdentifier: to.Ptr("cluster source identifier"),
					ClusterSourceType:       to.Ptr("Similarity"),
					CountByDeliveryStatus: map[string]interface{}{
						"deliveryStatus": float64(5),
					},
					CountByProtectionStatus: map[string]interface{}{
						"protectionStatus": float64(65),
					},
					CountByThreatType: map[string]interface{}{
						"threatType": float64(6),
					},
					NetworkMessageIDs: []*string{
						to.Ptr("ccfce855-e02f-491b-a1cc-5bafb371ad0c")},
					Query:     to.Ptr("kqlFilter"),
					QueryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T01:42:01.6026755Z"); return t }()),
					Source:    to.Ptr("ClusterSourceIdentifier"),
					Threats: []*string{
						to.Ptr("thrreat1"),
						to.Ptr("thread2")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailClusterEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailMessageEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a mailMessage entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailMessageEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.MailMessageEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindMailMessage),
				Properties: &armsecurityinsight.MailMessageEntityProperties{
					FriendlyName:   to.Ptr("cmd.exe"),
					DeliveryAction: to.Ptr(armsecurityinsight.DeliveryActionBlocked),
					FileEntityIDs: []*string{
						to.Ptr("ccfce855-e02f-491b-a1cc-5bafb371ad0c")},
					InternetMessageID:   to.Ptr("message id"),
					P1Sender:            to.Ptr("email@fake.com"),
					P1SenderDisplayName: to.Ptr("p1 sender display name"),
					P1SenderDomain:      to.Ptr("p1 sender domain"),
					P2Sender:            to.Ptr("the sender"),
					P2SenderDisplayName: to.Ptr("p2 sender display name"),
					P2SenderDomain:      to.Ptr("p2 Sender Domain"),
					Recipient:           to.Ptr("recipient"),
					SenderIP:            to.Ptr("1.23.34.43"),
					Subject:             to.Ptr("subject"),
					ThreatDetectionMethods: []*string{
						to.Ptr("thrreat1"),
						to.Ptr("thread2")},
					Threats: []*string{
						to.Ptr("thrreat1"),
						to.Ptr("thread2")},
					Urls: []*string{
						to.Ptr("http://moqbrarcwmnk.banxhdcojlg.biz")},
					Language: to.Ptr("language"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailMessageEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailboxEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a mailbox entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailboxEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.MailboxEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindMailbox),
				Properties: &armsecurityinsight.MailboxEntityProperties{
					FriendlyName:              to.Ptr("emailAddress1"),
					DisplayName:               to.Ptr("display name"),
					ExternalDirectoryObjectID: to.Ptr("18cc8fdc-e169-4451-983a-bd027db286eb"),
					MailboxPrimaryAddress:     to.Ptr("emailAddress1"),
					Upn:                       to.Ptr("upn1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMailboxEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMalwareEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a malware entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"af378b21-b4aa-4fe7-bc70-13f8621a322f",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMalwareEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.MalwareEntity{
				Name: to.Ptr("af378b21-b4aa-4fe7-bc70-13f8621a322f"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/af378b21-b4aa-4fe7-bc70-13f8621a322f"),
				Kind: to.Ptr(armsecurityinsight.EntityKindMalware),
				Properties: &armsecurityinsight.MalwareEntityProperties{
					FriendlyName: to.Ptr("Win32/Toga!rfn"),
					Category:     to.Ptr("Trojan"),
					MalwareName:  to.Ptr("Win32/Toga!rfn"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetMalwareEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetProcessEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a process entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"7264685c-038c-42c6-948c-38e14ef1fb98",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetProcessEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.ProcessEntity{
				Name: to.Ptr("7264685c-038c-42c6-948c-38e14ef1fb98"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/7264685c-038c-42c6-948c-38e14ef1fb98"),
				Kind: to.Ptr(armsecurityinsight.EntityKindProcess),
				Properties: &armsecurityinsight.ProcessEntityProperties{
					FriendlyName:      to.Ptr("cmd.exe"),
					CommandLine:       to.Ptr("\"cmd\""),
					ImageFileEntityID: to.Ptr("bba7b47b-c1c1-4021-b568-5b07b9292f5e"),
					ProcessID:         to.Ptr("0x2aa48"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetProcessEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetRegistryKeyEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a registry key entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetRegistryKeyEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.RegistryKeyEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindRegistryKey),
				Properties: &armsecurityinsight.RegistryKeyEntityProperties{
					FriendlyName: to.Ptr("SOFTWARE"),
					Hive:         to.Ptr(armsecurityinsight.RegistryHiveHKEYLOCALMACHINE),
					Key:          to.Ptr("SOFTWARE"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetRegistryKeyEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetRegistryValueEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a registry value entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"dc44bd11-b348-4d76-ad29-37bf7aa41356",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetRegistryValueEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.RegistryValueEntity{
				Name: to.Ptr("dc44bd11-b348-4d76-ad29-37bf7aa41356"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/dc44bd11-b348-4d76-ad29-37bf7aa41356"),
				Kind: to.Ptr(armsecurityinsight.EntityKindRegistryValue),
				Properties: &armsecurityinsight.RegistryValueEntityProperties{
					FriendlyName: to.Ptr("Data"),
					KeyEntityID:  to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
					ValueData:    to.Ptr("Data"),
					ValueName:    to.Ptr("Name"),
					ValueType:    to.Ptr(armsecurityinsight.RegistryValueKindString),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetRegistryValueEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSecurityAlertEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a security alert entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"4aa486e0-6f85-41af-99ea-7acdce7be6c8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSecurityAlertEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.SecurityAlert{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/4aa486e0-6f85-41af-99ea-7acdce7be6c8"),
				Kind: to.Ptr(armsecurityinsight.EntityKindSecurityAlert),
				Properties: &armsecurityinsight.SecurityAlertProperties{
					AdditionalData: map[string]interface{}{
						"Query":                              "Heartbeat \n| extend AccountCustomEntity = \"administrator\"",
						"Query Period":                       "05:00:00",
						"Search Query Results Overall Count": "203",
						"Total Account Entities":             "1",
						"Trigger Operator":                   "GreaterThan",
						"Trigger Threshold":                  "200",
					},
					FriendlyName:         to.Ptr("Suspicious account detected"),
					Description:          to.Ptr(""),
					AlertDisplayName:     to.Ptr("Suspicious account detected"),
					AlertLink:            to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518119885989999999_4aa486e0-6f85-41af-99ea-7acdce7be6c8/subscriptionId/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/myRg/myWorkspace/referencedFrom/alertDeepLink/location/centralus"),
					AlertType:            to.Ptr("c8c99641-985d-4e4e-8e91-fb3466cd0e5b_46c7b6c0-ff43-44dd-8b4d-ceffff7aa7df"),
					ConfidenceLevel:      to.Ptr(armsecurityinsight.ConfidenceLevelUnknown),
					EndTimeUTC:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:21:45.926185Z"); return t }()),
					Intent:               to.Ptr(armsecurityinsight.KillChainIntentUnknown),
					ProcessingEndTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-06T13:56:53.5392366Z"); return t }()),
					ProductComponentName: to.Ptr("Scheduled Alerts"),
					ProductName:          to.Ptr("Azure Sentinel"),
					ProviderAlertID:      to.Ptr("c2bafff9-fb31-41d0-a177-ecbff7a02ffe"),
					Severity:             to.Ptr(armsecurityinsight.AlertSeverityMedium),
					StartTimeUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T08:21:45.926185Z"); return t }()),
					Status:               to.Ptr(armsecurityinsight.AlertStatusNew),
					SystemAlertID:        to.Ptr("4aa486e0-6f85-41af-99ea-7acdce7be6c8"),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticPersistence),
						to.Ptr(armsecurityinsight.AttackTacticLateralMovement)},
					TimeGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T13:56:53.5392366Z"); return t }()),
					VendorName:    to.Ptr("Microsoft"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSecurityAlertEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSecurityGroupEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a security group entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSecurityGroupEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.SecurityGroupEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindSecurityGroup),
				Properties: &armsecurityinsight.SecurityGroupEntityProperties{
					FriendlyName:      to.Ptr("Name"),
					DistinguishedName: to.Ptr("Name"),
					ObjectGUID:        to.Ptr("fb1b8e04-d944-4986-b39a-1ce9adedcd98"),
					Sid:               to.Ptr("Sid"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSecurityGroupEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSubmissionMailEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a submissionMail entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSubmissionMailEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.SubmissionMailEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindSubmissionMail),
				Properties: &armsecurityinsight.SubmissionMailEntityProperties{
					FriendlyName: to.Ptr("recipient"),
					Recipient:    to.Ptr("recipient"),
					ReportType:   to.Ptr("report type"),
					Sender:       to.Ptr("sender"),
					SenderIP:     to.Ptr("1.4.35.34"),
					Subject:      to.Ptr("subject"),
					SubmissionID: to.Ptr("5bb3d8fe-54bc-499c-bc21-86fe8df2a184"),
					Submitter:    to.Ptr("submitter"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetSubmissionMailEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetUrlEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a url entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetUrlEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.URLEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindURL),
				Properties: &armsecurityinsight.URLEntityProperties{
					FriendlyName: to.Ptr("https://bing.com"),
					URL:          to.Ptr("https://bing.com"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetUrlEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetIoTDeviceEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an IoT device entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetIoTDeviceEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.IoTDeviceEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindIoTDevice),
				Properties: &armsecurityinsight.IoTDeviceEntityProperties{
					FriendlyName:   to.Ptr("device1"),
					DeviceID:       to.Ptr("device1"),
					IotHubEntityID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/8b2d9401-f953-e89d-2583-be9b4975870c"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetIoTDeviceEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetAccountEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an account entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetAccountEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.AccountEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindAccount),
				Properties: &armsecurityinsight.AccountEntityProperties{
					FriendlyName:   to.Ptr("administrator"),
					AADTenantID:    to.Ptr("70fbdad0-7441-4564-b2b5-2b8862d0fee0"),
					AADUserID:      to.Ptr("f7033626-2572-46b1-bba0-06646f4f95b3"),
					AccountName:    to.Ptr("administrator"),
					DNSDomain:      to.Ptr("contoso.com"),
					IsDomainJoined: to.Ptr(true),
					NtDomain:       to.Ptr("domain"),
					ObjectGUID:     to.Ptr("11227b78-3c6e-436e-a2a2-02fc7662eca0"),
					Puid:           to.Ptr("ee3cb2d8-14ba-45ef-8009-d6f1cacfa04d"),
					Sid:            to.Ptr("S-1-5-18"),
					UpnSuffix:      to.Ptr("contoso"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetAccountEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetAzureResourceEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an azure resource entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetAzureResourceEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.AzureResourceEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindAzureResource),
				Properties: &armsecurityinsight.AzureResourceEntityProperties{
					FriendlyName:   to.Ptr("vm1"),
					ResourceID:     to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1"),
					SubscriptionID: to.Ptr("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetAzureResourceEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetIpEntityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ip entity."},
	})
	client = armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetIpEntityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntitiesClientGetResponse{
			&armsecurityinsight.IPEntity{
				Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Type: to.Ptr("Microsoft.SecurityInsights/entities"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
				Kind: to.Ptr(armsecurityinsight.EntityKindIP),
				Properties: &armsecurityinsight.IPEntityProperties{
					FriendlyName: to.Ptr("10.3.2.8"),
					Address:      to.Ptr("10.3.2.8"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetIpEntityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntities_Expand(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/expand/PostExpandEntity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Expand an entity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Expand(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		armsecurityinsight.EntityExpandParameters{
			EndTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-26T00:00:00.000Z"); return t }()),
			ExpansionID: to.Ptr("a77992f3-25e9-4d01-99a4-5ff606cc410a"),
			StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-25T00:00:00.000Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/expand/PostExpandEntity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityExpandResponse{
			MetaData: &armsecurityinsight.ExpansionResultsMetadata{
				Aggregations: []*armsecurityinsight.ExpansionResultAggregation{
					{
						Count:      to.Ptr[int32](1),
						EntityKind: to.Ptr(armsecurityinsight.EntityKindAccount),
					}},
			},
			Value: &armsecurityinsight.EntityExpandResponseValue{
				Edges: []*armsecurityinsight.EntityEdges{
					{
						AdditionalData: map[string]interface{}{
							"EpochTimestamp": "1608289949",
							"FirstSeen":      "2021-09-01T11:12:29.597Z",
							"Source":         "Heartbeat",
						},
						TargetEntityID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/c1d60d86-5988-11eb-ae93-0242ac130002"),
					}},
				Entities: []armsecurityinsight.EntityClassification{
					&armsecurityinsight.IPEntity{
						Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
						Type: to.Ptr("Microsoft.SecurityInsights/entities"),
						ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
						Kind: to.Ptr(armsecurityinsight.EntityKindIP),
						Properties: &armsecurityinsight.IPEntityProperties{
							FriendlyName: to.Ptr("13.89.108.248"),
							Address:      to.Ptr("13.89.108.248"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EntityExpandResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EntityExpandResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/expand/PostExpandEntity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntities_Queries(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetQueries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Entity Query"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Queries(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		armsecurityinsight.EntityItemQueryKindInsight,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetQueries.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.GetQueriesResponse{
			Value: []armsecurityinsight.EntityQueryItemClassification{
				&armsecurityinsight.InsightQueryItem{
					Name: to.Ptr("6db7f5d1-f41e-46c2-b935-230b36a569e6"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities/queries"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1/queries/6db7f5d1-f41e-46c2-b935-230b36a569e6"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryKindInsight),
					Properties: &armsecurityinsight.InsightQueryItemProperties{
						DataTypes: []*armsecurityinsight.EntityQueryItemPropertiesDataTypesItem{
							{
								DataType: to.Ptr("AuditLogs"),
							},
							{
								DataType: to.Ptr("SecurityEvent"),
							}},
						EntitiesFilter:  map[string]interface{}{},
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeAccount),
						RequiredInputFieldsSets: [][]*string{
							{
								to.Ptr("Account_Name"),
								to.Ptr("Account_NTDomain")},
							{
								to.Ptr("Account_Name"),
								to.Ptr("Account_UPNSuffix")},
							{
								to.Ptr("Account_AADUserId")},
							{
								to.Ptr("Account_SID")}},
						Description: to.Ptr("Summary of actions taken on the specified account, grouped by action: password resets and changes, account lockouts (policy or admin), account creation and deletion, account enabled and disabled\n"),
						AdditionalQuery: &armsecurityinsight.InsightQueryItemPropertiesAdditionalQuery{
							Query: to.Ptr("project TimeGenerated, UserPrincipalName, Account_Name, OperationName, Activity, DisableUser, TargetSid, AADUserId, InitiatedBy, AADTenantId, AccountType, Computer, SubjectAccount, SubjectUserSid, EventData"),
							Text:  to.Ptr("See all account activity"),
						},
						BaseQuery: to.Ptr("let GetAccountActions = (v_Account_Name:string, v_Account_NTDomain:string, v_Account_UPNSuffix:string, v_Account_AADUserId:string, v_Account_SID:string){\nAuditLogs\n| where OperationName in~ ('Delete user', 'Change user password', 'Reset user password', 'Change password (self-service)',  'Reset password (by admin)', 'Reset password (self-service)', 'Update user')\n| extend UserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n| extend Account_Name = tostring(split(UserPrincipalName, '@')[0])\n| extend Account_UPNSuffix = tostring(split(UserPrincipalName, '@')[1])\n| extend Action = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0])))\n| extend ModifiedProperty = parse_json(Action).displayName\n| extend ModifiedValue = parse_json(Action).newValue\n| extend Account_AADUserId = tostring(TargetResources[0].id)\n| extend DisableUser = iif(ModifiedProperty =~ 'AccountEnabled' and ModifiedValue =~ '[false]', 'True', 'False')\n| union isfuzzy=true (\nSecurityEvent\n| where EventID in (4720, 4722, 4723, 4724, 4725, 4726, 4740)\n| extend OperationName = tostring(EventID)\n| where AccountType =~ \"user\" or isempty(AccountType)\n| extend Account_Name = TargetUserName, Account_NTDomain = TargetDomainName, Account_SID = TargetSid\n)\n| where (Account_Name =~ v_Account_Name and (Account_UPNSuffix =~ v_Account_UPNSuffix or Account_NTDomain =~ v_Account_NTDomain)) or Account_AADUserId =~ v_Account_AADUserId or Account_SID =~ v_Account_SID\n};\nGetAccountActions('CTFFUser4', '', 'seccxp.ninja', '', '')\n"),
						ChartQuery: map[string]interface{}{
							"type": "BarChart",
							"dataSets": []interface{}{
								map[string]interface{}{
									"legendColumnName": "OperationName",
									"query":            "summarize Count = count() by bin(TimeGenerated, 1h), OperationName",
									"xColumnName":      "TimeGenerated",
									"yColumnName":      "Count",
								},
							},
							"title": "Actions by type",
						},
						DefaultTimeRange: &armsecurityinsight.InsightQueryItemPropertiesDefaultTimeRange{
							AfterRange:  to.Ptr("12h"),
							BeforeRange: to.Ptr("12h"),
						},
						DisplayName: to.Ptr("Actions on account"),
						TableQuery: &armsecurityinsight.InsightQueryItemPropertiesTableQuery{
							ColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem{
								{
									Header:          to.Ptr("Action"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeString),
									SupportDeepLink: to.Ptr(false),
								},
								{
									Header:          to.Ptr("Most Recent"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeDate),
									SupportDeepLink: to.Ptr(false),
								},
								{
									Header:          to.Ptr("Count"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(true),
								}},
							QueriesDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem{
								{
									Filter: to.Ptr("where OperationName in~ ('Change user password', 'Reset user password', 'Change password (self-service)',  'Reset password (by admin)', 'Reset password (self-service)', '4724', '4723')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName in~ ('Blocked from self-service password reset', '4740')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName  == '4725' or (OperationName  =~ 'Update user' and DisableUser =~ 'True')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName in~ ('Add user', '4720')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName in~ ('Delete user', '4726')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName in~ ('4725', 'Blocked from self-service password reset', '4740') or (OperationName  =~ 'Update user' and DisableUser =~ 'True')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName in~ ('4722', '4767') or (OperationName  =~ 'Update user' and DisableUser =~ 'False')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								},
								{
									Filter: to.Ptr("where OperationName in~ ('Update user','4738')"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("Count"),
										}},
									Project:   to.Ptr("project Title = OperationName, MostRecent, Count"),
									Summarize: to.Ptr("summarize MostRecent = max(TimeGenerated), Count = count() by OperationName"),
								}},
						},
					},
				},
				&armsecurityinsight.InsightQueryItem{
					Name: to.Ptr("0a5d7b14-b485-450a-a0ac-4100c860ac32"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities/queries"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1/queries/0a5d7b14-b485-450a-a0ac-4100c860ac32"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryKindInsight),
					Properties: &armsecurityinsight.InsightQueryItemProperties{
						DataTypes: []*armsecurityinsight.EntityQueryItemPropertiesDataTypesItem{
							{
								DataType: to.Ptr("OfficeActivity"),
							}},
						EntitiesFilter:  map[string]interface{}{},
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeAccount),
						RequiredInputFieldsSets: [][]*string{
							{
								to.Ptr("Account_Name"),
								to.Ptr("Account_UPNSuffix")}},
						Description: to.Ptr("Highlight office operations of the user with anomalously high count compared to those observed in the preceding 14 days."),
						AdditionalQuery: &armsecurityinsight.InsightQueryItemPropertiesAdditionalQuery{
							Query: to.Ptr("make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by Operation \n| extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey') \n| extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore\n| mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime)) \n| extend count1=count_\n| mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) ) \n| where totAnomalies < maxAnomalies\n| extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount) \n| where maxAnomalyScorePost > AScoreThresh | order by maxAnomalyScorePost desc \n| project Operation, expectedCount=round(postExpectedCount,2), actualCount=postActualCount, anomalyScore=round(postAnomalyScore,2)\n"),
							Text:  to.Ptr("Query all anomalous operations"),
						},
						BaseQuery: to.Ptr("let AScoreThresh = 3; \nlet maxAnomalies = 3;\nlet BeforeRange = 12d; \nlet EndTime = todatetime('{{EndTimeUTC}}'); \nlet StartTime = todatetime('{{StartTimeUTC}}');\nlet numDays = tolong((EndTime-StartTime)/1d); \nlet userData = (v_Account_Name:string, v_Account_UPNSuffix:string) { \n  OfficeActivity \n  | extend splitUserId=split(UserId, '@')\n  | extend Account_Name = tostring(splitUserId[0]), Account_UPNSuffix = tostring(splitUserId[1])\n  | where Account_Name =~ v_Account_Name and Account_UPNSuffix =~ v_Account_UPNSuffix }; \nuserData('CTFFUser4', 'seccxp.ninja')\n"),
						ChartQuery: map[string]interface{}{
							"type": "LineChart",
							"dataSets": []interface{}{
								map[string]interface{}{
									"legendColumnName": "Operation",
									"query":            "make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by Operation \n| extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey') \n| extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore\n| mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost=maxif(anomalyScore1, TimeGenerated1 >= StartTime)) \n| extend count1=count_ \n| mv-apply count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore-maxAnomalyScorePost), expectedCount, count1) ) \n| where totAnomalies < maxAnomalies \n| extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,round(postExpectedCount,2)) \n| where maxAnomalyScorePost > AScoreThresh \n| order by maxAnomalyScorePost desc \n| take 1 \n| project Operation, TimeGenerated, count_\n| mvexpand TimeGenerated, count_ | project todatetime(TimeGenerated), toint(count_), Operation\n",
									"xColumnName":      "TimeGenerated",
									"yColumnName":      "count_",
								},
							},
							"title": "Anomalous operation timeline",
						},
						DefaultTimeRange: &armsecurityinsight.InsightQueryItemPropertiesDefaultTimeRange{
							AfterRange:  to.Ptr("0d"),
							BeforeRange: to.Ptr("1d"),
						},
						DisplayName: to.Ptr("Anomalously high office operation count"),
						ReferenceTimeRange: &armsecurityinsight.InsightQueryItemPropertiesReferenceTimeRange{
							BeforeRange: to.Ptr("12d"),
						},
						TableQuery: &armsecurityinsight.InsightQueryItemPropertiesTableQuery{
							ColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem{
								{
									Header:          to.Ptr("Operation"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeString),
									SupportDeepLink: to.Ptr(true),
								},
								{
									Header:          to.Ptr("Expected Count"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(false),
								},
								{
									Header:          to.Ptr("Actual Count"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(false),
								}},
							QueriesDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem{
								{
									Filter: to.Ptr("make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by Operation \n| extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey') \n| extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore\n| mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost=maxif(anomalyScore1, TimeGenerated1 >= StartTime)) \n| extend count1=count_ \n| mv-apply count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore-maxAnomalyScorePost), expectedCount, count1) ) \n| where totAnomalies < maxAnomalies \n| extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount) \n| where maxAnomalyScorePost > AScoreThresh \n| order by maxAnomalyScorePost desc\n"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} \n| where TimeGenerated between (StartTime .. EndTime) \n| where Operation == ''\n"),
											ProjectedName: to.Ptr("Operation"),
										}},
									Project:   to.Ptr("project Operation, expectedCount=round(postExpectedCount,2), actualCount=postActualCount, anomalyScore=round(postAnomalyScore,2)"),
									Summarize: to.Ptr("take 1"),
								}},
						},
					},
				},
				&armsecurityinsight.InsightQueryItem{
					Name: to.Ptr("e6cf68e6-1eca-4fbb-9fad-6280f2a9476e"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities/queries"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1/queries/e6cf68e6-1eca-4fbb-9fad-6280f2a9476e"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryKindInsight),
					Properties: &armsecurityinsight.InsightQueryItemProperties{
						DataTypes: []*armsecurityinsight.EntityQueryItemPropertiesDataTypesItem{
							{
								DataType: to.Ptr("OfficeActivity"),
							}},
						EntitiesFilter:  map[string]interface{}{},
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeAccount),
						RequiredInputFieldsSets: [][]*string{
							{
								to.Ptr("Account_Name"),
								to.Ptr("Account_UPNSuffix")},
							{
								to.Ptr("Account_AADUserId")}},
						Description: to.Ptr("Provides the count and distinct resource accesses by a given user account\n"),
						AdditionalQuery: &armsecurityinsight.InsightQueryItemPropertiesAdditionalQuery{
							Query: to.Ptr("where Operation in~ (Operations)"),
							Text:  to.Ptr("See all resource activity"),
						},
						BaseQuery: to.Ptr("let Operations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\nlet UserOperationToSharePoint =  (v_Account_Name:string, v_Account_UPNSuffix:string) {\nOfficeActivity\n// Select sharepoint activity that is relevant\n| where RecordType in~ ('SharePointFileOperation')\n| where Operation in~ (Operations)\n| extend Account_Name = tostring(split(UserId, '@')[0])\n| extend Account_UPNSuffix = tostring(split(UserId, '@')[1])\n| where Account_Name =~ v_Account_Name and Account_UPNSuffix =~ v_Account_UPNSuffix\n| project TimeGenerated, Account_Name, Account_UPNSuffix, UserId, OfficeId, RecordType, Operation, OrganizationId, UserType, UserKey, OfficeWorkload, OfficeObjectId, ClientIP, ItemType, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName, SourceFileExtension , Start_Time , ElevationTime , TenantId, SourceSystem , Type\n};\nUserOperationToSharePoint ('CTFFUser4','seccxp.ninja')\n"),
						ChartQuery: map[string]interface{}{
							"type": "LineChart",
							"dataSets": []interface{}{
								map[string]interface{}{
									"legendColumnName": "Legend",
									"query":            "summarize DistinctResources = dcountif(Operation, Operation =~ 'FileUploaded'), TotalResources = countif(Operation =~ 'FileUploaded') by bin(TimeGenerated, 1h) | extend Legend = 'File Uploads'",
									"xColumnName":      "TimeGenerated",
									"yColumnName":      "TotalResources",
								},
								map[string]interface{}{
									"legendColumnName": "Legend",
									"query":            "summarize DistinctResources = dcountif(Operation, Operation =~ 'FileDownloaded'), TotalResources = countif(Operation =~ 'FileDownloaded') by bin(TimeGenerated, 1h) | extend Legend = 'File Downloads'",
									"xColumnName":      "TimeGenerated",
									"yColumnName":      "TotalResources",
								},
							},
							"title": "Resource access over time",
						},
						DefaultTimeRange: &armsecurityinsight.InsightQueryItemPropertiesDefaultTimeRange{
							AfterRange:  to.Ptr("12h"),
							BeforeRange: to.Ptr("12h"),
						},
						DisplayName: to.Ptr("Resource access"),
						TableQuery: &armsecurityinsight.InsightQueryItemPropertiesTableQuery{
							ColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem{
								{
									Header:          to.Ptr("Resource Type"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeString),
									SupportDeepLink: to.Ptr(false),
								},
								{
									Header:          to.Ptr("Distinct Resources"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(true),
								},
								{
									Header:          to.Ptr("Total Resources"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(true),
								},
								{
									Header:          to.Ptr("IPAddress(es)"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeString),
									SupportDeepLink: to.Ptr(false),
								}},
							QueriesDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem{
								{
									Filter: to.Ptr("where Operation =~ 'FileUploaded'"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("DistinctResources"),
										},
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("TotalResources"),
										}},
									Project:   to.Ptr("project Title = Operation, DistinctResources, TotalResources, IPAddresses = case(array_length(IPAddresses) == 1, tostring(IPAddresses[0]), array_length(IPAddresses) > 1, 'Many', 'None')"),
									Summarize: to.Ptr("summarize DistinctResources = dcount(SourceFileName), TotalResources = count(SourceFileName), IPAddresses = make_set(ClientIP) by Operation"),
								},
								{
									Filter: to.Ptr("where Operation =~ 'FileDownloaded'"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("DistinctResources"),
										},
										{
											Query:         to.Ptr("{{BaseQuery}} | "),
											ProjectedName: to.Ptr("TotalResources"),
										}},
									Project:   to.Ptr("project Title = Operation, DistinctResources, TotalResources, IPAddresses = case(array_length(IPAddresses) == 1, tostring(IPAddresses[0]), array_length(IPAddresses) > 1, 'Many', 'None')"),
									Summarize: to.Ptr("summarize DistinctResources = dcount(SourceFileName), TotalResources = count(SourceFileName), IPAddresses = make_set(ClientIP) by Operation"),
								}},
						},
					},
				},
				&armsecurityinsight.InsightQueryItem{
					Name: to.Ptr("cae8d0aa-aa45-4d53-8d88-17dd64ffd4e4"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities/queries"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/e1d3d618-e11f-478b-98e3-bb381539a8e1/queries/cae8d0aa-aa45-4d53-8d88-17dd64ffd4e4"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryKindInsight),
					Properties: &armsecurityinsight.InsightQueryItemProperties{
						DataTypes: []*armsecurityinsight.EntityQueryItemPropertiesDataTypesItem{
							{
								DataType: to.Ptr("SigninLogs"),
							}},
						EntitiesFilter:  map[string]interface{}{},
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeAccount),
						RequiredInputFieldsSets: [][]*string{
							{
								to.Ptr("Account_Name"),
								to.Ptr("Account_UPNSuffix")},
							{
								to.Ptr("Account_AADUserId")}},
						Description: to.Ptr("Highlight Azure sign-in results by the user principal with anomalously high count compared to those observed in the preceding 14 days."),
						AdditionalQuery: &armsecurityinsight.InsightQueryItemPropertiesAdditionalQuery{
							Query: to.Ptr("make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by ResultDescription \n| extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey') \n| extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore\n| mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime)) \n| extend count1=count_\n| mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) ) \n| where totAnomalies < maxAnomalies\n| extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount) \n| where maxAnomalyScorePost > AScoreThresh \n| order by maxAnomalyScorePost desc \n| project ResultDescription, expectedCount=round(postExpectedCount,2), actualCount=postActualCount, anomalyScore=round(postAnomalyScore,2)\n"),
							Text:  to.Ptr("Query all anomalous sign-in results"),
						},
						BaseQuery: to.Ptr("let AScoreThresh=3; \nlet maxAnomalies=3; \nlet BeforeRange = 12d; \nlet EndTime=todatetime('{{EndTimeUTC}}');\nlet StartTime = todatetime('{{StartTimeUTC}}'); \nlet numDays = tolong((EndTime-StartTime)/1d); \nlet userData = (v_Account_Name:string, v_Account_UPNSuffix:string, v_Account_AADUserId:string) { \n   SigninLogs \n   | where TimeGenerated between ((StartTime-BeforeRange) .. EndTime)\n   | extend splitUserId=split(UserPrincipalName, '@')\n   | extend Account_Name = tostring(splitUserId[0]), Account_UPNSuffix = tostring(splitUserId[1])\n   | where (Account_Name =~ v_Account_Name and Account_UPNSuffix =~ v_Account_UPNSuffix) or UserId =~ v_Account_AADUserId };\nuserData('CTFFUser4', 'seccxp.ninja', '')\n"),
						ChartQuery: map[string]interface{}{
							"type": "LineChart",
							"dataSets": []interface{}{
								map[string]interface{}{
									"legendColumnName": "ResultDescription",
									"query":            "make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by ResultDescription \n| extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey') \n| extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore\n| mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime)) \n| extend count1=count_ \n| mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) ) \n| where totAnomalies < maxAnomalies \n| extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,round(postExpectedCount,2)) \n| where maxAnomalyScorePost > AScoreThresh \n| order by maxAnomalyScorePost desc \n| take 1 \n| project ResultDescription, TimeGenerated, count_ \n| mvexpand TimeGenerated, count_ \n| project todatetime(TimeGenerated), toint(count_), ResultDescription \n",
									"xColumnName":      "TimeGenerated",
									"yColumnName":      "count_",
								},
							},
							"title": "Anomalous sign-in result timeline",
						},
						DefaultTimeRange: &armsecurityinsight.InsightQueryItemPropertiesDefaultTimeRange{
							AfterRange:  to.Ptr("0d"),
							BeforeRange: to.Ptr("1d"),
						},
						DisplayName: to.Ptr("Anomalously high Azure sign-in result count"),
						ReferenceTimeRange: &armsecurityinsight.InsightQueryItemPropertiesReferenceTimeRange{
							BeforeRange: to.Ptr("12d"),
						},
						TableQuery: &armsecurityinsight.InsightQueryItemPropertiesTableQuery{
							ColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem{
								{
									Header:          to.Ptr("Result Description"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeString),
									SupportDeepLink: to.Ptr(true),
								},
								{
									Header:          to.Ptr("Expected Count"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(false),
								},
								{
									Header:          to.Ptr("Actual Count"),
									OutputType:      to.Ptr(armsecurityinsight.OutputTypeNumber),
									SupportDeepLink: to.Ptr(false),
								}},
							QueriesDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem{
								{
									Filter: to.Ptr("make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by ResultDescription \n| extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey') \n| extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore\n| mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime)) \n| extend count1=count_ \n| mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) ) \n| where totAnomalies < maxAnomalies \n| extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount) \n| where maxAnomalyScorePost > AScoreThresh \n| order by maxAnomalyScorePost desc\n"),
									LinkColumnsDefinitions: []*armsecurityinsight.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem{
										{
											Query:         to.Ptr("{{BaseQuery}} \n| where TimeGenerated between (StartTime .. EndTime) \n| where ResultDescription == ''\n"),
											ProjectedName: to.Ptr("ResultDescription"),
										}},
									Project:   to.Ptr("project ResultDescription, expectedCount=round(postExpectedCount,2), actualCount=postActualCount, anomalyScore=round(postAnomalyScore,2)"),
									Summarize: to.Ptr("take 1"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.GetQueriesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GetQueriesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/GetQueries.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntities_GetInsights(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/insights/PostGetInsights.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Entity Insight"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.GetInsights(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		armsecurityinsight.EntityGetInsightsParameters{
			AddDefaultExtendedTimeRange: to.Ptr(false),
			EndTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.000Z"); return t }()),
			InsightQueryIDs: []*string{
				to.Ptr("cae8d0aa-aa45-4d53-8d88-17dd64ffd4e4")},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T00:00:00.000Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/insights/PostGetInsights.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityGetInsightsResponse{
			MetaData: &armsecurityinsight.GetInsightsResultsMetadata{
				Errors: []*armsecurityinsight.GetInsightsError{
					{
						ErrorMessage: to.Ptr("Internal server error"),
						Kind:         to.Ptr(armsecurityinsight.GetInsightsErrorKindInsight),
						QueryID:      to.Ptr("4a70a63d-25c4-6312-b73e-4f302a90c06a"),
					}},
				TotalCount: to.Ptr[int32](7),
			},
			Value: []*armsecurityinsight.EntityInsightItem{
				{
					ChartQueryResults: []*armsecurityinsight.InsightsTableResult{
						{
							Columns: []*armsecurityinsight.InsightsTableResultColumnsItem{
								{
									Name: to.Ptr("TimeGenerated"),
									Type: to.Ptr("datetime"),
								},
								{
									Name: to.Ptr("Count"),
									Type: to.Ptr("long"),
								},
								{
									Name: to.Ptr("Legend"),
									Type: to.Ptr("string"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("2021-09-01T00:00:00.000Z"),
									to.Ptr("55"),
									to.Ptr("SomeLegend")}},
						}},
					QueryID: to.Ptr("e29ee1ef-7445-455e-85f1-269f2d536d61"),
					QueryTimeInterval: &armsecurityinsight.EntityInsightItemQueryTimeInterval{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T23:35:20Z"); return t }()),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T23:35:20Z"); return t }()),
					},
					TableQueryResults: &armsecurityinsight.InsightsTableResult{
						Columns: []*armsecurityinsight.InsightsTableResultColumnsItem{
							{
								Name: to.Ptr("Title"),
								Type: to.Ptr("string"),
							},
							{
								Name: to.Ptr("NameCount"),
								Type: to.Ptr("long"),
							},
							{
								Name: to.Ptr("SIDCount"),
								Type: to.Ptr("long"),
							},
							{
								Name: to.Ptr("InternalOrder"),
								Type: to.Ptr("long"),
							},
							{
								Name: to.Ptr("Index"),
								Type: to.Ptr("long"),
							}},
						Rows: [][]*string{
							{
								to.Ptr("MyTitle"),
								to.Ptr("15"),
								to.Ptr("SID"),
								to.Ptr("1"),
								to.Ptr("1")}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EntityGetInsightsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EntityGetInsightsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/insights/PostGetInsights.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntitiesGetTimeline_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/timeline/PostTimelineEntity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Entity timeline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesGetTimelineClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.List(ctx,
		"myRg",
		"myWorkspace",
		"e1d3d618-e11f-478b-98e3-bb381539a8e1",
		armsecurityinsight.EntityTimelineParameters{
			EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.000Z"); return t }()),
			NumberOfBucket: to.Ptr[int32](4),
			StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T00:00:00.000Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/timeline/PostTimelineEntity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityTimelineResponse{
			MetaData: &armsecurityinsight.TimelineResultsMetadata{
				Aggregations: []*armsecurityinsight.TimelineAggregation{
					{
						Count: to.Ptr[int32](4),
						Kind:  to.Ptr(armsecurityinsight.EntityTimelineKindActivity),
					},
					{
						Count: to.Ptr[int32](2),
						Kind:  to.Ptr(armsecurityinsight.EntityTimelineKindSecurityAlert),
					}},
				Errors: []*armsecurityinsight.TimelineError{
					{
						ErrorMessage: to.Ptr("syntax error"),
						Kind:         to.Ptr(armsecurityinsight.EntityTimelineKindActivity),
						QueryID:      to.Ptr("11067f9f-d6a7-4488-887f-0ba564268879"),
					},
					{
						ErrorMessage: to.Ptr("internal server error"),
						Kind:         to.Ptr(armsecurityinsight.EntityTimelineKindSecurityAlert),
					}},
				TotalCount: to.Ptr[int32](6),
			},
			Value: []armsecurityinsight.EntityTimelineItemClassification{
				&armsecurityinsight.SecurityAlertTimelineItem{
					Kind:            to.Ptr(armsecurityinsight.EntityTimelineKindSecurityAlert),
					Description:     to.Ptr("The alert description"),
					AlertType:       to.Ptr("4467341f-fb73-4f99-a9b3-29473532cf5a_c93bf33e-055e-4972-9e7d-f84fe3fb61ae"),
					AzureResourceID: to.Ptr("4467341f-fb73-4f99-a9b3-29473532cf5a_bf7c3a2f-b743-6410-3ff0-ec64b5995d50"),
					DisplayName:     to.Ptr("Alert display name"),
					EndTimeUTC:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T23:31:28.02Z"); return t }()),
					ProductName:     to.Ptr("Azure Sentinel"),
					Severity:        to.Ptr(armsecurityinsight.AlertSeverityMedium),
					StartTimeUTC:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T23:32:28.01Z"); return t }()),
					TimeGenerated:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T23:37:25.8136594Z"); return t }()),
				},
				&armsecurityinsight.ActivityTimelineItem{
					Kind:                 to.Ptr(armsecurityinsight.EntityTimelineKindActivity),
					BucketEndTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T23:31:28.02Z"); return t }()),
					BucketStartTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T21:31:28.02Z"); return t }()),
					Content:              to.Ptr("he user has deleted the account 3 time(s)"),
					FirstActivityTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T21:35:28.02Z"); return t }()),
					LastActivityTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-01T21:35:28.02Z"); return t }()),
					QueryID:              to.Ptr("e0459780-ac9d-4b72-8bd4-fecf6b46a0a1"),
					Title:                to.Ptr("The user has deleted an account"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EntityTimelineResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EntityTimelineResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/timeline/PostTimelineEntity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntitiesRelations_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/relations/GetAllEntityRelations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all relations of an entity."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntitiesRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		&armsecurityinsight.EntitiesRelationsClientListOptions{Filter: nil,
			Orderby:   nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/relations/GetAllEntityRelations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.RelationList{
			Value: []*armsecurityinsight.Relation{
				{
					Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Type: to.Ptr("Microsoft.SecurityInsights/entities/relations"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/afbd324f-6c48-459c-8710-8d1e1cd03812/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
					Properties: &armsecurityinsight.RelationProperties{
						RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/2216d0e1-91e3-4902-89fd-d2df8c535096"),
						RelatedResourceName: to.Ptr("2216d0e1-91e3-4902-89fd-d2df8c535096"),
						RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/incidents"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RelationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RelationList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/relations/GetAllEntityRelations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntityRelations_GetRelation(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/relations/GetEntityRelationByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an entity relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.GetRelation(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/relations/GetEntityRelationByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Relation{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/entities/relations"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/afbd324f-6c48-459c-8710-8d1e1cd03812/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/2216d0e1-91e3-4902-89fd-d2df8c535096"),
				RelatedResourceName: to.Ptr("2216d0e1-91e3-4902-89fd-d2df8c535096"),
				RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/incidents"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Relation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Relation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entities/relations/GetEntityRelationByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetIncidents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all incidents."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		&armsecurityinsight.IncidentsClientListOptions{Filter: nil,
			Orderby:   to.Ptr("properties/createdTimeUtc desc"),
			Top:       to.Ptr[int32](1),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetIncidents.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.IncidentList{
			Value: []*armsecurityinsight.Incident{
				{
					Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Type: to.Ptr("Microsoft.SecurityInsights/incidents"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Properties: &armsecurityinsight.IncidentProperties{
						Description: to.Ptr("This is a demo incident"),
						AdditionalData: &armsecurityinsight.IncidentAdditionalData{
							AlertProductNames: []*string{},
							AlertsCount:       to.Ptr[int32](0),
							BookmarksCount:    to.Ptr[int32](0),
							CommentsCount:     to.Ptr[int32](3),
							Tactics: []*armsecurityinsight.AttackTactic{
								to.Ptr(armsecurityinsight.AttackTacticPersistence)},
						},
						Classification:        to.Ptr(armsecurityinsight.IncidentClassificationFalsePositive),
						ClassificationComment: to.Ptr("Not a malicious activity"),
						ClassificationReason:  to.Ptr(armsecurityinsight.IncidentClassificationReasonIncorrectAlertLogic),
						CreatedTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
						FirstActivityTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:00:30Z"); return t }()),
						IncidentNumber:        to.Ptr[int32](3177),
						IncidentURL:           to.Ptr("https://portal.azure.com/#asset/Microsoft_Azure_Security_Insights/Incident/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
						Labels:                []*armsecurityinsight.IncidentLabel{},
						LastActivityTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:05:30Z"); return t }()),
						LastModifiedTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
						Owner: &armsecurityinsight.IncidentOwnerInfo{
							AssignedTo:        to.Ptr("john doe"),
							Email:             to.Ptr("john.doe@contoso.com"),
							ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
							OwnerType:         to.Ptr(armsecurityinsight.OwnerTypeUser),
							UserPrincipalName: to.Ptr("john@contoso.com"),
						},
						ProviderIncidentID: to.Ptr("3177"),
						ProviderName:       to.Ptr("Azure Sentinel"),
						RelatedAnalyticRuleIDs: []*string{
							to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/fab3d2d4-747f-46a7-8ef0-9c0be8112bf7"),
							to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/8deb8303-e94d-46ff-96e0-5fd94b33df1a")},
						Severity: to.Ptr(armsecurityinsight.IncidentSeverityHigh),
						Status:   to.Ptr(armsecurityinsight.IncidentStatusClosed),
						Title:    to.Ptr("My incident"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IncidentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IncidentList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetIncidents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetIncidentById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incident."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetIncidentById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Incident{
			Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.IncidentProperties{
				Description: to.Ptr("This is a demo incident"),
				AdditionalData: &armsecurityinsight.IncidentAdditionalData{
					AlertProductNames: []*string{},
					AlertsCount:       to.Ptr[int32](0),
					BookmarksCount:    to.Ptr[int32](0),
					CommentsCount:     to.Ptr[int32](3),
					Tactics: []*armsecurityinsight.AttackTactic{
						to.Ptr(armsecurityinsight.AttackTacticInitialAccess),
						to.Ptr(armsecurityinsight.AttackTacticPersistence)},
				},
				Classification:        to.Ptr(armsecurityinsight.IncidentClassificationFalsePositive),
				ClassificationComment: to.Ptr("Not a malicious activity"),
				ClassificationReason:  to.Ptr(armsecurityinsight.IncidentClassificationReasonInaccurateData),
				CreatedTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
				FirstActivityTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:00:30Z"); return t }()),
				IncidentNumber:        to.Ptr[int32](3177),
				IncidentURL:           to.Ptr("https://portal.azure.com/#asset/Microsoft_Azure_Security_Insights/Incident/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Labels:                []*armsecurityinsight.IncidentLabel{},
				LastActivityTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:05:30Z"); return t }()),
				LastModifiedTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
				Owner: &armsecurityinsight.IncidentOwnerInfo{
					AssignedTo:        to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					OwnerType:         to.Ptr(armsecurityinsight.OwnerTypeUser),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				ProviderIncidentID: to.Ptr("3177"),
				ProviderName:       to.Ptr("Azure Sentinel"),
				RelatedAnalyticRuleIDs: []*string{
					to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/fab3d2d4-747f-46a7-8ef0-9c0be8112bf7")},
				Severity: to.Ptr(armsecurityinsight.IncidentSeverityHigh),
				Status:   to.Ptr(armsecurityinsight.IncidentStatusClosed),
				Title:    to.Ptr("My incident"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Incident) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Incident)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetIncidentById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/CreateIncident.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an incident."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		armsecurityinsight.Incident{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.IncidentProperties{
				Description:           to.Ptr("This is a demo incident"),
				Classification:        to.Ptr(armsecurityinsight.IncidentClassificationFalsePositive),
				ClassificationComment: to.Ptr("Not a malicious activity"),
				ClassificationReason:  to.Ptr(armsecurityinsight.IncidentClassificationReasonIncorrectAlertLogic),
				FirstActivityTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:00:30Z"); return t }()),
				LastActivityTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:05:30Z"); return t }()),
				Owner: &armsecurityinsight.IncidentOwnerInfo{
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				Severity: to.Ptr(armsecurityinsight.IncidentSeverityHigh),
				Status:   to.Ptr(armsecurityinsight.IncidentStatusClosed),
				Title:    to.Ptr("My incident"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/CreateIncident.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Incident{
			Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0001\""),
			Properties: &armsecurityinsight.IncidentProperties{
				Description: to.Ptr("This is a demo incident"),
				AdditionalData: &armsecurityinsight.IncidentAdditionalData{
					AlertProductNames: []*string{},
					AlertsCount:       to.Ptr[int32](0),
					BookmarksCount:    to.Ptr[int32](0),
					CommentsCount:     to.Ptr[int32](3),
					Tactics:           []*armsecurityinsight.AttackTactic{},
				},
				Classification:        to.Ptr(armsecurityinsight.IncidentClassificationFalsePositive),
				ClassificationComment: to.Ptr("Not a malicious activity"),
				ClassificationReason:  to.Ptr(armsecurityinsight.IncidentClassificationReasonIncorrectAlertLogic),
				CreatedTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
				FirstActivityTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:00:30Z"); return t }()),
				IncidentNumber:        to.Ptr[int32](3177),
				IncidentURL:           to.Ptr("https://portal.azure.com/#asset/Microsoft_Azure_Security_Insights/Incident/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Labels:                []*armsecurityinsight.IncidentLabel{},
				LastActivityTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:05:30Z"); return t }()),
				LastModifiedTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
				Owner: &armsecurityinsight.IncidentOwnerInfo{
					AssignedTo:        to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					OwnerType:         to.Ptr(armsecurityinsight.OwnerTypeUser),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				ProviderIncidentID:     to.Ptr("3177"),
				ProviderName:           to.Ptr("Azure Sentinel"),
				RelatedAnalyticRuleIDs: []*string{},
				Severity:               to.Ptr(armsecurityinsight.IncidentSeverityHigh),
				Status:                 to.Ptr(armsecurityinsight.IncidentStatusClosed),
				Title:                  to.Ptr("My incident"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Incident) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Incident)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/CreateIncident.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/DeleteIncident.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an incident."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/DeleteIncident.json: %v", err)
	}
}

func TestIncidents_CreateTeam(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/CreateTeam.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates incident teams group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("9023f5b5-df22-4313-8fbf-b4b75af8a6d9", cred, &options)
	res, err := client.CreateTeam(ctx,
		"ambawolvese5resourcegroup",
		"AmbaE5WestCentralUS",
		"69a30280-6a4c-4aa7-9af0-5d63f335d600",
		armsecurityinsight.TeamProperties{
			TeamDescription: to.Ptr("Team description"),
			TeamName:        to.Ptr("Team name"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/CreateTeam.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.TeamInformation{
			Name:                to.Ptr("Team name"),
			Description:         to.Ptr("Team description"),
			PrimaryChannelURL:   to.Ptr("https://teams.microsoft.com/l/team/19:80bf3b25485b4067b7d2dc4eec9e1578%40thread.tacv2/conversations?groupId=99978838-9bda-4ad4-8f93-4cf7ebc50ca5&tenantId=5b5a146c-eba8-46af-96f8-e31b50d15a3f"),
			TeamCreationTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-15T17:08:21.9954238+02:00"); return t }()),
			TeamID:              to.Ptr("99978838-9bda-4ad4-8f93-4cf7ebc50ca5"),
		}
		if !reflect.DeepEqual(exampleRes, res.TeamInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TeamInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/CreateTeam.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_ListAlerts(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetAllIncidentAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all incident alerts."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.ListAlerts(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetAllIncidentAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.IncidentAlertList{
			Value: []*armsecurityinsight.SecurityAlert{
				{
					Name: to.Ptr("baa8a239-6fde-4ab7-a093-d09f7b75c58c"),
					Type: to.Ptr("Microsoft.SecurityInsights/Entities"),
					ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRG/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/Entities/baa8a239-6fde-4ab7-a093-d09f7b75c58c"),
					Kind: to.Ptr(armsecurityinsight.EntityKindSecurityAlert),
					Properties: &armsecurityinsight.SecurityAlertProperties{
						AdditionalData: map[string]interface{}{
							"AlertMessageEnqueueTime": "2020-07-20T18:21:57.304Z",
						},
						FriendlyName:      to.Ptr("myAlert"),
						AlertDisplayName:  to.Ptr("myAlert"),
						AlertType:         to.Ptr("myAlert"),
						ConfidenceLevel:   to.Ptr(armsecurityinsight.ConfidenceLevelUnknown),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-20T18:21:53.6158361Z"); return t }()),
						ProcessingEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-20T18:21:53.6158361Z"); return t }()),
						ProductName:       to.Ptr("Azure Security Center"),
						ResourceIdentifiers: []interface{}{
							map[string]interface{}{
								"type":           "LogAnalytics",
								"resourceGroup":  "myRG",
								"subscriptionId": "bd794837-4d29-4647-9105-6339bfdb4e6a",
								"workspaceId":    "c8c99641-985d-4e4e-8e91-fb3466cd0e5b",
							}},
						Severity:      to.Ptr(armsecurityinsight.AlertSeverityLow),
						StartTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-20T18:21:53.6158361Z"); return t }()),
						Status:        to.Ptr(armsecurityinsight.AlertStatusNew),
						SystemAlertID: to.Ptr("baa8a239-6fde-4ab7-a093-d09f7b75c58c"),
						Tactics:       []*armsecurityinsight.AttackTactic{},
						TimeGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-20T18:21:53.6158361Z"); return t }()),
						VendorName:    to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IncidentAlertList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IncidentAlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetAllIncidentAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_ListBookmarks(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetAllIncidentBookmarks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all incident bookmarks."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.ListBookmarks(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetAllIncidentBookmarks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.IncidentBookmarkList{
			Value: []*armsecurityinsight.HuntingBookmark{
				{
					Name: to.Ptr("afbd324f-6c48-459c-8710-8d1e1cd03812"),
					Type: to.Ptr("Microsoft.SecurityInsights/Entities"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/afbd324f-6c48-459c-8710-8d1e1cd03812"),
					Kind: to.Ptr(armsecurityinsight.EntityKindBookmark),
					Properties: &armsecurityinsight.HuntingBookmarkProperties{
						AdditionalData: map[string]interface{}{
							"ETag":     "\"3b00acab-0000-0d00-0000-5f15e4ed0000\"",
							"EntityId": "afbd324f-6c48-459c-8710-8d1e1cd03812",
						},
						FriendlyName: to.Ptr("SecurityEvent - 868f40f4698d"),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T15:34:01.4265524+00:00"); return t }()),
						CreatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("user"),
							Email:    to.Ptr("user@microsoft.com"),
							ObjectID: to.Ptr("b03ca914-5eb6-45e5-9417-fe0797c372fd"),
						},
						DisplayName: to.Ptr("SecurityEvent - 868f40f4698d"),
						EventTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T15:34:01.4265524+00:00"); return t }()),
						Labels:      []*string{},
						Query:       to.Ptr("SecurityEvent\r\n| take 1\n"),
						QueryResult: to.Ptr("{\"TimeGenerated\":\"2020-05-24T01:24:25.67Z\",\"Account\":\"\\\\ADMINISTRATOR\",\"AccountType\":\"User\",\"Computer\":\"SecurityEvents\",\"EventSourceName\":\"Microsoft-Windows-Security-Auditing\",\"Channel\":\"Security\",\"Task\":12544,\"Level\":\"16\",\"EventID\":4625,\"Activity\":\"4625 - An account failed to log on.\",\"AuthenticationPackageName\":\"NTLM\",\"FailureReason\":\"%%2313\",\"IpAddress\":\"176.113.115.73\",\"IpPort\":\"0\",\"LmPackageName\":\"-\",\"LogonProcessName\":\"NtLmSsp \",\"LogonType\":3,\"LogonTypeName\":\"3 - Network\",\"Process\":\"-\",\"ProcessId\":\"0x0\",\"__entityMapping\":{\"\\\\ADMINISTRATOR\":\"Account\",\"SecurityEvents\":\"Host\"}}"),
						Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T15:34:01.4265524+00:00"); return t }()),
						UpdatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("user"),
							Email:    to.Ptr("user@microsoft.com"),
							ObjectID: to.Ptr("b03ca914-5eb6-45e5-9417-fe0797c372fd"),
						},
					},
				},
				{
					Name: to.Ptr("bbbd324f-6c48-459c-8710-8d1e1cd03812"),
					Type: to.Ptr("Microsoft.SecurityInsights/Entities"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/bbbd324f-6c48-459c-8710-8d1e1cd03812"),
					Kind: to.Ptr(armsecurityinsight.EntityKindBookmark),
					Properties: &armsecurityinsight.HuntingBookmarkProperties{
						AdditionalData: map[string]interface{}{
							"ETag":     "\"3b00acab-0000-0d00-0000-5f15e4ed0000\"",
							"EntityId": "afbd324f-6c48-459c-8710-8d1e1cd03812",
						},
						FriendlyName: to.Ptr("SecurityEvent - 868f40f4698d"),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T15:34:01.4265524+00:00"); return t }()),
						CreatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("user"),
							Email:    to.Ptr("user@microsoft.com"),
							ObjectID: to.Ptr("303ca914-5eb6-45e5-9417-fe0797c372fd"),
						},
						DisplayName: to.Ptr("SecurityEvent - 868f40f4698d"),
						EventTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T15:34:01.4265524+00:00"); return t }()),
						Labels:      []*string{},
						Query:       to.Ptr("SecurityEvent\r\n| take 1\n"),
						QueryResult: to.Ptr("{\"TimeGenerated\":\"2020-05-24T01:24:25.67Z\",\"Account\":\"\\\\ADMINISTRATOR\",\"AccountType\":\"User\",\"Computer\":\"SecurityEvents\",\"EventSourceName\":\"Microsoft-Windows-Security-Auditing\",\"Channel\":\"Security\",\"Task\":12544,\"Level\":\"16\",\"EventID\":4625,\"Activity\":\"4625 - An account failed to log on.\",\"AuthenticationPackageName\":\"NTLM\",\"FailureReason\":\"%%2313\",\"IpAddress\":\"176.113.115.73\",\"IpPort\":\"0\",\"LmPackageName\":\"-\",\"LogonProcessName\":\"NtLmSsp \",\"LogonType\":3,\"LogonTypeName\":\"3 - Network\",\"Process\":\"-\",\"ProcessId\":\"0x0\",\"__entityMapping\":{\"\\\\ADMINISTRATOR\":\"Account\",\"SecurityEvents\":\"Host\"}}"),
						Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T15:34:01.4265524+00:00"); return t }()),
						UpdatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("user"),
							Email:    to.Ptr("user@microsoft.com"),
							ObjectID: to.Ptr("b03ca914-5eb6-45e5-9417-fe0797c372fd"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IncidentBookmarkList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IncidentBookmarkList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/GetAllIncidentBookmarks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidents_ListEntities(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/entities/GetAllIncidentEntities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all incident related entities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.ListEntities(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/entities/GetAllIncidentEntities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.IncidentEntitiesResponse{
			Entities: []armsecurityinsight.EntityClassification{
				&armsecurityinsight.AccountEntity{
					Name: to.Ptr("e1d3d618-e11f-478b-98e3-bb381539a8e1"),
					Type: to.Ptr("Microsoft.SecurityInsights/Entities"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/Entities/e1d3d618-e11f-478b-98e3-bb381539a8e1"),
					Kind: to.Ptr(armsecurityinsight.EntityKindAccount),
					Properties: &armsecurityinsight.AccountEntityProperties{
						FriendlyName: to.Ptr("administrator"),
						AccountName:  to.Ptr("administrator"),
						NtDomain:     to.Ptr("domain"),
					},
				}},
			MetaData: []*armsecurityinsight.IncidentEntitiesResultsMetadata{
				{
					Count:      to.Ptr[int32](1),
					EntityKind: to.Ptr(armsecurityinsight.EntityKindAccount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IncidentEntitiesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IncidentEntitiesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/entities/GetAllIncidentEntities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentComments_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/GetAllIncidentComments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all incident comments."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentCommentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		&armsecurityinsight.IncidentCommentsClientListOptions{Filter: nil,
			Orderby:   nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/GetAllIncidentComments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.IncidentCommentList{
			Value: []*armsecurityinsight.IncidentComment{
				{
					Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Type: to.Ptr("Microsoft.SecurityInsights/incidents/comments"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5/comments/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
					Properties: &armsecurityinsight.IncidentCommentProperties{
						Author: &armsecurityinsight.ClientInfo{
							Name:              to.Ptr("john doe"),
							Email:             to.Ptr("john.doe@contoso.com"),
							ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
							UserPrincipalName: to.Ptr("john@contoso.com"),
						},
						CreatedTimeUTC:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
						LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-03T11:10:30Z"); return t }()),
						Message:             to.Ptr("Some message"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IncidentCommentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IncidentCommentList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/GetAllIncidentComments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentComments_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/GetIncidentCommentById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incident comment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentCommentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/GetIncidentCommentById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.IncidentComment{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents/comments"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5/comments/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.IncidentCommentProperties{
				Author: &armsecurityinsight.ClientInfo{
					Name:              to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				CreatedTimeUTC:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
				LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-03T11:10:30Z"); return t }()),
				Message:             to.Ptr("Some message"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IncidentComment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IncidentComment)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/GetIncidentCommentById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentComments_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/CreateIncidentComment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an incident comment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentCommentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		armsecurityinsight.IncidentComment{
			Properties: &armsecurityinsight.IncidentCommentProperties{
				Message: to.Ptr("Some message"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/CreateIncidentComment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.IncidentComment{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents/comments"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/73e01a99-5cd7-4139-a149-9f2736ff2ab5/comments/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.IncidentCommentProperties{
				Author: &armsecurityinsight.ClientInfo{
					Name:              to.Ptr("john doe"),
					Email:             to.Ptr("john.doe@contoso.com"),
					ObjectID:          to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
					UserPrincipalName: to.Ptr("john@contoso.com"),
				},
				CreatedTimeUTC:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-01T13:15:30Z"); return t }()),
				LastModifiedTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-03T11:10:30Z"); return t }()),
				Message:             to.Ptr("Some message"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IncidentComment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IncidentComment)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/CreateIncidentComment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentComments_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/DeleteIncidentComment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the incident comment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentCommentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/comments/DeleteIncidentComment.json: %v", err)
	}
}

func TestIncidentRelations_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/GetAllIncidentRelations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all incident relations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		&armsecurityinsight.IncidentRelationsClientListOptions{Filter: nil,
			Orderby:   nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/GetAllIncidentRelations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.RelationList{
			Value: []*armsecurityinsight.Relation{
				{
					Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Type: to.Ptr("Microsoft.SecurityInsights/incidents/relations"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
					Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
					Properties: &armsecurityinsight.RelationProperties{
						RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096"),
						RelatedResourceName: to.Ptr("2216d0e1-91e3-4902-89fd-d2df8c535096"),
						RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/bookmarks"),
					},
				},
				{
					Name: to.Ptr("9673a17d-8bc7-4ca6-88ee-38a4f3efc032"),
					Type: to.Ptr("Microsoft.SecurityInsights/incidents/relations"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812/relations/9673a17d-8bc7-4ca6-88ee-38a4f3efc032"),
					Etag: to.Ptr("6f714025-dd7c-46aa-b5d0-b9857488d060"),
					Properties: &armsecurityinsight.RelationProperties{
						RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entities/1dd267cd-8a1f-4f6f-b92c-da43ac8819af"),
						RelatedResourceKind: to.Ptr("SecurityAlert"),
						RelatedResourceName: to.Ptr("1dd267cd-8a1f-4f6f-b92c-da43ac8819af"),
						RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/entities"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RelationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RelationList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/GetAllIncidentRelations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentRelations_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/GetIncidentRelationByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incident relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/GetIncidentRelationByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Relation{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents/relations"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096"),
				RelatedResourceName: to.Ptr("2216d0e1-91e3-4902-89fd-d2df8c535096"),
				RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/bookmarks"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Relation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Relation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/GetIncidentRelationByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentRelations_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/CreateIncidentRelation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an incident relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		armsecurityinsight.Relation{
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID: to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/CreateIncidentRelation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Relation{
			Name: to.Ptr("4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Type: to.Ptr("Microsoft.SecurityInsights/incidents/relations"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/incidents/afbd324f-6c48-459c-8710-8d1e1cd03812/relations/4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014"),
			Etag: to.Ptr("190057d0-0000-0d00-0000-5c6f5adb0000"),
			Properties: &armsecurityinsight.RelationProperties{
				RelatedResourceID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/bookmarks/2216d0e1-91e3-4902-89fd-d2df8c535096"),
				RelatedResourceName: to.Ptr("2216d0e1-91e3-4902-89fd-d2df8c535096"),
				RelatedResourceType: to.Ptr("Microsoft.SecurityInsights/bookmarks"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Relation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Relation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/CreateIncidentRelation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIncidentRelations_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/DeleteIncidentRelation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the incident relation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewIncidentRelationsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"afbd324f-6c48-459c-8710-8d1e1cd03812",
		"4bb36b7b-26ff-4d1c-9cbe-0d8ab3da0014",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/incidents/relations/DeleteIncidentRelation.json: %v", err)
	}
}

func TestMetadata_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetAllMetadataOData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all metadata with OData filter/orderby/skip/top"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewMetadataClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		&armsecurityinsight.MetadataClientListOptions{Filter: nil,
			Orderby: nil,
			Top:     nil,
			Skip:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetAllMetadataOData.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.MetadataList{
			Value: []*armsecurityinsight.MetadataModel{
				{
					Name: to.Ptr("metadataName1"),
					Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
					ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName1"),
					Properties: &armsecurityinsight.MetadataProperties{
						ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
						Kind:      to.Ptr(armsecurityinsight.KindAnalyticsRule),
						ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName1"),
						Source: &armsecurityinsight.MetadataSource{
							Name:     to.Ptr("Contoso Solution 1.0"),
							Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
							SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
						},
						Version: to.Ptr("1.0.0.0"),
					},
				},
				{
					Name: to.Ptr("metadataName2"),
					Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
					ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName2"),
					Properties: &armsecurityinsight.MetadataProperties{
						ContentID: to.Ptr("f5160682-0e10-4e23-8fcf-df3df49c5522"),
						Kind:      to.Ptr(armsecurityinsight.KindAnalyticsRule),
						ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName2"),
						Source: &armsecurityinsight.MetadataSource{
							Name:     to.Ptr("Contoso Solution 1.0"),
							Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
							SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
						},
						Version: to.Ptr("1.0.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetadataList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetadataList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetAllMetadataOData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetAllMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all metadata."},
	})
	client = armsecurityinsight.NewMetadataClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager = client.List("myRg",
		"myWorkspace",
		&armsecurityinsight.MetadataClientListOptions{Filter: nil,
			Orderby: nil,
			Top:     nil,
			Skip:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetAllMetadata.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.MetadataList{
			Value: []*armsecurityinsight.MetadataModel{
				{
					Name: to.Ptr("metadataName1"),
					Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
					ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName1"),
					Properties: &armsecurityinsight.MetadataProperties{
						ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
						Kind:      to.Ptr(armsecurityinsight.KindAnalyticsRule),
						ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
						Source: &armsecurityinsight.MetadataSource{
							Name:     to.Ptr("Contoso Solution 1.0"),
							Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
							SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
						},
						Version: to.Ptr("1.0.0.0"),
					},
				},
				{
					Name: to.Ptr("metadataName2"),
					Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
					ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName2"),
					Properties: &armsecurityinsight.MetadataProperties{
						ContentID: to.Ptr("f5160682-0e10-4e23-8fcf-df3df49c5522"),
						Kind:      to.Ptr(armsecurityinsight.KindAnalyticsRule),
						ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName2"),
						Source: &armsecurityinsight.MetadataSource{
							Name:     to.Ptr("Contoso Solution 1.0"),
							Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
							SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
						},
						Version: to.Ptr("1.0.0.0"),
					},
				},
				{
					Name: to.Ptr("metadataName3"),
					Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
					ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.Insights/workbooks/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName3"),
					Properties: &armsecurityinsight.MetadataProperties{
						ContentID: to.Ptr("f593501d-ec01-4057-8146-a1de35c461ef"),
						Kind:      to.Ptr(armsecurityinsight.KindWorkbook),
						ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.Insights/workbooks/workbookName"),
						Source: &armsecurityinsight.MetadataSource{
							Name:     to.Ptr("Contoso Solution 1.0"),
							Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
							SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
						},
						Version: to.Ptr("1.0.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetadataList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetadataList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetAllMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetadata_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get single metadata by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewMetadataClient("2e1dc338-d04d-4443-b721-037eff4fdcac", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"metadataName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetMetadata.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.MetadataModel{
			Name: to.Ptr("metadataName"),
			Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
			ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName"),
			Properties: &armsecurityinsight.MetadataProperties{
				Author: &armsecurityinsight.MetadataAuthor{
					Name:  to.Ptr("User Name"),
					Email: to.Ptr("email@microsoft.com"),
				},
				Categories: &armsecurityinsight.MetadataCategories{
					Domains: []*string{
						to.Ptr("Application"),
						to.Ptr("Security – Insider Threat")},
					Verticals: []*string{
						to.Ptr("Healthcare")},
				},
				ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
				Dependencies: &armsecurityinsight.MetadataDependencies{
					Criteria: []*armsecurityinsight.MetadataDependencies{
						{
							Criteria: []*armsecurityinsight.MetadataDependencies{
								{
									ContentID: to.Ptr("045d06d0-ee72-4794-aba4-cf5646e4c756"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
								},
								{
									ContentID: to.Ptr("dbfcb2cc-d782-40ef-8d94-fe7af58a6f2d"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
								},
								{
									ContentID: to.Ptr("de4dca9b-eb37-47d6-a56f-b8b06b261593"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
									Version:   to.Ptr("2.0"),
								}},
							Operator: to.Ptr(armsecurityinsight.OperatorOR),
						},
						{
							ContentID: to.Ptr("31ee11cc-9989-4de8-b176-5e0ef5c4dbab"),
							Kind:      to.Ptr(armsecurityinsight.KindPlaybook),
							Version:   to.Ptr("1.0"),
						},
						{
							ContentID: to.Ptr("21ba424a-9438-4444-953a-7059539a7a1b"),
							Kind:      to.Ptr(armsecurityinsight.KindParser),
						}},
					Operator: to.Ptr(armsecurityinsight.OperatorAND),
				},
				FirstPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-05-18"); return t }()),
				Kind:             to.Ptr(armsecurityinsight.KindAnalyticsRule),
				LastPublishDate:  to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-05-18"); return t }()),
				ParentID:         to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
				Providers: []*string{
					to.Ptr("Amazon"),
					to.Ptr("Microsoft")},
				Source: &armsecurityinsight.MetadataSource{
					Name:     to.Ptr("Contoso Solution 1.0"),
					Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
					SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
				},
				Support: &armsecurityinsight.MetadataSupport{
					Name:  to.Ptr("Microsoft"),
					Email: to.Ptr("support@microsoft.com"),
					Link:  to.Ptr("https://support.microsoft.com/"),
					Tier:  to.Ptr(armsecurityinsight.SupportTierPartner),
				},
				Version: to.Ptr("1.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataModel)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/GetMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetadata_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/DeleteMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete metadata."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewMetadataClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"metadataName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/DeleteMetadata.json: %v", err)
	}
}

func TestMetadata_Create(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PutMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/update full metadata."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewMetadataClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Create(ctx,
		"myRg",
		"myWorkspace",
		"metadataName",
		armsecurityinsight.MetadataModel{
			Properties: &armsecurityinsight.MetadataProperties{
				Author: &armsecurityinsight.MetadataAuthor{
					Name:  to.Ptr("User Name"),
					Email: to.Ptr("email@microsoft.com"),
				},
				Categories: &armsecurityinsight.MetadataCategories{
					Domains: []*string{
						to.Ptr("Application"),
						to.Ptr("Security – Insider Threat")},
					Verticals: []*string{
						to.Ptr("Healthcare")},
				},
				ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
				Dependencies: &armsecurityinsight.MetadataDependencies{
					Criteria: []*armsecurityinsight.MetadataDependencies{
						{
							Criteria: []*armsecurityinsight.MetadataDependencies{
								{
									Name:      to.Ptr("Microsoft Defender for Endpoint"),
									ContentID: to.Ptr("045d06d0-ee72-4794-aba4-cf5646e4c756"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
								},
								{
									ContentID: to.Ptr("dbfcb2cc-d782-40ef-8d94-fe7af58a6f2d"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
								},
								{
									ContentID: to.Ptr("de4dca9b-eb37-47d6-a56f-b8b06b261593"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
									Version:   to.Ptr("2.0"),
								}},
							Operator: to.Ptr(armsecurityinsight.OperatorOR),
						},
						{
							ContentID: to.Ptr("31ee11cc-9989-4de8-b176-5e0ef5c4dbab"),
							Kind:      to.Ptr(armsecurityinsight.KindPlaybook),
							Version:   to.Ptr("1.0"),
						},
						{
							ContentID: to.Ptr("21ba424a-9438-4444-953a-7059539a7a1b"),
							Kind:      to.Ptr(armsecurityinsight.KindParser),
						}},
					Operator: to.Ptr(armsecurityinsight.OperatorAND),
				},
				FirstPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-05-18"); return t }()),
				Kind:             to.Ptr(armsecurityinsight.KindAnalyticsRule),
				LastPublishDate:  to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-05-18"); return t }()),
				ParentID:         to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
				Providers: []*string{
					to.Ptr("Amazon"),
					to.Ptr("Microsoft")},
				Source: &armsecurityinsight.MetadataSource{
					Name:     to.Ptr("Contoso Solution 1.0"),
					Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
					SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
				},
				Support: &armsecurityinsight.MetadataSupport{
					Name:  to.Ptr("Microsoft"),
					Email: to.Ptr("support@microsoft.com"),
					Link:  to.Ptr("https://support.microsoft.com/"),
					Tier:  to.Ptr(armsecurityinsight.SupportTierPartner),
				},
				Version: to.Ptr("1.0.0.0"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PutMetadata.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.MetadataModel{
			Name: to.Ptr("metadataName"),
			Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
			ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName"),
			Properties: &armsecurityinsight.MetadataProperties{
				Author: &armsecurityinsight.MetadataAuthor{
					Name:  to.Ptr("User Name"),
					Email: to.Ptr("email@microsoft.com"),
				},
				Categories: &armsecurityinsight.MetadataCategories{
					Domains: []*string{
						to.Ptr("Application"),
						to.Ptr("Security – Insider Threat")},
					Verticals: []*string{
						to.Ptr("Healthcare")},
				},
				ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
				Dependencies: &armsecurityinsight.MetadataDependencies{
					Criteria: []*armsecurityinsight.MetadataDependencies{
						{
							Criteria: []*armsecurityinsight.MetadataDependencies{
								{
									ContentID: to.Ptr("045d06d0-ee72-4794-aba4-cf5646e4c756"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
								},
								{
									ContentID: to.Ptr("dbfcb2cc-d782-40ef-8d94-fe7af58a6f2d"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
								},
								{
									ContentID: to.Ptr("de4dca9b-eb37-47d6-a56f-b8b06b261593"),
									Kind:      to.Ptr(armsecurityinsight.KindDataConnector),
									Version:   to.Ptr("2.0"),
								}},
							Operator: to.Ptr(armsecurityinsight.OperatorOR),
						},
						{
							ContentID: to.Ptr("31ee11cc-9989-4de8-b176-5e0ef5c4dbab"),
							Kind:      to.Ptr(armsecurityinsight.KindPlaybook),
							Version:   to.Ptr("1.0"),
						},
						{
							ContentID: to.Ptr("21ba424a-9438-4444-953a-7059539a7a1b"),
							Kind:      to.Ptr(armsecurityinsight.KindParser),
						}},
					Operator: to.Ptr(armsecurityinsight.OperatorAND),
				},
				FirstPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-05-18"); return t }()),
				Kind:             to.Ptr(armsecurityinsight.KindAnalyticsRule),
				LastPublishDate:  to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-05-18"); return t }()),
				ParentID:         to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
				Providers: []*string{
					to.Ptr("Amazon"),
					to.Ptr("Microsoft")},
				Source: &armsecurityinsight.MetadataSource{
					Name:     to.Ptr("Contoso Solution 1.0"),
					Kind:     to.Ptr(armsecurityinsight.SourceKindSolution),
					SourceID: to.Ptr("b688a130-76f4-4a07-bf57-762222a3cadf"),
				},
				Support: &armsecurityinsight.MetadataSupport{
					Name:  to.Ptr("Microsoft"),
					Email: to.Ptr("support@microsoft.com"),
					Link:  to.Ptr("https://support.microsoft.com/"),
					Tier:  to.Ptr(armsecurityinsight.SupportTierPartner),
				},
				Version: to.Ptr("1.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataModel)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PutMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PutMetadataMinimal.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/update minimal metadata."},
	})
	client = armsecurityinsight.NewMetadataClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Create(ctx,
		"myRg",
		"myWorkspace",
		"metadataName",
		armsecurityinsight.MetadataModel{
			Properties: &armsecurityinsight.MetadataProperties{
				ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
				Kind:      to.Ptr(armsecurityinsight.KindAnalyticsRule),
				ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PutMetadataMinimal.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.MetadataModel{
			Name: to.Ptr("metadataName"),
			Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
			ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName"),
			Properties: &armsecurityinsight.MetadataProperties{
				Kind:     to.Ptr(armsecurityinsight.KindAnalyticsRule),
				ParentID: to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataModel)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PutMetadataMinimal.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetadata_Update(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PatchMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update metadata."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewMetadataClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Update(ctx,
		"myRg",
		"myWorkspace",
		"metadataName",
		armsecurityinsight.MetadataPatch{
			Properties: &armsecurityinsight.MetadataPropertiesPatch{
				Author: &armsecurityinsight.MetadataAuthor{
					Name:  to.Ptr("User Name"),
					Email: to.Ptr("email@microsoft.com"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PatchMetadata.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.MetadataModel{
			Name: to.Ptr("metadataName"),
			Type: to.Ptr("Microsoft.SecurityInsights/metadata"),
			ID:   to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/metadata/metadataName"),
			Properties: &armsecurityinsight.MetadataProperties{
				Author: &armsecurityinsight.MetadataAuthor{
					Name:  to.Ptr("User Name"),
					Email: to.Ptr("email@microsoft.com"),
				},
				ContentID: to.Ptr("c00ee137-7475-47c8-9cce-ec6f0f1bedd0"),
				Kind:      to.Ptr(armsecurityinsight.KindAnalyticsRule),
				ParentID:  to.Ptr("/subscriptions/2e1dc338-d04d-4443-b721-037eff4fdcac/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/alertRules/ruleName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataModel)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/metadata/PatchMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSentinelOnboardingStates_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/GetSentinelOnboardingState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Sentinel onboarding state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSentinelOnboardingStatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/GetSentinelOnboardingState.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.SentinelOnboardingState{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.SecurityInsights/onboardingStates"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/onboardingStates/default"),
			Properties: &armsecurityinsight.SentinelOnboardingStateProperties{
				CustomerManagedKey: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SentinelOnboardingState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SentinelOnboardingState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/GetSentinelOnboardingState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSentinelOnboardingStates_Create(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/CreateSentinelOnboardingState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Sentinel onboarding state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSentinelOnboardingStatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Create(ctx,
		"myRg",
		"myWorkspace",
		"default",
		&armsecurityinsight.SentinelOnboardingStatesClientCreateOptions{SentinelOnboardingStateParameter: &armsecurityinsight.SentinelOnboardingState{
			Properties: &armsecurityinsight.SentinelOnboardingStateProperties{
				CustomerManagedKey: to.Ptr(false),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/CreateSentinelOnboardingState.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.SentinelOnboardingState{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.SecurityInsights/onboardingStates"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/onboardingStates/default"),
			Properties: &armsecurityinsight.SentinelOnboardingStateProperties{
				CustomerManagedKey: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SentinelOnboardingState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SentinelOnboardingState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/CreateSentinelOnboardingState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSentinelOnboardingStates_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/DeleteSentinelOnboardingState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Sentinel onboarding state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSentinelOnboardingStatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/DeleteSentinelOnboardingState.json: %v", err)
	}
}

func TestSentinelOnboardingStates_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/GetAllSentinelOnboardingStates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all Sentinel onboarding states"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSentinelOnboardingStatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.List(ctx,
		"myRg",
		"myWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/GetAllSentinelOnboardingStates.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.SentinelOnboardingStatesList{
			Value: []*armsecurityinsight.SentinelOnboardingState{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.SecurityInsights/onboardingStates"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/onboardingStates/default"),
					Properties: &armsecurityinsight.SentinelOnboardingStateProperties{
						CustomerManagedKey: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SentinelOnboardingStatesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SentinelOnboardingStatesList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/onboardingStates/GetAllSentinelOnboardingStates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductSettings_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/GetAllSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all settings."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewProductSettingsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.List(ctx,
		"myRg",
		"myWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/GetAllSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.SettingList{
			Value: []armsecurityinsight.SettingsClassification{
				&armsecurityinsight.EyesOn{
					Name: to.Ptr("EyesOn"),
					Type: to.Ptr("Microsoft.SecurityInsights/settings"),
					ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/workspaces/avdvirInt/providers/Microsoft.SecurityInsights/settings/EyesOn"),
					Kind: to.Ptr(armsecurityinsight.SettingKindEyesOn),
					Properties: &armsecurityinsight.EyesOnSettingsProperties{
						IsEnabled: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SettingList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/GetAllSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductSettings_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/GetEyesOnSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get EyesOn settings."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewProductSettingsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"EyesOn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/GetEyesOnSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ProductSettingsClientGetResponse{
			&armsecurityinsight.EyesOn{
				Name: to.Ptr("EyesOn"),
				Type: to.Ptr("Microsoft.SecurityInsights/settings"),
				ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/workspaces/avdvirInt/providers/Microsoft.SecurityInsights/settings/EyesOn"),
				Kind: to.Ptr(armsecurityinsight.SettingKindEyesOn),
				Properties: &armsecurityinsight.EyesOnSettingsProperties{
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/GetEyesOnSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductSettings_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/DeleteEyesOnSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete EyesOn settings."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewProductSettingsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"EyesOn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/DeleteEyesOnSetting.json: %v", err)
	}
}

func TestProductSettings_Update(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/UpdateEyesOnSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update EyesOn settings."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewProductSettingsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Update(ctx,
		"myRg",
		"myWorkspace",
		"EyesOn",
		&armsecurityinsight.EyesOn{
			Etag:       to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Kind:       to.Ptr(armsecurityinsight.SettingKindEyesOn),
			Properties: &armsecurityinsight.EyesOnSettingsProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/UpdateEyesOnSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ProductSettingsClientUpdateResponse{
			&armsecurityinsight.EyesOn{
				Name: to.Ptr("EyesOn"),
				Type: to.Ptr("Microsoft.SecurityInsights/settings"),
				ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/workspaces/avdvirInt/providers/Microsoft.SecurityInsights/settings/EyesOn"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.SettingKindEyesOn),
				Properties: &armsecurityinsight.EyesOnSettingsProperties{
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/settings/UpdateEyesOnSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControl_ListRepositories(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/repositories/GetRepositories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get repository list."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSourceControlClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.ListRepositories("myRg",
		"myWorkspace",
		armsecurityinsight.RepoTypeGithub,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/repositories/GetRepositories.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.RepoList{
			Value: []*armsecurityinsight.Repo{
				{
					Branches: []*string{
						to.Ptr("master"),
						to.Ptr("develop")},
					FullName: to.Ptr("reponame"),
					URL:      to.Ptr("https://api.github.com/repos/user/reponame"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RepoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RepoList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/repositories/GetRepositories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControls_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/GetSourceControls.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all source controls."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSourceControlsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/GetSourceControls.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.SourceControlList{
			Value: []*armsecurityinsight.SourceControl{
				{
					Name: to.Ptr("789e0c1f-4a3d-43ad-809c-e713b677b04a"),
					Type: to.Ptr("Microsoft.SecurityInsights/SourceControls"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/sourcecontrols/789e0c1f-4a3d-43ad-809c-e713b677b04a"),
					SystemData: &armsecurityinsight.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armsecurityinsight.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armsecurityinsight.CreatedByTypeUser),
					},
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Properties: &armsecurityinsight.SourceControlProperties{
						Description: to.Ptr("this is a source control"),
						ContentTypes: []*armsecurityinsight.ContentType{
							to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
							to.Ptr(armsecurityinsight.ContentTypeWorkbook)},
						DisplayName: to.Ptr("My Source Control"),
						ID:          to.Ptr("789e0c1f-4a3d-43ad-809c-e713b677b04a"),
						RepoType:    to.Ptr(armsecurityinsight.RepoTypeGithub),
						Repository: &armsecurityinsight.Repository{
							Branch:            to.Ptr("master"),
							DeploymentLogsURL: to.Ptr("https://github.com/user/repo/actions"),
							DisplayURL:        to.Ptr("https://github.com/user/repo"),
							PathMapping: []*armsecurityinsight.ContentPathMap{
								{
									Path:        to.Ptr("path/to/rules"),
									ContentType: to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
								},
								{
									Path:        to.Ptr("path/to/workbooks"),
									ContentType: to.Ptr(armsecurityinsight.ContentTypeWorkbook),
								}},
							URL: to.Ptr("https://github.com/user/repo"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SourceControlList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SourceControlList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/GetSourceControls.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControls_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/GetSourceControlById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a source control."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSourceControlsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"789e0c1f-4a3d-43ad-809c-e713b677b04a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/GetSourceControlById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.SourceControl{
			Name: to.Ptr("789e0c1f-4a3d-43ad-809c-e713b677b04a"),
			Type: to.Ptr("Microsoft.SecurityInsights/SourceControls"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/sourcecontrols/789e0c1f-4a3d-43ad-809c-e713b677b04a"),
			SystemData: &armsecurityinsight.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armsecurityinsight.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armsecurityinsight.CreatedByTypeUser),
			},
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.SourceControlProperties{
				Description: to.Ptr("this is a source control"),
				ContentTypes: []*armsecurityinsight.ContentType{
					to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
					to.Ptr(armsecurityinsight.ContentTypeWorkbook)},
				DisplayName: to.Ptr("My Source Control"),
				ID:          to.Ptr("789e0c1f-4a3d-43ad-809c-e713b677b04a"),
				RepoType:    to.Ptr(armsecurityinsight.RepoTypeGithub),
				Repository: &armsecurityinsight.Repository{
					Branch:            to.Ptr("master"),
					DeploymentLogsURL: to.Ptr("https://github.com/user/repo/actions"),
					DisplayURL:        to.Ptr("https://github.com/user/repo"),
					PathMapping: []*armsecurityinsight.ContentPathMap{
						{
							Path:        to.Ptr("path/to/rules"),
							ContentType: to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
						},
						{
							Path:        to.Ptr("path/to/workbooks"),
							ContentType: to.Ptr(armsecurityinsight.ContentTypeWorkbook),
						}},
					URL: to.Ptr("https://github.com/user/repo"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControl) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControl)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/GetSourceControlById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControls_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/DeleteSourceControl.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a source control."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSourceControlsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"789e0c1f-4a3d-43ad-809c-e713b677b04a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/DeleteSourceControl.json: %v", err)
	}
}

func TestSourceControls_Create(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/CreateSourceControl.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a source control."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewSourceControlsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Create(ctx,
		"myRg",
		"myWorkspace",
		"789e0c1f-4a3d-43ad-809c-e713b677b04a",
		armsecurityinsight.SourceControl{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.SourceControlProperties{
				Description: to.Ptr("This is a source control"),
				ContentTypes: []*armsecurityinsight.ContentType{
					to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
					to.Ptr(armsecurityinsight.ContentTypeWorkbook)},
				DisplayName: to.Ptr("My Source Control"),
				RepoType:    to.Ptr(armsecurityinsight.RepoTypeGithub),
				Repository: &armsecurityinsight.Repository{
					Branch:     to.Ptr("master"),
					DisplayURL: to.Ptr("https://github.com/user/repo"),
					PathMapping: []*armsecurityinsight.ContentPathMap{
						{
							Path:        to.Ptr("path/to/rules"),
							ContentType: to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
						},
						{
							Path:        to.Ptr("path/to/workbooks"),
							ContentType: to.Ptr(armsecurityinsight.ContentTypeWorkbook),
						}},
					URL: to.Ptr("https://github.com/user/repo"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/CreateSourceControl.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.SourceControl{
			Name: to.Ptr("789e0c1f-4a3d-43ad-809c-e713b677b04a"),
			Type: to.Ptr("Microsoft.SecurityInsights/SourceControls"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/sourcecontrols/789e0c1f-4a3d-43ad-809c-e713b677b04a"),
			SystemData: &armsecurityinsight.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armsecurityinsight.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armsecurityinsight.CreatedByTypeUser),
			},
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.SourceControlProperties{
				Description: to.Ptr("this is a source control"),
				ContentTypes: []*armsecurityinsight.ContentType{
					to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
					to.Ptr(armsecurityinsight.ContentTypeWorkbook)},
				DisplayName: to.Ptr("My Source Control"),
				ID:          to.Ptr("789e0c1f-4a3d-43ad-809c-e713b677b04a"),
				RepoType:    to.Ptr(armsecurityinsight.RepoTypeGithub),
				Repository: &armsecurityinsight.Repository{
					Branch:            to.Ptr("master"),
					DeploymentLogsURL: to.Ptr("https://github.com/user/repo/actions"),
					DisplayURL:        to.Ptr("https://github.com/user/repo"),
					PathMapping: []*armsecurityinsight.ContentPathMap{
						{
							Path:        to.Ptr("path/to/rules"),
							ContentType: to.Ptr(armsecurityinsight.ContentType("AnalyticRules")),
						},
						{
							Path:        to.Ptr("path/to/workbooks"),
							ContentType: to.Ptr(armsecurityinsight.ContentTypeWorkbook),
						}},
					URL: to.Ptr("https://github.com/user/repo"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControl) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControl)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/sourcecontrols/CreateSourceControl.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatchlists_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all watchlists."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlists.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.WatchlistList{
			Value: []*armsecurityinsight.Watchlist{
				{
					Name: to.Ptr("highValueAsset"),
					Type: to.Ptr("Microsoft.SecurityInsights/Watchlists"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/watchlists/highValueAsset"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Properties: &armsecurityinsight.WatchlistProperties{
						Description: to.Ptr("Watchlist from CSV content"),
						Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:54.7746089+00:00"); return t }()),
						CreatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("john doe"),
							Email:    to.Ptr("john@contoso.com"),
							ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
						},
						DefaultDuration: to.Ptr("P1279DT12H30M5S"),
						DisplayName:     to.Ptr("High Value Assets Watchlist"),
						IsDeleted:       to.Ptr(false),
						ItemsSearchKey:  to.Ptr("header1"),
						Labels: []*string{
							to.Ptr("Tag1"),
							to.Ptr("Tag2")},
						Provider: to.Ptr("Microsoft"),
						Source:   to.Ptr(armsecurityinsight.SourceLocalFile),
						TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
						Updated:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:57+00:00"); return t }()),
						UpdatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("john doe"),
							Email:    to.Ptr("john@contoso.com"),
							ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
						},
						WatchlistAlias: to.Ptr("highValueAsset"),
						WatchlistID:    to.Ptr("76d5a51f-ba1f-4038-9d22-59fda38dc017"),
						WatchlistType:  to.Ptr("watchlist"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WatchlistList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WatchlistList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatchlists_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistByAlias.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a watchlist."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistByAlias.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Watchlist{
			Name: to.Ptr("highValueAsset"),
			Type: to.Ptr("Microsoft.SecurityInsights/Watchlists"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/watchlists/highValueAsset"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.WatchlistProperties{
				Description: to.Ptr("Watchlist from CSV content"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:54.7746089+00:00"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				DefaultDuration: to.Ptr("P1279DT12H30M5S"),
				DisplayName:     to.Ptr("High Value Assets Watchlist"),
				IsDeleted:       to.Ptr(false),
				ItemsSearchKey:  to.Ptr("header1"),
				Labels: []*string{
					to.Ptr("Tag1"),
					to.Ptr("Tag2")},
				Provider: to.Ptr("Microsoft"),
				Source:   to.Ptr(armsecurityinsight.SourceLocalFile),
				TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
				Updated:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:57+00:00"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				WatchlistAlias: to.Ptr("highValueAsset"),
				WatchlistID:    to.Ptr("76d5a51f-ba1f-4038-9d22-59fda38dc017"),
				WatchlistType:  to.Ptr("watchlist"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Watchlist) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watchlist)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistByAlias.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatchlists_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/DeleteWatchlist.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a watchlist."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/DeleteWatchlist.json: %v", err)
	}
}

func TestWatchlists_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlistAndWatchlistItems.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a watchlist and bulk creates watchlist items."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		armsecurityinsight.Watchlist{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.WatchlistProperties{
				Description:         to.Ptr("Watchlist from CSV content"),
				ContentType:         to.Ptr("text/csv"),
				DisplayName:         to.Ptr("High Value Assets Watchlist"),
				ItemsSearchKey:      to.Ptr("header1"),
				NumberOfLinesToSkip: to.Ptr[int32](1),
				Provider:            to.Ptr("Microsoft"),
				RawContent:          to.Ptr("This line will be skipped\nheader1,header2\nvalue1,value2"),
				Source:              to.Ptr(armsecurityinsight.SourceLocalFile),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlistAndWatchlistItems.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Watchlist{
			Name: to.Ptr("highValueAsset"),
			Type: to.Ptr("Microsoft.SecurityInsights/Watchlists"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/watchlists/highValueAsset"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.WatchlistProperties{
				Description: to.Ptr("Watchlist from CSV content"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:54.7746089+00:00"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				DisplayName:    to.Ptr("High Value Assets Watchlist"),
				IsDeleted:      to.Ptr(false),
				ItemsSearchKey: to.Ptr("header1"),
				Provider:       to.Ptr("Microsoft"),
				Source:         to.Ptr(armsecurityinsight.SourceLocalFile),
				TenantID:       to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
				Updated:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:57+00:00"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				WatchlistAlias: to.Ptr("highValueAsset"),
				WatchlistID:    to.Ptr("76d5a51f-ba1f-4038-9d22-59fda38dc017"),
				WatchlistType:  to.Ptr("watchlist"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Watchlist) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watchlist)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlistAndWatchlistItems.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlist.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a watchlist."},
	})
	client = armsecurityinsight.NewWatchlistsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		armsecurityinsight.Watchlist{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.WatchlistProperties{
				Description:    to.Ptr("Watchlist from CSV content"),
				DisplayName:    to.Ptr("High Value Assets Watchlist"),
				ItemsSearchKey: to.Ptr("header1"),
				Provider:       to.Ptr("Microsoft"),
				Source:         to.Ptr(armsecurityinsight.SourceLocalFile),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlist.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.Watchlist{
			Name: to.Ptr("highValueAsset"),
			Type: to.Ptr("Microsoft.SecurityInsights/Watchlists"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalIinsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/watchlists/highValueAsset"),
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Properties: &armsecurityinsight.WatchlistProperties{
				Description: to.Ptr("Watchlist from CSV content"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:54.7746089+00:00"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				DisplayName:    to.Ptr("High Value Assets Watchlist"),
				IsDeleted:      to.Ptr(false),
				ItemsSearchKey: to.Ptr("header1"),
				Provider:       to.Ptr("Microsoft"),
				Source:         to.Ptr(armsecurityinsight.SourceLocalFile),
				TenantID:       to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
				Updated:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-28T00:26:57+00:00"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				WatchlistAlias: to.Ptr("highValueAsset"),
				WatchlistID:    to.Ptr("76d5a51f-ba1f-4038-9d22-59fda38dc017"),
				WatchlistType:  to.Ptr("watchlist"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Watchlist) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watchlist)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlist.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatchlistItems_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistItems.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all watchlist Items."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistItemsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		"highValueAsset",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistItems.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.WatchlistItemList{
			Value: []*armsecurityinsight.WatchlistItem{
				{
					Name: to.Ptr("fd37d325-7090-47fe-851a-5b5a00c3f576"),
					Type: to.Ptr("Microsoft.SecurityInsights/Watchlists/WatchlistItems"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/Watchlists/highValueAsset/WatchlistItems/fd37d325-7090-47fe-851a-5b5a00c3f576"),
					Etag: to.Ptr("\"f2089bfa-0000-0d00-0000-601c58b42021\""),
					Properties: &armsecurityinsight.WatchlistItemProperties{
						Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-04T12:27:32.3783333-08:00"); return t }()),
						CreatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("john doe"),
							Email:    to.Ptr("john@contoso.com"),
							ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
						},
						EntityMapping: map[string]interface{}{},
						IsDeleted:     to.Ptr(false),
						ItemsKeyValue: map[string]interface{}{
							"Header-1": "v1_1",
							"Header-2": "v1_2",
							"Header-3": "v1_3",
							"Header-4": "v1_4",
							"Header-5": "v1_5",
						},
						TenantID: to.Ptr("3f8901fe-63d9-4875-9ad5-9fb3b8105797"),
						Updated:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-04T12:27:32.3783333-08:00"); return t }()),
						UpdatedBy: &armsecurityinsight.UserInfo{
							Name:     to.Ptr("john doe"),
							Email:    to.Ptr("john@contoso.com"),
							ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
						},
						WatchlistItemID:   to.Ptr("fd37d325-7090-47fe-851a-5b5a00c3f576"),
						WatchlistItemType: to.Ptr("watchlist-item"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WatchlistItemList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WatchlistItemList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistItems.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatchlistItems_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistItemById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a watchlist item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistItemsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		"3f8901fe-63d9-4875-9ad5-9fb3b8105797",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistItemById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.WatchlistItem{
			Name: to.Ptr("fd37d325-7090-47fe-851a-5b5a00c3f576"),
			Type: to.Ptr("Microsoft.SecurityInsights/Watchlists/WatchlistItems"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/Watchlists/highValueAsset/WatchlistItems/fd37d325-7090-47fe-851a-5b5a00c3f576"),
			Etag: to.Ptr("\"f2089bfa-0000-0d00-0000-601c58b42021\""),
			Properties: &armsecurityinsight.WatchlistItemProperties{
				Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-04T12:27:32.3783333-08:00"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				EntityMapping: map[string]interface{}{},
				IsDeleted:     to.Ptr(false),
				ItemsKeyValue: map[string]interface{}{
					"Header-1": "v1_1",
					"Header-2": "v1_2",
					"Header-3": "v1_3",
					"Header-4": "v1_4",
					"Header-5": "v1_5",
				},
				TenantID: to.Ptr("3f8901fe-63d9-4875-9ad5-9fb3b8105797"),
				Updated:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-04T12:27:32.3783333-08:00"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				WatchlistItemID:   to.Ptr("fd37d325-7090-47fe-851a-5b5a00c3f576"),
				WatchlistItemType: to.Ptr("watchlist-item"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WatchlistItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WatchlistItem)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/GetWatchlistItemById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatchlistItems_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/DeleteWatchlistItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a watchlist Item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistItemsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		"4008512e-1d30-48b2-9ee2-d3612ed9d3ea",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/DeleteWatchlistItem.json: %v", err)
	}
}

func TestWatchlistItems_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlistItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a watchlist item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewWatchlistItemsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"highValueAsset",
		"82ba292c-dc97-4dfc-969d-d4dd9e666842",
		armsecurityinsight.WatchlistItem{
			Etag: to.Ptr("0300bf09-0000-0000-0000-5c37296e0000"),
			Properties: &armsecurityinsight.WatchlistItemProperties{
				ItemsKeyValue: map[string]interface{}{
					"Business tier":  "10.0.2.0/24",
					"Data tier":      "10.0.2.0/24",
					"Gateway subnet": "10.0.255.224/27",
					"Private DMZ in": "10.0.0.0/27",
					"Public DMZ out": "10.0.0.96/27",
					"Web Tier":       "10.0.1.0/24",
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlistItem.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.WatchlistItem{
			Type: to.Ptr("Microsoft.SecurityInsights/Watchlists/WatchlistItems"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/Watchlists/highValueAsset/WatchlistItems/82ba292c-dc97-4dfc-969d-d4dd9e666842"),
			Etag: to.Ptr("0300bf09-0000-0000-0000-5c37296e0000"),
			Properties: &armsecurityinsight.WatchlistItemProperties{
				Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T04:58:56.0748363+00:00"); return t }()),
				CreatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				IsDeleted: to.Ptr(false),
				ItemsKeyValue: map[string]interface{}{
					"Business tier":  "10.0.2.0/24",
					"Data tier":      "10.0.2.0/24",
					"Gateway subnet": "10.0.255.224/27",
					"Private DMZ in": "10.0.0.0/27",
					"Public DMZ out": "10.0.0.96/27",
					"Web Tier":       "10.0.1.0/24",
				},
				TenantID: to.Ptr("4008512e-1d30-48b2-9ee2-d3612ed9d3ea"),
				Updated:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-16T16:05:20+00:00"); return t }()),
				UpdatedBy: &armsecurityinsight.UserInfo{
					Name:     to.Ptr("john doe"),
					Email:    to.Ptr("john@contoso.com"),
					ObjectID: to.Ptr("2046feea-040d-4a46-9e2b-91c2941bfa70"),
				},
				WatchlistItemID:   to.Ptr("82ba292c-dc97-4dfc-969d-d4dd9e666842"),
				WatchlistItemType: to.Ptr("watchlist-item"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WatchlistItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WatchlistItem)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/watchlists/CreateWatchlistItem.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnectors_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetDataConnectors.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all data connectors."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetDataConnectors.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.DataConnectorList{
			Value: []armsecurityinsight.DataConnectorClassification{
				&armsecurityinsight.ASCDataConnector{
					Name: to.Ptr("763f9fa1-c2d3-4fa2-93e9-bccd4899aa12"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/763f9fa1-c2d3-4fa2-93e9-bccd4899aa12"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureSecurityCenter),
					Properties: &armsecurityinsight.ASCDataConnectorProperties{
						DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
							Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
						SubscriptionID: to.Ptr("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0"),
					},
				},
				&armsecurityinsight.TIDataConnector{
					Name: to.Ptr("c345bf40-8509-4ed2-b947-50cb773aaf04"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c345bf40-8509-4ed2-b947-50cb773aaf04"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligence),
					Properties: &armsecurityinsight.TIDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.TIDataConnectorDataTypes{
							Indicators: &armsecurityinsight.TIDataConnectorDataTypesIndicators{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.TiTaxiiDataConnector{
					Name: to.Ptr("c39bb458-02a7-4b3f-b0c8-71a1d2692652"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c39bb458-02a7-4b3f-b0c8-71a1d2692652"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligenceTaxii),
					Properties: &armsecurityinsight.TiTaxiiDataConnectorProperties{
						TenantID:     to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						CollectionID: to.Ptr("e0b1f32d-1188-48f7-a7a3-de71924e4b5e"),
						DataTypes: &armsecurityinsight.TiTaxiiDataConnectorDataTypes{
							TaxiiClient: &armsecurityinsight.TiTaxiiDataConnectorDataTypesTaxiiClient{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
						FriendlyName:     to.Ptr("My TI Taxii Connector"),
						Password:         to.Ptr(""),
						PollingFrequency: to.Ptr(armsecurityinsight.PollingFrequencyOnceAMinute),
						TaxiiServer:      to.Ptr("https://mytaxiiserver.com/taxiing/v2/api"),
						UserName:         to.Ptr(""),
						WorkspaceID:      to.Ptr("8b014a77-4695-4ef4-96bb-6623afb121a2"),
					},
				},
				&armsecurityinsight.AADDataConnector{
					Name: to.Ptr("f0cd27d2-5f03-4c06-ba31-d2dc82dcb51d"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/f0cd27d2-5f03-4c06-ba31-d2dc82dcb51d"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureActiveDirectory),
					Properties: &armsecurityinsight.AADDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
							Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.OfficeDataConnector{
					Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindOffice365),
					Properties: &armsecurityinsight.OfficeDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.OfficeDataConnectorDataTypes{
							Exchange: &armsecurityinsight.OfficeDataConnectorDataTypesExchange{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
							SharePoint: &armsecurityinsight.OfficeDataConnectorDataTypesSharePoint{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
							Teams: &armsecurityinsight.OfficeDataConnectorDataTypesTeams{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.MCASDataConnector{
					Name: to.Ptr("b96d014d-b5c2-4a01-9aba-a8058f629d42"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/b96d014d-b5c2-4a01-9aba-a8058f629d42"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftCloudAppSecurity),
					Properties: &armsecurityinsight.MCASDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.MCASDataConnectorDataTypes{
							Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
							DiscoveryLogs: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.AATPDataConnector{
					Name: to.Ptr("07e42cb3-e658-4e90-801c-efa0f29d3d44"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/07e42cb3-e658-4e90-801c-efa0f29d3d44"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureAdvancedThreatProtection),
					Properties: &armsecurityinsight.AATPDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
							Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.AwsCloudTrailDataConnector{
					Name: to.Ptr("c345bf40-8509-4ed2-b947-50cb773aaf04"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c345bf40-8509-4ed2-b947-50cb773aaf04"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindAmazonWebServicesCloudTrail),
					Properties: &armsecurityinsight.AwsCloudTrailDataConnectorProperties{
						AwsRoleArn: to.Ptr("myAwsRoleArn"),
						DataTypes: &armsecurityinsight.AwsCloudTrailDataConnectorDataTypes{
							Logs: &armsecurityinsight.AwsCloudTrailDataConnectorDataTypesLogs{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.AwsS3DataConnector{
					Name: to.Ptr("afef3743-0c88-469c-84ff-ca2e87dc1e48"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/afef3743-0c88-469c-84ff-ca2e87dc1e48"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindAmazonWebServicesS3),
					Properties: &armsecurityinsight.AwsS3DataConnectorProperties{
						DataTypes: &armsecurityinsight.AwsS3DataConnectorDataTypes{
							Logs: &armsecurityinsight.AwsS3DataConnectorDataTypesLogs{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
						DestinationTable: to.Ptr("AWSVPCFlow"),
						RoleArn:          to.Ptr("arn:aws:iam::072643944673:role/RoleName"),
						SqsUrls: []*string{
							to.Ptr("https://sqs.us-west-1.amazonaws.com/111111111111/sqsTestName")},
					},
				},
				&armsecurityinsight.MDATPDataConnector{
					Name: to.Ptr("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftDefenderAdvancedThreatProtection),
					Properties: &armsecurityinsight.MDATPDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
							Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.OfficeATPDataConnector{
					Name: to.Ptr("3d3e955e-33eb-401d-89a7-251c81ddd660"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/3d3e955e-33eb-401d-89a7-251c81ddd660"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindOfficeATP),
					Properties: &armsecurityinsight.OfficeATPDataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
							Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.Dynamics365DataConnector{
					Name: to.Ptr("c2541efb-c9a6-47fe-9501-87d1017d1512"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/3d3e955e-33eb-401d-89a7-251c81ddd660"),
					Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindDynamics365),
					Properties: &armsecurityinsight.Dynamics365DataConnectorProperties{
						TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
						DataTypes: &armsecurityinsight.Dynamics365DataConnectorDataTypes{
							Dynamics365CdsActivities: &armsecurityinsight.Dynamics365DataConnectorDataTypesDynamics365CdsActivities{
								State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							},
						},
					},
				},
				&armsecurityinsight.CodelessUIDataConnector{
					Name: to.Ptr("316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
					Etag: to.Ptr("\"1a00b074-0000-0100-0000-606ef5bd0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindGenericUI),
					Properties: &armsecurityinsight.CodelessParameters{
						ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
							Availability: &armsecurityinsight.Availability{
								IsPreview: to.Ptr(true),
								Status:    to.Ptr[int32](1),
							},
							ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
								{
									Type: to.Ptr(armsecurityinsight.ConnectivityTypeIsConnectedQuery),
									Value: []*string{
										to.Ptr("{{graphQueriesTableName}}\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)")},
								}},
							CustomImage: to.Ptr("The image connector content"),
							DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
								{
									Name:                  to.Ptr("{{graphQueriesTableName}}"),
									LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
								}},
							DescriptionMarkdown: to.Ptr("The [Qualys Vulnerability Management (VM)](https://www.qualys.com/apps/vulnerability-management/) data connector provides the capability to ingest vulnerability host detection data into Azure Sentinel through the Qualys API. The connector provides visibility into host detection data from vulerability scans. This connector provides Azure Sentinel the capability to view dashboards, create custom alerts, and improve investigation "),
							GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
								{
									BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
									Legend:     to.Ptr("{{graphQueriesTableName}}"),
									MetricName: to.Ptr("Total data received"),
								}},
							GraphQueriesTableName: to.Ptr("QualysHostDetection_CL"),
							InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
								{
									Description: to.Ptr(">**NOTE:** This connector uses Azure Functions to connect to Qualys VM to pull its logs into Azure Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."),
									Title:       to.Ptr(""),
								},
								{
									Description: to.Ptr(">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."),
									Title:       to.Ptr(""),
								},
								{
									Description: to.Ptr("**STEP 1 - Configuration steps for the Qualys VM API**\n\n1. Log into the Qualys Vulnerability Management console with an administrator account, select the **Users** tab and the **Users** subtab. \n2. Click on the **New** drop-down menu and select **Users..**\n3. Create a username and password for the API account. \n4. In the **User Roles** tab, ensure the account role is set to **Manager** and access is allowed to **GUI** and **API**\n4. Log out of the administrator account and log into the console with the new API credentials for validation, then log out of the API account. \n5. Log back into the console using an administrator account and modify the API accounts User Roles, removing access to **GUI**. \n6. Save all changes."),
									Title:       to.Ptr(""),
								},
								{
									Description: to.Ptr("**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Qualys VM connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as the Qualys VM API Authorization Key(s), readily available."),
									Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
										{
											Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
											Parameters: map[string]interface{}{
												"fillWith": []interface{}{
													"WorkspaceId",
												},
												"label": "Workspace ID",
											},
										},
										{
											Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
											Parameters: map[string]interface{}{
												"fillWith": []interface{}{
													"PrimaryKey",
												},
												"label": "Primary Key",
											},
										}},
									Title: to.Ptr(""),
								},
								{
									Description: to.Ptr("Use this method for automated deployment of the Qualys VM connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n	[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinelqualysvmazuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Workspace ID**, **Workspace Key**, **API Username**, **API Password** , update the **URI**, and any additional URI **Filter Parameters** (each filter should be separated by an \"&\" symbol, no spaces.) \n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348) -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format. \n - The default **Time Interval** is set to pull the last five (5) minutes of data. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly (in the function.json file, post deployment) to prevent overlapping data ingestion. \n> - Note: If using Azure Key Vault secrets for any of the values above, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy."),
									Title: to.Ptr("Option 1 - Azure Resource Manager (ARM) Template"),
								},
								{
									Description: to.Ptr("Use the following step-by-step instructions to deploy the Quayls VM connector manually with Azure Functions."),
									Title:       to.Ptr("Option 2 - Manual Deployment of Azure Functions"),
								},
								{
									Description: to.Ptr("**1. Create a Function App**\n\n1.  From the Azure Portal, navigate to [Function App](https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.Web%2Fsites/kind/functionapp), and select **+ Add**.\n2. In the **Basics** tab, ensure Runtime stack is set to **Powershell Core**. \n3. In the **Hosting** tab, ensure the **Consumption (Serverless)** plan type is selected.\n4. Make other preferrable configuration changes, if needed, then click **Create**."),
									Title:       to.Ptr(""),
								},
								{
									Description: to.Ptr("**2. Import Function App Code**\n\n1. In the newly created Function App, select **Functions** on the left pane and click **+ New Function**.\n2. Select **Timer Trigger**.\n3. Enter a unique Function **Name** and leave the default cron schedule of every 5 minutes, then click **Create**.\n5. Click on **Code + Test** on the left pane. \n6. Copy the [Function App Code](https://aka.ms/sentinelqualysvmazurefunctioncode) and paste into the Function App `run.ps1` editor.\n7. Click **Save**."),
									Title:       to.Ptr(""),
								},
								{
									Description: to.Ptr("**3. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following seven (7) application settings individually, with their respective string values (case-sensitive): \n		apiUsername\n		apiPassword\n		workspaceID\n		workspaceKey\n		uri\n		filterParameters\n		timeInterval\n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348). The `uri` value must follow the following schema: `https://<API Server>/api/2.0/fo/asset/host/vm/detection/?action=list&vm_processed_after=` -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format.\n> - Add any additional filter parameters, for the `filterParameters` variable, that need to be appended to the URI. Each parameter should be seperated by an \"&\" symbol and should not include any spaces.\n> - Set the `timeInterval` (in minutes) to the value of `5` to correspond to the Timer Trigger of every `5` minutes. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly to prevent overlapping data ingestion.\n> - Note: If using Azure Key Vault, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details.\n4. Once all application settings have been entered, click **Save**."),
									Title: to.Ptr(""),
								},
								{
									Description: to.Ptr("**4. Configure the host.json**.\n\nDue to the potentially large amount of Qualys host detection data being ingested, it can cause the execution time to surpass the default Function App timeout of five (5) minutes. Increase the default timeout duration to the maximum of ten (10) minutes, under the Consumption Plan, to allow more time for the Function App to execute.\n\n1. In the Function App, select the Function App Name and select the **App Service Editor** blade.\n2. Click **Go** to open the editor, then select the **host.json** file under the **wwwroot** directory.\n3. Add the line `\"functionTimeout\": \"00:10:00\",` above the `managedDependancy` line \n4. Ensure **SAVED** appears on the top right corner of the editor, then exit the editor.\n\n> NOTE: If a longer timeout duration is required, consider upgrading to an [App Service Plan](https://docs.microsoft.com/azure/azure-functions/functions-scale#timeout)"),
									Title:       to.Ptr(""),
								}},
							Permissions: &armsecurityinsight.Permissions{
								Customs: []*armsecurityinsight.PermissionsCustomsItem{
									{
										Name:        to.Ptr("Microsoft.Web/sites permissions"),
										Description: to.Ptr("Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."),
									},
									{
										Name:        to.Ptr("Qualys API Key"),
										Description: to.Ptr("A Qualys VM API username and password is required. [See the documentation to learn more about Qualys VM API](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf)."),
									}},
								ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
									{
										PermissionsDisplayText: to.Ptr("read and write permissions on the workspace are required."),
										Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
										ProviderDisplayName:    to.Ptr("Workspace"),
										RequiredPermissions: &armsecurityinsight.RequiredPermissions{
											Delete: to.Ptr(true),
											Read:   to.Ptr(true),
											Write:  to.Ptr(true),
										},
										Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
									},
									{
										PermissionsDisplayText: to.Ptr("read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key)."),
										Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspacesSharedKeys),
										ProviderDisplayName:    to.Ptr("Keys"),
										RequiredPermissions: &armsecurityinsight.RequiredPermissions{
											Action: to.Ptr(true),
										},
										Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
									}},
							},
							Publisher: to.Ptr("Qualys"),
							SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
								{
									Description: to.Ptr("Top 10 Vulerabilities detected"),
									Query:       to.Ptr("{{graphQueriesTableName}}\n | mv-expand todynamic(Detections_s)\n | extend Vulnerability = tostring(Detections_s.Results)\n | summarize count() by Vulnerability\n | top 10 by count_"),
								}},
							Title: to.Ptr("Qualys Vulnerability Management (CCP DEMO)"),
						},
					},
				},
				&armsecurityinsight.CodelessAPIPollingDataConnector{
					Name: to.Ptr("316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
					Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
					Etag: to.Ptr("\"1a00b074-0000-0100-0000-606ef5bd0000\""),
					Kind: to.Ptr(armsecurityinsight.DataConnectorKindAPIPolling),
					Properties: &armsecurityinsight.APIPollingParameters{
						ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
							Availability: &armsecurityinsight.Availability{
								IsPreview: to.Ptr(true),
								Status:    to.Ptr[int32](1),
							},
							ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
								{
									Type:  to.Ptr(armsecurityinsight.ConnectivityType("SentinelKindsV2")),
									Value: []*string{},
								}},
							DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
								{
									Name:                  to.Ptr("{{graphQueriesTableName}}"),
									LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
								}},
							DescriptionMarkdown: to.Ptr("The GitHub audit log connector provides the capability to ingest GitHub logs into Azure Sentinel. By connecting GitHub audit logs into Azure Sentinel, you can view this data in workbooks, use it to create custom alerts, and improve your investigation process."),
							GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
								{
									BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
									Legend:     to.Ptr("GitHub audit log events"),
									MetricName: to.Ptr("Total events received"),
								}},
							GraphQueriesTableName: to.Ptr("GitHubAuditLogPolling_CL"),
							InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
								{
									Description: to.Ptr("Enable GitHub audit Logs. \n Follow [this](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) to create or find your personal key"),
									Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
										{
											Type: to.Ptr(armsecurityinsight.SettingType("APIKey")),
											Parameters: map[string]interface{}{
												"enable": "true",
												"userRequestPlaceHoldersInput": []interface{}{
													map[string]interface{}{
														"displayText":      "Organization Name",
														"placeHolderName":  "{{placeHolder1}}",
														"placeHolderValue": "",
														"requestObjectKey": "apiEndpoint",
													},
												},
											},
										}},
									Title: to.Ptr("Connect GitHub Enterprise Audit Log to Azure Sentinel"),
								}},
							Permissions: &armsecurityinsight.Permissions{
								Customs: []*armsecurityinsight.PermissionsCustomsItem{
									{
										Name:        to.Ptr("GitHub API personal token Key"),
										Description: to.Ptr("You need access to GitHub personal token, the key should have 'admin:org' scope"),
									}},
								ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
									{
										PermissionsDisplayText: to.Ptr("read and write permissions are required."),
										Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
										ProviderDisplayName:    to.Ptr("Workspace"),
										RequiredPermissions: &armsecurityinsight.RequiredPermissions{
											Delete: to.Ptr(true),
											Read:   to.Ptr(true),
											Write:  to.Ptr(true),
										},
										Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
									}},
							},
							Publisher: to.Ptr("GitHub"),
							SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
								{
									Description: to.Ptr("All logs"),
									Query:       to.Ptr("{{graphQueriesTableName}}\n | take 10 <change>"),
								}},
							Title: to.Ptr("GitHub Enterprise Audit Log"),
						},
						PollingConfig: &armsecurityinsight.CodelessConnectorPollingConfigProperties{
							Auth: &armsecurityinsight.CodelessConnectorPollingAuthProperties{
								APIKeyIdentifier: to.Ptr("token"),
								APIKeyName:       to.Ptr("Authorization"),
								AuthType:         to.Ptr("APIKey"),
							},
							Paging: &armsecurityinsight.CodelessConnectorPollingPagingProperties{
								PageSizeParaName: to.Ptr("per_page"),
								PagingType:       to.Ptr("LinkHeader"),
							},
							Response: &armsecurityinsight.CodelessConnectorPollingResponseProperties{
								EventsJSONPaths: []*string{
									to.Ptr("$")},
							},
							Request: &armsecurityinsight.CodelessConnectorPollingRequestProperties{
								APIEndpoint: to.Ptr("https://api.github.com/organizations/{{placeHolder1}}/audit-log"),
								Headers: map[string]interface{}{
									"Accept":     "application/json",
									"User-Agent": "Scuba",
								},
								HTTPMethod: to.Ptr("Get"),
								QueryParameters: map[string]interface{}{
									"phrase": "created:{_QueryWindowStartTime}..{_QueryWindowEndTime}",
								},
								QueryTimeFormat:  to.Ptr("yyyy-MM-ddTHH:mm:ssZ"),
								QueryWindowInMin: to.Ptr[int32](15),
								RateLimitQPS:     to.Ptr[int32](50),
								RetryCount:       to.Ptr[int32](2),
								TimeoutInSeconds: to.Ptr[int32](60),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataConnectorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataConnectorList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetDataConnectors.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnectors_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAPIPolling.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a APIPolling data connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAPIPolling.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.CodelessAPIPollingDataConnector{
				Name: to.Ptr("316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Etag: to.Ptr("\"1a00b074-0000-0100-0000-606ef5bd0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAPIPolling),
				Properties: &armsecurityinsight.APIPollingParameters{
					ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
						Availability: &armsecurityinsight.Availability{
							IsPreview: to.Ptr(true),
							Status:    to.Ptr[int32](1),
						},
						ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
							{
								Type:  to.Ptr(armsecurityinsight.ConnectivityType("SentinelKindsV2")),
								Value: []*string{},
							}},
						CustomImage: to.Ptr("The image connector content"),
						DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
							{
								Name:                  to.Ptr("{{graphQueriesTableName}}"),
								LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
							}},
						DescriptionMarkdown: to.Ptr("The GitHub audit log connector provides the capability to ingest GitHub logs into Azure Sentinel. By connecting GitHub audit logs into Azure Sentinel, you can view this data in workbooks, use it to create custom alerts, and improve your investigation process."),
						GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
							{
								BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
								Legend:     to.Ptr("GitHub audit log events"),
								MetricName: to.Ptr("Total events received"),
							}},
						GraphQueriesTableName: to.Ptr("GitHubAuditLogPolling_CL"),
						InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
							{
								Description: to.Ptr("Enable GitHub audit Logs. \n Follow [this](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) to create or find your personal key"),
								Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
									{
										Type: to.Ptr(armsecurityinsight.SettingType("APIKey")),
										Parameters: map[string]interface{}{
											"enable": "true",
											"userRequestPlaceHoldersInput": []interface{}{
												map[string]interface{}{
													"displayText":      "Organization Name",
													"placeHolderName":  "{{placeHolder1}}",
													"placeHolderValue": "",
													"requestObjectKey": "apiEndpoint",
												},
											},
										},
									}},
								Title: to.Ptr("Connect GitHub Enterprise Audit Log to Azure Sentinel"),
							}},
						Permissions: &armsecurityinsight.Permissions{
							Customs: []*armsecurityinsight.PermissionsCustomsItem{
								{
									Name:        to.Ptr("GitHub API personal token Key"),
									Description: to.Ptr("You need access to GitHub personal token, the key should have 'admin:org' scope"),
								}},
							ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
								{
									PermissionsDisplayText: to.Ptr("read and write permissions are required."),
									Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
									ProviderDisplayName:    to.Ptr("Workspace"),
									RequiredPermissions: &armsecurityinsight.RequiredPermissions{
										Delete: to.Ptr(true),
										Read:   to.Ptr(true),
										Write:  to.Ptr(true),
									},
									Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
								}},
						},
						Publisher: to.Ptr("GitHub"),
						SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
							{
								Description: to.Ptr("All logs"),
								Query:       to.Ptr("{{graphQueriesTableName}}\n | take 10 <change>"),
							}},
						Title: to.Ptr("GitHub Enterprise Audit Log"),
					},
					PollingConfig: &armsecurityinsight.CodelessConnectorPollingConfigProperties{
						Auth: &armsecurityinsight.CodelessConnectorPollingAuthProperties{
							APIKeyIdentifier: to.Ptr("token"),
							APIKeyName:       to.Ptr("Authorization"),
							AuthType:         to.Ptr("APIKey"),
						},
						Paging: &armsecurityinsight.CodelessConnectorPollingPagingProperties{
							PageSizeParaName: to.Ptr("per_page"),
							PagingType:       to.Ptr("LinkHeader"),
						},
						Response: &armsecurityinsight.CodelessConnectorPollingResponseProperties{
							EventsJSONPaths: []*string{
								to.Ptr("$")},
						},
						Request: &armsecurityinsight.CodelessConnectorPollingRequestProperties{
							APIEndpoint: to.Ptr("https://api.github.com/organizations/{{placeHolder1}}/audit-log"),
							Headers: map[string]interface{}{
								"Accept":     "application/json",
								"User-Agent": "Scuba",
							},
							HTTPMethod: to.Ptr("Get"),
							QueryParameters: map[string]interface{}{
								"phrase": "created:{_QueryWindowStartTime}..{_QueryWindowEndTime}",
							},
							QueryTimeFormat:  to.Ptr("yyyy-MM-ddTHH:mm:ssZ"),
							QueryWindowInMin: to.Ptr[int32](15),
							RateLimitQPS:     to.Ptr[int32](50),
							RetryCount:       to.Ptr[int32](2),
							TimeoutInSeconds: to.Ptr[int32](60),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAPIPolling.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureSecurityCenterById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a ASC data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"763f9fa1-c2d3-4fa2-93e9-bccd4899aa12",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureSecurityCenterById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.ASCDataConnector{
				Name: to.Ptr("763f9fa1-c2d3-4fa2-93e9-bccd4899aa12"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/763f9fa1-c2d3-4fa2-93e9-bccd4899aa12"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureSecurityCenter),
				Properties: &armsecurityinsight.ASCDataConnectorProperties{
					DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
					SubscriptionID: to.Ptr("c0688291-89d7-4bed-87a2-a7b1bff43f4c"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureSecurityCenterById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetDynamics365DataConnectorById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Dynamics365 data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"c2541efb-c9a6-47fe-9501-87d1017d1512",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetDynamics365DataConnectorById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.Dynamics365DataConnector{
				Name: to.Ptr("c2541efb-c9a6-47fe-9501-87d1017d1512"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/3d3e955e-33eb-401d-89a7-251c81ddd660"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindDynamics365),
				Properties: &armsecurityinsight.Dynamics365DataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.Dynamics365DataConnectorDataTypes{
						Dynamics365CdsActivities: &armsecurityinsight.Dynamics365DataConnectorDataTypesDynamics365CdsActivities{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetDynamics365DataConnectorById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetGenericUI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a GenericUI data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetGenericUI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.CodelessUIDataConnector{
				Name: to.Ptr("316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Etag: to.Ptr("\"1a00b074-0000-0100-0000-606ef5bd0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindGenericUI),
				Properties: &armsecurityinsight.CodelessParameters{
					ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
						Availability: &armsecurityinsight.Availability{
							IsPreview: to.Ptr(true),
							Status:    to.Ptr[int32](1),
						},
						ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
							{
								Type: to.Ptr(armsecurityinsight.ConnectivityTypeIsConnectedQuery),
								Value: []*string{
									to.Ptr("{{graphQueriesTableName}}\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)")},
							}},
						CustomImage: to.Ptr("The image connector content"),
						DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
							{
								Name:                  to.Ptr("{{graphQueriesTableName}}"),
								LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
							}},
						DescriptionMarkdown: to.Ptr("The [Qualys Vulnerability Management (VM)](https://www.qualys.com/apps/vulnerability-management/) data connector provides the capability to ingest vulnerability host detection data into Azure Sentinel through the Qualys API. The connector provides visibility into host detection data from vulerability scans. This connector provides Azure Sentinel the capability to view dashboards, create custom alerts, and improve investigation "),
						GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
							{
								BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
								Legend:     to.Ptr("{{graphQueriesTableName}}"),
								MetricName: to.Ptr("Total data received"),
							}},
						GraphQueriesTableName: to.Ptr("QualysHostDetection_CL"),
						InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
							{
								Description: to.Ptr(">**NOTE:** This connector uses Azure Functions to connect to Qualys VM to pull its logs into Azure Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr(">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**STEP 1 - Configuration steps for the Qualys VM API**\n\n1. Log into the Qualys Vulnerability Management console with an administrator account, select the **Users** tab and the **Users** subtab. \n2. Click on the **New** drop-down menu and select **Users..**\n3. Create a username and password for the API account. \n4. In the **User Roles** tab, ensure the account role is set to **Manager** and access is allowed to **GUI** and **API**\n4. Log out of the administrator account and log into the console with the new API credentials for validation, then log out of the API account. \n5. Log back into the console using an administrator account and modify the API accounts User Roles, removing access to **GUI**. \n6. Save all changes."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Qualys VM connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as the Qualys VM API Authorization Key(s), readily available."),
								Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
									{
										Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
										Parameters: map[string]interface{}{
											"fillWith": []interface{}{
												"WorkspaceId",
											},
											"label": "Workspace ID",
										},
									},
									{
										Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
										Parameters: map[string]interface{}{
											"fillWith": []interface{}{
												"PrimaryKey",
											},
											"label": "Primary Key",
										},
									}},
								Title: to.Ptr(""),
							},
							{
								Description: to.Ptr("Use this method for automated deployment of the Qualys VM connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n	[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinelqualysvmazuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Workspace ID**, **Workspace Key**, **API Username**, **API Password** , update the **URI**, and any additional URI **Filter Parameters** (each filter should be separated by an \"&\" symbol, no spaces.) \n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348) -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format. \n - The default **Time Interval** is set to pull the last five (5) minutes of data. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly (in the function.json file, post deployment) to prevent overlapping data ingestion. \n> - Note: If using Azure Key Vault secrets for any of the values above, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy."),
								Title: to.Ptr("Option 1 - Azure Resource Manager (ARM) Template"),
							},
							{
								Description: to.Ptr("Use the following step-by-step instructions to deploy the Quayls VM connector manually with Azure Functions."),
								Title:       to.Ptr("Option 2 - Manual Deployment of Azure Functions"),
							},
							{
								Description: to.Ptr("**1. Create a Function App**\n\n1.  From the Azure Portal, navigate to [Function App](https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.Web%2Fsites/kind/functionapp), and select **+ Add**.\n2. In the **Basics** tab, ensure Runtime stack is set to **Powershell Core**. \n3. In the **Hosting** tab, ensure the **Consumption (Serverless)** plan type is selected.\n4. Make other preferrable configuration changes, if needed, then click **Create**."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**2. Import Function App Code**\n\n1. In the newly created Function App, select **Functions** on the left pane and click **+ New Function**.\n2. Select **Timer Trigger**.\n3. Enter a unique Function **Name** and leave the default cron schedule of every 5 minutes, then click **Create**.\n5. Click on **Code + Test** on the left pane. \n6. Copy the [Function App Code](https://aka.ms/sentinelqualysvmazurefunctioncode) and paste into the Function App `run.ps1` editor.\n7. Click **Save**."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**3. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following seven (7) application settings individually, with their respective string values (case-sensitive): \n		apiUsername\n		apiPassword\n		workspaceID\n		workspaceKey\n		uri\n		filterParameters\n		timeInterval\n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348). The `uri` value must follow the following schema: `https://<API Server>/api/2.0/fo/asset/host/vm/detection/?action=list&vm_processed_after=` -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format.\n> - Add any additional filter parameters, for the `filterParameters` variable, that need to be appended to the URI. Each parameter should be seperated by an \"&\" symbol and should not include any spaces.\n> - Set the `timeInterval` (in minutes) to the value of `5` to correspond to the Timer Trigger of every `5` minutes. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly to prevent overlapping data ingestion.\n> - Note: If using Azure Key Vault, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details.\n4. Once all application settings have been entered, click **Save**."),
								Title: to.Ptr(""),
							},
							{
								Description: to.Ptr("**4. Configure the host.json**.\n\nDue to the potentially large amount of Qualys host detection data being ingested, it can cause the execution time to surpass the default Function App timeout of five (5) minutes. Increase the default timeout duration to the maximum of ten (10) minutes, under the Consumption Plan, to allow more time for the Function App to execute.\n\n1. In the Function App, select the Function App Name and select the **App Service Editor** blade.\n2. Click **Go** to open the editor, then select the **host.json** file under the **wwwroot** directory.\n3. Add the line `\"functionTimeout\": \"00:10:00\",` above the `managedDependancy` line \n4. Ensure **SAVED** appears on the top right corner of the editor, then exit the editor.\n\n> NOTE: If a longer timeout duration is required, consider upgrading to an [App Service Plan](https://docs.microsoft.com/azure/azure-functions/functions-scale#timeout)"),
								Title:       to.Ptr(""),
							}},
						Permissions: &armsecurityinsight.Permissions{
							Customs: []*armsecurityinsight.PermissionsCustomsItem{
								{
									Name:        to.Ptr("Microsoft.Web/sites permissions"),
									Description: to.Ptr("Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."),
								},
								{
									Name:        to.Ptr("Qualys API Key"),
									Description: to.Ptr("A Qualys VM API username and password is required. [See the documentation to learn more about Qualys VM API](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf)."),
								}},
							ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
								{
									PermissionsDisplayText: to.Ptr("read and write permissions on the workspace are required."),
									Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
									ProviderDisplayName:    to.Ptr("Workspace"),
									RequiredPermissions: &armsecurityinsight.RequiredPermissions{
										Delete: to.Ptr(true),
										Read:   to.Ptr(true),
										Write:  to.Ptr(true),
									},
									Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
								},
								{
									PermissionsDisplayText: to.Ptr("read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key)."),
									Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspacesSharedKeys),
									ProviderDisplayName:    to.Ptr("Keys"),
									RequiredPermissions: &armsecurityinsight.RequiredPermissions{
										Action: to.Ptr(true),
									},
									Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
								}},
						},
						Publisher: to.Ptr("Qualys"),
						SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
							{
								Description: to.Ptr("Top 10 Vulerabilities detected"),
								Query:       to.Ptr("{{graphQueriesTableName}}\n | mv-expand todynamic(Detections_s)\n | extend Vulnerability = tostring(Detections_s.Results)\n | summarize count() by Vulnerability\n | top 10 by count_"),
							}},
						Title: to.Ptr("Qualys Vulnerability Management (CCP DEMO)"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetGenericUI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftCloudAppSecurityById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a MCAS data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"b96d014d-b5c2-4a01-9aba-a8058f629d42",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftCloudAppSecurityById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.MCASDataConnector{
				Name: to.Ptr("b96d014d-b5c2-4a01-9aba-a8058f629d42"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/b96d014d-b5c2-4a01-9aba-a8058f629d42"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftCloudAppSecurity),
				Properties: &armsecurityinsight.MCASDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.MCASDataConnectorDataTypes{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
						DiscoveryLogs: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftCloudAppSecurityById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftDefenderAdvancedThreatProtectionById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a MDATP data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"06b3ccb8-1384-4bcc-aec7-852f6d57161b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftDefenderAdvancedThreatProtectionById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.MDATPDataConnector{
				Name: to.Ptr("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftDefenderAdvancedThreatProtection),
				Properties: &armsecurityinsight.MDATPDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftDefenderAdvancedThreatProtectionById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftThreatIntelligenceById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a MicrosoftThreatIntelligence data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"c345bf40-8509-4ed2-b947-50cb773aaf04",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftThreatIntelligenceById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.MSTIDataConnector{
				Name: to.Ptr("c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftThreatIntelligence),
				Properties: &armsecurityinsight.MSTIDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.MSTIDataConnectorDataTypes{
						BingSafetyPhishingURL: &armsecurityinsight.MSTIDataConnectorDataTypesBingSafetyPhishingURL{
							State:          to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							LookbackPeriod: to.Ptr("example ??"),
						},
						MicrosoftEmergingThreatFeed: &armsecurityinsight.MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed{
							State:          to.Ptr(armsecurityinsight.DataTypeStateEnabled),
							LookbackPeriod: to.Ptr("example"),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftThreatIntelligenceById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftThreatProtectionById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a MicrosoftThreatProtection data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"c345bf40-8509-4ed2-b947-50cb773aaf04",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftThreatProtectionById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.MTPDataConnector{
				Name: to.Ptr("c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftThreatProtection),
				Properties: &armsecurityinsight.MTPDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.MTPDataConnectorDataTypes{
						Incidents: &armsecurityinsight.MTPDataConnectorDataTypesIncidents{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftThreatProtectionById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetOffice365AdvancedThreatProtectionById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Office ATP data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"3d3e955e-33eb-401d-89a7-251c81ddd660",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetOffice365AdvancedThreatProtectionById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.OfficeATPDataConnector{
				Name: to.Ptr("3d3e955e-33eb-401d-89a7-251c81ddd660"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/3d3e955e-33eb-401d-89a7-251c81ddd660"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindOfficeATP),
				Properties: &armsecurityinsight.OfficeATPDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetOffice365AdvancedThreatProtectionById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftInsiderRiskManagementById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Office IRM data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"3d3e955e-33eb-401d-89a7-251c81ddd660",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftInsiderRiskManagementById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.OfficeIRMDataConnector{
				Name: to.Ptr("3d3e955e-33eb-401d-89a7-251c81ddd660"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/3d3e955e-33eb-401d-89a7-251c81ddd660"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindOfficeIRM),
				Properties: &armsecurityinsight.OfficeIRMDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetMicrosoftInsiderRiskManagementById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetThreatIntelligenceTaxiiById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a TI Taxii data connector."},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"c39bb458-02a7-4b3f-b0c8-71a1d2692652",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetThreatIntelligenceTaxiiById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.TiTaxiiDataConnector{
				Name: to.Ptr("c39bb458-02a7-4b3f-b0c8-71a1d2692652"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c39bb458-02a7-4b3f-b0c8-71a1d2692652"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligenceTaxii),
				Properties: &armsecurityinsight.TiTaxiiDataConnectorProperties{
					TenantID:     to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					CollectionID: to.Ptr("e0b1f32d-1188-48f7-a7a3-de71924e4b5e"),
					DataTypes: &armsecurityinsight.TiTaxiiDataConnectorDataTypes{
						TaxiiClient: &armsecurityinsight.TiTaxiiDataConnectorDataTypesTaxiiClient{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
					FriendlyName:        to.Ptr("My TI Taxii Connector"),
					Password:            to.Ptr(""),
					PollingFrequency:    to.Ptr(armsecurityinsight.PollingFrequencyOnceADay),
					TaxiiLookbackPeriod: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T13:00:30.123Z"); return t }()),
					TaxiiServer:         to.Ptr("https://mytaxiiserver.com/taxiing/v2/api"),
					UserName:            to.Ptr(""),
					WorkspaceID:         to.Ptr("8b014a77-4695-4ef4-96bb-6623afb121a2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetThreatIntelligenceTaxiiById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetThreatIntelligenceById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a TI data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"c345bf40-8509-4ed2-b947-50cb773aaf04",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetThreatIntelligenceById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.TIDataConnector{
				Name: to.Ptr("c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligence),
				Properties: &armsecurityinsight.TIDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.TIDataConnectorDataTypes{
						Indicators: &armsecurityinsight.TIDataConnectorDataTypesIndicators{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
					TipLookbackPeriod: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T13:00:30.123Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetThreatIntelligenceById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureActiveDirectoryById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an AAD data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"f0cd27d2-5f03-4c06-ba31-d2dc82dcb51d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureActiveDirectoryById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.AADDataConnector{
				Name: to.Ptr("f0cd27d2-5f03-4c06-ba31-d2dc82dcb51d"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/f0cd27d2-5f03-4c06-ba31-d2dc82dcb51d"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureActiveDirectory),
				Properties: &armsecurityinsight.AADDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureActiveDirectoryById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureAdvancedThreatProtectionById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an AATP data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"07e42cb3-e658-4e90-801c-efa0f29d3d44",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureAdvancedThreatProtectionById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.AATPDataConnector{
				Name: to.Ptr("07e42cb3-e658-4e90-801c-efa0f29d3d44"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/07e42cb3-e658-4e90-801c-efa0f29d3d44"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureAdvancedThreatProtection),
				Properties: &armsecurityinsight.AATPDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.AlertsDataTypeOfDataConnector{
						Alerts: &armsecurityinsight.DataConnectorDataTypeCommon{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAzureAdvancedThreatProtectionById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAmazonWebServicesS3ById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Aws S3 data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"afef3743-0c88-469c-84ff-ca2e87dc1e48",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAmazonWebServicesS3ById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.AwsS3DataConnector{
				Name: to.Ptr("afef3743-0c88-469c-84ff-ca2e87dc1e48"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/afef3743-0c88-469c-84ff-ca2e87dc1e48"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAmazonWebServicesS3),
				Properties: &armsecurityinsight.AwsS3DataConnectorProperties{
					DataTypes: &armsecurityinsight.AwsS3DataConnectorDataTypes{
						Logs: &armsecurityinsight.AwsS3DataConnectorDataTypesLogs{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
					DestinationTable: to.Ptr("AWSVPCFlow"),
					RoleArn:          to.Ptr("arn:aws:iam::072643944673:role/RoleName"),
					SqsUrls: []*string{
						to.Ptr("https://sqs.us-west-1.amazonaws.com/111111111111/sqsTestName")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAmazonWebServicesS3ById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAmazonWebServicesCloudTrailById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an AwsCloudTrail data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"c345bf40-8509-4ed2-b947-50cb773aaf04",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAmazonWebServicesCloudTrailById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.AwsCloudTrailDataConnector{
				Name: to.Ptr("c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/c345bf40-8509-4ed2-b947-50cb773aaf04"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAmazonWebServicesCloudTrail),
				Properties: &armsecurityinsight.AwsCloudTrailDataConnectorProperties{
					AwsRoleArn: to.Ptr("myAwsRoleArn"),
					DataTypes: &armsecurityinsight.AwsCloudTrailDataConnectorDataTypes{
						Logs: &armsecurityinsight.AwsCloudTrailDataConnectorDataTypesLogs{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetAmazonWebServicesCloudTrailById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetOfficeDataConnetorById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Office365 data connector."},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Get(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetOfficeDataConnetorById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientGetResponse{
			&armsecurityinsight.OfficeDataConnector{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindOffice365),
				Properties: &armsecurityinsight.OfficeDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.OfficeDataConnectorDataTypes{
						Exchange: &armsecurityinsight.OfficeDataConnectorDataTypesExchange{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
						SharePoint: &armsecurityinsight.OfficeDataConnectorDataTypesSharePoint{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
						Teams: &armsecurityinsight.OfficeDataConnectorDataTypesTeams{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/GetOfficeDataConnetorById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnectors_CreateOrUpdate(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateAPIPolling.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a APIPolling data connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		&armsecurityinsight.CodelessAPIPollingDataConnector{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindAPIPolling),
			Properties: &armsecurityinsight.APIPollingParameters{
				ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
					Availability: &armsecurityinsight.Availability{
						IsPreview: to.Ptr(true),
						Status:    to.Ptr[int32](1),
					},
					ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
						{
							Type:  to.Ptr(armsecurityinsight.ConnectivityType("SentinelKindsV2")),
							Value: []*string{},
						}},
					DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
						{
							Name:                  to.Ptr("{{graphQueriesTableName}}"),
							LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
						}},
					DescriptionMarkdown: to.Ptr("The GitHub audit log connector provides the capability to ingest GitHub logs into Azure Sentinel. By connecting GitHub audit logs into Azure Sentinel, you can view this data in workbooks, use it to create custom alerts, and improve your investigation process."),
					GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
						{
							BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
							Legend:     to.Ptr("GitHub audit log events"),
							MetricName: to.Ptr("Total events received"),
						}},
					GraphQueriesTableName: to.Ptr("GitHubAuditLogPolling_CL"),
					InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
						{
							Description: to.Ptr("Enable GitHub audit Logs. \n Follow [this](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) to create or find your personal key"),
							Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
								{
									Type: to.Ptr(armsecurityinsight.SettingType("APIKey")),
									Parameters: map[string]interface{}{
										"enable": "true",
										"userRequestPlaceHoldersInput": []interface{}{
											map[string]interface{}{
												"displayText":      "Organization Name",
												"placeHolderName":  "{{placeHolder1}}",
												"placeHolderValue": "",
												"requestObjectKey": "apiEndpoint",
											},
										},
									},
								}},
							Title: to.Ptr("Connect GitHub Enterprise Audit Log to Azure Sentinel"),
						}},
					Permissions: &armsecurityinsight.Permissions{
						Customs: []*armsecurityinsight.PermissionsCustomsItem{
							{
								Name:        to.Ptr("GitHub API personal token Key"),
								Description: to.Ptr("You need access to GitHub personal token, the key should have 'admin:org' scope"),
							}},
						ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
							{
								PermissionsDisplayText: to.Ptr("read and write permissions are required."),
								Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
								ProviderDisplayName:    to.Ptr("Workspace"),
								RequiredPermissions: &armsecurityinsight.RequiredPermissions{
									Delete: to.Ptr(true),
									Read:   to.Ptr(true),
									Write:  to.Ptr(true),
								},
								Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
							}},
					},
					Publisher: to.Ptr("GitHub"),
					SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
						{
							Description: to.Ptr("All logs"),
							Query:       to.Ptr("{{graphQueriesTableName}}\n | take 10 <change>"),
						}},
					Title: to.Ptr("GitHub Enterprise Audit Log"),
				},
				PollingConfig: &armsecurityinsight.CodelessConnectorPollingConfigProperties{
					Auth: &armsecurityinsight.CodelessConnectorPollingAuthProperties{
						APIKeyIdentifier: to.Ptr("token"),
						APIKeyName:       to.Ptr("Authorization"),
						AuthType:         to.Ptr("APIKey"),
					},
					Paging: &armsecurityinsight.CodelessConnectorPollingPagingProperties{
						PageSizeParaName: to.Ptr("per_page"),
						PagingType:       to.Ptr("LinkHeader"),
					},
					Response: &armsecurityinsight.CodelessConnectorPollingResponseProperties{
						EventsJSONPaths: []*string{
							to.Ptr("$")},
					},
					Request: &armsecurityinsight.CodelessConnectorPollingRequestProperties{
						APIEndpoint: to.Ptr("https://api.github.com/organizations/{{placeHolder1}}/audit-log"),
						Headers: map[string]interface{}{
							"Accept":     "application/json",
							"User-Agent": "Scuba",
						},
						HTTPMethod: to.Ptr("Get"),
						QueryParameters: map[string]interface{}{
							"phrase": "created:{_QueryWindowStartTime}..{_QueryWindowEndTime}",
						},
						QueryTimeFormat:  to.Ptr("yyyy-MM-ddTHH:mm:ssZ"),
						QueryWindowInMin: to.Ptr[int32](15),
						RateLimitQPS:     to.Ptr[int32](50),
						RetryCount:       to.Ptr[int32](2),
						TimeoutInSeconds: to.Ptr[int32](60),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateAPIPolling.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientCreateOrUpdateResponse{
			&armsecurityinsight.CodelessAPIPollingDataConnector{
				Name: to.Ptr("316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Etag: to.Ptr("\"1a00b074-0000-0100-0000-606ef5bd0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindAPIPolling),
				Properties: &armsecurityinsight.APIPollingParameters{
					ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
						Availability: &armsecurityinsight.Availability{
							IsPreview: to.Ptr(true),
							Status:    to.Ptr[int32](1),
						},
						ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
							{
								Type:  to.Ptr(armsecurityinsight.ConnectivityType("SentinelKindsV2")),
								Value: []*string{},
							}},
						DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
							{
								Name:                  to.Ptr("{{graphQueriesTableName}}"),
								LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
							}},
						DescriptionMarkdown: to.Ptr("The GitHub audit log connector provides the capability to ingest GitHub logs into Azure Sentinel. By connecting GitHub audit logs into Azure Sentinel, you can view this data in workbooks, use it to create custom alerts, and improve your investigation process."),
						GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
							{
								BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
								Legend:     to.Ptr("GitHub audit log events"),
								MetricName: to.Ptr("Total events received"),
							}},
						GraphQueriesTableName: to.Ptr("GitHubAuditLogPolling_CL"),
						InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
							{
								Description: to.Ptr("Enable GitHub audit Logs. \n Follow [this](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) to create or find your personal key"),
								Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
									{
										Type: to.Ptr(armsecurityinsight.SettingType("APIKey")),
										Parameters: map[string]interface{}{
											"enable": "true",
											"userRequestPlaceHoldersInput": []interface{}{
												map[string]interface{}{
													"displayText":      "Organization Name",
													"placeHolderName":  "{{placeHolder1}}",
													"placeHolderValue": "",
													"requestObjectKey": "apiEndpoint",
												},
											},
										},
									}},
								Title: to.Ptr("Connect GitHub Enterprise Audit Log to Azure Sentinel"),
							}},
						Permissions: &armsecurityinsight.Permissions{
							Customs: []*armsecurityinsight.PermissionsCustomsItem{
								{
									Name:        to.Ptr("GitHub API personal token Key"),
									Description: to.Ptr("You need access to GitHub personal token, the key should have 'admin:org' scope"),
								}},
							ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
								{
									PermissionsDisplayText: to.Ptr("read and write permissions are required."),
									Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
									ProviderDisplayName:    to.Ptr("Workspace"),
									RequiredPermissions: &armsecurityinsight.RequiredPermissions{
										Delete: to.Ptr(true),
										Read:   to.Ptr(true),
										Write:  to.Ptr(true),
									},
									Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
								}},
						},
						Publisher: to.Ptr("GitHub"),
						SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
							{
								Description: to.Ptr("All logs"),
								Query:       to.Ptr("{{graphQueriesTableName}}\n | take 10 <change>"),
							}},
						Title: to.Ptr("GitHub Enterprise Audit Log"),
					},
					PollingConfig: &armsecurityinsight.CodelessConnectorPollingConfigProperties{
						Auth: &armsecurityinsight.CodelessConnectorPollingAuthProperties{
							APIKeyIdentifier: to.Ptr("token"),
							APIKeyName:       to.Ptr("Authorization"),
							AuthType:         to.Ptr("APIKey"),
						},
						Paging: &armsecurityinsight.CodelessConnectorPollingPagingProperties{
							PageSizeParaName: to.Ptr("per_page"),
							PagingType:       to.Ptr("LinkHeader"),
						},
						Response: &armsecurityinsight.CodelessConnectorPollingResponseProperties{
							EventsJSONPaths: []*string{
								to.Ptr("$")},
						},
						Request: &armsecurityinsight.CodelessConnectorPollingRequestProperties{
							APIEndpoint: to.Ptr("https://api.github.com/organizations/{{placeHolder1}}/audit-log"),
							Headers: map[string]interface{}{
								"Accept":     "application/json",
								"User-Agent": "Scuba",
							},
							HTTPMethod: to.Ptr("Get"),
							QueryParameters: map[string]interface{}{
								"phrase": "created:{_QueryWindowStartTime}..{_QueryWindowEndTime}",
							},
							QueryTimeFormat:  to.Ptr("yyyy-MM-ddTHH:mm:ssZ"),
							QueryWindowInMin: to.Ptr[int32](15),
							RateLimitQPS:     to.Ptr[int32](50),
							RetryCount:       to.Ptr[int32](2),
							TimeoutInSeconds: to.Ptr[int32](60),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateAPIPolling.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateDynamics365DataConnetor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a Dynamics365 data connector."},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"c2541efb-c9a6-47fe-9501-87d1017d1512",
		&armsecurityinsight.Dynamics365DataConnector{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindDynamics365),
			Properties: &armsecurityinsight.Dynamics365DataConnectorProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
				DataTypes: &armsecurityinsight.Dynamics365DataConnectorDataTypes{
					Dynamics365CdsActivities: &armsecurityinsight.Dynamics365DataConnectorDataTypesDynamics365CdsActivities{
						State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateDynamics365DataConnetor.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientCreateOrUpdateResponse{
			&armsecurityinsight.Dynamics365DataConnector{
				Name: to.Ptr("c2541efb-c9a6-47fe-9501-87d1017d1512"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindDynamics365),
				Properties: &armsecurityinsight.Dynamics365DataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.Dynamics365DataConnectorDataTypes{
						Dynamics365CdsActivities: &armsecurityinsight.Dynamics365DataConnectorDataTypesDynamics365CdsActivities{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateDynamics365DataConnetor.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateGenericUI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a GenericUI data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		&armsecurityinsight.CodelessUIDataConnector{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindGenericUI),
			Properties: &armsecurityinsight.CodelessParameters{
				ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
					Availability: &armsecurityinsight.Availability{
						IsPreview: to.Ptr(true),
						Status:    to.Ptr[int32](1),
					},
					ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
						{
							Type: to.Ptr(armsecurityinsight.ConnectivityTypeIsConnectedQuery),
							Value: []*string{
								to.Ptr("{{graphQueriesTableName}}\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)")},
						}},
					DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
						{
							Name:                  to.Ptr("{{graphQueriesTableName}}"),
							LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
						}},
					DescriptionMarkdown: to.Ptr("The [Qualys Vulnerability Management (VM)](https://www.qualys.com/apps/vulnerability-management/) data connector provides the capability to ingest vulnerability host detection data into Azure Sentinel through the Qualys API. The connector provides visibility into host detection data from vulerability scans. This connector provides Azure Sentinel the capability to view dashboards, create custom alerts, and improve investigation "),
					GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
						{
							BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
							Legend:     to.Ptr("{{graphQueriesTableName}}"),
							MetricName: to.Ptr("Total data received"),
						}},
					GraphQueriesTableName: to.Ptr("QualysHostDetection_CL"),
					InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
						{
							Description: to.Ptr(">**NOTE:** This connector uses Azure Functions to connect to Qualys VM to pull its logs into Azure Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."),
							Title:       to.Ptr(""),
						},
						{
							Description: to.Ptr(">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."),
							Title:       to.Ptr(""),
						},
						{
							Description: to.Ptr("**STEP 1 - Configuration steps for the Qualys VM API**\n\n1. Log into the Qualys Vulnerability Management console with an administrator account, select the **Users** tab and the **Users** subtab. \n2. Click on the **New** drop-down menu and select **Users..**\n3. Create a username and password for the API account. \n4. In the **User Roles** tab, ensure the account role is set to **Manager** and access is allowed to **GUI** and **API**\n4. Log out of the administrator account and log into the console with the new API credentials for validation, then log out of the API account. \n5. Log back into the console using an administrator account and modify the API accounts User Roles, removing access to **GUI**. \n6. Save all changes."),
							Title:       to.Ptr(""),
						},
						{
							Description: to.Ptr("**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Qualys VM connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as the Qualys VM API Authorization Key(s), readily available."),
							Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
								{
									Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
									Parameters: map[string]interface{}{
										"fillWith": []interface{}{
											"WorkspaceId",
										},
										"label": "Workspace ID",
									},
								},
								{
									Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
									Parameters: map[string]interface{}{
										"fillWith": []interface{}{
											"PrimaryKey",
										},
										"label": "Primary Key",
									},
								}},
							Title: to.Ptr(""),
						},
						{
							Description: to.Ptr("Use this method for automated deployment of the Qualys VM connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n	[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinelqualysvmazuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Workspace ID**, **Workspace Key**, **API Username**, **API Password** , update the **URI**, and any additional URI **Filter Parameters** (each filter should be separated by an \"&\" symbol, no spaces.) \n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348) -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format. \n - The default **Time Interval** is set to pull the last five (5) minutes of data. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly (in the function.json file, post deployment) to prevent overlapping data ingestion. \n> - Note: If using Azure Key Vault secrets for any of the values above, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy."),
							Title: to.Ptr("Option 1 - Azure Resource Manager (ARM) Template"),
						},
						{
							Description: to.Ptr("Use the following step-by-step instructions to deploy the Quayls VM connector manually with Azure Functions."),
							Title:       to.Ptr("Option 2 - Manual Deployment of Azure Functions"),
						},
						{
							Description: to.Ptr("**1. Create a Function App**\n\n1.  From the Azure Portal, navigate to [Function App](https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.Web%2Fsites/kind/functionapp), and select **+ Add**.\n2. In the **Basics** tab, ensure Runtime stack is set to **Powershell Core**. \n3. In the **Hosting** tab, ensure the **Consumption (Serverless)** plan type is selected.\n4. Make other preferrable configuration changes, if needed, then click **Create**."),
							Title:       to.Ptr(""),
						},
						{
							Description: to.Ptr("**2. Import Function App Code**\n\n1. In the newly created Function App, select **Functions** on the left pane and click **+ New Function**.\n2. Select **Timer Trigger**.\n3. Enter a unique Function **Name** and leave the default cron schedule of every 5 minutes, then click **Create**.\n5. Click on **Code + Test** on the left pane. \n6. Copy the [Function App Code](https://aka.ms/sentinelqualysvmazurefunctioncode) and paste into the Function App `run.ps1` editor.\n7. Click **Save**."),
							Title:       to.Ptr(""),
						},
						{
							Description: to.Ptr("**3. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following seven (7) application settings individually, with their respective string values (case-sensitive): \n		apiUsername\n		apiPassword\n		workspaceID\n		workspaceKey\n		uri\n		filterParameters\n		timeInterval\n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348). The `uri` value must follow the following schema: `https://<API Server>/api/2.0/fo/asset/host/vm/detection/?action=list&vm_processed_after=` -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format.\n> - Add any additional filter parameters, for the `filterParameters` variable, that need to be appended to the URI. Each parameter should be seperated by an \"&\" symbol and should not include any spaces.\n> - Set the `timeInterval` (in minutes) to the value of `5` to correspond to the Timer Trigger of every `5` minutes. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly to prevent overlapping data ingestion.\n> - Note: If using Azure Key Vault, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details.\n4. Once all application settings have been entered, click **Save**."),
							Title: to.Ptr(""),
						},
						{
							Description: to.Ptr("**4. Configure the host.json**.\n\nDue to the potentially large amount of Qualys host detection data being ingested, it can cause the execution time to surpass the default Function App timeout of five (5) minutes. Increase the default timeout duration to the maximum of ten (10) minutes, under the Consumption Plan, to allow more time for the Function App to execute.\n\n1. In the Function App, select the Function App Name and select the **App Service Editor** blade.\n2. Click **Go** to open the editor, then select the **host.json** file under the **wwwroot** directory.\n3. Add the line `\"functionTimeout\": \"00:10:00\",` above the `managedDependancy` line \n4. Ensure **SAVED** appears on the top right corner of the editor, then exit the editor.\n\n> NOTE: If a longer timeout duration is required, consider upgrading to an [App Service Plan](https://docs.microsoft.com/azure/azure-functions/functions-scale#timeout)"),
							Title:       to.Ptr(""),
						}},
					Permissions: &armsecurityinsight.Permissions{
						Customs: []*armsecurityinsight.PermissionsCustomsItem{
							{
								Name:        to.Ptr("Microsoft.Web/sites permissions"),
								Description: to.Ptr("Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."),
							},
							{
								Name:        to.Ptr("Qualys API Key"),
								Description: to.Ptr("A Qualys VM API username and password is required. [See the documentation to learn more about Qualys VM API](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf)."),
							}},
						ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
							{
								PermissionsDisplayText: to.Ptr("read and write permissions on the workspace are required."),
								Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
								ProviderDisplayName:    to.Ptr("Workspace"),
								RequiredPermissions: &armsecurityinsight.RequiredPermissions{
									Delete: to.Ptr(true),
									Read:   to.Ptr(true),
									Write:  to.Ptr(true),
								},
								Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
							},
							{
								PermissionsDisplayText: to.Ptr("read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key)."),
								Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspacesSharedKeys),
								ProviderDisplayName:    to.Ptr("Keys"),
								RequiredPermissions: &armsecurityinsight.RequiredPermissions{
									Action: to.Ptr(true),
								},
								Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
							}},
					},
					Publisher: to.Ptr("Qualys"),
					SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
						{
							Description: to.Ptr("Top 10 Vulerabilities detected"),
							Query:       to.Ptr("{{graphQueriesTableName}}\n | mv-expand todynamic(Detections_s)\n | extend Vulnerability = tostring(Detections_s.Results)\n | summarize count() by Vulnerability\n | top 10 by count_"),
						}},
					Title: to.Ptr("Qualys Vulnerability Management (CCP DEMO)"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateGenericUI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientCreateOrUpdateResponse{
			&armsecurityinsight.CodelessUIDataConnector{
				Name: to.Ptr("316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/316ec55e-7138-4d63-ab18-90c8a60fd1c8"),
				Etag: to.Ptr("\"1a00b074-0000-0100-0000-606ef5bd0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindGenericUI),
				Properties: &armsecurityinsight.CodelessParameters{
					ConnectorUIConfig: &armsecurityinsight.CodelessUIConnectorConfigProperties{
						Availability: &armsecurityinsight.Availability{
							IsPreview: to.Ptr(true),
							Status:    to.Ptr[int32](1),
						},
						ConnectivityCriteria: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesConnectivityCriteriaItem{
							{
								Type: to.Ptr(armsecurityinsight.ConnectivityTypeIsConnectedQuery),
								Value: []*string{
									to.Ptr("{{graphQueriesTableName}}\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)")},
							}},
						DataTypes: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesDataTypesItem{
							{
								Name:                  to.Ptr("{{graphQueriesTableName}}"),
								LastDataReceivedQuery: to.Ptr("{{graphQueriesTableName}}\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"),
							}},
						DescriptionMarkdown: to.Ptr("The [Qualys Vulnerability Management (VM)](https://www.qualys.com/apps/vulnerability-management/) data connector provides the capability to ingest vulnerability host detection data into Azure Sentinel through the Qualys API. The connector provides visibility into host detection data from vulerability scans. This connector provides Azure Sentinel the capability to view dashboards, create custom alerts, and improve investigation "),
						GraphQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesGraphQueriesItem{
							{
								BaseQuery:  to.Ptr("{{graphQueriesTableName}}"),
								Legend:     to.Ptr("{{graphQueriesTableName}}"),
								MetricName: to.Ptr("Total data received"),
							}},
						GraphQueriesTableName: to.Ptr("QualysHostDetection_CL"),
						InstructionSteps: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesInstructionStepsItem{
							{
								Description: to.Ptr(">**NOTE:** This connector uses Azure Functions to connect to Qualys VM to pull its logs into Azure Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr(">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**STEP 1 - Configuration steps for the Qualys VM API**\n\n1. Log into the Qualys Vulnerability Management console with an administrator account, select the **Users** tab and the **Users** subtab. \n2. Click on the **New** drop-down menu and select **Users..**\n3. Create a username and password for the API account. \n4. In the **User Roles** tab, ensure the account role is set to **Manager** and access is allowed to **GUI** and **API**\n4. Log out of the administrator account and log into the console with the new API credentials for validation, then log out of the API account. \n5. Log back into the console using an administrator account and modify the API accounts User Roles, removing access to **GUI**. \n6. Save all changes."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Qualys VM connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as the Qualys VM API Authorization Key(s), readily available."),
								Instructions: []*armsecurityinsight.InstructionStepsInstructionsItem{
									{
										Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
										Parameters: map[string]interface{}{
											"fillWith": []interface{}{
												"WorkspaceId",
											},
											"label": "Workspace ID",
										},
									},
									{
										Type: to.Ptr(armsecurityinsight.SettingTypeCopyableLabel),
										Parameters: map[string]interface{}{
											"fillWith": []interface{}{
												"PrimaryKey",
											},
											"label": "Primary Key",
										},
									}},
								Title: to.Ptr(""),
							},
							{
								Description: to.Ptr("Use this method for automated deployment of the Qualys VM connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n	[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinelqualysvmazuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Workspace ID**, **Workspace Key**, **API Username**, **API Password** , update the **URI**, and any additional URI **Filter Parameters** (each filter should be separated by an \"&\" symbol, no spaces.) \n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348) -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format. \n - The default **Time Interval** is set to pull the last five (5) minutes of data. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly (in the function.json file, post deployment) to prevent overlapping data ingestion. \n> - Note: If using Azure Key Vault secrets for any of the values above, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy."),
								Title: to.Ptr("Option 1 - Azure Resource Manager (ARM) Template"),
							},
							{
								Description: to.Ptr("Use the following step-by-step instructions to deploy the Quayls VM connector manually with Azure Functions."),
								Title:       to.Ptr("Option 2 - Manual Deployment of Azure Functions"),
							},
							{
								Description: to.Ptr("**1. Create a Function App**\n\n1.  From the Azure Portal, navigate to [Function App](https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.Web%2Fsites/kind/functionapp), and select **+ Add**.\n2. In the **Basics** tab, ensure Runtime stack is set to **Powershell Core**. \n3. In the **Hosting** tab, ensure the **Consumption (Serverless)** plan type is selected.\n4. Make other preferrable configuration changes, if needed, then click **Create**."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**2. Import Function App Code**\n\n1. In the newly created Function App, select **Functions** on the left pane and click **+ New Function**.\n2. Select **Timer Trigger**.\n3. Enter a unique Function **Name** and leave the default cron schedule of every 5 minutes, then click **Create**.\n5. Click on **Code + Test** on the left pane. \n6. Copy the [Function App Code](https://aka.ms/sentinelqualysvmazurefunctioncode) and paste into the Function App `run.ps1` editor.\n7. Click **Save**."),
								Title:       to.Ptr(""),
							},
							{
								Description: to.Ptr("**3. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following seven (7) application settings individually, with their respective string values (case-sensitive): \n		apiUsername\n		apiPassword\n		workspaceID\n		workspaceKey\n		uri\n		filterParameters\n		timeInterval\n> - Enter the URI that corresponds to your region. The complete list of API Server URLs can be [found here](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf#G4.735348). The `uri` value must follow the following schema: `https://<API Server>/api/2.0/fo/asset/host/vm/detection/?action=list&vm_processed_after=` -- There is no need to add a time suffix to the URI, the Function App will dynamically append the Time Value to the URI in the proper format.\n> - Add any additional filter parameters, for the `filterParameters` variable, that need to be appended to the URI. Each parameter should be seperated by an \"&\" symbol and should not include any spaces.\n> - Set the `timeInterval` (in minutes) to the value of `5` to correspond to the Timer Trigger of every `5` minutes. If the time interval needs to be modified, it is recommended to change the Function App Timer Trigger accordingly to prevent overlapping data ingestion.\n> - Note: If using Azure Key Vault, use the`@Microsoft.KeyVault(SecretUri={Security Identifier})`schema in place of the string values. Refer to [Key Vault references documentation](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) for further details.\n4. Once all application settings have been entered, click **Save**."),
								Title: to.Ptr(""),
							},
							{
								Description: to.Ptr("**4. Configure the host.json**.\n\nDue to the potentially large amount of Qualys host detection data being ingested, it can cause the execution time to surpass the default Function App timeout of five (5) minutes. Increase the default timeout duration to the maximum of ten (10) minutes, under the Consumption Plan, to allow more time for the Function App to execute.\n\n1. In the Function App, select the Function App Name and select the **App Service Editor** blade.\n2. Click **Go** to open the editor, then select the **host.json** file under the **wwwroot** directory.\n3. Add the line `\"functionTimeout\": \"00:10:00\",` above the `managedDependancy` line \n4. Ensure **SAVED** appears on the top right corner of the editor, then exit the editor.\n\n> NOTE: If a longer timeout duration is required, consider upgrading to an [App Service Plan](https://docs.microsoft.com/azure/azure-functions/functions-scale#timeout)"),
								Title:       to.Ptr(""),
							}},
						Permissions: &armsecurityinsight.Permissions{
							Customs: []*armsecurityinsight.PermissionsCustomsItem{
								{
									Name:        to.Ptr("Microsoft.Web/sites permissions"),
									Description: to.Ptr("Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."),
								},
								{
									Name:        to.Ptr("Qualys API Key"),
									Description: to.Ptr("A Qualys VM API username and password is required. [See the documentation to learn more about Qualys VM API](https://www.qualys.com/docs/qualys-api-vmpc-user-guide.pdf)."),
								}},
							ResourceProvider: []*armsecurityinsight.PermissionsResourceProviderItem{
								{
									PermissionsDisplayText: to.Ptr("read and write permissions on the workspace are required."),
									Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspaces),
									ProviderDisplayName:    to.Ptr("Workspace"),
									RequiredPermissions: &armsecurityinsight.RequiredPermissions{
										Delete: to.Ptr(true),
										Read:   to.Ptr(true),
										Write:  to.Ptr(true),
									},
									Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
								},
								{
									PermissionsDisplayText: to.Ptr("read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key)."),
									Provider:               to.Ptr(armsecurityinsight.ProviderNameMicrosoftOperationalInsightsWorkspacesSharedKeys),
									ProviderDisplayName:    to.Ptr("Keys"),
									RequiredPermissions: &armsecurityinsight.RequiredPermissions{
										Action: to.Ptr(true),
									},
									Scope: to.Ptr(armsecurityinsight.PermissionProviderScopeWorkspace),
								}},
						},
						Publisher: to.Ptr("Qualys"),
						SampleQueries: []*armsecurityinsight.CodelessUIConnectorConfigPropertiesSampleQueriesItem{
							{
								Description: to.Ptr("Top 10 Vulerabilities detected"),
								Query:       to.Ptr("{{graphQueriesTableName}}\n | mv-expand todynamic(Detections_s)\n | extend Vulnerability = tostring(Detections_s.Results)\n | summarize count() by Vulnerability\n | top 10 by count_"),
							}},
						Title: to.Ptr("Qualys Vulnerability Management (CCP DEMO)"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateGenericUI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateThreatIntelligenceTaxiiDataConnector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a Threat Intelligence Taxii data connector."},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		&armsecurityinsight.TiTaxiiDataConnector{
			Etag: to.Ptr("d12423f6-a60b-4ca5-88c0-feb1a182d0f0"),
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligenceTaxii),
			Properties: &armsecurityinsight.TiTaxiiDataConnectorProperties{
				TenantID:     to.Ptr("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
				CollectionID: to.Ptr("135"),
				DataTypes: &armsecurityinsight.TiTaxiiDataConnectorDataTypes{
					TaxiiClient: &armsecurityinsight.TiTaxiiDataConnectorDataTypesTaxiiClient{
						State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
					},
				},
				FriendlyName:        to.Ptr("testTaxii"),
				Password:            to.Ptr("--"),
				PollingFrequency:    to.Ptr(armsecurityinsight.PollingFrequencyOnceADay),
				TaxiiLookbackPeriod: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T13:00:30.123Z"); return t }()),
				TaxiiServer:         to.Ptr("https://limo.anomali.com/api/v1/taxii2/feeds"),
				UserName:            to.Ptr("--"),
				WorkspaceID:         to.Ptr("dd124572-4962-4495-9bd2-9dade12314b4"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateThreatIntelligenceTaxiiDataConnector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientCreateOrUpdateResponse{
			&armsecurityinsight.TiTaxiiDataConnector{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("d12423f6-a60b-4ca5-88c0-feb1a182d0f0"),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligenceTaxii),
				Properties: &armsecurityinsight.TiTaxiiDataConnectorProperties{
					TenantID:     to.Ptr("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
					CollectionID: to.Ptr("135"),
					DataTypes: &armsecurityinsight.TiTaxiiDataConnectorDataTypes{
						TaxiiClient: &armsecurityinsight.TiTaxiiDataConnectorDataTypesTaxiiClient{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
					FriendlyName:        to.Ptr("testTaxii"),
					PollingFrequency:    to.Ptr(armsecurityinsight.PollingFrequencyOnceADay),
					TaxiiLookbackPeriod: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T13:00:30.123Z"); return t }()),
					TaxiiServer:         to.Ptr("https://limo.anomali.com/api/v1/taxii2/feeds"),
					WorkspaceID:         to.Ptr("28e5f051-34cb-4208-9037-693e5342a871"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateThreatIntelligenceTaxiiDataConnector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateOfficeDataConnetor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an Office365 data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		&armsecurityinsight.OfficeDataConnector{
			Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindOffice365),
			Properties: &armsecurityinsight.OfficeDataConnectorProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
				DataTypes: &armsecurityinsight.OfficeDataConnectorDataTypes{
					Exchange: &armsecurityinsight.OfficeDataConnectorDataTypesExchange{
						State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
					},
					SharePoint: &armsecurityinsight.OfficeDataConnectorDataTypesSharePoint{
						State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
					},
					Teams: &armsecurityinsight.OfficeDataConnectorDataTypesTeams{
						State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateOfficeDataConnetor.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientCreateOrUpdateResponse{
			&armsecurityinsight.OfficeDataConnector{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindOffice365),
				Properties: &armsecurityinsight.OfficeDataConnectorProperties{
					TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
					DataTypes: &armsecurityinsight.OfficeDataConnectorDataTypes{
						Exchange: &armsecurityinsight.OfficeDataConnectorDataTypesExchange{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
						SharePoint: &armsecurityinsight.OfficeDataConnectorDataTypesSharePoint{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
						Teams: &armsecurityinsight.OfficeDataConnectorDataTypesTeams{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateOfficeDataConnetor.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateThreatIntelligenceDataConnector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an Threat Intelligence Platform data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		&armsecurityinsight.TIDataConnector{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligence),
			Properties: &armsecurityinsight.TIDataConnectorProperties{
				TenantID: to.Ptr("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
				DataTypes: &armsecurityinsight.TIDataConnectorDataTypes{
					Indicators: &armsecurityinsight.TIDataConnectorDataTypesIndicators{
						State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
					},
				},
				TipLookbackPeriod: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T13:00:30.123Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateThreatIntelligenceDataConnector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorsClientCreateOrUpdateResponse{
			&armsecurityinsight.TIDataConnector{
				Name: to.Ptr("73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Type: to.Ptr("Microsoft.SecurityInsights/dataConnectors"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/dataConnectors/73e01a99-5cd7-4139-a149-9f2736ff2ab5"),
				Etag: to.Ptr("\"0300bf09-0000-0000-0000-5c37296e0000\""),
				Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligence),
				Properties: &armsecurityinsight.TIDataConnectorProperties{
					TenantID: to.Ptr("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
					DataTypes: &armsecurityinsight.TIDataConnectorDataTypes{
						Indicators: &armsecurityinsight.TIDataConnectorDataTypesIndicators{
							State: to.Ptr(armsecurityinsight.DataTypeStateEnabled),
						},
					},
					TipLookbackPeriod: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T13:00:30.123Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CreateThreatIntelligenceDataConnector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnectors_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DeleteAPIPolling.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a APIPolling data connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DeleteAPIPolling.json: %v", err)
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DeleteGenericUI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a GenericUI data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err = client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DeleteGenericUI.json: %v", err)
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DeleteOfficeDataConnetor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an Office365 data connector"},
	})
	client = armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err = client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"73e01a99-5cd7-4139-a149-9f2736ff2ab5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DeleteOfficeDataConnetor.json: %v", err)
	}
}

func TestDataConnectors_Connect(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/ConnectAPIPolling.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connect an APIPolling data connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Connect(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		armsecurityinsight.DataConnectorConnectBody{
			APIKey: to.Ptr("<apiKey>"),
			Kind:   to.Ptr(armsecurityinsight.ConnectAuthKindAPIKey),
			RequestConfigUserInputValues: []interface{}{
				map[string]interface{}{
					"displayText":      "Organization Name",
					"placeHolderName":  "{{placeHolder1}}",
					"placeHolderValue": "somePlaceHolderValue",
					"requestObjectKey": "apiEndpoint",
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/ConnectAPIPolling.json: %v", err)
	}
}

func TestDataConnectors_Disconnect(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DisconnectAPIPolling.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disconnect an APIPolling data connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Disconnect(ctx,
		"myRg",
		"myWorkspace",
		"316ec55e-7138-4d63-ab18-90c8a60fd1c8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/DisconnectAPIPolling.json: %v", err)
	}
}

func TestDataConnectorsCheckRequirements_Post(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoAuthorization.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for AAD - no authorization."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.AADCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureActiveDirectory),
			Properties: &armsecurityinsight.AADCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoAuthorization.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoAuthorization.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoLicense.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for AAD - no license."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.AADCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureActiveDirectory),
			Properties: &armsecurityinsight.AADCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoLicense.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoLicense.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for AAD."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.AADCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureActiveDirectory),
			Properties: &armsecurityinsight.AADCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureSecurityCenter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for ASC."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.ASCCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindAzureSecurityCenter),
			Properties: &armsecurityinsight.ASCCheckRequirementsProperties{
				SubscriptionID: to.Ptr("c0688291-89d7-4bed-87a2-a7b1bff43f4c"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureSecurityCenter.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsAzureSecurityCenter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsDynamics365.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for Dynamics365."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.Dynamics365CheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindDynamics365),
			Properties: &armsecurityinsight.Dynamics365CheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsDynamics365.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsDynamics365.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftCloudAppSecurity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for Mcas."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.MCASCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftCloudAppSecurity),
			Properties: &armsecurityinsight.MCASCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftCloudAppSecurity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftCloudAppSecurity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMdatp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for Mdatp."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.MCASCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftCloudAppSecurity),
			Properties: &armsecurityinsight.MCASCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMdatp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMdatp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for MicrosoftThreatIntelligence."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.MSTICheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftThreatIntelligence),
			Properties: &armsecurityinsight.MSTICheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatIntelligence.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatProtection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for MicrosoftThreatProtection."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.MtpCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindMicrosoftThreatProtection),
			Properties: &armsecurityinsight.MTPCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatProtection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatProtection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeATP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for OfficeATP."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.OfficeATPCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindOfficeATP),
			Properties: &armsecurityinsight.OfficeATPCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeATP.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeATP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeIRM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for OfficeIRM."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.OfficeIRMCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindOfficeIRM),
			Properties: &armsecurityinsight.OfficeIRMCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeIRM.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsOfficeIRM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligenceTaxii.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for TI Taxii."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.TiTaxiiCheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligenceTaxii),
			Properties: &armsecurityinsight.TiTaxiiCheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligenceTaxii.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligenceTaxii.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check requirements for TI."},
	})
	client = armsecurityinsight.NewDataConnectorsCheckRequirementsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err = client.Post(ctx,
		"myRg",
		"myWorkspace",
		&armsecurityinsight.TICheckRequirements{
			Kind: to.Ptr(armsecurityinsight.DataConnectorKindThreatIntelligence),
			Properties: &armsecurityinsight.TICheckRequirementsProperties{
				TenantID: to.Ptr("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligence.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.DataConnectorRequirementsState{
			AuthorizationState: to.Ptr(armsecurityinsight.DataConnectorAuthorizationStateValid),
			LicenseState:       to.Ptr(armsecurityinsight.DataConnectorLicenseStateValid),
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectorRequirementsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectorRequirementsState)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicator_CreateIndicator(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/CreateThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new Threat Intelligence"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.CreateIndicator(ctx,
		"myRg",
		"myWorkspace",
		armsecurityinsight.ThreatIntelligenceIndicatorModelForRequestBody{
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
			Properties: &armsecurityinsight.ThreatIntelligenceIndicatorProperties{
				Description:        to.Ptr("debugging indicators"),
				Confidence:         to.Ptr[int32](78),
				CreatedByRef:       to.Ptr("contoso@contoso.com"),
				DisplayName:        to.Ptr("new schema"),
				ExternalReferences: []*armsecurityinsight.ThreatIntelligenceExternalReference{},
				GranularMarkings:   []*armsecurityinsight.ThreatIntelligenceGranularMarkingModel{},
				KillChainPhases:    []*armsecurityinsight.ThreatIntelligenceKillChainPhase{},
				Labels:             []*string{},
				Modified:           to.Ptr(""),
				Pattern:            to.Ptr("[url:value = 'https://www.contoso.com']"),
				PatternType:        to.Ptr("url"),
				Revoked:            to.Ptr(false),
				Source:             to.Ptr("Azure Sentinel"),
				ThreatIntelligenceTags: []*string{
					to.Ptr("new schema")},
				ThreatTypes: []*string{
					to.Ptr("compromised")},
				ValidFrom:  to.Ptr("2021-09-15T17:44:00.114052Z"),
				ValidUntil: to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/CreateThreatIntelligence.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ThreatIntelligenceInformation{
			Name: to.Ptr("180105c7-a28d-b1a2-4a78-234f6ec80fd6"),
			Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
			ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/180105c7-a28d-b1a2-4a78-234f6ec80fd6"),
			Etag: to.Ptr("\"0000322c-0000-0800-0000-5e976c960000\""),
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
		}
		if !reflect.DeepEqual(exampleRes, res.ThreatIntelligenceInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThreatIntelligenceInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/CreateThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicator_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/GetThreatIntelligenceById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"View a threat intelligence indicator by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"e16ef847-962e-d7b6-9c8b-a33e4bd30e47",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/GetThreatIntelligenceById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ThreatIntelligenceInformation{
			Name: to.Ptr("e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
			Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
			ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
			Etag: to.Ptr("\"00002a2c-0000-0800-0000-5e97683b0000\""),
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
		}
		if !reflect.DeepEqual(exampleRes, res.ThreatIntelligenceInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThreatIntelligenceInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/GetThreatIntelligenceById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicator_Create(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/UpdateThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a threat Intelligence indicator"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.Create(ctx,
		"myRg",
		"myWorkspace",
		"d9cd6f0b-96b9-3984-17cd-a779d1e15a93",
		armsecurityinsight.ThreatIntelligenceIndicatorModelForRequestBody{
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
			Properties: &armsecurityinsight.ThreatIntelligenceIndicatorProperties{
				Description:        to.Ptr("debugging indicators"),
				Confidence:         to.Ptr[int32](78),
				CreatedByRef:       to.Ptr("contoso@contoso.com"),
				DisplayName:        to.Ptr("new schema"),
				ExternalReferences: []*armsecurityinsight.ThreatIntelligenceExternalReference{},
				GranularMarkings:   []*armsecurityinsight.ThreatIntelligenceGranularMarkingModel{},
				KillChainPhases:    []*armsecurityinsight.ThreatIntelligenceKillChainPhase{},
				Labels:             []*string{},
				Modified:           to.Ptr(""),
				Pattern:            to.Ptr("[url:value = 'https://www.contoso.com']"),
				PatternType:        to.Ptr("url"),
				Revoked:            to.Ptr(false),
				Source:             to.Ptr("Azure Sentinel"),
				ThreatIntelligenceTags: []*string{
					to.Ptr("new schema")},
				ThreatTypes: []*string{
					to.Ptr("compromised")},
				ValidFrom:  to.Ptr("2020-04-15T17:44:00.114052Z"),
				ValidUntil: to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/UpdateThreatIntelligence.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ThreatIntelligenceInformation{
			Name: to.Ptr("180105c7-a28d-b1a2-4a78-234f6ec80fd6"),
			Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
			ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/180105c7-a28d-b1a2-4a78-234f6ec80fd6"),
			Etag: to.Ptr("\"0000322c-0000-0800-0000-5e976c960000\""),
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
		}
		if !reflect.DeepEqual(exampleRes, res.ThreatIntelligenceInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThreatIntelligenceInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/UpdateThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicator_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/DeleteThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a threat intelligence indicator"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"d9cd6f0b-96b9-3984-17cd-a779d1e15a93",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/DeleteThreatIntelligence.json: %v", err)
	}
}

func TestThreatIntelligenceIndicator_QueryIndicators(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/QueryThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Query threat intelligence indicators as per filtering criteria"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	pager := client.QueryIndicators("myRg",
		"myWorkspace",
		armsecurityinsight.ThreatIntelligenceFilteringCriteria{
			MaxConfidence: to.Ptr[int32](80),
			MaxValidUntil: to.Ptr("2021-04-25T17:44:00.114052Z"),
			MinConfidence: to.Ptr[int32](25),
			MinValidUntil: to.Ptr("2021-04-05T17:44:00.114052Z"),
			PageSize:      to.Ptr[int32](100),
			SortBy: []*armsecurityinsight.ThreatIntelligenceSortingCriteria{
				{
					ItemKey:   to.Ptr("lastUpdatedTimeUtc"),
					SortOrder: to.Ptr(armsecurityinsight.ThreatIntelligenceSortingCriteriaEnumDescending),
				}},
			Sources: []*string{
				to.Ptr("Azure Sentinel")},
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/QueryThreatIntelligence.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.ThreatIntelligenceInformationList{
			Value: []*armsecurityinsight.ThreatIntelligenceInformation{
				{
					Name: to.Ptr("27d963e6-e6e4-e0f9-e9d7-c53985b3bbe8"),
					Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
					ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/27d963e6-e6e4-e0f9-e9d7-c53985b3bbe8"),
					Etag: to.Ptr("\"00002f2c-0000-0800-0000-5e976a8e0000\""),
					Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
				},
				{
					Name: to.Ptr("e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
					Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
					ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
					Etag: to.Ptr("\"00002a2c-0000-0800-0000-5e97683b0000\""),
					Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ThreatIntelligenceInformationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ThreatIntelligenceInformationList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/QueryThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicator_AppendTags(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/AppendTagsThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Append tags to a threat intelligence indicator"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	_, err := client.AppendTags(ctx,
		"myRg",
		"myWorkspace",
		"d9cd6f0b-96b9-3984-17cd-a779d1e15a93",
		armsecurityinsight.ThreatIntelligenceAppendTags{
			ThreatIntelligenceTags: []*string{
				to.Ptr("tag1"),
				to.Ptr("tag2")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/AppendTagsThreatIntelligence.json: %v", err)
	}
}

func TestThreatIntelligenceIndicator_ReplaceTags(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/ReplaceTagsThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Replace tags to a Threat Intelligence"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.ReplaceTags(ctx,
		"myRg",
		"myWorkspace",
		"d9cd6f0b-96b9-3984-17cd-a779d1e15a93",
		armsecurityinsight.ThreatIntelligenceIndicatorModelForRequestBody{
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
			Etag: to.Ptr("\"0000262c-0000-0800-0000-5e9767060000\""),
			Properties: &armsecurityinsight.ThreatIntelligenceIndicatorProperties{
				ThreatIntelligenceTags: []*string{
					to.Ptr("patching tags")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/ReplaceTagsThreatIntelligence.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ThreatIntelligenceInformation{
			Name: to.Ptr("e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
			Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
			ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
			Etag: to.Ptr("\"00002a2c-0000-0800-0000-5e97683b0000\""),
			Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
		}
		if !reflect.DeepEqual(exampleRes, res.ThreatIntelligenceInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThreatIntelligenceInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/ReplaceTagsThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicators_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/GetThreatIntelligence.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all threat intelligence indicators"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorsClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		&armsecurityinsight.ThreatIntelligenceIndicatorsClientListOptions{Filter: nil,
			Orderby:   nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/GetThreatIntelligence.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.ThreatIntelligenceInformationList{
			Value: []*armsecurityinsight.ThreatIntelligenceInformation{
				{
					Name: to.Ptr("27d963e6-e6e4-e0f9-e9d7-c53985b3bbe8"),
					Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
					ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/27d963e6-e6e4-e0f9-e9d7-c53985b3bbe8"),
					Etag: to.Ptr("\"00002f2c-0000-0800-0000-5e976a8e0000\""),
					Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
				},
				{
					Name: to.Ptr("e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
					Type: to.Ptr("Microsoft.SecurityInsights/ThreatIntelligence"),
					ID:   to.Ptr("/subscriptions/bd794837-4d29-4647-9105-6339bfdb4e6a/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/ThreatIntelligence/e16ef847-962e-d7b6-9c8b-a33e4bd30e47"),
					Etag: to.Ptr("\"00002a2c-0000-0800-0000-5e97683b0000\""),
					Kind: to.Ptr(armsecurityinsight.ThreatIntelligenceResourceKindEnumIndicator),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ThreatIntelligenceInformationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ThreatIntelligenceInformationList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/GetThreatIntelligence.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestThreatIntelligenceIndicatorMetrics_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/CollectThreatIntelligenceMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get threat intelligence indicators metrics."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewThreatIntelligenceIndicatorMetricsClient("bd794837-4d29-4647-9105-6339bfdb4e6a", cred, &options)
	res, err := client.List(ctx,
		"myRg",
		"myWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/CollectThreatIntelligenceMetrics.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.ThreatIntelligenceMetricsList{
			Value: []*armsecurityinsight.ThreatIntelligenceMetrics{
				{
					Properties: &armsecurityinsight.ThreatIntelligenceMetric{
						LastUpdatedTimeUTC: to.Ptr("2021-09-01T19:44:44.117403Z"),
						PatternTypeMetrics: []*armsecurityinsight.ThreatIntelligenceMetricEntity{
							{
								MetricName:  to.Ptr("url"),
								MetricValue: to.Ptr[int32](20),
							}},
						SourceMetrics: []*armsecurityinsight.ThreatIntelligenceMetricEntity{
							{
								MetricName:  to.Ptr("Azure Sentinel"),
								MetricValue: to.Ptr[int32](10315),
							},
							{
								MetricName:  to.Ptr("zinga"),
								MetricValue: to.Ptr[int32](2),
							}},
						ThreatTypeMetrics: []*armsecurityinsight.ThreatIntelligenceMetricEntity{
							{
								MetricName:  to.Ptr("compromised"),
								MetricValue: to.Ptr[int32](20),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ThreatIntelligenceMetricsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThreatIntelligenceMetricsList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/threatintelligence/CollectThreatIntelligenceMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestOfficeConsents_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/GetOfficeConsents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all office consents."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewOfficeConsentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/GetOfficeConsents.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.OfficeConsentList{
			Value: []*armsecurityinsight.OfficeConsent{
				{
					Name: to.Ptr("04e5fd05-ff86-4b97-b8d2-1c20933cb46c"),
					Type: to.Ptr("Microsoft.SecurityInsights/officeConsents"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/officeConsents/04e5fd05-ff86-4b97-b8d2-1c20933cb46c"),
					Properties: &armsecurityinsight.OfficeConsentProperties{
						ConsentID: to.Ptr("04e5fd05-ff86-4b97-b8d2-1c20933cb46c"),
						TenantID:  to.Ptr("5460b3d2-1e7b-4757-ad54-c858c7e3f252"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OfficeConsentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OfficeConsentList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/GetOfficeConsents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOfficeConsents_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/GetOfficeConsentsById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an office consent."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewOfficeConsentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"04e5fd05-ff86-4b97-b8d2-1c20933cb46c",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/GetOfficeConsentsById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.OfficeConsent{
			Name: to.Ptr("04e5fd05-ff86-4b97-b8d2-1c20933cb46c"),
			Type: to.Ptr("Microsoft.SecurityInsights/officeConsents"),
			ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/officeConsents/04e5fd05-ff86-4b97-b8d2-1c20933cb46c"),
			Properties: &armsecurityinsight.OfficeConsentProperties{
				ConsentID: to.Ptr("04e5fd05-ff86-4b97-b8d2-1c20933cb46c"),
				TenantID:  to.Ptr("5460b3d2-1e7b-4757-ad54-c858c7e3f252"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OfficeConsent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OfficeConsent)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/GetOfficeConsentsById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOfficeConsents_Delete(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/DeleteOfficeConsents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an office consent."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewOfficeConsentsClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myWorkspace",
		"04e5fd05-ff86-4b97-b8d2-1c20933cb46c",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/officeConsents/DeleteOfficeConsents.json: %v", err)
	}
}

func TestEntityQueryTemplates_List(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueryTemplates/GetEntityQueryTemplates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all entity query templates."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityQueryTemplatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	pager := client.List("myRg",
		"myWorkspace",
		&armsecurityinsight.EntityQueryTemplatesClientListOptions{Kind: to.Ptr(armsecurityinsight.Enum39Activity)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueryTemplates/GetEntityQueryTemplates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityinsight.EntityQueryTemplateList{
			Value: []armsecurityinsight.EntityQueryTemplateClassification{
				&armsecurityinsight.ActivityEntityQueryTemplate{
					Name: to.Ptr("37ca3555-c135-4a73-a65e-9c1d00323f5d"),
					Type: to.Ptr("Microsoft.SecurityInsights/entityQueryTemplates"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueryTemplates/37ca3555-c135-4a73-a65e-9c1d00323f5d"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryTemplateKindActivity),
					Properties: &armsecurityinsight.ActivityEntityQueryTemplateProperties{
						Description: to.Ptr("Account deleted on host"),
						Content:     to.Ptr("On '{{Computer}}' the account '{{TargetAccount}}' was deleted by '{{AddedBy}}'"),
						DataTypes: []*armsecurityinsight.DataTypeDefinitions{
							{
								DataType: to.Ptr("AuditLogs"),
							},
							{
								DataType: to.Ptr("SecurityEvent"),
							}},
						EntitiesFilter: map[string][]*string{
							"Host_OsFamily": {
								to.Ptr("Windows")},
						},
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeHost),
						QueryDefinitions: &armsecurityinsight.ActivityEntityQueryTemplatePropertiesQueryDefinitions{
							Query: to.Ptr("let GetAccountActions = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){\nSecurityEvent\n| where EventID in (4725, 4726, 4767, 4720, 4722, 4723, 4724)\n// parsing for Host to handle variety of conventions coming from data\n| extend Host_HostName = case(\nComputer has '@', tostring(split(Computer, '@')[0]),\nComputer has '\\\\', tostring(split(Computer, '\\\\')[1]),\nComputer has '.', tostring(split(Computer, '.')[0]),\nComputer\n)\n| extend Host_NTDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', tostring(split(Computer, '.')[-2]), \nComputer\n)\n| extend Host_DnsDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), \nComputer\n)\n| where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) \nor (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) \nor v_Host_AzureID =~ _ResourceId \nor v_Host_OMSAgentID == SourceComputerId\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, SubjectUserName, SubjectUserSid, _ResourceId, SourceComputerId\n| extend AddedBy = SubjectUserName\n// Future support for Activities\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount\n};\nGetAccountActions('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')\n \n| where EventID == 4726 "),
						},
						RequiredInputFieldsSets: [][]*string{
							{
								to.Ptr("Host_HostName"),
								to.Ptr("Host_NTDomain")},
							{
								to.Ptr("Host_HostName"),
								to.Ptr("Host_DnsDomain")},
							{
								to.Ptr("Host_AzureID")},
							{
								to.Ptr("Host_OMSAgentID")}},
						Title: to.Ptr("An account was deleted on this host"),
					},
				},
				&armsecurityinsight.ActivityEntityQueryTemplate{
					Name: to.Ptr("97a1d515-abf2-4231-9a35-985f9de0bb91"),
					Type: to.Ptr("Microsoft.SecurityInsights/entityQueryTemplates"),
					ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueryTemplates/97a1d515-abf2-4231-9a35-985f9de0bb91"),
					Kind: to.Ptr(armsecurityinsight.EntityQueryTemplateKindActivity),
					Properties: &armsecurityinsight.ActivityEntityQueryTemplateProperties{
						Description: to.Ptr("Account deleted on host"),
						Content:     to.Ptr("On '{{Computer}}' the account '{{TargetAccount}}' was deleted by '{{AddedBy}}'"),
						DataTypes: []*armsecurityinsight.DataTypeDefinitions{
							{
								DataType: to.Ptr("AuditLogs"),
							},
							{
								DataType: to.Ptr("SecurityEvent"),
							}},
						EntitiesFilter: map[string][]*string{
							"Host_OsFamily": {
								to.Ptr("Windows")},
						},
						InputEntityType: to.Ptr(armsecurityinsight.EntityTypeHost),
						QueryDefinitions: &armsecurityinsight.ActivityEntityQueryTemplatePropertiesQueryDefinitions{
							Query: to.Ptr("let GetAccountActions = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){\nSecurityEvent\n| where EventID in (4725, 4726, 4767, 4720, 4722, 4723, 4724)\n// parsing for Host to handle variety of conventions coming from data\n| extend Host_HostName = case(\nComputer has '@', tostring(split(Computer, '@')[0]),\nComputer has '\\\\', tostring(split(Computer, '\\\\')[1]),\nComputer has '.', tostring(split(Computer, '.')[0]),\nComputer\n)\n| extend Host_NTDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', tostring(split(Computer, '.')[-2]), \nComputer\n)\n| extend Host_DnsDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), \nComputer\n)\n| where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) \nor (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) \nor v_Host_AzureID =~ _ResourceId \nor v_Host_OMSAgentID == SourceComputerId\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, SubjectUserName, SubjectUserSid, _ResourceId, SourceComputerId\n| extend AddedBy = SubjectUserName\n// Future support for Activities\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount\n};\nGetAccountActions('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')\n \n| where EventID == 4726 "),
						},
						RequiredInputFieldsSets: [][]*string{
							{
								to.Ptr("Host_HostName"),
								to.Ptr("Host_NTDomain")},
							{
								to.Ptr("Host_HostName"),
								to.Ptr("Host_DnsDomain")},
							{
								to.Ptr("Host_AzureID")},
							{
								to.Ptr("Host_OMSAgentID")}},
						Title: to.Ptr("An account was deleted on this host"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EntityQueryTemplateList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EntityQueryTemplateList)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueryTemplates/GetEntityQueryTemplates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntityQueryTemplates_Get(t *testing.T) {
	// From example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueryTemplates/GetActivityEntityQueryTemplateById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Activity entity query template."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityinsight.NewEntityQueryTemplatesClient("d0cfe6b2-9ac0-4464-9919-dccaee2e48c0", cred, &options)
	res, err := client.Get(ctx,
		"myRg",
		"myWorkspace",
		"07da3cc8-c8ad-4710-a44e-334cdcb7882b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueryTemplates/GetActivityEntityQueryTemplateById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityinsight.EntityQueryTemplatesClientGetResponse{
			&armsecurityinsight.ActivityEntityQueryTemplate{
				Name: to.Ptr("07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Type: to.Ptr("Microsoft.SecurityInsights/entityQueryTemplate"),
				ID:   to.Ptr("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace/providers/Microsoft.SecurityInsights/entityQueryTemplates/07da3cc8-c8ad-4710-a44e-334cdcb7882b"),
				Kind: to.Ptr(armsecurityinsight.EntityQueryTemplateKindActivity),
				Properties: &armsecurityinsight.ActivityEntityQueryTemplateProperties{
					Description: to.Ptr("Account deleted on host"),
					Content:     to.Ptr("On '{{Computer}}' the account '{{TargetAccount}}' was deleted by '{{AddedBy}}'"),
					DataTypes: []*armsecurityinsight.DataTypeDefinitions{
						{
							DataType: to.Ptr("AuditLogs"),
						},
						{
							DataType: to.Ptr("SecurityEvent"),
						}},
					EntitiesFilter: map[string][]*string{
						"Host_OsFamily": {
							to.Ptr("Windows")},
					},
					InputEntityType: to.Ptr(armsecurityinsight.EntityTypeHost),
					QueryDefinitions: &armsecurityinsight.ActivityEntityQueryTemplatePropertiesQueryDefinitions{
						Query: to.Ptr("let GetAccountActions = (v_Host_Name:string, v_Host_NTDomain:string, v_Host_DnsDomain:string, v_Host_AzureID:string, v_Host_OMSAgentID:string){\nSecurityEvent\n| where EventID in (4725, 4726, 4767, 4720, 4722, 4723, 4724)\n// parsing for Host to handle variety of conventions coming from data\n| extend Host_HostName = case(\nComputer has '@', tostring(split(Computer, '@')[0]),\nComputer has '\\\\', tostring(split(Computer, '\\\\')[1]),\nComputer has '.', tostring(split(Computer, '.')[0]),\nComputer\n)\n| extend Host_NTDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', tostring(split(Computer, '.')[-2]), \nComputer\n)\n| extend Host_DnsDomain = case(\nComputer has '\\\\', tostring(split(Computer, '\\\\')[0]), \nComputer has '.', strcat_array(array_slice(split(Computer,'.'),-2,-1),'.'), \nComputer\n)\n| where (Host_HostName =~ v_Host_Name and Host_NTDomain =~ v_Host_NTDomain) \nor (Host_HostName =~ v_Host_Name and Host_DnsDomain =~ v_Host_DnsDomain) \nor v_Host_AzureID =~ _ResourceId \nor v_Host_OMSAgentID == SourceComputerId\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetUserName, TargetDomainName, TargetSid, SubjectUserName, SubjectUserSid, _ResourceId, SourceComputerId\n| extend AddedBy = SubjectUserName\n// Future support for Activities\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = TargetAccount\n};\nGetAccountActions('{{Host_HostName}}', '{{Host_NTDomain}}', '{{Host_DnsDomain}}', '{{Host_AzureID}}', '{{Host_OMSAgentID}}')\n \n| where EventID == 4726 "),
					},
					RequiredInputFieldsSets: [][]*string{
						{
							to.Ptr("Host_HostName"),
							to.Ptr("Host_NTDomain")},
						{
							to.Ptr("Host_HostName"),
							to.Ptr("Host_DnsDomain")},
						{
							to.Ptr("Host_AzureID")},
						{
							to.Ptr("Host_OMSAgentID")}},
					Title: to.Ptr("An account was deleted on this host"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2021-09-01-preview/examples/entityQueryTemplates/GetActivityEntityQueryTemplateById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
