//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsight

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ActionsClientListByAlertRulePager provides operations for iterating over paged responses.
type ActionsClientListByAlertRulePager struct {
	client    *ActionsClient
	current   ActionsClientListByAlertRuleResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ActionsClientListByAlertRuleResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ActionsClientListByAlertRulePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ActionsList.NextLink == nil || len(*p.current.ActionsList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ActionsClientListByAlertRulePager) NextPage(ctx context.Context) (ActionsClientListByAlertRuleResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ActionsClientListByAlertRuleResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ActionsClientListByAlertRuleResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ActionsClientListByAlertRuleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ActionsClientListByAlertRuleResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAlertRuleHandleResponse(resp)
	if err != nil {
		return ActionsClientListByAlertRuleResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AlertRuleTemplatesClientListPager provides operations for iterating over paged responses.
type AlertRuleTemplatesClientListPager struct {
	client    *AlertRuleTemplatesClient
	current   AlertRuleTemplatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AlertRuleTemplatesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AlertRuleTemplatesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertRuleTemplatesList.NextLink == nil || len(*p.current.AlertRuleTemplatesList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AlertRuleTemplatesClientListPager) NextPage(ctx context.Context) (AlertRuleTemplatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AlertRuleTemplatesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AlertRuleTemplatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AlertRuleTemplatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AlertRuleTemplatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AlertRuleTemplatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AlertRulesClientListPager provides operations for iterating over paged responses.
type AlertRulesClientListPager struct {
	client    *AlertRulesClient
	current   AlertRulesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AlertRulesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AlertRulesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertRulesList.NextLink == nil || len(*p.current.AlertRulesList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AlertRulesClientListPager) NextPage(ctx context.Context) (AlertRulesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AlertRulesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AlertRulesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AlertRulesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AlertRulesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AlertRulesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AutomationRulesClientListPager provides operations for iterating over paged responses.
type AutomationRulesClientListPager struct {
	client    *AutomationRulesClient
	current   AutomationRulesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AutomationRulesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AutomationRulesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutomationRulesList.NextLink == nil || len(*p.current.AutomationRulesList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AutomationRulesClientListPager) NextPage(ctx context.Context) (AutomationRulesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AutomationRulesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AutomationRulesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AutomationRulesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AutomationRulesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AutomationRulesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BookmarkRelationsClientListPager provides operations for iterating over paged responses.
type BookmarkRelationsClientListPager struct {
	client    *BookmarkRelationsClient
	current   BookmarkRelationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BookmarkRelationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BookmarkRelationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RelationList.NextLink == nil || len(*p.current.RelationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BookmarkRelationsClientListPager) NextPage(ctx context.Context) (BookmarkRelationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BookmarkRelationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BookmarkRelationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BookmarkRelationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BookmarkRelationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BookmarkRelationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BookmarksClientListPager provides operations for iterating over paged responses.
type BookmarksClientListPager struct {
	client    *BookmarksClient
	current   BookmarksClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BookmarksClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BookmarksClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BookmarkList.NextLink == nil || len(*p.current.BookmarkList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BookmarksClientListPager) NextPage(ctx context.Context) (BookmarksClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BookmarksClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BookmarksClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BookmarksClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BookmarksClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BookmarksClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataConnectorsClientListPager provides operations for iterating over paged responses.
type DataConnectorsClientListPager struct {
	client    *DataConnectorsClient
	current   DataConnectorsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataConnectorsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataConnectorsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataConnectorList.NextLink == nil || len(*p.current.DataConnectorList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataConnectorsClientListPager) NextPage(ctx context.Context) (DataConnectorsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataConnectorsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataConnectorsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataConnectorsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataConnectorsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DataConnectorsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EntitiesClientListPager provides operations for iterating over paged responses.
type EntitiesClientListPager struct {
	client    *EntitiesClient
	current   EntitiesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EntitiesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EntitiesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EntityList.NextLink == nil || len(*p.current.EntityList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EntitiesClientListPager) NextPage(ctx context.Context) (EntitiesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EntitiesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EntitiesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EntitiesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EntitiesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EntitiesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EntitiesRelationsClientListPager provides operations for iterating over paged responses.
type EntitiesRelationsClientListPager struct {
	client    *EntitiesRelationsClient
	current   EntitiesRelationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EntitiesRelationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EntitiesRelationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RelationList.NextLink == nil || len(*p.current.RelationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EntitiesRelationsClientListPager) NextPage(ctx context.Context) (EntitiesRelationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EntitiesRelationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EntitiesRelationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EntitiesRelationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EntitiesRelationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EntitiesRelationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EntityQueriesClientListPager provides operations for iterating over paged responses.
type EntityQueriesClientListPager struct {
	client    *EntityQueriesClient
	current   EntityQueriesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EntityQueriesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EntityQueriesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EntityQueryList.NextLink == nil || len(*p.current.EntityQueryList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EntityQueriesClientListPager) NextPage(ctx context.Context) (EntityQueriesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EntityQueriesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EntityQueriesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EntityQueriesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EntityQueriesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EntityQueriesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EntityQueryTemplatesClientListPager provides operations for iterating over paged responses.
type EntityQueryTemplatesClientListPager struct {
	client    *EntityQueryTemplatesClient
	current   EntityQueryTemplatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EntityQueryTemplatesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EntityQueryTemplatesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EntityQueryTemplateList.NextLink == nil || len(*p.current.EntityQueryTemplateList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EntityQueryTemplatesClientListPager) NextPage(ctx context.Context) (EntityQueryTemplatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EntityQueryTemplatesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EntityQueryTemplatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EntityQueryTemplatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EntityQueryTemplatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EntityQueryTemplatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// IncidentCommentsClientListPager provides operations for iterating over paged responses.
type IncidentCommentsClientListPager struct {
	client    *IncidentCommentsClient
	current   IncidentCommentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IncidentCommentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *IncidentCommentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IncidentCommentList.NextLink == nil || len(*p.current.IncidentCommentList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *IncidentCommentsClientListPager) NextPage(ctx context.Context) (IncidentCommentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return IncidentCommentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return IncidentCommentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return IncidentCommentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return IncidentCommentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return IncidentCommentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// IncidentRelationsClientListPager provides operations for iterating over paged responses.
type IncidentRelationsClientListPager struct {
	client    *IncidentRelationsClient
	current   IncidentRelationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IncidentRelationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *IncidentRelationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RelationList.NextLink == nil || len(*p.current.RelationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *IncidentRelationsClientListPager) NextPage(ctx context.Context) (IncidentRelationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return IncidentRelationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return IncidentRelationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return IncidentRelationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return IncidentRelationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return IncidentRelationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// IncidentsClientListPager provides operations for iterating over paged responses.
type IncidentsClientListPager struct {
	client    *IncidentsClient
	current   IncidentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IncidentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *IncidentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IncidentList.NextLink == nil || len(*p.current.IncidentList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *IncidentsClientListPager) NextPage(ctx context.Context) (IncidentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return IncidentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return IncidentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return IncidentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return IncidentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return IncidentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MetadataClientListPager provides operations for iterating over paged responses.
type MetadataClientListPager struct {
	client    *MetadataClient
	current   MetadataClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MetadataClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MetadataClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MetadataList.NextLink == nil || len(*p.current.MetadataList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MetadataClientListPager) NextPage(ctx context.Context) (MetadataClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MetadataClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MetadataClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MetadataClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MetadataClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return MetadataClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OfficeConsentsClientListPager provides operations for iterating over paged responses.
type OfficeConsentsClientListPager struct {
	client    *OfficeConsentsClient
	current   OfficeConsentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OfficeConsentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OfficeConsentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OfficeConsentList.NextLink == nil || len(*p.current.OfficeConsentList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OfficeConsentsClientListPager) NextPage(ctx context.Context) (OfficeConsentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OfficeConsentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OfficeConsentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OfficeConsentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OfficeConsentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OfficeConsentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsList.NextLink == nil || len(*p.current.OperationsList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SourceControlClientListRepositoriesPager provides operations for iterating over paged responses.
type SourceControlClientListRepositoriesPager struct {
	client    *SourceControlClient
	current   SourceControlClientListRepositoriesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SourceControlClientListRepositoriesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SourceControlClientListRepositoriesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RepoList.NextLink == nil || len(*p.current.RepoList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SourceControlClientListRepositoriesPager) NextPage(ctx context.Context) (SourceControlClientListRepositoriesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SourceControlClientListRepositoriesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SourceControlClientListRepositoriesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SourceControlClientListRepositoriesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SourceControlClientListRepositoriesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listRepositoriesHandleResponse(resp)
	if err != nil {
		return SourceControlClientListRepositoriesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SourceControlsClientListPager provides operations for iterating over paged responses.
type SourceControlsClientListPager struct {
	client    *SourceControlsClient
	current   SourceControlsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SourceControlsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SourceControlsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SourceControlList.NextLink == nil || len(*p.current.SourceControlList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SourceControlsClientListPager) NextPage(ctx context.Context) (SourceControlsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SourceControlsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SourceControlsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SourceControlsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SourceControlsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SourceControlsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ThreatIntelligenceIndicatorClientQueryIndicatorsPager provides operations for iterating over paged responses.
type ThreatIntelligenceIndicatorClientQueryIndicatorsPager struct {
	client    *ThreatIntelligenceIndicatorClient
	current   ThreatIntelligenceIndicatorClientQueryIndicatorsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ThreatIntelligenceIndicatorClientQueryIndicatorsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ThreatIntelligenceIndicatorClientQueryIndicatorsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ThreatIntelligenceInformationList.NextLink == nil || len(*p.current.ThreatIntelligenceInformationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ThreatIntelligenceIndicatorClientQueryIndicatorsPager) NextPage(ctx context.Context) (ThreatIntelligenceIndicatorClientQueryIndicatorsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ThreatIntelligenceIndicatorClientQueryIndicatorsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ThreatIntelligenceIndicatorClientQueryIndicatorsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ThreatIntelligenceIndicatorClientQueryIndicatorsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ThreatIntelligenceIndicatorClientQueryIndicatorsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.queryIndicatorsHandleResponse(resp)
	if err != nil {
		return ThreatIntelligenceIndicatorClientQueryIndicatorsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ThreatIntelligenceIndicatorsClientListPager provides operations for iterating over paged responses.
type ThreatIntelligenceIndicatorsClientListPager struct {
	client    *ThreatIntelligenceIndicatorsClient
	current   ThreatIntelligenceIndicatorsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ThreatIntelligenceIndicatorsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ThreatIntelligenceIndicatorsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ThreatIntelligenceInformationList.NextLink == nil || len(*p.current.ThreatIntelligenceInformationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ThreatIntelligenceIndicatorsClientListPager) NextPage(ctx context.Context) (ThreatIntelligenceIndicatorsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ThreatIntelligenceIndicatorsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ThreatIntelligenceIndicatorsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ThreatIntelligenceIndicatorsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ThreatIntelligenceIndicatorsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ThreatIntelligenceIndicatorsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WatchlistItemsClientListPager provides operations for iterating over paged responses.
type WatchlistItemsClientListPager struct {
	client    *WatchlistItemsClient
	current   WatchlistItemsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WatchlistItemsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WatchlistItemsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WatchlistItemList.NextLink == nil || len(*p.current.WatchlistItemList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WatchlistItemsClientListPager) NextPage(ctx context.Context) (WatchlistItemsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WatchlistItemsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WatchlistItemsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WatchlistItemsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WatchlistItemsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WatchlistItemsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WatchlistsClientListPager provides operations for iterating over paged responses.
type WatchlistsClientListPager struct {
	client    *WatchlistsClient
	current   WatchlistsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WatchlistsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WatchlistsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WatchlistList.NextLink == nil || len(*p.current.WatchlistList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WatchlistsClientListPager) NextPage(ctx context.Context) (WatchlistsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WatchlistsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WatchlistsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WatchlistsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WatchlistsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WatchlistsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
