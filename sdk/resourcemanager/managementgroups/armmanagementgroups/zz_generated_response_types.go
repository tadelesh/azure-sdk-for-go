//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagementgroups

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// APIClientCheckNameAvailabilityResponse contains the response from method APIClient.CheckNameAvailability.
type APIClientCheckNameAvailabilityResponse struct {
	CheckNameAvailabilityResult
}

// APIClientStartTenantBackfillResponse contains the response from method APIClient.StartTenantBackfill.
type APIClientStartTenantBackfillResponse struct {
	TenantBackfillStatusResult
}

// APIClientTenantBackfillStatusResponse contains the response from method APIClient.TenantBackfillStatus.
type APIClientTenantBackfillStatusResponse struct {
	TenantBackfillStatusResult
}

// ClientCreateOrUpdatePollerResponse contains the response from method Client.CreateOrUpdate.
type ClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClientCreateOrUpdateResponse, error) {
	respType := ClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ManagementGroup)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *Client, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("Client.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ClientCreateOrUpdateResponse contains the response from method Client.CreateOrUpdate.
type ClientCreateOrUpdateResponse struct {
	ManagementGroup
}

// ClientDeletePollerResponse contains the response from method Client.Delete.
type ClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClientDeleteResponse, error) {
	respType := ClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AzureAsyncOperationResults)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ClientDeletePollerResponse from the provided client and resume token.
func (l *ClientDeletePollerResponse) Resume(ctx context.Context, client *Client, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("Client.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ClientDeleteResponse contains the response from method Client.Delete.
type ClientDeleteResponse struct {
	AzureAsyncOperationResults
}

// ClientGetDescendantsResponse contains the response from method Client.GetDescendants.
type ClientGetDescendantsResponse struct {
	DescendantListResult
}

// ClientGetResponse contains the response from method Client.Get.
type ClientGetResponse struct {
	ManagementGroup
}

// ClientListResponse contains the response from method Client.List.
type ClientListResponse struct {
	ManagementGroupListResult
}

// ClientUpdateResponse contains the response from method Client.Update.
type ClientUpdateResponse struct {
	ManagementGroup
}

// EntitiesClientListResponse contains the response from method EntitiesClient.List.
type EntitiesClientListResponse struct {
	EntityListResult
}

// HierarchySettingsClientCreateOrUpdateResponse contains the response from method HierarchySettingsClient.CreateOrUpdate.
type HierarchySettingsClientCreateOrUpdateResponse struct {
	HierarchySettings
}

// HierarchySettingsClientDeleteResponse contains the response from method HierarchySettingsClient.Delete.
type HierarchySettingsClientDeleteResponse struct {
	// placeholder for future response values
}

// HierarchySettingsClientGetResponse contains the response from method HierarchySettingsClient.Get.
type HierarchySettingsClientGetResponse struct {
	HierarchySettings
}

// HierarchySettingsClientListResponse contains the response from method HierarchySettingsClient.List.
type HierarchySettingsClientListResponse struct {
	HierarchySettingsList
}

// HierarchySettingsClientUpdateResponse contains the response from method HierarchySettingsClient.Update.
type HierarchySettingsClientUpdateResponse struct {
	HierarchySettings
}

// ManagementGroupSubscriptionsClientCreateResponse contains the response from method ManagementGroupSubscriptionsClient.Create.
type ManagementGroupSubscriptionsClientCreateResponse struct {
	SubscriptionUnderManagementGroup
}

// ManagementGroupSubscriptionsClientDeleteResponse contains the response from method ManagementGroupSubscriptionsClient.Delete.
type ManagementGroupSubscriptionsClientDeleteResponse struct {
	// placeholder for future response values
}

// ManagementGroupSubscriptionsClientGetSubscriptionResponse contains the response from method ManagementGroupSubscriptionsClient.GetSubscription.
type ManagementGroupSubscriptionsClientGetSubscriptionResponse struct {
	SubscriptionUnderManagementGroup
}

// ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse contains the response from method ManagementGroupSubscriptionsClient.GetSubscriptionsUnderManagementGroup.
type ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse struct {
	ListSubscriptionUnderManagementGroup
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationListResult
}
