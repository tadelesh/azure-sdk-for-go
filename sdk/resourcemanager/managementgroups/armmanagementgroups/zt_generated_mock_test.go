//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagementgroups_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managementgroups/armmanagementgroups"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestManagementGroups_List(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListManagementGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListManagementGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewClient(cred, &options)
	pager := client.List(&armmanagementgroups.ClientListOptions{CacheControl: to.Ptr("no-cache"),
		Skiptoken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListManagementGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagementgroups.ManagementGroupListResult{
			Value: []*armmanagementgroups.ManagementGroupInfo{
				{
					Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Management/managementGroups"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
					Properties: &armmanagementgroups.ManagementGroupInfoProperties{
						DisplayName: to.Ptr("Group 1 Tenant 2"),
						TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name: to.Ptr("20000000-0004-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Management/managementGroups"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0004-0000-0000-000000000000"),
					Properties: &armmanagementgroups.ManagementGroupInfoProperties{
						DisplayName: to.Ptr("Group 4 Tenant 2"),
						TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagementGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagementGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListManagementGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroups_Get(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewClient(cred, &options)
	res, err := client.Get(ctx,
		"20000000-0001-0000-0000-000000000000",
		&armmanagementgroups.ClientGetOptions{Expand: nil,
			Recurse:      nil,
			Filter:       nil,
			CacheControl: to.Ptr("no-cache"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				DisplayName: to.Ptr("Group 1 Tenant 2"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("RootGroup"),
						DisplayName: to.Ptr("RootGroup"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/RootGroup"),
					},
					UpdatedBy:   to.Ptr("16b8ef21-5c9f-420c-bcc9-e4f8c9f30b4b"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.00Z"); return t }()),
					Version:     to.Ptr[int32](1),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithAncestors.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetManagementGroupWithAncestors"},
	})
	client = armmanagementgroups.NewClient(cred, &options)
	res, err = client.Get(ctx,
		"20000000-0001-0000-0000-00000000000",
		&armmanagementgroups.ClientGetOptions{Expand: to.Ptr(armmanagementgroups.Enum0Ancestors),
			Recurse:      nil,
			Filter:       nil,
			CacheControl: to.Ptr("no-cache"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithAncestors.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				DisplayName: to.Ptr("Group 1 Tenant 2"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					ManagementGroupAncestorsChain: []*armmanagementgroups.ManagementGroupPathElement{
						{
							Name:        to.Ptr("20000000-0000-0000-0000-000000000001"),
							DisplayName: to.Ptr("Parent display name"),
						},
						{
							Name:        to.Ptr("20000000-0000-0000-0000-000000000000"),
							DisplayName: to.Ptr("Grandparent display name"),
						}},
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("20000000-0000-0000-0000-000000000001"),
						DisplayName: to.Ptr("Parent display name"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000001"),
					},
					UpdatedBy:   to.Ptr("Test"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.00Z"); return t }()),
					Version:     to.Ptr[int32](1),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithAncestors.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetManagementGroupWithExpand"},
	})
	client = armmanagementgroups.NewClient(cred, &options)
	res, err = client.Get(ctx,
		"20000000-0001-0000-0000-000000000000",
		&armmanagementgroups.ClientGetOptions{Expand: to.Ptr(armmanagementgroups.Enum0Children),
			Recurse:      nil,
			Filter:       nil,
			CacheControl: to.Ptr("no-cache"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				Children: []*armmanagementgroups.ManagementGroupChildInfo{
					{
						Name:        to.Ptr("20000000-0002-0000-0000-000000000000"),
						Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeMicrosoftManagementManagementGroups),
						DisplayName: to.Ptr("Group 2 Tenant 2"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
					},
					{
						Name:        to.Ptr("20000000-0003-0000-0000-000000000000"),
						Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeMicrosoftManagementManagementGroups),
						DisplayName: to.Ptr("Group 3 Tenant 2"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0003-0000-0000-000000000000"),
					},
					{
						Name:        to.Ptr("10000000-F004-0000-0000-000000000000"),
						Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeSubscriptions),
						DisplayName: to.Ptr("Subscription 4 Tenant 1"),
						ID:          to.Ptr("/subscriptions/10000000-F004-0000-0000-000000000000"),
					},
					{
						Name:        to.Ptr("20000000-F005-0000-0000-000000000000"),
						Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeSubscriptions),
						DisplayName: to.Ptr("Subscription 5 Tenant 2"),
						ID:          to.Ptr("/subscriptions/20000000-F005-0000-0000-000000000000"),
					},
					{
						Name:        to.Ptr("30000000-F003-0000-0000-000000000000"),
						Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeSubscriptions),
						DisplayName: to.Ptr("Subscription 3 Tenant 3"),
						ID:          to.Ptr("/subscriptions/30000000-F003-0000-0000-000000000000"),
					}},
				DisplayName: to.Ptr("Group 1 Tenant 2"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("20000000-0000-0000-0000-000000000000"),
						DisplayName: to.Ptr("20000000-0000-0000-0000-000000000000"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000000"),
					},
					UpdatedBy:   to.Ptr("Test"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.00Z"); return t }()),
					Version:     to.Ptr[int32](1),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithPath.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetManagementGroupWithPath"},
	})
	client = armmanagementgroups.NewClient(cred, &options)
	res, err = client.Get(ctx,
		"20000000-0001-0000-0000-000000000000",
		&armmanagementgroups.ClientGetOptions{Expand: to.Ptr(armmanagementgroups.Enum0Path),
			Recurse:      nil,
			Filter:       nil,
			CacheControl: to.Ptr("no-cache"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithPath.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				DisplayName: to.Ptr("Group 1 Tenant 2"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					Path: []*armmanagementgroups.ManagementGroupPathElement{
						{
							Name:        to.Ptr("20000000-0000-0000-0000-000000000000"),
							DisplayName: to.Ptr("Grandparent display name"),
						},
						{
							Name:        to.Ptr("20000000-0000-0000-0000-000000000001"),
							DisplayName: to.Ptr("Parent display name"),
						}},
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("20000000-0000-0000-0000-000000000001"),
						DisplayName: to.Ptr("Parent display name"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000001"),
					},
					UpdatedBy:   to.Ptr("Test"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.00Z"); return t }()),
					Version:     to.Ptr[int32](1),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithPath.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithExpandAndRecurse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetManagementGroupsWithExpandAndRecurse"},
	})
	client = armmanagementgroups.NewClient(cred, &options)
	res, err = client.Get(ctx,
		"20000000-0001-0000-0000-000000000000",
		&armmanagementgroups.ClientGetOptions{Expand: to.Ptr(armmanagementgroups.Enum0Children),
			Recurse:      to.Ptr(true),
			Filter:       nil,
			CacheControl: to.Ptr("no-cache"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithExpandAndRecurse.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("RootGroup"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/RootGroup"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				Children: []*armmanagementgroups.ManagementGroupChildInfo{
					{
						Name: to.Ptr("Child"),
						Type: to.Ptr(armmanagementgroups.ManagementGroupChildTypeMicrosoftManagementManagementGroups),
						Children: []*armmanagementgroups.ManagementGroupChildInfo{
							{
								Name: to.Ptr("Leaf"),
								Type: to.Ptr(armmanagementgroups.ManagementGroupChildTypeMicrosoftManagementManagementGroups),
								Children: []*armmanagementgroups.ManagementGroupChildInfo{
									{
										Name:        to.Ptr("728bcbe4-8d56-4510-86c2-4921b8beefbc"),
										Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeSubscriptions),
										DisplayName: to.Ptr("Pay-As-You-Go"),
										ID:          to.Ptr("/subscriptions/728bcbe4-8d56-4510-86c2-4921b8beefbc"),
									}},
								DisplayName: to.Ptr("Leaf"),
								ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/Leaf"),
							}},
						DisplayName: to.Ptr("Child"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/Child"),
					},
					{
						Name:        to.Ptr("AnotherChild"),
						Type:        to.Ptr(armmanagementgroups.ManagementGroupChildTypeMicrosoftManagementManagementGroups),
						DisplayName: to.Ptr("Leaf"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/AnotherChild"),
					}},
				DisplayName: to.Ptr("RootGroup"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("20000000-0000-0000-0000-000000000000"),
						DisplayName: to.Ptr("20000000-0000-0000-0000-000000000000"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000000"),
					},
					UpdatedBy:   to.Ptr("bd490e30-04cb-433e-b8c8-6066959a8bab"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T02:26:49.0022093Z"); return t }()),
					Version:     to.Ptr[int32](2),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetManagementGroupWithExpandAndRecurse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ChildGroup",
		armmanagementgroups.CreateManagementGroupRequest{
			Properties: &armmanagementgroups.CreateManagementGroupProperties{
				DisplayName: to.Ptr("ChildGroup"),
				Details: &armmanagementgroups.CreateManagementGroupDetails{
					Parent: &armmanagementgroups.CreateParentGroupInfo{
						ID: to.Ptr("/providers/Microsoft.Management/managementGroups/RootGroup"),
					},
				},
			},
		},
		&armmanagementgroups.ClientBeginCreateOrUpdateOptions{CacheControl: to.Ptr("no-cache"),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutManagementGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("ChildGroup"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ChildGroup"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				DisplayName: to.Ptr("ChildGroup"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("RootGroup"),
						DisplayName: to.Ptr("RootGroup"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/RootGroup"),
					},
					UpdatedBy:   to.Ptr("16b8ef21-5c9f-420c-bcc9-e4f8c9f30b4b"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.00Z"); return t }()),
					Version:     to.Ptr[int32](1),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroups_Update(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PatchManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewClient(cred, &options)
	res, err := client.Update(ctx,
		"ChildGroup",
		armmanagementgroups.PatchManagementGroupRequest{
			DisplayName:   to.Ptr("AlternateDisplayName"),
			ParentGroupID: to.Ptr("/providers/Microsoft.Management/managementGroups/AlternateRootGroup"),
		},
		&armmanagementgroups.ClientUpdateOptions{CacheControl: to.Ptr("no-cache")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PatchManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.ManagementGroup{
			Name: to.Ptr("ChildGroup"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ChildGroup"),
			Properties: &armmanagementgroups.ManagementGroupProperties{
				DisplayName: to.Ptr("AlternateDisplayName"),
				TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
				Details: &armmanagementgroups.ManagementGroupDetails{
					Parent: &armmanagementgroups.ParentGroupInfo{
						Name:        to.Ptr("AlternateRootGroup"),
						DisplayName: to.Ptr("AlternateRootGroup"),
						ID:          to.Ptr("/providers/Microsoft.Management/managementGroups/AlternateRootGroup"),
					},
					UpdatedBy:   to.Ptr("bd490e30-04cb-433e-b8c8-6066959a8bab"),
					UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T02:46:59.0545645Z"); return t }()),
					Version:     to.Ptr[int32](2),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PatchManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroups_Delete(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/DeleteManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewClient(cred, &options)
	poller, err := client.BeginDelete(ctx,
		"GroupToDelete",
		&armmanagementgroups.ClientBeginDeleteOptions{CacheControl: to.Ptr("no-cache"),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/DeleteManagementGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/DeleteManagementGroup.json: %v", err)
	}
}

func TestManagementGroups_GetDescendants(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetDescendants.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDescendants"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewClient(cred, &options)
	pager := client.GetDescendants("20000000-0000-0000-0000-000000000000",
		&armmanagementgroups.ClientGetDescendantsOptions{Skiptoken: nil,
			Top: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetDescendants.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagementgroups.DescendantListResult{
			Value: []*armmanagementgroups.DescendantInfo{
				{
					Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Management/managementGroups"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
					Properties: &armmanagementgroups.DescendantInfoProperties{
						DisplayName: to.Ptr("Group 1"),
						Parent: &armmanagementgroups.DescendantParentGroupInfo{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000000"),
						},
					},
				},
				{
					Name: to.Ptr("20000000-0004-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Management/managementGroups/subscriptions"),
					ID:   to.Ptr("/subscriptions/20000000-0004-0000-0000-000000000000"),
					Properties: &armmanagementgroups.DescendantInfoProperties{
						DisplayName: to.Ptr("Subscription 4"),
						Parent: &armmanagementgroups.DescendantParentGroupInfo{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000000"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DescendantListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DescendantListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetDescendants.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroupSubscriptions_Create(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/AddManagementGroupSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AddSubscriptionToManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewManagementGroupSubscriptionsClient(cred, &options)
	res, err := client.Create(ctx,
		"Group",
		"728bcbe4-8d56-4510-86c2-4921b8beefbc",
		&armmanagementgroups.ManagementGroupSubscriptionsClientCreateOptions{CacheControl: to.Ptr("no-cache")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/AddManagementGroupSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.SubscriptionUnderManagementGroup{
			Name: to.Ptr("728bcbe4-8d56-4510-86c2-4921b8beefbc"),
			Type: to.Ptr("Microsoft.Management/managementGroups/subscriptions"),
			ID:   to.Ptr(" /providers/Microsoft.Management/managementGroups/Group/subscriptions/728bcbe4-8d56-4510-86c2-4921b8beefbc"),
			Properties: &armmanagementgroups.SubscriptionUnderManagementGroupProperties{
				DisplayName: to.Ptr("Group"),
				Parent: &armmanagementgroups.DescendantParentGroupInfo{
					ID: to.Ptr("/providers/Microsoft.Management/managementGroups/Group"),
				},
				State:  to.Ptr("Active"),
				Tenant: to.Ptr("e751ac82-623b-4913-8d74-22637c832373"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionUnderManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionUnderManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/AddManagementGroupSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroupSubscriptions_Delete(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/RemoveManagementGroupSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteSubscriptionFromManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewManagementGroupSubscriptionsClient(cred, &options)
	_, err := client.Delete(ctx,
		"Group",
		"728bcbe4-8d56-4510-86c2-4921b8beefbc",
		&armmanagementgroups.ManagementGroupSubscriptionsClientDeleteOptions{CacheControl: to.Ptr("no-cache")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/RemoveManagementGroupSubscription.json: %v", err)
	}
}

func TestManagementGroupSubscriptions_GetSubscription(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetSubscriptionFromManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetSubscriptionFromManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewManagementGroupSubscriptionsClient(cred, &options)
	res, err := client.GetSubscription(ctx,
		"Group",
		"728bcbe4-8d56-4510-86c2-4921b8beefbc",
		&armmanagementgroups.ManagementGroupSubscriptionsClientGetSubscriptionOptions{CacheControl: to.Ptr("no-cache")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetSubscriptionFromManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.SubscriptionUnderManagementGroup{
			Name: to.Ptr("728bcbe4-8d56-4510-86c2-4921b8beefbc"),
			Type: to.Ptr("Microsoft.Management/managementGroups/subscriptions"),
			ID:   to.Ptr(" /providers/Microsoft.Management/managementGroups/Group/subscriptions/728bcbe4-8d56-4510-86c2-4921b8beefbc"),
			Properties: &armmanagementgroups.SubscriptionUnderManagementGroupProperties{
				DisplayName: to.Ptr("Group"),
				Parent: &armmanagementgroups.DescendantParentGroupInfo{
					ID: to.Ptr("/providers/Microsoft.Management/managementGroups/Group"),
				},
				State:  to.Ptr("Active"),
				Tenant: to.Ptr("e751ac82-623b-4913-8d74-22637c832373"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionUnderManagementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionUnderManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetSubscriptionFromManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroupSubscriptions_GetSubscriptionsUnderManagementGroup(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetAllSubscriptionsFromManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAllSubscriptionsFromManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewManagementGroupSubscriptionsClient(cred, &options)
	pager := client.GetSubscriptionsUnderManagementGroup("Group",
		&armmanagementgroups.ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupOptions{Skiptoken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetAllSubscriptionsFromManagementGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagementgroups.ListSubscriptionUnderManagementGroup{
			Value: []*armmanagementgroups.SubscriptionUnderManagementGroup{
				{
					Name: to.Ptr("728bcbe4-8d56-4510-86c2-4921b8beefbc"),
					Type: to.Ptr("Microsoft.Management/managementGroups/subscriptions"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/Group/subscriptions/728bcbe4-8d56-4510-86c2-4921b8beefbc"),
					Properties: &armmanagementgroups.SubscriptionUnderManagementGroupProperties{
						DisplayName: to.Ptr("S5"),
						Parent: &armmanagementgroups.DescendantParentGroupInfo{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/Group"),
						},
						State:  to.Ptr("Active"),
						Tenant: to.Ptr("e751ac82-623b-4913-8d74-22637c832373"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListSubscriptionUnderManagementGroup) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListSubscriptionUnderManagementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetAllSubscriptionsFromManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHierarchySettings_List(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListHierarchySettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListGroupSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewHierarchySettingsClient(cred, &options)
	res, err := client.List(ctx,
		"root",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListHierarchySettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.HierarchySettingsList{
			Value: []*armmanagementgroups.HierarchySettingsInfo{
				{
					Name: to.Ptr("root"),
					Type: to.Ptr("Microsoft.Management/managementGroups/settings"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/root/settings/default"),
					Properties: &armmanagementgroups.HierarchySettingsProperties{
						DefaultManagementGroup:               to.Ptr("/providers/Microsoft.Management/managementGroups/DefaultGroup"),
						RequireAuthorizationForGroupCreation: to.Ptr(true),
						TenantID:                             to.Ptr("20000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.HierarchySettingsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HierarchySettingsList)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListHierarchySettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHierarchySettings_Get(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetHierarchySettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetGroupSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewHierarchySettingsClient(cred, &options)
	res, err := client.Get(ctx,
		"root",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetHierarchySettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.HierarchySettings{
			Name: to.Ptr("root"),
			Type: to.Ptr("Microsoft.Management/managementGroups/settings"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/root/settings/default"),
			Properties: &armmanagementgroups.HierarchySettingsProperties{
				DefaultManagementGroup:               to.Ptr("/providers/Microsoft.Management/managementGroups/DefaultGroup"),
				RequireAuthorizationForGroupCreation: to.Ptr(true),
				TenantID:                             to.Ptr("20000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HierarchySettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HierarchySettings)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetHierarchySettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHierarchySettings_CreateOrUpdate(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutHierarchySettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetGroupSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewHierarchySettingsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"root",
		armmanagementgroups.CreateOrUpdateSettingsRequest{
			Properties: &armmanagementgroups.CreateOrUpdateSettingsProperties{
				DefaultManagementGroup:               to.Ptr("/providers/Microsoft.Management/managementGroups/DefaultGroup"),
				RequireAuthorizationForGroupCreation: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutHierarchySettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.HierarchySettings{
			Name: to.Ptr("root"),
			Type: to.Ptr("Microsoft.Management/managementGroups/settings"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/root/settings/default"),
			Properties: &armmanagementgroups.HierarchySettingsProperties{
				DefaultManagementGroup:               to.Ptr("/providers/Microsoft.Management/managementGroups/DefaultGroup"),
				RequireAuthorizationForGroupCreation: to.Ptr(true),
				TenantID:                             to.Ptr("20000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HierarchySettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HierarchySettings)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PutHierarchySettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHierarchySettings_Update(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PatchHierarchySettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetGroupSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewHierarchySettingsClient(cred, &options)
	res, err := client.Update(ctx,
		"root",
		armmanagementgroups.CreateOrUpdateSettingsRequest{
			Properties: &armmanagementgroups.CreateOrUpdateSettingsProperties{
				DefaultManagementGroup:               to.Ptr("/providers/Microsoft.Management/managementGroups/DefaultGroup"),
				RequireAuthorizationForGroupCreation: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PatchHierarchySettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.HierarchySettings{
			Name: to.Ptr("root"),
			Type: to.Ptr("Microsoft.Management/managementGroups/settings"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/root/settings/default"),
			Properties: &armmanagementgroups.HierarchySettingsProperties{
				DefaultManagementGroup:               to.Ptr("/providers/Microsoft.Management/managementGroups/DefaultGroup"),
				RequireAuthorizationForGroupCreation: to.Ptr(true),
				TenantID:                             to.Ptr("20000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HierarchySettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HierarchySettings)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/PatchHierarchySettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHierarchySettings_Delete(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/DeleteHierarchySettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetGroupSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewHierarchySettingsClient(cred, &options)
	_, err := client.Delete(ctx,
		"root",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/DeleteHierarchySettings.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagementgroups.OperationListResult{
			Value: []*armmanagementgroups.Operation{
				{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					Display: &armmanagementgroups.OperationDisplayProperties{
						Description: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						Operation:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Provider:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						Resource:    to.Ptr("aaaaaaaaaaaaa"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroupsAPI_CheckNameAvailability(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/CheckManagementGroupNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckManagementGroupNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewAPIClient(cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armmanagementgroups.CheckNameAvailabilityRequest{
			Name: to.Ptr("nameTocheck"),
			Type: to.Ptr("Microsoft.Management/managementGroups"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/CheckManagementGroupNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.CheckNameAvailabilityResult{
			Message:       to.Ptr("Error message"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armmanagementgroups.ReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/CheckManagementGroupNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroupsAPI_StartTenantBackfill(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/StartTenantBackfillRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StartTenantBackfill"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewAPIClient(cred, &options)
	res, err := client.StartTenantBackfill(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/StartTenantBackfillRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.TenantBackfillStatusResult{
			Status:   to.Ptr(armmanagementgroups.StatusStarted),
			TenantID: to.Ptr("20000000-0000-0000-0000-000000000000"),
		}
		if !reflect.DeepEqual(exampleRes, res.TenantBackfillStatusResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantBackfillStatusResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/StartTenantBackfillRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroupsAPI_TenantBackfillStatus(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/TenantBackfillStatusRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TenantBackfillStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewAPIClient(cred, &options)
	res, err := client.TenantBackfillStatus(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/TenantBackfillStatusRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagementgroups.TenantBackfillStatusResult{
			Status:   to.Ptr(armmanagementgroups.StatusStarted),
			TenantID: to.Ptr("20000000-0000-0000-0000-000000000000"),
		}
		if !reflect.DeepEqual(exampleRes, res.TenantBackfillStatusResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantBackfillStatusResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/TenantBackfillStatusRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEntities_List(t *testing.T) {
	// From example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetEntities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetEntities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagementgroups.NewEntitiesClient(cred, &options)
	pager := client.List(&armmanagementgroups.EntitiesClientListOptions{Skiptoken: nil,
		Skip:         nil,
		Top:          nil,
		Select:       nil,
		Search:       nil,
		Filter:       nil,
		View:         nil,
		GroupName:    nil,
		CacheControl: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetEntities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagementgroups.EntityListResult{
			Value: []*armmanagementgroups.EntityInfo{
				{
					Name: to.Ptr("20000000-0001-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Management/managementGroups"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
					Properties: &armmanagementgroups.EntityInfoProperties{
						DisplayName:          to.Ptr("Group 1 Tenant 2"),
						InheritedPermissions: to.Ptr(armmanagementgroups.PermissionsView),
						NumberOfChildGroups:  to.Ptr[int32](1),
						NumberOfChildren:     to.Ptr[int32](2),
						NumberOfDescendants:  to.Ptr[int32](3),
						Parent: &armmanagementgroups.EntityParentGroupInfo{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000000"),
						},
						ParentDisplayNameChain: []*string{
							to.Ptr("Tenant Root Group"),
							to.Ptr("Group 1 Tenant 2 Parent")},
						ParentNameChain: []*string{
							to.Ptr("TenantRootGroup"),
							to.Ptr("Group1Tenant2Parent")},
						Permissions: to.Ptr(armmanagementgroups.PermissionsView),
						TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name: to.Ptr("20000000-0004-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.Management/managementGroups"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0004-0000-0000-000000000000"),
					Properties: &armmanagementgroups.EntityInfoProperties{
						DisplayName:          to.Ptr("Group 4 Tenant 2"),
						InheritedPermissions: to.Ptr(armmanagementgroups.PermissionsDelete),
						NumberOfChildGroups:  to.Ptr[int32](0),
						NumberOfChildren:     to.Ptr[int32](0),
						NumberOfDescendants:  to.Ptr[int32](0),
						Parent: &armmanagementgroups.EntityParentGroupInfo{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0000-0000-0000-000000000000"),
						},
						ParentDisplayNameChain: []*string{
							to.Ptr("Tenant Root Group"),
							to.Ptr("Group 4 Tenant 2 Parent")},
						ParentNameChain: []*string{
							to.Ptr("TenantRootGroup"),
							to.Ptr("Group4 Tenant2Parent")},
						Permissions: to.Ptr(armmanagementgroups.PermissionsDelete),
						TenantID:    to.Ptr("20000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EntityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managementgroups/resource-manager/Microsoft.Management/stable/2021-04-01/examples/GetEntities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
