//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagementgroups

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ClientGetDescendantsPager provides operations for iterating over paged responses.
type ClientGetDescendantsPager struct {
	client    *Client
	current   ClientGetDescendantsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientGetDescendantsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientGetDescendantsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DescendantListResult.NextLink == nil || len(*p.current.DescendantListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientGetDescendantsPager) NextPage(ctx context.Context) (ClientGetDescendantsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientGetDescendantsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientGetDescendantsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientGetDescendantsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientGetDescendantsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getDescendantsHandleResponse(resp)
	if err != nil {
		return ClientGetDescendantsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListPager provides operations for iterating over paged responses.
type ClientListPager struct {
	client    *Client
	current   ClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagementGroupListResult.NextLink == nil || len(*p.current.ManagementGroupListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListPager) NextPage(ctx context.Context) (ClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EntitiesClientListPager provides operations for iterating over paged responses.
type EntitiesClientListPager struct {
	client    *EntitiesClient
	current   EntitiesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EntitiesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EntitiesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EntityListResult.NextLink == nil || len(*p.current.EntityListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EntitiesClientListPager) NextPage(ctx context.Context) (EntitiesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EntitiesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EntitiesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EntitiesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EntitiesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EntitiesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupPager provides operations for iterating over paged responses.
type ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupPager struct {
	client    *ManagementGroupSubscriptionsClient
	current   ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListSubscriptionUnderManagementGroup.NextLink == nil || len(*p.current.ListSubscriptionUnderManagementGroup.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupPager) NextPage(ctx context.Context) (ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getSubscriptionsUnderManagementGroupHandleResponse(resp)
	if err != nil {
		return ManagementGroupSubscriptionsClientGetSubscriptionsUnderManagementGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
