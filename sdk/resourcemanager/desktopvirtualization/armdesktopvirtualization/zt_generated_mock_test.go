//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdesktopvirtualization_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/desktopvirtualization/armdesktopvirtualization"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/OperationDescription_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationDescription_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/OperationDescription_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ResourceProviderOperationList{
			Value: []*armdesktopvirtualization.ResourceProviderOperation{
				{
					Name: to.Ptr("Microsoft.DesktopVirtualization/hostpools/read"),
					Display: &armdesktopvirtualization.ResourceProviderOperationDisplay{
						Description: to.Ptr("Read hostpool"),
						Operation:   to.Ptr("Read hostpool"),
						Provider:    to.Ptr("Microsoft.DesktopVirtualization"),
						Resource:    to.Ptr("hostpools"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.DesktopVirtualization/hostpools/write"),
					Display: &armdesktopvirtualization.ResourceProviderOperationDisplay{
						Description: to.Ptr("Write hostpool"),
						Operation:   to.Ptr("Write hostpool"),
						Provider:    to.Ptr("Microsoft.DesktopVirtualization"),
						Resource:    to.Ptr("hostpools"),
					},
					IsDataAction: to.Ptr(false),
					Properties: &armdesktopvirtualization.OperationProperties{
						ServiceSpecification: &armdesktopvirtualization.ServiceSpecification{
							LogSpecifications: []*armdesktopvirtualization.LogSpecification{
								{
									Name:        to.Ptr(""),
									DisplayName: to.Ptr(""),
								},
								{
									Name:        to.Ptr(""),
									DisplayName: to.Ptr(""),
								},
								{
									Name:        to.Ptr(""),
									DisplayName: to.Ptr(""),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/OperationDescription_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workspace_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewWorkspacesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.WorkspaceProperties{
				Description:         to.Ptr("des1"),
				CloudPcResource:     to.Ptr(false),
				FriendlyName:        to.Ptr("friendly"),
				ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workspace_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewWorkspacesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		armdesktopvirtualization.Workspace{
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.WorkspaceProperties{
				Description:  to.Ptr("des1"),
				FriendlyName: to.Ptr("friendly"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.WorkspaceProperties{
				Description:         to.Ptr("des1"),
				CloudPcResource:     to.Ptr(false),
				FriendlyName:        to.Ptr("friendly"),
				ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workspace_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewWorkspacesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Delete.json: %v", err)
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workspace_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewWorkspacesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"workspace1",
		&armdesktopvirtualization.WorkspacesClientUpdateOptions{Workspace: &armdesktopvirtualization.WorkspacePatch{
			Properties: &armdesktopvirtualization.WorkspacePatchProperties{
				Description:         to.Ptr("des1"),
				FriendlyName:        to.Ptr("friendly"),
				PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.WorkspaceProperties{
				Description:         to.Ptr("des1"),
				CloudPcResource:     to.Ptr(false),
				FriendlyName:        to.Ptr("friendly"),
				ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workspace_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewWorkspacesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.WorkspaceList{
			Value: []*armdesktopvirtualization.Workspace{
				{
					Name:     to.Ptr("workspace1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.WorkspaceProperties{
						Description:         to.Ptr("des1"),
						CloudPcResource:     to.Ptr(false),
						FriendlyName:        to.Ptr("friendly"),
						ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("workspace2"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.WorkspaceProperties{
						Description:         to.Ptr("des1"),
						CloudPcResource:     to.Ptr(false),
						FriendlyName:        to.Ptr("friendly"),
						ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workspace_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewWorkspacesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.WorkspaceList{
			Value: []*armdesktopvirtualization.Workspace{
				{
					Name:     to.Ptr("workspace1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.WorkspaceProperties{
						Description:         to.Ptr("des1"),
						CloudPcResource:     to.Ptr(false),
						FriendlyName:        to.Ptr("friendly"),
						ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("workspace2"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/workspaces"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.WorkspaceProperties{
						Description:         to.Ptr("des1"),
						CloudPcResource:     to.Ptr(false),
						FriendlyName:        to.Ptr("friendly"),
						ObjectID:            to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PublicNetworkAccess: to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Workspace_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScalingPlans_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlans_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"scalingPlan1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.ScalingPlan{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ScalingPlanProperties{
				Description:  to.Ptr("Description of scaling plan"),
				ExclusionTag: to.Ptr("value"),
				FriendlyName: to.Ptr("Scaling Plan 1"),
				HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
					{
						HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ScalingPlanEnabled: to.Ptr(true),
					}},
				HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
				ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
				Schedules: []*armdesktopvirtualization.ScalingSchedule{
					{
						Name: to.Ptr("schedule1"),
						DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
						OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						OffPeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](20),
							Minute: to.Ptr[int32](0),
						},
						PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
						PeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](8),
							Minute: to.Ptr[int32](0),
						},
						RampDownCapacityThresholdPct:   to.Ptr[int32](50),
						RampDownForceLogoffUsers:       to.Ptr(true),
						RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampDownMinimumHostsPct:        to.Ptr[int32](20),
						RampDownNotificationMessage:    to.Ptr("message"),
						RampDownStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](18),
							Minute: to.Ptr[int32](0),
						},
						RampDownWaitTimeMinutes:      to.Ptr[int32](30),
						RampUpCapacityThresholdPct:   to.Ptr[int32](80),
						RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampUpMinimumHostsPct:        to.Ptr[int32](20),
						RampUpStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](6),
							Minute: to.Ptr[int32](0),
						},
					}},
				TimeZone: to.Ptr("Central Standard Time"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScalingPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScalingPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScalingPlans_Create(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlans_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Create(ctx,
		"resourceGroup1",
		"scalingPlan1",
		armdesktopvirtualization.ScalingPlan{
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ScalingPlanProperties{
				Description:  to.Ptr("Description of Scaling Plan"),
				ExclusionTag: to.Ptr("value"),
				FriendlyName: to.Ptr("Scaling Plan 1"),
				HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
					{
						HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ScalingPlanEnabled: to.Ptr(true),
					}},
				HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
				Schedules: []*armdesktopvirtualization.ScalingSchedule{
					{
						Name: to.Ptr("schedule1"),
						DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
						OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						OffPeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](20),
							Minute: to.Ptr[int32](0),
						},
						PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
						PeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](8),
							Minute: to.Ptr[int32](0),
						},
						RampDownCapacityThresholdPct:   to.Ptr[int32](50),
						RampDownForceLogoffUsers:       to.Ptr(true),
						RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampDownMinimumHostsPct:        to.Ptr[int32](20),
						RampDownNotificationMessage:    to.Ptr("message"),
						RampDownStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](18),
							Minute: to.Ptr[int32](0),
						},
						RampDownWaitTimeMinutes:      to.Ptr[int32](30),
						RampUpCapacityThresholdPct:   to.Ptr[int32](80),
						RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampUpMinimumHostsPct:        to.Ptr[int32](20),
						RampUpStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](6),
							Minute: to.Ptr[int32](0),
						},
					}},
				TimeZone: to.Ptr("Central Standard Time"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.ScalingPlan{
			Name:     to.Ptr("scalingPlan1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ScalingPlanProperties{
				Description:  to.Ptr("Description of Scaling Plan"),
				ExclusionTag: to.Ptr("value"),
				FriendlyName: to.Ptr("Scaling Plan 1"),
				HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
					{
						HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ScalingPlanEnabled: to.Ptr(true),
					}},
				HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
				ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
				Schedules: []*armdesktopvirtualization.ScalingSchedule{
					{
						Name: to.Ptr("schedule1"),
						DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
						OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						OffPeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](20),
							Minute: to.Ptr[int32](0),
						},
						PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
						PeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](8),
							Minute: to.Ptr[int32](0),
						},
						RampDownCapacityThresholdPct:   to.Ptr[int32](50),
						RampDownForceLogoffUsers:       to.Ptr(true),
						RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampDownMinimumHostsPct:        to.Ptr[int32](20),
						RampDownNotificationMessage:    to.Ptr("message"),
						RampDownStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](18),
							Minute: to.Ptr[int32](0),
						},
						RampDownWaitTimeMinutes:      to.Ptr[int32](30),
						RampUpCapacityThresholdPct:   to.Ptr[int32](80),
						RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampUpMinimumHostsPct:        to.Ptr[int32](20),
						RampUpStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](6),
							Minute: to.Ptr[int32](0),
						},
					}},
				TimeZone: to.Ptr("Central Standard Time"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScalingPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScalingPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScalingPlans_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlans_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"scalingPlan1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Delete.json: %v", err)
	}
}

func TestScalingPlans_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlans_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"scalingPlan1",
		&armdesktopvirtualization.ScalingPlansClientUpdateOptions{ScalingPlan: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.ScalingPlan{
			Name:     to.Ptr("scalingPlan1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ScalingPlanProperties{
				Description:  to.Ptr("Description of Scaling Plan"),
				ExclusionTag: to.Ptr("value"),
				FriendlyName: to.Ptr("Scaling Plan 1"),
				HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
					{
						HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ScalingPlanEnabled: to.Ptr(true),
					}},
				HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
				ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
				Schedules: []*armdesktopvirtualization.ScalingSchedule{
					{
						Name: to.Ptr("schedule1"),
						DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
							to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
						OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						OffPeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](20),
							Minute: to.Ptr[int32](0),
						},
						PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
						PeakStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](8),
							Minute: to.Ptr[int32](0),
						},
						RampDownCapacityThresholdPct:   to.Ptr[int32](50),
						RampDownForceLogoffUsers:       to.Ptr(true),
						RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampDownMinimumHostsPct:        to.Ptr[int32](20),
						RampDownNotificationMessage:    to.Ptr("message"),
						RampDownStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](18),
							Minute: to.Ptr[int32](0),
						},
						RampDownWaitTimeMinutes:      to.Ptr[int32](30),
						RampUpCapacityThresholdPct:   to.Ptr[int32](80),
						RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
						RampUpMinimumHostsPct:        to.Ptr[int32](20),
						RampUpStartTime: &armdesktopvirtualization.Time{
							Hour:   to.Ptr[int32](6),
							Minute: to.Ptr[int32](0),
						},
					}},
				TimeZone: to.Ptr("Central Standard Time"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScalingPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScalingPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScalingPlans_ListByResourceGroup(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlans_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ScalingPlanList{
			Value: []*armdesktopvirtualization.ScalingPlan{
				{
					Name:     to.Ptr("scalingPlan1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ScalingPlanProperties{
						Description:  to.Ptr("Description of Scaling Plan"),
						ExclusionTag: to.Ptr("value"),
						FriendlyName: to.Ptr("Scaling Plan 1"),
						HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
							{
								HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
								ScalingPlanEnabled: to.Ptr(true),
							}},
						HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
						ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						Schedules: []*armdesktopvirtualization.ScalingSchedule{
							{
								Name: to.Ptr("schedule1"),
								DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
								OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								OffPeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](20),
									Minute: to.Ptr[int32](0),
								},
								PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
								PeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](8),
									Minute: to.Ptr[int32](0),
								},
								RampDownCapacityThresholdPct:   to.Ptr[int32](50),
								RampDownForceLogoffUsers:       to.Ptr(true),
								RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampDownMinimumHostsPct:        to.Ptr[int32](20),
								RampDownNotificationMessage:    to.Ptr("message"),
								RampDownStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](18),
									Minute: to.Ptr[int32](0),
								},
								RampDownWaitTimeMinutes:      to.Ptr[int32](30),
								RampUpCapacityThresholdPct:   to.Ptr[int32](80),
								RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampUpMinimumHostsPct:        to.Ptr[int32](20),
								RampUpStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](6),
									Minute: to.Ptr[int32](0),
								},
							}},
						TimeZone: to.Ptr("Central Standard Time"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("scalingPlan2"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ScalingPlanProperties{
						Description:  to.Ptr("Description of Scaling Plan"),
						ExclusionTag: to.Ptr("value"),
						FriendlyName: to.Ptr("Scaling Plan 1"),
						HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
							{
								HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
								ScalingPlanEnabled: to.Ptr(true),
							}},
						HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
						ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						Schedules: []*armdesktopvirtualization.ScalingSchedule{
							{
								Name: to.Ptr("schedule1"),
								DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
								OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								OffPeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](20),
									Minute: to.Ptr[int32](0),
								},
								PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
								PeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](8),
									Minute: to.Ptr[int32](0),
								},
								RampDownCapacityThresholdPct:   to.Ptr[int32](50),
								RampDownForceLogoffUsers:       to.Ptr(false),
								RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampDownMinimumHostsPct:        to.Ptr[int32](20),
								RampDownStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](18),
									Minute: to.Ptr[int32](0),
								},
								RampDownStopHostsWhen:        to.Ptr(armdesktopvirtualization.StopHostsWhenZeroSessions),
								RampUpCapacityThresholdPct:   to.Ptr[int32](80),
								RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampUpMinimumHostsPct:        to.Ptr[int32](20),
								RampUpStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](6),
									Minute: to.Ptr[int32](0),
								},
							}},
						TimeZone: to.Ptr("Central Standard Time"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScalingPlanList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScalingPlanList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScalingPlans_ListBySubscription(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlans_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ScalingPlanList{
			Value: []*armdesktopvirtualization.ScalingPlan{
				{
					Name:     to.Ptr("scalingPlan1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ScalingPlanProperties{
						Description:  to.Ptr("Description of Scaling Plan"),
						ExclusionTag: to.Ptr("value"),
						FriendlyName: to.Ptr("Scaling Plan 1"),
						HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
							{
								HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
								ScalingPlanEnabled: to.Ptr(true),
							}},
						HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
						ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						Schedules: []*armdesktopvirtualization.ScalingSchedule{
							{
								Name: to.Ptr("schedule1"),
								DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
								OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								OffPeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](20),
									Minute: to.Ptr[int32](0),
								},
								PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
								PeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](8),
									Minute: to.Ptr[int32](0),
								},
								RampDownCapacityThresholdPct:   to.Ptr[int32](50),
								RampDownForceLogoffUsers:       to.Ptr(true),
								RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampDownMinimumHostsPct:        to.Ptr[int32](20),
								RampDownNotificationMessage:    to.Ptr("message"),
								RampDownStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](18),
									Minute: to.Ptr[int32](0),
								},
								RampDownWaitTimeMinutes:      to.Ptr[int32](30),
								RampUpCapacityThresholdPct:   to.Ptr[int32](80),
								RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampUpMinimumHostsPct:        to.Ptr[int32](20),
								RampUpStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](6),
									Minute: to.Ptr[int32](0),
								},
							}},
						TimeZone: to.Ptr("Central Standard Time"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("scalingPlan2"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ScalingPlanProperties{
						Description:  to.Ptr("Description of Scaling Plan"),
						ExclusionTag: to.Ptr("value"),
						FriendlyName: to.Ptr("Scaling Plan 1"),
						HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
							{
								HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
								ScalingPlanEnabled: to.Ptr(true),
							}},
						HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
						ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						Schedules: []*armdesktopvirtualization.ScalingSchedule{
							{
								Name: to.Ptr("schedule1"),
								DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
								OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								OffPeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](20),
									Minute: to.Ptr[int32](0),
								},
								PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
								PeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](8),
									Minute: to.Ptr[int32](0),
								},
								RampDownCapacityThresholdPct:   to.Ptr[int32](50),
								RampDownForceLogoffUsers:       to.Ptr(false),
								RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampDownMinimumHostsPct:        to.Ptr[int32](20),
								RampDownStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](18),
									Minute: to.Ptr[int32](0),
								},
								RampDownStopHostsWhen:        to.Ptr(armdesktopvirtualization.StopHostsWhenZeroActiveSessions),
								RampUpCapacityThresholdPct:   to.Ptr[int32](80),
								RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampUpMinimumHostsPct:        to.Ptr[int32](20),
								RampUpStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](6),
									Minute: to.Ptr[int32](0),
								},
							}},
						TimeZone: to.Ptr("Central Standard Time"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScalingPlanList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScalingPlanList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScalingPlans_ListByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScalingPlan_ListByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewScalingPlansClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByHostPool("resourceGroup1",
		"hostPool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListByHostPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ScalingPlanList{
			Value: []*armdesktopvirtualization.ScalingPlan{
				{
					Name:     to.Ptr("scalingPlan1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/scalingPlans"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/scalingPlan1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ScalingPlanProperties{
						Description:  to.Ptr("Description of Scaling Plan"),
						ExclusionTag: to.Ptr("value"),
						FriendlyName: to.Ptr("Scaling Plan 1"),
						HostPoolReferences: []*armdesktopvirtualization.ScalingHostPoolReference{
							{
								HostPoolArmPath:    to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
								ScalingPlanEnabled: to.Ptr(true),
							}},
						HostPoolType: to.Ptr(armdesktopvirtualization.ScalingHostPoolTypePooled),
						ObjectID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						Schedules: []*armdesktopvirtualization.ScalingSchedule{
							{
								Name: to.Ptr("schedule1"),
								DaysOfWeek: []*armdesktopvirtualization.ScalingScheduleDaysOfWeekItem{
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemMonday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemTuesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemWednesday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemThursday),
									to.Ptr(armdesktopvirtualization.ScalingScheduleDaysOfWeekItemFriday)},
								OffPeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								OffPeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](20),
									Minute: to.Ptr[int32](0),
								},
								PeakLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmBreadthFirst),
								PeakStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](8),
									Minute: to.Ptr[int32](0),
								},
								RampDownCapacityThresholdPct:   to.Ptr[int32](50),
								RampDownForceLogoffUsers:       to.Ptr(true),
								RampDownLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampDownMinimumHostsPct:        to.Ptr[int32](20),
								RampDownNotificationMessage:    to.Ptr("message"),
								RampDownStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](18),
									Minute: to.Ptr[int32](0),
								},
								RampDownWaitTimeMinutes:      to.Ptr[int32](30),
								RampUpCapacityThresholdPct:   to.Ptr[int32](80),
								RampUpLoadBalancingAlgorithm: to.Ptr(armdesktopvirtualization.SessionHostLoadBalancingAlgorithmDepthFirst),
								RampUpMinimumHostsPct:        to.Ptr[int32](20),
								RampUpStartTime: &armdesktopvirtualization.Time{
									Hour:   to.Ptr[int32](6),
									Minute: to.Ptr[int32](0),
								},
							}},
						TimeZone: to.Ptr("Central Standard Time"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScalingPlanList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScalingPlanList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ScalingPlan_ListByHostPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGroups_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGroup_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationGroupsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"applicationGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.ApplicationGroup{
			Name:     to.Ptr("applicationGroup1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ApplicationGroupProperties{
				Description:          to.Ptr("des1"),
				ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
				CloudPcResource:      to.Ptr(false),
				FriendlyName:         to.Ptr("friendly"),
				HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
				ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				WorkspaceArmPath:     to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGroup_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationGroupsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"applicationGroup1",
		armdesktopvirtualization.ApplicationGroup{
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ApplicationGroupProperties{
				Description:          to.Ptr("des1"),
				ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
				FriendlyName:         to.Ptr("friendly"),
				HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
				MigrationRequest: &armdesktopvirtualization.MigrationRequestProperties{
					MigrationPath: to.Ptr("TenantGroups/{defaultV1TenantGroup.Name}/Tenants/{defaultV1Tenant.Name}/HostPools/{sessionHostPool.Name}"),
					Operation:     to.Ptr(armdesktopvirtualization.OperationStart),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.ApplicationGroup{
			Name:     to.Ptr("applicationGroup1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ApplicationGroupProperties{
				Description:          to.Ptr("des1"),
				ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
				CloudPcResource:      to.Ptr(false),
				FriendlyName:         to.Ptr("friendly"),
				HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
				MigrationRequest: &armdesktopvirtualization.MigrationRequestProperties{
					MigrationPath: to.Ptr("TenantGroups/{defaultV1TenantGroup.Name}/Tenants/{defaultV1Tenant.Name}/HostPools/{sessionHostPool.Name}"),
					Operation:     to.Ptr(armdesktopvirtualization.OperationStart),
				},
				ObjectID:         to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				WorkspaceArmPath: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGroups_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGroup_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationGroupsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"applicationGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Delete.json: %v", err)
	}
}

func TestApplicationGroups_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGroups_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationGroupsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"applicationGroup1",
		&armdesktopvirtualization.ApplicationGroupsClientUpdateOptions{ApplicationGroup: &armdesktopvirtualization.ApplicationGroupPatch{
			Properties: &armdesktopvirtualization.ApplicationGroupPatchProperties{
				Description:  to.Ptr("des1"),
				FriendlyName: to.Ptr("friendly"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.ApplicationGroup{
			Name:     to.Ptr("applicationGroup1"),
			Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.ApplicationGroupProperties{
				Description:          to.Ptr("des1"),
				ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
				CloudPcResource:      to.Ptr(false),
				FriendlyName:         to.Ptr("friendly"),
				HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
				ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				WorkspaceArmPath:     to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGroup_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationGroupsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		&armdesktopvirtualization.ApplicationGroupsClientListByResourceGroupOptions{Filter: to.Ptr("applicationGroupType eq 'RailApplication'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ApplicationGroupList{
			Value: []*armdesktopvirtualization.ApplicationGroup{
				{
					Name:     to.Ptr("applicationGroup1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ApplicationGroupProperties{
						Description:          to.Ptr("des1"),
						ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
						CloudPcResource:      to.Ptr(false),
						FriendlyName:         to.Ptr("friendly"),
						HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						WorkspaceArmPath:     to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("applicationGroup2"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ApplicationGroupProperties{
						Description:          to.Ptr("des1"),
						ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
						CloudPcResource:      to.Ptr(false),
						FriendlyName:         to.Ptr("friendly"),
						HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						WorkspaceArmPath:     to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationGroupList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationGroupList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGroups_ListBySubscription(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGroup_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationGroupsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListBySubscription(&armdesktopvirtualization.ApplicationGroupsClientListBySubscriptionOptions{Filter: to.Ptr("applicationGroupType eq 'RailApplication'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ApplicationGroupList{
			Value: []*armdesktopvirtualization.ApplicationGroup{
				{
					Name:     to.Ptr("applicationGroup1"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ApplicationGroupProperties{
						Description:          to.Ptr("des1"),
						ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
						CloudPcResource:      to.Ptr(false),
						FriendlyName:         to.Ptr("friendly"),
						HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						WorkspaceArmPath:     to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("applicationGroup2"),
					Type:     to.Ptr("Microsoft.DesktopVirtualization/applicationGroups"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.ApplicationGroupProperties{
						Description:          to.Ptr("des1"),
						ApplicationGroupType: to.Ptr(armdesktopvirtualization.ApplicationGroupTypeRemoteApp),
						CloudPcResource:      to.Ptr(false),
						FriendlyName:         to.Ptr("friendly"),
						HostPoolArmPath:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
						ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						WorkspaceArmPath:     to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationGroupList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationGroupList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/ApplicationGroup_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStartMenuItems_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/StartMenuItem_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StartMenuItem_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewStartMenuItemsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List("resourceGroup1",
		"applicationGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/StartMenuItem_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.StartMenuItemList{
			Value: []*armdesktopvirtualization.StartMenuItem{
				{
					Name: to.Ptr("application1"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/startMenuItems"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/startMenuItem/application1"),
					Properties: &armdesktopvirtualization.StartMenuItemProperties{
						AppAlias:             to.Ptr("word"),
						CommandLineArguments: to.Ptr("arguments"),
						FilePath:             to.Ptr("/path/to/file"),
						IconIndex:            to.Ptr[int32](1),
						IconPath:             to.Ptr("/path/to/icon"),
					},
				},
				{
					Name: to.Ptr("application2"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/startMenuItems"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/startMenuItem/application2"),
					Properties: &armdesktopvirtualization.StartMenuItemProperties{
						AppAlias:             to.Ptr("excel"),
						CommandLineArguments: to.Ptr("arguments"),
						FilePath:             to.Ptr("/path/to/file"),
						IconIndex:            to.Ptr[int32](1),
						IconPath:             to.Ptr("/path/to/icon"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StartMenuItemList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StartMenuItemList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/StartMenuItem_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Application_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"applicationGroup1",
		"application1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Application{
			Name: to.Ptr("applicationGroup1/application1"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/applications"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/application1"),
			Properties: &armdesktopvirtualization.ApplicationProperties{
				Description:          to.Ptr("des1"),
				ApplicationType:      to.Ptr(armdesktopvirtualization.RemoteApplicationTypeInBuilt),
				CommandLineArguments: to.Ptr("arguments"),
				CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
				FilePath:             to.Ptr("path"),
				FriendlyName:         to.Ptr("friendly"),
				IconContent:          []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
				IconHash:             to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
				IconIndex:            to.Ptr[int32](1),
				IconPath:             to.Ptr("icon"),
				ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				ShowInPortal:         to.Ptr(true),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_CreateOrUpdate(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Application_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"applicationGroup1",
		"application1",
		armdesktopvirtualization.Application{
			Properties: &armdesktopvirtualization.ApplicationProperties{
				Description:          to.Ptr("des1"),
				CommandLineArguments: to.Ptr("arguments"),
				CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
				FilePath:             to.Ptr("path"),
				FriendlyName:         to.Ptr("friendly"),
				IconIndex:            to.Ptr[int32](1),
				IconPath:             to.Ptr("icon"),
				ShowInPortal:         to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Application{
			Name: to.Ptr("applicationGroup1/application1"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/applications"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/application1"),
			Properties: &armdesktopvirtualization.ApplicationProperties{
				Description:          to.Ptr("des1"),
				ApplicationType:      to.Ptr(armdesktopvirtualization.RemoteApplicationTypeInBuilt),
				CommandLineArguments: to.Ptr("arguments"),
				CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
				FilePath:             to.Ptr("path"),
				FriendlyName:         to.Ptr("friendly"),
				IconContent:          []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
				IconHash:             to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
				IconIndex:            to.Ptr[int32](1),
				IconPath:             to.Ptr("icon"),
				ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				ShowInPortal:         to.Ptr(true),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Application_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"applicationGroup1",
		"application1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Delete.json: %v", err)
	}
}

func TestApplications_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Application_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"applicationGroup1",
		"application1",
		&armdesktopvirtualization.ApplicationsClientUpdateOptions{Application: &armdesktopvirtualization.ApplicationPatch{
			Properties: &armdesktopvirtualization.ApplicationPatchProperties{
				Description:          to.Ptr("des1"),
				ApplicationType:      to.Ptr(armdesktopvirtualization.RemoteApplicationTypeInBuilt),
				CommandLineArguments: to.Ptr("arguments"),
				CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
				FilePath:             to.Ptr("path"),
				FriendlyName:         to.Ptr("friendly"),
				IconIndex:            to.Ptr[int32](1),
				IconPath:             to.Ptr("icon"),
				ShowInPortal:         to.Ptr(true),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Application{
			Name: to.Ptr("applicationGroup1/application1"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/applications"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/application1"),
			Properties: &armdesktopvirtualization.ApplicationProperties{
				Description:          to.Ptr("des1"),
				ApplicationType:      to.Ptr(armdesktopvirtualization.RemoteApplicationTypeInBuilt),
				CommandLineArguments: to.Ptr("arguments"),
				CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
				FilePath:             to.Ptr("path"),
				FriendlyName:         to.Ptr("friendly"),
				IconContent:          []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
				IconHash:             to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
				IconIndex:            to.Ptr[int32](1),
				IconPath:             to.Ptr("icon"),
				ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				ShowInPortal:         to.Ptr(true),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Applications_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewApplicationsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List("resourceGroup1",
		"applicationGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ApplicationList{
			Value: []*armdesktopvirtualization.Application{
				{
					Name: to.Ptr("applicationGroup1/application1"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/applications"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/application1"),
					Properties: &armdesktopvirtualization.ApplicationProperties{
						Description:          to.Ptr("des1"),
						ApplicationType:      to.Ptr(armdesktopvirtualization.RemoteApplicationTypeInBuilt),
						CommandLineArguments: to.Ptr("arguments"),
						CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
						FilePath:             to.Ptr("path"),
						FriendlyName:         to.Ptr("friendly"),
						IconContent:          []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
						IconHash:             to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
						IconIndex:            to.Ptr[int32](1),
						IconPath:             to.Ptr("icon"),
						ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						ShowInPortal:         to.Ptr(true),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("applicationGroup1/application2"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/applications"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/application2"),
					Properties: &armdesktopvirtualization.ApplicationProperties{
						Description:          to.Ptr("des2"),
						ApplicationType:      to.Ptr(armdesktopvirtualization.RemoteApplicationTypeInBuilt),
						CommandLineArguments: to.Ptr("arguments"),
						CommandLineSetting:   to.Ptr(armdesktopvirtualization.CommandLineSettingAllow),
						FilePath:             to.Ptr("path"),
						FriendlyName:         to.Ptr("friendly"),
						IconContent:          []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
						IconHash:             to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
						IconIndex:            to.Ptr[int32](1),
						IconPath:             to.Ptr("icon"),
						ObjectID:             to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						ShowInPortal:         to.Ptr(true),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Application_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDesktops_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Desktop_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewDesktopsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"applicationGroup1",
		"SessionDesktop",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Desktop{
			Name: to.Ptr("applicationGroup1/SessionDesktop"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/desktops"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/SessionDesktop"),
			Properties: &armdesktopvirtualization.DesktopProperties{
				Description:  to.Ptr("des1"),
				FriendlyName: to.Ptr("friendly"),
				IconContent:  []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
				IconHash:     to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
				ObjectID:     to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Desktop) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Desktop)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDesktops_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Desktop_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewDesktopsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"applicationGroup1",
		"SessionDesktop",
		&armdesktopvirtualization.DesktopsClientUpdateOptions{Desktop: &armdesktopvirtualization.DesktopPatch{
			Properties: &armdesktopvirtualization.DesktopPatchProperties{
				Description:  to.Ptr("des1"),
				FriendlyName: to.Ptr("friendly"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.Desktop{
			Name: to.Ptr("applicationGroup1/SessionDesktop"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/desktops"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/desktops/SessionDesktop"),
			Properties: &armdesktopvirtualization.DesktopProperties{
				Description:  to.Ptr("des1"),
				FriendlyName: to.Ptr("friendly"),
				IconContent:  []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
				IconHash:     to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
				ObjectID:     to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Desktop) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Desktop)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDesktops_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Desktop_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewDesktopsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List("resourceGroup1",
		"applicationGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.DesktopList{
			Value: []*armdesktopvirtualization.Desktop{
				{
					Name: to.Ptr("applicationGroup1/SessionDesktop"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/applicationGroups/desktops"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/applicationGroup1/applications/SessionDesktop"),
					Properties: &armdesktopvirtualization.DesktopProperties{
						Description:  to.Ptr("des1"),
						FriendlyName: to.Ptr("friendly"),
						IconContent:  []byte("AAABAAgAAAAAAAEAIAA7MwAAhgAAAEBAAAABACAAKEIAAMEzAAAwMAAAAQAgAKglAADpdQAAKCgAAAEA..."),
						IconHash:     to.Ptr("bEQ1n2HysrGxCDvgt4bfOtkET8ydzh5SXGM0KGTBPVc"),
						ObjectID:     to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DesktopList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DesktopList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/Desktop_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostPools_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPool_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"hostPool1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.HostPool{
			Name:     to.Ptr("hostPool1"),
			Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.HostPoolProperties{
				Description:                   to.Ptr("des1"),
				CloudPcResource:               to.Ptr(false),
				FriendlyName:                  to.Ptr("friendly"),
				HostPoolType:                  to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
				LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
				MaxSessionLimit:               to.Ptr[int32](999999),
				ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
				PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
				PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
				RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
					ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
					RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
					Token:                      to.Ptr("token"),
				},
				SsoClientID:                 to.Ptr("client"),
				SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
				SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
				SsoadfsAuthority:            to.Ptr("https://adfs"),
				StartVMOnConnect:            to.Ptr(false),
				VMTemplate:                  to.Ptr("{json:json}"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HostPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HostPool)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostPools_CreateOrUpdate(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPool_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"hostPool1",
		armdesktopvirtualization.HostPool{
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.HostPoolProperties{
				Description:      to.Ptr("des1"),
				FriendlyName:     to.Ptr("friendly"),
				HostPoolType:     to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
				LoadBalancerType: to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
				MaxSessionLimit:  to.Ptr[int32](999999),
				MigrationRequest: &armdesktopvirtualization.MigrationRequestProperties{
					MigrationPath: to.Ptr("TenantGroups/{defaultV1TenantGroup.Name}/Tenants/{defaultV1Tenant.Name}/HostPools/{sessionHostPool.Name}"),
					Operation:     to.Ptr(armdesktopvirtualization.OperationStart),
				},
				PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
				PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
				PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
				RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
					ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T14:01:54.9571247Z"); return t }()),
					RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
				},
				SsoClientID:                 to.Ptr("client"),
				SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
				SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
				SsoadfsAuthority:            to.Ptr("https://adfs"),
				StartVMOnConnect:            to.Ptr(false),
				VMTemplate:                  to.Ptr("{json:json}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.HostPool{
			Name:     to.Ptr("hostPool1"),
			Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.HostPoolProperties{
				Description:      to.Ptr("des1"),
				CloudPcResource:  to.Ptr(false),
				FriendlyName:     to.Ptr("friendly"),
				HostPoolType:     to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
				LoadBalancerType: to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
				MaxSessionLimit:  to.Ptr[int32](999999),
				MigrationRequest: &armdesktopvirtualization.MigrationRequestProperties{
					MigrationPath: to.Ptr("TenantGroups/{defaultV1TenantGroup.Name}/Tenants/{defaultV1Tenant.Name}/HostPools/{sessionHostPool.Name}"),
					Operation:     to.Ptr(armdesktopvirtualization.OperationStart),
				},
				ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
				PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
				PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
				RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
					ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T14:01:54.9571247Z"); return t }()),
					RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
					Token:                      to.Ptr("token"),
				},
				SsoClientID:                 to.Ptr("client"),
				SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
				SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
				SsoadfsAuthority:            to.Ptr("https://adfs"),
				StartVMOnConnect:            to.Ptr(false),
				VMTemplate:                  to.Ptr("{json:json}"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HostPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HostPool)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostPools_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPool_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"hostPool1",
		&armdesktopvirtualization.HostPoolsClientDeleteOptions{Force: to.Ptr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Delete.json: %v", err)
	}
}

func TestHostPools_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPool_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"hostPool1",
		&armdesktopvirtualization.HostPoolsClientUpdateOptions{HostPool: &armdesktopvirtualization.HostPoolPatch{
			Properties: &armdesktopvirtualization.HostPoolPatchProperties{
				Description:                   to.Ptr("des1"),
				FriendlyName:                  to.Ptr("friendly"),
				LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
				MaxSessionLimit:               to.Ptr[int32](999999),
				PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
				PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
				RegistrationInfo: &armdesktopvirtualization.RegistrationInfoPatch{
					ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T15:01:54.9571247Z"); return t }()),
					RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
				},
				SsoClientID:                 to.Ptr("client"),
				SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
				SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
				SsoadfsAuthority:            to.Ptr("https://adfs"),
				StartVMOnConnect:            to.Ptr(false),
				VMTemplate:                  to.Ptr("{json:json}"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.HostPool{
			Name:     to.Ptr("hostPool1"),
			Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
			ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armdesktopvirtualization.HostPoolProperties{
				Description:                   to.Ptr("des1"),
				CloudPcResource:               to.Ptr(false),
				FriendlyName:                  to.Ptr("friendly"),
				HostPoolType:                  to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
				LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
				MaxSessionLimit:               to.Ptr[int32](999999),
				ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
				PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
				PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
				RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
					ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
					RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
					Token:                      to.Ptr("token"),
				},
				SsoClientID:                 to.Ptr("client"),
				SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
				SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
				SsoadfsAuthority:            to.Ptr("https://adfs"),
				StartVMOnConnect:            to.Ptr(false),
				VMTemplate:                  to.Ptr("{json:json}"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HostPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HostPool)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostPools_ListByResourceGroup(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPool_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.HostPoolList{
			Value: []*armdesktopvirtualization.HostPool{
				{
					Name:     to.Ptr("hostPool1"),
					Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.HostPoolProperties{
						Description:                   to.Ptr("des1"),
						CloudPcResource:               to.Ptr(false),
						FriendlyName:                  to.Ptr("friendly"),
						HostPoolType:                  to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
						LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
						MaxSessionLimit:               to.Ptr[int32](999999),
						ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
						PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
						PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
						RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
							ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
							RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
							Token:                      to.Ptr("token"),
						},
						SsoClientID:                 to.Ptr("client"),
						SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
						SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
						SsoadfsAuthority:            to.Ptr("https://adfs"),
						StartVMOnConnect:            to.Ptr(false),
						VMTemplate:                  to.Ptr("{json:json}"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("hostPool2"),
					Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.HostPoolProperties{
						Description:                   to.Ptr("des1"),
						CloudPcResource:               to.Ptr(false),
						FriendlyName:                  to.Ptr("friendly"),
						HostPoolType:                  to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
						LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
						MaxSessionLimit:               to.Ptr[int32](999999),
						ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
						PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
						PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
						RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
							ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
							RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
							Token:                      to.Ptr("token"),
						},
						SsoClientID:                 to.Ptr("client"),
						SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
						SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
						SsoadfsAuthority:            to.Ptr("https://adfs"),
						StartVMOnConnect:            to.Ptr(false),
						VMTemplate:                  to.Ptr("{json:json}"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HostPoolList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HostPoolList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostPools_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPool_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.HostPoolList{
			Value: []*armdesktopvirtualization.HostPool{
				{
					Name:     to.Ptr("hostPool1"),
					Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.HostPoolProperties{
						Description:                   to.Ptr("des1"),
						CloudPcResource:               to.Ptr(false),
						FriendlyName:                  to.Ptr("friendly"),
						HostPoolType:                  to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
						LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
						MaxSessionLimit:               to.Ptr[int32](999999),
						ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
						PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
						PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
						RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
							ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
							RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
							Token:                      to.Ptr("token"),
						},
						SsoClientID:                 to.Ptr("client"),
						SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
						SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
						SsoadfsAuthority:            to.Ptr("https://adfs"),
						StartVMOnConnect:            to.Ptr(false),
						VMTemplate:                  to.Ptr("{json:json}"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("hostPool2"),
					Type:     to.Ptr("/Microsoft.DesktopVirtualization/hostPools"),
					ID:       to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool2"),
					Location: to.Ptr("centralus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armdesktopvirtualization.HostPoolProperties{
						Description:                   to.Ptr("des1"),
						CloudPcResource:               to.Ptr(false),
						FriendlyName:                  to.Ptr("friendly"),
						HostPoolType:                  to.Ptr(armdesktopvirtualization.HostPoolTypePooled),
						LoadBalancerType:              to.Ptr(armdesktopvirtualization.LoadBalancerTypeBreadthFirst),
						MaxSessionLimit:               to.Ptr[int32](999999),
						ObjectID:                      to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						PersonalDesktopAssignmentType: to.Ptr(armdesktopvirtualization.PersonalDesktopAssignmentTypeAutomatic),
						PreferredAppGroupType:         to.Ptr(armdesktopvirtualization.PreferredAppGroupTypeDesktop),
						PublicNetworkAccess:           to.Ptr(armdesktopvirtualization.PublicNetworkAccessEnabled),
						RegistrationInfo: &armdesktopvirtualization.RegistrationInfo{
							ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
							RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
							Token:                      to.Ptr("token"),
						},
						SsoClientID:                 to.Ptr("client"),
						SsoClientSecretKeyVaultPath: to.Ptr("https://keyvault/secret"),
						SsoSecretType:               to.Ptr(armdesktopvirtualization.SSOSecretTypeSharedKey),
						SsoadfsAuthority:            to.Ptr("https://adfs"),
						StartVMOnConnect:            to.Ptr(false),
						VMTemplate:                  to.Ptr("{json:json}"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HostPoolList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HostPoolList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPool_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostPools_RetrieveRegistrationToken(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPools_RetrieveRegistrationToken_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HostPools_RetrieveRegistrationToken_Post"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewHostPoolsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.RetrieveRegistrationToken(ctx,
		"resourceGroup1",
		"hostPool1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPools_RetrieveRegistrationToken_Post.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.RegistrationInfo{
			ExpirationTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
			RegistrationTokenOperation: to.Ptr(armdesktopvirtualization.RegistrationTokenOperationUpdate),
			Token:                      to.Ptr("token"),
		}
		if !reflect.DeepEqual(exampleRes, res.RegistrationInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistrationInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/HostPools_RetrieveRegistrationToken_Post.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserSessions_ListByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_ListByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserSession_ListByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewUserSessionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByHostPool("resourceGroup1",
		"hostPool1",
		&armdesktopvirtualization.UserSessionsClientListByHostPoolOptions{Filter: to.Ptr("userPrincipalName eq 'user1@microsoft.com' and state eq 'active'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_ListByHostPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.UserSessionList{
			Value: []*armdesktopvirtualization.UserSession{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionHosts/userSessions"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com/userSessions/1"),
					Properties: &armdesktopvirtualization.UserSessionProperties{
						ActiveDirectoryUserName: to.Ptr("WVDARM\\user1"),
						ApplicationType:         to.Ptr(armdesktopvirtualization.ApplicationTypeDesktop),
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						ObjectID:                to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						SessionState:            to.Ptr(armdesktopvirtualization.SessionStateActive),
						UserPrincipalName:       to.Ptr("user1@microsoft.com"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("2"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionHosts/userSessions"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com/userSessions/2"),
					Properties: &armdesktopvirtualization.UserSessionProperties{
						ActiveDirectoryUserName: to.Ptr("WVDARM\\user1"),
						ApplicationType:         to.Ptr(armdesktopvirtualization.ApplicationTypeDesktop),
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						ObjectID:                to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						SessionState:            to.Ptr(armdesktopvirtualization.SessionStateActive),
						UserPrincipalName:       to.Ptr("user1@microsoft.com"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserSessionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserSessionList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_ListByHostPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserSessions_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserSession_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewUserSessionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.UserSession{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionHosts/userSessions"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com/userSessions/1"),
			Properties: &armdesktopvirtualization.UserSessionProperties{
				ActiveDirectoryUserName: to.Ptr("WVDARM\\user1"),
				ApplicationType:         to.Ptr(armdesktopvirtualization.ApplicationTypeDesktop),
				CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				ObjectID:                to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				SessionState:            to.Ptr(armdesktopvirtualization.SessionStateActive),
				UserPrincipalName:       to.Ptr("user1@microsoft.com"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UserSession) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserSession)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserSessions_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserSession_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewUserSessionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		"1",
		&armdesktopvirtualization.UserSessionsClientDeleteOptions{Force: to.Ptr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Delete.json: %v", err)
	}
}

func TestUserSessions_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserSession_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewUserSessionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List("resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.UserSessionList{
			Value: []*armdesktopvirtualization.UserSession{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionHosts/userSessions"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com/userSessions/1"),
					Properties: &armdesktopvirtualization.UserSessionProperties{
						ActiveDirectoryUserName: to.Ptr("WVDARM\\user1"),
						ApplicationType:         to.Ptr(armdesktopvirtualization.ApplicationTypeDesktop),
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						ObjectID:                to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						SessionState:            to.Ptr(armdesktopvirtualization.SessionStateActive),
						UserPrincipalName:       to.Ptr("user1@microsoft.com"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("2"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionHosts/userSessions"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com/userSessions/2"),
					Properties: &armdesktopvirtualization.UserSessionProperties{
						ActiveDirectoryUserName: to.Ptr("WVDARM\\user1"),
						ApplicationType:         to.Ptr(armdesktopvirtualization.ApplicationTypeDesktop),
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						ObjectID:                to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						SessionState:            to.Ptr(armdesktopvirtualization.SessionStateActive),
						UserPrincipalName:       to.Ptr("user1@microsoft.com"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserSessionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserSessionList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserSessions_Disconnect(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Disconnect_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserSession_Disconnect_Post"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewUserSessionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Disconnect(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_Disconnect_Post.json: %v", err)
	}
}

func TestUserSessions_SendMessage(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_SendMessage_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserSession_SendMessage_Post"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewUserSessionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.SendMessage(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		"1",
		&armdesktopvirtualization.UserSessionsClientSendMessageOptions{SendMessage: &armdesktopvirtualization.SendMessage{
			MessageBody:  to.Ptr("body"),
			MessageTitle: to.Ptr("title"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/UserSession_SendMessage_Post.json: %v", err)
	}
}

func TestSessionHosts_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SessionHost_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewSessionHostsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.SessionHost{
			Name: to.Ptr("sessionHost1.microsoft.com"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionHosts"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com"),
			Properties: &armdesktopvirtualization.SessionHostProperties{
				AgentVersion:    to.Ptr("1.0.0.1391"),
				AllowNewSession: to.Ptr(true),
				AssignedUser:    to.Ptr("user1@microsoft.com"),
				LastHeartBeat:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				LastUpdateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				ObjectID:        to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				OSVersion:       to.Ptr("10.0.17763"),
				ResourceID:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/virtualMachines/sessionHost1"),
				SessionHostHealthCheckResults: []*armdesktopvirtualization.SessionHostHealthCheckReport{
					{
						AdditionalFailureDetails: &armdesktopvirtualization.SessionHostHealthCheckFailureDetails{
							ErrorCode:               to.Ptr[int32](0),
							LastHealthCheckDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-14T02:09:37.6236843Z"); return t }()),
							Message:                 to.Ptr("SessionHost healthy: is joined to domain ≤wvdarmtest1.net≥"),
						},
						HealthCheckName:   to.Ptr(armdesktopvirtualization.HealthCheckNameDomainJoinedCheck),
						HealthCheckResult: to.Ptr(armdesktopvirtualization.HealthCheckResultHealthCheckSucceeded),
					}},
				Sessions:           to.Ptr[int32](1),
				Status:             to.Ptr(armdesktopvirtualization.StatusAvailable),
				StatusTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				SxSStackVersion:    to.Ptr("rdp-sxs190816002"),
				UpdateErrorMessage: to.Ptr(""),
				UpdateState:        to.Ptr(armdesktopvirtualization.UpdateStateSucceeded),
				VirtualMachineID:   to.Ptr("29491b54-c033-4dec-b09a-18bf0ebafaef"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SessionHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SessionHost)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSessionHosts_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SessionHost_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewSessionHostsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		&armdesktopvirtualization.SessionHostsClientDeleteOptions{Force: to.Ptr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Delete.json: %v", err)
	}
}

func TestSessionHosts_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SessionHost_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewSessionHostsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"hostPool1",
		"sessionHost1.microsoft.com",
		&armdesktopvirtualization.SessionHostsClientUpdateOptions{Force: to.Ptr(true),
			SessionHost: &armdesktopvirtualization.SessionHostPatch{
				Properties: &armdesktopvirtualization.SessionHostPatchProperties{
					AllowNewSession: to.Ptr(true),
					AssignedUser:    to.Ptr("user1@microsoft.com"),
				},
			},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.SessionHost{
			Name: to.Ptr("sessionHost1.microsoft.com"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionhosts"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com"),
			Properties: &armdesktopvirtualization.SessionHostProperties{
				AgentVersion:    to.Ptr("1.0.0.1391"),
				AllowNewSession: to.Ptr(true),
				AssignedUser:    to.Ptr("user1@microsoft.com"),
				LastHeartBeat:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-11T19:27:13.6108027Z"); return t }()),
				LastUpdateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				ObjectID:        to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
				OSVersion:       to.Ptr("10.0.17763"),
				ResourceID:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/virtualMachines/sessionHost1"),
				SessionHostHealthCheckResults: []*armdesktopvirtualization.SessionHostHealthCheckReport{
					{
						AdditionalFailureDetails: &armdesktopvirtualization.SessionHostHealthCheckFailureDetails{
							ErrorCode:               to.Ptr[int32](0),
							LastHealthCheckDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-14T02:09:37.6236843Z"); return t }()),
							Message:                 to.Ptr("SessionHost healthy: is joined to domain ≤wvdarmtest1.net≥"),
						},
						HealthCheckName:   to.Ptr(armdesktopvirtualization.HealthCheckNameDomainJoinedCheck),
						HealthCheckResult: to.Ptr(armdesktopvirtualization.HealthCheckResultHealthCheckSucceeded),
					}},
				Sessions:           to.Ptr[int32](1),
				Status:             to.Ptr(armdesktopvirtualization.StatusAvailable),
				StatusTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-24T20:00:08.2893033Z"); return t }()),
				SxSStackVersion:    to.Ptr("rdp-sxs190816002"),
				UpdateErrorMessage: to.Ptr(""),
				UpdateState:        to.Ptr(armdesktopvirtualization.UpdateStateSucceeded),
				VirtualMachineID:   to.Ptr("29491b54-c033-4dec-b09a-18bf0ebafaef"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SessionHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SessionHost)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSessionHosts_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SessionHost_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewSessionHostsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List("resourceGroup1",
		"hostPool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.SessionHostList{
			Value: []*armdesktopvirtualization.SessionHost{
				{
					Name: to.Ptr("sessionHost1.microsoft.com"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionhosts"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost1.microsoft.com"),
					Properties: &armdesktopvirtualization.SessionHostProperties{
						AgentVersion:    to.Ptr("1.0.0.1391"),
						AllowNewSession: to.Ptr(true),
						AssignedUser:    to.Ptr("user1@microsoft.com"),
						LastHeartBeat:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						LastUpdateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						ObjectID:        to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						OSVersion:       to.Ptr("10.0.17763"),
						ResourceID:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/virtualMachines/sessionHost1"),
						SessionHostHealthCheckResults: []*armdesktopvirtualization.SessionHostHealthCheckReport{
							{
								AdditionalFailureDetails: &armdesktopvirtualization.SessionHostHealthCheckFailureDetails{
									ErrorCode:               to.Ptr[int32](0),
									LastHealthCheckDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-14T02:09:37.6236843Z"); return t }()),
									Message:                 to.Ptr("SessionHost healthy: is joined to domain ≤wvdarmtest1.net≥"),
								},
								HealthCheckName:   to.Ptr(armdesktopvirtualization.HealthCheckNameDomainJoinedCheck),
								HealthCheckResult: to.Ptr(armdesktopvirtualization.HealthCheckResultHealthCheckSucceeded),
							}},
						Sessions:           to.Ptr[int32](1),
						Status:             to.Ptr(armdesktopvirtualization.StatusAvailable),
						StatusTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						SxSStackVersion:    to.Ptr("rdp-sxs190816002"),
						UpdateErrorMessage: to.Ptr(""),
						UpdateState:        to.Ptr(armdesktopvirtualization.UpdateStateSucceeded),
						VirtualMachineID:   to.Ptr("29491b54-c033-4dec-b09a-18bf0ebafaef"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("sessionHost2.microsoft.com"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostPools/sessionhosts"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostPools/hostPool1/sessionHosts/sessionHost2microsoft.com"),
					Properties: &armdesktopvirtualization.SessionHostProperties{
						AgentVersion:    to.Ptr("1.0.0.1391"),
						AllowNewSession: to.Ptr(true),
						AssignedUser:    to.Ptr("user2@microsoft.com"),
						LastHeartBeat:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						LastUpdateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						ObjectID:        to.Ptr("7877fb31-4bde-49fd-9df3-c046e0ec5325"),
						OSVersion:       to.Ptr("10.0.17763"),
						ResourceID:      to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/virtualMachines/sessionHost2"),
						SessionHostHealthCheckResults: []*armdesktopvirtualization.SessionHostHealthCheckReport{
							{
								AdditionalFailureDetails: &armdesktopvirtualization.SessionHostHealthCheckFailureDetails{
									ErrorCode:               to.Ptr[int32](0),
									LastHealthCheckDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-14T02:09:37.6236843Z"); return t }()),
									Message:                 to.Ptr("SessionHost healthy: is joined to domain ≤wvdarmtest1.net≥"),
								},
								HealthCheckName:   to.Ptr(armdesktopvirtualization.HealthCheckNameDomainJoinedCheck),
								HealthCheckResult: to.Ptr(armdesktopvirtualization.HealthCheckResultHealthCheckSucceeded),
							}},
						Sessions:           to.Ptr[int32](1),
						Status:             to.Ptr(armdesktopvirtualization.StatusAvailable),
						StatusTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						SxSStackVersion:    to.Ptr("rdp-sxs190816002"),
						UpdateErrorMessage: to.Ptr(""),
						UpdateState:        to.Ptr(armdesktopvirtualization.UpdateStateSucceeded),
						VirtualMachineID:   to.Ptr("39491b54-c033-4dec-b09a-18bf0ebafaef"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SessionHostList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SessionHostList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/SessionHost_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMSIXPackages_Get(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MSIXPackage_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewMSIXPackagesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"hostpool1",
		"packagefullname",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.MSIXPackage{
			Name: to.Ptr("hostpool1/MsixPackageFullName"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/msixpackages"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourcegroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/msixpackages/msixPackageFullName"),
			Properties: &armdesktopvirtualization.MSIXPackageProperties{
				DisplayName:           to.Ptr("dis"),
				ImagePath:             to.Ptr("imagepath"),
				IsActive:              to.Ptr(false),
				IsRegularRegistration: to.Ptr(false),
				LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
					{
						Description:    to.Ptr("desc"),
						AppID:          to.Ptr("Application_Id"),
						AppUserModelID: to.Ptr("Application_ModelID"),
						FriendlyName:   to.Ptr("fri"),
						IconImageName:  to.Ptr("Apptile"),
						RawIcon:        []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
						RawPNG:         []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
					}},
				PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
					{
						DependencyName: to.Ptr("MsixPackage_Dependency_Name"),
						MinVersion:     to.Ptr("packageDep_version"),
						Publisher:      to.Ptr("MsixPackage_Dependency_Publisher"),
					}},
				PackageFamilyName:   to.Ptr("MsixPackage_FamilyName"),
				PackageName:         to.Ptr("MsixPackage_Name"),
				PackageRelativePath: to.Ptr("MsixPackage_RelativePackageRoot"),
				Version:             to.Ptr("version"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MSIXPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MSIXPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMSIXPackages_CreateOrUpdate(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MSIXPackage_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewMSIXPackagesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"hostpool1",
		"msixpackagefullname",
		armdesktopvirtualization.MSIXPackage{
			Properties: &armdesktopvirtualization.MSIXPackageProperties{
				DisplayName:           to.Ptr("displayname"),
				ImagePath:             to.Ptr("imagepath"),
				IsActive:              to.Ptr(false),
				IsRegularRegistration: to.Ptr(false),
				LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
					{
						Description:    to.Ptr("application-desc"),
						AppID:          to.Ptr("ApplicationId"),
						AppUserModelID: to.Ptr("AppUserModelId"),
						FriendlyName:   to.Ptr("friendlyname"),
						IconImageName:  to.Ptr("Apptile"),
						RawIcon:        []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
						RawPNG:         []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
					}},
				PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
					{
						DependencyName: to.Ptr("MsixTest_Dependency_Name"),
						MinVersion:     to.Ptr("version"),
						Publisher:      to.Ptr("PublishedName"),
					}},
				PackageFamilyName:   to.Ptr("MsixPackage_FamilyName"),
				PackageName:         to.Ptr("MsixPackage_name"),
				PackageRelativePath: to.Ptr("packagerelativepath"),
				Version:             to.Ptr("version"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.MSIXPackage{
			Name: to.Ptr("hostpool1/MsixPackageFullName"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/msixpackages"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourcegroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/msixpackages/msixPackageFullName"),
			Properties: &armdesktopvirtualization.MSIXPackageProperties{
				DisplayName:           to.Ptr("dis"),
				ImagePath:             to.Ptr("imagepath"),
				IsActive:              to.Ptr(false),
				IsRegularRegistration: to.Ptr(false),
				LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
					{
						Description:    to.Ptr("desc"),
						AppID:          to.Ptr("Application_Id"),
						AppUserModelID: to.Ptr("Application_ModelID"),
						FriendlyName:   to.Ptr("fri"),
						IconImageName:  to.Ptr("Apptile"),
						RawIcon:        []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
						RawPNG:         []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
					}},
				PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
					{
						DependencyName: to.Ptr("MsixPackage_Dependency_Name"),
						MinVersion:     to.Ptr("packageDep_version"),
						Publisher:      to.Ptr("MsixPackage_Dependency_Publisher"),
					}},
				PackageFamilyName:   to.Ptr("MsixPackage_FamilyName"),
				PackageName:         to.Ptr("MsixPackage_Name"),
				PackageRelativePath: to.Ptr("MsixPackage_RelativePackageRoot"),
				Version:             to.Ptr("version"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MSIXPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MSIXPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMSIXPackages_Delete(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MSIXPackage_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewMSIXPackagesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"hostpool1",
		"packagefullname",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Delete.json: %v", err)
	}
}

func TestMSIXPackages_Update(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MSIXPackage_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewMSIXPackagesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"hostpool1",
		"msixpackagefullname",
		&armdesktopvirtualization.MSIXPackagesClientUpdateOptions{MsixPackage: &armdesktopvirtualization.MSIXPackagePatch{
			Properties: &armdesktopvirtualization.MSIXPackagePatchProperties{
				DisplayName:           to.Ptr("displayname"),
				IsActive:              to.Ptr(true),
				IsRegularRegistration: to.Ptr(false),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.MSIXPackage{
			Name: to.Ptr("hostpool1/MsixPackageFullName"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/msixpackages"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourcegroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/msixpackages/msixPackageFullName"),
			Properties: &armdesktopvirtualization.MSIXPackageProperties{
				DisplayName:           to.Ptr("dis"),
				ImagePath:             to.Ptr("imagepath"),
				IsActive:              to.Ptr(true),
				IsRegularRegistration: to.Ptr(false),
				LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
				PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
					{
						Description:    to.Ptr("desc"),
						AppID:          to.Ptr("Application_Id"),
						AppUserModelID: to.Ptr("Application_ModelID"),
						FriendlyName:   to.Ptr("fri"),
						IconImageName:  to.Ptr("Apptile"),
						RawIcon:        []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
						RawPNG:         []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
					}},
				PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
					{
						DependencyName: to.Ptr("MsixPackage_Dependency_Name"),
						MinVersion:     to.Ptr("packageDep_version"),
						Publisher:      to.Ptr("MsixPackage_Dependency_Publisher"),
					}},
				PackageFamilyName:   to.Ptr("MsixPackage_FamilyName"),
				PackageName:         to.Ptr("MsixPackage_Name"),
				PackageRelativePath: to.Ptr("MsixPackage_RelativePackageRoot"),
				Version:             to.Ptr("version"),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MSIXPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MSIXPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMSIXPackages_List(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MSIXPackage_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewMSIXPackagesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.List("resourceGroup1",
		"hostpool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.MSIXPackageList{
			Value: []*armdesktopvirtualization.MSIXPackage{
				{
					Name: to.Ptr("hostpool1/MsixPackageFullName"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/msixpackages"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourcegroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/msixpackages/msixPackageFullName"),
					Properties: &armdesktopvirtualization.MSIXPackageProperties{
						DisplayName:           to.Ptr("dis"),
						ImagePath:             to.Ptr("imagepath"),
						IsActive:              to.Ptr(false),
						IsRegularRegistration: to.Ptr(false),
						LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
							{
								Description:    to.Ptr("desc"),
								AppID:          to.Ptr("Application_Id"),
								AppUserModelID: to.Ptr("Application_ModelID"),
								FriendlyName:   to.Ptr("fri"),
								IconImageName:  to.Ptr("Apptile"),
								RawIcon:        []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
								RawPNG:         []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
							}},
						PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
							{
								DependencyName: to.Ptr("MsixPackage_Dependency_Name"),
								MinVersion:     to.Ptr("packageDep_version"),
								Publisher:      to.Ptr("MsixPackage_Dependency_Publisher"),
							}},
						PackageFamilyName:   to.Ptr("MsixPackage_FamilyName"),
						PackageName:         to.Ptr("MsixPackage_Name"),
						PackageRelativePath: to.Ptr("MsixPackage_RelativePackageRoot"),
						Version:             to.Ptr("version"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("hostpool1/MsixPackageFullName2"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/msixpackages"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourcegroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/msixpackages/msixPackageFullName2"),
					Properties: &armdesktopvirtualization.MSIXPackageProperties{
						DisplayName:           to.Ptr("dis2"),
						ImagePath:             to.Ptr("imagepath2"),
						IsActive:              to.Ptr(false),
						IsRegularRegistration: to.Ptr(false),
						LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
							{
								Description:    to.Ptr("desc2"),
								AppID:          to.Ptr("Application_Id2"),
								AppUserModelID: to.Ptr("Application_ModelID2"),
								FriendlyName:   to.Ptr("fri2"),
								IconImageName:  to.Ptr("Apptile2"),
								RawIcon:        []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo2"),
								RawPNG:         []byte("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo2"),
							}},
						PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
							{
								DependencyName: to.Ptr("MsixPackage_Dependency_Name2"),
								MinVersion:     to.Ptr("packageDep_version2"),
								Publisher:      to.Ptr("MsixPackage_Dependency_Publisher2"),
							}},
						PackageFamilyName:   to.Ptr("MsixPackage_FamilyName2"),
						PackageName:         to.Ptr("MsixPackage_Name2"),
						PackageRelativePath: to.Ptr("MsixPackage_RelativePackageRoot2"),
						Version:             to.Ptr("version2"),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MSIXPackageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MSIXPackageList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixPackage_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMsixImages_Expand(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixImage_Expand_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MsixImage_Expand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewMsixImagesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.Expand("resourceGroup1",
		"hostpool1",
		armdesktopvirtualization.MSIXImageURI{
			URI: to.Ptr("imagepath"),
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixImage_Expand_Post.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.ExpandMsixImageList{
			Value: []*armdesktopvirtualization.ExpandMsixImage{
				{
					Name: to.Ptr("hostpool1/expandmsiximage"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/expandmsiximage"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/expandmsiximage"),
					Properties: &armdesktopvirtualization.ExpandMsixImageProperties{
						DisplayName:           to.Ptr("displayname"),
						ImagePath:             to.Ptr("imagepath"),
						IsActive:              to.Ptr(false),
						IsRegularRegistration: to.Ptr(false),
						LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						PackageAlias:          to.Ptr("msixpackagealias"),
						PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
							{
								Description:    to.Ptr("PackageApplicationDescription"),
								AppID:          to.Ptr("AppId"),
								AppUserModelID: to.Ptr("AppUserModelId"),
								FriendlyName:   to.Ptr("FriendlyName"),
								IconImageName:  to.Ptr("Iconimagename"),
								RawIcon:        []byte("RawIcon"),
								RawPNG:         []byte("RawPng"),
							}},
						PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{},
						PackageFamilyName:   to.Ptr("MsixPackage_FamilyName"),
						PackageFullName:     to.Ptr("MsixPackage_FullName"),
						PackageName:         to.Ptr("MsixPackageName"),
						PackageRelativePath: to.Ptr("packagerelativepath"),
						Version:             to.Ptr("packageversion"),
					},
				},
				{
					Name: to.Ptr("hostpool1/expandmsiximage"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/expandmsiximage"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourcegroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostpool1/expandmsiximage"),
					Properties: &armdesktopvirtualization.ExpandMsixImageProperties{
						DisplayName:           to.Ptr("displayname2"),
						ImagePath:             to.Ptr("imagepath"),
						IsActive:              to.Ptr(false),
						IsRegularRegistration: to.Ptr(false),
						LastUpdated:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2008-09-22T14:01:54.9571247Z"); return t }()),
						PackageAlias:          to.Ptr("msixpackagealias2"),
						PackageApplications: []*armdesktopvirtualization.MsixPackageApplications{
							{
								Description:    to.Ptr("PackageApplicationDescription1"),
								AppID:          to.Ptr("AppId1"),
								AppUserModelID: to.Ptr("AppUserModelId1"),
								FriendlyName:   to.Ptr("FriendlyName1"),
								IconImageName:  to.Ptr("Iconimagename1"),
								RawIcon:        []byte("RawIcon1"),
								RawPNG:         []byte("RawPng1"),
							},
							{
								Description:    to.Ptr("PackageApplicationDescription2"),
								AppID:          to.Ptr("AppId2"),
								AppUserModelID: to.Ptr("AppUserModelId2"),
								FriendlyName:   to.Ptr("FriendlyName2"),
								IconImageName:  to.Ptr("Iconimagename2"),
								RawIcon:        []byte("RawIcon2"),
								RawPNG:         []byte("RawPng2"),
							}},
						PackageDependencies: []*armdesktopvirtualization.MsixPackageDependencies{
							{
								DependencyName: to.Ptr("MsixPackageDependency1"),
								MinVersion:     to.Ptr("ver1"),
								Publisher:      to.Ptr("PublisherName1"),
							},
							{
								DependencyName: to.Ptr("MsixPackageDependency2"),
								MinVersion:     to.Ptr("ver2"),
								Publisher:      to.Ptr("PublisherName2"),
							}},
						PackageFamilyName:   to.Ptr("MsixPackage_FamilyName2"),
						PackageFullName:     to.Ptr("MsixPackage_FullName2"),
						PackageName:         to.Ptr("MsixPackageName2"),
						PackageRelativePath: to.Ptr("packagerelativepath2"),
						Version:             to.Ptr("packageversion"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpandMsixImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpandMsixImageList)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/MsixImage_Expand_Post.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_ListByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_ListByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByHostPool("resourceGroup1",
		"hostPool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_ListByHostPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.PrivateEndpointConnectionListResultWithSystemData{
			Value: []*armdesktopvirtualization.PrivateEndpointConnectionWithSystemData{
				{
					Name: to.Ptr("hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostPool1/privateEndpointConnections/hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
					Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armdesktopvirtualization.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateEndpoints/endpointName1"),
						},
						PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armdesktopvirtualization.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResultWithSystemData) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResultWithSystemData)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_ListByHostPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_GetByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_GetByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.GetByHostPool(ctx,
		"resourceGroup1",
		"hostPool1",
		"hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_GetByHostPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.PrivateEndpointConnectionWithSystemData{
			Name: to.Ptr("hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostPool1/privateEndpointConnections/hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdesktopvirtualization.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateEndpoints/endpointName1"),
				},
				PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdesktopvirtualization.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionWithSystemData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionWithSystemData)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_GetByHostPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_DeleteByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_DeleteByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_DeleteByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.DeleteByHostPool(ctx,
		"resourceGroup1",
		"hostPool1",
		"hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_DeleteByHostPool.json: %v", err)
	}
}

func TestPrivateEndpointConnections_UpdateByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_UpdateByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_UpdateByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.UpdateByHostPool(ctx,
		"resourceGroup1",
		"hostPool1",
		"hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b",
		armdesktopvirtualization.PrivateEndpointConnection{
			Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Approved by admin@consoto.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_UpdateByHostPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.PrivateEndpointConnectionWithSystemData{
			Name: to.Ptr("hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostPool1/privateEndpointConnections/hostPool1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdesktopvirtualization.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateEndpoints/endpointName1"),
				},
				PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Approved by admin@consoto.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdesktopvirtualization.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionWithSystemData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionWithSystemData)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_UpdateByHostPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByWorkspace(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_ListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_ListByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByWorkspace("resourceGroup1",
		"workspace1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_ListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.PrivateEndpointConnectionListResultWithSystemData{
			Value: []*armdesktopvirtualization.PrivateEndpointConnectionWithSystemData{
				{
					Name: to.Ptr("workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1/privateEndpointConnections/workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
					Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armdesktopvirtualization.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateEndpoints/endpointName1"),
						},
						PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armdesktopvirtualization.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
					SystemData: &armdesktopvirtualization.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResultWithSystemData) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResultWithSystemData)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_ListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_GetByWorkspace(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_GetByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.GetByWorkspace(ctx,
		"resourceGroup1",
		"workspace1",
		"workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_GetByWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.PrivateEndpointConnectionWithSystemData{
			Name: to.Ptr("workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/workspaces/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1/privateEndpointConnections/workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdesktopvirtualization.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateEndpoints/endpointName1"),
				},
				PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdesktopvirtualization.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionWithSystemData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionWithSystemData)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_GetByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_DeleteByWorkspace(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_DeleteByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_DeleteByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	_, err := client.DeleteByWorkspace(ctx,
		"resourceGroup1",
		"workspace1",
		"workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_DeleteByWorkspace.json: %v", err)
	}
}

func TestPrivateEndpointConnections_UpdateByWorkspace(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_UpdateByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_UpdateByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateEndpointConnectionsClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	res, err := client.UpdateByWorkspace(ctx,
		"resourceGroup1",
		"workspace1",
		"workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b",
		armdesktopvirtualization.PrivateEndpointConnection{
			Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Approved by admin@consoto.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_UpdateByWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdesktopvirtualization.PrivateEndpointConnectionWithSystemData{
			Name: to.Ptr("workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Type: to.Ptr("Microsoft.DesktopVirtualization/workspaces/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1/privateEndpointConnections/workspace1.377103f1-5179-4bdf-8556-4cdd3207cc5b"),
			Properties: &armdesktopvirtualization.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdesktopvirtualization.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateEndpoints/endpointName1"),
				},
				PrivateLinkServiceConnectionState: &armdesktopvirtualization.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Approved by admin@consoto.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdesktopvirtualization.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdesktopvirtualization.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armdesktopvirtualization.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armdesktopvirtualization.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionWithSystemData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionWithSystemData)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateEndpointConnection_UpdateByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByHostPool(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateLinkResources_ListByHostPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByHostPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateLinkResourcesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByHostPool("resourceGroup1",
		"hostPool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateLinkResources_ListByHostPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.PrivateLinkResourceListResult{
			Value: []*armdesktopvirtualization.PrivateLinkResource{
				{
					Name: to.Ptr("hostpool"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/hostpools/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/hostpools/hostPool1/privateLinkResources/hostpool"),
					Properties: &armdesktopvirtualization.PrivateLinkResourceProperties{
						GroupID: to.Ptr("hostpool"),
						RequiredMembers: []*string{
							to.Ptr("rdbroker"),
							to.Ptr("rddiagnostics"),
							to.Ptr("rdweb"),
							to.Ptr("rdgateway")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.wvd.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateLinkResources_ListByHostPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByWorkspace(t *testing.T) {
	// From example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateLinkResources_ListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdesktopvirtualization.NewPrivateLinkResourcesClient("daefabc0-95b4-48b3-b645-8a753a63c4fa", cred, &options)
	pager := client.ListByWorkspace("resourceGroup1",
		"workspace1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateLinkResources_ListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdesktopvirtualization.PrivateLinkResourceListResult{
			Value: []*armdesktopvirtualization.PrivateLinkResource{
				{
					Name: to.Ptr("workspace"),
					Type: to.Ptr("Microsoft.DesktopVirtualization/workspaces/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.DesktopVirtualization/workspaces/workspace1/privateLinkResources/workspace"),
					Properties: &armdesktopvirtualization.PrivateLinkResourceProperties{
						GroupID: to.Ptr("workspace"),
						RequiredMembers: []*string{
							to.Ptr("rdbroker"),
							to.Ptr("rddiagnostics"),
							to.Ptr("rdweb"),
							to.Ptr("rdgateway")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.wvd.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2021-09-03-preview/examples/PrivateLinkResources_ListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
