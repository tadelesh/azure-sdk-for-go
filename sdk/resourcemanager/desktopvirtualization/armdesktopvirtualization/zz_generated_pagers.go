//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdesktopvirtualization

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ApplicationGroupsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ApplicationGroupsClientListByResourceGroupPager struct {
	client    *ApplicationGroupsClient
	current   ApplicationGroupsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationGroupsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationGroupsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationGroupList.NextLink == nil || len(*p.current.ApplicationGroupList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationGroupsClientListByResourceGroupPager) NextPage(ctx context.Context) (ApplicationGroupsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationGroupsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationGroupsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationGroupsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationGroupsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ApplicationGroupsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplicationGroupsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ApplicationGroupsClientListBySubscriptionPager struct {
	client    *ApplicationGroupsClient
	current   ApplicationGroupsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationGroupsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationGroupsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationGroupList.NextLink == nil || len(*p.current.ApplicationGroupList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationGroupsClientListBySubscriptionPager) NextPage(ctx context.Context) (ApplicationGroupsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationGroupsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationGroupsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationGroupsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationGroupsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ApplicationGroupsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplicationsClientListPager provides operations for iterating over paged responses.
type ApplicationsClientListPager struct {
	client    *ApplicationsClient
	current   ApplicationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationList.NextLink == nil || len(*p.current.ApplicationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationsClientListPager) NextPage(ctx context.Context) (ApplicationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ApplicationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DesktopsClientListPager provides operations for iterating over paged responses.
type DesktopsClientListPager struct {
	client    *DesktopsClient
	current   DesktopsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DesktopsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DesktopsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DesktopList.NextLink == nil || len(*p.current.DesktopList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DesktopsClientListPager) NextPage(ctx context.Context) (DesktopsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DesktopsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DesktopsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DesktopsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DesktopsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DesktopsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// HostPoolsClientListByResourceGroupPager provides operations for iterating over paged responses.
type HostPoolsClientListByResourceGroupPager struct {
	client    *HostPoolsClient
	current   HostPoolsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, HostPoolsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *HostPoolsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostPoolList.NextLink == nil || len(*p.current.HostPoolList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *HostPoolsClientListByResourceGroupPager) NextPage(ctx context.Context) (HostPoolsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return HostPoolsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return HostPoolsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return HostPoolsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return HostPoolsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return HostPoolsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// HostPoolsClientListPager provides operations for iterating over paged responses.
type HostPoolsClientListPager struct {
	client    *HostPoolsClient
	current   HostPoolsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, HostPoolsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *HostPoolsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostPoolList.NextLink == nil || len(*p.current.HostPoolList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *HostPoolsClientListPager) NextPage(ctx context.Context) (HostPoolsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return HostPoolsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return HostPoolsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return HostPoolsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return HostPoolsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return HostPoolsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MSIXPackagesClientListPager provides operations for iterating over paged responses.
type MSIXPackagesClientListPager struct {
	client    *MSIXPackagesClient
	current   MSIXPackagesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MSIXPackagesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MSIXPackagesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MSIXPackageList.NextLink == nil || len(*p.current.MSIXPackageList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MSIXPackagesClientListPager) NextPage(ctx context.Context) (MSIXPackagesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MSIXPackagesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MSIXPackagesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MSIXPackagesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MSIXPackagesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return MSIXPackagesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MsixImagesClientExpandPager provides operations for iterating over paged responses.
type MsixImagesClientExpandPager struct {
	client    *MsixImagesClient
	current   MsixImagesClientExpandResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MsixImagesClientExpandResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MsixImagesClientExpandPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpandMsixImageList.NextLink == nil || len(*p.current.ExpandMsixImageList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MsixImagesClientExpandPager) NextPage(ctx context.Context) (MsixImagesClientExpandResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MsixImagesClientExpandResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MsixImagesClientExpandResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MsixImagesClientExpandResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MsixImagesClientExpandResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.expandHandleResponse(resp)
	if err != nil {
		return MsixImagesClientExpandResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceProviderOperationList.NextLink == nil || len(*p.current.ResourceProviderOperationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByHostPoolPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByHostPoolPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByHostPoolResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByHostPoolResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByHostPoolPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResultWithSystemData.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResultWithSystemData.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByHostPoolPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByHostPoolResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListByHostPoolResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByHostPoolResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByHostPoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByHostPoolResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByHostPoolHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByHostPoolResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByWorkspacePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByWorkspacePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByWorkspaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByWorkspaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByWorkspacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResultWithSystemData.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResultWithSystemData.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByWorkspacePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByWorkspaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListByWorkspaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByWorkspaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByWorkspaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListByHostPoolPager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListByHostPoolPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListByHostPoolResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesClientListByHostPoolResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListByHostPoolPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListByHostPoolPager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListByHostPoolResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkResourcesClientListByHostPoolResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListByHostPoolResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListByHostPoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListByHostPoolResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByHostPoolHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListByHostPoolResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListByWorkspacePager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListByWorkspacePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListByWorkspaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesClientListByWorkspaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListByWorkspacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListByWorkspacePager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListByWorkspaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkResourcesClientListByWorkspaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListByWorkspaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListByWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListByWorkspaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ScalingPlansClientListByHostPoolPager provides operations for iterating over paged responses.
type ScalingPlansClientListByHostPoolPager struct {
	client    *ScalingPlansClient
	current   ScalingPlansClientListByHostPoolResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ScalingPlansClientListByHostPoolResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ScalingPlansClientListByHostPoolPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScalingPlanList.NextLink == nil || len(*p.current.ScalingPlanList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ScalingPlansClientListByHostPoolPager) NextPage(ctx context.Context) (ScalingPlansClientListByHostPoolResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ScalingPlansClientListByHostPoolResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ScalingPlansClientListByHostPoolResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ScalingPlansClientListByHostPoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ScalingPlansClientListByHostPoolResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByHostPoolHandleResponse(resp)
	if err != nil {
		return ScalingPlansClientListByHostPoolResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ScalingPlansClientListByResourceGroupPager provides operations for iterating over paged responses.
type ScalingPlansClientListByResourceGroupPager struct {
	client    *ScalingPlansClient
	current   ScalingPlansClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ScalingPlansClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ScalingPlansClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScalingPlanList.NextLink == nil || len(*p.current.ScalingPlanList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ScalingPlansClientListByResourceGroupPager) NextPage(ctx context.Context) (ScalingPlansClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ScalingPlansClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ScalingPlansClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ScalingPlansClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ScalingPlansClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ScalingPlansClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ScalingPlansClientListBySubscriptionPager provides operations for iterating over paged responses.
type ScalingPlansClientListBySubscriptionPager struct {
	client    *ScalingPlansClient
	current   ScalingPlansClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ScalingPlansClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ScalingPlansClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScalingPlanList.NextLink == nil || len(*p.current.ScalingPlanList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ScalingPlansClientListBySubscriptionPager) NextPage(ctx context.Context) (ScalingPlansClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ScalingPlansClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ScalingPlansClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ScalingPlansClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ScalingPlansClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ScalingPlansClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SessionHostsClientListPager provides operations for iterating over paged responses.
type SessionHostsClientListPager struct {
	client    *SessionHostsClient
	current   SessionHostsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SessionHostsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SessionHostsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SessionHostList.NextLink == nil || len(*p.current.SessionHostList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SessionHostsClientListPager) NextPage(ctx context.Context) (SessionHostsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SessionHostsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SessionHostsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SessionHostsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SessionHostsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SessionHostsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StartMenuItemsClientListPager provides operations for iterating over paged responses.
type StartMenuItemsClientListPager struct {
	client    *StartMenuItemsClient
	current   StartMenuItemsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StartMenuItemsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StartMenuItemsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StartMenuItemList.NextLink == nil || len(*p.current.StartMenuItemList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StartMenuItemsClientListPager) NextPage(ctx context.Context) (StartMenuItemsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StartMenuItemsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StartMenuItemsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StartMenuItemsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StartMenuItemsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return StartMenuItemsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UserSessionsClientListByHostPoolPager provides operations for iterating over paged responses.
type UserSessionsClientListByHostPoolPager struct {
	client    *UserSessionsClient
	current   UserSessionsClientListByHostPoolResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UserSessionsClientListByHostPoolResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UserSessionsClientListByHostPoolPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserSessionList.NextLink == nil || len(*p.current.UserSessionList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UserSessionsClientListByHostPoolPager) NextPage(ctx context.Context) (UserSessionsClientListByHostPoolResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UserSessionsClientListByHostPoolResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UserSessionsClientListByHostPoolResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UserSessionsClientListByHostPoolResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UserSessionsClientListByHostPoolResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByHostPoolHandleResponse(resp)
	if err != nil {
		return UserSessionsClientListByHostPoolResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UserSessionsClientListPager provides operations for iterating over paged responses.
type UserSessionsClientListPager struct {
	client    *UserSessionsClient
	current   UserSessionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UserSessionsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UserSessionsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserSessionList.NextLink == nil || len(*p.current.UserSessionList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UserSessionsClientListPager) NextPage(ctx context.Context) (UserSessionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UserSessionsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UserSessionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UserSessionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UserSessionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return UserSessionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListByResourceGroupPager provides operations for iterating over paged responses.
type WorkspacesClientListByResourceGroupPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspacesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceList.NextLink == nil || len(*p.current.WorkspaceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListByResourceGroupPager) NextPage(ctx context.Context) (WorkspacesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspacesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListBySubscriptionPager provides operations for iterating over paged responses.
type WorkspacesClientListBySubscriptionPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspacesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceList.NextLink == nil || len(*p.current.WorkspaceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListBySubscriptionPager) NextPage(ctx context.Context) (WorkspacesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspacesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}
