//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrelay_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/relay/armrelay"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/RelayOperations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/RelayOperations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.OperationListResult{
			Value: []*armrelay.Operation{
				{
					Name: to.Ptr("Microsoft.Relay/checkNamespaceAvailability/action"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Get namespace availability."),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("Non Resource Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/register/action"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Registers the Relay Resource Provider"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("Relay and Hybridconnection Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/write"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Create Or Update Namespace "),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("Namespace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/read"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Get Namespace Resource"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("Namespace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/Delete"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Delete Namespace"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("Namespace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/authorizationRules/write"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Create or Update Namespace Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/authorizationRules/delete"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Delete Namespace Authorization Rule"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/authorizationRules/listkeys/action"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Get Namespace Listkeys"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/HybridConnections/write"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Create or Update HybridConnection"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("HybridConnection"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/HybridConnections/read"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Get HybridConnection"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("HybridConnection"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/HybridConnections/Delete"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Delete HybridConnection"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("HybridConnection"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/HybridConnections/authorizationRules/write"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Create or Update HybridConnection Authorization Rule"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("HybridConnection AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/HybridConnections/authorizationRules/delete"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Delete HybridConnection Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("HybridConnection AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/HybridConnections/authorizationRules/listkeys/action"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("List HybridConnection keys"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("HybridConnection AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/WcfRelays/write"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Create or Update WcfRelay"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("WcfRelay"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/WcfRelays/read"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Get WcfRelay"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("WcfRelay"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/WcfRelays/Delete"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Delete WcfRelay"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("WcfRelay"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/WcfRelays/authorizationRules/write"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Create or Update WcfRelay Authorization Rule"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("WcfRelay AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/WcfRelays/authorizationRules/delete"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("Delete WcfRelay Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("WcfRelay AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Relay/namespaces/WcfRelays/authorizationRules/listkeys/action"),
					Display: &armrelay.OperationDisplay{
						Operation: to.Ptr("List WcfRelay keys"),
						Provider:  to.Ptr("Microsoft Azure Relay"),
						Resource:  to.Ptr("WcfRelay AuthorizationRules"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/RelayOperations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_CheckNameAvailability(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armrelay.CheckNameAvailability{
			Name: to.Ptr("sdk-Namespace1321"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.CheckNameAvailabilityResult{
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr(armrelay.UnavailableReasonNone),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_List(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.NamespaceListResult{
			Value: []*armrelay.Namespace{
				{
					Name:     to.Ptr("example-RelayNamespace-01"),
					Type:     to.Ptr("Microsoft.Relay/Namespaces"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/RG1-eg/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armrelay.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
						MetricID:           to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-RelayNamespace-01"),
						ProvisioningState:  to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
						ServiceBusEndpoint: to.Ptr("https://example-RelayNamespace-01.servicebus.windows.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:59.4131724Z"); return t }()),
					},
					SKU: &armrelay.SKU{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("example-RelayNamespace-02"),
					Type:     to.Ptr("Microsoft.Relay/Namespaces"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/RG1-eg/providers/Microsoft.Relay/namespaces/example-RelayNamespace-02"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armrelay.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:39.4131724Z"); return t }()),
						MetricID:           to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-RelayNamespace-02"),
						ProvisioningState:  to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
						ServiceBusEndpoint: to.Ptr("https://example-RelayNamespace-02.servicebus.windows.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
					},
					SKU: &armrelay.SKU{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NamespaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NamespaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_ListByResourceGroup(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByResourceGroup("resourcegroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.NamespaceListResult{
			Value: []*armrelay.Namespace{
				{
					Name:     to.Ptr("example-RelayNamespace-01"),
					Type:     to.Ptr("Microsoft.Relay/Namespaces"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armrelay.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
						MetricID:           to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-RelayNamespace-01"),
						ProvisioningState:  to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
						ServiceBusEndpoint: to.Ptr("https://example-RelayNamespace-01.servicebus.windows.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:59.4131724Z"); return t }()),
					},
					SKU: &armrelay.SKU{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("example-RelayNamespace-02"),
					Type:     to.Ptr("Microsoft.Relay/Namespaces"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-02"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armrelay.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:39.4131724Z"); return t }()),
						MetricID:           to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-RelayNamespace-02"),
						ProvisioningState:  to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
						ServiceBusEndpoint: to.Ptr("https://example-RelayNamespace-02.servicebus.windows.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
					},
					SKU: &armrelay.SKU{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NamespaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NamespaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_CreateOrUpdate(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNamespaceCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		armrelay.Namespace{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			SKU: &armrelay.SKU{
				Name: to.Ptr("Standard"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armrelay.NamespacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.Namespace{
			Name:     to.Ptr("example-RelayNamespace-01"),
			Type:     to.Ptr("Microsoft.Relay/Namespaces"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armrelay.NamespaceProperties{
				MetricID:          to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-Relaynamespace-01"),
				ProvisioningState: to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
			},
			SKU: &armrelay.SKU{
				Name: to.Ptr("Standard"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Namespace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Namespace)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_Delete(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		&armrelay.NamespacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceDelete.json: %v", err)
	}
}

func TestNamespaces_Get(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.Namespace{
			Name:     to.Ptr("example-RelayNamespace-01"),
			Type:     to.Ptr("Microsoft.Relay/Namespaces"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armrelay.NamespaceProperties{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:38:12.46Z"); return t }()),
				MetricID:           to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-RelayNamespace-01"),
				ProvisioningState:  to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
				ServiceBusEndpoint: to.Ptr("https://example-RelayNamespace-01.servicebus.windows.net:443/"),
				UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:38:34.533Z"); return t }()),
			},
			SKU: &armrelay.SKU{
				Name: to.Ptr("Standard"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Namespace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Namespace)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_Update(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Update(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		armrelay.UpdateParameters{
			Tags: map[string]*string{
				"tag3": to.Ptr("value3"),
				"tag4": to.Ptr("value4"),
				"tag5": to.Ptr("value5"),
				"tag6": to.Ptr("value6"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.Namespace{
			Name:     to.Ptr("example-RelayNamespace-01"),
			Type:     to.Ptr("Microsoft.Relay/Namespaces"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag3": to.Ptr("value3"),
				"tag4": to.Ptr("value4"),
				"tag5": to.Ptr("value5"),
				"tag6": to.Ptr("value6"),
			},
			Properties: &armrelay.NamespaceProperties{
				MetricID:          to.Ptr("ffffffff-ffff-ffff-ffff-ffffffffffff:example-Relaynamespace-01"),
				ProvisioningState: to.Ptr(armrelay.ProvisioningStateEnumSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Namespace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Namespace)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_ListAuthorizationRules(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceAutorizationRuleListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListAuthorizationRules("resourcegroup",
		"example-RelayNamespace-01",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.AuthorizationRuleListResult{
			Value: []*armrelay.AuthorizationRule{
				{
					Name: to.Ptr("RootManageSharedAccessKey"),
					Type: to.Ptr("Microsoft.Relay/Namespaces/AuthorizationRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/AuthorizationRules/RootManageSharedAccessKey"),
					Properties: &armrelay.AuthorizationRuleProperties{
						Rights: []*armrelay.AccessRights{
							to.Ptr(armrelay.AccessRightsListen),
							to.Ptr(armrelay.AccessRightsManage),
							to.Ptr(armrelay.AccessRightsSend)},
					},
				},
				{
					Name: to.Ptr("example-RelayAuthRules-01"),
					Type: to.Ptr("Microsoft.Relay/Namespaces/AuthorizationRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/AuthorizationRules/example-RelayAuthRules-01"),
					Properties: &armrelay.AuthorizationRuleProperties{
						Rights: []*armrelay.AccessRights{
							to.Ptr(armrelay.AccessRightsListen),
							to.Ptr(armrelay.AccessRightsSend)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceAuthorizationRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		armrelay.AuthorizationRule{
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen),
					to.Ptr(armrelay.AccessRightsSend)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AuthorizationRule{
			Name: to.Ptr("example-RelayAuthRules-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/AuthorizationRules/example-RelayAuthRules-01"),
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen),
					to.Ptr(armrelay.AccessRightsSend)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_DeleteAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceAutorizationRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	_, err := client.DeleteAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleDelete.json: %v", err)
	}
}

func TestNamespaces_GetAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceAutorizationRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.GetAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AuthorizationRule{
			Name: to.Ptr("example-RelayAuthRules-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/AuthorizationRules/example-RelayAuthRules-01"),
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAutorizationRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_ListKeys(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleListKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceAuthorizationRuleListKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.ListKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleListKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AccessKeys{
			KeyName:                   to.Ptr("example-RelayAuthRules-01"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleListKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_RegenerateKeys(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleRegenrateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayNameSpaceAuthorizationRuleRegenrateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewNamespacesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		armrelay.RegenerateAccessKeyParameters{
			KeyType: to.Ptr(armrelay.KeyTypePrimaryKey),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleRegenrateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AccessKeys{
			KeyName:                   to.Ptr("example-RelayAuthRules-01"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/NameSpaces/RelayNameSpaceAuthorizationRuleRegenrateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_ListByNamespace(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByNamespace("resourcegroup",
		"example-RelayNamespace-01",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.HybridConnectionListResult{
			Value: []*armrelay.HybridConnection{
				{
					Name: to.Ptr("example-Relay-Hybrid-01"),
					Type: to.Ptr("Microsoft.Relay/Namespaces/HybridConnections"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/HybridConnections/example-Relay-Hybrid-01"),
					Properties: &armrelay.HybridConnectionProperties{
						CreatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
						ListenerCount:               to.Ptr[int32](1),
						RequiresClientAuthorization: to.Ptr(true),
						UpdatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
						UserMetadata:                to.Ptr("usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HybridConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HybridConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		armrelay.HybridConnection{
			Properties: &armrelay.HybridConnectionProperties{
				RequiresClientAuthorization: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.HybridConnection{
			Name: to.Ptr("example-Relay-Hybrid-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/HybridConnections"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/HybridConnections/example-Relay-Hybrid-01"),
			Properties: &armrelay.HybridConnectionProperties{
				CreatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
				RequiresClientAuthorization: to.Ptr(true),
				UpdatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_Delete(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridconnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridconnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	_, err := client.Delete(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridconnectionDelete.json: %v", err)
	}
}

func TestHybridConnections_Get(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.HybridConnection{
			Name: to.Ptr("example-Relay-Hybrid-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/HybridConnections"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/HybridConnections/example-Relay-Hybrid-01"),
			Properties: &armrelay.HybridConnectionProperties{
				CreatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
				ListenerCount:               to.Ptr[int32](1),
				RequiresClientAuthorization: to.Ptr(true),
				UpdatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T20:34:49.4131724Z"); return t }()),
				UserMetadata:                to.Ptr("usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_ListAuthorizationRules(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionAutorizationRuleListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListAuthorizationRules("resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.AuthorizationRuleListResult{
			Value: []*armrelay.AuthorizationRule{
				{
					Name: to.Ptr("example-RelayAuthRules-01"),
					Type: to.Ptr("Microsoft.Relay/Namespaces/Hybridconnections/AuthorizationRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/HybridConnections/example-Relay-Hybrid-01/AuthorizationRules/example-RelayAuthRules-01"),
					Properties: &armrelay.AuthorizationRuleProperties{
						Rights: []*armrelay.AccessRights{
							to.Ptr(armrelay.AccessRightsListen),
							to.Ptr(armrelay.AccessRightsSend)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionAuthorizationRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		armrelay.AuthorizationRule{
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen),
					to.Ptr(armrelay.AccessRightsSend)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AuthorizationRule{
			Name: to.Ptr("example-RelayAuthRules-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/Hybridconnections/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/HybridConnections/example-Relay-Hybrid-01/AuthorizationRules/example-RelayAuthRules-01"),
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen),
					to.Ptr(armrelay.AccessRightsSend)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_DeleteAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionAutorizationRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	_, err := client.DeleteAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleDelete.json: %v", err)
	}
}

func TestHybridConnections_GetAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionAutorizationRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.GetAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AuthorizationRule{
			Name: to.Ptr("example-RelayAuthRules-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/Hybridconnections/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/HybridConnections/example-Relay-Hybrid-01/AuthorizationRules/example-RelayAuthRules-01"),
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAutorizationRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_ListKeys(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleListKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionAuthorizationRuleListKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.ListKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleListKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AccessKeys{
			KeyName:                   to.Ptr("example-RelayAuthRules-01"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleListKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridConnections_RegenerateKeys(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleRegenrateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayHybridConnectionAuthorizationRuleRegenrateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewHybridConnectionsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		armrelay.RegenerateAccessKeyParameters{
			KeyType: to.Ptr(armrelay.KeyTypePrimaryKey),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleRegenrateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AccessKeys{
			KeyName:                   to.Ptr("example-RelayAuthRules-01"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/HybridConnection/RelayHybridConnectionAuthorizationRuleRegenrateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_ListByNamespace(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByNamespace("resourcegroup",
		"example-RelayNamespace-01",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.WcfRelaysListResult{
			Value: []*armrelay.WcfRelay{
				{
					Name: to.Ptr("example-Relay-Wcf-01"),
					Type: to.Ptr("Microsoft.Relay/Namespaces/WcfRelays"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/RG1-eg/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/WcfRelays/example-Relay-Wcf-01"),
					Properties: &armrelay.WcfRelayProperties{
						CreatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T00:46:27.0049983Z"); return t }()),
						IsDynamic:                   to.Ptr(false),
						RelayType:                   to.Ptr(armrelay.RelaytypeNetTCP),
						RequiresClientAuthorization: to.Ptr(true),
						RequiresTransportSecurity:   to.Ptr(true),
						UpdatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T00:46:27.0049983Z"); return t }()),
						UserMetadata:                to.Ptr("usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WcfRelaysListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WcfRelaysListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_CreateOrUpdate(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourcegroup",
		"example-RelayNamespace-9953",
		"example-Relay-Wcf-1194",
		armrelay.WcfRelay{
			Properties: &armrelay.WcfRelayProperties{
				RelayType:                   to.Ptr(armrelay.RelaytypeNetTCP),
				RequiresClientAuthorization: to.Ptr(true),
				RequiresTransportSecurity:   to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.WcfRelay{
			Name: to.Ptr("example-Relay-Wcf-1194"),
			Type: to.Ptr("Microsoft.Relay/WcfRelays"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-9953/WcfRelays/example-Relay-Wcf-1194"),
			Properties: &armrelay.WcfRelayProperties{
				CreatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-16T00:26:17.5014661Z"); return t }()),
				IsDynamic:                   to.Ptr(false),
				RelayType:                   to.Ptr(armrelay.RelaytypeNetTCP),
				RequiresClientAuthorization: to.Ptr(true),
				RequiresTransportSecurity:   to.Ptr(true),
				UpdatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-16T00:26:17.5014661Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WcfRelay) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WcfRelay)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_Delete(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	_, err := client.Delete(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayDelete.json: %v", err)
	}
}

func TestWCFRelays_Get(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"resourcegroup",
		"example-RelayNamespace-9953",
		"example-Relay-Wcf-1194",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.WcfRelay{
			Name: to.Ptr("example-Relay-Wcf-1194"),
			Type: to.Ptr("Microsoft.Relay/WcfRelays"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-ServiceBus-WestUS/providers/Microsoft.Relay/namespaces/example-RelayNamespace-9953/WcfRelays/example-Relay-Wcf-1194"),
			Properties: &armrelay.WcfRelayProperties{
				CreatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-16T00:26:17.5014661Z"); return t }()),
				IsDynamic:                   to.Ptr(false),
				ListenerCount:               to.Ptr[int32](0),
				RelayType:                   to.Ptr(armrelay.RelaytypeNetTCP),
				RequiresClientAuthorization: to.Ptr(true),
				RequiresTransportSecurity:   to.Ptr(true),
				UpdatedAt:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-16T00:26:17.5014661Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WcfRelay) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WcfRelay)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_ListAuthorizationRules(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayAutorizationRuleListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListAuthorizationRules("resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Wcf-01",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrelay.AuthorizationRuleListResult{
			Value: []*armrelay.AuthorizationRule{
				{
					Name: to.Ptr("example-RelayAuthRules-01"),
					Type: to.Ptr("Microsoft.Relay/Namespaces/WcfRelay/AuthorizationRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/WcfRelays/example-Relay-Wcf-01/AuthorizationRules/example-RelayAuthRules-01"),
					Properties: &armrelay.AuthorizationRuleProperties{
						Rights: []*armrelay.AccessRights{
							to.Ptr(armrelay.AccessRightsListen),
							to.Ptr(armrelay.AccessRightsSend)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayAuthorizationRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		armrelay.AuthorizationRule{
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen),
					to.Ptr(armrelay.AccessRightsSend)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AuthorizationRule{
			Name: to.Ptr("example-RelayAuthRules-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/WcfRelay/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/WcfRelays/example-Relay-Wcf-01/AuthorizationRules/example-RelayAuthRules-01"),
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen),
					to.Ptr(armrelay.AccessRightsSend)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_DeleteAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayAutorizationRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	_, err := client.DeleteAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleDelete.json: %v", err)
	}
}

func TestWCFRelays_GetAuthorizationRule(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayAutorizationRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.GetAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AuthorizationRule{
			Name: to.Ptr("example-RelayAuthRules-01"),
			Type: to.Ptr("Microsoft.Relay/Namespaces/WcfRelay/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-01/WcfRelays/example-Relay-Wcf-01/AuthorizationRules/example-RelayAuthRules-01"),
			Properties: &armrelay.AuthorizationRuleProperties{
				Rights: []*armrelay.AccessRights{
					to.Ptr(armrelay.AccessRightsListen)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAutorizationRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_ListKeys(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleListKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayAuthorizationRuleListKey.json"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.ListKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleListKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AccessKeys{
			KeyName:                   to.Ptr("example-RelayAuthRules-01"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleListKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWCFRelays_RegenerateKeys(t *testing.T) {
	// From example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleRegenrateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelayAuthorizationRuleRegenrateKey.json"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrelay.NewWCFRelaysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		armrelay.RegenerateAccessKeyParameters{
			KeyType: to.Ptr(armrelay.KeyTypePrimaryKey),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleRegenrateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrelay.AccessKeys{
			KeyName:                   to.Ptr("example-RelayAuthRules-01"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://example-Relaynamespace-01.servicebus.windows.net/;SharedAccessKeyName=example-RelayAuthRules-01;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayAuthorizationRuleRegenrateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
