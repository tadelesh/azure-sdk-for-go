//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrelay

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example RelayOperationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestNamespaces_CheckNameAvailability(t *testing.T) {
	// From example RelayCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailability{
			Name: to.StringPtr("sdk-Namespace1321"),
		},
		&NamespacesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_List(t *testing.T) {
	// From example RelayNameSpaceListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.List(&NamespacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RelayNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RelayNamespace.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListByResourceGroup(t *testing.T) {
	// From example RelayNameSpaceListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByResourceGroup("resourcegroup",
		&NamespacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RelayNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RelayNamespace.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_CreateOrUpdate(t *testing.T) {
	// From example RelayNamespaceCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		RelayNamespace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&NamespacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RelayNamespace.ID == nil {
		t.Fatal("RelayNamespace.ID should not be nil!")
	}
}

func TestNamespaces_Delete(t *testing.T) {
	// From example RelayNameSpaceDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		&NamespacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_Get(t *testing.T) {
	// From example RelayNameSpaceGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		&NamespacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RelayNamespace.ID == nil {
		t.Fatal("RelayNamespace.ID should not be nil!")
	}
}

func TestNamespaces_Update(t *testing.T) {
	// From example RelayNameSpaceUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Update(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		RelayUpdateParameters{
			ResourceNamespacePatch: ResourceNamespacePatch{
				Tags: map[string]*string{
					"tag3": to.StringPtr("value3"),
					"tag4": to.StringPtr("value4"),
					"tag5": to.StringPtr("value5"),
					"tag6": to.StringPtr("value6"),
				},
			},
		},
		&NamespacesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RelayNamespace.ID == nil {
		t.Fatal("RelayNamespace.ID should not be nil!")
	}
}

func TestNamespaces_ListAuthorizationRules(t *testing.T) {
	// From example RelayNameSpaceAutorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListAuthorizationRules("resourcegroup",
		"example-RelayNamespace-01",
		&NamespacesListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example RelayNameSpaceAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		AuthorizationRule{
			Properties: &AuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&NamespacesCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestNamespaces_DeleteAuthorizationRule(t *testing.T) {
	// From example RelayNameSpaceAutorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.DeleteAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		&NamespacesDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_GetAuthorizationRule(t *testing.T) {
	// From example RelayNameSpaceAutorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.GetAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		&NamespacesGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestNamespaces_ListKeys(t *testing.T) {
	// From example RelayNameSpaceAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		&NamespacesListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_RegenerateKeys(t *testing.T) {
	// From example RelayNameSpaceAuthorizationRuleRegenrateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.RegenerateKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-RelayAuthRules-01",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&NamespacesRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridConnections_ListByNamespace(t *testing.T) {
	// From example RelayHybridConnectionListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByNamespace("resourcegroup",
		"example-RelayNamespace-01",
		&HybridConnectionsListByNamespaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HybridConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HybridConnection.ID should not be nil!")
			}
		}
	}
}

func TestHybridConnections_CreateOrUpdate(t *testing.T) {
	// From example RelayHybridConnectionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.CreateOrUpdate(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		HybridConnection{
			Properties: &HybridConnectionProperties{
				RequiresClientAuthorization: to.BoolPtr(true),
			},
		},
		&HybridConnectionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridConnection.ID == nil {
		t.Fatal("HybridConnection.ID should not be nil!")
	}
}

func TestHybridConnections_Delete(t *testing.T) {
	// From example RelayHybridconnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.Delete(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		&HybridConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridConnections_Get(t *testing.T) {
	// From example RelayHybridConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		&HybridConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridConnection.ID == nil {
		t.Fatal("HybridConnection.ID should not be nil!")
	}
}

func TestHybridConnections_ListAuthorizationRules(t *testing.T) {
	// From example RelayHybridConnectionAutorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListAuthorizationRules("resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		&HybridConnectionsListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestHybridConnections_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example RelayHybridConnectionAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		AuthorizationRule{
			Properties: &AuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&HybridConnectionsCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestHybridConnections_DeleteAuthorizationRule(t *testing.T) {
	// From example RelayHybridConnectionAutorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.DeleteAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		&HybridConnectionsDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridConnections_GetAuthorizationRule(t *testing.T) {
	// From example RelayHybridConnectionAutorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.GetAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		&HybridConnectionsGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestHybridConnections_ListKeys(t *testing.T) {
	// From example RelayHybridConnectionAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		&HybridConnectionsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridConnections_RegenerateKeys(t *testing.T) {
	// From example RelayHybridConnectionAuthorizationRuleRegenrateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridConnectionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.RegenerateKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Hybrid-01",
		"example-RelayAuthRules-01",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&HybridConnectionsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWCFRelays_ListByNamespace(t *testing.T) {
	// From example RelayListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByNamespace("resourcegroup",
		"example-RelayNamespace-01",
		&WCFRelaysListByNamespaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WcfRelay.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WcfRelay.ID should not be nil!")
			}
		}
	}
}

func TestWCFRelays_CreateOrUpdate(t *testing.T) {
	// From example RelayCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.CreateOrUpdate(ctx,
		"resourcegroup",
		"example-RelayNamespace-9953",
		"example-Relay-Wcf-1194",
		WcfRelay{
			Properties: &WcfRelayProperties{
				RelayType:                   RelaytypeNetTCP.ToPtr(),
				RequiresClientAuthorization: to.BoolPtr(true),
				RequiresTransportSecurity:   to.BoolPtr(true),
			},
		},
		&WCFRelaysCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WcfRelay.ID == nil {
		t.Fatal("WcfRelay.ID should not be nil!")
	}
}

func TestWCFRelays_Delete(t *testing.T) {
	// From example RelayDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.Delete(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		&WCFRelaysDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWCFRelays_Get(t *testing.T) {
	// From example RelayGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"resourcegroup",
		"example-RelayNamespace-9953",
		"example-Relay-Wcf-1194",
		&WCFRelaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WcfRelay.ID == nil {
		t.Fatal("WcfRelay.ID should not be nil!")
	}
}

func TestWCFRelays_ListAuthorizationRules(t *testing.T) {
	// From example RelayAutorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListAuthorizationRules("resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-Wcf-01",
		&WCFRelaysListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestWCFRelays_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example RelayAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		AuthorizationRule{
			Properties: &AuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&WCFRelaysCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestWCFRelays_DeleteAuthorizationRule(t *testing.T) {
	// From example RelayAutorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.DeleteAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		&WCFRelaysDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWCFRelays_GetAuthorizationRule(t *testing.T) {
	// From example RelayAutorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.GetAuthorizationRule(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		&WCFRelaysGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestWCFRelays_ListKeys(t *testing.T) {
	// From example RelayAuthorizationRuleListKey.json
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		&WCFRelaysListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWCFRelays_RegenerateKeys(t *testing.T) {
	// From example RelayAuthorizationRuleRegenrateKey.json
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWCFRelaysClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.RegenerateKeys(ctx,
		"resourcegroup",
		"example-RelayNamespace-01",
		"example-Relay-wcf-01",
		"example-RelayAuthRules-01",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&WCFRelaysRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
