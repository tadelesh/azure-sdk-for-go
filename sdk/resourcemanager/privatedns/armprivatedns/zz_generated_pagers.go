//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprivatedns

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// PrivateZonesClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateZonesClientListByResourceGroupPager struct {
	client    *PrivateZonesClient
	current   PrivateZonesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateZonesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateZonesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateZoneListResult.NextLink == nil || len(*p.current.PrivateZoneListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateZonesClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateZonesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateZonesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateZonesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateZonesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateZonesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateZonesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateZonesClientListPager provides operations for iterating over paged responses.
type PrivateZonesClientListPager struct {
	client    *PrivateZonesClient
	current   PrivateZonesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateZonesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateZonesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateZoneListResult.NextLink == nil || len(*p.current.PrivateZoneListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateZonesClientListPager) NextPage(ctx context.Context) (PrivateZonesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateZonesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateZonesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateZonesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateZonesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateZonesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecordSetsClientListByTypePager provides operations for iterating over paged responses.
type RecordSetsClientListByTypePager struct {
	client    *RecordSetsClient
	current   RecordSetsClientListByTypeResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsClientListByTypeResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecordSetsClientListByTypePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecordSetsClientListByTypePager) NextPage(ctx context.Context) (RecordSetsClientListByTypeResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecordSetsClientListByTypeResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecordSetsClientListByTypeResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecordSetsClientListByTypeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecordSetsClientListByTypeResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByTypeHandleResponse(resp)
	if err != nil {
		return RecordSetsClientListByTypeResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecordSetsClientListPager provides operations for iterating over paged responses.
type RecordSetsClientListPager struct {
	client    *RecordSetsClient
	current   RecordSetsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecordSetsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecordSetsClientListPager) NextPage(ctx context.Context) (RecordSetsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecordSetsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecordSetsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecordSetsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecordSetsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return RecordSetsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VirtualNetworkLinksClientListPager provides operations for iterating over paged responses.
type VirtualNetworkLinksClientListPager struct {
	client    *VirtualNetworkLinksClient
	current   VirtualNetworkLinksClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VirtualNetworkLinksClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VirtualNetworkLinksClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkLinkListResult.NextLink == nil || len(*p.current.VirtualNetworkLinkListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VirtualNetworkLinksClientListPager) NextPage(ctx context.Context) (VirtualNetworkLinksClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VirtualNetworkLinksClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VirtualNetworkLinksClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VirtualNetworkLinksClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VirtualNetworkLinksClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return VirtualNetworkLinksClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
