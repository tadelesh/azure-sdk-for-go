//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprivatedns_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/privatedns/armprivatedns"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestPrivateZones_CreateOrUpdate(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewPrivateZonesClient("subscriptionId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.PrivateZone{
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
		},
		&armprivatedns.PrivateZonesClientBeginCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.PrivateZone{
			Name:     to.Ptr("privatezone1.com"),
			Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.PrivateZoneProperties{
				MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
				MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
				MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
				NumberOfRecordSets:                             to.Ptr[int64](1),
				NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
				NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
				ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateZone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateZone)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateZones_Update(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewPrivateZonesClient("subscriptionId", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.PrivateZone{
			Tags: map[string]*string{
				"key2": to.Ptr("value2"),
			},
		},
		&armprivatedns.PrivateZonesClientBeginUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.PrivateZone{
			Name:     to.Ptr("privatezone1.com"),
			Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.PrivateZoneProperties{
				MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
				MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
				MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
				NumberOfRecordSets:                             to.Ptr[int64](1),
				NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
				NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
				ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateZone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateZone)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZonePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateZones_Delete(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewPrivateZonesClient("subscriptionId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		&armprivatedns.PrivateZonesClientBeginDeleteOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneDelete.json: %v", err)
	}
}

func TestPrivateZones_Get(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewPrivateZonesClient("subscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.PrivateZone{
			Name:     to.Ptr("privatezone1.com"),
			Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.PrivateZoneProperties{
				MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
				MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
				MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
				NumberOfRecordSets:                             to.Ptr[int64](1),
				NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
				NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
				ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateZone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateZone)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateZones_List(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneListInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewPrivateZonesClient("subscriptionId", cred, &options)
	pager := client.List(&armprivatedns.PrivateZonesClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneListInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.PrivateZoneListResult{
			Value: []*armprivatedns.PrivateZone{
				{
					Name:     to.Ptr("privatezone1.com"),
					Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.PrivateZoneProperties{
						MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
						MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
						MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
						NumberOfRecordSets:                             to.Ptr[int64](1),
						NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
						NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
						ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("privatezone2.com"),
					Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup2/providers/Microsoft.Network/privateDnsZones/privatezone2.com"),
					Location: to.Ptr("global"),
					Etag:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.PrivateZoneProperties{
						MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
						MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
						MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
						NumberOfRecordSets:                             to.Ptr[int64](1),
						NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
						NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
						ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateZoneListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateZoneListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneListInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateZones_ListByResourceGroup(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneListInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewPrivateZonesClient("subscriptionId", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		&armprivatedns.PrivateZonesClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneListInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.PrivateZoneListResult{
			Value: []*armprivatedns.PrivateZone{
				{
					Name:     to.Ptr("privatezone1.com"),
					Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.PrivateZoneProperties{
						MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
						MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
						MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
						NumberOfRecordSets:                             to.Ptr[int64](1),
						NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
						NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
						ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("privatezone2.com"),
					Type:     to.Ptr("Microsoft.Network/privateDnsZones"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone2.com"),
					Location: to.Ptr("global"),
					Etag:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.PrivateZoneProperties{
						MaxNumberOfRecordSets:                          to.Ptr[int64](5000),
						MaxNumberOfVirtualNetworkLinks:                 to.Ptr[int64](100),
						MaxNumberOfVirtualNetworkLinksWithRegistration: to.Ptr[int64](50),
						NumberOfRecordSets:                             to.Ptr[int64](1),
						NumberOfVirtualNetworkLinks:                    to.Ptr[int64](0),
						NumberOfVirtualNetworkLinksWithRegistration:    to.Ptr[int64](0),
						ProvisioningState:                              to.Ptr(armprivatedns.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateZoneListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateZoneListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/PrivateZoneListInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkLinks_CreateOrUpdate(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone Virtual Network Link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewVirtualNetworkLinksClient("subscriptionId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		armprivatedns.VirtualNetworkLink{
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armprivatedns.VirtualNetworkLinkProperties{
				RegistrationEnabled: to.Ptr(false),
				VirtualNetwork: &armprivatedns.SubResource{
					ID: to.Ptr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
				},
			},
		},
		&armprivatedns.VirtualNetworkLinksClientBeginCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.VirtualNetworkLink{
			Name:     to.Ptr("virtualNetworkLink1"),
			Type:     to.Ptr("Microsoft.Network/privateDnsZones/virtualNetworkLinks"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/virtualNetworkLinks/virtualNetworkLink1"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.VirtualNetworkLinkProperties{
				ProvisioningState:   to.Ptr(armprivatedns.ProvisioningStateSucceeded),
				RegistrationEnabled: to.Ptr(false),
				VirtualNetwork: &armprivatedns.SubResource{
					ID: to.Ptr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
				},
				VirtualNetworkLinkState: to.Ptr(armprivatedns.VirtualNetworkLinkStateCompleted),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkLink)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkLinks_Update(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone Virtual Network Link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewVirtualNetworkLinksClient("subscriptionId", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		armprivatedns.VirtualNetworkLink{
			Tags: map[string]*string{
				"key2": to.Ptr("value2"),
			},
			Properties: &armprivatedns.VirtualNetworkLinkProperties{
				RegistrationEnabled: to.Ptr(true),
			},
		},
		&armprivatedns.VirtualNetworkLinksClientBeginUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.VirtualNetworkLink{
			Name:     to.Ptr("virtualNetworkLink1"),
			Type:     to.Ptr("Microsoft.Network/privateDnsZones/virtualNetworkLinks"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/virtualNetworkLinks/virtualNetworkLink1"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.VirtualNetworkLinkProperties{
				ProvisioningState:   to.Ptr(armprivatedns.ProvisioningStateSucceeded),
				RegistrationEnabled: to.Ptr(true),
				VirtualNetwork: &armprivatedns.SubResource{
					ID: to.Ptr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
				},
				VirtualNetworkLinkState: to.Ptr(armprivatedns.VirtualNetworkLinkStateCompleted),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkLink)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkLinks_Delete(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone Virtual Network Link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewVirtualNetworkLinksClient("subscriptionId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		&armprivatedns.VirtualNetworkLinksClientBeginDeleteOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkDelete.json: %v", err)
	}
}

func TestVirtualNetworkLinks_Get(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone Virtual Network Link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewVirtualNetworkLinksClient("subscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.VirtualNetworkLink{
			Name:     to.Ptr("virtualNetworkLink1"),
			Type:     to.Ptr("Microsoft.Network/privateDnsZones/virtualNetworkLinks"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/virtualNetworkLinks/virtualNetworkLink1"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.VirtualNetworkLinkProperties{
				ProvisioningState:   to.Ptr(armprivatedns.ProvisioningStateSucceeded),
				RegistrationEnabled: to.Ptr(false),
				VirtualNetwork: &armprivatedns.SubResource{
					ID: to.Ptr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
				},
				VirtualNetworkLinkState: to.Ptr(armprivatedns.VirtualNetworkLinkStateCompleted),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkLink)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkLinks_List(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Private DNS Zone Virtual Network Links"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewVirtualNetworkLinksClient("subscriptionId", cred, &options)
	pager := client.List("resourceGroup1",
		"privatezone1.com",
		&armprivatedns.VirtualNetworkLinksClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.VirtualNetworkLinkListResult{
			Value: []*armprivatedns.VirtualNetworkLink{
				{
					Name:     to.Ptr("virtualNetworkLink1"),
					Type:     to.Ptr("Microsoft.Network/privateDnsZones/virtualNetworkLinks"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/virtualNetworkLinks/virtualNetworkLink1"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.VirtualNetworkLinkProperties{
						ProvisioningState:   to.Ptr(armprivatedns.ProvisioningStateSucceeded),
						RegistrationEnabled: to.Ptr(false),
						VirtualNetwork: &armprivatedns.SubResource{
							ID: to.Ptr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
						},
						VirtualNetworkLinkState: to.Ptr(armprivatedns.VirtualNetworkLinkStateCompleted),
					},
				},
				{
					Name:     to.Ptr("virtualNetworkLink2"),
					Type:     to.Ptr("Microsoft.Network/privateDnsZones/virtualNetworkLinks"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/virtualNetworkLinks/virtualNetworkLink2"),
					Location: to.Ptr("global"),
					Etag:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.VirtualNetworkLinkProperties{
						ProvisioningState:   to.Ptr(armprivatedns.ProvisioningStateSucceeded),
						RegistrationEnabled: to.Ptr(true),
						VirtualNetwork: &armprivatedns.SubResource{
							ID: to.Ptr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
						},
						VirtualNetworkLinkState: to.Ptr(armprivatedns.VirtualNetworkLinkStateInProgress),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_CreateOrUpdate(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone A Record Set"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeA,
		"recordA",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				ARecords: []*armprivatedns.ARecord{
					{
						IPv4Address: to.Ptr("1.2.3.4"),
					}},
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recorda"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/A"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/A/recorda"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				ARecords: []*armprivatedns.ARecord{
					{
						IPv4Address: to.Ptr("1.2.3.4"),
					}},
				Fqdn:             to.Ptr("recorda.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone AAAA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeAAAA,
		"recordAAAA",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				AaaaRecords: []*armprivatedns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordaaaa"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/AAAA"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/AAAA/recordaaaa"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				AaaaRecords: []*armprivatedns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				Fqdn:             to.Ptr("recordaaaa.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone CNAME Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeCNAME,
		"recordCNAME",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				CnameRecord: &armprivatedns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordcname"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/CNAME"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/CNAME/recordcname"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				CnameRecord: &armprivatedns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				Fqdn:             to.Ptr("recordcname.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone MX Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeMX,
		"recordMX",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				MxRecords: []*armprivatedns.MxRecord{
					{
						Exchange:   to.Ptr("mail.privatezone1.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordmx"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/MX"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/MX/recordmx"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordmx.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				MxRecords: []*armprivatedns.MxRecord{
					{
						Exchange:   to.Ptr("mail.privatezone1.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone PTR Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		armprivatedns.RecordTypePTR,
		"1",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				PtrRecords: []*armprivatedns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/PTR"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/0.0.127.in-addr.arpa/PTR/1"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("1.0.0.127.in-addr.arpa."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				PtrRecords: []*armprivatedns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone SOA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSOA,
		"@",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				SoaRecord: &armprivatedns.SoaRecord{
					Email:        to.Ptr("azureprivatedns-hostmaster.microsoft.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("azureprivatedns.net"),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("@"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/SOA"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SOA/@"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				SoaRecord: &armprivatedns.SoaRecord{
					Email:        to.Ptr("azureprivatedns-hostmaster.microsoft.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("azureprivatedns.net"),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone SRV Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSRV,
		"recordSRV",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				SrvRecords: []*armprivatedns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL: to.Ptr[int64](3600),
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordsrv"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/SRV"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SRV/recordsrv"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordsrv.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				SrvRecords: []*armprivatedns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Private DNS Zone TXT Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeTXT,
		"recordTXT",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armprivatedns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
			},
		},
		&armprivatedns.RecordSetsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordtxt"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/TXT"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/TXT/recordtxt"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordtxt.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armprivatedns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_Update(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone A Record Set"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeA,
		"recordA",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recorda"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/A"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/A/recorda"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				ARecords: []*armprivatedns.ARecord{
					{
						IPv4Address: to.Ptr("1.2.3.4"),
					}},
				Fqdn:             to.Ptr("recorda.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone AAAA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeAAAA,
		"recordAAAA",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordaaaa"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/AAAA"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/AAAA/recordaaaa"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				AaaaRecords: []*armprivatedns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				Fqdn:             to.Ptr("recordaaaa.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone CNAME Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeCNAME,
		"recordCNAME",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordcname"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/CNAME"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/CNAME/recordcname"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				CnameRecord: &armprivatedns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				Fqdn:             to.Ptr("recordcname.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone MX Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeMX,
		"recordMX",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordmx"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/MX"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/MX/recordmx"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordmx.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				MxRecords: []*armprivatedns.MxRecord{
					{
						Exchange:   to.Ptr("mail.privatezone1.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone PTR Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		armprivatedns.RecordTypePTR,
		"1",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/PTR"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/0.0.127.in-addr.arpa/PTR/1"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("1.0.0.127.in-addr.arpa."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				PtrRecords: []*armprivatedns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone SOA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSOA,
		"@",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("@"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/SOA"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SOA/@"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				SoaRecord: &armprivatedns.SoaRecord{
					Email:        to.Ptr("azureprivatedns-hostmaster.microsoft.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("azureprivatedns.net"),
					MinimumTTL:   to.Ptr[int64](300),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone SRV Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSRV,
		"recordSRV",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordsrv"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/SRV"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SRV/recordsrv"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordsrv.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				SrvRecords: []*armprivatedns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Private DNS Zone TXT Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeTXT,
		"recordTXT",
		armprivatedns.RecordSet{
			Properties: &armprivatedns.RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
			},
		},
		&armprivatedns.RecordSetsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordtxt"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/TXT"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/TXT/recordtxt"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordtxt.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key2": to.Ptr("value2"),
				},
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armprivatedns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_Delete(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetADelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone A Record Set"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeA,
		"recordA",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetADelete.json: %v", err)
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAADelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone AAAA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeAAAA,
		"recordAAAA",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAADelete.json: %v", err)
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone CNAME Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeCNAME,
		"recordCNAME",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEDelete.json: %v", err)
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone MX Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeMX,
		"recordMX",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXDelete.json: %v", err)
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone PTR Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		armprivatedns.RecordTypePTR,
		"1",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRDelete.json: %v", err)
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone SRV Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSRV,
		"recordSRV",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVDelete.json: %v", err)
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Private DNS Zone TXT Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeTXT,
		"recordTXT",
		&armprivatedns.RecordSetsClientDeleteOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTDelete.json: %v", err)
	}
}

func TestRecordSets_Get(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone A Record Set"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeA,
		"recordA",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recorda"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/A"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/A/recorda"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				ARecords: []*armprivatedns.ARecord{
					{
						IPv4Address: to.Ptr("1.2.3.4"),
					}},
				Fqdn:             to.Ptr("recorda.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone AAAA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeAAAA,
		"recordAAAA",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordaaaa"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/AAAA"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/AAAA/recordaaaa"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				AaaaRecords: []*armprivatedns.AaaaRecord{
					{
						IPv6Address: to.Ptr("::1"),
					}},
				Fqdn:             to.Ptr("recordaaaa.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone CNAME Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeCNAME,
		"recordCNAME",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordcname"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/CNAME"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/CNAME/recordcname"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				CnameRecord: &armprivatedns.CnameRecord{
					Cname: to.Ptr("contoso.com"),
				},
				Fqdn:             to.Ptr("recordcname.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone MX Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeMX,
		"recordMX",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordmx"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/MX"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/MX/recordmx"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordmx.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				MxRecords: []*armprivatedns.MxRecord{
					{
						Exchange:   to.Ptr("mail.privatezone1.com"),
						Preference: to.Ptr[int32](0),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone PTR Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		armprivatedns.RecordTypePTR,
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/PTR"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/0.0.127.in-addr.arpa/PTR/1"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("1.0.0.127.in-addr.arpa."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				PtrRecords: []*armprivatedns.PtrRecord{
					{
						Ptrdname: to.Ptr("localhost"),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone SOA Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSOA,
		"@",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("@"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/SOA"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SOA/@"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				SoaRecord: &armprivatedns.SoaRecord{
					Email:        to.Ptr("azureprivatedns-hostmaster.microsoft.com"),
					ExpireTime:   to.Ptr[int64](2419200),
					Host:         to.Ptr("azureprivatedns.net"),
					MinimumTTL:   to.Ptr[int64](300),
					RefreshTime:  to.Ptr[int64](3600),
					RetryTime:    to.Ptr[int64](300),
					SerialNumber: to.Ptr[int64](1),
				},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone SRV Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSRV,
		"recordSRV",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordsrv"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/SRV"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SRV/recordsrv"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordsrv.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				SrvRecords: []*armprivatedns.SrvRecord{
					{
						Port:     to.Ptr[int32](80),
						Priority: to.Ptr[int32](0),
						Target:   to.Ptr("contoso.com"),
						Weight:   to.Ptr[int32](10),
					}},
				TTL: to.Ptr[int64](3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone TXT Record Set"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeTXT,
		"recordTXT",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armprivatedns.RecordSet{
			Name: to.Ptr("recordtxt"),
			Type: to.Ptr("Microsoft.Network/privateDnsZones/TXT"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/TXT/recordtxt"),
			Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armprivatedns.RecordSetProperties{
				Fqdn:             to.Ptr("recordtxt.privatezone1.com."),
				IsAutoRegistered: to.Ptr(false),
				Metadata: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				TTL: to.Ptr[int64](3600),
				TxtRecords: []*armprivatedns.TxtRecord{
					{
						Value: []*string{
							to.Ptr("string1"),
							to.Ptr("string2")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecordSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecordSet)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_ListByType(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone A Record Sets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager := client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeA,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recorda1"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/A"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/A/recorda1"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						ARecords: []*armprivatedns.ARecord{
							{
								IPv4Address: to.Ptr("1.2.3.4"),
							}},
						Fqdn:             to.Ptr("recorda1.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						TTL: to.Ptr[int64](3600),
					},
				},
				{
					Name: to.Ptr("recorda2"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/A"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/A/recorda2"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						ARecords: []*armprivatedns.ARecord{
							{
								IPv4Address: to.Ptr("5.6.7.8"),
							}},
						Fqdn:             to.Ptr("recorda2.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						TTL:              to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone AAAA Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeAAAA,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recordaaaa1"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/AAAA"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/AAAA/recordaaaa1"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						AaaaRecords: []*armprivatedns.AaaaRecord{
							{
								IPv6Address: to.Ptr("::1"),
							}},
						Fqdn:             to.Ptr("recordaaaa1.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						TTL: to.Ptr[int64](3600),
					},
				},
				{
					Name: to.Ptr("recordaaaa2"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/AAAA"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/AAAA/recordaaaa2"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						AaaaRecords: []*armprivatedns.AaaaRecord{
							{
								IPv6Address: to.Ptr("::1"),
							}},
						Fqdn:             to.Ptr("recordaaaa2.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						TTL:              to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone CNAME Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeCNAME,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recordcname"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/CNAME"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/CNAME/recordcname"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						CnameRecord: &armprivatedns.CnameRecord{
							Cname: to.Ptr("contoso.com"),
						},
						Fqdn:             to.Ptr("recordcname.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						TTL: to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone MX Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeMX,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recordmx1"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/MX"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/MX/recordmx1"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("recordmx1.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						MxRecords: []*armprivatedns.MxRecord{
							{
								Exchange:   to.Ptr("mail.contoso1.com"),
								Preference: to.Ptr[int32](0),
							}},
						TTL: to.Ptr[int64](3600),
					},
				},
				{
					Name: to.Ptr("recordmx2"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/MX"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/MX/recordmx2"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("recordmx2.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						MxRecords: []*armprivatedns.MxRecord{
							{
								Exchange:   to.Ptr("mail.contoso2.com"),
								Preference: to.Ptr[int32](0),
							}},
						TTL: to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone PTR Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"0.0.127.in-addr.arpa",
		armprivatedns.RecordTypePTR,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/PTR"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/0.0.127.in-addr.arpa/PTR/1"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("1.0.0.127.in-addr.arpa."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						PtrRecords: []*armprivatedns.PtrRecord{
							{
								Ptrdname: to.Ptr("localhost"),
							}},
						TTL: to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone SOA Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSOA,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("@"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/SOA"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SOA/@"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						SoaRecord: &armprivatedns.SoaRecord{
							Email:        to.Ptr("azureprivatedns-hostmaster.microsoft.com"),
							ExpireTime:   to.Ptr[int64](2419200),
							Host:         to.Ptr("azureprivatedns.net"),
							MinimumTTL:   to.Ptr[int64](300),
							RefreshTime:  to.Ptr[int64](3600),
							RetryTime:    to.Ptr[int64](300),
							SerialNumber: to.Ptr[int64](1),
						},
						TTL: to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone SRV Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeSRV,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recordsrv"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/SRV"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/SRV/recordsrv"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("recordsrv.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						SrvRecords: []*armprivatedns.SrvRecord{
							{
								Port:     to.Ptr[int32](80),
								Priority: to.Ptr[int32](0),
								Target:   to.Ptr("contoso.com"),
								Weight:   to.Ptr[int32](10),
							}},
						TTL: to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone TXT Record Sets"},
	})
	client = armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		armprivatedns.RecordTypeTXT,
		&armprivatedns.RecordSetsClientListByTypeOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recordtxt"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/TXT"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/TXT/recordtxt"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("recordtxt.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						TTL: to.Ptr[int64](3600),
						TxtRecords: []*armprivatedns.TxtRecord{
							{
								Value: []*string{
									to.Ptr("string1"),
									to.Ptr("string2")},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecordSets_List(t *testing.T) {
	// From example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetALLList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Private DNS Zone ALL Record Sets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armprivatedns.NewRecordSetsClient("subscriptionId", cred, &options)
	pager := client.List("resourceGroup1",
		"privatezone1.com",
		&armprivatedns.RecordSetsClientListOptions{Top: nil,
			Recordsetnamesuffix: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetALLList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armprivatedns.RecordSetListResult{
			Value: []*armprivatedns.RecordSet{
				{
					Name: to.Ptr("recorda"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/A"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/A/recorda"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						ARecords: []*armprivatedns.ARecord{
							{
								IPv4Address: to.Ptr("1.2.3.4"),
							}},
						Fqdn:             to.Ptr("recorda.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						TTL: to.Ptr[int64](3600),
					},
				},
				{
					Name: to.Ptr("recordcname"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/CNAME"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/CNAME/recordcname"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						CnameRecord: &armprivatedns.CnameRecord{
							Cname: to.Ptr("contoso.com"),
						},
						Fqdn:             to.Ptr("recordcname.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						TTL: to.Ptr[int64](3600),
					},
				},
				{
					Name: to.Ptr("recordmx"),
					Type: to.Ptr("Microsoft.Network/privateDnsZones/MX"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.Network/privateDnsZones/privatezone1.com/MX/recordmx"),
					Etag: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Properties: &armprivatedns.RecordSetProperties{
						Fqdn:             to.Ptr("recordmx.privatezone1.com."),
						IsAutoRegistered: to.Ptr(false),
						Metadata: map[string]*string{
							"key1": to.Ptr("value1"),
						},
						MxRecords: []*armprivatedns.MxRecord{
							{
								Exchange:   to.Ptr("mail.contoso1.com"),
								Preference: to.Ptr[int32](0),
							}},
						TTL: to.Ptr[int64](3600),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecordSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecordSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetALLList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
