//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprivatedns

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestPrivateZones_CreateOrUpdate(t *testing.T) {
	// From example PUT Private DNS Zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateZonesClient(con,
		"subscriptionId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		PrivateZone{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Global"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
		},
		&PrivateZonesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateZone.ID == nil {
		t.Fatal("PrivateZone.ID should not be nil!")
	}
}

func TestPrivateZones_Update(t *testing.T) {
	// From example PATCH Private DNS Zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateZonesClient(con,
		"subscriptionId")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		PrivateZone{
			TrackedResource: TrackedResource{
				Tags: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&PrivateZonesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateZone.ID == nil {
		t.Fatal("PrivateZone.ID should not be nil!")
	}
}

func TestPrivateZones_Delete(t *testing.T) {
	// From example DELETE Private DNS Zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateZonesClient(con,
		"subscriptionId")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		&PrivateZonesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateZones_Get(t *testing.T) {
	// From example GET Private DNS Zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateZonesClient(con,
		"subscriptionId")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		&PrivateZonesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateZone.ID == nil {
		t.Fatal("PrivateZone.ID should not be nil!")
	}
}

func TestPrivateZones_List(t *testing.T) {
	// From example GET Private DNS Zone by Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateZonesClient(con,
		"subscriptionId")
	pager := client.List(&PrivateZonesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateZone.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateZone.ID should not be nil!")
			}
		}
	}
}

func TestPrivateZones_ListByResourceGroup(t *testing.T) {
	// From example GET Private DNS Zone by Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateZonesClient(con,
		"subscriptionId")
	pager := client.ListByResourceGroup("resourceGroup1",
		&PrivateZonesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateZone.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateZone.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkLinks_CreateOrUpdate(t *testing.T) {
	// From example PUT Private DNS Zone Virtual Network Link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkLinksClient(con,
		"subscriptionId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		VirtualNetworkLink{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Global"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &VirtualNetworkLinkProperties{
				RegistrationEnabled: to.BoolPtr(false),
				VirtualNetwork: &SubResource{
					ID: to.StringPtr("/subscriptions/virtualNetworkSubscriptionId/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
				},
			},
		},
		&VirtualNetworkLinksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkLink.ID == nil {
		t.Fatal("VirtualNetworkLink.ID should not be nil!")
	}
}

func TestVirtualNetworkLinks_Update(t *testing.T) {
	// From example PATCH Private DNS Zone Virtual Network Link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkLinksClient(con,
		"subscriptionId")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		VirtualNetworkLink{
			TrackedResource: TrackedResource{
				Tags: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
			Properties: &VirtualNetworkLinkProperties{
				RegistrationEnabled: to.BoolPtr(true),
			},
		},
		&VirtualNetworkLinksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkLink.ID == nil {
		t.Fatal("VirtualNetworkLink.ID should not be nil!")
	}
}

func TestVirtualNetworkLinks_Delete(t *testing.T) {
	// From example DELETE Private DNS Zone Virtual Network Link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkLinksClient(con,
		"subscriptionId")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		&VirtualNetworkLinksBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkLinks_Get(t *testing.T) {
	// From example GET Private DNS Zone Virtual Network Link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkLinksClient(con,
		"subscriptionId")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		"virtualNetworkLink1",
		&VirtualNetworkLinksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkLink.ID == nil {
		t.Fatal("VirtualNetworkLink.ID should not be nil!")
	}
}

func TestVirtualNetworkLinks_List(t *testing.T) {
	// From example Get Private DNS Zone Virtual Network Links
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkLinksClient(con,
		"subscriptionId")
	pager := client.List("resourceGroup1",
		"privatezone1.com",
		&VirtualNetworkLinksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkLink.ID should not be nil!")
			}
		}
	}
}

func TestRecordSets_CreateOrUpdate(t *testing.T) {
	// From example PUT Private DNS Zone A Record Set
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subscriptionId")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeA,
		"recordA",
		RecordSet{
			Properties: &RecordSetProperties{
				ARecords: []*ARecord{
					{
						IPv4Address: to.StringPtr("1.2.3.4"),
					}},
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone AAAA Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeAAAA,
		"recordAAAA",
		RecordSet{
			Properties: &RecordSetProperties{
				AaaaRecords: []*AaaaRecord{
					{
						IPv6Address: to.StringPtr("::1"),
					}},
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone CNAME Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeCNAME,
		"recordCNAME",
		RecordSet{
			Properties: &RecordSetProperties{
				CnameRecord: &CnameRecord{
					Cname: to.StringPtr("contoso.com"),
				},
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone MX Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeMX,
		"recordMX",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				MxRecords: []*MxRecord{
					{
						Exchange:   to.StringPtr("mail.privatezone1.com"),
						Preference: to.Int32Ptr(0),
					}},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone PTR Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		RecordTypePTR,
		"1",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				PtrRecords: []*PtrRecord{
					{
						Ptrdname: to.StringPtr("localhost"),
					}},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone SOA Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSOA,
		"@",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				SoaRecord: &SoaRecord{
					Email:        to.StringPtr("azureprivatedns-hostmaster.microsoft.com"),
					ExpireTime:   to.Int64Ptr(2419200),
					Host:         to.StringPtr("azureprivatedns.net"),
					RefreshTime:  to.Int64Ptr(3600),
					RetryTime:    to.Int64Ptr(300),
					SerialNumber: to.Int64Ptr(1),
				},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone SRV Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSRV,
		"recordSRV",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				SrvRecords: []*SrvRecord{
					{
						Port:     to.Int32Ptr(80),
						Priority: to.Int32Ptr(0),
						Target:   to.StringPtr("contoso.com"),
						Weight:   to.Int32Ptr(10),
					}},
				TTL: to.Int64Ptr(3600),
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PUT Private DNS Zone TXT Record Set
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeTXT,
		"recordTXT",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				TTL: to.Int64Ptr(3600),
				TxtRecords: []*TxtRecord{
					{
						Value: []*string{
							to.StringPtr("string1"),
							to.StringPtr("string2")},
					}},
			},
		},
		&RecordSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}
}

func TestRecordSets_Update(t *testing.T) {
	// From example PATCH Private DNS Zone A Record Set
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subscriptionId")
	res, err := client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeA,
		"recordA",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone AAAA Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeAAAA,
		"recordAAAA",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone CNAME Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeCNAME,
		"recordCNAME",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone MX Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeMX,
		"recordMX",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone PTR Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		RecordTypePTR,
		"1",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone SOA Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSOA,
		"@",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone SRV Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSRV,
		"recordSRV",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example PATCH Private DNS Zone TXT Record Set
	res, err = client.Update(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeTXT,
		"recordTXT",
		RecordSet{
			Properties: &RecordSetProperties{
				Metadata: map[string]*string{
					"key2": to.StringPtr("value2"),
				},
			},
		},
		&RecordSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}
}

func TestRecordSets_Delete(t *testing.T) {
	// From example DELETE Private DNS Zone A Record Set
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subscriptionId")
	_, err := client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeA,
		"recordA",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example DELETE Private DNS Zone AAAA Record Set
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeAAAA,
		"recordAAAA",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example DELETE Private DNS Zone CNAME Record Set
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeCNAME,
		"recordCNAME",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example DELETE Private DNS Zone MX Record Set
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeMX,
		"recordMX",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example DELETE Private DNS Zone PTR Record Set
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		RecordTypePTR,
		"1",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example DELETE Private DNS Zone SRV Record Set
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSRV,
		"recordSRV",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example DELETE Private DNS Zone TXT Record Set
	_, err = client.Delete(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeTXT,
		"recordTXT",
		&RecordSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecordSets_Get(t *testing.T) {
	// From example GET Private DNS Zone A Record Set
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subscriptionId")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeA,
		"recordA",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone AAAA Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeAAAA,
		"recordAAAA",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone CNAME Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeCNAME,
		"recordCNAME",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone MX Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeMX,
		"recordMX",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone PTR Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"0.0.127.in-addr.arpa",
		RecordTypePTR,
		"1",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone SOA Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSOA,
		"@",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone SRV Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeSRV,
		"recordSRV",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}

	// From example GET Private DNS Zone TXT Record Set
	res, err = client.Get(ctx,
		"resourceGroup1",
		"privatezone1.com",
		RecordTypeTXT,
		"recordTXT",
		&RecordSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecordSet.ID == nil {
		t.Fatal("RecordSet.ID should not be nil!")
	}
}

func TestRecordSets_ListByType(t *testing.T) {
	// From example GET Private DNS Zone A Record Sets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subscriptionId")
	pager := client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone AAAA Record Sets
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeAAAA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone CNAME Record Sets
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeCNAME,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone MX Record Sets
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeMX,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone PTR Record Sets
	pager = client.ListByType("resourceGroup1",
		"0.0.127.in-addr.arpa",
		RecordTypePTR,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone SOA Record Sets
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeSOA,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone SRV Record Sets
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeSRV,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}

	// From example GET Private DNS Zone TXT Record Sets
	pager = client.ListByType("resourceGroup1",
		"privatezone1.com",
		RecordTypeTXT,
		&RecordSetsListByTypeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}
}

func TestRecordSets_List(t *testing.T) {
	// From example GET Private DNS Zone ALL Record Sets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecordSetsClient(con,
		"subscriptionId")
	pager := client.List("resourceGroup1",
		"privatezone1.com",
		&RecordSetsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecordSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecordSet.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
