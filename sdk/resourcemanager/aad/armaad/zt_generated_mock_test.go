//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armaad_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/aad/armaad"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armaad.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armaad.OperationsDiscoveryCollection{
			Value: []*armaad.OperationsDiscovery{
				{
					Name: to.Ptr("microsoft.aadiam/diagnosticsettingscategories/read"),
					Display: &armaad.Display{
						Description: to.Ptr("Reading a diagnostic setting categories"),
						Operation:   to.Ptr("Diagnostic settings categories read"),
						Provider:    to.Ptr("Microsoft Monitoring Insights"),
						Publisher:   to.Ptr("Microsoft"),
						Resource:    to.Ptr("Diagnostic settings categories"),
					},
					Properties: map[string]interface{}{},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationsDiscoveryCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationsDiscoveryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_List(t *testing.T) {
	// From example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listDiagnosticSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armaad.NewDiagnosticSettingsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listDiagnosticSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armaad.DiagnosticSettingsResourceCollection{
			Value: []*armaad.DiagnosticSettingsResource{
				{
					Name: to.Ptr("mysetting"),
					Type: to.Ptr(""),
					ID:   to.Ptr("providers/Microsoft.Aadiam/diagnosticSettings/mysetting"),
					Properties: &armaad.DiagnosticSettings{
						EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
						Logs: []*armaad.LogSettings{
							{
								Category: to.Ptr(armaad.CategorySignInLogs),
								Enabled:  to.Ptr(true),
								RetentionPolicy: &armaad.RetentionPolicy{
									Days:    to.Ptr[int32](0),
									Enabled: to.Ptr(false),
								},
							}},
						StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
						WorkspaceID:      to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsResourceCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listDiagnosticSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_Get(t *testing.T) {
	// From example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/getDiagnosticSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armaad.NewDiagnosticSettingsClient(cred, &options)
	res, err := client.Get(ctx,
		"mysetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/getDiagnosticSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armaad.DiagnosticSettingsResource{
			Name: to.Ptr("mysetting"),
			Type: to.Ptr(""),
			ID:   to.Ptr("providers/microsoft.aadiam/diagnosticSettings/mysetting"),
			Properties: &armaad.DiagnosticSettings{
				EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				Logs: []*armaad.LogSettings{
					{
						Category: to.Ptr(armaad.CategorySignInLogs),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armaad.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/getDiagnosticSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/createOrUpdateDiagnosticSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armaad.NewDiagnosticSettingsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"mysetting",
		armaad.DiagnosticSettingsResource{
			Properties: &armaad.DiagnosticSettings{
				EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				EventHubName:                to.Ptr("myeventhub"),
				Logs: []*armaad.LogSettings{
					{
						Category: to.Ptr(armaad.CategoryAuditLogs),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armaad.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/createOrUpdateDiagnosticSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armaad.DiagnosticSettingsResource{
			Properties: &armaad.DiagnosticSettings{
				EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				EventHubName:                to.Ptr("myeventhub"),
				Logs: []*armaad.LogSettings{
					{
						Category: to.Ptr(armaad.CategoryAuditLogs),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armaad.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/createOrUpdateDiagnosticSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_Delete(t *testing.T) {
	// From example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/deleteDiagnosticSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armaad.NewDiagnosticSettingsClient(cred, &options)
	_, err := client.Delete(ctx,
		"mysetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/deleteDiagnosticSetting.json: %v", err)
	}
}

func TestDiagnosticSettingsCategory_List(t *testing.T) {
	// From example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listDiagnosticSettingsCategories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic setting categories"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armaad.NewDiagnosticSettingsCategoryClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listDiagnosticSettingsCategories.json: %v", err)
	}
	// Response check
	{
		exampleRes := armaad.DiagnosticSettingsCategoryResourceCollection{
			Value: []*armaad.DiagnosticSettingsCategoryResource{
				{
					Name: to.Ptr("WorkflowRuntime"),
					Type: to.Ptr("microsoft.insights/diagnosticSettingsCategories"),
					ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/providers/microsoft.insights/diagnosticSettingsCategories/WorkflowRuntime"),
					Properties: &armaad.DiagnosticSettingsCategory{
						CategoryType: to.Ptr(armaad.CategoryTypeLogs),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsCategoryResourceCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsCategoryResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/azureactivedirectory/resource-manager/Microsoft.Aadiam/preview/2017-04-01-preview/examples/listDiagnosticSettingsCategories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
