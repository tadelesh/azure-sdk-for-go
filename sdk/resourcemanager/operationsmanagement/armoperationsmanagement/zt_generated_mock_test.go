//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoperationsmanagement_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationsmanagement/armoperationsmanagement"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestSolutions_CreateOrUpdate(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewSolutionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"solution1",
		armoperationsmanagement.Solution{
			Location: to.Ptr("East US"),
			Plan: &armoperationsmanagement.SolutionPlan{
				Name:          to.Ptr("name1"),
				Product:       to.Ptr("product1"),
				PromotionCode: to.Ptr("promocode1"),
				Publisher:     to.Ptr("publisher1"),
			},
			Properties: &armoperationsmanagement.SolutionProperties{
				ContainedResources: []*string{
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource1"),
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource2")},
				ReferencedResources: []*string{
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource2"),
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource3")},
				WorkspaceResourceID: to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/Microsoft.OperationalInsights/workspaces/ws1"),
			},
		},
		&armoperationsmanagement.SolutionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionCreate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionCreate.json: %v", err)
	}
}

func TestSolutions_Update(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewSolutionsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"solution1",
		armoperationsmanagement.SolutionPatch{
			Tags: map[string]*string{
				"Dept":        to.Ptr("IT"),
				"Environment": to.Ptr("Test"),
			},
		},
		&armoperationsmanagement.SolutionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.Solution{
			Name:     to.Ptr("solution1"),
			Type:     to.Ptr("Microsoft.OperationsManagement/solution"),
			ID:       to.Ptr("subscriptions/subid/resourcegroups/rg1/providers/Microsoft.OperationsManagement/solutions/solution1"),
			Location: to.Ptr("East US"),
			Plan: &armoperationsmanagement.SolutionPlan{
				Name:          to.Ptr("name1"),
				Product:       to.Ptr("product1"),
				PromotionCode: to.Ptr("promocode1"),
				Publisher:     to.Ptr("publisher1"),
			},
			Properties: &armoperationsmanagement.SolutionProperties{
				ContainedResources: []*string{
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource1"),
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource2")},
				ProvisioningState: to.Ptr("Succeeded"),
				ReferencedResources: []*string{
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource2"),
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource3")},
				WorkspaceResourceID: to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/Microsoft.OperationalInsights/workspaces/ws1"),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("IT"),
				"Environment": to.Ptr("Test"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Solution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Solution)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSolutions_Delete(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewSolutionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"solution1",
		&armoperationsmanagement.SolutionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionDelete.json: %v", err)
	}
}

func TestSolutions_Get(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewSolutionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"solution1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.Solution{
			Name:     to.Ptr("solution1"),
			Type:     to.Ptr("Microsoft.OperationsManagement/solutions"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.OperationsManagement/solutions/solution1"),
			Location: to.Ptr("East US"),
			Plan: &armoperationsmanagement.SolutionPlan{
				Name:          to.Ptr("name1"),
				Product:       to.Ptr("product1"),
				PromotionCode: to.Ptr("promocode1"),
				Publisher:     to.Ptr("publisher1"),
			},
			Properties: &armoperationsmanagement.SolutionProperties{
				ContainedResources: []*string{
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource1"),
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource2")},
				ProvisioningState: to.Ptr("Succeeded"),
				ReferencedResources: []*string{
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource2"),
					to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource3")},
				WorkspaceResourceID: to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/Microsoft.OperationalInsights/workspaces/ws1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Solution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Solution)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSolutions_ListByResourceGroup(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewSolutionsClient("subid", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"rg1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.SolutionPropertiesList{
			Value: []*armoperationsmanagement.Solution{
				{
					Name:     to.Ptr("solution1"),
					Type:     to.Ptr("Microsoft.OperationsManagement/solutions"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.OperationsManagement/solutions/solution1"),
					Location: to.Ptr("East US"),
					Plan: &armoperationsmanagement.SolutionPlan{
						Name:          to.Ptr("name1"),
						Product:       to.Ptr("product1"),
						PromotionCode: to.Ptr("promocode1"),
						Publisher:     to.Ptr("publisher1"),
					},
					Properties: &armoperationsmanagement.SolutionProperties{
						ContainedResources: []*string{
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource1"),
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource2")},
						ProvisioningState: to.Ptr("Succeeded"),
						ReferencedResources: []*string{
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource2"),
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource3")},
						WorkspaceResourceID: to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/Microsoft.OperationalInsights/workspaces/ws1"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SolutionPropertiesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SolutionPropertiesList)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSolutions_ListBySubscription(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionListForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewSolutionsClient("subid", cred, &options)
	res, err := client.ListBySubscription(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionListForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.SolutionPropertiesList{
			Value: []*armoperationsmanagement.Solution{
				{
					Name:     to.Ptr("solution1"),
					Type:     to.Ptr("Microsoft.OperationsManagement/solutions"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.OperationsManagement/solutions/solution1"),
					Location: to.Ptr("East US"),
					Plan: &armoperationsmanagement.SolutionPlan{
						Name:          to.Ptr("name1"),
						Product:       to.Ptr("product1"),
						PromotionCode: to.Ptr("promocode1"),
						Publisher:     to.Ptr("publisher1"),
					},
					Properties: &armoperationsmanagement.SolutionProperties{
						ContainedResources: []*string{
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource1"),
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource2")},
						ProvisioningState: to.Ptr("Succeeded"),
						ReferencedResources: []*string{
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider1/resources/resource2"),
							to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/provider2/resources/resource3")},
						WorkspaceResourceID: to.Ptr("/subscriptions/sub2/resourceGroups/rg2/providers/Microsoft.OperationalInsights/workspaces/ws1"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SolutionPropertiesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SolutionPropertiesList)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/SolutionListForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementAssociations_ListBySubscription(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationListForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementAssociationsClient("subid",
		"<provider-name>",
		"<resource-type>",
		"<resource-name>", cred, &options)
	res, err := client.ListBySubscription(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationListForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.ManagementAssociationPropertiesList{}
		if !reflect.DeepEqual(exampleRes, res.ManagementAssociationPropertiesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementAssociationPropertiesList)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationListForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementAssociations_CreateOrUpdate(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementAssociationsClient("subid",
		"providerName",
		"resourceType",
		"resourceName", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"managementAssociation1",
		armoperationsmanagement.ManagementAssociation{
			Location: to.Ptr("East US"),
			Properties: &armoperationsmanagement.ManagementAssociationProperties{
				ApplicationID: to.Ptr("/subscriptions/sub1/resourcegroups/rg1/providers/Microsoft.Appliance/Appliances/appliance1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.ManagementAssociation{
			Name:     to.Ptr("managementAssociation1"),
			Type:     to.Ptr("Microsoft.OperationsManagement/ManagementAssociations"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.OperationalInsights/workspaces/ws1/Microsoft.OperationsManagement/ManagementAssociations/managementAssociation1"),
			Location: to.Ptr("East US"),
			Properties: &armoperationsmanagement.ManagementAssociationProperties{
				ApplicationID: to.Ptr("/subscriptions/sub1/resourcegroups/rg1/providers/Microsoft.Appliance/Appliances/appliance1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementAssociation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementAssociation)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementAssociations_Delete(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementAssociationsClient("subid",
		"providerName",
		"resourceType",
		"resourceName", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"managementAssociationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationDelete.json: %v", err)
	}
}

func TestManagementAssociations_Get(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementAssociationsClient("subid",
		"providerName",
		"resourceType",
		"resourceName", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"managementAssociation1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.ManagementAssociation{
			Name:     to.Ptr("managementAssociation1"),
			Type:     to.Ptr("Microsoft.OperationsManagement/ManagementAssociations"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.OperationalInsights/workspaces/ws1/Microsoft.OperationsManagement/ManagementAssociations/managementAssociation1"),
			Location: to.Ptr("East US"),
			Properties: &armoperationsmanagement.ManagementAssociationProperties{
				ApplicationID: to.Ptr("/subscriptions/sub1/resourcegroups/rg1/providers/Microsoft.Appliance/Appliances/appliance1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementAssociation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementAssociation)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementAssociationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementConfigurations_ListBySubscription(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationListForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementConfigurationsClient("subid", cred, &options)
	res, err := client.ListBySubscription(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationListForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.ManagementConfigurationPropertiesList{}
		if !reflect.DeepEqual(exampleRes, res.ManagementConfigurationPropertiesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementConfigurationPropertiesList)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationListForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementConfigurationCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementConfigurationsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"managementConfiguration1",
		armoperationsmanagement.ManagementConfiguration{
			Location: to.Ptr("East US"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.ManagementConfiguration{
			Name:     to.Ptr("managementConfiguration1"),
			Type:     to.Ptr("Microsoft.OperationsManagement/ManagementConfigurations"),
			ID:       to.Ptr("subscriptions/subid/resourcegroups/rg1/providers/Microsoft.OperationsManagement/ManagementConfigurations/managementConfiguration1"),
			Location: to.Ptr("East US"),
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementConfigurations_Delete(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementConfigurationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementConfigurationsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"managementConfigurationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationDelete.json: %v", err)
	}
}

func TestManagementConfigurations_Get(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SolutionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewManagementConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"managementConfigurationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationsmanagement.ManagementConfiguration{
			Name:     to.Ptr("managementConfiguration1"),
			Type:     to.Ptr("Microsoft.OperationsManagement/ManagementConfigurations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.OperationsManagement/ManagementConfigurations/managementConfiguration1"),
			Location: to.Ptr("East US"),
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/ManagementConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationsmanagement.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationsmanagement.OperationListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationsmanagement/resource-manager/Microsoft.OperationsManagement/preview/2015-11-01-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
