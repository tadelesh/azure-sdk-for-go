//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedapplications

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ApplicationClientListOperationsPager provides operations for iterating over paged responses.
type ApplicationClientListOperationsPager struct {
	client    *ApplicationClient
	current   ApplicationClientListOperationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationClientListOperationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationClientListOperationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationClientListOperationsPager) NextPage(ctx context.Context) (ApplicationClientListOperationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationClientListOperationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationClientListOperationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationClientListOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationClientListOperationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		return ApplicationClientListOperationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplicationDefinitionsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ApplicationDefinitionsClientListByResourceGroupPager struct {
	client    *ApplicationDefinitionsClient
	current   ApplicationDefinitionsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationDefinitionsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationDefinitionsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationDefinitionListResult.NextLink == nil || len(*p.current.ApplicationDefinitionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationDefinitionsClientListByResourceGroupPager) NextPage(ctx context.Context) (ApplicationDefinitionsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationDefinitionsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationDefinitionsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationDefinitionsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationDefinitionsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ApplicationDefinitionsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplicationDefinitionsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ApplicationDefinitionsClientListBySubscriptionPager struct {
	client    *ApplicationDefinitionsClient
	current   ApplicationDefinitionsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationDefinitionsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationDefinitionsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationDefinitionListResult.NextLink == nil || len(*p.current.ApplicationDefinitionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationDefinitionsClientListBySubscriptionPager) NextPage(ctx context.Context) (ApplicationDefinitionsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationDefinitionsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationDefinitionsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationDefinitionsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationDefinitionsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ApplicationDefinitionsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplicationsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ApplicationsClientListByResourceGroupPager struct {
	client    *ApplicationsClient
	current   ApplicationsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationListResult.NextLink == nil || len(*p.current.ApplicationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationsClientListByResourceGroupPager) NextPage(ctx context.Context) (ApplicationsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ApplicationsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplicationsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ApplicationsClientListBySubscriptionPager struct {
	client    *ApplicationsClient
	current   ApplicationsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationListResult.NextLink == nil || len(*p.current.ApplicationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationsClientListBySubscriptionPager) NextPage(ctx context.Context) (ApplicationsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ApplicationsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}
