//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedapplications_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/solutions/armmanagedapplications"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestApplicationClient_ListOperations(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listSolutionsOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Solutions operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationClient(cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listSolutionsOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedapplications.OperationListResult{
			Value: []*armmanagedapplications.Operation{
				{
					Name: to.Ptr("SolutionsOperation1"),
					Display: &armmanagedapplications.OperationDisplay{
						Description: to.Ptr("Description of the operation"),
						Operation:   to.Ptr("Read"),
						Provider:    to.Ptr("Microsoft.ResourceProvider"),
						Resource:    to.Ptr("Resource1"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("SolutionssOperation2"),
					Display: &armmanagedapplications.OperationDisplay{
						Description: to.Ptr("Description of the operation"),
						Operation:   to.Ptr("Write"),
						Provider:    to.Ptr("Microsoft.ResourceProvider"),
						Resource:    to.Ptr("Resource2"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listSolutionsOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Get(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a managed application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myManagedApplication",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.Application{
			Name: to.Ptr("myManagedApplication"),
			Type: to.Ptr("Microsoft.Solutions/applications"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication"),
			Kind: to.Ptr("ServiceCatalog"),
			Properties: &armmanagedapplications.ApplicationProperties{
				ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/managedApplicationDefinitions/myAppDef"),
				Artifacts:               []*armmanagedapplications.ApplicationArtifact{},
				Authorizations: []*armmanagedapplications.ApplicationAuthorization{
					{
						PrincipalID:      to.Ptr("validprincipalguid"),
						RoleDefinitionID: to.Ptr("validroleguid"),
					}},
				CreatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("ClientApplicationId"),
					Oid:           to.Ptr("ClientOid"),
					Puid:          to.Ptr("ClientPuid"),
				},
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ManagementMode:         to.Ptr(armmanagedapplications.ApplicationManagementModeManaged),
				ProvisioningState:      to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
				UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("ClientApplicationId"),
					Oid:           to.Ptr("ClientOid"),
					Puid:          to.Ptr("ClientPuid"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Delete(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete managed application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg",
		"myManagedApplication",
		&armmanagedapplications.ApplicationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteApplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteApplication.json: %v", err)
	}
}

func TestApplications_CreateOrUpdate(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update managed application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myManagedApplication",
		armmanagedapplications.Application{
			Kind: to.Ptr("ServiceCatalog"),
			Properties: &armmanagedapplications.ApplicationProperties{
				ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myAppDef"),
				ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
			},
		},
		&armmanagedapplications.ApplicationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.Application{
			Name: to.Ptr("myManagedApplication"),
			Type: to.Ptr("Microsoft.Solutions/applications"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication"),
			Kind: to.Ptr("ServiceCatalog"),
			Properties: &armmanagedapplications.ApplicationProperties{
				ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myAppDef"),
				ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ProvisioningState:       to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Update(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update managed application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myManagedApplication",
		&armmanagedapplications.ApplicationsClientUpdateOptions{Parameters: &armmanagedapplications.ApplicationPatchable{
			Kind: to.Ptr("ServiceCatalog"),
			Properties: &armmanagedapplications.ApplicationProperties{
				ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myAppDef"),
				ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.Application{
			Name: to.Ptr("myManagedApplication"),
			Type: to.Ptr("Microsoft.Solutions/applications"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication"),
			Kind: to.Ptr("ServiceCatalog"),
			Properties: &armmanagedapplications.ApplicationProperties{
				ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myAppDef"),
				ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ProvisioningState:       to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_ListByResourceGroup(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists applications"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedapplications.ApplicationListResult{
			Value: []*armmanagedapplications.Application{
				{
					Name: to.Ptr("myManagedApplication"),
					Type: to.Ptr("Microsoft.Solutions/applications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication"),
					Kind: to.Ptr("ServiceCatalog"),
					Properties: &armmanagedapplications.ApplicationProperties{
						ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/managedApplicationDefinitions/myAppDef"),
						ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:       to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("myManagedApplication2"),
					Type: to.Ptr("Microsoft.Solutions/applications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication2"),
					Kind: to.Ptr("ServiceCatalog"),
					Properties: &armmanagedapplications.ApplicationProperties{
						ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/managedApplicationDefinitions/myAppDef2"),
						ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:       to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_ListBySubscription(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists applications"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedapplications.ApplicationListResult{
			Value: []*armmanagedapplications.Application{
				{
					Name: to.Ptr("myManagedApplication"),
					Type: to.Ptr("Microsoft.Solutions/applications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication"),
					Kind: to.Ptr("ServiceCatalog"),
					Properties: &armmanagedapplications.ApplicationProperties{
						ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/managedApplicationDefinitions/myAppDef"),
						ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:       to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("myManagedApplication2"),
					Type: to.Ptr("Microsoft.Solutions/applications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applications/myManagedApplication2"),
					Kind: to.Ptr("ServiceCatalog"),
					Properties: &armmanagedapplications.ApplicationProperties{
						ApplicationDefinitionID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/managedApplicationDefinitions/myAppDef2"),
						ManagedResourceGroupID:  to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:       to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_RefreshPermissions(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/refreshApplicationPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Refresh managed application permissions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	poller, err := client.BeginRefreshPermissions(ctx,
		"rg",
		"myManagedApplication",
		&armmanagedapplications.ApplicationsClientBeginRefreshPermissionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/refreshApplicationPermissions.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/refreshApplicationPermissions.json: %v", err)
	}
}

func TestApplications_ListAllowedUpgradePlans(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listAllowedUpgradePlans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List allowed upgrade plans for application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationsClient("subid", cred, &options)
	_, err := client.ListAllowedUpgradePlans(ctx,
		"rg",
		"myManagedApplication",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listAllowedUpgradePlans.json: %v", err)
	}
}

func TestApplicationDefinitions_Get(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getApplicationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed application definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationDefinitionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myManagedApplicationDef",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getApplicationDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.ApplicationDefinition{
			Name: to.Ptr("myManagedApplicationDef"),
			Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef"),
			Properties: &armmanagedapplications.ApplicationDefinitionProperties{
				Description: to.Ptr("myManagedApplicationDef description"),
				Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
					{
						Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
						Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
						URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
					},
					{
						Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
						Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
						URI:  to.Ptr("https://path/to/mainTemplate.json"),
					}},
				Authorizations: []*armmanagedapplications.ApplicationAuthorization{
					{
						PrincipalID:      to.Ptr("validprincipalguid"),
						RoleDefinitionID: to.Ptr("validroleguid"),
					}},
				DisplayName:    to.Ptr("myManagedApplicationDef"),
				LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
				PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
				Policies:       []*armmanagedapplications.ApplicationPolicy{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getApplicationDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationDefinitions_Delete(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteApplicationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"delete managed application definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationDefinitionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg",
		"myManagedApplicationDef",
		&armmanagedapplications.ApplicationDefinitionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteApplicationDefinition.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteApplicationDefinition.json: %v", err)
	}
}

func TestApplicationDefinitions_CreateOrUpdate(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplicationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update managed application definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationDefinitionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myManagedApplicationDef",
		armmanagedapplications.ApplicationDefinition{
			Properties: &armmanagedapplications.ApplicationDefinitionProperties{
				Description: to.Ptr("myManagedApplicationDef description"),
				Authorizations: []*armmanagedapplications.ApplicationAuthorization{
					{
						PrincipalID:      to.Ptr("validprincipalguid"),
						RoleDefinitionID: to.Ptr("validroleguid"),
					}},
				DisplayName:    to.Ptr("myManagedApplicationDef"),
				LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
				PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
			},
		},
		&armmanagedapplications.ApplicationDefinitionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplicationDefinition.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplicationDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.ApplicationDefinition{
			Name: to.Ptr("myManagedApplicationDef"),
			Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef"),
			Properties: &armmanagedapplications.ApplicationDefinitionProperties{
				Description: to.Ptr("myManagedApplicationDef description"),
				Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
					{
						Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
						Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
						URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
					},
					{
						Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
						Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
						URI:  to.Ptr("https://path/to/mainTemplate.json"),
					}},
				Authorizations: []*armmanagedapplications.ApplicationAuthorization{
					{
						PrincipalID:      to.Ptr("validprincipalguid"),
						RoleDefinitionID: to.Ptr("validroleguid"),
					}},
				DisplayName:    to.Ptr("myManagedApplicationDef"),
				LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
				PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateApplicationDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationDefinitions_Update(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateApplicationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed application definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationDefinitionsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myManagedApplicationDef",
		armmanagedapplications.ApplicationDefinitionPatchable{
			Tags: map[string]*string{
				"department": to.Ptr("Finance"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateApplicationDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.ApplicationDefinition{
			Name: to.Ptr("myManagedApplicationDef"),
			Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef"),
			Properties: &armmanagedapplications.ApplicationDefinitionProperties{
				Description: to.Ptr("myManagedApplicationDef description"),
				Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
					{
						Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
						Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
						URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
					},
					{
						Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
						Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
						URI:  to.Ptr("https://path/to/mainTemplate.json"),
					}},
				Authorizations: []*armmanagedapplications.ApplicationAuthorization{
					{
						PrincipalID:      to.Ptr("validprincipalguid"),
						RoleDefinitionID: to.Ptr("validroleguid"),
					}},
				DisplayName:    to.Ptr("myManagedApplicationDef"),
				LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
				PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateApplicationDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationDefinitions_ListByResourceGroup(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationDefinitionsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed application definitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationDefinitionsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationDefinitionsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedapplications.ApplicationDefinitionListResult{
			Value: []*armmanagedapplications.ApplicationDefinition{
				{
					Name: to.Ptr("myManagedApplicationDef"),
					Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef"),
					Properties: &armmanagedapplications.ApplicationDefinitionProperties{
						Description: to.Ptr("myManagedApplicationDef description"),
						Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
								URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
							},
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
								URI:  to.Ptr("https://path/to/mainTemplate.json"),
							}},
						Authorizations: []*armmanagedapplications.ApplicationAuthorization{
							{
								PrincipalID:      to.Ptr("validprincipalguid"),
								RoleDefinitionID: to.Ptr("validroleguid"),
							}},
						DisplayName:    to.Ptr("myManagedApplicationDef"),
						LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
						PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
					},
				},
				{
					Name: to.Ptr("myManagedApplicationDef2"),
					Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef2"),
					Properties: &armmanagedapplications.ApplicationDefinitionProperties{
						Description: to.Ptr("myManagedApplicationDef2 description"),
						Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
								URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
							},
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
								URI:  to.Ptr("https://path/to/mainTemplate.json"),
							}},
						Authorizations: []*armmanagedapplications.ApplicationAuthorization{
							{
								PrincipalID:      to.Ptr("validprincipalguid"),
								RoleDefinitionID: to.Ptr("validroleguid"),
							}},
						DisplayName:    to.Ptr("myManagedApplicationDef2"),
						LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
						PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationDefinitionsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationDefinitions_ListBySubscription(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationDefinitionsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed application definitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewApplicationDefinitionsClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationDefinitionsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedapplications.ApplicationDefinitionListResult{
			Value: []*armmanagedapplications.ApplicationDefinition{
				{
					Name: to.Ptr("myManagedApplicationDef"),
					Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef"),
					Properties: &armmanagedapplications.ApplicationDefinitionProperties{
						Description: to.Ptr("myManagedApplicationDef description"),
						Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
								URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
							},
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
								URI:  to.Ptr("https://path/to/mainTemplate.json"),
							}},
						Authorizations: []*armmanagedapplications.ApplicationAuthorization{
							{
								PrincipalID:      to.Ptr("validprincipalguid"),
								RoleDefinitionID: to.Ptr("validroleguid"),
							}},
						DisplayName:    to.Ptr("myManagedApplicationDef"),
						LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
						PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
					},
				},
				{
					Name: to.Ptr("myManagedApplicationDef2"),
					Type: to.Ptr("Microsoft.Solutions/applicationDefinitions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/applicationDefinitions/myManagedApplicationDef2"),
					Properties: &armmanagedapplications.ApplicationDefinitionProperties{
						Description: to.Ptr("myManagedApplicationDef2 description"),
						Artifacts: []*armmanagedapplications.ApplicationDefinitionArtifact{
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameCreateUIDefinition),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeCustom),
								URI:  to.Ptr("https://path/to/managedApplicationCreateUiDefinition.json"),
							},
							{
								Name: to.Ptr(armmanagedapplications.ApplicationDefinitionArtifactNameApplicationResourceTemplate),
								Type: to.Ptr(armmanagedapplications.ApplicationArtifactTypeTemplate),
								URI:  to.Ptr("https://path/to/mainTemplate.json"),
							}},
						Authorizations: []*armmanagedapplications.ApplicationAuthorization{
							{
								PrincipalID:      to.Ptr("validprincipalguid"),
								RoleDefinitionID: to.Ptr("validroleguid"),
							}},
						DisplayName:    to.Ptr("myManagedApplicationDef2"),
						LockLevel:      to.Ptr(armmanagedapplications.ApplicationLockLevelNone),
						PackageFileURI: to.Ptr("https://path/to/packagezipfile"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listApplicationDefinitionsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitRequests_Get(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getJitRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update jit request"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewJitRequestsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myJitRequest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getJitRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.JitRequestDefinition{
			Name: to.Ptr("myJitRequest"),
			Type: to.Ptr("Microsoft.Solutions/jitRequests"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest"),
			Properties: &armmanagedapplications.JitRequestProperties{
				ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
				CreatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
					Oid:           to.Ptr(""),
				},
				JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
					{
						PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
						RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
					}},
				JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
				JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
					Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
					Duration:  to.Ptr("PT8H"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
				},
				ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
				UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
					Oid:           to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JitRequestDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitRequestDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/getJitRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitRequests_CreateOrUpdate(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateJitRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update jit request"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewJitRequestsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myJitRequest",
		armmanagedapplications.JitRequestDefinition{
			Properties: &armmanagedapplications.JitRequestProperties{
				ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
				JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
					{
						PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
						RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
					}},
				JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
					Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
					Duration:  to.Ptr("PT8H"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
				},
			},
		},
		&armmanagedapplications.JitRequestsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateJitRequest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateJitRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.JitRequestDefinition{
			Name: to.Ptr("myJitRequest"),
			Type: to.Ptr("Microsoft.Solutions/jitRequests"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest"),
			Properties: &armmanagedapplications.JitRequestProperties{
				ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
				CreatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
					Oid:           to.Ptr(""),
				},
				JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
					{
						PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
						RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
					}},
				JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
				JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
					Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
					Duration:  to.Ptr("PT8H"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
				},
				ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
				UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
					Oid:           to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JitRequestDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitRequestDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/createOrUpdateJitRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitRequests_Update(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateJitRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update jit request"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewJitRequestsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myJitRequest",
		armmanagedapplications.JitRequestPatchable{
			Tags: map[string]*string{
				"department": to.Ptr("Finance"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateJitRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.JitRequestDefinition{
			Name: to.Ptr("myJitRequest"),
			Type: to.Ptr("Microsoft.Solutions/jitRequests"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest"),
			Properties: &armmanagedapplications.JitRequestProperties{
				ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
				CreatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
					Oid:           to.Ptr(""),
				},
				JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
					{
						PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
						RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
					}},
				JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
				JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
					Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
					Duration:  to.Ptr("PT8H"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
				},
				ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
				UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
					ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
					Oid:           to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JitRequestDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitRequestDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/updateJitRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitRequests_Delete(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteJitRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete jit request"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewJitRequestsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myJitRequest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/deleteJitRequest.json: %v", err)
	}
}

func TestJitRequests_ListBySubscription(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listJitRequestsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List jit requests"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewJitRequestsClient("subid", cred, &options)
	res, err := client.ListBySubscription(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listJitRequestsByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.JitRequestDefinitionListResult{
			Value: []*armmanagedapplications.JitRequestDefinition{
				{
					Name: to.Ptr("myJitRequest"),
					Type: to.Ptr("Microsoft.Solutions/jitRequests"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest"),
					Properties: &armmanagedapplications.JitRequestProperties{
						ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
						CreatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
						JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
							{
								PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
								RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
							}},
						JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
						JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
							Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
							Duration:  to.Ptr("PT8H"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
						},
						ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
						UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
					},
				},
				{
					Name: to.Ptr("myJitRequest2"),
					Type: to.Ptr("Microsoft.Solutions/jitRequests"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest2"),
					Properties: &armmanagedapplications.JitRequestProperties{
						ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
						CreatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
						JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
							{
								PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
								RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
							}},
						JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
						JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
							Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
							Duration:  to.Ptr("PT8H"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
						},
						ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
						UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.JitRequestDefinitionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitRequestDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listJitRequestsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitRequests_ListByResourceGroup(t *testing.T) {
	// From example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listJitRequestsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List jit requests"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedapplications.NewJitRequestsClient("subid", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"rg",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listJitRequestsByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedapplications.JitRequestDefinitionListResult{
			Value: []*armmanagedapplications.JitRequestDefinition{
				{
					Name: to.Ptr("myJitRequest"),
					Type: to.Ptr("Microsoft.Solutions/jitRequests"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest"),
					Properties: &armmanagedapplications.JitRequestProperties{
						ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
						CreatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
						JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
							{
								PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
								RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
							}},
						JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
						JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
							Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
							Duration:  to.Ptr("PT8H"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
						},
						ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
						UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
					},
				},
				{
					Name: to.Ptr("myJitRequest2"),
					Type: to.Ptr("Microsoft.Solutions/jitRequests"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Solutions/jitRequests/myJitRequest2"),
					Properties: &armmanagedapplications.JitRequestProperties{
						ApplicationResourceID: to.Ptr("/subscriptions/00c76877-e316-48a7-af60-4a09fec9d43f/resourceGroups/52F30DB2/providers/Microsoft.Solutions/applications/7E193158"),
						CreatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
						JitAuthorizationPolicies: []*armmanagedapplications.JitAuthorizationPolicies{
							{
								PrincipalID:      to.Ptr("1db8e132e2934dbcb8e1178a61319491"),
								RoleDefinitionID: to.Ptr("ecd05a23-931a-4c38-a52b-ac7c4c583334"),
							}},
						JitRequestState: to.Ptr(armmanagedapplications.JitRequestStatePending),
						JitSchedulingPolicy: &armmanagedapplications.JitSchedulingPolicy{
							Type:      to.Ptr(armmanagedapplications.JitSchedulingTypeOnce),
							Duration:  to.Ptr("PT8H"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-22T05:48:30.6661804Z"); return t }()),
						},
						ProvisioningState: to.Ptr(armmanagedapplications.ProvisioningStateSucceeded),
						UpdatedBy: &armmanagedapplications.ApplicationClientDetails{
							ApplicationID: to.Ptr("33a83f1f-c363-4ae7-9e0a-a0c08466354d"),
							Oid:           to.Ptr(""),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.JitRequestDefinitionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitRequestDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/solutions/resource-manager/Microsoft.Solutions/stable/2021-07-01/examples/listJitRequestsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
