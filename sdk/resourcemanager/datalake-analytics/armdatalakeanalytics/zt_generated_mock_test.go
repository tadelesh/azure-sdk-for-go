//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatalakeanalytics_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-analytics/armdatalakeanalytics"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_List(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(&armdatalakeanalytics.AccountsClientListOptions{Filter: to.Ptr("test_filter"),
		Top:     to.Ptr[int32](1),
		Skip:    to.Ptr[int32](1),
		Select:  to.Ptr("test_select"),
		Orderby: to.Ptr("test_orderby"),
		Count:   to.Ptr(false),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.AccountListResult{
			Value: []*armdatalakeanalytics.AccountBasic{
				{
					Name: to.Ptr("test_account"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakeanalytics.AccountPropertiesBasic{
						AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						Endpoint:          to.Ptr("test_endpoint"),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						ProvisioningState: to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStatusSucceeded),
						State:             to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("contosorg",
		&armdatalakeanalytics.AccountsClientListByResourceGroupOptions{Filter: to.Ptr("test_filter"),
			Top:     to.Ptr[int32](1),
			Skip:    to.Ptr[int32](1),
			Select:  to.Ptr("test_select"),
			Orderby: to.Ptr("test_orderby"),
			Count:   to.Ptr(false),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.AccountListResult{
			Value: []*armdatalakeanalytics.AccountBasic{
				{
					Name: to.Ptr("test_account"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakeanalytics.AccountPropertiesBasic{
						AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						Endpoint:          to.Ptr("test_endpoint"),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						ProvisioningState: to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStatusSucceeded),
						State:             to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Create(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contosorg",
		"contosoadla",
		armdatalakeanalytics.CreateDataLakeAnalyticsAccountParameters{
			Location: to.Ptr("eastus2"),
			Properties: &armdatalakeanalytics.CreateDataLakeAnalyticsAccountProperties{
				ComputePolicies: []*armdatalakeanalytics.CreateComputePolicyWithAccountParameters{
					{
						Name: to.Ptr("test_policy"),
						Properties: &armdatalakeanalytics.CreateOrUpdateComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
							MinPriorityPerJob:            to.Ptr[int32](1),
							ObjectID:                     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
							ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
						},
					}},
				DataLakeStoreAccounts: []*armdatalakeanalytics.AddDataLakeStoreWithAccountParameters{
					{
						Name: to.Ptr("test_adls"),
						Properties: &armdatalakeanalytics.AddDataLakeStoreProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				DefaultDataLakeStoreAccount: to.Ptr("test_adls"),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakeanalytics.CreateFirewallRuleWithAccountParameters{
					{
						Name: to.Ptr("test_rule"),
						Properties: &armdatalakeanalytics.CreateOrUpdateFirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:                to.Ptr(armdatalakeanalytics.FirewallStateEnabled),
				MaxDegreeOfParallelism:       to.Ptr[int32](30),
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
				MaxJobCount:                  to.Ptr[int32](3),
				MinPriorityPerJob:            to.Ptr[int32](1),
				NewTier:                      to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				QueryStoreRetention:          to.Ptr[int32](30),
				StorageAccounts: []*armdatalakeanalytics.AddStorageAccountWithAccountParameters{
					{
						Name: to.Ptr("test_storage"),
						Properties: &armdatalakeanalytics.AddStorageAccountProperties{
							AccessKey: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
							Suffix:    to.Ptr("test_suffix"),
						},
					}},
			},
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
		},
		&armdatalakeanalytics.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.Account{
			Name: to.Ptr("test_account"),
			Type: to.Ptr("Microsoft.DataLakeAnalytics/accounts"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rgaba12041/providers/Microsoft.DataLakeAnalytics/accounts/testaba15818"),
			Properties: &armdatalakeanalytics.AccountProperties{
				AccountID:         to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				Endpoint:          to.Ptr("test_endpoint"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStatusSucceeded),
				State:             to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStateActive),
				ComputePolicies: []*armdatalakeanalytics.ComputePolicy{
					{
						Name: to.Ptr("test_policy"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_policy_id"),
						Properties: &armdatalakeanalytics.ComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
							MinPriorityPerJob:            to.Ptr[int32](1),
							ObjectID:                     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
							ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
						},
					}},
				CurrentTier: to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				DataLakeStoreAccounts: []*armdatalakeanalytics.DataLakeStoreAccountInformation{
					{
						Name: to.Ptr("test_adls"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_adls_id"),
						Properties: &armdatalakeanalytics.DataLakeStoreAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				DefaultDataLakeStoreAccount: to.Ptr("test_adls"),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakeanalytics.FirewallRule{
					{
						Name: to.Ptr("test_rule"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_firewall_id"),
						Properties: &armdatalakeanalytics.FirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:                to.Ptr(armdatalakeanalytics.FirewallStateEnabled),
				MaxDegreeOfParallelism:       to.Ptr[int32](30),
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
				MaxJobCount:                  to.Ptr[int32](3),
				MinPriorityPerJob:            to.Ptr[int32](1),
				NewTier:                      to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				QueryStoreRetention:          to.Ptr[int32](30),
				StorageAccounts: []*armdatalakeanalytics.StorageAccountInformation{
					{
						Name: to.Ptr("test_storage"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_storage_id"),
						Properties: &armdatalakeanalytics.StorageAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				SystemMaxDegreeOfParallelism: to.Ptr[int32](1),
				SystemMaxJobCount:            to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets details of the specified Data Lake Analytics account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.Account{
			Name: to.Ptr("test_account"),
			Type: to.Ptr("Microsoft.DataLakeAnalytics/accounts"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rgaba12041/providers/Microsoft.DataLakeAnalytics/accounts/testaba15818"),
			Properties: &armdatalakeanalytics.AccountProperties{
				AccountID:         to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				Endpoint:          to.Ptr("test_endpoint"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStatusSucceeded),
				State:             to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStateActive),
				ComputePolicies: []*armdatalakeanalytics.ComputePolicy{
					{
						Name: to.Ptr("test_policy"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_policy_id"),
						Properties: &armdatalakeanalytics.ComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
							MinPriorityPerJob:            to.Ptr[int32](1),
							ObjectID:                     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
							ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
						},
					}},
				CurrentTier: to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				DataLakeStoreAccounts: []*armdatalakeanalytics.DataLakeStoreAccountInformation{
					{
						Name: to.Ptr("test_adls"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_adls_id"),
						Properties: &armdatalakeanalytics.DataLakeStoreAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				DefaultDataLakeStoreAccount: to.Ptr("test_adls"),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakeanalytics.FirewallRule{
					{
						Name: to.Ptr("test_rule"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_firewall_id"),
						Properties: &armdatalakeanalytics.FirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:                to.Ptr(armdatalakeanalytics.FirewallStateEnabled),
				MaxDegreeOfParallelism:       to.Ptr[int32](30),
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
				MaxJobCount:                  to.Ptr[int32](3),
				MinPriorityPerJob:            to.Ptr[int32](1),
				NewTier:                      to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				PublicDataLakeStoreAccounts: []*armdatalakeanalytics.DataLakeStoreAccountInformation{
					{
						Name: to.Ptr("test_adls"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_adls_id"),
						Properties: &armdatalakeanalytics.DataLakeStoreAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				QueryStoreRetention: to.Ptr[int32](30),
				StorageAccounts: []*armdatalakeanalytics.StorageAccountInformation{
					{
						Name: to.Ptr("test_storage"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_storage_id"),
						Properties: &armdatalakeanalytics.StorageAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				SystemMaxDegreeOfParallelism: to.Ptr[int32](1),
				SystemMaxJobCount:            to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"contosorg",
		"contosoadla",
		&armdatalakeanalytics.AccountsClientBeginUpdateOptions{Parameters: &armdatalakeanalytics.UpdateDataLakeAnalyticsAccountParameters{
			Properties: &armdatalakeanalytics.UpdateDataLakeAnalyticsAccountProperties{
				ComputePolicies: []*armdatalakeanalytics.UpdateComputePolicyWithAccountParameters{
					{
						Name: to.Ptr("test_policy"),
						Properties: &armdatalakeanalytics.UpdateComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
							MinPriorityPerJob:            to.Ptr[int32](1),
							ObjectID:                     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
							ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
						},
					}},
				FirewallAllowAzureIPs: to.Ptr(armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakeanalytics.UpdateFirewallRuleWithAccountParameters{
					{
						Name: to.Ptr("test_rule"),
						Properties: &armdatalakeanalytics.UpdateFirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:                to.Ptr(armdatalakeanalytics.FirewallStateEnabled),
				MaxDegreeOfParallelism:       to.Ptr[int32](1),
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
				MaxJobCount:                  to.Ptr[int32](1),
				MinPriorityPerJob:            to.Ptr[int32](1),
				NewTier:                      to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				QueryStoreRetention:          to.Ptr[int32](1),
			},
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.Account{
			Name: to.Ptr("test_account"),
			Type: to.Ptr("Microsoft.DataLakeAnalytics/accounts"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rgaba12041/providers/Microsoft.DataLakeAnalytics/accounts/testaba15818"),
			Properties: &armdatalakeanalytics.AccountProperties{
				AccountID:         to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				Endpoint:          to.Ptr("test_endpoint"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStatusSucceeded),
				State:             to.Ptr(armdatalakeanalytics.DataLakeAnalyticsAccountStateActive),
				ComputePolicies: []*armdatalakeanalytics.ComputePolicy{
					{
						Name: to.Ptr("test_policy"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_policy_id"),
						Properties: &armdatalakeanalytics.ComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
							MinPriorityPerJob:            to.Ptr[int32](1),
							ObjectID:                     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
							ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
						},
					}},
				CurrentTier: to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				DataLakeStoreAccounts: []*armdatalakeanalytics.DataLakeStoreAccountInformation{
					{
						Name: to.Ptr("test_adls"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_adls_id"),
						Properties: &armdatalakeanalytics.DataLakeStoreAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				DefaultDataLakeStoreAccount: to.Ptr("test_adls"),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakeanalytics.FirewallRule{
					{
						Name: to.Ptr("test_rule"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_firewall_id"),
						Properties: &armdatalakeanalytics.FirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:                to.Ptr(armdatalakeanalytics.FirewallStateEnabled),
				MaxDegreeOfParallelism:       to.Ptr[int32](30),
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](1),
				MaxJobCount:                  to.Ptr[int32](3),
				MinPriorityPerJob:            to.Ptr[int32](1),
				NewTier:                      to.Ptr(armdatalakeanalytics.TierTypeConsumption),
				QueryStoreRetention:          to.Ptr[int32](30),
				StorageAccounts: []*armdatalakeanalytics.StorageAccountInformation{
					{
						Name: to.Ptr("test_storage"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("test_storage_id"),
						Properties: &armdatalakeanalytics.StorageAccountInformationProperties{
							Suffix: to.Ptr("test_suffix"),
						},
					}},
				SystemMaxDegreeOfParallelism: to.Ptr[int32](1),
				SystemMaxJobCount:            to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Begins the delete process for the Data Lake Analytics account object specified by the account name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contosorg",
		"contosoadla",
		&armdatalakeanalytics.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Delete.json: %v", err)
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks whether the specified account name is available or taken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"EastUS2",
		armdatalakeanalytics.CheckNameAvailabilityParameters{
			Name: to.Ptr("contosoadla"),
			Type: to.Ptr(armdatalakeanalytics.CheckNameAvailabilityParametersTypeMicrosoftDataLakeAnalyticsAccounts),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.NameAvailabilityInformation{
			Message:       to.Ptr("An account named 'abc' already exists."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataLakeStoreAccounts_ListByAccount(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewDataLakeStoreAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		&armdatalakeanalytics.DataLakeStoreAccountsClientListByAccountOptions{Filter: to.Ptr("test_filter"),
			Top:     to.Ptr[int32](1),
			Skip:    to.Ptr[int32](1),
			Select:  to.Ptr("test_select"),
			Orderby: to.Ptr("test_orderby"),
			Count:   to.Ptr(false),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.DataLakeStoreAccountInformationListResult{
			Value: []*armdatalakeanalytics.DataLakeStoreAccountInformation{
				{
					Name: to.Ptr("test_adls"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakeanalytics.DataLakeStoreAccountInformationProperties{
						Suffix: to.Ptr("test_suffix"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataLakeStoreAccountInformationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataLakeStoreAccountInformationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataLakeStoreAccounts_Add(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Add.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Adds a Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewDataLakeStoreAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Add(ctx,
		"contosorg",
		"contosoadla",
		"test_adls_account",
		&armdatalakeanalytics.DataLakeStoreAccountsClientAddOptions{Parameters: &armdatalakeanalytics.AddDataLakeStoreParameters{
			Properties: &armdatalakeanalytics.AddDataLakeStoreProperties{
				Suffix: to.Ptr("test_suffix"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Add.json: %v", err)
	}
}

func TestDataLakeStoreAccounts_Get(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Data Lake Store account details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewDataLakeStoreAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1669ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_adls_account",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.DataLakeStoreAccountInformation{
			Name: to.Ptr("test_adls"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakeanalytics.DataLakeStoreAccountInformationProperties{
				Suffix: to.Ptr("test_suffix"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataLakeStoreAccountInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataLakeStoreAccountInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataLakeStoreAccounts_Delete(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewDataLakeStoreAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_adls_account",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/DataLakeStoreAccounts_Delete.json: %v", err)
	}
}

func TestStorageAccounts_ListByAccount(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the first page of Azure Storage accounts linked to the specified Data Lake Analytics account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		&armdatalakeanalytics.StorageAccountsClientListByAccountOptions{Filter: to.Ptr("test_filter"),
			Top:     to.Ptr[int32](1),
			Skip:    to.Ptr[int32](1),
			Select:  to.Ptr("test_select"),
			Orderby: to.Ptr("test_orderby"),
			Count:   to.Ptr(false),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.StorageAccountInformationListResult{
			Value: []*armdatalakeanalytics.StorageAccountInformation{
				{
					Name: to.Ptr("test_storage"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakeanalytics.StorageAccountInformationProperties{
						Suffix: to.Ptr("test_suffix"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageAccountInformationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageAccountInformationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Add(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Add.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Adds an Azure Storage account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Add(ctx,
		"contosorg",
		"contosoadla",
		"test_storage",
		armdatalakeanalytics.AddStorageAccountParameters{
			Properties: &armdatalakeanalytics.AddStorageAccountProperties{
				AccessKey: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
				Suffix:    to.Ptr("test_suffix"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Add.json: %v", err)
	}
}

func TestStorageAccounts_Get(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Azure Storage account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_storage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.StorageAccountInformation{
			Name: to.Ptr("test_storage"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakeanalytics.StorageAccountInformationProperties{
				Suffix: to.Ptr("test_suffix"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageAccountInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageAccountInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Update(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Replaces Azure Storage blob account details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_storage",
		&armdatalakeanalytics.StorageAccountsClientUpdateOptions{Parameters: &armdatalakeanalytics.UpdateStorageAccountParameters{
			Properties: &armdatalakeanalytics.UpdateStorageAccountProperties{
				AccessKey: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
				Suffix:    to.Ptr("test_suffix"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Update.json: %v", err)
	}
}

func TestStorageAccounts_Delete(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes an Azure Storage account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_storage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Delete.json: %v", err)
	}
}

func TestStorageAccounts_ListStorageContainers(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListStorageContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Azure Storage containers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListStorageContainers("contosorg",
		"contosoadla",
		"test_storage",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListStorageContainers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.StorageContainerListResult{
			Value: []*armdatalakeanalytics.StorageContainer{
				{
					Name: to.Ptr("test_storage"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakeanalytics.StorageContainerProperties{
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageContainerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageContainerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListStorageContainers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_GetStorageContainer(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_GetStorageContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Azure Storage container"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetStorageContainer(ctx,
		"contosorg",
		"contosoadla",
		"test_storage",
		"test_container",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_GetStorageContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.StorageContainer{
			Name: to.Ptr("test_storage"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakeanalytics.StorageContainerProperties{
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_GetStorageContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_ListSasTokens(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListSasTokens.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the SAS token"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewStorageAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSasTokens("contosorg",
		"contosoadla",
		"test_storage",
		"test_container",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListSasTokens.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.SasTokenInformationListResult{
			Value: []*armdatalakeanalytics.SasTokenInformation{
				{
					AccessToken: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SasTokenInformationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SasTokenInformationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_ListSasTokens.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComputePolicies_ListByAccount(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the compute policies within the adla account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewComputePoliciesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.ComputePolicyListResult{
			Value: []*armdatalakeanalytics.ComputePolicy{
				{
					Name: to.Ptr("test_policy"),
					Properties: &armdatalakeanalytics.ComputePolicyProperties{
						MaxDegreeOfParallelismPerJob: to.Ptr[int32](10),
						MinPriorityPerJob:            to.Ptr[int32](30),
						ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da98"),
						ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
					},
				},
				{
					Name: to.Ptr("test_policy1"),
					Properties: &armdatalakeanalytics.ComputePolicyProperties{
						MaxDegreeOfParallelismPerJob: to.Ptr[int32](5),
						MinPriorityPerJob:            to.Ptr[int32](15),
						ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da99"),
						ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeGroup),
					},
				},
				{
					Name: to.Ptr("test_policy2"),
					Properties: &armdatalakeanalytics.ComputePolicyProperties{
						MaxDegreeOfParallelismPerJob: to.Ptr[int32](20),
						MinPriorityPerJob:            to.Ptr[int32](60),
						ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da97"),
						ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeServicePrincipal),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComputePolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComputePolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComputePolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the specified compute policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewComputePoliciesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_policy",
		armdatalakeanalytics.CreateOrUpdateComputePolicyParameters{
			Properties: &armdatalakeanalytics.CreateOrUpdateComputePolicyProperties{
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](10),
				MinPriorityPerJob:            to.Ptr[int32](30),
				ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da98"),
				ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.ComputePolicy{
			Name: to.Ptr("test_policy"),
			Properties: &armdatalakeanalytics.ComputePolicyProperties{
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](10),
				MinPriorityPerJob:            to.Ptr[int32](30),
				ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da98"),
				ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComputePolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputePolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComputePolicies_Get(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified compute policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewComputePoliciesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_policy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.ComputePolicy{
			Name: to.Ptr("test_policy"),
			Properties: &armdatalakeanalytics.ComputePolicyProperties{
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](10),
				MinPriorityPerJob:            to.Ptr[int32](30),
				ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da98"),
				ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComputePolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputePolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComputePolicies_Update(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the specified compute policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewComputePoliciesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_policy",
		&armdatalakeanalytics.ComputePoliciesClientUpdateOptions{Parameters: &armdatalakeanalytics.UpdateComputePolicyParameters{
			Properties: &armdatalakeanalytics.UpdateComputePolicyProperties{
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](11),
				MinPriorityPerJob:            to.Ptr[int32](31),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.ComputePolicy{
			Name: to.Ptr("test_policy"),
			Properties: &armdatalakeanalytics.ComputePolicyProperties{
				MaxDegreeOfParallelismPerJob: to.Ptr[int32](11),
				MinPriorityPerJob:            to.Ptr[int32](31),
				ObjectID:                     to.Ptr("776b9091-8916-4638-87f7-9c989a38da98"),
				ObjectType:                   to.Ptr(armdatalakeanalytics.AADObjectTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComputePolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComputePolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComputePolicies_Delete(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified compute policy from the adla account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewComputePoliciesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_policy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/ComputePolicies_Delete.json: %v", err)
	}
}

func TestFirewallRules_ListByAccount(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Data Lake Analytics firewall rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakeanalytics.FirewallRuleListResult{
			Value: []*armdatalakeanalytics.FirewallRule{
				{
					Name: to.Ptr("test_rule"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakeanalytics.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("2.2.2.2"),
						StartIPAddress: to.Ptr("1.1.1.1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the specified firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		armdatalakeanalytics.CreateOrUpdateFirewallRuleParameters{
			Properties: &armdatalakeanalytics.CreateOrUpdateFirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.FirewallRule{
			Name: to.Ptr("test_rule"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakeanalytics.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Data Lake Analytics firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.FirewallRule{
			Name: to.Ptr("test_rule"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakeanalytics.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Update(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the specified firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		&armdatalakeanalytics.FirewallRulesClientUpdateOptions{Parameters: &armdatalakeanalytics.UpdateFirewallRuleParameters{
			Properties: &armdatalakeanalytics.UpdateFirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.FirewallRule{
			Name: to.Ptr("test_rule"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakeanalytics.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/FirewallRules_Delete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available Data Lake Analytics REST API operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Operations_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.OperationListResult{
			Value: []*armdatalakeanalytics.Operation{
				{
					Name: to.Ptr("Microsoft.DataLakeAnalytics/operations/read"),
					Display: &armdatalakeanalytics.OperationDisplay{
						Description: to.Ptr("Get available operations of DataLakeAnalytics."),
						Operation:   to.Ptr("Get Available Operations"),
						Provider:    to.Ptr("Microsoft DataLakeAnalytics"),
						Resource:    to.Ptr("Available Operations"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_GetCapability(t *testing.T) {
	// From example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Locations_GetCapability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets subscription-level properties and limits for Data Lake Analytics specified by resource location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakeanalytics.NewLocationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetCapability(ctx,
		"EastUS2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Locations_GetCapability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakeanalytics.CapabilityInformation{
			AccountCount:    to.Ptr[int32](100),
			MaxAccountCount: to.Ptr[int32](150),
			MigrationState:  to.Ptr(false),
			State:           to.Ptr(armdatalakeanalytics.SubscriptionStateRegistered),
			SubscriptionID:  to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
		}
		if !reflect.DeepEqual(exampleRes, res.CapabilityInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapabilityInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Locations_GetCapability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
