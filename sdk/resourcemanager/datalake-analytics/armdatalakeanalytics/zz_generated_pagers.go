//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatalakeanalytics

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccountsClientListByResourceGroupPager provides operations for iterating over paged responses.
type AccountsClientListByResourceGroupPager struct {
	client    *AccountsClient
	current   AccountsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountListResult.NextLink == nil || len(*p.current.AccountListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListByResourceGroupPager) NextPage(ctx context.Context) (AccountsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AccountsClientListPager provides operations for iterating over paged responses.
type AccountsClientListPager struct {
	client    *AccountsClient
	current   AccountsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountListResult.NextLink == nil || len(*p.current.AccountListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListPager) NextPage(ctx context.Context) (AccountsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AccountsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ComputePoliciesClientListByAccountPager provides operations for iterating over paged responses.
type ComputePoliciesClientListByAccountPager struct {
	client    *ComputePoliciesClient
	current   ComputePoliciesClientListByAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ComputePoliciesClientListByAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ComputePoliciesClientListByAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ComputePolicyListResult.NextLink == nil || len(*p.current.ComputePolicyListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ComputePoliciesClientListByAccountPager) NextPage(ctx context.Context) (ComputePoliciesClientListByAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ComputePoliciesClientListByAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ComputePoliciesClientListByAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ComputePoliciesClientListByAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ComputePoliciesClientListByAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		return ComputePoliciesClientListByAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataLakeStoreAccountsClientListByAccountPager provides operations for iterating over paged responses.
type DataLakeStoreAccountsClientListByAccountPager struct {
	client    *DataLakeStoreAccountsClient
	current   DataLakeStoreAccountsClientListByAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataLakeStoreAccountsClientListByAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataLakeStoreAccountsClientListByAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataLakeStoreAccountInformationListResult.NextLink == nil || len(*p.current.DataLakeStoreAccountInformationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataLakeStoreAccountsClientListByAccountPager) NextPage(ctx context.Context) (DataLakeStoreAccountsClientListByAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataLakeStoreAccountsClientListByAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataLakeStoreAccountsClientListByAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataLakeStoreAccountsClientListByAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataLakeStoreAccountsClientListByAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		return DataLakeStoreAccountsClientListByAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FirewallRulesClientListByAccountPager provides operations for iterating over paged responses.
type FirewallRulesClientListByAccountPager struct {
	client    *FirewallRulesClient
	current   FirewallRulesClientListByAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FirewallRulesClientListByAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FirewallRulesClientListByAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallRuleListResult.NextLink == nil || len(*p.current.FirewallRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FirewallRulesClientListByAccountPager) NextPage(ctx context.Context) (FirewallRulesClientListByAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FirewallRulesClientListByAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FirewallRulesClientListByAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FirewallRulesClientListByAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FirewallRulesClientListByAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		return FirewallRulesClientListByAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StorageAccountsClientListByAccountPager provides operations for iterating over paged responses.
type StorageAccountsClientListByAccountPager struct {
	client    *StorageAccountsClient
	current   StorageAccountsClientListByAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountsClientListByAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StorageAccountsClientListByAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageAccountInformationListResult.NextLink == nil || len(*p.current.StorageAccountInformationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StorageAccountsClientListByAccountPager) NextPage(ctx context.Context) (StorageAccountsClientListByAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StorageAccountsClientListByAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StorageAccountsClientListByAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StorageAccountsClientListByAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StorageAccountsClientListByAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		return StorageAccountsClientListByAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StorageAccountsClientListSasTokensPager provides operations for iterating over paged responses.
type StorageAccountsClientListSasTokensPager struct {
	client    *StorageAccountsClient
	current   StorageAccountsClientListSasTokensResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountsClientListSasTokensResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StorageAccountsClientListSasTokensPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SasTokenInformationListResult.NextLink == nil || len(*p.current.SasTokenInformationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StorageAccountsClientListSasTokensPager) NextPage(ctx context.Context) (StorageAccountsClientListSasTokensResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StorageAccountsClientListSasTokensResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StorageAccountsClientListSasTokensResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StorageAccountsClientListSasTokensResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StorageAccountsClientListSasTokensResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listSasTokensHandleResponse(resp)
	if err != nil {
		return StorageAccountsClientListSasTokensResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StorageAccountsClientListStorageContainersPager provides operations for iterating over paged responses.
type StorageAccountsClientListStorageContainersPager struct {
	client    *StorageAccountsClient
	current   StorageAccountsClientListStorageContainersResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountsClientListStorageContainersResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StorageAccountsClientListStorageContainersPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageContainerListResult.NextLink == nil || len(*p.current.StorageContainerListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StorageAccountsClientListStorageContainersPager) NextPage(ctx context.Context) (StorageAccountsClientListStorageContainersResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StorageAccountsClientListStorageContainersResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StorageAccountsClientListStorageContainersResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StorageAccountsClientListStorageContainersResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StorageAccountsClientListStorageContainersResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listStorageContainersHandleResponse(resp)
	if err != nil {
		return StorageAccountsClientListStorageContainersResponse{}, err
	}
	p.current = result
	return p.current, nil
}
