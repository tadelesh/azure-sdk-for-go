//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestApplicationGateways_Delete(t *testing.T) {
	// From example Delete ApplicationGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"appgw",
		&ApplicationGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_Get(t *testing.T) {
	// From example Get ApplicationGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"appgw",
		&ApplicationGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGateway.ID == nil {
		t.Fatal("ApplicationGateway.ID should not be nil!")
	}
}

func TestApplicationGateways_CreateOrUpdate(t *testing.T) {
	// From example Create Application Gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"appgw",
		ApplicationGateway{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Identity: &ManagedServiceIdentity{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{},
				},
			},
			Properties: &ApplicationGatewayPropertiesFormat{
				BackendAddressPools: []*ApplicationGatewayBackendAddressPool{
					{
						Name: to.StringPtr("appgwpool"),
						Properties: &ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*ApplicationGatewayBackendAddress{
								{
									IPAddress: to.StringPtr("10.0.1.1"),
								},
								{
									IPAddress: to.StringPtr("10.0.1.2"),
								}},
						},
					},
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
						},
						Name: to.StringPtr("appgwpool1"),
						Properties: &ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*ApplicationGatewayBackendAddress{
								{},
								{}},
						},
					}},
				BackendHTTPSettingsCollection: []*ApplicationGatewayBackendHTTPSettings{
					{
						Name: to.StringPtr("appgwbhs"),
						Properties: &ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
							CookieBasedAffinity: ApplicationGatewayCookieBasedAffinityDisabled.ToPtr(),
							Port:                to.Int32Ptr(80),
							RequestTimeout:      to.Int32Ptr(30),
							Protocol:            ApplicationGatewayProtocolHTTP.ToPtr(),
						},
					}},
				FrontendIPConfigurations: []*ApplicationGatewayFrontendIPConfiguration{
					{
						Name: to.StringPtr("appgwfip"),
						Properties: &ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/appgwpip"),
							},
						},
					}},
				FrontendPorts: []*ApplicationGatewayFrontendPort{
					{
						Name: to.StringPtr("appgwfp"),
						Properties: &ApplicationGatewayFrontendPortPropertiesFormat{
							Port: to.Int32Ptr(443),
						},
					},
					{
						Name: to.StringPtr("appgwfp80"),
						Properties: &ApplicationGatewayFrontendPortPropertiesFormat{
							Port: to.Int32Ptr(80),
						},
					}},
				GatewayIPConfigurations: []*ApplicationGatewayIPConfiguration{
					{
						Name: to.StringPtr("appgwipc"),
						Properties: &ApplicationGatewayIPConfigurationPropertiesFormat{
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/appgwsubnet"),
							},
						},
					}},
				GlobalConfiguration: &ApplicationGatewayGlobalConfiguration{
					EnableRequestBuffering:  to.BoolPtr(true),
					EnableResponseBuffering: to.BoolPtr(true),
				},
				HTTPListeners: []*ApplicationGatewayHTTPListener{
					{
						Name: to.StringPtr("appgwhl"),
						Properties: &ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
							},
							RequireServerNameIndication: to.BoolPtr(false),
							SSLCertificate: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
							},
							SSLProfile: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslProfiles/sslProfile1"),
							},
							Protocol: ApplicationGatewayProtocolHTTPS.ToPtr(),
						},
					},
					{
						Name: to.StringPtr("appgwhttplistener"),
						Properties: &ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp80"),
							},
							Protocol: ApplicationGatewayProtocolHTTP.ToPtr(),
						},
					}},
				LoadDistributionPolicies: []*ApplicationGatewayLoadDistributionPolicy{
					{
						Name: to.StringPtr("ldp1"),
						Properties: &ApplicationGatewayLoadDistributionPolicyPropertiesFormat{
							LoadDistributionAlgorithm: ApplicationGatewayLoadDistributionAlgorithmRoundRobin.ToPtr(),
							LoadDistributionTargets: []*ApplicationGatewayLoadDistributionTarget{
								{
									Name: to.StringPtr("ld11"),
									Properties: &ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										WeightPerServer: to.Int32Ptr(40),
									},
								},
								{
									Name: to.StringPtr("ld11"),
									Properties: &ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
										},
										WeightPerServer: to.Int32Ptr(60),
									},
								}},
						},
					}},
				RequestRoutingRules: []*ApplicationGatewayRequestRoutingRule{
					{
						Name: to.StringPtr("appgwrule"),
						Properties: &ApplicationGatewayRequestRoutingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							BackendHTTPSettings: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							HTTPListener: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
							},
							LoadDistributionPolicy: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							Priority: to.Int32Ptr(10),
							RewriteRuleSet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							RuleType: ApplicationGatewayRequestRoutingRuleTypeBasic.ToPtr(),
						},
					},
					{
						Name: to.StringPtr("appgwPathBasedRule"),
						Properties: &ApplicationGatewayRequestRoutingRulePropertiesFormat{
							HTTPListener: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhttplistener"),
							},
							Priority: to.Int32Ptr(20),
							RuleType: ApplicationGatewayRequestRoutingRuleTypePathBasedRouting.ToPtr(),
							URLPathMap: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1"),
							},
						},
					}},
				RewriteRuleSets: []*ApplicationGatewayRewriteRuleSet{
					{
						Name: to.StringPtr("rewriteRuleSet1"),
						Properties: &ApplicationGatewayRewriteRuleSetPropertiesFormat{
							RewriteRules: []*ApplicationGatewayRewriteRule{
								{
									Name: to.StringPtr("Set X-Forwarded-For"),
									ActionSet: &ApplicationGatewayRewriteRuleActionSet{
										RequestHeaderConfigurations: []*ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.StringPtr("X-Forwarded-For"),
												HeaderValue: to.StringPtr("{var_add_x_forwarded_for_proxy}"),
											}},
										ResponseHeaderConfigurations: []*ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.StringPtr("Strict-Transport-Security"),
												HeaderValue: to.StringPtr("max-age=31536000"),
											}},
										URLConfiguration: &ApplicationGatewayURLConfiguration{
											ModifiedPath: to.StringPtr("/abc"),
										},
									},
									Conditions: []*ApplicationGatewayRewriteRuleCondition{
										{
											IgnoreCase: to.BoolPtr(true),
											Negate:     to.BoolPtr(false),
											Pattern:    to.StringPtr("^Bearer"),
											Variable:   to.StringPtr("http_req_Authorization"),
										}},
									RuleSequence: to.Int32Ptr(102),
								}},
						},
					}},
				SKU: &ApplicationGatewaySKU{
					Name:     ApplicationGatewaySKUNameStandardV2.ToPtr(),
					Capacity: to.Int32Ptr(3),
					Tier:     ApplicationGatewayTierStandardV2.ToPtr(),
				},
				SSLCertificates: []*ApplicationGatewaySSLCertificate{
					{
						Name: to.StringPtr("sslcert"),
						Properties: &ApplicationGatewaySSLCertificatePropertiesFormat{
							Data:     to.StringPtr("****"),
							Password: to.StringPtr("****"),
						},
					},
					{
						Name: to.StringPtr("sslcert2"),
						Properties: &ApplicationGatewaySSLCertificatePropertiesFormat{
							KeyVaultSecretID: to.StringPtr("https://kv/secret"),
						},
					}},
				SSLProfiles: []*ApplicationGatewaySSLProfile{
					{
						Name: to.StringPtr("sslProfile1"),
						Properties: &ApplicationGatewaySSLProfilePropertiesFormat{
							ClientAuthConfiguration: &ApplicationGatewayClientAuthConfiguration{
								VerifyClientCertIssuerDN: to.BoolPtr(true),
							},
							SSLPolicy: &ApplicationGatewaySSLPolicy{
								CipherSuites: []*ApplicationGatewaySSLCipherSuite{
									ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA256.ToPtr()},
								MinProtocolVersion: ApplicationGatewaySSLProtocolTLSv11.ToPtr(),
								PolicyType:         ApplicationGatewaySSLPolicyTypeCustom.ToPtr(),
							},
							TrustedClientCertificates: []*SubResource{
								{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/trustedClientCertificates/clientcert"),
								}},
						},
					}},
				TrustedClientCertificates: []*ApplicationGatewayTrustedClientCertificate{
					{
						Name: to.StringPtr("clientcert"),
						Properties: &ApplicationGatewayTrustedClientCertificatePropertiesFormat{
							Data: to.StringPtr("****"),
						},
					}},
				TrustedRootCertificates: []*ApplicationGatewayTrustedRootCertificate{
					{
						Name: to.StringPtr("rootcert"),
						Properties: &ApplicationGatewayTrustedRootCertificatePropertiesFormat{
							Data: to.StringPtr("****"),
						},
					},
					{
						Name: to.StringPtr("rootcert1"),
						Properties: &ApplicationGatewayTrustedRootCertificatePropertiesFormat{
							KeyVaultSecretID: to.StringPtr("https://kv/secret"),
						},
					}},
				URLPathMaps: []*ApplicationGatewayURLPathMap{
					{
						Name: to.StringPtr("pathMap1"),
						Properties: &ApplicationGatewayURLPathMapPropertiesFormat{
							DefaultBackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							DefaultBackendHTTPSettings: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							DefaultLoadDistributionPolicy: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							DefaultRewriteRuleSet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							PathRules: []*ApplicationGatewayPathRule{
								{
									Name: to.StringPtr("apiPaths"),
									Properties: &ApplicationGatewayPathRulePropertiesFormat{
										BackendAddressPool: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										BackendHTTPSettings: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
										},
										LoadDistributionPolicy: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
										},
										Paths: []*string{
											to.StringPtr("/api"),
											to.StringPtr("/v1/api")},
										RewriteRuleSet: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
										},
									},
								}},
						},
					}},
			},
		},
		&ApplicationGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGateway.ID == nil {
		t.Fatal("ApplicationGateway.ID should not be nil!")
	}
}

func TestApplicationGateways_UpdateTags(t *testing.T) {
	// From example Update Application Gateway tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"AppGw",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ApplicationGatewaysUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGateway.ID == nil {
		t.Fatal("ApplicationGateway.ID should not be nil!")
	}
}

func TestApplicationGateways_List(t *testing.T) {
	// From example Lists all application gateways in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	pager := client.List("rg1",
		&ApplicationGatewaysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationGateway.ID should not be nil!")
			}
		}
	}
}

func TestApplicationGateways_ListAll(t *testing.T) {
	// From example Lists all application gateways in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	pager := client.ListAll(&ApplicationGatewaysListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationGateway.ID should not be nil!")
			}
		}
	}
}

func TestApplicationGateways_Start(t *testing.T) {
	// From example Start Application Gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	poller, err := client.BeginStart(ctx,
		"rg1",
		"appgw",
		&ApplicationGatewaysBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_Stop(t *testing.T) {
	// From example Stop Application Gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	poller, err := client.BeginStop(ctx,
		"rg1",
		"appgw",
		&ApplicationGatewaysBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_BackendHealth(t *testing.T) {
	// From example Get Backend Health
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	poller, err := client.BeginBackendHealth(ctx,
		"appgw",
		"appgw",
		&ApplicationGatewaysBeginBackendHealthOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_BackendHealthOnDemand(t *testing.T) {
	// From example Test Backend Health
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	poller, err := client.BeginBackendHealthOnDemand(ctx,
		"rg1",
		"appgw",
		ApplicationGatewayOnDemandProbe{
			Path: to.StringPtr("/"),
			BackendAddressPool: &SubResource{
				ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendaddressPools/MFAnalyticsPool"),
			},
			BackendHTTPSettings: &SubResource{
				ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/MFPoolSettings"),
			},
			PickHostNameFromBackendHTTPSettings: to.BoolPtr(true),
			Timeout:                             to.Int32Ptr(30),
			Protocol:                            ApplicationGatewayProtocolHTTP.ToPtr(),
		},
		&ApplicationGatewaysBeginBackendHealthOnDemandOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_ListAvailableServerVariables(t *testing.T) {
	// From example Get Available Server Variables
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"72f988bf-86f1-41af-91ab-2d7cd0dddd4")
	_, err := client.ListAvailableServerVariables(ctx,
		&ApplicationGatewaysListAvailableServerVariablesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_ListAvailableRequestHeaders(t *testing.T) {
	// From example Get Available Request Headers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"72f988bf-86f1-41af-91ab-2d7cd0dddd4")
	_, err := client.ListAvailableRequestHeaders(ctx,
		&ApplicationGatewaysListAvailableRequestHeadersOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_ListAvailableResponseHeaders(t *testing.T) {
	// From example Get Available Response Headers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"72f988bf-86f1-41af-91ab-2d7cd0dddd4")
	_, err := client.ListAvailableResponseHeaders(ctx,
		&ApplicationGatewaysListAvailableResponseHeadersOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_ListAvailableWafRuleSets(t *testing.T) {
	// From example Get Available Waf Rule Sets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	_, err := client.ListAvailableWafRuleSets(ctx,
		&ApplicationGatewaysListAvailableWafRuleSetsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGateways_ListAvailableSslOptions(t *testing.T) {
	// From example Get Available Ssl Options
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	res, err := client.ListAvailableSSLOptions(ctx,
		&ApplicationGatewaysListAvailableSSLOptionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGatewayAvailableSSLOptions.ID == nil {
		t.Fatal("ApplicationGatewayAvailableSSLOptions.ID should not be nil!")
	}
}

func TestApplicationGateways_ListAvailableSslPredefinedPolicies(t *testing.T) {
	// From example Get Available Ssl Predefined Policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	pager := client.ListAvailableSSLPredefinedPolicies(&ApplicationGatewaysListAvailableSSLPredefinedPoliciesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationGatewaySSLPredefinedPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationGatewaySSLPredefinedPolicy.ID should not be nil!")
			}
		}
	}
}

func TestApplicationGateways_GetSslPredefinedPolicy(t *testing.T) {
	// From example Get Available Ssl Predefined Policy by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewaysClient(con,
		"subid")
	res, err := client.GetSSLPredefinedPolicy(ctx,
		"AppGwSslPolicy20150501",
		&ApplicationGatewaysGetSSLPredefinedPolicyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGatewaySSLPredefinedPolicy.ID == nil {
		t.Fatal("ApplicationGatewaySSLPredefinedPolicy.ID should not be nil!")
	}
}

func TestApplicationGatewayPrivateLinkResources_List(t *testing.T) {
	// From example Lists all private link resources on application gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewayPrivateLinkResourcesClient(con,
		"subid")
	pager := client.List("rg1",
		"appgw",
		&ApplicationGatewayPrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationGatewayPrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationGatewayPrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestApplicationGatewayPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Delete Application Gateway Private Endpoint Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewayPrivateEndpointConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"appgw",
		"connection1",
		&ApplicationGatewayPrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationGatewayPrivateEndpointConnections_Update(t *testing.T) {
	// From example Update Application Gateway Private Endpoint Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewayPrivateEndpointConnectionsClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"appgw",
		"connection1",
		ApplicationGatewayPrivateEndpointConnection{
			Name: to.StringPtr("connection1"),
			Properties: &ApplicationGatewayPrivateEndpointConnectionProperties{
				PrivateEndpoint: &PrivateEndpoint{
					Resource: Resource{
						ID: to.StringPtr("/subscriptions/subId2/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
					},
				},
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("approved it for some reason."),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&ApplicationGatewayPrivateEndpointConnectionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGatewayPrivateEndpointConnection.ID == nil {
		t.Fatal("ApplicationGatewayPrivateEndpointConnection.ID should not be nil!")
	}
}

func TestApplicationGatewayPrivateEndpointConnections_Get(t *testing.T) {
	// From example Get Application Gateway Private Endpoint Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewayPrivateEndpointConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"appgw",
		"connection1",
		&ApplicationGatewayPrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationGatewayPrivateEndpointConnection.ID == nil {
		t.Fatal("ApplicationGatewayPrivateEndpointConnection.ID should not be nil!")
	}
}

func TestApplicationGatewayPrivateEndpointConnections_List(t *testing.T) {
	// From example Lists all private endpoint connections on application gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationGatewayPrivateEndpointConnectionsClient(con,
		"subid")
	pager := client.List("rg1",
		"appgw",
		&ApplicationGatewayPrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationGatewayPrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationGatewayPrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestApplicationSecurityGroups_Delete(t *testing.T) {
	// From example Delete application security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationSecurityGroupsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-asg",
		&ApplicationSecurityGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationSecurityGroups_Get(t *testing.T) {
	// From example Get application security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationSecurityGroupsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-asg",
		&ApplicationSecurityGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationSecurityGroup.ID == nil {
		t.Fatal("ApplicationSecurityGroup.ID should not be nil!")
	}
}

func TestApplicationSecurityGroups_CreateOrUpdate(t *testing.T) {
	// From example Create application security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationSecurityGroupsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-asg",
		ApplicationSecurityGroup{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ApplicationSecurityGroupPropertiesFormat{},
		},
		&ApplicationSecurityGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationSecurityGroup.ID == nil {
		t.Fatal("ApplicationSecurityGroup.ID should not be nil!")
	}
}

func TestApplicationSecurityGroups_UpdateTags(t *testing.T) {
	// From example Update application security group tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationSecurityGroupsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-asg",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ApplicationSecurityGroupsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationSecurityGroup.ID == nil {
		t.Fatal("ApplicationSecurityGroup.ID should not be nil!")
	}
}

func TestApplicationSecurityGroups_ListAll(t *testing.T) {
	// From example List all application security groups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationSecurityGroupsClient(con,
		"subid")
	pager := client.ListAll(&ApplicationSecurityGroupsListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationSecurityGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationSecurityGroup.ID should not be nil!")
			}
		}
	}
}

func TestApplicationSecurityGroups_List(t *testing.T) {
	// From example List load balancers in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationSecurityGroupsClient(con,
		"subid")
	pager := client.List("rg1",
		&ApplicationSecurityGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationSecurityGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationSecurityGroup.ID should not be nil!")
			}
		}
	}
}

func TestAvailableDelegations_List(t *testing.T) {
	// From example Get available delegations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableDelegationsClient(con,
		"subId")
	pager := client.List("westcentralus",
		&AvailableDelegationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AvailableDelegation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AvailableDelegation.ID should not be nil!")
			}
		}
	}
}

func TestAvailableResourceGroupDelegations_List(t *testing.T) {
	// From example Get available delegations in the resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableResourceGroupDelegationsClient(con,
		"subId")
	pager := client.List("westcentralus",
		"rg1",
		&AvailableResourceGroupDelegationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AvailableDelegation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AvailableDelegation.ID should not be nil!")
			}
		}
	}
}

func TestAvailableServiceAliases_List(t *testing.T) {
	// From example Get available service aliases
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableServiceAliasesClient(con,
		"subId")
	pager := client.List("westcentralus",
		&AvailableServiceAliasesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AvailableServiceAlias.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AvailableServiceAlias.ID should not be nil!")
			}
		}
	}
}

func TestAvailableServiceAliases_ListByResourceGroup(t *testing.T) {
	// From example Get available service aliases in the resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableServiceAliasesClient(con,
		"subId")
	pager := client.ListByResourceGroup("rg1",
		"westcentralus",
		&AvailableServiceAliasesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AvailableServiceAlias.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AvailableServiceAlias.ID should not be nil!")
			}
		}
	}
}

func TestAzureFirewalls_Delete(t *testing.T) {
	// From example Delete Azure Firewall
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"azurefirewall",
		&AzureFirewallsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAzureFirewalls_Get(t *testing.T) {
	// From example Get Azure Firewall
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"azurefirewall",
		&AzureFirewallsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Get Azure Firewall With Additional Properties
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		&AzureFirewallsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Get Azure Firewall With IpGroups
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		&AzureFirewallsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Get Azure Firewall With Zones
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		&AzureFirewallsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Get Azure Firewall With management subnet
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		&AzureFirewallsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}
}

func TestAzureFirewalls_CreateOrUpdate(t *testing.T) {
	// From example Create Azure Firewall
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		AzureFirewall{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*AzureFirewallApplicationRuleCollection{
					{
						Name: to.StringPtr("apprulecoll"),
						Properties: &AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(110),
							Rules: []*AzureFirewallApplicationRule{
								{
									Name:        to.StringPtr("rule1"),
									Description: to.StringPtr("Deny inbound rule"),
									Protocols: []*AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Int32Ptr(443),
											ProtocolType: AzureFirewallApplicationRuleProtocolTypeHTTPS.ToPtr(),
										}},
									SourceAddresses: []*string{
										to.StringPtr("216.58.216.164"),
										to.StringPtr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.StringPtr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*AzureFirewallIPConfiguration{
					{
						Name: to.StringPtr("azureFirewallIpConfiguration"),
						Properties: &AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*AzureFirewallNatRuleCollection{
					{
						Name: to.StringPtr("natrulecoll"),
						Properties: &AzureFirewallNatRuleCollectionProperties{
							Action: &AzureFirewallNatRCAction{
								Type: AzureFirewallNatRCActionTypeDnat.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNatRule{
								{
									Name:        to.StringPtr("DNAT-HTTPS-traffic"),
									Description: to.StringPtr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedAddress: to.StringPtr("1.2.3.5"),
									TranslatedPort:    to.StringPtr("8443"),
								},
								{
									Name:        to.StringPtr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.StringPtr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("80")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedFqdn: to.StringPtr("internalhttpserver"),
									TranslatedPort: to.StringPtr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*AzureFirewallNetworkRuleCollection{
					{
						Name: to.StringPtr("netrulecoll"),
						Properties: &AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNetworkRule{
								{
									Name:        to.StringPtr("L4-traffic"),
									Description: to.StringPtr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.StringPtr("*")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("192.168.1.1-192.168.1.12"),
										to.StringPtr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.StringPtr("L4-traffic-with-FQDN"),
									Description: to.StringPtr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.StringPtr("www.amazon.com")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &AzureFirewallSKU{
					Name: AzureFirewallSKUNameAZFWVnet.ToPtr(),
					Tier: AzureFirewallSKUTierStandard.ToPtr(),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
			},
			Zones: []*string{},
		},
		&AzureFirewallsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Create Azure Firewall With Additional Properties
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		AzureFirewall{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{
					"key1": to.StringPtr("value1"),
					"key2": to.StringPtr("value2"),
				},
				ApplicationRuleCollections: []*AzureFirewallApplicationRuleCollection{
					{
						Name: to.StringPtr("apprulecoll"),
						Properties: &AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(110),
							Rules: []*AzureFirewallApplicationRule{
								{
									Name:        to.StringPtr("rule1"),
									Description: to.StringPtr("Deny inbound rule"),
									Protocols: []*AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Int32Ptr(443),
											ProtocolType: AzureFirewallApplicationRuleProtocolTypeHTTPS.ToPtr(),
										}},
									SourceAddresses: []*string{
										to.StringPtr("216.58.216.164"),
										to.StringPtr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.StringPtr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*AzureFirewallIPConfiguration{
					{
						Name: to.StringPtr("azureFirewallIpConfiguration"),
						Properties: &AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*AzureFirewallIPGroups{},
				NatRuleCollections: []*AzureFirewallNatRuleCollection{
					{
						Name: to.StringPtr("natrulecoll"),
						Properties: &AzureFirewallNatRuleCollectionProperties{
							Action: &AzureFirewallNatRCAction{
								Type: AzureFirewallNatRCActionTypeDnat.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNatRule{
								{
									Name:        to.StringPtr("DNAT-HTTPS-traffic"),
									Description: to.StringPtr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedAddress: to.StringPtr("1.2.3.5"),
									TranslatedPort:    to.StringPtr("8443"),
								},
								{
									Name:        to.StringPtr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.StringPtr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("80")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedFqdn: to.StringPtr("internalhttpserver"),
									TranslatedPort: to.StringPtr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*AzureFirewallNetworkRuleCollection{
					{
						Name: to.StringPtr("netrulecoll"),
						Properties: &AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNetworkRule{
								{
									Name:        to.StringPtr("L4-traffic"),
									Description: to.StringPtr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.StringPtr("*")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("192.168.1.1-192.168.1.12"),
										to.StringPtr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.StringPtr("L4-traffic-with-FQDN"),
									Description: to.StringPtr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.StringPtr("www.amazon.com")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &AzureFirewallSKU{
					Name: AzureFirewallSKUNameAZFWVnet.ToPtr(),
					Tier: AzureFirewallSKUTierStandard.ToPtr(),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
			},
			Zones: []*string{},
		},
		&AzureFirewallsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Create Azure Firewall With IpGroups
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		AzureFirewall{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*AzureFirewallApplicationRuleCollection{
					{
						Name: to.StringPtr("apprulecoll"),
						Properties: &AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(110),
							Rules: []*AzureFirewallApplicationRule{
								{
									Name:        to.StringPtr("rule1"),
									Description: to.StringPtr("Deny inbound rule"),
									Protocols: []*AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Int32Ptr(443),
											ProtocolType: AzureFirewallApplicationRuleProtocolTypeHTTPS.ToPtr(),
										}},
									SourceAddresses: []*string{
										to.StringPtr("216.58.216.164"),
										to.StringPtr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.StringPtr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*AzureFirewallIPConfiguration{
					{
						Name: to.StringPtr("azureFirewallIpConfiguration"),
						Properties: &AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*AzureFirewallNatRuleCollection{
					{
						Name: to.StringPtr("natrulecoll"),
						Properties: &AzureFirewallNatRuleCollectionProperties{
							Action: &AzureFirewallNatRCAction{
								Type: AzureFirewallNatRCActionTypeDnat.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNatRule{
								{
									Name:        to.StringPtr("DNAT-HTTPS-traffic"),
									Description: to.StringPtr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedAddress: to.StringPtr("1.2.3.5"),
									TranslatedPort:    to.StringPtr("8443"),
								},
								{
									Name:        to.StringPtr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.StringPtr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("80")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedFqdn: to.StringPtr("internalhttpserver"),
									TranslatedPort: to.StringPtr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*AzureFirewallNetworkRuleCollection{
					{
						Name: to.StringPtr("netrulecoll"),
						Properties: &AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNetworkRule{
								{
									Name:        to.StringPtr("L4-traffic"),
									Description: to.StringPtr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.StringPtr("*")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("192.168.1.1-192.168.1.12"),
										to.StringPtr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.StringPtr("L4-traffic-with-FQDN"),
									Description: to.StringPtr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.StringPtr("www.amazon.com")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &AzureFirewallSKU{
					Name: AzureFirewallSKUNameAZFWVnet.ToPtr(),
					Tier: AzureFirewallSKUTierStandard.ToPtr(),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
			},
			Zones: []*string{},
		},
		&AzureFirewallsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Create Azure Firewall With Zones
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		AzureFirewall{
			Resource: Resource{
				Location: to.StringPtr("West US 2"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*AzureFirewallApplicationRuleCollection{
					{
						Name: to.StringPtr("apprulecoll"),
						Properties: &AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(110),
							Rules: []*AzureFirewallApplicationRule{
								{
									Name:        to.StringPtr("rule1"),
									Description: to.StringPtr("Deny inbound rule"),
									Protocols: []*AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Int32Ptr(443),
											ProtocolType: AzureFirewallApplicationRuleProtocolTypeHTTPS.ToPtr(),
										}},
									SourceAddresses: []*string{
										to.StringPtr("216.58.216.164"),
										to.StringPtr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.StringPtr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*AzureFirewallIPConfiguration{
					{
						Name: to.StringPtr("azureFirewallIpConfiguration"),
						Properties: &AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*AzureFirewallNatRuleCollection{
					{
						Name: to.StringPtr("natrulecoll"),
						Properties: &AzureFirewallNatRuleCollectionProperties{
							Action: &AzureFirewallNatRCAction{
								Type: AzureFirewallNatRCActionTypeDnat.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNatRule{
								{
									Name:        to.StringPtr("DNAT-HTTPS-traffic"),
									Description: to.StringPtr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedAddress: to.StringPtr("1.2.3.5"),
									TranslatedPort:    to.StringPtr("8443"),
								},
								{
									Name:        to.StringPtr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.StringPtr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("80")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedFqdn: to.StringPtr("internalhttpserver"),
									TranslatedPort: to.StringPtr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*AzureFirewallNetworkRuleCollection{
					{
						Name: to.StringPtr("netrulecoll"),
						Properties: &AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNetworkRule{
								{
									Name:        to.StringPtr("L4-traffic"),
									Description: to.StringPtr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.StringPtr("*")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("192.168.1.1-192.168.1.12"),
										to.StringPtr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.StringPtr("L4-traffic-with-FQDN"),
									Description: to.StringPtr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.StringPtr("www.amazon.com")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &AzureFirewallSKU{
					Name: AzureFirewallSKUNameAZFWVnet.ToPtr(),
					Tier: AzureFirewallSKUTierStandard.ToPtr(),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("2"),
				to.StringPtr("3")},
		},
		&AzureFirewallsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Create Azure Firewall With management subnet
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		AzureFirewall{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*AzureFirewallApplicationRuleCollection{
					{
						Name: to.StringPtr("apprulecoll"),
						Properties: &AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(110),
							Rules: []*AzureFirewallApplicationRule{
								{
									Name:        to.StringPtr("rule1"),
									Description: to.StringPtr("Deny inbound rule"),
									Protocols: []*AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Int32Ptr(443),
											ProtocolType: AzureFirewallApplicationRuleProtocolTypeHTTPS.ToPtr(),
										}},
									SourceAddresses: []*string{
										to.StringPtr("216.58.216.164"),
										to.StringPtr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.StringPtr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*AzureFirewallIPConfiguration{
					{
						Name: to.StringPtr("azureFirewallIpConfiguration"),
						Properties: &AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				ManagementIPConfiguration: &AzureFirewallIPConfiguration{
					Name: to.StringPtr("azureFirewallMgmtIpConfiguration"),
					Properties: &AzureFirewallIPConfigurationPropertiesFormat{
						PublicIPAddress: &SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
						},
						Subnet: &SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
						},
					},
				},
				NatRuleCollections: []*AzureFirewallNatRuleCollection{
					{
						Name: to.StringPtr("natrulecoll"),
						Properties: &AzureFirewallNatRuleCollectionProperties{
							Action: &AzureFirewallNatRCAction{
								Type: AzureFirewallNatRCActionTypeDnat.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNatRule{
								{
									Name:        to.StringPtr("DNAT-HTTPS-traffic"),
									Description: to.StringPtr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedAddress: to.StringPtr("1.2.3.5"),
									TranslatedPort:    to.StringPtr("8443"),
								},
								{
									Name:        to.StringPtr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.StringPtr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.StringPtr("1.2.3.4")},
									DestinationPorts: []*string{
										to.StringPtr("80")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("*")},
									TranslatedFqdn: to.StringPtr("internalhttpserver"),
									TranslatedPort: to.StringPtr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*AzureFirewallNetworkRuleCollection{
					{
						Name: to.StringPtr("netrulecoll"),
						Properties: &AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &AzureFirewallRCAction{
								Type: AzureFirewallRCActionTypeDeny.ToPtr(),
							},
							Priority: to.Int32Ptr(112),
							Rules: []*AzureFirewallNetworkRule{
								{
									Name:        to.StringPtr("L4-traffic"),
									Description: to.StringPtr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.StringPtr("*")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("192.168.1.1-192.168.1.12"),
										to.StringPtr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.StringPtr("L4-traffic-with-FQDN"),
									Description: to.StringPtr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.StringPtr("www.amazon.com")},
									DestinationPorts: []*string{
										to.StringPtr("443-444"),
										to.StringPtr("8443")},
									Protocols: []*AzureFirewallNetworkRuleProtocol{
										AzureFirewallNetworkRuleProtocolTCP.ToPtr()},
									SourceAddresses: []*string{
										to.StringPtr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &AzureFirewallSKU{
					Name: AzureFirewallSKUNameAZFWVnet.ToPtr(),
					Tier: AzureFirewallSKUTierStandard.ToPtr(),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
			},
			Zones: []*string{},
		},
		&AzureFirewallsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}

	// From example Create Azure Firewall in virtual Hub
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		AzureFirewall{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &AzureFirewallPropertiesFormat{
				FirewallPolicy: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"),
				},
				HubIPAddresses: &HubIPAddresses{
					PublicIPs: &HubPublicIPAddresses{
						Addresses: []*AzureFirewallPublicIPAddress{},
						Count:     to.Int32Ptr(1),
					},
				},
				SKU: &AzureFirewallSKU{
					Name: AzureFirewallSKUNameAZFWHub.ToPtr(),
					Tier: AzureFirewallSKUTierStandard.ToPtr(),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
				VirtualHub: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
			Zones: []*string{},
		},
		&AzureFirewallsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}
}

func TestAzureFirewalls_UpdateTags(t *testing.T) {
	// From example Update Azure Firewall Tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallsClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"azfwtest",
		"fw1",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&AzureFirewallsBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureFirewall.ID == nil {
		t.Fatal("AzureFirewall.ID should not be nil!")
	}
}

func TestAzureFirewalls_List(t *testing.T) {
	// From example List all Azure Firewalls for a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallsClient(con,
		"subid")
	pager := client.List("rg1",
		&AzureFirewallsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureFirewall.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureFirewall.ID should not be nil!")
			}
		}
	}
}

func TestAzureFirewalls_ListAll(t *testing.T) {
	// From example List all Azure Firewalls for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallsClient(con,
		"subid")
	pager := client.ListAll(&AzureFirewallsListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureFirewall.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureFirewall.ID should not be nil!")
			}
		}
	}
}

func TestAzureFirewallFqdnTags_ListAll(t *testing.T) {
	// From example List all Azure Firewall FQDN Tags for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureFirewallFqdnTagsClient(con,
		"subid")
	pager := client.ListAll(&AzureFirewallFqdnTagsListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureFirewallFqdnTag.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureFirewallFqdnTag.ID should not be nil!")
			}
		}
	}
}

func TestWebCategories_Get(t *testing.T) {
	// From example Get Azure Web Category by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebCategoriesClient(con,
		"4de8428a-4a92-4cea-90ff-b47128b8cab8")
	res, err := client.Get(ctx,
		"Arts",
		&WebCategoriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureWebCategory.ID == nil {
		t.Fatal("AzureWebCategory.ID should not be nil!")
	}
}

func TestWebCategories_ListBySubscription(t *testing.T) {
	// From example List all Azure Web Categories for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebCategoriesClient(con,
		"4de8428a-4a92-4cea-90ff-b47128b8cab8")
	pager := client.ListBySubscription(&WebCategoriesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureWebCategory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureWebCategory.ID should not be nil!")
			}
		}
	}
}

func TestBastionHosts_Delete(t *testing.T) {
	// From example Delete Bastion Host
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBastionHostsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"bastionhosttenant",
		&BastionHostsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBastionHosts_Get(t *testing.T) {
	// From example Get Bastion Host
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBastionHostsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"bastionhosttenant'",
		&BastionHostsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BastionHost.ID == nil {
		t.Fatal("BastionHost.ID should not be nil!")
	}
}

func TestBastionHosts_CreateOrUpdate(t *testing.T) {
	// From example Create Bastion Host
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBastionHostsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"bastionhosttenant",
		BastionHost{
			Properties: &BastionHostPropertiesFormat{
				IPConfigurations: []*BastionHostIPConfiguration{
					{
						Name: to.StringPtr("bastionHostIpConfiguration"),
						Properties: &BastionHostIPConfigurationPropertiesFormat{
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
							},
						},
					}},
			},
		},
		&BastionHostsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BastionHost.ID == nil {
		t.Fatal("BastionHost.ID should not be nil!")
	}
}

func TestBastionHosts_UpdateTags(t *testing.T) {
	// From example Patch Bastion Host
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBastionHostsClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"bastionhosttenant",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&BastionHostsBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BastionHost.ID == nil {
		t.Fatal("BastionHost.ID should not be nil!")
	}
}

func TestBastionHosts_List(t *testing.T) {
	// From example List all Bastion Hosts for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBastionHostsClient(con,
		"subid")
	pager := client.List(&BastionHostsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BastionHost.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BastionHost.ID should not be nil!")
			}
		}
	}
}

func TestBastionHosts_ListByResourceGroup(t *testing.T) {
	// From example List all Bastion Hosts for a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBastionHostsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&BastionHostsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BastionHost.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BastionHost.ID should not be nil!")
			}
		}
	}
}

func Test_PutBastionShareableLink(t *testing.T) {
	// From example Create Bastion Shareable Links for the request VMs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	poller, err := client.BeginPutBastionShareableLink(ctx,
		"rg1",
		"bastionhosttenant",
		BastionShareableLinkListRequest{
			VMs: []*BastionShareableLink{
				{
					VM: &VM{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
						},
					},
				},
				{
					VM: &VM{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
						},
					},
				}},
		},
		&NetworkManagementClientBeginPutBastionShareableLinkOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func Test_DeleteBastionShareableLink(t *testing.T) {
	// From example Delete Bastion Shareable Links for the request VMs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	poller, err := client.BeginDeleteBastionShareableLink(ctx,
		"rg1",
		"bastionhosttenant",
		BastionShareableLinkListRequest{
			VMs: []*BastionShareableLink{
				{
					VM: &VM{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
						},
					},
				},
				{
					VM: &VM{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
						},
					},
				}},
		},
		&NetworkManagementClientBeginDeleteBastionShareableLinkOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func Test_GetBastionShareableLink(t *testing.T) {
	// From example Returns the Bastion Shareable Links for the request VMs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	pager := client.GetBastionShareableLink("rg1",
		"bastionhosttenant",
		BastionShareableLinkListRequest{
			VMs: []*BastionShareableLink{
				{
					VM: &VM{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
						},
					},
				},
				{
					VM: &VM{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
						},
					},
				}},
		},
		&NetworkManagementClientGetBastionShareableLinkOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func Test_GetActiveSessions(t *testing.T) {
	// From example Returns a list of currently active sessions on the Bastion
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	poller, err := client.BeginGetActiveSessions(ctx,
		"rg1",
		"bastionhosttenant",
		&NetworkManagementClientBeginGetActiveSessionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func Test_DisconnectActiveSessions(t *testing.T) {
	// From example Deletes the specified active session
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	pager := client.DisconnectActiveSessions("rg1",
		"bastionhosttenant",
		SessionIDs{},
		&NetworkManagementClientDisconnectActiveSessionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func Test_CheckDnsNameAvailability(t *testing.T) {
	// From example Check Dns Name Availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	_, err := client.CheckDNSNameAvailability(ctx,
		"westus",
		"testdns",
		&NetworkManagementClientCheckDNSNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_SupportedSecurityProviders(t *testing.T) {
	// From example supportedSecurityProviders
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	_, err := client.SupportedSecurityProviders(ctx,
		"rg1",
		"wan1",
		&NetworkManagementClientSupportedSecurityProvidersOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_Generatevirtualwanvpnserverconfigurationvpnprofile(t *testing.T) {
	// From example GenerateVirtualWanVpnServerConfigurationVpnProfile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkManagementClientClient(con,
		"subid")
	poller, err := client.BeginGeneratevirtualwanvpnserverconfigurationvpnprofile(ctx,
		"rg1",
		"wan1",
		VirtualWanVPNProfileParameters{
			AuthenticationMethod:             AuthenticationMethodEAPTLS.ToPtr(),
			VPNServerConfigurationResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnconfig1"),
		},
		&NetworkManagementClientBeginGeneratevirtualwanvpnserverconfigurationvpnprofileOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkInterfaces_ListCloudServiceRoleInstanceNetworkInterfaces(t *testing.T) {
	// From example List cloud service role instance network interfaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.ListCloudServiceRoleInstanceNetworkInterfaces("rg1",
		"cs1",
		"TestVMRole_IN_0",
		&NetworkInterfacesListCloudServiceRoleInstanceNetworkInterfacesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_ListCloudServiceNetworkInterfaces(t *testing.T) {
	// From example List cloud service network interfaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.ListCloudServiceNetworkInterfaces("rg1",
		"cs1",
		&NetworkInterfacesListCloudServiceNetworkInterfacesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_GetCloudServiceNetworkInterface(t *testing.T) {
	// From example Get cloud service network interface
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	res, err := client.GetCloudServiceNetworkInterface(ctx,
		"rg1",
		"cs1",
		"TestVMRole_IN_0",
		"nic1",
		&NetworkInterfacesGetCloudServiceNetworkInterfaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterface.ID == nil {
		t.Fatal("NetworkInterface.ID should not be nil!")
	}
}

func TestNetworkInterfaces_Delete(t *testing.T) {
	// From example Delete network interface
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-nic",
		&NetworkInterfacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkInterfaces_Get(t *testing.T) {
	// From example Get network interface
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-nic",
		&NetworkInterfacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterface.ID == nil {
		t.Fatal("NetworkInterface.ID should not be nil!")
	}
}

func TestNetworkInterfaces_CreateOrUpdate(t *testing.T) {
	// From example Create network interface
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-nic",
		NetworkInterface{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &NetworkInterfacePropertiesFormat{
				EnableAcceleratedNetworking: to.BoolPtr(true),
				IPConfigurations: []*NetworkInterfaceIPConfiguration{
					{
						Name: to.StringPtr("ipconfig1"),
						Properties: &NetworkInterfaceIPConfigurationPropertiesFormat{
							PublicIPAddress: &PublicIPAddress{
								Resource: Resource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
								},
							},
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
								},
							},
						},
					}},
			},
		},
		&NetworkInterfacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterface.ID == nil {
		t.Fatal("NetworkInterface.ID should not be nil!")
	}

	// From example Create network interface with Gateway Load Balancer Consumer configured
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-nic",
		NetworkInterface{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &NetworkInterfacePropertiesFormat{
				EnableAcceleratedNetworking: to.BoolPtr(true),
				IPConfigurations: []*NetworkInterfaceIPConfiguration{
					{
						Name: to.StringPtr("ipconfig1"),
						Properties: &NetworkInterfaceIPConfigurationPropertiesFormat{
							GatewayLoadBalancer: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
							},
							PublicIPAddress: &PublicIPAddress{
								Resource: Resource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
								},
							},
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
								},
							},
						},
					}},
			},
		},
		&NetworkInterfacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterface.ID == nil {
		t.Fatal("NetworkInterface.ID should not be nil!")
	}
}

func TestNetworkInterfaces_UpdateTags(t *testing.T) {
	// From example Update network interface tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-nic",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&NetworkInterfacesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterface.ID == nil {
		t.Fatal("NetworkInterface.ID should not be nil!")
	}
}

func TestNetworkInterfaces_ListAll(t *testing.T) {
	// From example List all network interfaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.ListAll(&NetworkInterfacesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_List(t *testing.T) {
	// From example List network interfaces in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.List("rg1",
		&NetworkInterfacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_GetEffectiveRouteTable(t *testing.T) {
	// From example Show network interface effective route tables
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	poller, err := client.BeginGetEffectiveRouteTable(ctx,
		"rg1",
		"nic1",
		&NetworkInterfacesBeginGetEffectiveRouteTableOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkInterfaces_ListEffectiveNetworkSecurityGroups(t *testing.T) {
	// From example List network interface effective network security groups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	poller, err := client.BeginListEffectiveNetworkSecurityGroups(ctx,
		"rg1",
		"nic1",
		&NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkInterfaces_ListVirtualMachineScaleSetVMNetworkInterfaces(t *testing.T) {
	// From example List virtual machine scale set vm network interfaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.ListVirtualMachineScaleSetVMNetworkInterfaces("rg1",
		"vmss1",
		"1",
		&NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_ListVirtualMachineScaleSetNetworkInterfaces(t *testing.T) {
	// From example List virtual machine scale set network interfaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.ListVirtualMachineScaleSetNetworkInterfaces("rg1",
		"vmss1",
		&NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_GetVirtualMachineScaleSetNetworkInterface(t *testing.T) {
	// From example Get virtual machine scale set network interface
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	res, err := client.GetVirtualMachineScaleSetNetworkInterface(ctx,
		"rg1",
		"vmss1",
		"1",
		"nic1",
		&NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterface.ID == nil {
		t.Fatal("NetworkInterface.ID should not be nil!")
	}
}

func TestNetworkInterfaces_ListVirtualMachineScaleSetIpConfigurations(t *testing.T) {
	// From example List virtual machine scale set network interface ip configurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	pager := client.ListVirtualMachineScaleSetIPConfigurations("rg1",
		"vmss1",
		"2",
		"nic1",
		&NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterfaceIPConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterfaceIPConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaces_GetVirtualMachineScaleSetIpConfiguration(t *testing.T) {
	// From example Get virtual machine scale set network interface
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfacesClient(con,
		"subid")
	res, err := client.GetVirtualMachineScaleSetIPConfiguration(ctx,
		"rg1",
		"vmss1",
		"2",
		"nic1",
		"ip1",
		&NetworkInterfacesGetVirtualMachineScaleSetIPConfigurationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterfaceIPConfiguration.ID == nil {
		t.Fatal("NetworkInterfaceIPConfiguration.ID should not be nil!")
	}
}

func TestPublicIPAddresses_ListCloudServicePublicIPAddresses(t *testing.T) {
	// From example ListVMSSPublicIP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	pager := client.ListCloudServicePublicIPAddresses("cs-tester",
		"cs1",
		&PublicIPAddressesListCloudServicePublicIPAddressesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPAddress.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPAddress.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPAddresses_ListCloudServiceRoleInstancePublicIPAddresses(t *testing.T) {
	// From example ListVMSSVMPublicIP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	pager := client.ListCloudServiceRoleInstancePublicIPAddresses("cs-tester",
		"cs1",
		"Test_VM_0",
		"nic1",
		"ip1",
		&PublicIPAddressesListCloudServiceRoleInstancePublicIPAddressesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPAddress.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPAddress.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPAddresses_GetCloudServicePublicIPAddress(t *testing.T) {
	// From example GetVMSSPublicIP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	res, err := client.GetCloudServicePublicIPAddress(ctx,
		"cs-tester",
		"cs1",
		"Test_VM_0",
		"nic1",
		"ip1",
		"pub1",
		&PublicIPAddressesGetCloudServicePublicIPAddressOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}
}

func TestPublicIPAddresses_Delete(t *testing.T) {
	// From example Delete public IP address
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ip",
		&PublicIPAddressesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPublicIPAddresses_Get(t *testing.T) {
	// From example Get public IP address
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testDNS-ip",
		&PublicIPAddressesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}
}

func TestPublicIPAddresses_CreateOrUpdate(t *testing.T) {
	// From example Create public IP address DNS
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ip",
		PublicIPAddress{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &PublicIPAddressPropertiesFormat{
				DNSSettings: &PublicIPAddressDNSSettings{
					DomainNameLabel: to.StringPtr("dnslbl"),
				},
			},
		},
		&PublicIPAddressesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}

	// From example Create public IP address allocation method
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ip",
		PublicIPAddress{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &PublicIPAddressPropertiesFormat{
				IdleTimeoutInMinutes:     to.Int32Ptr(10),
				PublicIPAddressVersion:   IPVersionIPv4.ToPtr(),
				PublicIPAllocationMethod: IPAllocationMethodStatic.ToPtr(),
			},
			SKU: &PublicIPAddressSKU{
				Name: PublicIPAddressSKUNameStandard.ToPtr(),
				Tier: PublicIPAddressSKUTierGlobal.ToPtr(),
			},
		},
		&PublicIPAddressesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}

	// From example Create public IP address defaults
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ip",
		PublicIPAddress{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
		},
		&PublicIPAddressesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}
}

func TestPublicIPAddresses_UpdateTags(t *testing.T) {
	// From example Update public IP address tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ip",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&PublicIPAddressesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}
}

func TestPublicIPAddresses_ListAll(t *testing.T) {
	// From example List all public IP addresses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	pager := client.ListAll(&PublicIPAddressesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPAddress.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPAddress.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPAddresses_List(t *testing.T) {
	// From example List resource group public IP addresses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	pager := client.List("rg1",
		&PublicIPAddressesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPAddress.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPAddress.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses(t *testing.T) {
	// From example ListVMSSPublicIP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	pager := client.ListVirtualMachineScaleSetPublicIPAddresses("vmss-tester",
		"vmss1",
		&PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPAddress.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPAddress.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPAddresses_ListVirtualMachineScaleSetVMPublicIPAddresses(t *testing.T) {
	// From example ListVMSSVMPublicIP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	pager := client.ListVirtualMachineScaleSetVMPublicIPAddresses("vmss-tester",
		"vmss1",
		"1",
		"nic1",
		"ip1",
		&PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPAddress.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPAddress.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress(t *testing.T) {
	// From example GetVMSSPublicIP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPAddressesClient(con,
		"subid")
	res, err := client.GetVirtualMachineScaleSetPublicIPAddress(ctx,
		"vmss-tester",
		"vmss1",
		"1",
		"nic1",
		"ip1",
		"pub1",
		&PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPAddress.ID == nil {
		t.Fatal("PublicIPAddress.ID should not be nil!")
	}
}

func TestCustomIPPrefixes_Delete(t *testing.T) {
	// From example Delete custom IP prefix
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomIPPrefixesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-customipprefix",
		&CustomIPPrefixesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCustomIPPrefixes_Get(t *testing.T) {
	// From example Get custom IP prefix
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomIPPrefixesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-customipprefix",
		&CustomIPPrefixesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomIPPrefix.ID == nil {
		t.Fatal("CustomIPPrefix.ID should not be nil!")
	}
}

func TestCustomIPPrefixes_CreateOrUpdate(t *testing.T) {
	// From example Create custom IP prefix allocation method
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomIPPrefixesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-customipprefix",
		CustomIPPrefix{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &CustomIPPrefixPropertiesFormat{
				Cidr: to.StringPtr("0.0.0.0/24"),
			},
		},
		&CustomIPPrefixesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomIPPrefix.ID == nil {
		t.Fatal("CustomIPPrefix.ID should not be nil!")
	}
}

func TestCustomIPPrefixes_UpdateTags(t *testing.T) {
	// From example Update public IP address tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomIPPrefixesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-customipprefix",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&CustomIPPrefixesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomIPPrefix.ID == nil {
		t.Fatal("CustomIPPrefix.ID should not be nil!")
	}
}

func TestCustomIPPrefixes_ListAll(t *testing.T) {
	// From example List all custom IP prefixes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomIPPrefixesClient(con,
		"subid")
	pager := client.ListAll(&CustomIPPrefixesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CustomIPPrefix.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CustomIPPrefix.ID should not be nil!")
			}
		}
	}
}

func TestCustomIPPrefixes_List(t *testing.T) {
	// From example List resource group Custom IP prefixes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomIPPrefixesClient(con,
		"subid")
	pager := client.List("rg1",
		&CustomIPPrefixesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CustomIPPrefix.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CustomIPPrefix.ID should not be nil!")
			}
		}
	}
}

func TestDdosCustomPolicies_Delete(t *testing.T) {
	// From example Delete DDoS custom policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosCustomPoliciesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ddos-custom-policy",
		&DdosCustomPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDdosCustomPolicies_Get(t *testing.T) {
	// From example Get DDoS custom policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosCustomPoliciesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-ddos-custom-policy",
		&DdosCustomPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DdosCustomPolicy.ID == nil {
		t.Fatal("DdosCustomPolicy.ID should not be nil!")
	}
}

func TestDdosCustomPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create DDoS custom policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosCustomPoliciesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ddos-custom-policy",
		DdosCustomPolicy{
			Resource: Resource{
				Location: to.StringPtr("centraluseuap"),
			},
			Properties: &DdosCustomPolicyPropertiesFormat{
				ProtocolCustomSettings: []*ProtocolCustomSettingsFormat{
					{
						Protocol: DdosCustomPolicyProtocolTCP.ToPtr(),
					}},
			},
		},
		&DdosCustomPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DdosCustomPolicy.ID == nil {
		t.Fatal("DdosCustomPolicy.ID should not be nil!")
	}
}

func TestDdosCustomPolicies_UpdateTags(t *testing.T) {
	// From example DDoS Custom policy Update tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosCustomPoliciesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ddos-custom-policy",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&DdosCustomPoliciesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DdosCustomPolicy.ID == nil {
		t.Fatal("DdosCustomPolicy.ID should not be nil!")
	}
}

func TestDdosProtectionPlans_Delete(t *testing.T) {
	// From example Delete DDoS protection plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosProtectionPlansClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-plan",
		&DdosProtectionPlansBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDdosProtectionPlans_Get(t *testing.T) {
	// From example Get DDoS protection plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosProtectionPlansClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-plan",
		&DdosProtectionPlansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DdosProtectionPlan.ID == nil {
		t.Fatal("DdosProtectionPlan.ID should not be nil!")
	}
}

func TestDdosProtectionPlans_CreateOrUpdate(t *testing.T) {
	// From example Create DDoS protection plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosProtectionPlansClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-plan",
		DdosProtectionPlan{
			Location:   to.StringPtr("westus"),
			Properties: &DdosProtectionPlanPropertiesFormat{},
		},
		&DdosProtectionPlansBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DdosProtectionPlan.ID == nil {
		t.Fatal("DdosProtectionPlan.ID should not be nil!")
	}
}

func TestDdosProtectionPlans_UpdateTags(t *testing.T) {
	// From example DDoS protection plan Update tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosProtectionPlansClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-plan",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&DdosProtectionPlansUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DdosProtectionPlan.ID == nil {
		t.Fatal("DdosProtectionPlan.ID should not be nil!")
	}
}

func TestDdosProtectionPlans_List(t *testing.T) {
	// From example List all DDoS protection plans
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosProtectionPlansClient(con,
		"subid")
	pager := client.List(&DdosProtectionPlansListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DdosProtectionPlan.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DdosProtectionPlan.ID should not be nil!")
			}
		}
	}
}

func TestDdosProtectionPlans_ListByResourceGroup(t *testing.T) {
	// From example List DDoS protection plans in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDdosProtectionPlansClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&DdosProtectionPlansListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DdosProtectionPlan.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DdosProtectionPlan.ID should not be nil!")
			}
		}
	}
}

func TestDscpConfiguration_CreateOrUpdate(t *testing.T) {
	// From example Create DSCP Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscpConfigurationClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mydscpconfig",
		DscpConfiguration{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &DscpConfigurationPropertiesFormat{
				QosDefinitionCollection: []*QosDefinition{
					{
						DestinationIPRanges: []*QosIPRange{
							{
								EndIP:   to.StringPtr("127.0.10.2"),
								StartIP: to.StringPtr("127.0.10.1"),
							}},
						DestinationPortRanges: []*QosPortRange{
							{
								End:   to.Int32Ptr(15),
								Start: to.Int32Ptr(15),
							}},
						Markings: []*int32{
							to.Int32Ptr(1)},
						SourceIPRanges: []*QosIPRange{
							{
								EndIP:   to.StringPtr("127.0.0.2"),
								StartIP: to.StringPtr("127.0.0.1"),
							}},
						SourcePortRanges: []*QosPortRange{
							{
								End:   to.Int32Ptr(11),
								Start: to.Int32Ptr(10),
							},
							{
								End:   to.Int32Ptr(21),
								Start: to.Int32Ptr(20),
							}},
						Protocol: ProtocolTypeTCP.ToPtr(),
					},
					{
						DestinationIPRanges: []*QosIPRange{
							{
								EndIP:   to.StringPtr("12.0.10.2"),
								StartIP: to.StringPtr("12.0.10.1"),
							}},
						DestinationPortRanges: []*QosPortRange{
							{
								End:   to.Int32Ptr(52),
								Start: to.Int32Ptr(51),
							}},
						Markings: []*int32{
							to.Int32Ptr(2)},
						SourceIPRanges: []*QosIPRange{
							{
								EndIP:   to.StringPtr("12.0.0.2"),
								StartIP: to.StringPtr("12.0.0.1"),
							}},
						SourcePortRanges: []*QosPortRange{
							{
								End:   to.Int32Ptr(12),
								Start: to.Int32Ptr(11),
							}},
						Protocol: ProtocolTypeUDP.ToPtr(),
					}},
			},
		},
		&DscpConfigurationBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DscpConfiguration.ID == nil {
		t.Fatal("DscpConfiguration.ID should not be nil!")
	}
}

func TestDscpConfiguration_Delete(t *testing.T) {
	// From example Delete DSCP Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscpConfigurationClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"mydscpConfig",
		&DscpConfigurationBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDscpConfiguration_Get(t *testing.T) {
	// From example Get Dscp Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscpConfigurationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"mydscpConfig",
		&DscpConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscpConfiguration.ID == nil {
		t.Fatal("DscpConfiguration.ID should not be nil!")
	}
}

func TestDscpConfiguration_List(t *testing.T) {
	// From example Get Dscp Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscpConfigurationClient(con,
		"subid")
	pager := client.List("rg1",
		&DscpConfigurationListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscpConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscpConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestDscpConfiguration_ListAll(t *testing.T) {
	// From example List all network interfaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscpConfigurationClient(con,
		"subid")
	pager := client.ListAll(&DscpConfigurationListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscpConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscpConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestAvailableEndpointServices_List(t *testing.T) {
	// From example EndpointServicesList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableEndpointServicesClient(con,
		"subid")
	pager := client.List("westus",
		&AvailableEndpointServicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EndpointServiceResult.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EndpointServiceResult.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCircuitAuthorizations_Delete(t *testing.T) {
	// From example Delete ExpressRouteCircuit Authorization
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitAuthorizationsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"circuitName",
		"authorizationName",
		&ExpressRouteCircuitAuthorizationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuitAuthorizations_Get(t *testing.T) {
	// From example Get ExpressRouteCircuit Authorization
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitAuthorizationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"circuitName",
		"authorizationName",
		&ExpressRouteCircuitAuthorizationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuitAuthorization.ID == nil {
		t.Fatal("ExpressRouteCircuitAuthorization.ID should not be nil!")
	}
}

func TestExpressRouteCircuitAuthorizations_CreateOrUpdate(t *testing.T) {
	// From example Create ExpressRouteCircuit Authorization
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitAuthorizationsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"circuitName",
		"authorizatinName",
		ExpressRouteCircuitAuthorization{
			Properties: &AuthorizationPropertiesFormat{},
		},
		&ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuitAuthorization.ID == nil {
		t.Fatal("ExpressRouteCircuitAuthorization.ID should not be nil!")
	}
}

func TestExpressRouteCircuitAuthorizations_List(t *testing.T) {
	// From example List ExpressRouteCircuit Authorization
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitAuthorizationsClient(con,
		"subid")
	pager := client.List("rg1",
		"circuitName",
		&ExpressRouteCircuitAuthorizationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCircuitAuthorization.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCircuitAuthorization.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCircuitPeerings_Delete(t *testing.T) {
	// From example Delete ExpressRouteCircuit Peerings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitPeeringsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		&ExpressRouteCircuitPeeringsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuitPeerings_Get(t *testing.T) {
	// From example Get ExpressRouteCircuit Peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitPeeringsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"circuitName",
		"MicrosoftPeering",
		&ExpressRouteCircuitPeeringsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuitPeering.ID == nil {
		t.Fatal("ExpressRouteCircuitPeering.ID should not be nil!")
	}
}

func TestExpressRouteCircuitPeerings_CreateOrUpdate(t *testing.T) {
	// From example Create ExpressRouteCircuit Peerings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitPeeringsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"circuitName",
		"AzurePrivatePeering",
		ExpressRouteCircuitPeering{
			Properties: &ExpressRouteCircuitPeeringPropertiesFormat{
				PeerASN:                    to.Int64Ptr(200),
				PrimaryPeerAddressPrefix:   to.StringPtr("192.168.16.252/30"),
				SecondaryPeerAddressPrefix: to.StringPtr("192.168.18.252/30"),
				VlanID:                     to.Int32Ptr(200),
			},
		},
		&ExpressRouteCircuitPeeringsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuitPeering.ID == nil {
		t.Fatal("ExpressRouteCircuitPeering.ID should not be nil!")
	}
}

func TestExpressRouteCircuitPeerings_List(t *testing.T) {
	// From example List ExpressRouteCircuit Peerings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitPeeringsClient(con,
		"subid")
	pager := client.List("rg1",
		"circuitName",
		&ExpressRouteCircuitPeeringsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCircuitPeering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCircuitPeering.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCircuitConnections_Delete(t *testing.T) {
	// From example Delete ExpressRouteCircuit
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"circuitConnectionUSAUS",
		&ExpressRouteCircuitConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuitConnections_Get(t *testing.T) {
	// From example ExpressRouteCircuitConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitConnectionsClient(con,
		"subid1")
	res, err := client.Get(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"circuitConnectionUSAUS",
		&ExpressRouteCircuitConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuitConnection.ID == nil {
		t.Fatal("ExpressRouteCircuitConnection.ID should not be nil!")
	}
}

func TestExpressRouteCircuitConnections_CreateOrUpdate(t *testing.T) {
	// From example ExpressRouteCircuitConnectionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitConnectionsClient(con,
		"subid1")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"circuitConnectionUSAUS",
		ExpressRouteCircuitConnection{
			Properties: &ExpressRouteCircuitConnectionPropertiesFormat{
				AddressPrefix:    to.StringPtr("10.0.0.0/29"),
				AuthorizationKey: to.StringPtr("946a1918-b7a2-4917-b43c-8c4cdaee006a"),
				ExpressRouteCircuitPeering: &SubResource{
					ID: to.StringPtr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
				},
				IPv6CircuitConnectionConfig: &IPv6CircuitConnectionConfig{
					AddressPrefix: to.StringPtr("aa:bb::/125"),
				},
				PeerExpressRouteCircuitPeering: &SubResource{
					ID: to.StringPtr("/subscriptions/subid2/resourceGroups/dedharcktpeer/providers/Microsoft.Network/expressRouteCircuits/dedharcktremote/peerings/AzurePrivatePeering"),
				},
			},
		},
		&ExpressRouteCircuitConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuitConnection.ID == nil {
		t.Fatal("ExpressRouteCircuitConnection.ID should not be nil!")
	}
}

func TestExpressRouteCircuitConnections_List(t *testing.T) {
	// From example List ExpressRouteCircuit Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitConnectionsClient(con,
		"subid1")
	pager := client.List("rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		&ExpressRouteCircuitConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCircuitConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCircuitConnection.ID should not be nil!")
			}
		}
	}
}

func TestPeerExpressRouteCircuitConnections_Get(t *testing.T) {
	// From example PeerExpressRouteCircuitConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeerExpressRouteCircuitConnectionsClient(con,
		"subid1")
	res, err := client.Get(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"60aee347-e889-4a42-8c1b-0aae8b1e4013",
		&PeerExpressRouteCircuitConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeerExpressRouteCircuitConnection.ID == nil {
		t.Fatal("PeerExpressRouteCircuitConnection.ID should not be nil!")
	}
}

func TestPeerExpressRouteCircuitConnections_List(t *testing.T) {
	// From example List Peer ExpressRouteCircuit Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeerExpressRouteCircuitConnectionsClient(con,
		"subid1")
	pager := client.List("rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		&PeerExpressRouteCircuitConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeerExpressRouteCircuitConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeerExpressRouteCircuitConnection.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCircuits_Delete(t *testing.T) {
	// From example Delete ExpressRouteCircuit
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"circuitName",
		&ExpressRouteCircuitsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuits_Get(t *testing.T) {
	// From example Get ExpressRouteCircuit
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"circuitName",
		&ExpressRouteCircuitsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuit.ID == nil {
		t.Fatal("ExpressRouteCircuit.ID should not be nil!")
	}
}

func TestExpressRouteCircuits_CreateOrUpdate(t *testing.T) {
	// From example Create ExpressRouteCircuit
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"circuitName",
		ExpressRouteCircuit{
			Resource: Resource{
				Location: to.StringPtr("Brazil South"),
			},
			Properties: &ExpressRouteCircuitPropertiesFormat{
				AllowClassicOperations: to.BoolPtr(false),
				Authorizations:         []*ExpressRouteCircuitAuthorization{},
				Peerings:               []*ExpressRouteCircuitPeering{},
				ServiceProviderProperties: &ExpressRouteCircuitServiceProviderProperties{
					BandwidthInMbps:     to.Int32Ptr(200),
					PeeringLocation:     to.StringPtr("Silicon Valley"),
					ServiceProviderName: to.StringPtr("Equinix"),
				},
			},
			SKU: &ExpressRouteCircuitSKU{
				Name:   to.StringPtr("Standard_MeteredData"),
				Family: ExpressRouteCircuitSKUFamilyMeteredData.ToPtr(),
				Tier:   ExpressRouteCircuitSKUTierStandard.ToPtr(),
			},
		},
		&ExpressRouteCircuitsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuit.ID == nil {
		t.Fatal("ExpressRouteCircuit.ID should not be nil!")
	}

	// From example Create ExpressRouteCircuit on ExpressRoutePort
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"expressRouteCircuit1",
		ExpressRouteCircuit{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ExpressRouteCircuitPropertiesFormat{
				BandwidthInGbps: to.Float32Ptr(10),
				ExpressRoutePort: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
				},
			},
			SKU: &ExpressRouteCircuitSKU{
				Name:   to.StringPtr("Premium_MeteredData"),
				Family: ExpressRouteCircuitSKUFamilyMeteredData.ToPtr(),
				Tier:   ExpressRouteCircuitSKUTierPremium.ToPtr(),
			},
		},
		&ExpressRouteCircuitsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuit.ID == nil {
		t.Fatal("ExpressRouteCircuit.ID should not be nil!")
	}
}

func TestExpressRouteCircuits_UpdateTags(t *testing.T) {
	// From example Update Express Route Circuit Tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"ertest",
		"er1",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ExpressRouteCircuitsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCircuit.ID == nil {
		t.Fatal("ExpressRouteCircuit.ID should not be nil!")
	}
}

func TestExpressRouteCircuits_ListArpTable(t *testing.T) {
	// From example List ARP Table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	poller, err := client.BeginListArpTable(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		"devicePath",
		&ExpressRouteCircuitsBeginListArpTableOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuits_ListRoutesTable(t *testing.T) {
	// From example List Route Tables
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	poller, err := client.BeginListRoutesTable(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		"devicePath",
		&ExpressRouteCircuitsBeginListRoutesTableOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuits_ListRoutesTableSummary(t *testing.T) {
	// From example List Route Table Summary
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	poller, err := client.BeginListRoutesTableSummary(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		"devicePath",
		&ExpressRouteCircuitsBeginListRoutesTableSummaryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuits_GetStats(t *testing.T) {
	// From example Get ExpressRoute Circuit Traffic Stats
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	_, err := client.GetStats(ctx,
		"rg1",
		"circuitName",
		&ExpressRouteCircuitsGetStatsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuits_GetPeeringStats(t *testing.T) {
	// From example Get ExpressRoute Circuit Peering Traffic Stats
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	_, err := client.GetPeeringStats(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		&ExpressRouteCircuitsGetPeeringStatsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCircuits_List(t *testing.T) {
	// From example List ExpressRouteCircuits in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	pager := client.List("rg1",
		&ExpressRouteCircuitsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCircuit.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCircuit.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCircuits_ListAll(t *testing.T) {
	// From example List ExpressRouteCircuits in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCircuitsClient(con,
		"subid")
	pager := client.ListAll(&ExpressRouteCircuitsListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCircuit.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCircuit.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteServiceProviders_List(t *testing.T) {
	// From example List ExpressRoute providers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteServiceProvidersClient(con,
		"subid")
	pager := client.List(&ExpressRouteServiceProvidersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteServiceProvider.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteServiceProvider.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCrossConnections_List(t *testing.T) {
	// From example ExpressRouteCrossConnectionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	pager := client.List(&ExpressRouteCrossConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCrossConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCrossConnection.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCrossConnections_ListByResourceGroup(t *testing.T) {
	// From example ExpressRouteCrossConnectionListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	pager := client.ListByResourceGroup("CrossConnection-SiliconValley",
		&ExpressRouteCrossConnectionsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCrossConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCrossConnection.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCrossConnections_Get(t *testing.T) {
	// From example GetExpressRouteCrossConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		&ExpressRouteCrossConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCrossConnection.ID == nil {
		t.Fatal("ExpressRouteCrossConnection.ID should not be nil!")
	}
}

func TestExpressRouteCrossConnections_CreateOrUpdate(t *testing.T) {
	// From example UpdateExpressRouteCrossConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		ExpressRouteCrossConnection{
			Properties: &ExpressRouteCrossConnectionProperties{
				ServiceProviderProvisioningState: ServiceProviderProvisioningStateNotProvisioned.ToPtr(),
			},
		},
		&ExpressRouteCrossConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCrossConnection.ID == nil {
		t.Fatal("ExpressRouteCrossConnection.ID should not be nil!")
	}
}

func TestExpressRouteCrossConnections_UpdateTags(t *testing.T) {
	// From example UpdateExpressRouteCrossConnectionTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ExpressRouteCrossConnectionsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCrossConnection.ID == nil {
		t.Fatal("ExpressRouteCrossConnection.ID should not be nil!")
	}
}

func TestExpressRouteCrossConnections_ListArpTable(t *testing.T) {
	// From example GetExpressRouteCrossConnectionsArpTable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	poller, err := client.BeginListArpTable(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		"primary",
		&ExpressRouteCrossConnectionsBeginListArpTableOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCrossConnections_ListRoutesTableSummary(t *testing.T) {
	// From example GetExpressRouteCrossConnectionsRouteTableSummary
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	poller, err := client.BeginListRoutesTableSummary(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		"primary",
		&ExpressRouteCrossConnectionsBeginListRoutesTableSummaryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCrossConnections_ListRoutesTable(t *testing.T) {
	// From example GetExpressRouteCrossConnectionsRouteTable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionsClient(con,
		"subid")
	poller, err := client.BeginListRoutesTable(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		"primary",
		&ExpressRouteCrossConnectionsBeginListRoutesTableOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCrossConnectionPeerings_List(t *testing.T) {
	// From example ExpressRouteCrossConnectionBgpPeeringList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionPeeringsClient(con,
		"subid")
	pager := client.List("CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		&ExpressRouteCrossConnectionPeeringsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteCrossConnectionPeering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteCrossConnectionPeering.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteCrossConnectionPeerings_Delete(t *testing.T) {
	// From example DeleteExpressRouteCrossConnectionBgpPeering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionPeeringsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		&ExpressRouteCrossConnectionPeeringsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteCrossConnectionPeerings_Get(t *testing.T) {
	// From example GetExpressRouteCrossConnectionBgpPeering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionPeeringsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		&ExpressRouteCrossConnectionPeeringsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCrossConnectionPeering.ID == nil {
		t.Fatal("ExpressRouteCrossConnectionPeering.ID should not be nil!")
	}
}

func TestExpressRouteCrossConnectionPeerings_CreateOrUpdate(t *testing.T) {
	// From example ExpressRouteCrossConnectionBgpPeeringCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteCrossConnectionPeeringsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		ExpressRouteCrossConnectionPeering{
			Properties: &ExpressRouteCrossConnectionPeeringProperties{
				IPv6PeeringConfig: &IPv6ExpressRouteCircuitPeeringConfig{
					PrimaryPeerAddressPrefix:   to.StringPtr("3FFE:FFFF:0:CD30::/126"),
					SecondaryPeerAddressPrefix: to.StringPtr("3FFE:FFFF:0:CD30::4/126"),
				},
				PeerASN:                    to.Int64Ptr(200),
				PrimaryPeerAddressPrefix:   to.StringPtr("192.168.16.252/30"),
				SecondaryPeerAddressPrefix: to.StringPtr("192.168.18.252/30"),
				VlanID:                     to.Int32Ptr(200),
			},
		},
		&ExpressRouteCrossConnectionPeeringsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteCrossConnectionPeering.ID == nil {
		t.Fatal("ExpressRouteCrossConnectionPeering.ID should not be nil!")
	}
}

func TestExpressRoutePortsLocations_List(t *testing.T) {
	// From example ExpressRoutePortsLocationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsLocationsClient(con,
		"subid")
	pager := client.List(&ExpressRoutePortsLocationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRoutePortsLocation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRoutePortsLocation.ID should not be nil!")
			}
		}
	}
}

func TestExpressRoutePortsLocations_Get(t *testing.T) {
	// From example ExpressRoutePortsLocationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsLocationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"locationName",
		&ExpressRoutePortsLocationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRoutePortsLocation.ID == nil {
		t.Fatal("ExpressRoutePortsLocation.ID should not be nil!")
	}
}

func TestExpressRoutePorts_Delete(t *testing.T) {
	// From example ExpressRoutePortDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"portName",
		&ExpressRoutePortsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRoutePorts_Get(t *testing.T) {
	// From example ExpressRoutePortGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"portName",
		&ExpressRoutePortsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRoutePort.ID == nil {
		t.Fatal("ExpressRoutePort.ID should not be nil!")
	}
}

func TestExpressRoutePorts_CreateOrUpdate(t *testing.T) {
	// From example ExpressRoutePortCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"portName",
		ExpressRoutePort{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ExpressRoutePortPropertiesFormat{
				BandwidthInGbps: to.Int32Ptr(100),
				Encapsulation:   ExpressRoutePortsEncapsulationQinQ.ToPtr(),
				PeeringLocation: to.StringPtr("peeringLocationName"),
			},
		},
		&ExpressRoutePortsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRoutePort.ID == nil {
		t.Fatal("ExpressRoutePort.ID should not be nil!")
	}

	// From example ExpressRoutePortUpdateLink
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"portName",
		ExpressRoutePort{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ExpressRoutePortPropertiesFormat{
				BandwidthInGbps: to.Int32Ptr(100),
				Encapsulation:   ExpressRoutePortsEncapsulationQinQ.ToPtr(),
				Links: []*ExpressRouteLink{
					{
						Name: to.StringPtr("link1"),
						Properties: &ExpressRouteLinkPropertiesFormat{
							AdminState: ExpressRouteLinkAdminStateEnabled.ToPtr(),
						},
					}},
				PeeringLocation: to.StringPtr("peeringLocationName"),
			},
		},
		&ExpressRoutePortsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRoutePort.ID == nil {
		t.Fatal("ExpressRoutePort.ID should not be nil!")
	}
}

func TestExpressRoutePorts_UpdateTags(t *testing.T) {
	// From example ExpressRoutePortUpdateTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"portName",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ExpressRoutePortsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRoutePort.ID == nil {
		t.Fatal("ExpressRoutePort.ID should not be nil!")
	}
}

func TestExpressRoutePorts_ListByResourceGroup(t *testing.T) {
	// From example ExpressRoutePortListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&ExpressRoutePortsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRoutePort.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRoutePort.ID should not be nil!")
			}
		}
	}
}

func TestExpressRoutePorts_List(t *testing.T) {
	// From example ExpressRoutePortList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	pager := client.List(&ExpressRoutePortsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRoutePort.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRoutePort.ID should not be nil!")
			}
		}
	}
}

func TestExpressRoutePorts_GenerateLOA(t *testing.T) {
	// From example GenerateExpressRoutePortLOA
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRoutePortsClient(con,
		"subid")
	_, err := client.GenerateLOA(ctx,
		"rg1",
		"portName",
		GenerateExpressRoutePortsLOARequest{
			CustomerName: to.StringPtr("customerName"),
		},
		&ExpressRoutePortsGenerateLOAOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteLinks_Get(t *testing.T) {
	// From example ExpressRouteLinkGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteLinksClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"portName",
		"linkName",
		&ExpressRouteLinksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteLink.ID == nil {
		t.Fatal("ExpressRouteLink.ID should not be nil!")
	}
}

func TestExpressRouteLinks_List(t *testing.T) {
	// From example ExpressRouteLinkGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteLinksClient(con,
		"subid")
	pager := client.List("rg1",
		"portName",
		&ExpressRouteLinksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExpressRouteLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExpressRouteLink.ID should not be nil!")
			}
		}
	}
}

func TestFirewallPolicies_Delete(t *testing.T) {
	// From example Delete Firewall Policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPoliciesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"firewallPolicy",
		&FirewallPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallPolicies_Get(t *testing.T) {
	// From example Get FirewallPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPoliciesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"firewallPolicy",
		&FirewallPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicy.ID == nil {
		t.Fatal("FirewallPolicy.ID should not be nil!")
	}
}

func TestFirewallPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create FirewallPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPoliciesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		FirewallPolicy{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &FirewallPolicyPropertiesFormat{
				DNSSettings: &DNSSettings{
					EnableProxy:                 to.BoolPtr(true),
					RequireProxyForNetworkRules: to.BoolPtr(false),
					Servers: []*string{
						to.StringPtr("30.3.4.5")},
				},
				ExplicitProxySettings: &ExplicitProxySettings{
					EnableExplicitProxy: to.BoolPtr(true),
					HTTPPort:            to.Int32Ptr(8087),
					HTTPSPort:           to.Int32Ptr(8087),
					PacFile:             to.StringPtr("https://tinawstorage.file.core.windows.net/?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacuptfx&se=2021-06-04T07:01:12Z&st=2021-06-03T23:01:12Z&sip=68.65.171.11&spr=https&sig=Plsa0RRVpGbY0IETZZOT6znOHcSro71LLTTbzquYPgs%3D"),
					PacFilePort:         to.Int32Ptr(8087),
				},
				Insights: &FirewallPolicyInsights{
					IsEnabled: to.BoolPtr(true),
					LogAnalyticsResources: &FirewallPolicyLogAnalyticsResources{
						DefaultWorkspaceID: &SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"),
						},
						Workspaces: []*FirewallPolicyLogAnalyticsWorkspace{
							{
								Region: to.StringPtr("westus"),
								WorkspaceID: &SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"),
								},
							},
							{
								Region: to.StringPtr("eastus"),
								WorkspaceID: &SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"),
								},
							}},
					},
					RetentionDays: to.Int32Ptr(100),
				},
				IntrusionDetection: &FirewallPolicyIntrusionDetection{
					Configuration: &FirewallPolicyIntrusionDetectionConfiguration{
						BypassTrafficSettings: []*FirewallPolicyIntrusionDetectionBypassTrafficSpecifications{
							{
								Name:        to.StringPtr("bypassRule1"),
								Description: to.StringPtr("Rule 1"),
								DestinationAddresses: []*string{
									to.StringPtr("5.6.7.8")},
								DestinationPorts: []*string{
									to.StringPtr("*")},
								SourceAddresses: []*string{
									to.StringPtr("1.2.3.4")},
								Protocol: FirewallPolicyIntrusionDetectionProtocolTCP.ToPtr(),
							}},
						SignatureOverrides: []*FirewallPolicyIntrusionDetectionSignatureSpecification{
							{
								ID:   to.StringPtr("2525004"),
								Mode: FirewallPolicyIntrusionDetectionStateTypeDeny.ToPtr(),
							}},
					},
					Mode: FirewallPolicyIntrusionDetectionStateTypeAlert.ToPtr(),
				},
				SKU: &FirewallPolicySKU{
					Tier: FirewallPolicySKUTierPremium.ToPtr(),
				},
				Snat: &FirewallPolicySNAT{
					PrivateRanges: []*string{
						to.StringPtr("IANAPrivateRanges")},
				},
				SQL: &FirewallPolicySQL{
					AllowSQLRedirect: to.BoolPtr(true),
				},
				ThreatIntelMode: AzureFirewallThreatIntelModeAlert.ToPtr(),
				ThreatIntelWhitelist: &FirewallPolicyThreatIntelWhitelist{
					Fqdns: []*string{
						to.StringPtr("*.microsoft.com")},
					IPAddresses: []*string{
						to.StringPtr("20.3.4.5")},
				},
				TransportSecurity: &FirewallPolicyTransportSecurity{
					CertificateAuthority: &FirewallPolicyCertificateAuthority{
						Name:             to.StringPtr("clientcert"),
						KeyVaultSecretID: to.StringPtr("https://kv/secret"),
					},
				},
			},
		},
		&FirewallPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicy.ID == nil {
		t.Fatal("FirewallPolicy.ID should not be nil!")
	}
}

func TestFirewallPolicies_List(t *testing.T) {
	// From example List all Firewall Policies for a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPoliciesClient(con,
		"subid")
	pager := client.List("rg1",
		&FirewallPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallPolicy.ID should not be nil!")
			}
		}
	}
}

func TestFirewallPolicies_ListAll(t *testing.T) {
	// From example List all Firewall Policies for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPoliciesClient(con,
		"subid")
	pager := client.ListAll(&FirewallPoliciesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallPolicy.ID should not be nil!")
			}
		}
	}
}

func TestFirewallPolicyRuleCollectionGroups_Delete(t *testing.T) {
	// From example Delete FirewallPolicyRuleCollectionGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPolicyRuleCollectionGroupsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		&FirewallPolicyRuleCollectionGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallPolicyRuleCollectionGroups_Get(t *testing.T) {
	// From example Get FirewallPolicyNatRuleCollectionGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPolicyRuleCollectionGroupsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		&FirewallPolicyRuleCollectionGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}

	// From example Get FirewallPolicyRuleCollectionGroup
	res, err = client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		&FirewallPolicyRuleCollectionGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}

	// From example Get FirewallPolicyRuleCollectionGroup With IpGroups
	res, err = client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleGroup1",
		&FirewallPolicyRuleCollectionGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}

	// From example Get FirewallPolicyRuleCollectionGroup With Web Categories
	res, err = client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		&FirewallPolicyRuleCollectionGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}
}

func TestFirewallPolicyRuleCollectionGroups_CreateOrUpdate(t *testing.T) {
	// From example Create FirewallPolicyNatRuleCollectionGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPolicyRuleCollectionGroupsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		FirewallPolicyRuleCollectionGroup{
			Properties: &FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Int32Ptr(100),
				RuleCollections: []FirewallPolicyRuleCollection{
					{
						FirewallPolicyRuleCollection: FirewallPolicyRuleCollection{
							Name:               to.StringPtr("Example-Nat-Rule-Collection"),
							Priority:           to.Int32Ptr(100),
							RuleCollectionType: FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection.ToPtr(),
						},
						Action: &FirewallPolicyNatRuleCollectionAction{
							Type: FirewallPolicyNatRuleCollectionActionTypeDNAT.ToPtr(),
						},
						Rules: []FirewallPolicyRule{
							{
								FirewallPolicyRule: FirewallPolicyRule{
									Name:     to.StringPtr("nat-rule1"),
									RuleType: FirewallPolicyRuleTypeNatRule.ToPtr(),
								},
								DestinationAddresses: []*string{
									to.StringPtr("152.23.32.23")},
								DestinationPorts: []*string{
									to.StringPtr("8080")},
								IPProtocols: []*FirewallPolicyRuleNetworkProtocol{
									FirewallPolicyRuleNetworkProtocolTCP.ToPtr(),
									FirewallPolicyRuleNetworkProtocolUDP.ToPtr()},
								SourceAddresses: []*string{
									to.StringPtr("2.2.2.2")},
								SourceIPGroups: []*string{},
								TranslatedFqdn: to.StringPtr("internalhttp.server.net"),
								TranslatedPort: to.StringPtr("8080"),
							}},
					}},
			},
		},
		&FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}

	// From example Create FirewallPolicyRuleCollectionGroup
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		FirewallPolicyRuleCollectionGroup{
			Properties: &FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Int32Ptr(100),
				RuleCollections: []FirewallPolicyRuleCollection{
					{
						FirewallPolicyRuleCollection: FirewallPolicyRuleCollection{
							Name:               to.StringPtr("Example-Filter-Rule-Collection"),
							Priority:           to.Int32Ptr(100),
							RuleCollectionType: FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection.ToPtr(),
						},
						Action: &FirewallPolicyFilterRuleCollectionAction{
							Type: FirewallPolicyFilterRuleCollectionActionTypeDeny.ToPtr(),
						},
						Rules: []FirewallPolicyRule{
							{
								FirewallPolicyRule: FirewallPolicyRule{
									Name:     to.StringPtr("network-rule1"),
									RuleType: FirewallPolicyRuleTypeNetworkRule.ToPtr(),
								},
								DestinationAddresses: []*string{
									to.StringPtr("*")},
								DestinationPorts: []*string{
									to.StringPtr("*")},
								IPProtocols: []*FirewallPolicyRuleNetworkProtocol{
									FirewallPolicyRuleNetworkProtocolTCP.ToPtr()},
								SourceAddresses: []*string{
									to.StringPtr("10.1.25.0/24")},
							}},
					}},
			},
		},
		&FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}

	// From example Create FirewallPolicyRuleCollectionGroup With IpGroups
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		FirewallPolicyRuleCollectionGroup{
			Properties: &FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Int32Ptr(110),
				RuleCollections: []FirewallPolicyRuleCollection{
					{
						FirewallPolicyRuleCollection: FirewallPolicyRuleCollection{
							Name:               to.StringPtr("Example-Filter-Rule-Collection"),
							RuleCollectionType: FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection.ToPtr(),
						},
						Action: &FirewallPolicyFilterRuleCollectionAction{
							Type: FirewallPolicyFilterRuleCollectionActionTypeDeny.ToPtr(),
						},
						Rules: []FirewallPolicyRule{
							{
								FirewallPolicyRule: FirewallPolicyRule{
									Name:     to.StringPtr("network-1"),
									RuleType: FirewallPolicyRuleTypeNetworkRule.ToPtr(),
								},
								DestinationIPGroups: []*string{
									to.StringPtr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2")},
								DestinationPorts: []*string{
									to.StringPtr("*")},
								IPProtocols: []*FirewallPolicyRuleNetworkProtocol{
									FirewallPolicyRuleNetworkProtocolTCP.ToPtr()},
								SourceIPGroups: []*string{
									to.StringPtr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1")},
							}},
					}},
			},
		},
		&FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}

	// From example Create FirewallPolicyRuleCollectionGroup With Web Categories
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		FirewallPolicyRuleCollectionGroup{
			Properties: &FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Int32Ptr(110),
				RuleCollections: []FirewallPolicyRuleCollection{
					{
						FirewallPolicyRuleCollection: FirewallPolicyRuleCollection{
							Name:               to.StringPtr("Example-Filter-Rule-Collection"),
							RuleCollectionType: FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection.ToPtr(),
						},
						Action: &FirewallPolicyFilterRuleCollectionAction{
							Type: FirewallPolicyFilterRuleCollectionActionTypeDeny.ToPtr(),
						},
						Rules: []FirewallPolicyRule{
							{
								FirewallPolicyRule: FirewallPolicyRule{
									Name:        to.StringPtr("rule1"),
									Description: to.StringPtr("Deny inbound rule"),
									RuleType:    FirewallPolicyRuleTypeApplicationRule.ToPtr(),
								},
								Protocols: []*FirewallPolicyRuleApplicationProtocol{
									{
										Port:         to.Int32Ptr(443),
										ProtocolType: FirewallPolicyRuleApplicationProtocolTypeHTTPS.ToPtr(),
									}},
								SourceAddresses: []*string{
									to.StringPtr("216.58.216.164"),
									to.StringPtr("10.0.0.0/24")},
								WebCategories: []*string{
									to.StringPtr("Hacking")},
							}},
					}},
			},
		},
		&FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallPolicyRuleCollectionGroup.ID == nil {
		t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
	}
}

func TestFirewallPolicyRuleCollectionGroups_List(t *testing.T) {
	// From example List all FirewallPolicyRuleCollectionGroup With Web Categories
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallPolicyRuleCollectionGroupsClient(con,
		"e747cc13-97d4-4a79-b463-42d7f4e558f2")
	pager := client.List("rg1",
		"firewallPolicy",
		&FirewallPolicyRuleCollectionGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallPolicyRuleCollectionGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
			}
		}
	}

	// From example List all FirewallPolicyRuleCollectionGroups for a given FirewallPolicy
	pager = client.List("rg1",
		"firewallPolicy",
		&FirewallPolicyRuleCollectionGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallPolicyRuleCollectionGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
			}
		}
	}

	// From example List all FirewallPolicyRuleCollectionGroups with IpGroups for a given FirewallPolicy
	pager = client.List("rg1",
		"firewallPolicy",
		&FirewallPolicyRuleCollectionGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallPolicyRuleCollectionGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallPolicyRuleCollectionGroup.ID should not be nil!")
			}
		}
	}
}

func TestIpAllocations_Delete(t *testing.T) {
	// From example Delete IpAllocation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPAllocationsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ipallocation",
		&IPAllocationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIpAllocations_Get(t *testing.T) {
	// From example Get IpAllocation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPAllocationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-ipallocation",
		&IPAllocationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IPAllocation.ID == nil {
		t.Fatal("IPAllocation.ID should not be nil!")
	}
}

func TestIpAllocations_CreateOrUpdate(t *testing.T) {
	// From example Create IpAllocation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPAllocationsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ipallocation",
		IPAllocation{
			Resource: Resource{
				Location: to.StringPtr("centraluseuap"),
			},
			Properties: &IPAllocationPropertiesFormat{
				Type: IPAllocationTypeHypernet.ToPtr(),
				AllocationTags: map[string]*string{
					"VNetID": to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
				},
				Prefix: to.StringPtr("3.2.5.0/24"),
			},
		},
		&IPAllocationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IPAllocation.ID == nil {
		t.Fatal("IPAllocation.ID should not be nil!")
	}
}

func TestIpAllocations_UpdateTags(t *testing.T) {
	// From example Update virtual network tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPAllocationsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ipallocation",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&IPAllocationsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IPAllocation.ID == nil {
		t.Fatal("IPAllocation.ID should not be nil!")
	}
}

func TestIpAllocations_List(t *testing.T) {
	// From example List all IpAllocations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPAllocationsClient(con,
		"subid")
	pager := client.List(&IPAllocationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IPAllocation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IPAllocation.ID should not be nil!")
			}
		}
	}
}

func TestIpAllocations_ListByResourceGroup(t *testing.T) {
	// From example List IpAllocations in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPAllocationsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&IPAllocationsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IPAllocation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IPAllocation.ID should not be nil!")
			}
		}
	}
}

func TestIpGroups_Get(t *testing.T) {
	// From example Get_IpGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPGroupsClient(con,
		"subId")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"ipGroups1",
		&IPGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IPGroup.ID == nil {
		t.Fatal("IPGroup.ID should not be nil!")
	}
}

func TestIpGroups_CreateOrUpdate(t *testing.T) {
	// From example CreateOrUpdate_IpGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPGroupsClient(con,
		"subId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"ipGroups1",
		IPGroup{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &IPGroupPropertiesFormat{
				IPAddresses: []*string{
					to.StringPtr("13.64.39.16/32"),
					to.StringPtr("40.74.146.80/31"),
					to.StringPtr("40.74.147.32/28")},
			},
		},
		&IPGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IPGroup.ID == nil {
		t.Fatal("IPGroup.ID should not be nil!")
	}
}

func TestIpGroups_UpdateGroups(t *testing.T) {
	// From example Update_IpGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPGroupsClient(con,
		"subId")
	res, err := client.UpdateGroups(ctx,
		"myResourceGroup",
		"ipGroups1",
		TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&IPGroupsUpdateGroupsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IPGroup.ID == nil {
		t.Fatal("IPGroup.ID should not be nil!")
	}
}

func TestIpGroups_Delete(t *testing.T) {
	// From example Delete_IpGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPGroupsClient(con,
		"subId")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"ipGroups1",
		&IPGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIpGroups_ListByResourceGroup(t *testing.T) {
	// From example ListByResourceGroup_IpGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPGroupsClient(con,
		"subId")
	pager := client.ListByResourceGroup("myResourceGroup",
		&IPGroupsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IPGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IPGroup.ID should not be nil!")
			}
		}
	}
}

func TestIpGroups_List(t *testing.T) {
	// From example List_IpGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPGroupsClient(con,
		"subId")
	pager := client.List(&IPGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IPGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IPGroup.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancers_Delete(t *testing.T) {
	// From example Delete load balancer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"lb",
		&LoadBalancersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLoadBalancers_Get(t *testing.T) {
	// From example Get load balancer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"lb",
		&LoadBalancersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}
}

func TestLoadBalancers_CreateOrUpdate(t *testing.T) {
	// From example Create load balancer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name:       to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				InboundNatPools: []*InboundNatPool{},
				InboundNatRules: []*InboundNatRule{
					{
						Name: to.StringPtr("in-nat-rule"),
						Properties: &InboundNatRulePropertiesFormat{
							BackendPort:      to.Int32Ptr(3389),
							EnableFloatingIP: to.BoolPtr(true),
							EnableTCPReset:   to.BoolPtr(false),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(3389),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							Protocol:             TransportProtocolTCP.ToPtr(),
						},
					}},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Int32Ptr(80),
							EnableFloatingIP: to.BoolPtr(true),
							EnableTCPReset:   to.BoolPtr(false),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolTCP.ToPtr(),
						},
					}},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with Frontend IP in Zone 1
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name:       to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
						Zones: []*string{
							to.StringPtr("1")},
					}},
				InboundNatPools: []*InboundNatPool{},
				InboundNatRules: []*InboundNatRule{
					{
						Name: to.StringPtr("in-nat-rule"),
						Properties: &InboundNatRulePropertiesFormat{
							BackendPort:      to.Int32Ptr(3389),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(3389),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							Protocol:             TransportProtocolTCP.ToPtr(),
						},
					}},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Int32Ptr(80),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolTCP.ToPtr(),
						},
					}},
				OutboundRules: []*OutboundRule{},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameStandard.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with Gateway Load Balancer Consumer configured
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name:       to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							GatewayLoadBalancer: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
							},
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				InboundNatPools: []*InboundNatPool{},
				InboundNatRules: []*InboundNatRule{
					{
						Name: to.StringPtr("in-nat-rule"),
						Properties: &InboundNatRulePropertiesFormat{
							BackendPort:      to.Int32Ptr(3389),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(3389),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							Protocol:             TransportProtocolTCP.ToPtr(),
						},
					}},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Int32Ptr(80),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolTCP.ToPtr(),
						},
					}},
				OutboundRules: []*OutboundRule{},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameStandard.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with Gateway Load Balancer Provider configured with one Backend Pool
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name: to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{
							TunnelInterfaces: []*GatewayLoadBalancerTunnelInterface{
								{
									Type:       GatewayLoadBalancerTunnelInterfaceTypeInternal.ToPtr(),
									Identifier: to.Int32Ptr(900),
									Port:       to.Int32Ptr(15000),
									Protocol:   GatewayLoadBalancerTunnelProtocolVXLAN.ToPtr(),
								},
								{
									Type:       GatewayLoadBalancerTunnelInterfaceTypeInternal.ToPtr(),
									Identifier: to.Int32Ptr(901),
									Port:       to.Int32Ptr(15001),
									Protocol:   GatewayLoadBalancerTunnelProtocolVXLAN.ToPtr(),
								}},
						},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				InboundNatPools: []*InboundNatPool{},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPools: []*SubResource{
								{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
								}},
							BackendPort:      to.Int32Ptr(0),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(0),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolAll.ToPtr(),
						},
					}},
				OutboundRules: []*OutboundRule{},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameBasic.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with Gateway Load Balancer Provider configured with two Backend Pool
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name:       to.StringPtr("be-lb1"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					},
					{
						Name:       to.StringPtr("be-lb2"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				InboundNatPools: []*InboundNatPool{},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{},
							BackendAddressPools: []*SubResource{
								{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"),
								},
								{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"),
								}},
							BackendPort:      to.Int32Ptr(0),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(0),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolAll.ToPtr(),
						},
					}},
				OutboundRules: []*OutboundRule{},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameBasic.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with Global Tier and one regional load balancer in its backend pool
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name: to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{
							LoadBalancerBackendAddresses: []*LoadBalancerBackendAddress{
								{
									Name: to.StringPtr("regional-lb1-address"),
									Properties: &LoadBalancerBackendAddressPropertiesFormat{
										LoadBalancerFrontendIPConfiguration: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"),
										},
									},
								}},
						},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Int32Ptr(80),
							EnableFloatingIP: to.BoolPtr(false),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolTCP.ToPtr(),
						},
					}},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameStandard.ToPtr(),
				Tier: LoadBalancerSKUTierGlobal.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with Standard SKU
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name:       to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				InboundNatPools: []*InboundNatPool{},
				InboundNatRules: []*InboundNatRule{
					{
						Name: to.StringPtr("in-nat-rule"),
						Properties: &InboundNatRulePropertiesFormat{
							BackendPort:      to.Int32Ptr(3389),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(3389),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							Protocol:             TransportProtocolTCP.ToPtr(),
						},
					}},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Int32Ptr(80),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolTCP.ToPtr(),
						},
					}},
				OutboundRules: []*OutboundRule{},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameStandard.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with inbound nat pool
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
						},
						Name: to.StringPtr("test"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: IPAllocationMethodDynamic.ToPtr(),
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"),
								},
							},
						},
						Zones: []*string{},
					}},
				InboundNatPools: []*InboundNatPool{
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"),
						},
						Name: to.StringPtr("test"),
						Properties: &InboundNatPoolPropertiesFormat{
							BackendPort:      to.Int32Ptr(8888),
							EnableFloatingIP: to.BoolPtr(true),
							EnableTCPReset:   to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
							},
							FrontendPortRangeEnd:   to.Int32Ptr(8085),
							FrontendPortRangeStart: to.Int32Ptr(8080),
							IdleTimeoutInMinutes:   to.Int32Ptr(10),
							Protocol:               TransportProtocolTCP.ToPtr(),
						},
					}},
				InboundNatRules:    []*InboundNatRule{},
				LoadBalancingRules: []*LoadBalancingRule{},
				OutboundRules:      []*OutboundRule{},
				Probes:             []*Probe{},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameStandard.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}

	// From example Create load balancer with outbound rules
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		LoadBalancer{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &LoadBalancerPropertiesFormat{
				BackendAddressPools: []*BackendAddressPool{
					{
						Name:       to.StringPtr("be-lb"),
						Properties: &BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &FrontendIPConfigurationPropertiesFormat{
							PublicIPAddress: &PublicIPAddress{
								Resource: Resource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"),
								},
							},
						},
					}},
				InboundNatPools: []*InboundNatPool{},
				InboundNatRules: []*InboundNatRule{
					{
						Name: to.StringPtr("in-nat-rule"),
						Properties: &InboundNatRulePropertiesFormat{
							BackendPort:      to.Int32Ptr(3389),
							EnableFloatingIP: to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(3389),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							Protocol:             TransportProtocolTCP.ToPtr(),
						},
					}},
				LoadBalancingRules: []*LoadBalancingRule{
					{
						Name: to.StringPtr("rulelb"),
						Properties: &LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Int32Ptr(80),
							DisableOutboundSnat: to.BoolPtr(true),
							EnableFloatingIP:    to.BoolPtr(true),
							FrontendIPConfiguration: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     LoadDistributionDefault.ToPtr(),
							Probe: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: TransportProtocolTCP.ToPtr(),
						},
					}},
				OutboundRules: []*OutboundRule{
					{
						Name: to.StringPtr("rule1"),
						Properties: &OutboundRulePropertiesFormat{
							BackendAddressPool: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							FrontendIPConfigurations: []*SubResource{
								{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
								}},
							Protocol: LoadBalancerOutboundRuleProtocolAll.ToPtr(),
						},
					}},
				Probes: []*Probe{
					{
						Name: to.StringPtr("probe-lb"),
						Properties: &ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("healthcheck.aspx"),
							Protocol:          ProbeProtocolHTTP.ToPtr(),
						},
					}},
			},
			SKU: &LoadBalancerSKU{
				Name: LoadBalancerSKUNameStandard.ToPtr(),
			},
		},
		&LoadBalancersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}
}

func TestLoadBalancers_UpdateTags(t *testing.T) {
	// From example Update load balancer tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"lb",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&LoadBalancersUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancer.ID == nil {
		t.Fatal("LoadBalancer.ID should not be nil!")
	}
}

func TestLoadBalancers_ListAll(t *testing.T) {
	// From example List all load balancers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	pager := client.ListAll(&LoadBalancersListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LoadBalancer.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LoadBalancer.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancers_List(t *testing.T) {
	// From example List load balancers in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	pager := client.List("rg1",
		&LoadBalancersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LoadBalancer.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LoadBalancer.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancers_SwapPublicIpAddresses(t *testing.T) {
	// From example Swap VIPs between two load balancers.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancersClient(con,
		"subid")
	poller, err := client.BeginSwapPublicIPAddresses(ctx,
		"westus",
		LoadBalancerVipSwapRequest{
			FrontendIPConfigurations: []*LoadBalancerVipSwapRequestFrontendIPConfiguration{
				{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfe1"),
					Properties: &LoadBalancerVipSwapRequestFrontendIPConfigurationProperties{
						PublicIPAddress: &SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/pip2"),
						},
					},
				},
				{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/loadBalancers/lb2/frontendIPConfigurations/lbfe2"),
					Properties: &LoadBalancerVipSwapRequestFrontendIPConfigurationProperties{
						PublicIPAddress: &SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip1"),
						},
					},
				}},
		},
		&LoadBalancersBeginSwapPublicIPAddressesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLoadBalancerBackendAddressPools_List(t *testing.T) {
	// From example Load balancer with BackendAddressPool containing BackendAddresses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerBackendAddressPoolsClient(con,
		"subid")
	pager := client.List("testrg",
		"lb",
		&LoadBalancerBackendAddressPoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackendAddressPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackendAddressPool.ID should not be nil!")
			}
		}
	}

	// From example LoadBalancerBackendAddressPoolList
	pager = client.List("testrg",
		"lb",
		&LoadBalancerBackendAddressPoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackendAddressPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackendAddressPool.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancerBackendAddressPools_Get(t *testing.T) {
	// From example LoadBalancer with BackendAddressPool with BackendAddresses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerBackendAddressPoolsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"lb",
		"backend",
		&LoadBalancerBackendAddressPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendAddressPool.ID == nil {
		t.Fatal("BackendAddressPool.ID should not be nil!")
	}

	// From example LoadBalancerBackendAddressPoolGet
	res, err = client.Get(ctx,
		"testrg",
		"lb",
		"backend",
		&LoadBalancerBackendAddressPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendAddressPool.ID == nil {
		t.Fatal("BackendAddressPool.ID should not be nil!")
	}
}

func TestLoadBalancerBackendAddressPools_CreateOrUpdate(t *testing.T) {
	// From example Update load balancer backend pool with backend addresses containing virtual network and  IP address.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerBackendAddressPoolsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"lb",
		"backend",
		BackendAddressPool{
			Properties: &BackendAddressPoolPropertiesFormat{
				LoadBalancerBackendAddresses: []*LoadBalancerBackendAddress{
					{
						Name: to.StringPtr("address1"),
						Properties: &LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.StringPtr("10.0.0.4"),
							VirtualNetwork: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					},
					{
						Name: to.StringPtr("address2"),
						Properties: &LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.StringPtr("10.0.0.5"),
							VirtualNetwork: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					}},
			},
		},
		&LoadBalancerBackendAddressPoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendAddressPool.ID == nil {
		t.Fatal("BackendAddressPool.ID should not be nil!")
	}
}

func TestLoadBalancerBackendAddressPools_Delete(t *testing.T) {
	// From example BackendAddressPoolDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerBackendAddressPoolsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"lb",
		"backend",
		&LoadBalancerBackendAddressPoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLoadBalancerFrontendIPConfigurations_List(t *testing.T) {
	// From example LoadBalancerFrontendIPConfigurationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerFrontendIPConfigurationsClient(con,
		"subid")
	pager := client.List("testrg",
		"lb",
		&LoadBalancerFrontendIPConfigurationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FrontendIPConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FrontendIPConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancerFrontendIPConfigurations_Get(t *testing.T) {
	// From example LoadBalancerFrontendIPConfigurationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerFrontendIPConfigurationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"lb",
		"frontend",
		&LoadBalancerFrontendIPConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FrontendIPConfiguration.ID == nil {
		t.Fatal("FrontendIPConfiguration.ID should not be nil!")
	}
}

func TestInboundNatRules_List(t *testing.T) {
	// From example InboundNatRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInboundNatRulesClient(con,
		"subid")
	pager := client.List("testrg",
		"lb1",
		&InboundNatRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("InboundNatRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("InboundNatRule.ID should not be nil!")
			}
		}
	}
}

func TestInboundNatRules_Delete(t *testing.T) {
	// From example InboundNatRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInboundNatRulesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"lb1",
		"natRule1.1",
		&InboundNatRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestInboundNatRules_Get(t *testing.T) {
	// From example InboundNatRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInboundNatRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"lb1",
		"natRule1.1",
		&InboundNatRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.InboundNatRule.ID == nil {
		t.Fatal("InboundNatRule.ID should not be nil!")
	}
}

func TestInboundNatRules_CreateOrUpdate(t *testing.T) {
	// From example InboundNatRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInboundNatRulesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"lb1",
		"natRule1.1",
		InboundNatRule{
			Properties: &InboundNatRulePropertiesFormat{
				BackendPort:      to.Int32Ptr(3389),
				EnableFloatingIP: to.BoolPtr(false),
				EnableTCPReset:   to.BoolPtr(false),
				FrontendIPConfiguration: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
				},
				FrontendPort:         to.Int32Ptr(3390),
				IdleTimeoutInMinutes: to.Int32Ptr(4),
				Protocol:             TransportProtocolTCP.ToPtr(),
			},
		},
		&InboundNatRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InboundNatRule.ID == nil {
		t.Fatal("InboundNatRule.ID should not be nil!")
	}
}

func TestLoadBalancerLoadBalancingRules_List(t *testing.T) {
	// From example LoadBalancerLoadBalancingRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerLoadBalancingRulesClient(con,
		"subid")
	pager := client.List("testrg",
		"lb1",
		&LoadBalancerLoadBalancingRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LoadBalancingRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LoadBalancingRule.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancerLoadBalancingRules_Get(t *testing.T) {
	// From example LoadBalancerLoadBalancingRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerLoadBalancingRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"lb1",
		"rule1",
		&LoadBalancerLoadBalancingRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoadBalancingRule.ID == nil {
		t.Fatal("LoadBalancingRule.ID should not be nil!")
	}
}

func TestLoadBalancerOutboundRules_List(t *testing.T) {
	// From example LoadBalancerOutboundRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerOutboundRulesClient(con,
		"subid")
	pager := client.List("testrg",
		"lb1",
		&LoadBalancerOutboundRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OutboundRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OutboundRule.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancerOutboundRules_Get(t *testing.T) {
	// From example LoadBalancerOutboundRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerOutboundRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"lb1",
		"rule1",
		&LoadBalancerOutboundRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OutboundRule.ID == nil {
		t.Fatal("OutboundRule.ID should not be nil!")
	}
}

func TestLoadBalancerNetworkInterfaces_List(t *testing.T) {
	// From example LoadBalancerNetworkInterfaceListSimple
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerNetworkInterfacesClient(con,
		"subid")
	pager := client.List("testrg",
		"lb",
		&LoadBalancerNetworkInterfacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}

	// From example LoadBalancerNetworkInterfaceListVmss
	pager = client.List("testrg",
		"lb",
		&LoadBalancerNetworkInterfacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterface.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterface.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancerProbes_List(t *testing.T) {
	// From example LoadBalancerProbeList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerProbesClient(con,
		"subid")
	pager := client.List("testrg",
		"lb",
		&LoadBalancerProbesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Probe.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Probe.ID should not be nil!")
			}
		}
	}
}

func TestLoadBalancerProbes_Get(t *testing.T) {
	// From example LoadBalancerProbeGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoadBalancerProbesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"lb",
		"probe1",
		&LoadBalancerProbesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Probe.ID == nil {
		t.Fatal("Probe.ID should not be nil!")
	}
}

func TestNatGateways_Delete(t *testing.T) {
	// From example Delete nat gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-natGateway",
		&NatGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNatGateways_Get(t *testing.T) {
	// From example Get nat gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-natGateway",
		&NatGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NatGateway.ID == nil {
		t.Fatal("NatGateway.ID should not be nil!")
	}
}

func TestNatGateways_CreateOrUpdate(t *testing.T) {
	// From example Create nat gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-natgateway",
		NatGateway{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &NatGatewayPropertiesFormat{
				PublicIPAddresses: []*SubResource{
					{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
					}},
				PublicIPPrefixes: []*SubResource{
					{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
					}},
			},
			SKU: &NatGatewaySKU{
				Name: NatGatewaySKUNameStandard.ToPtr(),
			},
		},
		&NatGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NatGateway.ID == nil {
		t.Fatal("NatGateway.ID should not be nil!")
	}
}

func TestNatGateways_UpdateTags(t *testing.T) {
	// From example Update nat gateway tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatGatewaysClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-natGateway",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&NatGatewaysUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NatGateway.ID == nil {
		t.Fatal("NatGateway.ID should not be nil!")
	}
}

func TestNatGateways_ListAll(t *testing.T) {
	// From example List all nat gateways
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatGatewaysClient(con,
		"subid")
	pager := client.ListAll(&NatGatewaysListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NatGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NatGateway.ID should not be nil!")
			}
		}
	}
}

func TestNatGateways_List(t *testing.T) {
	// From example List nat gateways in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatGatewaysClient(con,
		"subid")
	pager := client.List("rg1",
		&NatGatewaysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NatGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NatGateway.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaceIPConfigurations_List(t *testing.T) {
	// From example NetworkInterfaceIPConfigurationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceIPConfigurationsClient(con,
		"subid")
	pager := client.List("testrg",
		"nic1",
		&NetworkInterfaceIPConfigurationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterfaceIPConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterfaceIPConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaceIPConfigurations_Get(t *testing.T) {
	// From example NetworkInterfaceIPConfigurationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceIPConfigurationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"mynic",
		"ipconfig1",
		&NetworkInterfaceIPConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterfaceIPConfiguration.ID == nil {
		t.Fatal("NetworkInterfaceIPConfiguration.ID should not be nil!")
	}
}

func TestNetworkInterfaceLoadBalancers_List(t *testing.T) {
	// From example NetworkInterfaceLoadBalancerList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceLoadBalancersClient(con,
		"subid")
	pager := client.List("testrg",
		"nic1",
		&NetworkInterfaceLoadBalancersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LoadBalancer.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LoadBalancer.ID should not be nil!")
			}
		}
	}
}

func TestNetworkInterfaceTapConfigurations_Delete(t *testing.T) {
	// From example Delete tap configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceTapConfigurationsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-networkinterface",
		"test-tapconfiguration",
		&NetworkInterfaceTapConfigurationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkInterfaceTapConfigurations_Get(t *testing.T) {
	// From example Get Network Interface Tap Configurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceTapConfigurationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"mynic",
		"tapconfiguration1",
		&NetworkInterfaceTapConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterfaceTapConfiguration.ID == nil {
		t.Fatal("NetworkInterfaceTapConfiguration.ID should not be nil!")
	}
}

func TestNetworkInterfaceTapConfigurations_CreateOrUpdate(t *testing.T) {
	// From example Create Network Interface Tap Configurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceTapConfigurationsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"mynic",
		"tapconfiguration1",
		NetworkInterfaceTapConfiguration{
			Properties: &NetworkInterfaceTapConfigurationPropertiesFormat{
				VirtualNetworkTap: &VirtualNetworkTap{
					Resource: Resource{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
					},
				},
			},
		},
		&NetworkInterfaceTapConfigurationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkInterfaceTapConfiguration.ID == nil {
		t.Fatal("NetworkInterfaceTapConfiguration.ID should not be nil!")
	}
}

func TestNetworkInterfaceTapConfigurations_List(t *testing.T) {
	// From example List virtual network tap configurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkInterfaceTapConfigurationsClient(con,
		"subid")
	pager := client.List("rg1",
		"mynic",
		&NetworkInterfaceTapConfigurationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkInterfaceTapConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkInterfaceTapConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestNetworkProfiles_Delete(t *testing.T) {
	// From example Delete network profile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkProfilesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"networkProfile1",
		&NetworkProfilesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkProfiles_Get(t *testing.T) {
	// From example Get network profile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkProfilesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"networkProfile1",
		&NetworkProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkProfile.ID == nil {
		t.Fatal("NetworkProfile.ID should not be nil!")
	}

	// From example Get network profile with container network interfaces
	res, err = client.Get(ctx,
		"rg1",
		"networkProfile1",
		&NetworkProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkProfile.ID == nil {
		t.Fatal("NetworkProfile.ID should not be nil!")
	}
}

func TestNetworkProfiles_CreateOrUpdate(t *testing.T) {
	// From example Create network profile defaults
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkProfilesClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"networkProfile1",
		NetworkProfile{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &NetworkProfilePropertiesFormat{
				ContainerNetworkInterfaceConfigurations: []*ContainerNetworkInterfaceConfiguration{
					{
						Name: to.StringPtr("eth1"),
						Properties: &ContainerNetworkInterfaceConfigurationPropertiesFormat{
							IPConfigurations: []*IPConfigurationProfile{
								{
									Name: to.StringPtr("ipconfig1"),
									Properties: &IPConfigurationProfilePropertiesFormat{
										Subnet: &Subnet{
											SubResource: SubResource{
												ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
											},
										},
									},
								}},
						},
					}},
			},
		},
		&NetworkProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkProfile.ID == nil {
		t.Fatal("NetworkProfile.ID should not be nil!")
	}
}

func TestNetworkProfiles_UpdateTags(t *testing.T) {
	// From example Update network profile tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkProfilesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-np",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&NetworkProfilesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkProfile.ID == nil {
		t.Fatal("NetworkProfile.ID should not be nil!")
	}
}

func TestNetworkProfiles_ListAll(t *testing.T) {
	// From example List all network profiles
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkProfilesClient(con,
		"subid")
	pager := client.ListAll(&NetworkProfilesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkProfile.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkProfile.ID should not be nil!")
			}
		}
	}
}

func TestNetworkProfiles_List(t *testing.T) {
	// From example List resource group network profiles
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkProfilesClient(con,
		"subid")
	pager := client.List("rg1",
		&NetworkProfilesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkProfile.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkProfile.ID should not be nil!")
			}
		}
	}
}

func TestNetworkSecurityGroups_Delete(t *testing.T) {
	// From example Delete network security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkSecurityGroupsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testnsg",
		&NetworkSecurityGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkSecurityGroups_Get(t *testing.T) {
	// From example Get network security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkSecurityGroupsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testnsg",
		&NetworkSecurityGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSecurityGroup.ID == nil {
		t.Fatal("NetworkSecurityGroup.ID should not be nil!")
	}
}

func TestNetworkSecurityGroups_CreateOrUpdate(t *testing.T) {
	// From example Create network security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkSecurityGroupsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testnsg",
		NetworkSecurityGroup{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
		},
		&NetworkSecurityGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSecurityGroup.ID == nil {
		t.Fatal("NetworkSecurityGroup.ID should not be nil!")
	}

	// From example Create network security group with rule
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testnsg",
		NetworkSecurityGroup{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &NetworkSecurityGroupPropertiesFormat{
				SecurityRules: []*SecurityRule{
					{
						Name: to.StringPtr("rule1"),
						Properties: &SecurityRulePropertiesFormat{
							Access:                   SecurityRuleAccessAllow.ToPtr(),
							DestinationAddressPrefix: to.StringPtr("*"),
							DestinationPortRange:     to.StringPtr("80"),
							Direction:                SecurityRuleDirectionInbound.ToPtr(),
							Priority:                 to.Int32Ptr(130),
							SourceAddressPrefix:      to.StringPtr("*"),
							SourcePortRange:          to.StringPtr("*"),
							Protocol:                 SecurityRuleProtocolAsterisk.ToPtr(),
						},
					}},
			},
		},
		&NetworkSecurityGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSecurityGroup.ID == nil {
		t.Fatal("NetworkSecurityGroup.ID should not be nil!")
	}
}

func TestNetworkSecurityGroups_UpdateTags(t *testing.T) {
	// From example Update network security group tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkSecurityGroupsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"testnsg",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&NetworkSecurityGroupsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSecurityGroup.ID == nil {
		t.Fatal("NetworkSecurityGroup.ID should not be nil!")
	}
}

func TestNetworkSecurityGroups_ListAll(t *testing.T) {
	// From example List all network security groups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkSecurityGroupsClient(con,
		"subid")
	pager := client.ListAll(&NetworkSecurityGroupsListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkSecurityGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkSecurityGroup.ID should not be nil!")
			}
		}
	}
}

func TestNetworkSecurityGroups_List(t *testing.T) {
	// From example List network security groups in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkSecurityGroupsClient(con,
		"subid")
	pager := client.List("rg1",
		&NetworkSecurityGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkSecurityGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkSecurityGroup.ID should not be nil!")
			}
		}
	}
}

func TestSecurityRules_Delete(t *testing.T) {
	// From example Delete network security rule from network security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityRulesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testnsg",
		"rule1",
		&SecurityRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSecurityRules_Get(t *testing.T) {
	// From example Get network security rule in network security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testnsg",
		"rule1",
		&SecurityRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SecurityRule.ID == nil {
		t.Fatal("SecurityRule.ID should not be nil!")
	}
}

func TestSecurityRules_CreateOrUpdate(t *testing.T) {
	// From example Create security rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityRulesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testnsg",
		"rule1",
		SecurityRule{
			Properties: &SecurityRulePropertiesFormat{
				Access:                   SecurityRuleAccessDeny.ToPtr(),
				DestinationAddressPrefix: to.StringPtr("11.0.0.0/8"),
				DestinationPortRange:     to.StringPtr("8080"),
				Direction:                SecurityRuleDirectionOutbound.ToPtr(),
				Priority:                 to.Int32Ptr(100),
				SourceAddressPrefix:      to.StringPtr("10.0.0.0/8"),
				SourcePortRange:          to.StringPtr("*"),
				Protocol:                 SecurityRuleProtocolAsterisk.ToPtr(),
			},
		},
		&SecurityRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SecurityRule.ID == nil {
		t.Fatal("SecurityRule.ID should not be nil!")
	}
}

func TestSecurityRules_List(t *testing.T) {
	// From example List network security rules in network security group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityRulesClient(con,
		"subid")
	pager := client.List("rg1",
		"testnsg",
		&SecurityRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SecurityRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SecurityRule.ID should not be nil!")
			}
		}
	}
}

func TestDefaultSecurityRules_List(t *testing.T) {
	// From example DefaultSecurityRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDefaultSecurityRulesClient(con,
		"subid")
	pager := client.List("testrg",
		"nsg1",
		&DefaultSecurityRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SecurityRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SecurityRule.ID should not be nil!")
			}
		}
	}
}

func TestDefaultSecurityRules_Get(t *testing.T) {
	// From example DefaultSecurityRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDefaultSecurityRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testrg",
		"nsg1",
		"AllowVnetInBound",
		&DefaultSecurityRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SecurityRule.ID == nil {
		t.Fatal("SecurityRule.ID should not be nil!")
	}
}

func TestNetworkVirtualAppliances_Delete(t *testing.T) {
	// From example Delete NetworkVirtualAppliance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkVirtualAppliancesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nva",
		&NetworkVirtualAppliancesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkVirtualAppliances_Get(t *testing.T) {
	// From example Get NetworkVirtualAppliance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkVirtualAppliancesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"nva",
		&NetworkVirtualAppliancesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkVirtualAppliance.ID == nil {
		t.Fatal("NetworkVirtualAppliance.ID should not be nil!")
	}
}

func TestNetworkVirtualAppliances_UpdateTags(t *testing.T) {
	// From example Update NetworkVirtualAppliance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkVirtualAppliancesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nva",
		TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&NetworkVirtualAppliancesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkVirtualAppliance.ID == nil {
		t.Fatal("NetworkVirtualAppliance.ID should not be nil!")
	}
}

func TestNetworkVirtualAppliances_CreateOrUpdate(t *testing.T) {
	// From example Create NetworkVirtualAppliance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkVirtualAppliancesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nva",
		NetworkVirtualAppliance{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Identity: &ManagedServiceIdentity{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{},
				},
			},
			Properties: &NetworkVirtualAppliancePropertiesFormat{
				BootStrapConfigurationBlobs: []*string{
					to.StringPtr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
				CloudInitConfigurationBlobs: []*string{
					to.StringPtr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
				NvaSKU: &VirtualApplianceSKUProperties{
					BundledScaleUnit:   to.StringPtr("1"),
					MarketPlaceVersion: to.StringPtr("12.1"),
					Vendor:             to.StringPtr("Cisco SDWAN"),
				},
				VirtualApplianceAsn: to.Int64Ptr(10000),
				VirtualHub: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		},
		&NetworkVirtualAppliancesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkVirtualAppliance.ID == nil {
		t.Fatal("NetworkVirtualAppliance.ID should not be nil!")
	}
}

func TestNetworkVirtualAppliances_ListByResourceGroup(t *testing.T) {
	// From example List all Network Virtual Appliance for a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkVirtualAppliancesClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&NetworkVirtualAppliancesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkVirtualAppliance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkVirtualAppliance.ID should not be nil!")
			}
		}
	}
}

func TestNetworkVirtualAppliances_List(t *testing.T) {
	// From example List all Network Virtual Appliances for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkVirtualAppliancesClient(con,
		"subid")
	pager := client.List(&NetworkVirtualAppliancesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkVirtualAppliance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkVirtualAppliance.ID should not be nil!")
			}
		}
	}
}

func TestVirtualApplianceSites_Delete(t *testing.T) {
	// From example Delete Network Virtual Appliance Site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualApplianceSitesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nva",
		"site1",
		&VirtualApplianceSitesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualApplianceSites_Get(t *testing.T) {
	// From example GetNetwork Virtual Appliance Site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualApplianceSitesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"nva",
		"site1",
		&VirtualApplianceSitesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualApplianceSite.ID == nil {
		t.Fatal("VirtualApplianceSite.ID should not be nil!")
	}
}

func TestVirtualApplianceSites_CreateOrUpdate(t *testing.T) {
	// From example Create Network Virtual Appliance Site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualApplianceSitesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nva",
		"site1",
		VirtualApplianceSite{
			Properties: &VirtualApplianceSiteProperties{
				AddressPrefix: to.StringPtr("192.168.1.0/24"),
				O365Policy: &Office365PolicyProperties{
					BreakOutCategories: &BreakOutCategoryPolicies{
						Default:  to.BoolPtr(true),
						Allow:    to.BoolPtr(true),
						Optimize: to.BoolPtr(true),
					},
				},
			},
		},
		&VirtualApplianceSitesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualApplianceSite.ID == nil {
		t.Fatal("VirtualApplianceSite.ID should not be nil!")
	}
}

func TestVirtualApplianceSites_List(t *testing.T) {
	// From example List all Network Virtual Appliance sites for a given Network Virtual Appliance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualApplianceSitesClient(con,
		"subid")
	pager := client.List("rg1",
		"nva",
		&VirtualApplianceSitesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualApplianceSite.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualApplianceSite.ID should not be nil!")
			}
		}
	}
}

func TestVirtualApplianceSkus_List(t *testing.T) {
	// From example NetworkVirtualApplianceSkuListResult
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualApplianceSKUsClient(con,
		"subid")
	pager := client.List(&VirtualApplianceSKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkVirtualApplianceSKU.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkVirtualApplianceSKU.ID should not be nil!")
			}
		}
	}
}

func TestVirtualApplianceSkus_Get(t *testing.T) {
	// From example NetworkVirtualApplianceSkuGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualApplianceSKUsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"ciscoSdwan",
		&VirtualApplianceSKUsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkVirtualApplianceSKU.ID == nil {
		t.Fatal("NetworkVirtualApplianceSKU.ID should not be nil!")
	}
}

func TestInboundSecurityRule_CreateOrUpdate(t *testing.T) {
	// From example Create Network Virtual Appliance Inbound Security Rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInboundSecurityRuleClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nva",
		"rule1",
		InboundSecurityRule{
			Properties: &InboundSecurityRuleProperties{
				Rules: []*InboundSecurityRules{
					{
						DestinationPortRange: to.Int32Ptr(22),
						SourceAddressPrefix:  to.StringPtr("50.20.121.5/32"),
						Protocol:             InboundSecurityRulesProtocolTCP.ToPtr(),
					}},
			},
		},
		&InboundSecurityRuleBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InboundSecurityRule.ID == nil {
		t.Fatal("InboundSecurityRule.ID should not be nil!")
	}
}

func TestNetworkWatchers_CreateOrUpdate(t *testing.T) {
	// From example Create network watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"nw1",
		NetworkWatcher{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &NetworkWatcherPropertiesFormat{},
		},
		&NetworkWatchersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkWatcher.ID == nil {
		t.Fatal("NetworkWatcher.ID should not be nil!")
	}
}

func TestNetworkWatchers_Get(t *testing.T) {
	// From example Get network watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		&NetworkWatchersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkWatcher.ID == nil {
		t.Fatal("NetworkWatcher.ID should not be nil!")
	}
}

func TestNetworkWatchers_Delete(t *testing.T) {
	// From example Delete network watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		&NetworkWatchersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_UpdateTags(t *testing.T) {
	// From example Update network watcher tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nw1",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&NetworkWatchersUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkWatcher.ID == nil {
		t.Fatal("NetworkWatcher.ID should not be nil!")
	}
}

func TestNetworkWatchers_List(t *testing.T) {
	// From example List network watchers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	_, err := client.List(ctx,
		"rg1",
		&NetworkWatchersListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_ListAll(t *testing.T) {
	// From example List all network watchers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	_, err := client.ListAll(ctx,
		&NetworkWatchersListAllOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetTopology(t *testing.T) {
	// From example Get Topology
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	res, err := client.GetTopology(ctx,
		"rg1",
		"nw1",
		TopologyParameters{
			TargetResourceGroupName: to.StringPtr("rg2"),
		},
		&NetworkWatchersGetTopologyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Topology.ID == nil {
		t.Fatal("Topology.ID should not be nil!")
	}
}

func TestNetworkWatchers_VerifyIPFlow(t *testing.T) {
	// From example Ip flow verify
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginVerifyIPFlow(ctx,
		"rg1",
		"nw1",
		VerificationIPFlowParameters{
			Direction:        DirectionOutbound.ToPtr(),
			LocalIPAddress:   to.StringPtr("10.2.0.4"),
			LocalPort:        to.StringPtr("80"),
			RemoteIPAddress:  to.StringPtr("121.10.1.1"),
			RemotePort:       to.StringPtr("80"),
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
			Protocol:         IPFlowProtocolTCP.ToPtr(),
		},
		&NetworkWatchersBeginVerifyIPFlowOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetNextHop(t *testing.T) {
	// From example Get next hop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetNextHop(ctx,
		"rg1",
		"nw1",
		NextHopParameters{
			DestinationIPAddress: to.StringPtr("10.0.0.10"),
			SourceIPAddress:      to.StringPtr("10.0.0.5"),
			TargetNicResourceID:  to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1"),
			TargetResourceID:     to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&NetworkWatchersBeginGetNextHopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetVMSecurityRules(t *testing.T) {
	// From example Get security group view
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetVMSecurityRules(ctx,
		"rg1",
		"nw1",
		SecurityGroupViewParameters{
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&NetworkWatchersBeginGetVMSecurityRulesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetTroubleshooting(t *testing.T) {
	// From example Get troubleshooting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetTroubleshooting(ctx,
		"rg1",
		"nw1",
		TroubleshootingParameters{
			Properties: &TroubleshootingProperties{
				StorageID:   to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/st1"),
				StoragePath: to.StringPtr("https://st1.blob.core.windows.net/cn1"),
			},
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&NetworkWatchersBeginGetTroubleshootingOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetTroubleshootingResult(t *testing.T) {
	// From example Get troubleshoot result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetTroubleshootingResult(ctx,
		"rg1",
		"nw1",
		QueryTroubleshootingParameters{
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&NetworkWatchersBeginGetTroubleshootingResultOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_SetFlowLogConfiguration(t *testing.T) {
	// From example Configure flow log
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginSetFlowLogConfiguration(ctx,
		"rg1",
		"nw1",
		FlowLogInformation{
			Properties: &FlowLogProperties{
				Enabled:   to.BoolPtr(true),
				StorageID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/st1"),
			},
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
		},
		&NetworkWatchersBeginSetFlowLogConfigurationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetFlowLogStatus(t *testing.T) {
	// From example Get flow log status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetFlowLogStatus(ctx,
		"rg1",
		"nw1",
		FlowLogStatusParameters{
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
		},
		&NetworkWatchersBeginGetFlowLogStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_CheckConnectivity(t *testing.T) {
	// From example Check connectivity
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginCheckConnectivity(ctx,
		"rg1",
		"nw1",
		ConnectivityParameters{
			Destination: &ConnectivityDestination{
				Address: to.StringPtr("192.168.100.4"),
				Port:    to.Int32Ptr(3389),
			},
			PreferredIPVersion: IPVersionIPv4.ToPtr(),
			Source: &ConnectivitySource{
				ResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
			},
		},
		&NetworkWatchersBeginCheckConnectivityOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetAzureReachabilityReport(t *testing.T) {
	// From example Get Azure Reachability Report
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetAzureReachabilityReport(ctx,
		"rg1",
		"nw1",
		AzureReachabilityReportParameters{
			AzureLocations: []*string{
				to.StringPtr("West US")},
			EndTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-10T00:00:00Z"); return t }()),
			ProviderLocation: &AzureReachabilityReportLocation{
				Country: to.StringPtr("United States"),
				State:   to.StringPtr("washington"),
			},
			Providers: []*string{
				to.StringPtr("Frontier Communications of America, Inc. - ASN 5650")},
			StartTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-07T00:00:00Z"); return t }()),
		},
		&NetworkWatchersBeginGetAzureReachabilityReportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_ListAvailableProviders(t *testing.T) {
	// From example Get Available Providers List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginListAvailableProviders(ctx,
		"rg1",
		"nw1",
		AvailableProvidersListParameters{
			AzureLocations: []*string{
				to.StringPtr("West US")},
			City:    to.StringPtr("seattle"),
			Country: to.StringPtr("United States"),
			State:   to.StringPtr("washington"),
		},
		&NetworkWatchersBeginListAvailableProvidersOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkWatchers_GetNetworkConfigurationDiagnostic(t *testing.T) {
	// From example Network configuration diagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkWatchersClient(con,
		"subid")
	poller, err := client.BeginGetNetworkConfigurationDiagnostic(ctx,
		"rg1",
		"nw1",
		NetworkConfigurationDiagnosticParameters{
			Profiles: []*NetworkConfigurationDiagnosticProfile{
				{
					Destination:     to.StringPtr("12.11.12.14"),
					DestinationPort: to.StringPtr("12100"),
					Direction:       DirectionInbound.ToPtr(),
					Source:          to.StringPtr("10.1.0.4"),
					Protocol:        to.StringPtr("TCP"),
				}},
			TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&NetworkWatchersBeginGetNetworkConfigurationDiagnosticOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPacketCaptures_Create(t *testing.T) {
	// From example Create packet capture
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPacketCapturesClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"nw1",
		"pc1",
		PacketCapture{
			Properties: &PacketCaptureParameters{
				BytesToCapturePerPacket: to.Int64Ptr(10000),
				Filters: []*PacketCaptureFilter{
					{
						LocalIPAddress: to.StringPtr("10.0.0.4"),
						LocalPort:      to.StringPtr("80"),
						Protocol:       PcProtocolTCP.ToPtr(),
					}},
				StorageLocation: &PacketCaptureStorageLocation{
					FilePath:    to.StringPtr("D:\\capture\\pc1.cap"),
					StorageID:   to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Storage/storageAccounts/pcstore"),
					StoragePath: to.StringPtr("https://mytestaccountname.blob.core.windows.net/capture/pc1.cap"),
				},
				Target:               to.StringPtr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
				TimeLimitInSeconds:   to.Int32Ptr(100),
				TotalBytesPerSession: to.Int64Ptr(100000),
			},
		},
		&PacketCapturesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PacketCaptureResult.ID == nil {
		t.Fatal("PacketCaptureResult.ID should not be nil!")
	}
}

func TestPacketCaptures_Get(t *testing.T) {
	// From example Get packet capture
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPacketCapturesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		"pc1",
		&PacketCapturesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PacketCaptureResult.ID == nil {
		t.Fatal("PacketCaptureResult.ID should not be nil!")
	}
}

func TestPacketCaptures_Delete(t *testing.T) {
	// From example Delete packet capture
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPacketCapturesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		"pc1",
		&PacketCapturesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPacketCaptures_Stop(t *testing.T) {
	// From example Stop packet capture
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPacketCapturesClient(con,
		"subid")
	poller, err := client.BeginStop(ctx,
		"rg1",
		"nw1",
		"pc1",
		&PacketCapturesBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPacketCaptures_GetStatus(t *testing.T) {
	// From example Query packet capture status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPacketCapturesClient(con,
		"subid")
	poller, err := client.BeginGetStatus(ctx,
		"rg1",
		"nw1",
		"pc1",
		&PacketCapturesBeginGetStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PacketCaptureQueryStatusResult.ID == nil {
		t.Fatal("PacketCaptureQueryStatusResult.ID should not be nil!")
	}
}

func TestPacketCaptures_List(t *testing.T) {
	// From example List packet captures
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPacketCapturesClient(con,
		"subid")
	_, err := client.List(ctx,
		"rg1",
		"nw1",
		&PacketCapturesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectionMonitors_CreateOrUpdate(t *testing.T) {
	// From example Create connection monitor V1
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nw1",
		"cm1",
		ConnectionMonitor{
			Location: to.StringPtr("eastus"),
			Properties: &ConnectionMonitorParameters{
				Endpoints: []*ConnectionMonitorEndpoint{
					{
						Name:       to.StringPtr("source"),
						ResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1"),
					},
					{
						Name:    to.StringPtr("destination"),
						Address: to.StringPtr("bing.com"),
					}},
				TestConfigurations: []*ConnectionMonitorTestConfiguration{
					{
						Name: to.StringPtr("tcp"),
						TCPConfiguration: &ConnectionMonitorTCPConfiguration{
							Port: to.Int32Ptr(80),
						},
						TestFrequencySec: to.Int32Ptr(60),
						Protocol:         ConnectionMonitorTestConfigurationProtocolTCP.ToPtr(),
					}},
				TestGroups: []*ConnectionMonitorTestGroup{
					{
						Name: to.StringPtr("tg"),
						Destinations: []*string{
							to.StringPtr("destination")},
						Sources: []*string{
							to.StringPtr("source")},
						TestConfigurations: []*string{
							to.StringPtr("tcp")},
					}},
			},
		},
		&ConnectionMonitorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionMonitorResult.ID == nil {
		t.Fatal("ConnectionMonitorResult.ID should not be nil!")
	}

	// From example Create connection monitor V2
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nw1",
		"cm1",
		ConnectionMonitor{
			Properties: &ConnectionMonitorParameters{
				Endpoints: []*ConnectionMonitorEndpoint{
					{
						Name:       to.StringPtr("vm1"),
						ResourceID: to.StringPtr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/NwRgIrinaCentralUSEUAP/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
					{
						Name: to.StringPtr("CanaryWorkspaceVamshi"),
						Filter: &ConnectionMonitorEndpointFilter{
							Type: ConnectionMonitorEndpointFilterTypeInclude.ToPtr(),
							Items: []*ConnectionMonitorEndpointFilterItem{
								{
									Type:    ConnectionMonitorEndpointFilterItemTypeAgentAddress.ToPtr(),
									Address: to.StringPtr("npmuser"),
								}},
						},
						ResourceID: to.StringPtr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/vasamudrRG/providers/Microsoft.OperationalInsights/workspaces/vasamudrWorkspace"),
					},
					{
						Name:    to.StringPtr("bing"),
						Address: to.StringPtr("bing.com"),
					},
					{
						Name:    to.StringPtr("google"),
						Address: to.StringPtr("google.com"),
					}},
				Outputs: []*ConnectionMonitorOutput{},
				TestConfigurations: []*ConnectionMonitorTestConfiguration{
					{
						Name: to.StringPtr("testConfig1"),
						TCPConfiguration: &ConnectionMonitorTCPConfiguration{
							DisableTraceRoute: to.BoolPtr(false),
							Port:              to.Int32Ptr(80),
						},
						TestFrequencySec: to.Int32Ptr(60),
						Protocol:         ConnectionMonitorTestConfigurationProtocolTCP.ToPtr(),
					}},
				TestGroups: []*ConnectionMonitorTestGroup{
					{
						Name: to.StringPtr("test1"),
						Destinations: []*string{
							to.StringPtr("bing"),
							to.StringPtr("google")},
						Disable: to.BoolPtr(false),
						Sources: []*string{
							to.StringPtr("vm1"),
							to.StringPtr("CanaryWorkspaceVamshi")},
						TestConfigurations: []*string{
							to.StringPtr("testConfig1")},
					}},
			},
		},
		&ConnectionMonitorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionMonitorResult.ID == nil {
		t.Fatal("ConnectionMonitorResult.ID should not be nil!")
	}
}

func TestConnectionMonitors_Get(t *testing.T) {
	// From example Get connection monitor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		"cm1",
		&ConnectionMonitorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionMonitorResult.ID == nil {
		t.Fatal("ConnectionMonitorResult.ID should not be nil!")
	}
}

func TestConnectionMonitors_Delete(t *testing.T) {
	// From example Delete connection monitor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		"cm1",
		&ConnectionMonitorsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectionMonitors_UpdateTags(t *testing.T) {
	// From example Update connection monitor tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nw1",
		"cm1",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ConnectionMonitorsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionMonitorResult.ID == nil {
		t.Fatal("ConnectionMonitorResult.ID should not be nil!")
	}
}

func TestConnectionMonitors_Stop(t *testing.T) {
	// From example Stop connection monitor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	poller, err := client.BeginStop(ctx,
		"rg1",
		"nw1",
		"cm1",
		&ConnectionMonitorsBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectionMonitors_Start(t *testing.T) {
	// From example Start connection monitor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	poller, err := client.BeginStart(ctx,
		"rg1",
		"nw1",
		"cm1",
		&ConnectionMonitorsBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectionMonitors_Query(t *testing.T) {
	// From example Query connection monitor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	poller, err := client.BeginQuery(ctx,
		"rg1",
		"nw1",
		"cm1",
		&ConnectionMonitorsBeginQueryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectionMonitors_List(t *testing.T) {
	// From example List connection monitors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionMonitorsClient(con,
		"subid")
	_, err := client.List(ctx,
		"rg1",
		"nw1",
		&ConnectionMonitorsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFlowLogs_CreateOrUpdate(t *testing.T) {
	// From example Create or update flow log
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFlowLogsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nw1",
		"fl",
		FlowLog{
			Resource: Resource{
				Location: to.StringPtr("centraluseuap"),
			},
			Properties: &FlowLogPropertiesFormat{
				Format: &FlowLogFormatParameters{
					Type:    FlowLogFormatTypeJSON.ToPtr(),
					Version: to.Int32Ptr(1),
				},
				Enabled:          to.BoolPtr(true),
				StorageID:        to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/nwtest1mgvbfmqsigdxe"),
				TargetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/desmondcentral-nsg"),
			},
		},
		&FlowLogsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FlowLog.ID == nil {
		t.Fatal("FlowLog.ID should not be nil!")
	}
}

func TestFlowLogs_UpdateTags(t *testing.T) {
	// From example Update flow log tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFlowLogsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nw",
		"fl",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&FlowLogsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FlowLog.ID == nil {
		t.Fatal("FlowLog.ID should not be nil!")
	}
}

func TestFlowLogs_Get(t *testing.T) {
	// From example Get flow log
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFlowLogsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		"flowLog1",
		&FlowLogsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FlowLog.ID == nil {
		t.Fatal("FlowLog.ID should not be nil!")
	}
}

func TestFlowLogs_Delete(t *testing.T) {
	// From example Delete flow log
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFlowLogsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		"fl",
		&FlowLogsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFlowLogs_List(t *testing.T) {
	// From example List connection monitors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFlowLogsClient(con,
		"subid")
	pager := client.List("rg1",
		"nw1",
		&FlowLogsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FlowLog.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FlowLog.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get a list of operations for a resource provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateEndpoints_Delete(t *testing.T) {
	// From example Delete private endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointsClient(con,
		"subId")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPe",
		&PrivateEndpointsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpoints_Get(t *testing.T) {
	// From example Get private endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointsClient(con,
		"subId")
	res, err := client.Get(ctx,
		"rg1",
		"testPe",
		&PrivateEndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpoint.ID == nil {
		t.Fatal("PrivateEndpoint.ID should not be nil!")
	}

	// From example Get private endpoint with application security groups
	res, err = client.Get(ctx,
		"rg1",
		"testPe",
		&PrivateEndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpoint.ID == nil {
		t.Fatal("PrivateEndpoint.ID should not be nil!")
	}

	// From example Get private endpoint with manual approval connection
	res, err = client.Get(ctx,
		"rg1",
		"testPe",
		&PrivateEndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpoint.ID == nil {
		t.Fatal("PrivateEndpoint.ID should not be nil!")
	}
}

func TestPrivateEndpoints_CreateOrUpdate(t *testing.T) {
	// From example Create private endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointsClient(con,
		"subId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		PrivateEndpoint{
			Resource: Resource{
				Location: to.StringPtr("eastus2euap"),
			},
			Properties: &PrivateEndpointProperties{
				CustomNetworkInterfaceName: to.StringPtr("testPeNic"),
				IPConfigurations: []*PrivateEndpointIPConfiguration{
					{
						Name: to.StringPtr("pestaticconfig"),
						Properties: &PrivateEndpointIPConfigurationProperties{
							GroupID:          to.StringPtr("file"),
							MemberName:       to.StringPtr("file"),
							PrivateIPAddress: to.StringPtr("192.168.0.6"),
						},
					}},
				PrivateLinkServiceConnections: []*PrivateLinkServiceConnection{
					{
						Properties: &PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.StringPtr("groupIdFromResource")},
							PrivateLinkServiceID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.StringPtr("Please approve my connection."),
						},
					}},
				Subnet: &Subnet{
					SubResource: SubResource{
						ID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
					},
				},
			},
		},
		&PrivateEndpointsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpoint.ID == nil {
		t.Fatal("PrivateEndpoint.ID should not be nil!")
	}

	// From example Create private endpoint with application security groups
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		PrivateEndpoint{
			Resource: Resource{
				Location: to.StringPtr("eastus2euap"),
			},
			Properties: &PrivateEndpointProperties{
				ApplicationSecurityGroups: []*ApplicationSecurityGroup{
					{
						Resource: Resource{
							ID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/applicationSecurityGroup/asg1"),
						},
					}},
				PrivateLinkServiceConnections: []*PrivateLinkServiceConnection{
					{
						Properties: &PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.StringPtr("groupIdFromResource")},
							PrivateLinkServiceID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.StringPtr("Please approve my connection."),
						},
					}},
				Subnet: &Subnet{
					SubResource: SubResource{
						ID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
					},
				},
			},
		},
		&PrivateEndpointsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpoint.ID == nil {
		t.Fatal("PrivateEndpoint.ID should not be nil!")
	}

	// From example Create private endpoint with manual approval connection
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		PrivateEndpoint{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &PrivateEndpointProperties{
				CustomNetworkInterfaceName: to.StringPtr("testPeNic"),
				IPConfigurations: []*PrivateEndpointIPConfiguration{
					{
						Name: to.StringPtr("pestaticconfig"),
						Properties: &PrivateEndpointIPConfigurationProperties{
							GroupID:          to.StringPtr("file"),
							MemberName:       to.StringPtr("file"),
							PrivateIPAddress: to.StringPtr("192.168.0.5"),
						},
					}},
				ManualPrivateLinkServiceConnections: []*PrivateLinkServiceConnection{
					{
						Properties: &PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.StringPtr("groupIdFromResource")},
							PrivateLinkServiceID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.StringPtr("Please manually approve my connection."),
						},
					}},
				Subnet: &Subnet{
					SubResource: SubResource{
						ID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
					},
				},
			},
		},
		&PrivateEndpointsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpoint.ID == nil {
		t.Fatal("PrivateEndpoint.ID should not be nil!")
	}
}

func TestPrivateEndpoints_List(t *testing.T) {
	// From example List private endpoints in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointsClient(con,
		"subId")
	pager := client.List("rg1",
		&PrivateEndpointsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpoint.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpoints_ListBySubscription(t *testing.T) {
	// From example List all private endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointsClient(con,
		"subId")
	pager := client.ListBySubscription(&PrivateEndpointsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpoint.ID should not be nil!")
			}
		}
	}
}

func TestAvailablePrivateEndpointTypes_List(t *testing.T) {
	// From example Get available PrivateEndpoint types
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailablePrivateEndpointTypesClient(con,
		"subId")
	pager := client.List("regionName",
		&AvailablePrivateEndpointTypesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AvailablePrivateEndpointType.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AvailablePrivateEndpointType.ID should not be nil!")
			}
		}
	}
}

func TestAvailablePrivateEndpointTypes_ListByResourceGroup(t *testing.T) {
	// From example Get available PrivateEndpoint types in the resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailablePrivateEndpointTypesClient(con,
		"subId")
	pager := client.ListByResourceGroup("regionName",
		"rg1",
		&AvailablePrivateEndpointTypesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AvailablePrivateEndpointType.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AvailablePrivateEndpointType.ID should not be nil!")
			}
		}
	}
}

func TestPrivateDnsZoneGroups_Delete(t *testing.T) {
	// From example Delete private dns zone group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateDNSZoneGroupsClient(con,
		"subId")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPe",
		"testPdnsgroup",
		&PrivateDNSZoneGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateDnsZoneGroups_Get(t *testing.T) {
	// From example Get private dns zone group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateDNSZoneGroupsClient(con,
		"subId")
	res, err := client.Get(ctx,
		"rg1",
		"testPe",
		"testPdnsgroup",
		&PrivateDNSZoneGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateDNSZoneGroup.ID == nil {
		t.Fatal("PrivateDNSZoneGroup.ID should not be nil!")
	}
}

func TestPrivateDnsZoneGroups_CreateOrUpdate(t *testing.T) {
	// From example Create private dns zone group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateDNSZoneGroupsClient(con,
		"subId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		"testPdnsgroup",
		PrivateDNSZoneGroup{
			Properties: &PrivateDNSZoneGroupPropertiesFormat{
				PrivateDNSZoneConfigs: []*PrivateDNSZoneConfig{
					{
						Properties: &PrivateDNSZonePropertiesFormat{
							PrivateDNSZoneID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"),
						},
					}},
			},
		},
		&PrivateDNSZoneGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateDNSZoneGroup.ID == nil {
		t.Fatal("PrivateDNSZoneGroup.ID should not be nil!")
	}
}

func TestPrivateDnsZoneGroups_List(t *testing.T) {
	// From example List private endpoints in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateDNSZoneGroupsClient(con,
		"subId")
	pager := client.List("testPe",
		"rg1",
		&PrivateDNSZoneGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateDNSZoneGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateDNSZoneGroup.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkServices_Delete(t *testing.T) {
	// From example Delete private link service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPls",
		&PrivateLinkServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkServices_Get(t *testing.T) {
	// From example Get private link service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	res, err := client.Get(ctx,
		"rg1",
		"testPls",
		&PrivateLinkServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkService.ID == nil {
		t.Fatal("PrivateLinkService.ID should not be nil!")
	}
}

func TestPrivateLinkServices_CreateOrUpdate(t *testing.T) {
	// From example Create private link service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPls",
		PrivateLinkService{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &PrivateLinkServiceProperties{
				AutoApproval: &PrivateLinkServicePropertiesAutoApproval{
					ResourceSet: ResourceSet{
						Subscriptions: []*string{
							to.StringPtr("subscription1"),
							to.StringPtr("subscription2")},
					},
				},
				Fqdns: []*string{
					to.StringPtr("fqdn1"),
					to.StringPtr("fqdn2"),
					to.StringPtr("fqdn3")},
				IPConfigurations: []*PrivateLinkServiceIPConfiguration{
					{
						Name: to.StringPtr("fe-lb"),
						Properties: &PrivateLinkServiceIPConfigurationProperties{
							PrivateIPAddress:          to.StringPtr("10.0.1.4"),
							PrivateIPAddressVersion:   IPVersionIPv4.ToPtr(),
							PrivateIPAllocationMethod: IPAllocationMethodStatic.ToPtr(),
							Subnet: &Subnet{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
								},
							},
						},
					}},
				LoadBalancerFrontendIPConfigurations: []*FrontendIPConfiguration{
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						},
					}},
				Visibility: &PrivateLinkServicePropertiesVisibility{
					ResourceSet: ResourceSet{
						Subscriptions: []*string{
							to.StringPtr("subscription1"),
							to.StringPtr("subscription2"),
							to.StringPtr("subscription3")},
					},
				},
			},
		},
		&PrivateLinkServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkService.ID == nil {
		t.Fatal("PrivateLinkService.ID should not be nil!")
	}
}

func TestPrivateLinkServices_List(t *testing.T) {
	// From example List private link service in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	pager := client.List("rg1",
		&PrivateLinkServicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkService.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkServices_ListBySubscription(t *testing.T) {
	// From example List all private list service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	pager := client.ListBySubscription(&PrivateLinkServicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkService.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkServices_GetPrivateEndpointConnection(t *testing.T) {
	// From example Get private end point connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	res, err := client.GetPrivateEndpointConnection(ctx,
		"rg1",
		"testPls",
		"testPlePeConnection",
		&PrivateLinkServicesGetPrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateLinkServices_UpdatePrivateEndpointConnection(t *testing.T) {
	// From example approve or reject private end point connection for a private link service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	res, err := client.UpdatePrivateEndpointConnection(ctx,
		"rg1",
		"testPls",
		"testPlePeConnection",
		PrivateEndpointConnection{
			Name: to.StringPtr("testPlePeConnection"),
			Properties: &PrivateEndpointConnectionProperties{
				PrivateEndpoint: &PrivateEndpoint{
					Resource: Resource{
						ID: to.StringPtr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
					},
				},
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("approved it for some reason."),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&PrivateLinkServicesUpdatePrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateLinkServices_DeletePrivateEndpointConnection(t *testing.T) {
	// From example delete private end point connection for a private link service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"rg1",
		"testPls",
		"testPlePeConnection",
		&PrivateLinkServicesBeginDeletePrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkServices_ListPrivateEndpointConnections(t *testing.T) {
	// From example List private link service in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	pager := client.ListPrivateEndpointConnections("rg1",
		"testPls",
		&PrivateLinkServicesListPrivateEndpointConnectionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkServices_CheckPrivateLinkServiceVisibility(t *testing.T) {
	// From example Check private link service visibility
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subid")
	poller, err := client.BeginCheckPrivateLinkServiceVisibility(ctx,
		"westus",
		CheckPrivateLinkServiceVisibilityRequest{
			PrivateLinkServiceAlias: to.StringPtr("mypls.00000000-0000-0000-0000-000000000000.azure.privatelinkservice"),
		},
		&PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkServices_CheckPrivateLinkServiceVisibilityByResourceGroup(t *testing.T) {
	// From example Check private link service visibility
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subid")
	poller, err := client.BeginCheckPrivateLinkServiceVisibilityByResourceGroup(ctx,
		"westus",
		"rg1",
		CheckPrivateLinkServiceVisibilityRequest{
			PrivateLinkServiceAlias: to.StringPtr("mypls.00000000-0000-0000-0000-000000000000.azure.privatelinkservice"),
		},
		&PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkServices_ListAutoApprovedPrivateLinkServices(t *testing.T) {
	// From example Get list of private link service id that can be linked to a private end point with auto approved
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	pager := client.ListAutoApprovedPrivateLinkServices("regionName",
		&PrivateLinkServicesListAutoApprovedPrivateLinkServicesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateLinkServices_ListAutoApprovedPrivateLinkServicesByResourceGroup(t *testing.T) {
	// From example Get list of private link service id that can be linked to a private end point with auto approved
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"subId")
	pager := client.ListAutoApprovedPrivateLinkServicesByResourceGroup("regionName",
		"rg1",
		&PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPublicIPPrefixes_Delete(t *testing.T) {
	// From example Delete public IP prefix
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPPrefixesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ipprefix",
		&PublicIPPrefixesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPublicIPPrefixes_Get(t *testing.T) {
	// From example Get public IP prefix
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPPrefixesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-ipprefix",
		&PublicIPPrefixesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPPrefix.ID == nil {
		t.Fatal("PublicIPPrefix.ID should not be nil!")
	}
}

func TestPublicIPPrefixes_CreateOrUpdate(t *testing.T) {
	// From example Create public IP prefix allocation method
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPPrefixesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ipprefix",
		PublicIPPrefix{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &PublicIPPrefixPropertiesFormat{
				PrefixLength:           to.Int32Ptr(30),
				PublicIPAddressVersion: IPVersionIPv4.ToPtr(),
			},
			SKU: &PublicIPPrefixSKU{
				Name: PublicIPPrefixSKUNameStandard.ToPtr(),
				Tier: PublicIPPrefixSKUTierRegional.ToPtr(),
			},
		},
		&PublicIPPrefixesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPPrefix.ID == nil {
		t.Fatal("PublicIPPrefix.ID should not be nil!")
	}

	// From example Create public IP prefix defaults
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ipprefix",
		PublicIPPrefix{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &PublicIPPrefixPropertiesFormat{
				PrefixLength: to.Int32Ptr(30),
			},
			SKU: &PublicIPPrefixSKU{
				Name: PublicIPPrefixSKUNameStandard.ToPtr(),
			},
		},
		&PublicIPPrefixesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPPrefix.ID == nil {
		t.Fatal("PublicIPPrefix.ID should not be nil!")
	}
}

func TestPublicIPPrefixes_UpdateTags(t *testing.T) {
	// From example Update public IP prefix tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPPrefixesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ipprefix",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&PublicIPPrefixesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicIPPrefix.ID == nil {
		t.Fatal("PublicIPPrefix.ID should not be nil!")
	}
}

func TestPublicIPPrefixes_ListAll(t *testing.T) {
	// From example List all public IP prefixes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPPrefixesClient(con,
		"subid")
	pager := client.ListAll(&PublicIPPrefixesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPPrefix.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPPrefix.ID should not be nil!")
			}
		}
	}
}

func TestPublicIPPrefixes_List(t *testing.T) {
	// From example List resource group public IP prefixes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicIPPrefixesClient(con,
		"subid")
	pager := client.List("rg1",
		&PublicIPPrefixesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicIPPrefix.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicIPPrefix.ID should not be nil!")
			}
		}
	}
}

func TestRouteFilters_Delete(t *testing.T) {
	// From example RouteFilterDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFiltersClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"filterName",
		&RouteFiltersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRouteFilters_Get(t *testing.T) {
	// From example RouteFilterGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFiltersClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"filterName",
		&RouteFiltersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteFilter.ID == nil {
		t.Fatal("RouteFilter.ID should not be nil!")
	}
}

func TestRouteFilters_CreateOrUpdate(t *testing.T) {
	// From example RouteFilterCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFiltersClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"filterName",
		RouteFilter{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &RouteFilterPropertiesFormat{
				Rules: []*RouteFilterRule{
					{
						Name: to.StringPtr("ruleName"),
						Properties: &RouteFilterRulePropertiesFormat{
							Access: AccessAllow.ToPtr(),
							Communities: []*string{
								to.StringPtr("12076:5030"),
								to.StringPtr("12076:5040")},
							RouteFilterRuleType: RouteFilterRuleTypeCommunity.ToPtr(),
						},
					}},
			},
		},
		&RouteFiltersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteFilter.ID == nil {
		t.Fatal("RouteFilter.ID should not be nil!")
	}
}

func TestRouteFilters_UpdateTags(t *testing.T) {
	// From example Update route filter tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFiltersClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"filterName",
		TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
		},
		&RouteFiltersUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteFilter.ID == nil {
		t.Fatal("RouteFilter.ID should not be nil!")
	}
}

func TestRouteFilters_ListByResourceGroup(t *testing.T) {
	// From example RouteFilterListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFiltersClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&RouteFiltersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RouteFilter.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RouteFilter.ID should not be nil!")
			}
		}
	}
}

func TestRouteFilters_List(t *testing.T) {
	// From example RouteFilterList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFiltersClient(con,
		"subid")
	pager := client.List(&RouteFiltersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RouteFilter.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RouteFilter.ID should not be nil!")
			}
		}
	}
}

func TestRouteFilterRules_Delete(t *testing.T) {
	// From example RouteFilterRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFilterRulesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"filterName",
		"ruleName",
		&RouteFilterRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRouteFilterRules_Get(t *testing.T) {
	// From example RouteFilterRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFilterRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"filterName",
		"filterName",
		&RouteFilterRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteFilterRule.ID == nil {
		t.Fatal("RouteFilterRule.ID should not be nil!")
	}
}

func TestRouteFilterRules_CreateOrUpdate(t *testing.T) {
	// From example RouteFilterRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFilterRulesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"filterName",
		"ruleName",
		RouteFilterRule{
			Properties: &RouteFilterRulePropertiesFormat{
				Access: AccessAllow.ToPtr(),
				Communities: []*string{
					to.StringPtr("12076:5030"),
					to.StringPtr("12076:5040")},
				RouteFilterRuleType: RouteFilterRuleTypeCommunity.ToPtr(),
			},
		},
		&RouteFilterRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteFilterRule.ID == nil {
		t.Fatal("RouteFilterRule.ID should not be nil!")
	}
}

func TestRouteFilterRules_ListByRouteFilter(t *testing.T) {
	// From example RouteFilterRuleListByRouteFilter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteFilterRulesClient(con,
		"subid")
	pager := client.ListByRouteFilter("rg1",
		"filterName",
		&RouteFilterRulesListByRouteFilterOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RouteFilterRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RouteFilterRule.ID should not be nil!")
			}
		}
	}
}

func TestRouteTables_Delete(t *testing.T) {
	// From example Delete route table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteTablesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testrt",
		&RouteTablesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRouteTables_Get(t *testing.T) {
	// From example Get route table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteTablesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testrt",
		&RouteTablesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteTable.ID == nil {
		t.Fatal("RouteTable.ID should not be nil!")
	}
}

func TestRouteTables_CreateOrUpdate(t *testing.T) {
	// From example Create route table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteTablesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testrt",
		RouteTable{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
		},
		&RouteTablesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteTable.ID == nil {
		t.Fatal("RouteTable.ID should not be nil!")
	}

	// From example Create route table with route
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testrt",
		RouteTable{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &RouteTablePropertiesFormat{
				DisableBgpRoutePropagation: to.BoolPtr(true),
				Routes: []*Route{
					{
						Name: to.StringPtr("route1"),
						Properties: &RoutePropertiesFormat{
							AddressPrefix: to.StringPtr("10.0.3.0/24"),
							NextHopType:   RouteNextHopTypeVirtualNetworkGateway.ToPtr(),
						},
					}},
			},
		},
		&RouteTablesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteTable.ID == nil {
		t.Fatal("RouteTable.ID should not be nil!")
	}
}

func TestRouteTables_UpdateTags(t *testing.T) {
	// From example Update route table tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteTablesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"testrt",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&RouteTablesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RouteTable.ID == nil {
		t.Fatal("RouteTable.ID should not be nil!")
	}
}

func TestRouteTables_List(t *testing.T) {
	// From example List route tables in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteTablesClient(con,
		"subid")
	pager := client.List("rg1",
		&RouteTablesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RouteTable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RouteTable.ID should not be nil!")
			}
		}
	}
}

func TestRouteTables_ListAll(t *testing.T) {
	// From example List all route tables
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRouteTablesClient(con,
		"subid")
	pager := client.ListAll(&RouteTablesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RouteTable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RouteTable.ID should not be nil!")
			}
		}
	}
}

func TestRoutes_Delete(t *testing.T) {
	// From example Delete route
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoutesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testrt",
		"route1",
		&RoutesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoutes_Get(t *testing.T) {
	// From example Get route
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoutesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testrt",
		"route1",
		&RoutesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Route.ID == nil {
		t.Fatal("Route.ID should not be nil!")
	}
}

func TestRoutes_CreateOrUpdate(t *testing.T) {
	// From example Create route
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoutesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testrt",
		"route1",
		Route{
			Properties: &RoutePropertiesFormat{
				AddressPrefix: to.StringPtr("10.0.3.0/24"),
				NextHopType:   RouteNextHopTypeVirtualNetworkGateway.ToPtr(),
			},
		},
		&RoutesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Route.ID == nil {
		t.Fatal("Route.ID should not be nil!")
	}
}

func TestRoutes_List(t *testing.T) {
	// From example List routes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRoutesClient(con,
		"subid")
	pager := client.List("rg1",
		"testrt",
		&RoutesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Route.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Route.ID should not be nil!")
			}
		}
	}
}

func TestSecurityPartnerProviders_Delete(t *testing.T) {
	// From example Delete Security Partner Provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityPartnerProvidersClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"securityPartnerProvider",
		&SecurityPartnerProvidersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSecurityPartnerProviders_Get(t *testing.T) {
	// From example Get Security Partner Provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityPartnerProvidersClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"securityPartnerProvider",
		&SecurityPartnerProvidersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SecurityPartnerProvider.ID == nil {
		t.Fatal("SecurityPartnerProvider.ID should not be nil!")
	}
}

func TestSecurityPartnerProviders_CreateOrUpdate(t *testing.T) {
	// From example Create Security Partner Provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityPartnerProvidersClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"securityPartnerProvider",
		SecurityPartnerProvider{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &SecurityPartnerProviderPropertiesFormat{
				SecurityProviderName: SecurityProviderNameZScaler.ToPtr(),
				VirtualHub: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		},
		&SecurityPartnerProvidersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SecurityPartnerProvider.ID == nil {
		t.Fatal("SecurityPartnerProvider.ID should not be nil!")
	}
}

func TestSecurityPartnerProviders_UpdateTags(t *testing.T) {
	// From example Update Security Partner Provider Tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityPartnerProvidersClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"securityPartnerProvider",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&SecurityPartnerProvidersUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SecurityPartnerProvider.ID == nil {
		t.Fatal("SecurityPartnerProvider.ID should not be nil!")
	}
}

func TestSecurityPartnerProviders_ListByResourceGroup(t *testing.T) {
	// From example List all Security Partner Providers for a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityPartnerProvidersClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&SecurityPartnerProvidersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SecurityPartnerProvider.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SecurityPartnerProvider.ID should not be nil!")
			}
		}
	}
}

func TestSecurityPartnerProviders_List(t *testing.T) {
	// From example List all Security Partner Providers for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecurityPartnerProvidersClient(con,
		"subid")
	pager := client.List(&SecurityPartnerProvidersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SecurityPartnerProvider.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SecurityPartnerProvider.ID should not be nil!")
			}
		}
	}
}

func TestBgpServiceCommunities_List(t *testing.T) {
	// From example ServiceCommunityList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBgpServiceCommunitiesClient(con,
		"subid")
	pager := client.List(&BgpServiceCommunitiesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BgpServiceCommunity.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BgpServiceCommunity.ID should not be nil!")
			}
		}
	}
}

func TestServiceEndpointPolicies_Delete(t *testing.T) {
	// From example Delete service endpoint policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPoliciesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"serviceEndpointPolicy1",
		&ServiceEndpointPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceEndpointPolicies_Get(t *testing.T) {
	// From example Get service endPoint Policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPoliciesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testServiceEndpointPolicy",
		&ServiceEndpointPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceEndpointPolicy.ID == nil {
		t.Fatal("ServiceEndpointPolicy.ID should not be nil!")
	}
}

func TestServiceEndpointPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create service endpoint policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPoliciesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPolicy",
		ServiceEndpointPolicy{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
		},
		&ServiceEndpointPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceEndpointPolicy.ID == nil {
		t.Fatal("ServiceEndpointPolicy.ID should not be nil!")
	}

	// From example Create service endpoint policy with definition
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPolicy",
		ServiceEndpointPolicy{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ServiceEndpointPolicyPropertiesFormat{
				ServiceEndpointPolicyDefinitions: []*ServiceEndpointPolicyDefinition{
					{
						Name: to.StringPtr("StorageServiceEndpointPolicyDefinition"),
						Properties: &ServiceEndpointPolicyDefinitionPropertiesFormat{
							Description: to.StringPtr("Storage Service EndpointPolicy Definition"),
							Service:     to.StringPtr("Microsoft.Storage"),
							ServiceResources: []*string{
								to.StringPtr("/subscriptions/subid1"),
								to.StringPtr("/subscriptions/subid1/resourceGroups/storageRg"),
								to.StringPtr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
						},
					}},
			},
		},
		&ServiceEndpointPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceEndpointPolicy.ID == nil {
		t.Fatal("ServiceEndpointPolicy.ID should not be nil!")
	}
}

func TestServiceEndpointPolicies_UpdateTags(t *testing.T) {
	// From example Update service endpoint policy tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPoliciesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"testServiceEndpointPolicy",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ServiceEndpointPoliciesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceEndpointPolicy.ID == nil {
		t.Fatal("ServiceEndpointPolicy.ID should not be nil!")
	}
}

func TestServiceEndpointPolicies_List(t *testing.T) {
	// From example List all service endpoint policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPoliciesClient(con,
		"subid")
	pager := client.List(&ServiceEndpointPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceEndpointPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceEndpointPolicy.ID should not be nil!")
			}
		}
	}
}

func TestServiceEndpointPolicies_ListByResourceGroup(t *testing.T) {
	// From example List resource group service endpoint policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPoliciesClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&ServiceEndpointPoliciesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceEndpointPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceEndpointPolicy.ID should not be nil!")
			}
		}
	}
}

func TestServiceEndpointPolicyDefinitions_Delete(t *testing.T) {
	// From example Delete service endpoint policy definitions from service endpoint policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPolicyDefinitionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPolicy",
		"testDefinition",
		&ServiceEndpointPolicyDefinitionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceEndpointPolicyDefinitions_Get(t *testing.T) {
	// From example Get service endpoint definition in service endpoint policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPolicyDefinitionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testPolicy",
		"testDefinition",
		&ServiceEndpointPolicyDefinitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceEndpointPolicyDefinition.ID == nil {
		t.Fatal("ServiceEndpointPolicyDefinition.ID should not be nil!")
	}
}

func TestServiceEndpointPolicyDefinitions_CreateOrUpdate(t *testing.T) {
	// From example Create service endpoint policy definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPolicyDefinitionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPolicy",
		"testDefinition",
		nil,
		&ServiceEndpointPolicyDefinitionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceEndpointPolicyDefinition.ID == nil {
		t.Fatal("ServiceEndpointPolicyDefinition.ID should not be nil!")
	}
}

func TestServiceEndpointPolicyDefinitions_ListByResourceGroup(t *testing.T) {
	// From example List service endpoint definitions in service end point policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceEndpointPolicyDefinitionsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		"testPolicy",
		&ServiceEndpointPolicyDefinitionsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceEndpointPolicyDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceEndpointPolicyDefinition.ID should not be nil!")
			}
		}
	}
}

func TestServiceTags_List(t *testing.T) {
	// From example Get list of service tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTagsClient(con,
		"subId")
	res, err := client.List(ctx,
		"westcentralus",
		&ServiceTagsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceTagsListResult.ID == nil {
		t.Fatal("ServiceTagsListResult.ID should not be nil!")
	}
}

func TestServiceTagInformation_List(t *testing.T) {
	// From example Get list of service tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTagInformationClient(con,
		"subid")
	pager := client.List("westeurope",
		&ServiceTagInformationListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceTagInformation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceTagInformation.ID should not be nil!")
			}
		}
	}

	// From example Get list of service tags with no address prefixes
	pager = client.List("westeurope",
		&ServiceTagInformationListOptions{NoAddressPrefixes: to.BoolPtr(true)})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceTagInformation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceTagInformation.ID should not be nil!")
			}
		}
	}

	// From example Get list of service tags with tag name.
	pager = client.List("westeurope",
		&ServiceTagInformationListOptions{TagName: to.StringPtr("ApiManagement")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceTagInformation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceTagInformation.ID should not be nil!")
			}
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example List usages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"subid")
	pager := client.List("westus",
		&UsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Usage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Usage.ID should not be nil!")
			}
		}
	}

	// From example List usages spaced location
	pager = client.List("West US",
		&UsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Usage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Usage.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworks_Delete(t *testing.T) {
	// From example Delete virtual network
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-vnet",
		&VirtualNetworksBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworks_Get(t *testing.T) {
	// From example Get virtual network
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"test-vnet",
		&VirtualNetworksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Get virtual network with a delegated subnet
	res, err = client.Get(ctx,
		"rg1",
		"test-vnet",
		&VirtualNetworksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Get virtual network with service association links
	res, err = client.Get(ctx,
		"rg1",
		"test-vnet",
		&VirtualNetworksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

func TestVirtualNetworks_CreateOrUpdate(t *testing.T) {
	// From example Create virtual network
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				FlowTimeoutInMinutes: to.Int32Ptr(10),
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Create virtual network with Bgp Communities
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				BgpCommunities: &VirtualNetworkBgpCommunities{
					VirtualNetworkCommunity: to.StringPtr("12076:20000"),
				},
				Subnets: []*Subnet{
					{
						Name: to.StringPtr("test-1"),
						Properties: &SubnetPropertiesFormat{
							AddressPrefix: to.StringPtr("10.0.0.0/24"),
						},
					}},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Create virtual network with delegated subnets
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("westcentralus"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				Subnets: []*Subnet{
					{
						Name: to.StringPtr("test-1"),
						Properties: &SubnetPropertiesFormat{
							AddressPrefix: to.StringPtr("10.0.0.0/24"),
							Delegations: []*Delegation{
								{
									Name: to.StringPtr("myDelegation"),
									Properties: &ServiceDelegationPropertiesFormat{
										ServiceName: to.StringPtr("Microsoft.Sql/managedInstances"),
									},
								}},
						},
					}},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Create virtual network with service endpoints
	poller, err = client.BeginCreateOrUpdate(ctx,
		"vnetTest",
		"vnet1",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				Subnets: []*Subnet{
					{
						Name: to.StringPtr("test-1"),
						Properties: &SubnetPropertiesFormat{
							AddressPrefix: to.StringPtr("10.0.0.0/16"),
							ServiceEndpoints: []*ServiceEndpointPropertiesFormat{
								{
									Service: to.StringPtr("Microsoft.Storage"),
								}},
						},
					}},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Create virtual network with service endpoints and service endpoint policy
	poller, err = client.BeginCreateOrUpdate(ctx,
		"vnetTest",
		"vnet1",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("eastus2euap"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				Subnets: []*Subnet{
					{
						Name: to.StringPtr("test-1"),
						Properties: &SubnetPropertiesFormat{
							AddressPrefix: to.StringPtr("10.0.0.0/16"),
							ServiceEndpointPolicies: []*ServiceEndpointPolicy{
								{
									Resource: Resource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1"),
									},
								}},
							ServiceEndpoints: []*ServiceEndpointPropertiesFormat{
								{
									Service: to.StringPtr("Microsoft.Storage"),
								}},
						},
					}},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Create virtual network with subnet
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				Subnets: []*Subnet{
					{
						Name: to.StringPtr("test-1"),
						Properties: &SubnetPropertiesFormat{
							AddressPrefix: to.StringPtr("10.0.0.0/24"),
						},
					}},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}

	// From example Create virtual network with subnet containing address prefixes
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &VirtualNetworkPropertiesFormat{
				AddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.0.0.0/16")},
				},
				Subnets: []*Subnet{
					{
						Name: to.StringPtr("test-2"),
						Properties: &SubnetPropertiesFormat{
							AddressPrefixes: []*string{
								to.StringPtr("10.0.0.0/28"),
								to.StringPtr("10.0.1.0/28")},
						},
					}},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

func TestVirtualNetworks_UpdateTags(t *testing.T) {
	// From example Update virtual network tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-vnet",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&VirtualNetworksUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

func TestVirtualNetworks_ListAll(t *testing.T) {
	// From example List all virtual networks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	pager := client.ListAll(&VirtualNetworksListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetwork.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetwork.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworks_List(t *testing.T) {
	// From example List virtual networks in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	pager := client.List("rg1",
		&VirtualNetworksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetwork.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetwork.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworks_CheckIPAddressAvailability(t *testing.T) {
	// From example Check IP address availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	_, err := client.CheckIPAddressAvailability(ctx,
		"rg1",
		"test-vnet",
		"10.0.1.4",
		&VirtualNetworksCheckIPAddressAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworks_ListUsage(t *testing.T) {
	// From example VnetGetUsage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"subid")
	pager := client.ListUsage("rg1",
		"vnetName",
		&VirtualNetworksListUsageOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkUsage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkUsage.ID should not be nil!")
			}
		}
	}
}

func TestSubnets_Delete(t *testing.T) {
	// From example Delete subnet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubnetsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		&SubnetsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubnets_Get(t *testing.T) {
	// From example Get subnet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubnetsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		&SubnetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Subnet.ID == nil {
		t.Fatal("Subnet.ID should not be nil!")
	}

	// From example Get subnet with a delegation
	res, err = client.Get(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		&SubnetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Subnet.ID == nil {
		t.Fatal("Subnet.ID should not be nil!")
	}
}

func TestSubnets_CreateOrUpdate(t *testing.T) {
	// From example Create subnet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubnetsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		Subnet{
			Properties: &SubnetPropertiesFormat{
				AddressPrefix: to.StringPtr("10.0.0.0/16"),
			},
		},
		&SubnetsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Subnet.ID == nil {
		t.Fatal("Subnet.ID should not be nil!")
	}

	// From example Create subnet with a delegation
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		Subnet{
			Properties: &SubnetPropertiesFormat{
				AddressPrefix: to.StringPtr("10.0.0.0/16"),
			},
		},
		&SubnetsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Subnet.ID == nil {
		t.Fatal("Subnet.ID should not be nil!")
	}

	// From example Create subnet with service endpoints
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		Subnet{
			Properties: &SubnetPropertiesFormat{
				AddressPrefix: to.StringPtr("10.0.0.0/16"),
				ServiceEndpoints: []*ServiceEndpointPropertiesFormat{
					{
						Service: to.StringPtr("Microsoft.Storage"),
					}},
			},
		},
		&SubnetsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Subnet.ID == nil {
		t.Fatal("Subnet.ID should not be nil!")
	}
}

func TestSubnets_PrepareNetworkPolicies(t *testing.T) {
	// From example Prepare Network Policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubnetsClient(con,
		"subid")
	poller, err := client.BeginPrepareNetworkPolicies(ctx,
		"rg1",
		"test-vnet",
		"subnet1",
		PrepareNetworkPoliciesRequest{
			ServiceName: to.StringPtr("Microsoft.Sql/managedInstances"),
		},
		&SubnetsBeginPrepareNetworkPoliciesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubnets_UnprepareNetworkPolicies(t *testing.T) {
	// From example Unprepare Network Policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubnetsClient(con,
		"subid")
	poller, err := client.BeginUnprepareNetworkPolicies(ctx,
		"rg1",
		"test-vnet",
		"subnet1",
		UnprepareNetworkPoliciesRequest{
			ServiceName: to.StringPtr("Microsoft.Sql/managedInstances"),
		},
		&SubnetsBeginUnprepareNetworkPoliciesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubnets_List(t *testing.T) {
	// From example List subnets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubnetsClient(con,
		"subid")
	pager := client.List("subnet-test",
		"vnetname",
		&SubnetsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Subnet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Subnet.ID should not be nil!")
			}
		}
	}
}

func TestResourceNavigationLinks_List(t *testing.T) {
	// From example Get Resource Navigation Links
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceNavigationLinksClient(con,
		"subid")
	_, err := client.List(ctx,
		"rg1",
		"vnet",
		"subnet",
		&ResourceNavigationLinksListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceAssociationLinks_List(t *testing.T) {
	// From example Get Service Association Links
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceAssociationLinksClient(con,
		"subid")
	_, err := client.List(ctx,
		"rg1",
		"vnet",
		"subnet",
		&ServiceAssociationLinksListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkPeerings_Delete(t *testing.T) {
	// From example Delete peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkPeeringsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"peerTest",
		"vnet1",
		"peer",
		&VirtualNetworkPeeringsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkPeerings_Get(t *testing.T) {
	// From example Get peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkPeeringsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"peerTest",
		"vnet1",
		"peer",
		&VirtualNetworkPeeringsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkPeering.ID == nil {
		t.Fatal("VirtualNetworkPeering.ID should not be nil!")
	}
}

func TestVirtualNetworkPeerings_CreateOrUpdate(t *testing.T) {
	// From example Create peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkPeeringsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"peerTest",
		"vnet1",
		"peer",
		nil,
		&VirtualNetworkPeeringsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkPeering.ID == nil {
		t.Fatal("VirtualNetworkPeering.ID should not be nil!")
	}

	// From example Sync Peering
	poller, err = client.BeginCreateOrUpdate(ctx,
		"peerTest",
		"vnet1",
		"peer",
		nil,
		&VirtualNetworkPeeringsBeginCreateOrUpdateOptions{SyncRemoteAddressSpace: SyncRemoteAddressSpaceTrue.ToPtr()})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkPeering.ID == nil {
		t.Fatal("VirtualNetworkPeering.ID should not be nil!")
	}
}

func TestVirtualNetworkPeerings_List(t *testing.T) {
	// From example List peerings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkPeeringsClient(con,
		"subid")
	pager := client.List("peerTest",
		"vnet1",
		&VirtualNetworkPeeringsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkPeering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkPeering.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkGateways_CreateOrUpdate(t *testing.T) {
	// From example UpdateVirtualNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"vpngw",
		VirtualNetworkGateway{
			Resource: Resource{
				Location: to.StringPtr("centralus"),
			},
			Properties: &VirtualNetworkGatewayPropertiesFormat{
				Active: to.BoolPtr(false),
				BgpSettings: &BgpSettings{
					Asn:               to.Int64Ptr(65515),
					BgpPeeringAddress: to.StringPtr("10.0.1.30"),
					PeerWeight:        to.Int32Ptr(0),
				},
				CustomRoutes: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("101.168.0.6/32")},
				},
				EnableBgp:                       to.BoolPtr(false),
				EnableBgpRouteTranslationForNat: to.BoolPtr(false),
				EnableDNSForwarding:             to.BoolPtr(true),
				GatewayType:                     VirtualNetworkGatewayTypeVPN.ToPtr(),
				IPConfigurations: []*VirtualNetworkGatewayIPConfiguration{
					{
						Name: to.StringPtr("gwipconfig1"),
						Properties: &VirtualNetworkGatewayIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: IPAllocationMethodDynamic.ToPtr(),
							PublicIPAddress: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
							},
							Subnet: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
							},
						},
					}},
				NatRules: []*VirtualNetworkGatewayNatRule{
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
						},
						Name: to.StringPtr("natRule1"),
						Properties: &VirtualNetworkGatewayNatRuleProperties{
							Type: VPNNatRuleTypeStatic.ToPtr(),
							ExternalMappings: []*VPNNatRuleMapping{
								{
									AddressSpace: to.StringPtr("50.0.0.0/24"),
								}},
							InternalMappings: []*VPNNatRuleMapping{
								{
									AddressSpace: to.StringPtr("10.10.0.0/24"),
								}},
							IPConfigurationID: to.StringPtr(""),
							Mode:              VPNNatRuleModeEgressSnat.ToPtr(),
						},
					},
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
						},
						Name: to.StringPtr("natRule2"),
						Properties: &VirtualNetworkGatewayNatRuleProperties{
							Type: VPNNatRuleTypeStatic.ToPtr(),
							ExternalMappings: []*VPNNatRuleMapping{
								{
									AddressSpace: to.StringPtr("30.0.0.0/24"),
								}},
							InternalMappings: []*VPNNatRuleMapping{
								{
									AddressSpace: to.StringPtr("20.10.0.0/24"),
								}},
							IPConfigurationID: to.StringPtr(""),
							Mode:              VPNNatRuleModeIngressSnat.ToPtr(),
						},
					}},
				SKU: &VirtualNetworkGatewaySKU{
					Name: VirtualNetworkGatewaySKUNameVPNGw1.ToPtr(),
					Tier: VirtualNetworkGatewaySKUTierVPNGw1.ToPtr(),
				},
				VPNClientConfiguration: &VPNClientConfiguration{
					RadiusServers: []*RadiusServer{
						{
							RadiusServerAddress: to.StringPtr("10.2.0.0"),
							RadiusServerScore:   to.Int64Ptr(20),
							RadiusServerSecret:  to.StringPtr("radiusServerSecret"),
						}},
					VPNClientProtocols: []*VPNClientProtocol{
						VPNClientProtocolOpenVPN.ToPtr()},
					VPNClientRevokedCertificates: []*VPNClientRevokedCertificate{},
					VPNClientRootCertificates:    []*VPNClientRootCertificate{},
				},
				VPNType: VPNTypeRouteBased.ToPtr(),
			},
		},
		&VirtualNetworkGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGateway.ID == nil {
		t.Fatal("VirtualNetworkGateway.ID should not be nil!")
	}
}

func TestVirtualNetworkGateways_Get(t *testing.T) {
	// From example GetVirtualNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGateway.ID == nil {
		t.Fatal("VirtualNetworkGateway.ID should not be nil!")
	}
}

func TestVirtualNetworkGateways_Delete(t *testing.T) {
	// From example DeleteVirtualNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_UpdateTags(t *testing.T) {
	// From example UpdateVirtualNetworkGatewayTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"vpngw",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&VirtualNetworkGatewaysBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGateway.ID == nil {
		t.Fatal("VirtualNetworkGateway.ID should not be nil!")
	}
}

func TestVirtualNetworkGateways_List(t *testing.T) {
	// From example ListVirtualNetworkGatewaysinResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	pager := client.List("rg1",
		&VirtualNetworkGatewaysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkGateway.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkGateways_ListConnections(t *testing.T) {
	// From example VirtualNetworkGatewaysListConnections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	pager := client.ListConnections("testrg",
		"test-vpn-gateway-1",
		&VirtualNetworkGatewaysListConnectionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkGatewayConnectionListEntity.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkGatewayConnectionListEntity.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkGateways_Reset(t *testing.T) {
	// From example ResetVirtualNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginReset(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginResetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGateway.ID == nil {
		t.Fatal("VirtualNetworkGateway.ID should not be nil!")
	}
}

func TestVirtualNetworkGateways_ResetVpnClientSharedKey(t *testing.T) {
	// From example ResetVpnClientSharedKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginResetVPNClientSharedKey(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginResetVPNClientSharedKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_Generatevpnclientpackage(t *testing.T) {
	// From example GenerateVPNClientPackage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGeneratevpnclientpackage(ctx,
		"rg1",
		"vpngw",
		VPNClientParameters{},
		&VirtualNetworkGatewaysBeginGeneratevpnclientpackageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GenerateVpnProfile(t *testing.T) {
	// From example GenerateVirtualNetworkGatewayVPNProfile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGenerateVPNProfile(ctx,
		"rg1",
		"vpngw",
		VPNClientParameters{},
		&VirtualNetworkGatewaysBeginGenerateVPNProfileOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GetVpnProfilePackageUrl(t *testing.T) {
	// From example GetVirtualNetworkGatewayVPNProfilePackageURL
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetVPNProfilePackageURL(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginGetVPNProfilePackageURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GetBgpPeerStatus(t *testing.T) {
	// From example GetVirtualNetworkGatewayBGPPeerStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetBgpPeerStatus(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginGetBgpPeerStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_SupportedVpnDevices(t *testing.T) {
	// From example ListVirtualNetworkGatewaySupportedVPNDevices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	_, err := client.SupportedVPNDevices(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysSupportedVPNDevicesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GetLearnedRoutes(t *testing.T) {
	// From example GetVirtualNetworkGatewayLearnedRoutes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetLearnedRoutes(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginGetLearnedRoutesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GetAdvertisedRoutes(t *testing.T) {
	// From example GetVirtualNetworkGatewayAdvertisedRoutes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetAdvertisedRoutes(ctx,
		"rg1",
		"vpngw",
		"test",
		&VirtualNetworkGatewaysBeginGetAdvertisedRoutesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_SetVpnclientIpsecParameters(t *testing.T) {
	// From example Set VirtualNetworkGateway VpnClientIpsecParameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginSetVpnclientIPSecParameters(ctx,
		"rg1",
		"vpngw",
		VPNClientIPsecParameters{
			DhGroup:             DhGroupDHGroup2.ToPtr(),
			IkeEncryption:       IkeEncryptionAES256.ToPtr(),
			IkeIntegrity:        IkeIntegritySHA384.ToPtr(),
			IPSecEncryption:     IPSecEncryptionAES256.ToPtr(),
			IPSecIntegrity:      IPSecIntegritySHA256.ToPtr(),
			PfsGroup:            PfsGroupPFS2.ToPtr(),
			SaDataSizeKilobytes: to.Int32Ptr(429497),
			SaLifeTimeSeconds:   to.Int32Ptr(86473),
		},
		&VirtualNetworkGatewaysBeginSetVpnclientIPSecParametersOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GetVpnclientIpsecParameters(t *testing.T) {
	// From example Get VirtualNetworkGateway VpnClientIpsecParameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetVpnclientIPSecParameters(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginGetVpnclientIPSecParametersOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_VpnDeviceConfigurationScript(t *testing.T) {
	// From example GetVPNDeviceConfigurationScript
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	_, err := client.VPNDeviceConfigurationScript(ctx,
		"rg1",
		"vpngw",
		VPNDeviceScriptParameters{
			DeviceFamily:    to.StringPtr("ISR"),
			FirmwareVersion: to.StringPtr("IOS 15.1 (Preview)"),
			Vendor:          to.StringPtr("Cisco"),
		},
		&VirtualNetworkGatewaysVPNDeviceConfigurationScriptOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_StartPacketCapture(t *testing.T) {
	// From example Start packet capture on virtual network gateway with filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginStartPacketCaptureOptions{Parameters: &VPNPacketCaptureStartParameters{
			FilterData: to.StringPtr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Start packet capture on virtual network gateway without filter
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&VirtualNetworkGatewaysBeginStartPacketCaptureOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_StopPacketCapture(t *testing.T) {
	// From example Stop packet capture on virtual network gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"vpngw",
		VPNPacketCaptureStopParameters{
			SasURL: to.StringPtr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
		&VirtualNetworkGatewaysBeginStopPacketCaptureOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_GetVpnclientConnectionHealth(t *testing.T) {
	// From example GetVirtualNetworkGatewayVpnclientConnectionHealth
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetVpnclientConnectionHealth(ctx,
		"p2s-vnet-test",
		"vpnp2sgw",
		&VirtualNetworkGatewaysBeginGetVpnclientConnectionHealthOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGateways_DisconnectVirtualNetworkGatewayVpnConnections(t *testing.T) {
	// From example Disconnect VpnConnections from Virtual Network Gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginDisconnectVirtualNetworkGatewayVPNConnections(ctx,
		"vpn-gateway-test",
		"vpngateway",
		P2SVPNConnectionRequest{
			VPNConnectionIDs: []*string{
				to.StringPtr("vpnconnId1"),
				to.StringPtr("vpnconnId2")},
		},
		&VirtualNetworkGatewaysBeginDisconnectVirtualNetworkGatewayVPNConnectionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayConnections_CreateOrUpdate(t *testing.T) {
	// From example CreateVirtualNetworkGatewayConnection_S2S
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"connS2S",
		VirtualNetworkGatewayConnection{
			Resource: Resource{
				Location: to.StringPtr("centralus"),
			},
			Properties: &VirtualNetworkGatewayConnectionPropertiesFormat{
				ConnectionMode:     VirtualNetworkGatewayConnectionModeDefault.ToPtr(),
				ConnectionProtocol: VirtualNetworkGatewayConnectionProtocolIKEv2.ToPtr(),
				ConnectionType:     VirtualNetworkGatewayConnectionTypeIPsec.ToPtr(),
				DpdTimeoutSeconds:  to.Int32Ptr(30),
				EgressNatRules: []*SubResource{
					{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
					}},
				EnableBgp: to.BoolPtr(false),
				IngressNatRules: []*SubResource{
					{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
					}},
				IPSecPolicies: []*IPSecPolicy{},
				LocalNetworkGateway2: &LocalNetworkGateway{
					Resource: Resource{
						ID:       to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw"),
						Location: to.StringPtr("centralus"),
						Tags:     map[string]*string{},
					},
					Properties: &LocalNetworkGatewayPropertiesFormat{
						GatewayIPAddress: to.StringPtr("x.x.x.x"),
						LocalNetworkAddressSpace: &AddressSpace{
							AddressPrefixes: []*string{
								to.StringPtr("10.1.0.0/16")},
						},
					},
				},
				RoutingWeight:                  to.Int32Ptr(0),
				SharedKey:                      to.StringPtr("Abc123"),
				TrafficSelectorPolicies:        []*TrafficSelectorPolicy{},
				UsePolicyBasedTrafficSelectors: to.BoolPtr(false),
				VirtualNetworkGateway1: &VirtualNetworkGateway{
					Resource: Resource{
						ID:       to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
						Location: to.StringPtr("centralus"),
						Tags:     map[string]*string{},
					},
					Properties: &VirtualNetworkGatewayPropertiesFormat{
						Active: to.BoolPtr(false),
						BgpSettings: &BgpSettings{
							Asn:               to.Int64Ptr(65514),
							BgpPeeringAddress: to.StringPtr("10.0.1.30"),
							PeerWeight:        to.Int32Ptr(0),
						},
						EnableBgp:   to.BoolPtr(false),
						GatewayType: VirtualNetworkGatewayTypeVPN.ToPtr(),
						IPConfigurations: []*VirtualNetworkGatewayIPConfiguration{
							{
								SubResource: SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
								},
								Name: to.StringPtr("gwipconfig1"),
								Properties: &VirtualNetworkGatewayIPConfigurationPropertiesFormat{
									PrivateIPAllocationMethod: IPAllocationMethodDynamic.ToPtr(),
									PublicIPAddress: &SubResource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
									},
									Subnet: &SubResource{
										ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
									},
								},
							}},
						SKU: &VirtualNetworkGatewaySKU{
							Name: VirtualNetworkGatewaySKUNameVPNGw1.ToPtr(),
							Tier: VirtualNetworkGatewaySKUTierVPNGw1.ToPtr(),
						},
						VPNType: VPNTypeRouteBased.ToPtr(),
					},
				},
			},
		},
		&VirtualNetworkGatewayConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGatewayConnection.ID == nil {
		t.Fatal("VirtualNetworkGatewayConnection.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayConnections_Get(t *testing.T) {
	// From example GetVirtualNetworkGatewayConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"connS2S",
		&VirtualNetworkGatewayConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGatewayConnection.ID == nil {
		t.Fatal("VirtualNetworkGatewayConnection.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayConnections_Delete(t *testing.T) {
	// From example DeleteVirtualNetworkGatewayConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"conn1",
		&VirtualNetworkGatewayConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayConnections_UpdateTags(t *testing.T) {
	// From example UpdateVirtualNetworkGatewayConnectionTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"test",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&VirtualNetworkGatewayConnectionsBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGatewayConnection.ID == nil {
		t.Fatal("VirtualNetworkGatewayConnection.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayConnections_SetSharedKey(t *testing.T) {
	// From example SetVirtualNetworkGatewayConnectionSharedKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginSetSharedKey(ctx,
		"rg1",
		"connS2S",
		ConnectionSharedKey{
			Value: to.StringPtr("AzureAbc123"),
		},
		&VirtualNetworkGatewayConnectionsBeginSetSharedKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionSharedKey.ID == nil {
		t.Fatal("ConnectionSharedKey.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayConnections_GetSharedKey(t *testing.T) {
	// From example GetVirtualNetworkGatewayConnectionSharedKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	res, err := client.GetSharedKey(ctx,
		"rg1",
		"connS2S",
		&VirtualNetworkGatewayConnectionsGetSharedKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionSharedKey.ID == nil {
		t.Fatal("ConnectionSharedKey.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayConnections_List(t *testing.T) {
	// From example ListVirtualNetworkGatewayConnectionsinResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	pager := client.List("rg1",
		&VirtualNetworkGatewayConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkGatewayConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkGatewayConnection.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkGatewayConnections_ResetSharedKey(t *testing.T) {
	// From example ResetVirtualNetworkGatewayConnectionSharedKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginResetSharedKey(ctx,
		"rg1",
		"conn1",
		ConnectionResetSharedKey{
			KeyLength: to.Int32Ptr(128),
		},
		&VirtualNetworkGatewayConnectionsBeginResetSharedKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayConnections_StartPacketCapture(t *testing.T) {
	// From example Start packet capture on virtual network gateway connection with filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngwcn1",
		&VirtualNetworkGatewayConnectionsBeginStartPacketCaptureOptions{Parameters: &VPNPacketCaptureStartParameters{
			FilterData: to.StringPtr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Start packet capture on virtual network gateway connection without filter
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngwcn1",
		&VirtualNetworkGatewayConnectionsBeginStartPacketCaptureOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayConnections_StopPacketCapture(t *testing.T) {
	// From example Stop packet capture on virtual network gateway connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"vpngwcn1",
		VPNPacketCaptureStopParameters{
			SasURL: to.StringPtr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
		&VirtualNetworkGatewayConnectionsBeginStopPacketCaptureOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayConnections_GetIkeSas(t *testing.T) {
	// From example GetVirtualNetworkGatewayConnectionIkeSa
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginGetIkeSas(ctx,
		"rg1",
		"vpngwcn1",
		&VirtualNetworkGatewayConnectionsBeginGetIkeSasOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayConnections_ResetConnection(t *testing.T) {
	// From example ResetVirtualNetworkGatewayConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayConnectionsClient(con,
		"subid")
	poller, err := client.BeginResetConnection(ctx,
		"rg1",
		"conn1",
		&VirtualNetworkGatewayConnectionsBeginResetConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocalNetworkGateways_CreateOrUpdate(t *testing.T) {
	// From example CreateLocalNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocalNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"localgw",
		LocalNetworkGateway{
			Resource: Resource{
				Location: to.StringPtr("Central US"),
			},
			Properties: &LocalNetworkGatewayPropertiesFormat{
				Fqdn:             to.StringPtr("site1.contoso.com"),
				GatewayIPAddress: to.StringPtr("11.12.13.14"),
				LocalNetworkAddressSpace: &AddressSpace{
					AddressPrefixes: []*string{
						to.StringPtr("10.1.0.0/16")},
				},
			},
		},
		&LocalNetworkGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LocalNetworkGateway.ID == nil {
		t.Fatal("LocalNetworkGateway.ID should not be nil!")
	}
}

func TestLocalNetworkGateways_Get(t *testing.T) {
	// From example GetLocalNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocalNetworkGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"localgw",
		&LocalNetworkGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LocalNetworkGateway.ID == nil {
		t.Fatal("LocalNetworkGateway.ID should not be nil!")
	}
}

func TestLocalNetworkGateways_Delete(t *testing.T) {
	// From example DeleteLocalNetworkGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocalNetworkGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"localgw",
		&LocalNetworkGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocalNetworkGateways_UpdateTags(t *testing.T) {
	// From example UpdateLocalNetworkGatewayTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocalNetworkGatewaysClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"lgw",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&LocalNetworkGatewaysUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LocalNetworkGateway.ID == nil {
		t.Fatal("LocalNetworkGateway.ID should not be nil!")
	}
}

func TestLocalNetworkGateways_List(t *testing.T) {
	// From example ListLocalNetworkGateways
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocalNetworkGatewaysClient(con,
		"subid")
	pager := client.List("rg1",
		&LocalNetworkGatewaysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LocalNetworkGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LocalNetworkGateway.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkGatewayNatRules_Get(t *testing.T) {
	// From example VirtualNetworkGatewayNatRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayNatRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		&VirtualNetworkGatewayNatRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGatewayNatRule.ID == nil {
		t.Fatal("VirtualNetworkGatewayNatRule.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayNatRules_CreateOrUpdate(t *testing.T) {
	// From example VirtualNetworkGatewayNatRulePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayNatRulesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		nil,
		&VirtualNetworkGatewayNatRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkGatewayNatRule.ID == nil {
		t.Fatal("VirtualNetworkGatewayNatRule.ID should not be nil!")
	}
}

func TestVirtualNetworkGatewayNatRules_Delete(t *testing.T) {
	// From example VirtualNetworkGatewayNatRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayNatRulesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		&VirtualNetworkGatewayNatRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkGatewayNatRules_ListByVirtualNetworkGateway(t *testing.T) {
	// From example VirtualNetworkGatewayNatRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkGatewayNatRulesClient(con,
		"subid")
	pager := client.ListByVirtualNetworkGateway("rg1",
		"gateway1",
		&VirtualNetworkGatewayNatRulesListByVirtualNetworkGatewayOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkGatewayNatRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkGatewayNatRule.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkTaps_Delete(t *testing.T) {
	// From example Delete Virtual Network Tap resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkTapsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-vtap",
		&VirtualNetworkTapsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkTaps_Get(t *testing.T) {
	// From example Get Virtual Network Tap
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkTapsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"testvtap",
		&VirtualNetworkTapsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkTap.ID == nil {
		t.Fatal("VirtualNetworkTap.ID should not be nil!")
	}
}

func TestVirtualNetworkTaps_CreateOrUpdate(t *testing.T) {
	// From example Create Virtual Network Tap
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkTapsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vtap",
		VirtualNetworkTap{
			Resource: Resource{
				Location: to.StringPtr("centraluseuap"),
			},
			Properties: &VirtualNetworkTapPropertiesFormat{
				DestinationNetworkInterfaceIPConfiguration: &NetworkInterfaceIPConfiguration{
					SubResource: SubResource{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/ipconfig1"),
					},
				},
			},
		},
		&VirtualNetworkTapsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkTap.ID == nil {
		t.Fatal("VirtualNetworkTap.ID should not be nil!")
	}
}

func TestVirtualNetworkTaps_UpdateTags(t *testing.T) {
	// From example Update virtual network tap tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkTapsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-vtap",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&VirtualNetworkTapsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkTap.ID == nil {
		t.Fatal("VirtualNetworkTap.ID should not be nil!")
	}
}

func TestVirtualNetworkTaps_ListAll(t *testing.T) {
	// From example List all virtual network taps
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkTapsClient(con,
		"subid")
	pager := client.ListAll(&VirtualNetworkTapsListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkTap.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkTap.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkTaps_ListByResourceGroup(t *testing.T) {
	// From example List virtual network taps in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkTapsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VirtualNetworkTapsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkTap.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkTap.ID should not be nil!")
			}
		}
	}
}

func TestVirtualRouters_Delete(t *testing.T) {
	// From example Delete VirtualRouter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRoutersClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualRouter",
		&VirtualRoutersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualRouters_Get(t *testing.T) {
	// From example Get VirtualRouter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRoutersClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"virtualRouter",
		&VirtualRoutersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualRouter.ID == nil {
		t.Fatal("VirtualRouter.ID should not be nil!")
	}
}

func TestVirtualRouters_CreateOrUpdate(t *testing.T) {
	// From example Create VirtualRouter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRoutersClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualRouter",
		VirtualRouter{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &VirtualRouterPropertiesFormat{
				HostedGateway: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"),
				},
			},
		},
		&VirtualRoutersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualRouter.ID == nil {
		t.Fatal("VirtualRouter.ID should not be nil!")
	}
}

func TestVirtualRouters_ListByResourceGroup(t *testing.T) {
	// From example List all Virtual Router for a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRoutersClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VirtualRoutersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualRouter.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualRouter.ID should not be nil!")
			}
		}
	}
}

func TestVirtualRouters_List(t *testing.T) {
	// From example List all Virtual Routers for a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRoutersClient(con,
		"subid")
	pager := client.List(&VirtualRoutersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualRouter.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualRouter.ID should not be nil!")
			}
		}
	}
}

func TestVirtualRouterPeerings_Delete(t *testing.T) {
	// From example Delete VirtualRouterPeering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRouterPeeringsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualRouter",
		"peering1",
		&VirtualRouterPeeringsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualRouterPeerings_Get(t *testing.T) {
	// From example Get Virtual Router Peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRouterPeeringsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"virtualRouter",
		"peering1",
		&VirtualRouterPeeringsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualRouterPeering.ID == nil {
		t.Fatal("VirtualRouterPeering.ID should not be nil!")
	}
}

func TestVirtualRouterPeerings_CreateOrUpdate(t *testing.T) {
	// From example Create Virtual Router Peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRouterPeeringsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualRouter",
		"peering1",
		VirtualRouterPeering{
			Properties: &VirtualRouterPeeringProperties{
				PeerAsn: to.Int64Ptr(20000),
				PeerIP:  to.StringPtr("192.168.1.5"),
			},
		},
		&VirtualRouterPeeringsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualRouterPeering.ID == nil {
		t.Fatal("VirtualRouterPeering.ID should not be nil!")
	}
}

func TestVirtualRouterPeerings_List(t *testing.T) {
	// From example List all Virtual Router Peerings for a given Virtual Router
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualRouterPeeringsClient(con,
		"subid")
	pager := client.List("rg1",
		"virtualRouter",
		&VirtualRouterPeeringsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualRouterPeering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualRouterPeering.ID should not be nil!")
			}
		}
	}
}

func TestVirtualWans_Get(t *testing.T) {
	// From example VirtualWANGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualWansClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"wan1",
		&VirtualWansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualWAN.ID == nil {
		t.Fatal("VirtualWAN.ID should not be nil!")
	}
}

func TestVirtualWans_CreateOrUpdate(t *testing.T) {
	// From example VirtualWANCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualWansClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"wan1",
		VirtualWAN{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &VirtualWanProperties{
				Type:                 to.StringPtr("Basic"),
				DisableVPNEncryption: to.BoolPtr(false),
			},
		},
		&VirtualWansBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualWAN.ID == nil {
		t.Fatal("VirtualWAN.ID should not be nil!")
	}
}

func TestVirtualWans_UpdateTags(t *testing.T) {
	// From example VirtualWANUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualWansClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"wan1",
		TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&VirtualWansUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualWAN.ID == nil {
		t.Fatal("VirtualWAN.ID should not be nil!")
	}
}

func TestVirtualWans_Delete(t *testing.T) {
	// From example VirtualWANDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualWansClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualWan1",
		&VirtualWansBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualWans_ListByResourceGroup(t *testing.T) {
	// From example VirtualWANListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualWansClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VirtualWansListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualWAN.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualWAN.ID should not be nil!")
			}
		}
	}
}

func TestVirtualWans_List(t *testing.T) {
	// From example VirtualWANList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualWansClient(con,
		"subid")
	pager := client.List(&VirtualWansListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualWAN.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualWAN.ID should not be nil!")
			}
		}
	}
}

func TestVpnSites_Get(t *testing.T) {
	// From example VpnSiteGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"vpnSite1",
		&VPNSitesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNSite.ID == nil {
		t.Fatal("VPNSite.ID should not be nil!")
	}
}

func TestVpnSites_CreateOrUpdate(t *testing.T) {
	// From example VpnSiteCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"vpnSite1",
		nil,
		&VPNSitesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNSite.ID == nil {
		t.Fatal("VPNSite.ID should not be nil!")
	}
}

func TestVpnSites_UpdateTags(t *testing.T) {
	// From example VpnSiteUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"vpnSite1",
		nil,
		&VPNSitesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNSite.ID == nil {
		t.Fatal("VPNSite.ID should not be nil!")
	}
}

func TestVpnSites_Delete(t *testing.T) {
	// From example VpnSiteDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"vpnSite1",
		&VPNSitesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnSites_ListByResourceGroup(t *testing.T) {
	// From example VpnSiteListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VPNSitesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNSite.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNSite.ID should not be nil!")
			}
		}
	}
}

func TestVpnSites_List(t *testing.T) {
	// From example VpnSiteList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesClient(con,
		"subid")
	pager := client.List(&VPNSitesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNSite.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNSite.ID should not be nil!")
			}
		}
	}
}

func TestVpnSiteLinks_Get(t *testing.T) {
	// From example VpnSiteGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSiteLinksClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"vpnSite1",
		"vpnSiteLink1",
		&VPNSiteLinksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNSiteLink.ID == nil {
		t.Fatal("VPNSiteLink.ID should not be nil!")
	}
}

func TestVpnSiteLinks_ListByVpnSite(t *testing.T) {
	// From example VpnSiteLinkListByVpnSite
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSiteLinksClient(con,
		"subid")
	pager := client.ListByVPNSite("rg1",
		"vpnSite1",
		&VPNSiteLinksListByVPNSiteOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNSiteLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNSiteLink.ID should not be nil!")
			}
		}
	}
}

func TestVpnSitesConfiguration_Download(t *testing.T) {
	// From example VpnSitesConfigurationDownload
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSitesConfigurationClient(con,
		"subid")
	poller, err := client.BeginDownload(ctx,
		"rg1",
		"wan1",
		GetVPNSitesConfigurationRequest{
			OutputBlobSasURL: to.StringPtr("https://blobcortextesturl.blob.core.windows.net/folderforconfig/vpnFile?sp=rw&se=2018-01-10T03%3A42%3A04Z&sv=2017-04-17&sig=WvXrT5bDmDFfgHs%2Brz%2BjAu123eRCNE9BO0eQYcPDT7pY%3D&sr=b"),
			VPNSites: []*string{
				to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/abc")},
		},
		&VPNSitesConfigurationBeginDownloadOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnServerConfigurations_Get(t *testing.T) {
	// From example VpnServerConfigurationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"vpnServerConfiguration1",
		&VPNServerConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNServerConfiguration.ID == nil {
		t.Fatal("VPNServerConfiguration.ID should not be nil!")
	}
}

func TestVpnServerConfigurations_CreateOrUpdate(t *testing.T) {
	// From example VpnServerConfigurationCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"vpnServerConfiguration1",
		nil,
		&VPNServerConfigurationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNServerConfiguration.ID == nil {
		t.Fatal("VPNServerConfiguration.ID should not be nil!")
	}
}

func TestVpnServerConfigurations_UpdateTags(t *testing.T) {
	// From example VpnServerConfigurationUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"vpnServerConfiguration1",
		nil,
		&VPNServerConfigurationsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNServerConfiguration.ID == nil {
		t.Fatal("VPNServerConfiguration.ID should not be nil!")
	}
}

func TestVpnServerConfigurations_Delete(t *testing.T) {
	// From example VpnServerConfigurationDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"vpnServerConfiguration1",
		&VPNServerConfigurationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnServerConfigurations_ListByResourceGroup(t *testing.T) {
	// From example VpnServerConfigurationListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VPNServerConfigurationsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNServerConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNServerConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestVpnServerConfigurations_List(t *testing.T) {
	// From example VpnServerConfigurationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsClient(con,
		"subid")
	pager := client.List(&VPNServerConfigurationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNServerConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNServerConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestVirtualHubs_Get(t *testing.T) {
	// From example VirtualHubGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		&VirtualHubsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualHub.ID == nil {
		t.Fatal("VirtualHub.ID should not be nil!")
	}
}

func TestVirtualHubs_CreateOrUpdate(t *testing.T) {
	// From example VirtualHubPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub2",
		VirtualHub{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &VirtualHubProperties{
				AddressPrefix: to.StringPtr("10.168.0.0/24"),
				SKU:           to.StringPtr("Basic"),
				VirtualWan: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
				},
			},
		},
		&VirtualHubsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualHub.ID == nil {
		t.Fatal("VirtualHub.ID should not be nil!")
	}
}

func TestVirtualHubs_UpdateTags(t *testing.T) {
	// From example VirtualHubUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"rg1",
		"virtualHub2",
		TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&VirtualHubsUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualHub.ID == nil {
		t.Fatal("VirtualHub.ID should not be nil!")
	}
}

func TestVirtualHubs_Delete(t *testing.T) {
	// From example VirtualHubDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		&VirtualHubsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubs_ListByResourceGroup(t *testing.T) {
	// From example VirtualHubListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VirtualHubsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualHub.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualHub.ID should not be nil!")
			}
		}
	}
}

func TestVirtualHubs_List(t *testing.T) {
	// From example VirtualHubList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	pager := client.List(&VirtualHubsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualHub.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualHub.ID should not be nil!")
			}
		}
	}
}

func TestVirtualHubs_GetEffectiveVirtualHubRoutes(t *testing.T) {
	// From example Effective Routes for a Connection resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubsClient(con,
		"subid")
	poller, err := client.BeginGetEffectiveVirtualHubRoutes(ctx,
		"rg1",
		"virtualHub1",
		&VirtualHubsBeginGetEffectiveVirtualHubRoutesOptions{EffectiveRoutesParameters: &EffectiveRoutesParameters{
			ResourceID:             to.StringPtr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
			VirtualWanResourceType: to.StringPtr("ExpressRouteConnection"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Effective Routes for a Route Table resource
	poller, err = client.BeginGetEffectiveVirtualHubRoutes(ctx,
		"rg1",
		"virtualHub1",
		&VirtualHubsBeginGetEffectiveVirtualHubRoutesOptions{EffectiveRoutesParameters: &EffectiveRoutesParameters{
			ResourceID:             to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
			VirtualWanResourceType: to.StringPtr("RouteTable"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Effective Routes for the Virtual Hub
	poller, err = client.BeginGetEffectiveVirtualHubRoutes(ctx,
		"rg1",
		"virtualHub1",
		&VirtualHubsBeginGetEffectiveVirtualHubRoutesOptions{EffectiveRoutesParameters: &EffectiveRoutesParameters{}})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestHubVirtualNetworkConnections_CreateOrUpdate(t *testing.T) {
	// From example HubVirtualNetworkConnectionPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubVirtualNetworkConnectionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"connection1",
		HubVirtualNetworkConnection{
			Properties: &HubVirtualNetworkConnectionProperties{
				EnableInternetSecurity: to.BoolPtr(false),
				RemoteVirtualNetwork: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"),
				},
				RoutingConfiguration: &RoutingConfiguration{
					AssociatedRouteTable: &SubResource{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &PropagatedRouteTable{
						IDs: []*SubResource{
							{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
							}},
						Labels: []*string{
							to.StringPtr("label1"),
							to.StringPtr("label2")},
					},
					VnetRoutes: &VnetRoute{
						StaticRoutes: []*StaticRoute{
							{
								Name: to.StringPtr("route1"),
								AddressPrefixes: []*string{
									to.StringPtr("10.1.0.0/16"),
									to.StringPtr("10.2.0.0/16")},
								NextHopIPAddress: to.StringPtr("10.0.0.68"),
							},
							{
								Name: to.StringPtr("route2"),
								AddressPrefixes: []*string{
									to.StringPtr("10.3.0.0/16"),
									to.StringPtr("10.4.0.0/16")},
								NextHopIPAddress: to.StringPtr("10.0.0.65"),
							}},
					},
				},
			},
		},
		&HubVirtualNetworkConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.HubVirtualNetworkConnection.ID == nil {
		t.Fatal("HubVirtualNetworkConnection.ID should not be nil!")
	}
}

func TestHubVirtualNetworkConnections_Delete(t *testing.T) {
	// From example HubVirtualNetworkConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubVirtualNetworkConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"connection1",
		&HubVirtualNetworkConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestHubVirtualNetworkConnections_Get(t *testing.T) {
	// From example HubVirtualNetworkConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubVirtualNetworkConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"connection1",
		&HubVirtualNetworkConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HubVirtualNetworkConnection.ID == nil {
		t.Fatal("HubVirtualNetworkConnection.ID should not be nil!")
	}
}

func TestHubVirtualNetworkConnections_List(t *testing.T) {
	// From example HubVirtualNetworkConnectionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubVirtualNetworkConnectionsClient(con,
		"subid")
	pager := client.List("rg1",
		"virtualHub1",
		&HubVirtualNetworkConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HubVirtualNetworkConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HubVirtualNetworkConnection.ID should not be nil!")
			}
		}
	}
}

func TestVpnGateways_Get(t *testing.T) {
	// From example VpnGatewayGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		&VPNGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNGateway.ID == nil {
		t.Fatal("VPNGateway.ID should not be nil!")
	}
}

func TestVpnGateways_CreateOrUpdate(t *testing.T) {
	// From example VpnGatewayPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		VPNGateway{
			Resource: Resource{
				Location: to.StringPtr("westcentralus"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &VPNGatewayProperties{
				BgpSettings: &BgpSettings{
					Asn: to.Int64Ptr(65515),
					BgpPeeringAddresses: []*IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.StringPtr("169.254.21.5")},
							IPConfigurationID: to.StringPtr("Instance0"),
						},
						{
							CustomBgpIPAddresses: []*string{
								to.StringPtr("169.254.21.10")},
							IPConfigurationID: to.StringPtr("Instance1"),
						}},
					PeerWeight: to.Int32Ptr(0),
				},
				Connections: []*VPNConnection{
					{
						Name: to.StringPtr("vpnConnection1"),
						Properties: &VPNConnectionProperties{
							RemoteVPNSite: &SubResource{
								ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
							},
							VPNLinkConnections: []*VPNSiteLinkConnection{
								{
									Name: to.StringPtr("Connection-Link1"),
									Properties: &VPNSiteLinkConnectionProperties{
										ConnectionBandwidth: to.Int32Ptr(200),
										EgressNatRules: []*SubResource{
											{
												ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
											}},
										SharedKey:                 to.StringPtr("key"),
										VPNConnectionProtocolType: VirtualNetworkGatewayConnectionProtocolIKEv2.ToPtr(),
										VPNSiteLink: &SubResource{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
										},
									},
								}},
						},
					}},
				EnableBgpRouteTranslationForNat: to.BoolPtr(false),
				IsRoutingPreferenceInternet:     to.BoolPtr(false),
				NatRules: []*VPNGatewayNatRule{
					{
						Name: to.StringPtr("nat03"),
						Properties: &VPNGatewayNatRuleProperties{
							Type: VPNNatRuleTypeStatic.ToPtr(),
							ExternalMappings: []*VPNNatRuleMapping{
								{
									AddressSpace: to.StringPtr("192.168.0.0/26"),
								}},
							InternalMappings: []*VPNNatRuleMapping{
								{
									AddressSpace: to.StringPtr("0.0.0.0/26"),
								}},
							IPConfigurationID: to.StringPtr(""),
							Mode:              VPNNatRuleModeEgressSnat.ToPtr(),
						},
					}},
				VirtualHub: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
			},
		},
		&VPNGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNGateway.ID == nil {
		t.Fatal("VPNGateway.ID should not be nil!")
	}
}

func TestVpnGateways_UpdateTags(t *testing.T) {
	// From example VpnGatewayUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"gateway1",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&VPNGatewaysBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNGateway.ID == nil {
		t.Fatal("VPNGateway.ID should not be nil!")
	}
}

func TestVpnGateways_Delete(t *testing.T) {
	// From example VpnGatewayDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		&VPNGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnGateways_Reset(t *testing.T) {
	// From example ResetVpnGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginReset(ctx,
		"rg1",
		"vpngw",
		&VPNGatewaysBeginResetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNGateway.ID == nil {
		t.Fatal("VPNGateway.ID should not be nil!")
	}
}

func TestVpnGateways_StartPacketCapture(t *testing.T) {
	// From example Start packet capture on vpn gateway with filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&VPNGatewaysBeginStartPacketCaptureOptions{Parameters: &VPNGatewayPacketCaptureStartParameters{
			FilterData: to.StringPtr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Start packet capture on vpn gateway without filter
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&VPNGatewaysBeginStartPacketCaptureOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnGateways_StopPacketCapture(t *testing.T) {
	// From example Stop packet capture on vpn gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"vpngw",
		&VPNGatewaysBeginStopPacketCaptureOptions{Parameters: &VPNGatewayPacketCaptureStopParameters{
			SasURL: to.StringPtr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnGateways_ListByResourceGroup(t *testing.T) {
	// From example VpnGatewayListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&VPNGatewaysListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNGateway.ID should not be nil!")
			}
		}
	}
}

func TestVpnGateways_List(t *testing.T) {
	// From example VpnGatewayListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNGatewaysClient(con,
		"subid")
	pager := client.List(&VPNGatewaysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNGateway.ID should not be nil!")
			}
		}
	}
}

func TestVpnLinkConnections_ResetConnection(t *testing.T) {
	// From example ResetVpnLinkConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNLinkConnectionsClient(con,
		"subid")
	poller, err := client.BeginResetConnection(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		"Connection-Link1",
		&VPNLinkConnectionsBeginResetConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnLinkConnections_GetIkeSas(t *testing.T) {
	// From example GetVpnLinkConnectionIkeSa
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNLinkConnectionsClient(con,
		"subid")
	poller, err := client.BeginGetIkeSas(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		"Connection-Link1",
		&VPNLinkConnectionsBeginGetIkeSasOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnLinkConnections_ListByVpnConnection(t *testing.T) {
	// From example VpnSiteLinkConnectionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNLinkConnectionsClient(con,
		"subid")
	pager := client.ListByVPNConnection("rg1",
		"gateway1",
		"vpnConnection1",
		&VPNLinkConnectionsListByVPNConnectionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNSiteLinkConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNSiteLinkConnection.ID should not be nil!")
			}
		}
	}
}

func TestVpnConnections_Get(t *testing.T) {
	// From example VpnConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&VPNConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNConnection.ID == nil {
		t.Fatal("VPNConnection.ID should not be nil!")
	}
}

func TestVpnConnections_CreateOrUpdate(t *testing.T) {
	// From example VpnConnectionPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNConnectionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		nil,
		&VPNConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNConnection.ID == nil {
		t.Fatal("VPNConnection.ID should not be nil!")
	}
}

func TestVpnConnections_Delete(t *testing.T) {
	// From example VpnConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&VPNConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnConnections_StartPacketCapture(t *testing.T) {
	// From example Start packet capture on vpn connection with filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNConnectionsClient(con,
		"subid")
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&VPNConnectionsBeginStartPacketCaptureOptions{Parameters: &VPNConnectionPacketCaptureStartParameters{
			FilterData: to.StringPtr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
			LinkConnectionNames: []*string{
				to.StringPtr("siteLink1"),
				to.StringPtr("siteLink2")},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Start packet capture on vpn connection without filter
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&VPNConnectionsBeginStartPacketCaptureOptions{Parameters: &VPNConnectionPacketCaptureStartParameters{
			LinkConnectionNames: []*string{
				to.StringPtr("siteLink1"),
				to.StringPtr("siteLink2")},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnConnections_StopPacketCapture(t *testing.T) {
	// From example Start packet capture on vpn connection without filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNConnectionsClient(con,
		"subid")
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&VPNConnectionsBeginStopPacketCaptureOptions{Parameters: &VPNConnectionPacketCaptureStopParameters{
			LinkConnectionNames: []*string{
				to.StringPtr("vpnSiteLink1"),
				to.StringPtr("vpnSiteLink2")},
			SasURL: to.StringPtr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnConnections_ListByVpnGateway(t *testing.T) {
	// From example VpnConnectionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNConnectionsClient(con,
		"subid")
	pager := client.ListByVPNGateway("rg1",
		"gateway1",
		&VPNConnectionsListByVPNGatewayOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNConnection.ID should not be nil!")
			}
		}
	}
}

func TestVpnSiteLinkConnections_Get(t *testing.T) {
	// From example VpnSiteLinkConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNSiteLinkConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		"Connection-Link1",
		&VPNSiteLinkConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNSiteLinkConnection.ID == nil {
		t.Fatal("VPNSiteLinkConnection.ID should not be nil!")
	}
}

func TestNatRules_Get(t *testing.T) {
	// From example NatRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatRulesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		&NatRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNGatewayNatRule.ID == nil {
		t.Fatal("VPNGatewayNatRule.ID should not be nil!")
	}
}

func TestNatRules_CreateOrUpdate(t *testing.T) {
	// From example NatRulePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatRulesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		nil,
		&NatRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VPNGatewayNatRule.ID == nil {
		t.Fatal("VPNGatewayNatRule.ID should not be nil!")
	}
}

func TestNatRules_Delete(t *testing.T) {
	// From example NatRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatRulesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		&NatRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNatRules_ListByVpnGateway(t *testing.T) {
	// From example NatRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNatRulesClient(con,
		"subid")
	pager := client.ListByVPNGateway("rg1",
		"gateway1",
		&NatRulesListByVPNGatewayOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VPNGatewayNatRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VPNGatewayNatRule.ID should not be nil!")
			}
		}
	}
}

func TestP2SVpnGateways_Get(t *testing.T) {
	// From example P2SVpnGatewayGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"p2sVpnGateway1",
		&P2SVPNGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.P2SVPNGateway.ID == nil {
		t.Fatal("P2SVPNGateway.ID should not be nil!")
	}
}

func TestP2SVpnGateways_CreateOrUpdate(t *testing.T) {
	// From example P2SVpnGatewayPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"p2sVpnGateway1",
		P2SVPNGateway{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &P2SVPNGatewayProperties{
				CustomDNSServers: []*string{
					to.StringPtr("1.1.1.1"),
					to.StringPtr("2.2.2.2")},
				IsRoutingPreferenceInternet: to.BoolPtr(false),
				P2SConnectionConfigurations: []*P2SConnectionConfiguration{
					{
						SubResource: SubResource{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
						},
						Name: to.StringPtr("P2SConnectionConfig1"),
						Properties: &P2SConnectionConfigurationProperties{
							RoutingConfiguration: &RoutingConfiguration{
								AssociatedRouteTable: &SubResource{
									ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &PropagatedRouteTable{
									IDs: []*SubResource{
										{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.StringPtr("label1"),
										to.StringPtr("label2")},
								},
								VnetRoutes: &VnetRoute{
									StaticRoutes: []*StaticRoute{},
								},
							},
							VPNClientAddressPool: &AddressSpace{
								AddressPrefixes: []*string{
									to.StringPtr("101.3.0.0/16")},
							},
						},
					}},
				VirtualHub: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
				VPNGatewayScaleUnit: to.Int32Ptr(1),
				VPNServerConfiguration: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
				},
			},
		},
		&P2SVPNGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.P2SVPNGateway.ID == nil {
		t.Fatal("P2SVPNGateway.ID should not be nil!")
	}
}

func TestP2SVpnGateways_UpdateTags(t *testing.T) {
	// From example P2SVpnGatewayUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"p2sVpnGateway1",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&P2SVPNGatewaysBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.P2SVPNGateway.ID == nil {
		t.Fatal("P2SVPNGateway.ID should not be nil!")
	}
}

func TestP2SVpnGateways_Delete(t *testing.T) {
	// From example P2SVpnGatewayDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"p2sVpnGateway1",
		&P2SVPNGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestP2SVpnGateways_ListByResourceGroup(t *testing.T) {
	// From example P2SVpnGatewayListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&P2SVPNGatewaysListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("P2SVPNGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("P2SVPNGateway.ID should not be nil!")
			}
		}
	}
}

func TestP2SVpnGateways_List(t *testing.T) {
	// From example P2SVpnGatewayListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	pager := client.List(&P2SVPNGatewaysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("P2SVPNGateway.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("P2SVPNGateway.ID should not be nil!")
			}
		}
	}
}

func TestP2SVpnGateways_Reset(t *testing.T) {
	// From example ResetP2SVpnGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginReset(ctx,
		"rg1",
		"p2sVpnGateway1",
		&P2SVPNGatewaysBeginResetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.P2SVPNGateway.ID == nil {
		t.Fatal("P2SVPNGateway.ID should not be nil!")
	}
}

func TestP2SVpnGateways_GenerateVpnProfile(t *testing.T) {
	// From example GenerateP2SVpnGatewayVPNProfile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginGenerateVPNProfile(ctx,
		"rg1",
		"p2sVpnGateway1",
		P2SVPNProfileParameters{
			AuthenticationMethod: AuthenticationMethodEAPTLS.ToPtr(),
		},
		&P2SVPNGatewaysBeginGenerateVPNProfileOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestP2SVpnGateways_GetP2SVpnConnectionHealth(t *testing.T) {
	// From example P2SVpnGatewayGetConnectionHealth
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetP2SVPNConnectionHealth(ctx,
		"rg1",
		"p2sVpnGateway1",
		&P2SVPNGatewaysBeginGetP2SVPNConnectionHealthOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.P2SVPNGateway.ID == nil {
		t.Fatal("P2SVPNGateway.ID should not be nil!")
	}
}

func TestP2SVpnGateways_GetP2SVpnConnectionHealthDetailed(t *testing.T) {
	// From example P2SVpnGatewayGetConnectionHealthDetailed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginGetP2SVPNConnectionHealthDetailed(ctx,
		"p2s-vpn-gateway-test",
		"p2svpngateway",
		P2SVPNConnectionHealthRequest{
			OutputBlobSasURL: to.StringPtr("https://blobcortextesturl.blob.core.windows.net/folderforconfig/p2sconnectionhealths?sp=rw&se=2018-01-10T03%3A42%3A04Z&sv=2017-04-17&sig=WvXrT5bDmDFfgHs%2Brz%2BjAu123eRCNE9BO0eQYcPDT7pY%3D&sr=b"),
			VPNUserNamesFilter: []*string{
				to.StringPtr("vpnUser1"),
				to.StringPtr("vpnUser2")},
		},
		&P2SVPNGatewaysBeginGetP2SVPNConnectionHealthDetailedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestP2SVpnGateways_DisconnectP2SVpnConnections(t *testing.T) {
	// From example Disconnect VpnConnections from P2sVpn Gateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewP2SVPNGatewaysClient(con,
		"subid")
	poller, err := client.BeginDisconnectP2SVPNConnections(ctx,
		"p2s-vpn-gateway-test",
		"p2svpngateway",
		P2SVPNConnectionRequest{
			VPNConnectionIDs: []*string{
				to.StringPtr("vpnconnId1"),
				to.StringPtr("vpnconnId2")},
		},
		&P2SVPNGatewaysBeginDisconnectP2SVPNConnectionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVpnServerConfigurationsAssociatedWithVirtualWan_List(t *testing.T) {
	// From example GetVirtualWanVpnServerConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVPNServerConfigurationsAssociatedWithVirtualWanClient(con,
		"subid")
	poller, err := client.BeginList(ctx,
		"rg1",
		"wan1",
		&VPNServerConfigurationsAssociatedWithVirtualWanBeginListOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubRouteTableV2S_Get(t *testing.T) {
	// From example VirtualHubVirtualHubRouteTableV2Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubRouteTableV2SClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"virtualHubRouteTable1a",
		&VirtualHubRouteTableV2SGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualHubRouteTableV2.ID == nil {
		t.Fatal("VirtualHubRouteTableV2.ID should not be nil!")
	}
}

func TestVirtualHubRouteTableV2S_CreateOrUpdate(t *testing.T) {
	// From example VirtualHubRouteTableV2Put
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubRouteTableV2SClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"virtualHubRouteTable1a",
		VirtualHubRouteTableV2{
			Properties: &VirtualHubRouteTableV2Properties{
				AttachedConnections: []*string{
					to.StringPtr("All_Vnets")},
				Routes: []*VirtualHubRouteV2{
					{
						DestinationType: to.StringPtr("CIDR"),
						Destinations: []*string{
							to.StringPtr("20.10.0.0/16"),
							to.StringPtr("20.20.0.0/16")},
						NextHopType: to.StringPtr("IPAddress"),
						NextHops: []*string{
							to.StringPtr("10.0.0.68")},
					},
					{
						DestinationType: to.StringPtr("CIDR"),
						Destinations: []*string{
							to.StringPtr("0.0.0.0/0")},
						NextHopType: to.StringPtr("IPAddress"),
						NextHops: []*string{
							to.StringPtr("10.0.0.68")},
					}},
			},
		},
		&VirtualHubRouteTableV2SBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualHubRouteTableV2.ID == nil {
		t.Fatal("VirtualHubRouteTableV2.ID should not be nil!")
	}
}

func TestVirtualHubRouteTableV2S_Delete(t *testing.T) {
	// From example VirtualHubRouteTableV2Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubRouteTableV2SClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"virtualHubRouteTable1a",
		&VirtualHubRouteTableV2SBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubRouteTableV2S_List(t *testing.T) {
	// From example VirtualHubRouteTableV2List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubRouteTableV2SClient(con,
		"subid")
	pager := client.List("rg1",
		"virtualHub1",
		&VirtualHubRouteTableV2SListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualHubRouteTableV2.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualHubRouteTableV2.ID should not be nil!")
			}
		}
	}
}

func TestExpressRouteGateways_ListBySubscription(t *testing.T) {
	// From example ExpressRouteGatewayListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteGatewaysClient(con,
		"subid")
	_, err := client.ListBySubscription(ctx,
		&ExpressRouteGatewaysListBySubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteGateways_ListByResourceGroup(t *testing.T) {
	// From example ExpressRouteGatewayListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteGatewaysClient(con,
		"subid")
	_, err := client.ListByResourceGroup(ctx,
		"resourceGroupName",
		&ExpressRouteGatewaysListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteGateways_CreateOrUpdate(t *testing.T) {
	// From example ExpressRouteGatewayCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteGatewaysClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"gateway-2",
		ExpressRouteGateway{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ExpressRouteGatewayProperties{
				AutoScaleConfiguration: &ExpressRouteGatewayPropertiesAutoScaleConfiguration{
					Bounds: &ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds{
						Min: to.Int32Ptr(3),
					},
				},
				VirtualHub: &VirtualHubID{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/resourceGroupId/providers/Microsoft.Network/virtualHubs/virtualHubName"),
				},
			},
		},
		&ExpressRouteGatewaysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteGateway.ID == nil {
		t.Fatal("ExpressRouteGateway.ID should not be nil!")
	}
}

func TestExpressRouteGateways_UpdateTags(t *testing.T) {
	// From example ExpressRouteGatewayUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteGatewaysClient(con,
		"subid")
	poller, err := client.BeginUpdateTags(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ExpressRouteGatewaysBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteGateway.ID == nil {
		t.Fatal("ExpressRouteGateway.ID should not be nil!")
	}
}

func TestExpressRouteGateways_Get(t *testing.T) {
	// From example ExpressRouteGatewayGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteGatewaysClient(con,
		"subid")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		&ExpressRouteGatewaysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteGateway.ID == nil {
		t.Fatal("ExpressRouteGateway.ID should not be nil!")
	}
}

func TestExpressRouteGateways_Delete(t *testing.T) {
	// From example ExpressRouteGatewayDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteGatewaysClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		&ExpressRouteGatewaysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteConnections_CreateOrUpdate(t *testing.T) {
	// From example ExpressRouteConnectionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteConnectionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"gateway-2",
		"connectionName",
		ExpressRouteConnection{
			SubResource: SubResource{
				ID: to.StringPtr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/gateway-2/expressRouteConnections/connectionName"),
			},
			Name: to.StringPtr("connectionName"),
			Properties: &ExpressRouteConnectionProperties{
				AuthorizationKey: to.StringPtr("authorizationKey"),
				ExpressRouteCircuitPeering: &ExpressRouteCircuitPeeringID{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
				},
				RoutingWeight: to.Int32Ptr(2),
			},
		},
		&ExpressRouteConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteConnection.ID == nil {
		t.Fatal("ExpressRouteConnection.ID should not be nil!")
	}
}

func TestExpressRouteConnections_Get(t *testing.T) {
	// From example ExpressRouteConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		"connectionName",
		&ExpressRouteConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExpressRouteConnection.ID == nil {
		t.Fatal("ExpressRouteConnection.ID should not be nil!")
	}
}

func TestExpressRouteConnections_Delete(t *testing.T) {
	// From example ExpressRouteConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		"connectionName",
		&ExpressRouteConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExpressRouteConnections_List(t *testing.T) {
	// From example ExpressRouteConnectionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExpressRouteConnectionsClient(con,
		"subid")
	_, err := client.List(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		&ExpressRouteConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubBgpConnection_Get(t *testing.T) {
	// From example VirtualHubVirtualHubRouteTableV2Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubBgpConnectionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"hub1",
		"conn1",
		&VirtualHubBgpConnectionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BgpConnection.ID == nil {
		t.Fatal("BgpConnection.ID should not be nil!")
	}
}

func TestVirtualHubBgpConnection_CreateOrUpdate(t *testing.T) {
	// From example VirtualHubRouteTableV2Put
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubBgpConnectionClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"hub1",
		"conn1",
		BgpConnection{
			Properties: &BgpConnectionProperties{
				HubVirtualNetworkConnection: &SubResource{
					ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/hubVnetConn1"),
				},
				PeerAsn: to.Int64Ptr(20000),
				PeerIP:  to.StringPtr("192.168.1.5"),
			},
		},
		&VirtualHubBgpConnectionBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BgpConnection.ID == nil {
		t.Fatal("BgpConnection.ID should not be nil!")
	}
}

func TestVirtualHubBgpConnection_Delete(t *testing.T) {
	// From example VirtualHubRouteTableV2Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubBgpConnectionClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"hub1",
		"conn1",
		&VirtualHubBgpConnectionBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubBgpConnections_List(t *testing.T) {
	// From example VirtualHubRouteTableV2List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubBgpConnectionsClient(con,
		"subid")
	pager := client.List("rg1",
		"hub1",
		&VirtualHubBgpConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BgpConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BgpConnection.ID should not be nil!")
			}
		}
	}
}

func TestVirtualHubBgpConnections_ListLearnedRoutes(t *testing.T) {
	// From example VirtualRouterPeerListLearnedRoutes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubBgpConnectionsClient(con,
		"subid")
	poller, err := client.BeginListLearnedRoutes(ctx,
		"rg1",
		"virtualRouter1",
		"peer1",
		&VirtualHubBgpConnectionsBeginListLearnedRoutesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubBgpConnections_ListAdvertisedRoutes(t *testing.T) {
	// From example VirtualRouterPeerListAdvertisedRoutes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubBgpConnectionsClient(con,
		"subid")
	poller, err := client.BeginListAdvertisedRoutes(ctx,
		"rg1",
		"virtualRouter1",
		"peer1",
		&VirtualHubBgpConnectionsBeginListAdvertisedRoutesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubIpConfiguration_Get(t *testing.T) {
	// From example VirtualHubVirtualHubRouteTableV2Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubIPConfigurationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"hub1",
		"ipconfig1",
		&VirtualHubIPConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HubIPConfiguration.ID == nil {
		t.Fatal("HubIPConfiguration.ID should not be nil!")
	}
}

func TestVirtualHubIpConfiguration_CreateOrUpdate(t *testing.T) {
	// From example VirtualHubIpConfigurationPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubIPConfigurationClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"hub1",
		"ipconfig1",
		HubIPConfiguration{
			Properties: &HubIPConfigurationPropertiesFormat{
				Subnet: &Subnet{
					SubResource: SubResource{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
					},
				},
			},
		},
		&VirtualHubIPConfigurationBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.HubIPConfiguration.ID == nil {
		t.Fatal("HubIPConfiguration.ID should not be nil!")
	}
}

func TestVirtualHubIpConfiguration_Delete(t *testing.T) {
	// From example VirtualHubIpConfigurationDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubIPConfigurationClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"hub1",
		"ipconfig1",
		&VirtualHubIPConfigurationBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualHubIpConfiguration_List(t *testing.T) {
	// From example VirtualHubRouteTableV2List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualHubIPConfigurationClient(con,
		"subid")
	pager := client.List("rg1",
		"hub1",
		&VirtualHubIPConfigurationListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HubIPConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HubIPConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestHubRouteTables_CreateOrUpdate(t *testing.T) {
	// From example RouteTablePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubRouteTablesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"hubRouteTable1",
		HubRouteTable{
			Properties: &HubRouteTableProperties{
				Labels: []*string{
					to.StringPtr("label1"),
					to.StringPtr("label2")},
				Routes: []*HubRoute{
					{
						Name:            to.StringPtr("route1"),
						DestinationType: to.StringPtr("CIDR"),
						Destinations: []*string{
							to.StringPtr("10.0.0.0/8"),
							to.StringPtr("20.0.0.0/8"),
							to.StringPtr("30.0.0.0/8")},
						NextHop:     to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azureFirewall1"),
						NextHopType: to.StringPtr("ResourceId"),
					}},
			},
		},
		&HubRouteTablesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.HubRouteTable.ID == nil {
		t.Fatal("HubRouteTable.ID should not be nil!")
	}
}

func TestHubRouteTables_Get(t *testing.T) {
	// From example RouteTableGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubRouteTablesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"hubRouteTable1",
		&HubRouteTablesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HubRouteTable.ID == nil {
		t.Fatal("HubRouteTable.ID should not be nil!")
	}
}

func TestHubRouteTables_Delete(t *testing.T) {
	// From example RouteTableDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubRouteTablesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"hubRouteTable1",
		&HubRouteTablesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestHubRouteTables_List(t *testing.T) {
	// From example RouteTableList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHubRouteTablesClient(con,
		"subid")
	pager := client.List("rg1",
		"virtualHub1",
		&HubRouteTablesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HubRouteTable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HubRouteTable.ID should not be nil!")
			}
		}
	}
}

func TestWebApplicationFirewallPolicies_List(t *testing.T) {
	// From example Lists all WAF policies in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebApplicationFirewallPoliciesClient(con,
		"subid")
	pager := client.List("rg1",
		&WebApplicationFirewallPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WebApplicationFirewallPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
			}
		}
	}
}

func TestWebApplicationFirewallPolicies_ListAll(t *testing.T) {
	// From example Lists all WAF policies in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebApplicationFirewallPoliciesClient(con,
		"subid")
	pager := client.ListAll(&WebApplicationFirewallPoliciesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WebApplicationFirewallPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
			}
		}
	}
}

func TestWebApplicationFirewallPolicies_Get(t *testing.T) {
	// From example Gets a WAF policy within a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebApplicationFirewallPoliciesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"Policy1",
		&WebApplicationFirewallPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WebApplicationFirewallPolicy.ID == nil {
		t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
	}
}

func TestWebApplicationFirewallPolicies_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a WAF policy within a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebApplicationFirewallPoliciesClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"Policy1",
		WebApplicationFirewallPolicy{
			Resource: Resource{
				Location: to.StringPtr("WestUs"),
			},
			Properties: &WebApplicationFirewallPolicyPropertiesFormat{
				CustomRules: []*WebApplicationFirewallCustomRule{
					{
						Name:   to.StringPtr("Rule1"),
						Action: WebApplicationFirewallActionBlock.ToPtr(),
						MatchConditions: []*MatchCondition{
							{
								MatchValues: []*string{
									to.StringPtr("192.168.1.0/24"),
									to.StringPtr("10.0.0.0/24")},
								MatchVariables: []*MatchVariable{
									{
										Selector:     to.StringPtr("null"),
										VariableName: WebApplicationFirewallMatchVariableRemoteAddr.ToPtr(),
									}},
								Operator: WebApplicationFirewallOperatorIPMatch.ToPtr(),
							}},
						Priority: to.Int32Ptr(1),
						RuleType: WebApplicationFirewallRuleTypeMatchRule.ToPtr(),
					},
					{
						Name:   to.StringPtr("Rule2"),
						Action: WebApplicationFirewallActionBlock.ToPtr(),
						MatchConditions: []*MatchCondition{
							{
								MatchValues: []*string{
									to.StringPtr("192.168.1.0/24")},
								MatchVariables: []*MatchVariable{
									{
										Selector:     to.StringPtr("null"),
										VariableName: WebApplicationFirewallMatchVariableRemoteAddr.ToPtr(),
									}},
								Operator: WebApplicationFirewallOperatorIPMatch.ToPtr(),
							},
							{
								MatchValues: []*string{
									to.StringPtr("Windows")},
								MatchVariables: []*MatchVariable{
									{
										Selector:     to.StringPtr("UserAgent"),
										VariableName: WebApplicationFirewallMatchVariableRequestHeaders.ToPtr(),
									}},
								Operator: WebApplicationFirewallOperatorContains.ToPtr(),
							}},
						Priority: to.Int32Ptr(2),
						RuleType: WebApplicationFirewallRuleTypeMatchRule.ToPtr(),
					}},
				ManagedRules: &ManagedRulesDefinition{
					ManagedRuleSets: []*ManagedRuleSet{
						{
							RuleSetType:    to.StringPtr("OWASP"),
							RuleSetVersion: to.StringPtr("3.2"),
						}},
				},
			},
		},
		&WebApplicationFirewallPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WebApplicationFirewallPolicy.ID == nil {
		t.Fatal("WebApplicationFirewallPolicy.ID should not be nil!")
	}
}

func TestWebApplicationFirewallPolicies_Delete(t *testing.T) {
	// From example Deletes a WAF policy within a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebApplicationFirewallPoliciesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"Policy1",
		&WebApplicationFirewallPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
