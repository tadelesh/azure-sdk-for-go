//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestApplicationGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ApplicationGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"appgw",
		&armnetwork.ApplicationGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayDelete.json: %v", err)
	}
}

func TestApplicationGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ApplicationGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"appgw",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGateway{
			Name:     to.Ptr("appgw"),
			Type:     to.Ptr("Microsoft.Network/applicationGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw"),
			Location: to.Ptr("southcentralus"),
			Properties: &armnetwork.ApplicationGatewayPropertiesFormat{
				AuthenticationCertificates: []*armnetwork.ApplicationGatewayAuthenticationCertificate{},
				BackendAddressPools: []*armnetwork.ApplicationGatewayBackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
						Name: to.Ptr("appgwpool"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses:  []*armnetwork.ApplicationGatewayBackendAddress{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
						Name: to.Ptr("appgwpool1"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
								{},
								{}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHTTPSettings{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
						Name: to.Ptr("appgwbhs"),
						Properties: &armnetwork.ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
							CookieBasedAffinity: to.Ptr(armnetwork.ApplicationGatewayCookieBasedAffinityDisabled),
							Port:                to.Ptr[int32](80),
							ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestTimeout:      to.Ptr[int32](30),
							Protocol:            to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.ApplicationGatewayFrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
						Name: to.Ptr("appgwfip"),
						Properties: &armnetwork.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/appgwpip"),
							},
						},
					}},
				FrontendPorts: []*armnetwork.ApplicationGatewayFrontendPort{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
						Name: to.Ptr("appgwfp"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port:              to.Ptr[int32](443),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp80"),
						Name: to.Ptr("appgwfp80"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				GatewayIPConfigurations: []*armnetwork.ApplicationGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/gatewayIPConfigurations/appgwipc"),
						Name: to.Ptr("appgwipc"),
						Properties: &armnetwork.ApplicationGatewayIPConfigurationPropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/virtualNetwork1/subnets/appgwsubnet"),
							},
						},
					}},
				GlobalConfiguration: &armnetwork.ApplicationGatewayGlobalConfiguration{
					EnableRequestBuffering:  to.Ptr(true),
					EnableResponseBuffering: to.Ptr(true),
				},
				HTTPListeners: []*armnetwork.ApplicationGatewayHTTPListener{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
						Name: to.Ptr("appgwhl"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
							},
							ProvisioningState:           to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequireServerNameIndication: to.Ptr(false),
							SSLCertificate: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
							},
							SSLProfile: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslProfiles/sslProfile1"),
							},
							Protocol: to.Ptr(armnetwork.ApplicationGatewayProtocolHTTPS),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhttplistener"),
						Name: to.Ptr("appgwhttplistener"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp80"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				LoadDistributionPolicies: []*armnetwork.ApplicationGatewayLoadDistributionPolicy{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
						Name: to.Ptr("ldp1"),
						Properties: &armnetwork.ApplicationGatewayLoadDistributionPolicyPropertiesFormat{
							LoadDistributionAlgorithm: to.Ptr(armnetwork.ApplicationGatewayLoadDistributionAlgorithmRoundRobin),
							LoadDistributionTargets: []*armnetwork.ApplicationGatewayLoadDistributionTarget{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1/loadDistributionTargets/ldt1"),
									Name: to.Ptr("ld11"),
									Properties: &armnetwork.ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										WeightPerServer: to.Ptr[int32](40),
									},
								},
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1/loadDistributionTargets/ldt1"),
									Name: to.Ptr("ld11"),
									Properties: &armnetwork.ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
										},
										WeightPerServer: to.Ptr[int32](60),
									},
								}},
						},
					}},
				OperationalState:           to.Ptr(armnetwork.ApplicationGatewayOperationalStateRunning),
				PrivateEndpointConnections: []*armnetwork.ApplicationGatewayPrivateEndpointConnection{},
				PrivateLinkConfigurations: []*armnetwork.ApplicationGatewayPrivateLinkConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkConfigurations/privateLink1"),
						Name: to.Ptr("privateLink1"),
						Properties: &armnetwork.ApplicationGatewayPrivateLinkConfigurationProperties{
							IPConfigurations: []*armnetwork.ApplicationGatewayPrivateLinkIPConfiguration{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkConfigurations/privateLink1/privateLinkConfigurations/privateLink1/ipConfigurations/natNicIpconfig1"),
									Name: to.Ptr("natNicIpconfig1"),
									Properties: &armnetwork.ApplicationGatewayPrivateLinkIPConfigurationProperties{
										Primary:                   to.Ptr(true),
										PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
										ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/virtualNetwork1/subnets/appgwsubnet"),
										},
									},
								},
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkConfigurations/privateLink1/privateLinkConfigurations/privateLink1/ipConfigurations/natNicIpconfig2"),
									Name: to.Ptr("natNicIpconfig2"),
									Properties: &armnetwork.ApplicationGatewayPrivateLinkIPConfigurationProperties{
										PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
										ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/virtualNetwork1/subnets/appgwsubnet"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				Probes:            []*armnetwork.ApplicationGatewayProbe{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RequestRoutingRules: []*armnetwork.ApplicationGatewayRequestRoutingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/requestRoutingRules/appgwrule"),
						Name: to.Ptr("appgwrule"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							BackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
							},
							LoadDistributionPolicy: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							Priority:          to.Ptr[int32](10),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RewriteRuleSet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							RuleType: to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypeBasic),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/requestRoutingRules/appgwPathBasedRule"),
						Name: to.Ptr("appgwPathBasedRule"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhttplistener"),
							},
							Priority:          to.Ptr[int32](20),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RuleType:          to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypePathBasedRouting),
							URLPathMap: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1"),
							},
						},
					}},
				RewriteRuleSets: []*armnetwork.ApplicationGatewayRewriteRuleSet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
						Name: to.Ptr("rewriteRuleSet1"),
						Properties: &armnetwork.ApplicationGatewayRewriteRuleSetPropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RewriteRules: []*armnetwork.ApplicationGatewayRewriteRule{
								{
									Name: to.Ptr("Set X-Forwarded-For"),
									ActionSet: &armnetwork.ApplicationGatewayRewriteRuleActionSet{
										RequestHeaderConfigurations: []*armnetwork.ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.Ptr("X-Forwarded-For"),
												HeaderValue: to.Ptr("{var_remote-addr}"),
											}},
										ResponseHeaderConfigurations: []*armnetwork.ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.Ptr("Strict-Transport-Security"),
												HeaderValue: to.Ptr("max-age=31536000"),
											}},
										URLConfiguration: &armnetwork.ApplicationGatewayURLConfiguration{
											ModifiedPath:        to.Ptr("/abc"),
											ModifiedQueryString: to.Ptr("x=y&a=b"),
											Reroute:             to.Ptr(false),
										},
									},
									Conditions: []*armnetwork.ApplicationGatewayRewriteRuleCondition{
										{
											IgnoreCase: to.Ptr(true),
											Negate:     to.Ptr(false),
											Pattern:    to.Ptr("^Bearer"),
											Variable:   to.Ptr("http_req_Authorization"),
										}},
									RuleSequence: to.Ptr[int32](102),
								}},
						},
					}},
				SKU: &armnetwork.ApplicationGatewaySKU{
					Name:     to.Ptr(armnetwork.ApplicationGatewaySKUNameStandardMedium),
					Capacity: to.Ptr[int32](3),
					Tier:     to.Ptr(armnetwork.ApplicationGatewayTierStandard),
				},
				SSLCertificates: []*armnetwork.ApplicationGatewaySSLCertificate{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
						Name: to.Ptr("sslcert"),
						Properties: &armnetwork.ApplicationGatewaySSLCertificatePropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicCertData:    to.Ptr("*****"),
						},
					}},
				SSLProfiles: []*armnetwork.ApplicationGatewaySSLProfile{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslProfiles/sslProfile1"),
						Name: to.Ptr("sslProfile1"),
						Properties: &armnetwork.ApplicationGatewaySSLProfilePropertiesFormat{
							ClientAuthConfiguration: &armnetwork.ApplicationGatewayClientAuthConfiguration{
								VerifyClientCertIssuerDN: to.Ptr(true),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SSLPolicy: &armnetwork.ApplicationGatewaySSLPolicy{
								CipherSuites: []*armnetwork.ApplicationGatewaySSLCipherSuite{
									to.Ptr(armnetwork.ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA256)},
								MinProtocolVersion: to.Ptr(armnetwork.ApplicationGatewaySSLProtocolTLSv11),
								PolicyType:         to.Ptr(armnetwork.ApplicationGatewaySSLPolicyTypeCustom),
							},
							TrustedClientCertificates: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/trustedClientCertificates/clientcert"),
								}},
						},
					}},
				TrustedClientCertificates: []*armnetwork.ApplicationGatewayTrustedClientCertificate{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/trustedClientCertificates/clientcert"),
						Name: to.Ptr("clientcert"),
						Properties: &armnetwork.ApplicationGatewayTrustedClientCertificatePropertiesFormat{
							ClientCertIssuerDN: to.Ptr("CN=User1, OU=Eng, O=Company Ltd, L=D4, S=Arizona, C=US"),
							Data:               to.Ptr("****"),
							ProvisioningState:  to.Ptr(armnetwork.ProvisioningStateSucceeded),
							ValidatedCertData:  to.Ptr("****"),
						},
					}},
				URLPathMaps: []*armnetwork.ApplicationGatewayURLPathMap{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1"),
						Name: to.Ptr("pathMap1"),
						Properties: &armnetwork.ApplicationGatewayURLPathMapPropertiesFormat{
							DefaultBackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							DefaultBackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							DefaultLoadDistributionPolicy: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							DefaultRewriteRuleSet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							PathRules: []*armnetwork.ApplicationGatewayPathRule{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1/pathRules/apiPaths"),
									Name: to.Ptr("apiPaths"),
									Properties: &armnetwork.ApplicationGatewayPathRulePropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										BackendHTTPSettings: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
										},
										LoadDistributionPolicy: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
										},
										Paths: []*string{
											to.Ptr("/api"),
											to.Ptr("/v1/api")},
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										RewriteRuleSet: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Application Gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"appgw",
		armnetwork.ApplicationGateway{
			Location: to.Ptr("eastus"),
			Identity: &armnetwork.ManagedServiceIdentity{
				Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armnetwork.ApplicationGatewayPropertiesFormat{
				BackendAddressPools: []*armnetwork.ApplicationGatewayBackendAddressPool{
					{
						Name: to.Ptr("appgwpool"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
								{
									IPAddress: to.Ptr("10.0.1.1"),
								},
								{
									IPAddress: to.Ptr("10.0.1.2"),
								}},
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
						Name: to.Ptr("appgwpool1"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
								{},
								{}},
						},
					}},
				BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHTTPSettings{
					{
						Name: to.Ptr("appgwbhs"),
						Properties: &armnetwork.ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
							CookieBasedAffinity: to.Ptr(armnetwork.ApplicationGatewayCookieBasedAffinityDisabled),
							Port:                to.Ptr[int32](80),
							RequestTimeout:      to.Ptr[int32](30),
							Protocol:            to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.ApplicationGatewayFrontendIPConfiguration{
					{
						Name: to.Ptr("appgwfip"),
						Properties: &armnetwork.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/appgwpip"),
							},
						},
					}},
				FrontendPorts: []*armnetwork.ApplicationGatewayFrontendPort{
					{
						Name: to.Ptr("appgwfp"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port: to.Ptr[int32](443),
						},
					},
					{
						Name: to.Ptr("appgwfp80"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port: to.Ptr[int32](80),
						},
					}},
				GatewayIPConfigurations: []*armnetwork.ApplicationGatewayIPConfiguration{
					{
						Name: to.Ptr("appgwipc"),
						Properties: &armnetwork.ApplicationGatewayIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/appgwsubnet"),
							},
						},
					}},
				GlobalConfiguration: &armnetwork.ApplicationGatewayGlobalConfiguration{
					EnableRequestBuffering:  to.Ptr(true),
					EnableResponseBuffering: to.Ptr(true),
				},
				HTTPListeners: []*armnetwork.ApplicationGatewayHTTPListener{
					{
						Name: to.Ptr("appgwhl"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
							},
							RequireServerNameIndication: to.Ptr(false),
							SSLCertificate: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
							},
							SSLProfile: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslProfiles/sslProfile1"),
							},
							Protocol: to.Ptr(armnetwork.ApplicationGatewayProtocolHTTPS),
						},
					},
					{
						Name: to.Ptr("appgwhttplistener"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp80"),
							},
							Protocol: to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				LoadDistributionPolicies: []*armnetwork.ApplicationGatewayLoadDistributionPolicy{
					{
						Name: to.Ptr("ldp1"),
						Properties: &armnetwork.ApplicationGatewayLoadDistributionPolicyPropertiesFormat{
							LoadDistributionAlgorithm: to.Ptr(armnetwork.ApplicationGatewayLoadDistributionAlgorithmRoundRobin),
							LoadDistributionTargets: []*armnetwork.ApplicationGatewayLoadDistributionTarget{
								{
									Name: to.Ptr("ld11"),
									Properties: &armnetwork.ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										WeightPerServer: to.Ptr[int32](40),
									},
								},
								{
									Name: to.Ptr("ld11"),
									Properties: &armnetwork.ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
										},
										WeightPerServer: to.Ptr[int32](60),
									},
								}},
						},
					}},
				RequestRoutingRules: []*armnetwork.ApplicationGatewayRequestRoutingRule{
					{
						Name: to.Ptr("appgwrule"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							BackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
							},
							LoadDistributionPolicy: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							Priority: to.Ptr[int32](10),
							RewriteRuleSet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							RuleType: to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypeBasic),
						},
					},
					{
						Name: to.Ptr("appgwPathBasedRule"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhttplistener"),
							},
							Priority: to.Ptr[int32](20),
							RuleType: to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypePathBasedRouting),
							URLPathMap: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1"),
							},
						},
					}},
				RewriteRuleSets: []*armnetwork.ApplicationGatewayRewriteRuleSet{
					{
						Name: to.Ptr("rewriteRuleSet1"),
						Properties: &armnetwork.ApplicationGatewayRewriteRuleSetPropertiesFormat{
							RewriteRules: []*armnetwork.ApplicationGatewayRewriteRule{
								{
									Name: to.Ptr("Set X-Forwarded-For"),
									ActionSet: &armnetwork.ApplicationGatewayRewriteRuleActionSet{
										RequestHeaderConfigurations: []*armnetwork.ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.Ptr("X-Forwarded-For"),
												HeaderValue: to.Ptr("{var_add_x_forwarded_for_proxy}"),
											}},
										ResponseHeaderConfigurations: []*armnetwork.ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.Ptr("Strict-Transport-Security"),
												HeaderValue: to.Ptr("max-age=31536000"),
											}},
										URLConfiguration: &armnetwork.ApplicationGatewayURLConfiguration{
											ModifiedPath: to.Ptr("/abc"),
										},
									},
									Conditions: []*armnetwork.ApplicationGatewayRewriteRuleCondition{
										{
											IgnoreCase: to.Ptr(true),
											Negate:     to.Ptr(false),
											Pattern:    to.Ptr("^Bearer"),
											Variable:   to.Ptr("http_req_Authorization"),
										}},
									RuleSequence: to.Ptr[int32](102),
								}},
						},
					}},
				SKU: &armnetwork.ApplicationGatewaySKU{
					Name:     to.Ptr(armnetwork.ApplicationGatewaySKUNameStandardV2),
					Capacity: to.Ptr[int32](3),
					Tier:     to.Ptr(armnetwork.ApplicationGatewayTierStandardV2),
				},
				SSLCertificates: []*armnetwork.ApplicationGatewaySSLCertificate{
					{
						Name: to.Ptr("sslcert"),
						Properties: &armnetwork.ApplicationGatewaySSLCertificatePropertiesFormat{
							Data:     to.Ptr("****"),
							Password: to.Ptr("****"),
						},
					},
					{
						Name: to.Ptr("sslcert2"),
						Properties: &armnetwork.ApplicationGatewaySSLCertificatePropertiesFormat{
							KeyVaultSecretID: to.Ptr("https://kv/secret"),
						},
					}},
				SSLProfiles: []*armnetwork.ApplicationGatewaySSLProfile{
					{
						Name: to.Ptr("sslProfile1"),
						Properties: &armnetwork.ApplicationGatewaySSLProfilePropertiesFormat{
							ClientAuthConfiguration: &armnetwork.ApplicationGatewayClientAuthConfiguration{
								VerifyClientCertIssuerDN: to.Ptr(true),
							},
							SSLPolicy: &armnetwork.ApplicationGatewaySSLPolicy{
								CipherSuites: []*armnetwork.ApplicationGatewaySSLCipherSuite{
									to.Ptr(armnetwork.ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA256)},
								MinProtocolVersion: to.Ptr(armnetwork.ApplicationGatewaySSLProtocolTLSv11),
								PolicyType:         to.Ptr(armnetwork.ApplicationGatewaySSLPolicyTypeCustom),
							},
							TrustedClientCertificates: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/trustedClientCertificates/clientcert"),
								}},
						},
					}},
				TrustedClientCertificates: []*armnetwork.ApplicationGatewayTrustedClientCertificate{
					{
						Name: to.Ptr("clientcert"),
						Properties: &armnetwork.ApplicationGatewayTrustedClientCertificatePropertiesFormat{
							Data: to.Ptr("****"),
						},
					}},
				TrustedRootCertificates: []*armnetwork.ApplicationGatewayTrustedRootCertificate{
					{
						Name: to.Ptr("rootcert"),
						Properties: &armnetwork.ApplicationGatewayTrustedRootCertificatePropertiesFormat{
							Data: to.Ptr("****"),
						},
					},
					{
						Name: to.Ptr("rootcert1"),
						Properties: &armnetwork.ApplicationGatewayTrustedRootCertificatePropertiesFormat{
							KeyVaultSecretID: to.Ptr("https://kv/secret"),
						},
					}},
				URLPathMaps: []*armnetwork.ApplicationGatewayURLPathMap{
					{
						Name: to.Ptr("pathMap1"),
						Properties: &armnetwork.ApplicationGatewayURLPathMapPropertiesFormat{
							DefaultBackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							DefaultBackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							DefaultLoadDistributionPolicy: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							DefaultRewriteRuleSet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							PathRules: []*armnetwork.ApplicationGatewayPathRule{
								{
									Name: to.Ptr("apiPaths"),
									Properties: &armnetwork.ApplicationGatewayPathRulePropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										BackendHTTPSettings: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
										},
										LoadDistributionPolicy: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
										},
										Paths: []*string{
											to.Ptr("/api"),
											to.Ptr("/v1/api")},
										RewriteRuleSet: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
										},
									},
								}},
						},
					}},
			},
		},
		&armnetwork.ApplicationGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGateway{
			Name:     to.Ptr("appgw"),
			Type:     to.Ptr("Microsoft.Network/applicationGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw"),
			Location: to.Ptr("southcentralus"),
			Properties: &armnetwork.ApplicationGatewayPropertiesFormat{
				AuthenticationCertificates: []*armnetwork.ApplicationGatewayAuthenticationCertificate{},
				BackendAddressPools: []*armnetwork.ApplicationGatewayBackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
						Name: to.Ptr("appgwpool"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses:  []*armnetwork.ApplicationGatewayBackendAddress{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
						Name: to.Ptr("appgwpool1"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
								{},
								{}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHTTPSettings{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
						Name: to.Ptr("appgwbhs"),
						Properties: &armnetwork.ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
							CookieBasedAffinity: to.Ptr(armnetwork.ApplicationGatewayCookieBasedAffinityDisabled),
							Port:                to.Ptr[int32](80),
							ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestTimeout:      to.Ptr[int32](30),
							Protocol:            to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.ApplicationGatewayFrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
						Name: to.Ptr("appgwfip"),
						Properties: &armnetwork.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							PrivateLinkConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkConfigurations/privateLinkConfig1"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/appgwpip"),
							},
						},
					}},
				FrontendPorts: []*armnetwork.ApplicationGatewayFrontendPort{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
						Name: to.Ptr("appgwfp"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port:              to.Ptr[int32](443),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp80"),
						Name: to.Ptr("appgwfp80"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				GatewayIPConfigurations: []*armnetwork.ApplicationGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/gatewayIPConfigurations/appgwipc"),
						Name: to.Ptr("appgwipc"),
						Properties: &armnetwork.ApplicationGatewayIPConfigurationPropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/virtualNetwork1/subnets/appgwsubnet"),
							},
						},
					}},
				GlobalConfiguration: &armnetwork.ApplicationGatewayGlobalConfiguration{
					EnableRequestBuffering:  to.Ptr(true),
					EnableResponseBuffering: to.Ptr(true),
				},
				HTTPListeners: []*armnetwork.ApplicationGatewayHTTPListener{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
						Name: to.Ptr("appgwhl"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
							},
							ProvisioningState:           to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequireServerNameIndication: to.Ptr(false),
							SSLCertificate: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
							},
							SSLProfile: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslProfiles/sslProfile1"),
							},
							Protocol: to.Ptr(armnetwork.ApplicationGatewayProtocolHTTPS),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhttplistener"),
						Name: to.Ptr("appgwhttplistener"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp80"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				LoadDistributionPolicies: []*armnetwork.ApplicationGatewayLoadDistributionPolicy{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
						Name: to.Ptr("ldp1"),
						Properties: &armnetwork.ApplicationGatewayLoadDistributionPolicyPropertiesFormat{
							LoadDistributionAlgorithm: to.Ptr(armnetwork.ApplicationGatewayLoadDistributionAlgorithmRoundRobin),
							LoadDistributionTargets: []*armnetwork.ApplicationGatewayLoadDistributionTarget{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1/loadDistributionTargets/ldt1"),
									Name: to.Ptr("ld11"),
									Properties: &armnetwork.ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										WeightPerServer: to.Ptr[int32](40),
									},
								},
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1/loadDistributionTargets/ldt1"),
									Name: to.Ptr("ld11"),
									Properties: &armnetwork.ApplicationGatewayLoadDistributionTargetPropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool1"),
										},
										WeightPerServer: to.Ptr[int32](60),
									},
								}},
						},
					}},
				OperationalState:  to.Ptr(armnetwork.ApplicationGatewayOperationalStateRunning),
				Probes:            []*armnetwork.ApplicationGatewayProbe{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RequestRoutingRules: []*armnetwork.ApplicationGatewayRequestRoutingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/requestRoutingRules/appgwrule"),
						Name: to.Ptr("appgwrule"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							BackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
							},
							LoadDistributionPolicy: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RewriteRuleSet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							RuleType: to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypeBasic),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/requestRoutingRules/appgwPathBasedRule"),
						Name: to.Ptr("appgwPathBasedRule"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhttplistener"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RuleType:          to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypePathBasedRouting),
							URLPathMap: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1"),
							},
						},
					}},
				RewriteRuleSets: []*armnetwork.ApplicationGatewayRewriteRuleSet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
						Name: to.Ptr("rewriteRuleSet1"),
						Properties: &armnetwork.ApplicationGatewayRewriteRuleSetPropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RewriteRules: []*armnetwork.ApplicationGatewayRewriteRule{
								{
									Name: to.Ptr("Set X-Forwarded-For"),
									ActionSet: &armnetwork.ApplicationGatewayRewriteRuleActionSet{
										RequestHeaderConfigurations: []*armnetwork.ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.Ptr("X-Forwarded-For"),
												HeaderValue: to.Ptr("{var_remote-addr}"),
											}},
										ResponseHeaderConfigurations: []*armnetwork.ApplicationGatewayHeaderConfiguration{
											{
												HeaderName:  to.Ptr("Strict-Transport-Security"),
												HeaderValue: to.Ptr("max-age=31536000"),
											}},
										URLConfiguration: &armnetwork.ApplicationGatewayURLConfiguration{
											ModifiedPath:        to.Ptr("/abc"),
											ModifiedQueryString: to.Ptr("x=y&a=b"),
										},
									},
									Conditions: []*armnetwork.ApplicationGatewayRewriteRuleCondition{
										{
											IgnoreCase: to.Ptr(true),
											Negate:     to.Ptr(false),
											Pattern:    to.Ptr("^Bearer"),
											Variable:   to.Ptr("http_req_Authorization"),
										}},
									RuleSequence: to.Ptr[int32](102),
								}},
						},
					}},
				SKU: &armnetwork.ApplicationGatewaySKU{
					Name:     to.Ptr(armnetwork.ApplicationGatewaySKUNameStandardMedium),
					Capacity: to.Ptr[int32](3),
					Tier:     to.Ptr(armnetwork.ApplicationGatewayTierStandard),
				},
				SSLCertificates: []*armnetwork.ApplicationGatewaySSLCertificate{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
						Name: to.Ptr("sslcert"),
						Properties: &armnetwork.ApplicationGatewaySSLCertificatePropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicCertData:    to.Ptr("*****"),
						},
					}},
				SSLProfiles: []*armnetwork.ApplicationGatewaySSLProfile{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslProfiles/sslProfile1"),
						Name: to.Ptr("sslProfile1"),
						Properties: &armnetwork.ApplicationGatewaySSLProfilePropertiesFormat{
							ClientAuthConfiguration: &armnetwork.ApplicationGatewayClientAuthConfiguration{
								VerifyClientCertIssuerDN: to.Ptr(true),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SSLPolicy: &armnetwork.ApplicationGatewaySSLPolicy{
								CipherSuites: []*armnetwork.ApplicationGatewaySSLCipherSuite{
									to.Ptr(armnetwork.ApplicationGatewaySSLCipherSuiteTLSECDHERSAWITHAES128CBCSHA256)},
								MinProtocolVersion: to.Ptr(armnetwork.ApplicationGatewaySSLProtocolTLSv11),
								PolicyType:         to.Ptr(armnetwork.ApplicationGatewaySSLPolicyTypeCustom),
							},
							TrustedClientCertificates: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/trustedClientCertificates/clientcert"),
								}},
						},
					}},
				TrustedClientCertificates: []*armnetwork.ApplicationGatewayTrustedClientCertificate{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/trustedClientCertificates/clientcert"),
						Name: to.Ptr("clientcert"),
						Properties: &armnetwork.ApplicationGatewayTrustedClientCertificatePropertiesFormat{
							Data:              to.Ptr("****"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				URLPathMaps: []*armnetwork.ApplicationGatewayURLPathMap{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1"),
						Name: to.Ptr("pathMap1"),
						Properties: &armnetwork.ApplicationGatewayURLPathMapPropertiesFormat{
							DefaultBackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
							},
							DefaultBackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
							},
							DefaultLoadDistributionPolicy: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
							},
							DefaultRewriteRuleSet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
							},
							PathRules: []*armnetwork.ApplicationGatewayPathRule{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/urlPathMaps/pathMap1/pathRules/apiPaths"),
									Name: to.Ptr("apiPaths"),
									Properties: &armnetwork.ApplicationGatewayPathRulePropertiesFormat{
										BackendAddressPool: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
										},
										BackendHTTPSettings: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
										},
										LoadDistributionPolicy: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/loadDistributionPolicies/ldp1"),
										},
										Paths: []*string{
											to.Ptr("/api"),
											to.Ptr("/v1/api")},
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										RewriteRuleSet: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/rewriteRuleSets/rewriteRuleSet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Application Gateway tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"AppGw",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGateway{
			Name:     to.Ptr("AppGw"),
			Type:     to.Ptr("Microsoft.Network/applicationGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.ApplicationGatewayPropertiesFormat{
				AuthenticationCertificates: []*armnetwork.ApplicationGatewayAuthenticationCertificate{},
				BackendAddressPools: []*armnetwork.ApplicationGatewayBackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/backendAddressPools/Pool01"),
						Name: to.Ptr("Pool01"),
						Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
							BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
								{
									IPAddress: to.Ptr("10.10.10.1"),
								},
								{
									IPAddress: to.Ptr("10.10.10.2"),
								},
								{
									IPAddress: to.Ptr("10.10.10.3"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHTTPSettings{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/backendHttpSettingsCollection/PoolSetting01"),
						Name: to.Ptr("PoolSetting01"),
						Properties: &armnetwork.ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
							CookieBasedAffinity:            to.Ptr(armnetwork.ApplicationGatewayCookieBasedAffinityDisabled),
							PickHostNameFromBackendAddress: to.Ptr(false),
							Port:                           to.Ptr[int32](80),
							ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestTimeout:                 to.Ptr[int32](30),
							Protocol:                       to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.ApplicationGatewayFrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/frontendIPConfigurations/FrontEndConfig01"),
						Name: to.Ptr("FrontEndConfig01"),
						Properties: &armnetwork.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/publicIp1"),
							},
						},
					}},
				FrontendPorts: []*armnetwork.ApplicationGatewayFrontendPort{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/frontendPorts/FrontEndPort01"),
						Name: to.Ptr("FrontEndPort01"),
						Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				GatewayIPConfigurations: []*armnetwork.ApplicationGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/gatewayIPConfigurations/GatewayIp01"),
						Name: to.Ptr("GatewayIp01"),
						Properties: &armnetwork.ApplicationGatewayIPConfigurationPropertiesFormat{
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet1"),
							},
						},
					}},
				HTTPListeners: []*armnetwork.ApplicationGatewayHTTPListener{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/httpListeners/listener1"),
						Name: to.Ptr("listener1"),
						Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/frontendIPConfigurations/FrontEndConfig01"),
							},
							FrontendPort: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/frontendPorts/FrontEndPort01"),
							},
							ProvisioningState:           to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequireServerNameIndication: to.Ptr(false),
							Protocol:                    to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
						},
					}},
				OperationalState:       to.Ptr(armnetwork.ApplicationGatewayOperationalStateRunning),
				Probes:                 []*armnetwork.ApplicationGatewayProbe{},
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RedirectConfigurations: []*armnetwork.ApplicationGatewayRedirectConfiguration{},
				RequestRoutingRules: []*armnetwork.ApplicationGatewayRequestRoutingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/requestRoutingRules/Rule01"),
						Name: to.Ptr("Rule01"),
						Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/backendAddressPools/Pool01"),
							},
							BackendHTTPSettings: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/backendHttpSettingsCollection/PoolSetting01"),
							},
							HTTPListener: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/AppGw/httpListeners/listener1"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RuleType:          to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypeBasic),
						},
					}},
				ResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				SKU: &armnetwork.ApplicationGatewaySKU{
					Name:     to.Ptr(armnetwork.ApplicationGatewaySKUNameStandardSmall),
					Capacity: to.Ptr[int32](2),
					Tier:     to.Ptr(armnetwork.ApplicationGatewayTierStandard),
				},
				SSLCertificates: []*armnetwork.ApplicationGatewaySSLCertificate{},
				URLPathMaps:     []*armnetwork.ApplicationGatewayURLPathMap{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all application gateways in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ApplicationGatewayListResult{
			Value: []*armnetwork.ApplicationGateway{
				{
					Name:     to.Ptr("appgw"),
					Type:     to.Ptr("Microsoft.Network/applicationGateways"),
					Location: to.Ptr("southcentralus"),
					Properties: &armnetwork.ApplicationGatewayPropertiesFormat{
						BackendAddressPools: []*armnetwork.ApplicationGatewayBackendAddressPool{
							{
								Name: to.Ptr("appgwpool"),
								Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
									BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
										{
											IPAddress: to.Ptr("10.0.1.1"),
										},
										{
											IPAddress: to.Ptr("10.0.1.2"),
										}},
								},
							}},
						BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHTTPSettings{
							{
								Name: to.Ptr("appgwbhs"),
								Properties: &armnetwork.ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
									CookieBasedAffinity: to.Ptr(armnetwork.ApplicationGatewayCookieBasedAffinityDisabled),
									Port:                to.Ptr[int32](80),
									RequestTimeout:      to.Ptr[int32](30),
									Protocol:            to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
								},
							}},
						FrontendIPConfigurations: []*armnetwork.ApplicationGatewayFrontendIPConfiguration{
							{
								Name: to.Ptr("appgwfip"),
								Properties: &armnetwork.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/appgwpip"),
									},
								},
							}},
						FrontendPorts: []*armnetwork.ApplicationGatewayFrontendPort{
							{
								Name: to.Ptr("appgwfp"),
								Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
									Port: to.Ptr[int32](443),
								},
							}},
						GatewayIPConfigurations: []*armnetwork.ApplicationGatewayIPConfiguration{
							{
								Name: to.Ptr("appgwipc"),
								Properties: &armnetwork.ApplicationGatewayIPConfigurationPropertiesFormat{
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/appgwsubnet"),
									},
								},
							}},
						HTTPListeners: []*armnetwork.ApplicationGatewayHTTPListener{
							{
								Name: to.Ptr("appgwhl"),
								Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
									},
									FrontendPort: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
									},
									RequireServerNameIndication: to.Ptr(false),
									SSLCertificate: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
									},
									Protocol: to.Ptr(armnetwork.ApplicationGatewayProtocolHTTPS),
								},
							}},
						RequestRoutingRules: []*armnetwork.ApplicationGatewayRequestRoutingRule{
							{
								Name: to.Ptr("appgwrule"),
								Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
									BackendAddressPool: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
									},
									BackendHTTPSettings: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
									},
									HTTPListener: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
									},
									RuleType: to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypeBasic),
								},
							}},
						SKU: &armnetwork.ApplicationGatewaySKU{
							Name:     to.Ptr(armnetwork.ApplicationGatewaySKUNameStandardMedium),
							Capacity: to.Ptr[int32](3),
							Tier:     to.Ptr(armnetwork.ApplicationGatewayTierStandard),
						},
						SSLCertificates: []*armnetwork.ApplicationGatewaySSLCertificate{
							{
								Name: to.Ptr("sslcert"),
								Properties: &armnetwork.ApplicationGatewaySSLCertificatePropertiesFormat{
									Data:     to.Ptr("base64-pfxData"),
									Password: to.Ptr("<password>"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationGatewayListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationGatewayListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all application gateways in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ApplicationGatewayListResult{
			Value: []*armnetwork.ApplicationGateway{
				{
					Name:     to.Ptr("appgw"),
					Type:     to.Ptr("Microsoft.Network/applicationGateways"),
					Location: to.Ptr("southcentralus"),
					Properties: &armnetwork.ApplicationGatewayPropertiesFormat{
						BackendAddressPools: []*armnetwork.ApplicationGatewayBackendAddressPool{
							{
								Name: to.Ptr("appgwpool"),
								Properties: &armnetwork.ApplicationGatewayBackendAddressPoolPropertiesFormat{
									BackendAddresses: []*armnetwork.ApplicationGatewayBackendAddress{
										{
											IPAddress: to.Ptr("10.0.1.1"),
										},
										{
											IPAddress: to.Ptr("10.0.1.2"),
										}},
								},
							}},
						BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHTTPSettings{
							{
								Name: to.Ptr("appgwbhs"),
								Properties: &armnetwork.ApplicationGatewayBackendHTTPSettingsPropertiesFormat{
									CookieBasedAffinity: to.Ptr(armnetwork.ApplicationGatewayCookieBasedAffinityDisabled),
									Port:                to.Ptr[int32](80),
									RequestTimeout:      to.Ptr[int32](30),
									Protocol:            to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
								},
							}},
						FrontendIPConfigurations: []*armnetwork.ApplicationGatewayFrontendIPConfiguration{
							{
								Name: to.Ptr("appgwfip"),
								Properties: &armnetwork.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/appgwpip"),
									},
								},
							}},
						FrontendPorts: []*armnetwork.ApplicationGatewayFrontendPort{
							{
								Name: to.Ptr("appgwfp"),
								Properties: &armnetwork.ApplicationGatewayFrontendPortPropertiesFormat{
									Port: to.Ptr[int32](443),
								},
							}},
						GatewayIPConfigurations: []*armnetwork.ApplicationGatewayIPConfiguration{
							{
								Name: to.Ptr("appgwipc"),
								Properties: &armnetwork.ApplicationGatewayIPConfigurationPropertiesFormat{
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/appgwsubnet"),
									},
								},
							}},
						HTTPListeners: []*armnetwork.ApplicationGatewayHTTPListener{
							{
								Name: to.Ptr("appgwhl"),
								Properties: &armnetwork.ApplicationGatewayHTTPListenerPropertiesFormat{
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendIPConfigurations/appgwfip"),
									},
									FrontendPort: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/frontendPorts/appgwfp"),
									},
									RequireServerNameIndication: to.Ptr(false),
									SSLCertificate: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/sslCertificates/sslcert"),
									},
									Protocol: to.Ptr(armnetwork.ApplicationGatewayProtocolHTTPS),
								},
							}},
						RequestRoutingRules: []*armnetwork.ApplicationGatewayRequestRoutingRule{
							{
								Name: to.Ptr("appgwrule"),
								Properties: &armnetwork.ApplicationGatewayRequestRoutingRulePropertiesFormat{
									BackendAddressPool: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendAddressPools/appgwpool"),
									},
									BackendHTTPSettings: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/appgwbhs"),
									},
									HTTPListener: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/httpListeners/appgwhl"),
									},
									RuleType: to.Ptr(armnetwork.ApplicationGatewayRequestRoutingRuleTypeBasic),
								},
							}},
						SKU: &armnetwork.ApplicationGatewaySKU{
							Name:     to.Ptr(armnetwork.ApplicationGatewaySKUNameStandardMedium),
							Capacity: to.Ptr[int32](3),
							Tier:     to.Ptr(armnetwork.ApplicationGatewayTierStandard),
						},
						SSLCertificates: []*armnetwork.ApplicationGatewaySSLCertificate{
							{
								Name: to.Ptr("sslcert"),
								Properties: &armnetwork.ApplicationGatewaySSLCertificatePropertiesFormat{
									Data:     to.Ptr("base64-pfxData"),
									Password: to.Ptr("<password>"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationGatewayListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationGatewayListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_Start(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Application Gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"rg1",
		"appgw",
		&armnetwork.ApplicationGatewaysClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayStart.json: %v", err)
	}
}

func TestApplicationGateways_Stop(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop Application Gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	poller, err := client.BeginStop(ctx,
		"rg1",
		"appgw",
		&armnetwork.ApplicationGatewaysClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayStop.json: %v", err)
	}
}

func TestApplicationGateways_BackendHealth(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Backend Health"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	poller, err := client.BeginBackendHealth(ctx,
		"appgw",
		"appgw",
		&armnetwork.ApplicationGatewaysClientBeginBackendHealthOptions{Expand: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGatewayBackendHealth{
			BackendAddressPools: []*armnetwork.ApplicationGatewayBackendHealthPool{
				{
					BackendAddressPool: &armnetwork.ApplicationGatewayBackendAddressPool{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendaddressPools/MFAnalyticsPool"),
					},
					BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHealthHTTPSettings{
						{
							BackendHTTPSettings: &armnetwork.ApplicationGatewayBackendHTTPSettings{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/MFPoolSettings"),
							},
							Servers: []*armnetwork.ApplicationGatewayBackendHealthServer{
								{
									Address: to.Ptr("10.220.1.8"),
									Health:  to.Ptr(armnetwork.ApplicationGatewayBackendHealthServerHealthUp),
								}},
						}},
				},
				{
					BackendAddressPool: &armnetwork.ApplicationGatewayBackendAddressPool{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendaddressPools/MFPool"),
					},
					BackendHTTPSettingsCollection: []*armnetwork.ApplicationGatewayBackendHealthHTTPSettings{
						{
							BackendHTTPSettings: &armnetwork.ApplicationGatewayBackendHTTPSettings{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/MFPoolSettings"),
							},
							Servers: []*armnetwork.ApplicationGatewayBackendHealthServer{
								{
									Address: to.Ptr("10.220.1.4"),
									Health:  to.Ptr(armnetwork.ApplicationGatewayBackendHealthServerHealthUp),
								},
								{
									Address: to.Ptr("10.220.1.5"),
									Health:  to.Ptr(armnetwork.ApplicationGatewayBackendHealthServerHealthUp),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGatewayBackendHealth) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGatewayBackendHealth)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_BackendHealthOnDemand(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthTest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test Backend Health"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	poller, err := client.BeginBackendHealthOnDemand(ctx,
		"rg1",
		"appgw",
		armnetwork.ApplicationGatewayOnDemandProbe{
			Path: to.Ptr("/"),
			BackendAddressPool: &armnetwork.SubResource{
				ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendaddressPools/MFAnalyticsPool"),
			},
			BackendHTTPSettings: &armnetwork.SubResource{
				ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/MFPoolSettings"),
			},
			PickHostNameFromBackendHTTPSettings: to.Ptr(true),
			Timeout:                             to.Ptr[int32](30),
			Protocol:                            to.Ptr(armnetwork.ApplicationGatewayProtocolHTTP),
		},
		&armnetwork.ApplicationGatewaysClientBeginBackendHealthOnDemandOptions{Expand: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthTest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthTest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGatewayBackendHealthOnDemand{
			BackendAddressPool: &armnetwork.ApplicationGatewayBackendAddressPool{
				ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendaddressPools/MFAnalyticsPool"),
			},
			BackendHealthHTTPSettings: &armnetwork.ApplicationGatewayBackendHealthHTTPSettings{
				BackendHTTPSettings: &armnetwork.ApplicationGatewayBackendHTTPSettings{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/backendHttpSettingsCollection/MFPoolSettings"),
				},
				Servers: []*armnetwork.ApplicationGatewayBackendHealthServer{
					{
						Address: to.Ptr("10.220.1.4"),
						Health:  to.Ptr(armnetwork.ApplicationGatewayBackendHealthServerHealthUp),
					},
					{
						Address: to.Ptr("10.220.1.5"),
						Health:  to.Ptr(armnetwork.ApplicationGatewayBackendHealthServerHealthUp),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGatewayBackendHealthOnDemand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGatewayBackendHealthOnDemand)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayBackendHealthTest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_ListAvailableServerVariables(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableServerVariablesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Available Server Variables"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("72f988bf-86f1-41af-91ab-2d7cd0dddd4", cred, &options)
	res, err := client.ListAvailableServerVariables(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableServerVariablesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*string{
			to.Ptr("request_query")}
		if !reflect.DeepEqual(exampleRes, res.StringArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringArray)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableServerVariablesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_ListAvailableRequestHeaders(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableRequestHeadersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Available Request Headers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("72f988bf-86f1-41af-91ab-2d7cd0dddd4", cred, &options)
	res, err := client.ListAvailableRequestHeaders(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableRequestHeadersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*string{
			to.Ptr("Accept-Charset")}
		if !reflect.DeepEqual(exampleRes, res.StringArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringArray)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableRequestHeadersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_ListAvailableResponseHeaders(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableResponseHeadersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Available Response Headers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("72f988bf-86f1-41af-91ab-2d7cd0dddd4", cred, &options)
	res, err := client.ListAvailableResponseHeaders(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableResponseHeadersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*string{
			to.Ptr("Access-Control-Allow-Origin")}
		if !reflect.DeepEqual(exampleRes, res.StringArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringArray)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableResponseHeadersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGateways_ListAvailableWafRuleSets(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableWafRuleSetsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Available Waf Rule Sets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewaysClient("subid", cred, &options)
	res, err := client.ListAvailableWafRuleSets(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableWafRuleSetsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGatewayAvailableWafRuleSetsResult{
			Value: []*armnetwork.ApplicationGatewayFirewallRuleSet{
				{
					Name: to.Ptr("OWASP_3.0"),
					Type: to.Ptr("Microsoft.Network/applicationGatewayAvailableWafRuleSets"),
					ID:   to.Ptr("/subscriptions//resourceGroups//providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets/"),
					Properties: &armnetwork.ApplicationGatewayFirewallRuleSetPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RuleGroups: []*armnetwork.ApplicationGatewayFirewallRuleGroup{
							{
								Description:   to.Ptr(""),
								RuleGroupName: to.Ptr("General"),
								Rules: []*armnetwork.ApplicationGatewayFirewallRule{
									{
										Description: to.Ptr("Possible Multipart Unmatched Boundary."),
										RuleID:      to.Ptr[int32](200004),
									}},
							}},
						RuleSetType:    to.Ptr("OWASP"),
						RuleSetVersion: to.Ptr("3.0"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGatewayAvailableWafRuleSetsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGatewayAvailableWafRuleSetsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayAvailableWafRuleSetsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGatewayPrivateLinkResources_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateLinkResourceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all private link resources on application gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewayPrivateLinkResourcesClient("subid", cred, &options)
	pager := client.List("rg1",
		"appgw",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateLinkResourceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ApplicationGatewayPrivateLinkResourceListResult{
			Value: []*armnetwork.ApplicationGatewayPrivateLinkResource{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkResources/privateLink1"),
					Name: to.Ptr("privateLink1"),
					Type: to.Ptr("Microsoft.Network/applicationGateways/privateLinkResources"),
					Properties: &armnetwork.ApplicationGatewayPrivateLinkResourceProperties{
						GroupID: to.Ptr("privateLink1"),
						RequiredMembers: []*string{
							to.Ptr("privateLink1")},
						RequiredZoneNames: []*string{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationGatewayPrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationGatewayPrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateLinkResourceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGatewayPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Application Gateway Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewayPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"appgw",
		"connection1",
		&armnetwork.ApplicationGatewayPrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestApplicationGatewayPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Application Gateway Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewayPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"appgw",
		"connection1",
		armnetwork.ApplicationGatewayPrivateEndpointConnection{
			Name: to.Ptr("connection1"),
			Properties: &armnetwork.ApplicationGatewayPrivateEndpointConnectionProperties{
				PrivateEndpoint: &armnetwork.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subId2/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
				},
				PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
					Description: to.Ptr("approved it for some reason."),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armnetwork.ApplicationGatewayPrivateEndpointConnectionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGatewayPrivateEndpointConnection{
			Name: to.Ptr("testPlePeConnection"),
			Properties: &armnetwork.ApplicationGatewayPrivateEndpointConnectionProperties{
				LinkIdentifier: to.Ptr("linkId"),
				PrivateEndpoint: &armnetwork.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
				},
				PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
					Description: to.Ptr("approved it for some reason."),
					Status:      to.Ptr("Approved"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGatewayPrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGatewayPrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGatewayPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Application Gateway Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewayPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"appgw",
		"connection1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationGatewayPrivateEndpointConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkResources/connection1"),
			Name: to.Ptr("coonection1"),
			Type: to.Ptr("Microsoft.Network/applicationGateways/privateEndpointConnections"),
			Properties: &armnetwork.ApplicationGatewayPrivateEndpointConnectionProperties{
				LinkIdentifier: to.Ptr("805319460"),
				PrivateEndpoint: &armnetwork.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe1"),
				},
				PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approval Done"),
					Status:      to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationGatewayPrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationGatewayPrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationGatewayPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all private endpoint connections on application gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationGatewayPrivateEndpointConnectionsClient("subid", cred, &options)
	pager := client.List("rg1",
		"appgw",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ApplicationGatewayPrivateEndpointConnectionListResult{
			Value: []*armnetwork.ApplicationGatewayPrivateEndpointConnection{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationGateways/appgw/privateLinkResources/connection1"),
					Name: to.Ptr("coonection1"),
					Type: to.Ptr("Microsoft.Network/applicationGateways/privateEndpointConnections"),
					Properties: &armnetwork.ApplicationGatewayPrivateEndpointConnectionProperties{
						LinkIdentifier: to.Ptr("805319460"),
						PrivateEndpoint: &armnetwork.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe1"),
						},
						PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Approval Done"),
							Status:      to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationGatewayPrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationGatewayPrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationGatewayPrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationSecurityGroups_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete application security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationSecurityGroupsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-asg",
		&armnetwork.ApplicationSecurityGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupDelete.json: %v", err)
	}
}

func TestApplicationSecurityGroups_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get application security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationSecurityGroupsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-asg",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationSecurityGroup{
			Name:     to.Ptr("test-asg"),
			Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationSecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationSecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationSecurityGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create application security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationSecurityGroupsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-asg",
		armnetwork.ApplicationSecurityGroup{
			Location:   to.Ptr("westus"),
			Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{},
		},
		&armnetwork.ApplicationSecurityGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationSecurityGroup{
			Name:     to.Ptr("test-asg"),
			Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationSecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationSecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationSecurityGroups_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update application security group tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationSecurityGroupsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-asg",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ApplicationSecurityGroup{
			Name:     to.Ptr("test-asg"),
			Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationSecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationSecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationSecurityGroups_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all application security groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationSecurityGroupsClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ApplicationSecurityGroupListResult{
			Value: []*armnetwork.ApplicationSecurityGroup{
				{
					Name:     to.Ptr("asg1"),
					Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name:     to.Ptr("asg2"),
					Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationSecurityGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationSecurityGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationSecurityGroups_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List load balancers in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewApplicationSecurityGroupsClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ApplicationSecurityGroupListResult{
			Value: []*armnetwork.ApplicationSecurityGroup{
				{
					Name:     to.Ptr("asg1"),
					Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name:     to.Ptr("asg2"),
					Type:     to.Ptr("Microsoft.Network/applicationSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ApplicationSecurityGroupPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationSecurityGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationSecurityGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ApplicationSecurityGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableDelegations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableDelegationsSubscriptionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available delegations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailableDelegationsClient("subId", cred, &options)
	pager := client.List("westcentralus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableDelegationsSubscriptionGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AvailableDelegationsResult{
			Value: []*armnetwork.AvailableDelegation{
				{
					Name: to.Ptr("Microsoft.Provider.resourceType"),
					Type: to.Ptr("Microsoft.Network/availableDelegations"),
					Actions: []*string{
						to.Ptr("Microsoft.Network/resource/action")},
					ID:          to.Ptr("/subscriptions/subId/providers/Microsoft.Network/availableDelegations/Microsoft.Provider.resourceType"),
					ServiceName: to.Ptr("Microsoft.Provider/resourceType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableDelegationsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableDelegationsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableDelegationsSubscriptionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableResourceGroupDelegations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableDelegationsResourceGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available delegations in the resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailableResourceGroupDelegationsClient("subId", cred, &options)
	pager := client.List("westcentralus",
		"rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableDelegationsResourceGroupGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AvailableDelegationsResult{
			Value: []*armnetwork.AvailableDelegation{
				{
					Name: to.Ptr("Microsoft.Provider.resourceType"),
					Type: to.Ptr("Microsoft.Network/availableDelegations"),
					Actions: []*string{
						to.Ptr("Microsoft.Network/resource/action")},
					ID:          to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/availableDelegations/Microsoft.Provider.resourceType"),
					ServiceName: to.Ptr("Microsoft.Provider/resourceType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableDelegationsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableDelegationsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableDelegationsResourceGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableServiceAliases_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableServiceAliasesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available service aliases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailableServiceAliasesClient("subId", cred, &options)
	pager := client.List("westcentralus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableServiceAliasesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AvailableServiceAliasesResult{
			Value: []*armnetwork.AvailableServiceAlias{
				{
					Name:         to.Ptr("servicesAzure"),
					Type:         to.Ptr("Microsoft.Network/AvailableServiceAliases"),
					ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzure"),
					ResourceName: to.Ptr("/services/Azure"),
				},
				{
					Name:         to.Ptr("servicesAzureManagedInstance"),
					Type:         to.Ptr("Microsoft.Network/AvailableServiceAliases"),
					ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzureManagedInstance"),
					ResourceName: to.Ptr("/services/Azure/ManagedInstance"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableServiceAliasesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableServiceAliasesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableServiceAliasesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableServiceAliases_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableServiceAliasesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available service aliases in the resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailableServiceAliasesClient("subId", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		"westcentralus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableServiceAliasesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AvailableServiceAliasesResult{
			Value: []*armnetwork.AvailableServiceAlias{
				{
					Name:         to.Ptr("servicesAzure"),
					Type:         to.Ptr("Microsoft.Network/AvailableServiceAliases"),
					ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzure"),
					ResourceName: to.Ptr("/services/Azure"),
				},
				{
					Name:         to.Ptr("servicesAzureManagedInstance"),
					Type:         to.Ptr("Microsoft.Network/AvailableServiceAliases"),
					ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzureManagedInstance"),
					ResourceName: to.Ptr("/services/Azure/ManagedInstance"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableServiceAliasesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableServiceAliasesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailableServiceAliasesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureFirewalls_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Azure Firewall"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"azurefirewall",
		&armnetwork.AzureFirewallsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallDelete.json: %v", err)
	}
}

func TestAzureFirewalls_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Firewall"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"azurefirewall",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*armnetwork.AzureFirewallIPGroups{},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithAdditionalProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Firewall With Additional Properties"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithAdditionalProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithAdditionalProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithIpGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Firewall With IpGroups"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithIpGroups.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceIPGroups: []*string{
										to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*armnetwork.AzureFirewallIPGroups{
					{
						ChangeNumber: to.Ptr("5"),
						ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1"),
					},
					{
						ChangeNumber: to.Ptr("4"),
						ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups2"),
					},
					{
						ChangeNumber: to.Ptr("1"),
						ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups3"),
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceIPGroups: []*string{
										to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationIPGroups: []*string{
										to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups2")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceIPGroups: []*string{
										to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups3")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithIpGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Firewall With Zones"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithZones.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*armnetwork.AzureFirewallIPGroups{},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithMgmtSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Firewall With management subnet"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"azurefirewall",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithMgmtSubnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				ManagementIPConfiguration: &armnetwork.AzureFirewallIPConfiguration{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallMgmtIpConfiguration"),
					Name: to.Ptr("azureFirewallMgmtIpConfiguration"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddress: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
						},
						Subnet: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
						},
					},
				},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallGetWithMgmtSubnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureFirewalls_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Firewall"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		armnetwork.AzureFirewall{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		},
		&armnetwork.AzureFirewallsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*armnetwork.AzureFirewallIPGroups{},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithAdditionalProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Firewall With Additional Properties"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		armnetwork.AzureFirewall{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*armnetwork.AzureFirewallIPGroups{},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		},
		&armnetwork.AzureFirewallsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithAdditionalProperties.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithAdditionalProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithAdditionalProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithIpGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Firewall With IpGroups"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		armnetwork.AzureFirewall{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		},
		&armnetwork.AzureFirewallsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithIpGroups.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithIpGroups.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithIpGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Firewall With Zones"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		armnetwork.AzureFirewall{
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		},
		&armnetwork.AzureFirewallsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithZones.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithZones.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				IPGroups: []*armnetwork.AzureFirewallIPGroups{},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithMgmtSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Firewall With management subnet"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		armnetwork.AzureFirewall{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				ManagementIPConfiguration: &armnetwork.AzureFirewallIPConfiguration{
					Name: to.Ptr("azureFirewallMgmtIpConfiguration"),
					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
						PublicIPAddress: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
						},
						Subnet: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
						},
					},
				},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		},
		&armnetwork.AzureFirewallsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithMgmtSubnet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithMgmtSubnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
					{
						Name: to.Ptr("apprulecoll"),
						Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](110),
							Rules: []*armnetwork.AzureFirewallApplicationRule{
								{
									Name:        to.Ptr("rule1"),
									Description: to.Ptr("Deny inbound rule"),
									Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
										{
											Port:         to.Ptr[int32](443),
											ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
										}},
									SourceAddresses: []*string{
										to.Ptr("216.58.216.164"),
										to.Ptr("10.0.0.0/24")},
									TargetFqdns: []*string{
										to.Ptr("www.test.com")},
								}},
						},
					}},
				IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
						Name: to.Ptr("azureFirewallIpConfiguration"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
							PrivateIPAddress:  to.Ptr("10.0.0.0"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
							},
						},
					}},
				NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
					{
						Name: to.Ptr("natrulecoll"),
						Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
							Action: &armnetwork.AzureFirewallNatRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNatRule{
								{
									Name:        to.Ptr("DNAT-HTTPS-traffic"),
									Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedAddress: to.Ptr("1.2.3.5"),
									TranslatedPort:    to.Ptr("8443"),
								},
								{
									Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
									Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
									DestinationAddresses: []*string{
										to.Ptr("1.2.3.4")},
									DestinationPorts: []*string{
										to.Ptr("80")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("*")},
									TranslatedFqdn: to.Ptr("internalhttpserver"),
									TranslatedPort: to.Ptr("880"),
								}},
						},
					}},
				NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
					{
						Name: to.Ptr("netrulecoll"),
						Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
							Action: &armnetwork.AzureFirewallRCAction{
								Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
							},
							Priority: to.Ptr[int32](112),
							Rules: []*armnetwork.AzureFirewallNetworkRule{
								{
									Name:        to.Ptr("L4-traffic"),
									Description: to.Ptr("Block traffic based on source IPs and ports"),
									DestinationAddresses: []*string{
										to.Ptr("*")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("192.168.1.1-192.168.1.12"),
										to.Ptr("10.1.4.12-10.1.4.255")},
								},
								{
									Name:        to.Ptr("L4-traffic-with-FQDN"),
									Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
									DestinationFqdns: []*string{
										to.Ptr("www.amazon.com")},
									DestinationPorts: []*string{
										to.Ptr("443-444"),
										to.Ptr("8443")},
									Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
										to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
									SourceAddresses: []*string{
										to.Ptr("10.2.4.12-10.2.4.255")},
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutWithMgmtSubnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutInHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Firewall in virtual Hub"},
	})
	client = armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"azurefirewall",
		armnetwork.AzureFirewall{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				FirewallPolicy: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"),
				},
				HubIPAddresses: &armnetwork.HubIPAddresses{
					PublicIPs: &armnetwork.HubPublicIPAddresses{
						Addresses: []*armnetwork.AzureFirewallPublicIPAddress{},
						Count:     to.Ptr[int32](1),
					},
				},
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWHub),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
			Zones: []*string{},
		},
		&armnetwork.AzureFirewallsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutInHub.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutInHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("azurefirewall"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				AdditionalProperties: map[string]*string{},
				FirewallPolicy: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"),
				},
				HubIPAddresses: &armnetwork.HubIPAddresses{
					PrivateIPAddress: to.Ptr("10.0.0.0"),
					PublicIPs: &armnetwork.HubPublicIPAddresses{
						Addresses: []*armnetwork.AzureFirewallPublicIPAddress{
							{
								Address: to.Ptr("13.73.240.12"),
							}},
						Count: to.Ptr[int32](1),
					},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU: &armnetwork.AzureFirewallSKU{
					Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWHub),
					Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
			Zones: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallPutInHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureFirewalls_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Azure Firewall Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"azfwtest",
		"fw1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.AzureFirewallsClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureFirewall{
			Name:     to.Ptr("fw1"),
			Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/azfwtest/providers/Microsoft.Network/azureFirewalls/fw1"),
			Location: to.Ptr("brazilsouth"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.AzureFirewallPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ThreatIntelMode:   to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureFirewall) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureFirewall)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureFirewalls_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Azure Firewalls for a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AzureFirewallListResult{
			Value: []*armnetwork.AzureFirewall{
				{
					Name:     to.Ptr("azurefirewall"),
					Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.AzureFirewallPropertiesFormat{
						AdditionalProperties: map[string]*string{
							"key1": to.Ptr("value1"),
							"key2": to.Ptr("value2"),
						},
						ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
							{
								Name: to.Ptr("apprulecoll"),
								Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
									Action: &armnetwork.AzureFirewallRCAction{
										Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
									},
									Priority: to.Ptr[int32](110),
									Rules: []*armnetwork.AzureFirewallApplicationRule{
										{
											Name:        to.Ptr("rule1"),
											Description: to.Ptr("Deny inbound rule"),
											Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
												{
													Port:         to.Ptr[int32](443),
													ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
												}},
											SourceAddresses: []*string{
												to.Ptr("216.58.216.164"),
												to.Ptr("10.0.0.0/24")},
											TargetFqdns: []*string{
												to.Ptr("www.test.com")},
										}},
								},
							}},
						IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
								Name: to.Ptr("azureFirewallIpConfiguration"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
									PrivateIPAddress:  to.Ptr("10.0.0.0"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
									},
								},
							}},
						IPGroups: []*armnetwork.AzureFirewallIPGroups{},
						ManagementIPConfiguration: &armnetwork.AzureFirewallIPConfiguration{
							ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallMgmtIpConfiguration"),
							Name: to.Ptr("azureFirewallMgmtIpConfiguration"),
							Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
							Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
								ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								PublicIPAddress: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
								},
								Subnet: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
								},
							},
						},
						NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
							{
								Name: to.Ptr("natrulecoll"),
								Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
									Action: &armnetwork.AzureFirewallNatRCAction{
										Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
									},
									Priority: to.Ptr[int32](112),
									Rules: []*armnetwork.AzureFirewallNatRule{
										{
											Name:        to.Ptr("DNAT-HTTPS-traffic"),
											Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
											DestinationAddresses: []*string{
												to.Ptr("1.2.3.4")},
											DestinationPorts: []*string{
												to.Ptr("443")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("*")},
											TranslatedAddress: to.Ptr("1.2.3.5"),
											TranslatedPort:    to.Ptr("8443"),
										},
										{
											Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
											Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
											DestinationAddresses: []*string{
												to.Ptr("1.2.3.4")},
											DestinationPorts: []*string{
												to.Ptr("80")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("*")},
											TranslatedFqdn: to.Ptr("internalhttpserver"),
											TranslatedPort: to.Ptr("880"),
										}},
								},
							}},
						NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
							{
								Name: to.Ptr("netrulecoll"),
								Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
									Action: &armnetwork.AzureFirewallRCAction{
										Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
									},
									Priority: to.Ptr[int32](112),
									Rules: []*armnetwork.AzureFirewallNetworkRule{
										{
											Name:        to.Ptr("L4-traffic"),
											Description: to.Ptr("Block traffic based on source IPs and ports"),
											DestinationAddresses: []*string{
												to.Ptr("*")},
											DestinationPorts: []*string{
												to.Ptr("443-444"),
												to.Ptr("8443")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("192.168.1.1-192.168.1.12"),
												to.Ptr("10.1.4.12-10.1.4.255")},
										},
										{
											Name:        to.Ptr("L4-traffic-with-FQDN"),
											Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
											DestinationFqdns: []*string{
												to.Ptr("www.amazon.com")},
											DestinationPorts: []*string{
												to.Ptr("443-444"),
												to.Ptr("8443")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("10.2.4.12-10.2.4.255")},
										}},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ThreatIntelMode:   to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
					},
					Zones: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureFirewallListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureFirewallListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureFirewalls_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Azure Firewalls for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallsClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AzureFirewallListResult{
			Value: []*armnetwork.AzureFirewall{
				{
					Name:     to.Ptr("azurefirewall"),
					Type:     to.Ptr("Microsoft.Network/azureFirewalls"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.AzureFirewallPropertiesFormat{
						AdditionalProperties: map[string]*string{
							"key1": to.Ptr("value1"),
							"key2": to.Ptr("value2"),
						},
						ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
							{
								Name: to.Ptr("apprulecoll"),
								Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
									Action: &armnetwork.AzureFirewallRCAction{
										Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
									},
									Priority: to.Ptr[int32](110),
									Rules: []*armnetwork.AzureFirewallApplicationRule{
										{
											Name:        to.Ptr("rule1"),
											Description: to.Ptr("Deny inbound rule"),
											Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
												{
													Port:         to.Ptr[int32](443),
													ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
												}},
											SourceAddresses: []*string{
												to.Ptr("216.58.216.164"),
												to.Ptr("10.0.0.0/24")},
											TargetFqdns: []*string{
												to.Ptr("www.test.com")},
										}},
								},
							}},
						IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration"),
								Name: to.Ptr("azureFirewallIpConfiguration"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
									PrivateIPAddress:  to.Ptr("10.0.0.0"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
									},
								},
							}},
						IPGroups: []*armnetwork.AzureFirewallIPGroups{},
						ManagementIPConfiguration: &armnetwork.AzureFirewallIPConfiguration{
							ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewallgw/ipConfigurations/azureFirewallMgmtIpConfiguration"),
							Name: to.Ptr("azureFirewallMgmtIpConfiguration"),
							Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
							Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
								ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								PublicIPAddress: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
								},
								Subnet: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
								},
							},
						},
						NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
							{
								Name: to.Ptr("natrulecoll"),
								Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
									Action: &armnetwork.AzureFirewallNatRCAction{
										Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
									},
									Priority: to.Ptr[int32](112),
									Rules: []*armnetwork.AzureFirewallNatRule{
										{
											Name:        to.Ptr("DNAT-HTTPS-traffic"),
											Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
											DestinationAddresses: []*string{
												to.Ptr("1.2.3.4")},
											DestinationPorts: []*string{
												to.Ptr("443")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("*")},
											TranslatedAddress: to.Ptr("1.2.3.5"),
											TranslatedPort:    to.Ptr("8443"),
										},
										{
											Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
											Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
											DestinationAddresses: []*string{
												to.Ptr("1.2.3.4")},
											DestinationPorts: []*string{
												to.Ptr("80")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("*")},
											TranslatedFqdn: to.Ptr("internalhttpserver"),
											TranslatedPort: to.Ptr("880"),
										}},
								},
							}},
						NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
							{
								Name: to.Ptr("netrulecoll"),
								Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
									Action: &armnetwork.AzureFirewallRCAction{
										Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
									},
									Priority: to.Ptr[int32](112),
									Rules: []*armnetwork.AzureFirewallNetworkRule{
										{
											Name:        to.Ptr("L4-traffic"),
											Description: to.Ptr("Block traffic based on source IPs and ports"),
											DestinationAddresses: []*string{
												to.Ptr("*")},
											DestinationPorts: []*string{
												to.Ptr("443-444"),
												to.Ptr("8443")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("192.168.1.1-192.168.1.12"),
												to.Ptr("10.1.4.12-10.1.4.255")},
										},
										{
											Name:        to.Ptr("L4-traffic-with-FQDN"),
											Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
											DestinationFqdns: []*string{
												to.Ptr("www.amazon.com")},
											DestinationPorts: []*string{
												to.Ptr("443-444"),
												to.Ptr("8443")},
											Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
												to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
											SourceAddresses: []*string{
												to.Ptr("10.2.4.12-10.2.4.255")},
										}},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ThreatIntelMode:   to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
					},
					Zones: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureFirewallListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureFirewallListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureFirewallFqdnTags_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallFqdnTagsListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Azure Firewall FQDN Tags for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAzureFirewallFqdnTagsClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallFqdnTagsListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AzureFirewallFqdnTagListResult{
			Value: []*armnetwork.AzureFirewallFqdnTag{
				{
					Name:     to.Ptr("azfwfqdntag"),
					Type:     to.Ptr("Microsoft.Network/azureFirewallFqdnTags"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewallFqdnTags/azfwfqdntag"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.AzureFirewallFqdnTagPropertiesFormat{
						FqdnTagName:       to.Ptr("azfwfqdntag"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureFirewallFqdnTagListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureFirewallFqdnTagListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureFirewallFqdnTagsListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebCategories_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureWebCategoryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Web Category by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebCategoriesClient("4de8428a-4a92-4cea-90ff-b47128b8cab8", cred, &options)
	res, err := client.Get(ctx,
		"Arts",
		&armnetwork.WebCategoriesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureWebCategoryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureWebCategory{
			Name: to.Ptr("Arts"),
			Type: to.Ptr("Microsoft.Network/azureWebCategories"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			ID:   to.Ptr("/subscriptions/4de8428a-4a92-4cea-90ff-b47128b8cab8/providers/Microsoft.Network/azureWebCategories/Arts"),
			Properties: &armnetwork.AzureWebCategoryPropertiesFormat{
				Group: to.Ptr("General"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureWebCategory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureWebCategory)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureWebCategoryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebCategories_ListBySubscription(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureWebCategoriesListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Azure Web Categories for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebCategoriesClient("4de8428a-4a92-4cea-90ff-b47128b8cab8", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureWebCategoriesListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AzureWebCategoryListResult{
			Value: []*armnetwork.AzureWebCategory{
				{
					Name: to.Ptr("Arts"),
					Type: to.Ptr("Microsoft.Network/azureWebCategories"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					ID:   to.Ptr("/subscriptions/4de8428a-4a92-4cea-90ff-b47128b8cab8/providers/Microsoft.Network/azureWebCategories/Arts"),
					Properties: &armnetwork.AzureWebCategoryPropertiesFormat{
						Group: to.Ptr("General"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureWebCategoryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureWebCategoryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AzureWebCategoriesListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBastionHosts_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Bastion Host"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBastionHostsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"bastionhosttenant",
		&armnetwork.BastionHostsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostDelete.json: %v", err)
	}
}

func TestBastionHosts_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Bastion Host"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBastionHostsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"bastionhosttenant'",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BastionHost{
			Name:     to.Ptr("bastionhost'"),
			Type:     to.Ptr("Microsoft.Network/bastionHosts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.BastionHostPropertiesFormat{
				DNSName: to.Ptr("bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com"),
				IPConfigurations: []*armnetwork.BastionHostIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration"),
						Name: to.Ptr("bastionHostIpConfiguration"),
						Type: to.Ptr("Microsoft.Network/bastionHosts/bastionHostIpConfigurations"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.BastionHostIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
			SKU: &armnetwork.SKU{
				Name: to.Ptr(armnetwork.BastionHostSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BastionHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BastionHost)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBastionHosts_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Bastion Host"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBastionHostsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"bastionhosttenant",
		armnetwork.BastionHost{
			Properties: &armnetwork.BastionHostPropertiesFormat{
				IPConfigurations: []*armnetwork.BastionHostIPConfiguration{
					{
						Name: to.Ptr("bastionHostIpConfiguration"),
						Properties: &armnetwork.BastionHostIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
							},
						},
					}},
			},
		},
		&armnetwork.BastionHostsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BastionHost{
			Name:     to.Ptr("bastionhost"),
			Type:     to.Ptr("Microsoft.Network/bastionHosts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.BastionHostPropertiesFormat{
				DNSName: to.Ptr("bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com"),
				IPConfigurations: []*armnetwork.BastionHostIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration"),
						Name: to.Ptr("bastionHostIpConfiguration"),
						Type: to.Ptr("Microsoft.Network/bastionHosts/bastionHostIpConfigurations"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.BastionHostIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
			SKU: &armnetwork.SKU{
				Name: to.Ptr(armnetwork.BastionHostSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BastionHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BastionHost)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBastionHosts_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch Bastion Host"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBastionHostsClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"bastionhosttenant",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.BastionHostsClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BastionHost{
			Name:     to.Ptr("bastionhosttenant"),
			Type:     to.Ptr("Microsoft.Network/bastionHosts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.BastionHostPropertiesFormat{
				DNSName: to.Ptr("bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com"),
				IPConfigurations: []*armnetwork.BastionHostIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration"),
						Name: to.Ptr("bastionHostIpConfiguration"),
						Type: to.Ptr("Microsoft.Network/bastionHosts/bastionHostIpConfigurations"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.BastionHostIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
			SKU: &armnetwork.SKU{
				Name: to.Ptr(armnetwork.BastionHostSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BastionHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BastionHost)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBastionHosts_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Bastion Hosts for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBastionHostsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BastionHostListResult{
			Value: []*armnetwork.BastionHost{
				{
					Name:     to.Ptr("bastionhost'"),
					Type:     to.Ptr("Microsoft.Network/bastionHosts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.BastionHostPropertiesFormat{
						DNSName: to.Ptr("bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com"),
						IPConfigurations: []*armnetwork.BastionHostIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration"),
								Name: to.Ptr("bastionHostIpConfiguration"),
								Type: to.Ptr("Microsoft.Network/bastionHosts/bastionHostIpConfigurations"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.BastionHostIPConfigurationPropertiesFormat{
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
					SKU: &armnetwork.SKU{
						Name: to.Ptr(armnetwork.BastionHostSKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BastionHostListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BastionHostListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBastionHosts_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Bastion Hosts for a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBastionHostsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BastionHostListResult{
			Value: []*armnetwork.BastionHost{
				{
					Name:     to.Ptr("bastionhost'"),
					Type:     to.Ptr("Microsoft.Network/bastionHosts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.BastionHostPropertiesFormat{
						DNSName: to.Ptr("bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com"),
						IPConfigurations: []*armnetwork.BastionHostIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration"),
								Name: to.Ptr("bastionHostIpConfiguration"),
								Type: to.Ptr("Microsoft.Network/bastionHosts/bastionHostIpConfigurations"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.BastionHostIPConfigurationPropertiesFormat{
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
					SKU: &armnetwork.SKU{
						Name: to.Ptr(armnetwork.BastionHostSKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BastionHostListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BastionHostListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionHostListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkManagementClient_PutBastionShareableLink(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Bastion Shareable Links for the request VMs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	poller, err := client.BeginPutBastionShareableLink(ctx,
		"rg1",
		"bastionhosttenant",
		armnetwork.BastionShareableLinkListRequest{
			VMs: []*armnetwork.BastionShareableLink{
				{
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
				},
				{
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
					},
				}},
		},
		&armnetwork.ManagementClientBeginPutBastionShareableLinkOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkCreate.json: %v", err)
	}
	for res.More() {
		nextResult, err := res.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkCreate.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BastionShareableLinkListResult{
			Value: []*armnetwork.BastionShareableLink{
				{
					Bsl:       to.Ptr("http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm1"),
					CreatedAt: to.Ptr("2019-10-18T12:00:00.0000Z"),
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
				},
				{
					Bsl:       to.Ptr("http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm2"),
					CreatedAt: to.Ptr("2019-10-17T12:00:00.0000Z"),
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BastionShareableLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BastionShareableLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkManagementClient_DeleteBastionShareableLink(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Bastion Shareable Links for the request VMs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	poller, err := client.BeginDeleteBastionShareableLink(ctx,
		"rg1",
		"bastionhosttenant",
		armnetwork.BastionShareableLinkListRequest{
			VMs: []*armnetwork.BastionShareableLink{
				{
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
				},
				{
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
					},
				}},
		},
		&armnetwork.ManagementClientBeginDeleteBastionShareableLinkOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkDelete.json: %v", err)
	}
}

func TestNetworkManagementClient_GetBastionShareableLink(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the Bastion Shareable Links for the request VMs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	pager := client.GetBastionShareableLink("rg1",
		"bastionhosttenant",
		armnetwork.BastionShareableLinkListRequest{
			VMs: []*armnetwork.BastionShareableLink{
				{
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
				},
				{
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
					},
				}},
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BastionShareableLinkListResult{
			Value: []*armnetwork.BastionShareableLink{
				{
					Bsl:       to.Ptr("http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm1"),
					CreatedAt: to.Ptr("2019-10-18T12:00:00.0000Z"),
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
				},
				{
					Bsl:       to.Ptr("http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm2"),
					CreatedAt: to.Ptr("2019-10-17T12:00:00.0000Z"),
					VM: &armnetwork.VM{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BastionShareableLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BastionShareableLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionShareableLinkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkManagementClient_GetActiveSessions(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of currently active sessions on the Bastion"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	poller, err := client.BeginGetActiveSessions(ctx,
		"rg1",
		"bastionhosttenant",
		&armnetwork.ManagementClientBeginGetActiveSessionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionsList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionsList.json: %v", err)
	}
	for res.More() {
		nextResult, err := res.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BastionActiveSessionListResult{
			Value: []*armnetwork.BastionActiveSession{
				{
					ResourceType:          to.Ptr("VM"),
					SessionDurationInMins: to.Ptr[float32](0),
					SessionID:             to.Ptr("sessionId"),
					StartTime:             "2019-1-1T12:00:00.0000Z",
					TargetHostName:        to.Ptr("vm01"),
					TargetIPAddress:       to.Ptr("1.1.1.1"),
					TargetResourceGroup:   to.Ptr("rg1"),
					TargetResourceID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm01"),
					TargetSubscriptionID:  to.Ptr("subid"),
					UserName:              to.Ptr("user"),
					Protocol:              to.Ptr(armnetwork.BastionConnectProtocolSSH),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BastionActiveSessionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BastionActiveSessionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkManagementClient_DisconnectActiveSessions(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified active session"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	pager := client.DisconnectActiveSessions("rg1",
		"bastionhosttenant",
		armnetwork.SessionIDs{},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionDelete.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BastionSessionDeleteResult{
			Value: []*armnetwork.BastionSessionState{
				{
					Message:   to.Ptr("session session1 invalidated!"),
					SessionID: to.Ptr("session1"),
					State:     to.Ptr("Disconnected"),
				},
				{
					Message:   to.Ptr("session session2 could not be disconnected!"),
					SessionID: to.Ptr("session2"),
					State:     to.Ptr("Failed"),
				},
				{
					Message:   to.Ptr("session session3 not found!"),
					SessionID: to.Ptr("session3"),
					State:     to.Ptr("NotFound"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BastionSessionDeleteResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BastionSessionDeleteResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/BastionSessionDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkManagementClient_SupportedSecurityProviders(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWanSupportedSecurityProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"supportedSecurityProviders"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	res, err := client.SupportedSecurityProviders(ctx,
		"rg1",
		"wan1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWanSupportedSecurityProviders.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualWanSecurityProviders{
			SupportedProviders: []*armnetwork.VirtualWanSecurityProvider{
				{
					Name: to.Ptr("AzureFirewall"),
					Type: to.Ptr(armnetwork.VirtualWanSecurityProviderTypeNative),
					URL:  to.Ptr(""),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualWanSecurityProviders) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualWanSecurityProviders)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWanSupportedSecurityProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkManagementClient_Generatevirtualwanvpnserverconfigurationvpnprofile(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateVirtualWanVpnServerConfigurationVpnProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateVirtualWanVpnServerConfigurationVpnProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewManagementClient("subid", cred, &options)
	poller, err := client.BeginGeneratevirtualwanvpnserverconfigurationvpnprofile(ctx,
		"rg1",
		"wan1",
		armnetwork.VirtualWanVPNProfileParameters{
			AuthenticationMethod:             to.Ptr(armnetwork.AuthenticationMethodEAPTLS),
			VPNServerConfigurationResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnconfig1"),
		},
		&armnetwork.ManagementClientBeginGeneratevirtualwanvpnserverconfigurationvpnprofileOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateVirtualWanVpnServerConfigurationVpnProfile.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateVirtualWanVpnServerConfigurationVpnProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNProfileResponse{
			ProfileURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		}
		if !reflect.DeepEqual(exampleRes, res.VPNProfileResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNProfileResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateVirtualWanVpnServerConfigurationVpnProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_ListCloudServiceRoleInstanceNetworkInterfaces(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceRoleInstanceNetworkInterfaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List cloud service role instance network interfaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	pager := client.ListCloudServiceRoleInstanceNetworkInterfaces("rg1",
		"cs1",
		"TestVMRole_IN_0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceRoleInstanceNetworkInterfaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name: to.Ptr("nic1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1"),
								Name: to.Ptr("ip1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
									},
								},
							}},
						MacAddress: to.Ptr("00-00-00-00-00-00"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceRoleInstanceNetworkInterfaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_ListCloudServiceNetworkInterfaces(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceNetworkInterfaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List cloud service network interfaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	pager := client.ListCloudServiceNetworkInterfaces("rg1",
		"cs1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceNetworkInterfaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name: to.Ptr("nic1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1"),
								Name: to.Ptr("ip1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.0"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
									},
								},
							}},
						MacAddress: to.Ptr("00-00-00-00-00-00"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("nic1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1/networkInterfaces/nic1"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1/networkInterfaces/nic1/ipConfigurations/ip1"),
								Name: to.Ptr("ip1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
									},
								},
							}},
						MacAddress: to.Ptr("00-00-00-00-00-00"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceNetworkInterfaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_GetCloudServiceNetworkInterface(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceNetworkInterfaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get cloud service network interface"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	res, err := client.GetCloudServiceNetworkInterface(ctx,
		"rg1",
		"cs1",
		"TestVMRole_IN_0",
		"nic1",
		&armnetwork.InterfacesClientGetCloudServiceNetworkInterfaceOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceNetworkInterfaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Interface{
			Name: to.Ptr("nic1"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				DNSSettings: &armnetwork.InterfaceDNSSettings{
					AppliedDNSServers:        []*string{},
					DNSServers:               []*string{},
					InternalDomainNameSuffix: to.Ptr("dns.cdmx.internal.cloudapp.net"),
				},
				EnableAcceleratedNetworking: to.Ptr(false),
				EnableIPForwarding:          to.Ptr(false),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1"),
						Name: to.Ptr("ip1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
								}},
							LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"),
								}},
							Primary:                   to.Ptr(true),
							PrivateIPAddress:          to.Ptr("10.0.0.5"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
							},
						},
					}},
				MacAddress: to.Ptr("00-00-00-00-00-00"),
				NetworkSecurityGroup: &armnetwork.SecurityGroup{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
				},
				Primary:           to.Ptr(true),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceNetworkInterfaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network interface"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-nic",
		&armnetwork.InterfacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceDelete.json: %v", err)
	}
}

func TestNetworkInterfaces_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network interface"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-nic",
		&armnetwork.InterfacesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Interface{
			Name:     to.Ptr("test-nic"),
			Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				DNSSettings: &armnetwork.InterfaceDNSSettings{
					AppliedDNSServers:        []*string{},
					DNSServers:               []*string{},
					InternalDomainNameSuffix: to.Ptr("test.bx.internal.cloudapp.net"),
				},
				DscpConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/dscpConfiguration/mydscpconfiguration"),
				},
				EnableAcceleratedNetworking: to.Ptr(true),
				EnableIPForwarding:          to.Ptr(false),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1"),
						Name: to.Ptr("ipconfig1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							Primary:                   to.Ptr(true),
							PrivateIPAddress:          to.Ptr("172.20.2.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
							},
						},
					}},
				MacAddress: to.Ptr("00-0D-3A-1B-C7-21"),
				NetworkSecurityGroup: &armnetwork.SecurityGroup{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"),
				},
				Primary:           to.Ptr(true),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualMachine: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"),
				},
				VnetEncryptionSupported: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network interface"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-nic",
		armnetwork.Interface{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				EnableAcceleratedNetworking: to.Ptr(true),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						Name: to.Ptr("ipconfig1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
							},
						},
					}},
			},
		},
		&armnetwork.InterfacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Interface{
			Name:     to.Ptr("test-nic"),
			Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				DNSSettings: &armnetwork.InterfaceDNSSettings{
					AppliedDNSServers: []*string{},
					DNSServers:        []*string{},
				},
				EnableAcceleratedNetworking: to.Ptr(true),
				EnableIPForwarding:          to.Ptr(false),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1"),
						Name: to.Ptr("ipconfig1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							Primary:                   to.Ptr(true),
							PrivateIPAddress:          to.Ptr("172.20.2.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
							},
						},
					}},
				ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VnetEncryptionSupported: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreateGatewayLoadBalancerConsumer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network interface with Gateway Load Balancer Consumer configured"},
	})
	client = armnetwork.NewInterfacesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-nic",
		armnetwork.Interface{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				EnableAcceleratedNetworking: to.Ptr(true),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						Name: to.Ptr("ipconfig1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							GatewayLoadBalancer: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
							},
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
							},
						},
					}},
			},
		},
		&armnetwork.InterfacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreateGatewayLoadBalancerConsumer.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreateGatewayLoadBalancerConsumer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Interface{
			Name:     to.Ptr("test-nic"),
			Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				DNSSettings: &armnetwork.InterfaceDNSSettings{
					AppliedDNSServers: []*string{},
					DNSServers:        []*string{},
				},
				EnableAcceleratedNetworking: to.Ptr(true),
				EnableIPForwarding:          to.Ptr(false),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1"),
						Name: to.Ptr("ipconfig1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							GatewayLoadBalancer: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
							},
							Primary:                   to.Ptr(true),
							PrivateIPAddress:          to.Ptr("172.20.2.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceCreateGatewayLoadBalancerConsumer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update network interface tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-nic",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Interface{
			Name:     to.Ptr("test-nic"),
			Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.InterfacePropertiesFormat{
				DNSSettings: &armnetwork.InterfaceDNSSettings{
					AppliedDNSServers: []*string{},
					DNSServers:        []*string{},
				},
				EnableAcceleratedNetworking: to.Ptr(true),
				EnableIPForwarding:          to.Ptr(false),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1"),
						Name: to.Ptr("ipconfig1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							Primary:                   to.Ptr(true),
							PrivateIPAddress:          to.Ptr("172.20.2.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
							},
						},
					}},
				ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VnetEncryptionSupported: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all network interfaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name:     to.Ptr("test-nic"),
					Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("test.bx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(true),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1"),
								Name: to.Ptr("ipconfig1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("172.20.2.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
									},
								},
							}},
						MacAddress: to.Ptr("00-0D-3A-1B-C7-21"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"),
						},
						VnetEncryptionSupported: to.Ptr(false),
					},
				},
				{
					Name:     to.Ptr("test-nic2"),
					Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/networkInterfaces/test-nic2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers: []*string{},
							DNSServers:        []*string{},
						},
						EnableAcceleratedNetworking: to.Ptr(true),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/networkInterfaces/test-nic2/ipConfigurations/ipconfig1"),
								Name: to.Ptr("ipconfig1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("172.20.2.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/publicIPAddresses/test-ip2"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/virtualNetworks/rgnew-vnet2/subnets/default"),
									},
								},
							}},
						ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VnetEncryptionSupported: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List network interfaces in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name:     to.Ptr("test-nic"),
					Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("test.bx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(true),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1"),
								Name: to.Ptr("ipconfig1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("172.20.2.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
									},
								},
							}},
						MacAddress: to.Ptr("00-0D-3A-1B-C7-21"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"),
						},
						VnetEncryptionSupported: to.Ptr(false),
					},
				},
				{
					Name:     to.Ptr("test-nic2"),
					Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers: []*string{},
							DNSServers:        []*string{},
						},
						EnableAcceleratedNetworking: to.Ptr(true),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2/ipConfigurations/ipconfig1"),
								Name: to.Ptr("ipconfig1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("172.20.2.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip2"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet2/subnets/default"),
									},
								},
							}},
						ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VnetEncryptionSupported: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_GetEffectiveRouteTable(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveRouteTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Show network interface effective route tables"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	poller, err := client.BeginGetEffectiveRouteTable(ctx,
		"rg1",
		"nic1",
		&armnetwork.InterfacesClientBeginGetEffectiveRouteTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveRouteTableList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveRouteTableList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.EffectiveRouteListResult{
			Value: []*armnetwork.EffectiveRoute{
				{
					AddressPrefix: []*string{
						to.Ptr("172.20.2.0/24")},
					NextHopIPAddress: []*string{},
					NextHopType:      to.Ptr(armnetwork.RouteNextHopTypeVnetLocal),
					Source:           to.Ptr(armnetwork.EffectiveRouteSourceDefault),
					State:            to.Ptr(armnetwork.EffectiveRouteStateActive),
				},
				{
					AddressPrefix: []*string{
						to.Ptr("0.0.0.0/0")},
					NextHopIPAddress: []*string{},
					NextHopType:      to.Ptr(armnetwork.RouteNextHopTypeInternet),
					Source:           to.Ptr(armnetwork.EffectiveRouteSourceDefault),
					State:            to.Ptr(armnetwork.EffectiveRouteStateActive),
				},
				{
					AddressPrefix: []*string{
						to.Ptr("10.0.0.0/8")},
					NextHopIPAddress: []*string{},
					NextHopType:      to.Ptr(armnetwork.RouteNextHopTypeNone),
					Source:           to.Ptr(armnetwork.EffectiveRouteSourceDefault),
					State:            to.Ptr(armnetwork.EffectiveRouteStateActive),
				},
				{
					AddressPrefix: []*string{
						to.Ptr("100.64.0.0/10")},
					NextHopIPAddress: []*string{},
					NextHopType:      to.Ptr(armnetwork.RouteNextHopTypeNone),
					Source:           to.Ptr(armnetwork.EffectiveRouteSourceDefault),
					State:            to.Ptr(armnetwork.EffectiveRouteStateActive),
				},
				{
					AddressPrefix: []*string{
						to.Ptr("172.16.0.0/12")},
					NextHopIPAddress: []*string{},
					NextHopType:      to.Ptr(armnetwork.RouteNextHopTypeNone),
					Source:           to.Ptr(armnetwork.EffectiveRouteSourceDefault),
					State:            to.Ptr(armnetwork.EffectiveRouteStateActive),
				},
				{
					AddressPrefix: []*string{
						to.Ptr("192.168.0.0/16")},
					NextHopIPAddress: []*string{},
					NextHopType:      to.Ptr(armnetwork.RouteNextHopTypeNone),
					Source:           to.Ptr(armnetwork.EffectiveRouteSourceDefault),
					State:            to.Ptr(armnetwork.EffectiveRouteStateActive),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EffectiveRouteListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EffectiveRouteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveRouteTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_ListEffectiveNetworkSecurityGroups(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveNSGList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List network interface effective network security groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	poller, err := client.BeginListEffectiveNetworkSecurityGroups(ctx,
		"rg1",
		"nic1",
		&armnetwork.InterfacesClientBeginListEffectiveNetworkSecurityGroupsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveNSGList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveNSGList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.EffectiveNetworkSecurityGroupListResult{
			Value: []*armnetwork.EffectiveNetworkSecurityGroup{
				{
					Association: &armnetwork.EffectiveNetworkSecurityGroupAssociation{
						NetworkInterface: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1"),
						},
						NetworkManager: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkManagers/nm1"),
						},
						Subnet: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"),
						},
					},
					EffectiveSecurityRules: []*armnetwork.EffectiveNetworkSecurityRule{
						{
							Name:                     to.Ptr("securityRules/rule1"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("0.0.0.0/32"),
							DestinationPortRange:     to.Ptr("6579-6579"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](234),
							SourceAddressPrefix:      to.Ptr("0.0.0.0/32"),
							SourcePortRange:          to.Ptr("456-456"),
							Protocol:                 to.Ptr(armnetwork.EffectiveSecurityRuleProtocolTCP),
						},
						{
							Name:                     to.Ptr("securityRules/default-allow-rdp"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("0.0.0.0/0"),
							DestinationPortRange:     to.Ptr("3389-3389"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](1000),
							SourceAddressPrefix:      to.Ptr("1.1.1.1/32"),
							SourcePortRange:          to.Ptr("0-65535"),
							Protocol:                 to.Ptr(armnetwork.EffectiveSecurityRuleProtocolTCP),
						},
						{
							Name:                     to.Ptr("defaultSecurityRules/AllowInternetOutBound"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("Internet"),
							DestinationPortRange:     to.Ptr("0-65535"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							ExpandedDestinationAddressPrefix: []*string{
								to.Ptr("32.0.0.0/3"),
								to.Ptr("4.0.0.0/6"),
								to.Ptr("2.0.0.0/7"),
								to.Ptr("1.0.0.0/8")},
							Priority:            to.Ptr[int32](65001),
							SourceAddressPrefix: to.Ptr("0.0.0.0/0"),
							SourcePortRange:     to.Ptr("0-65535"),
							Protocol:            to.Ptr(armnetwork.EffectiveSecurityRuleProtocolAll),
						}},
					NetworkSecurityGroup: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/test-nsg"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EffectiveNetworkSecurityGroupListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EffectiveNetworkSecurityGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceEffectiveNSGList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_ListVirtualMachineScaleSetVMNetworkInterfaces(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssVmNetworkInterfaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual machine scale set vm network interfaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	pager := client.ListVirtualMachineScaleSetVMNetworkInterfaces("rg1",
		"vmss1",
		"1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssVmNetworkInterfaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name: to.Ptr("nic1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
								Name: to.Ptr("ip1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
									},
								},
							}},
						MacAddress: to.Ptr("00-00-00-00-00-00"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssVmNetworkInterfaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_ListVirtualMachineScaleSetNetworkInterfaces(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssNetworkInterfaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual machine scale set network interfaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	pager := client.ListVirtualMachineScaleSetNetworkInterfaces("rg1",
		"vmss1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssNetworkInterfaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name: to.Ptr("nic1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/nic1"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/nic1/ipConfigurations/ip1"),
								Name: to.Ptr("ip1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.0"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
									},
								},
							}},
						MacAddress: to.Ptr("00-00-00-00-00-00"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0"),
						},
					},
				},
				{
					Name: to.Ptr("nic1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1"),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
								Name: to.Ptr("ip1"),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
									},
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
									},
								},
							}},
						MacAddress: to.Ptr("00-00-00-00-00-00"),
						NetworkSecurityGroup: &armnetwork.SecurityGroup{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
						},
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssNetworkInterfaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaces_GetVirtualMachineScaleSetNetworkInterface(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssNetworkInterfaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get virtual machine scale set network interface"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfacesClient("subid", cred, &options)
	res, err := client.GetVirtualMachineScaleSetNetworkInterface(ctx,
		"rg1",
		"vmss1",
		"1",
		"nic1",
		&armnetwork.InterfacesClientGetVirtualMachineScaleSetNetworkInterfaceOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssNetworkInterfaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Interface{
			Name: to.Ptr("nic1"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1"),
			Properties: &armnetwork.InterfacePropertiesFormat{
				DNSSettings: &armnetwork.InterfaceDNSSettings{
					AppliedDNSServers:        []*string{},
					DNSServers:               []*string{},
					InternalDomainNameSuffix: to.Ptr("dns.cdmx.internal.cloudapp.net"),
				},
				EnableAcceleratedNetworking: to.Ptr(false),
				EnableIPForwarding:          to.Ptr(false),
				IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
						Name: to.Ptr("ip1"),
						Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
							LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"),
								}},
							LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"),
								}},
							Primary:                   to.Ptr(true),
							PrivateIPAddress:          to.Ptr("10.0.0.5"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
							},
						},
					}},
				MacAddress: to.Ptr("00-00-00-00-00-00"),
				NetworkSecurityGroup: &armnetwork.SecurityGroup{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
				},
				Primary:           to.Ptr(true),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualMachine: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssNetworkInterfaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_ListCloudServicePublicIPAddresses(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServicePublicIpListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVMSSPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	pager := client.ListCloudServicePublicIPAddresses("cs-tester",
		"cs1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServicePublicIpListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPAddressListResult{
			Value: []*armnetwork.PublicIPAddress{
				{
					Name: to.Ptr("pub1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("vm1.testvmssacc"),
							Fqdn:            to.Ptr("vm1.testvmssacc.southeastasia.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						IPAddress:            to.Ptr("13.67.119.72"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				},
				{
					Name: to.Ptr("pub1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_3/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("vm3.testvmssacc"),
							Fqdn:            to.Ptr("vm3.testvmssacc.southeastasia.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						IPAddress:            to.Ptr("13.67.118.216"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_3/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPAddressListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPAddressListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServicePublicIpListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_ListCloudServiceRoleInstancePublicIPAddresses(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceRoleInstancePublicIpList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVMSSVMPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	pager := client.ListCloudServiceRoleInstancePublicIPAddresses("cs-tester",
		"cs1",
		"Test_VM_0",
		"nic1",
		"ip1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceRoleInstancePublicIpList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPAddressListResult{
			Value: []*armnetwork.PublicIPAddress{
				{
					Name: to.Ptr("pub1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("vm1.testvmssacc"),
							Fqdn:            to.Ptr("vm1.testvmssacc.southeastasia.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						IPAddress:            to.Ptr("13.67.119.72"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPAddressListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPAddressListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServiceRoleInstancePublicIpList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_GetCloudServicePublicIPAddress(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServicePublicIpGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVMSSPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	res, err := client.GetCloudServicePublicIPAddress(ctx,
		"cs-tester",
		"cs1",
		"Test_VM_0",
		"nic1",
		"ip1",
		"pub1",
		&armnetwork.PublicIPAddressesClientGetCloudServicePublicIPAddressOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServicePublicIpGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name: to.Ptr("pub1"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
					DomainNameLabel: to.Ptr("vm1.testvmssacc"),
					Fqdn:            to.Ptr("vm1.testvmssacc.southeastasia.cloudapp.azure.com"),
				},
				IdleTimeoutInMinutes: to.Ptr[int32](10),
				IPAddress:            to.Ptr("13.67.119.72"),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1"),
				},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CloudServicePublicIpGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete public IP address"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ip",
		&armnetwork.PublicIPAddressesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressDelete.json: %v", err)
	}
}

func TestPublicIPAddresses_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get public IP address"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testDNS-ip",
		&armnetwork.PublicIPAddressesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name:     to.Ptr("testDNS-ip"),
			Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](4),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
				},
				IPTags: []*armnetwork.IPTag{
					{
						IPTagType: to.Ptr("FirstPartyUsage"),
						Tag:       to.Ptr("SQL"),
					},
					{
						IPTagType: to.Ptr("FirstPartyUsage"),
						Tag:       to.Ptr("Storage"),
					}},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDns.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create public IP address DNS"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ip",
		armnetwork.PublicIPAddress{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
					DomainNameLabel: to.Ptr("dnslbl"),
				},
			},
		},
		&armnetwork.PublicIPAddressesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDns.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDns.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name:     to.Ptr("testDNS-ip"),
			Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
					DomainNameLabel: to.Ptr("dnslbl"),
					Fqdn:            to.Ptr("dnslbl.westus.cloudapp.azure.com"),
				},
				IdleTimeoutInMinutes: to.Ptr[int32](4),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
				},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDns.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateCustomizedValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create public IP address allocation method"},
	})
	client = armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ip",
		armnetwork.PublicIPAddress{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				IdleTimeoutInMinutes:     to.Ptr[int32](10),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
			},
			SKU: &armnetwork.PublicIPAddressSKU{
				Name: to.Ptr(armnetwork.PublicIPAddressSKUNameStandard),
				Tier: to.Ptr(armnetwork.PublicIPAddressSKUTierGlobal),
			},
		},
		&armnetwork.PublicIPAddressesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateCustomizedValues.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateCustomizedValues.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name:     to.Ptr("testDNS-ip"),
			Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](10),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
				},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
			},
			SKU: &armnetwork.PublicIPAddressSKU{
				Name: to.Ptr(armnetwork.PublicIPAddressSKUNameStandard),
				Tier: to.Ptr(armnetwork.PublicIPAddressSKUTierGlobal),
			},
			Zones: []*string{
				to.Ptr("1")},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateCustomizedValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDefaults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create public IP address defaults"},
	})
	client = armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ip",
		armnetwork.PublicIPAddress{
			Location: to.Ptr("eastus"),
		},
		&armnetwork.PublicIPAddressesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDefaults.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDefaults.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name:     to.Ptr("testDNS-ip"),
			Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](4),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
				},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
			},
			SKU: &armnetwork.PublicIPAddressSKU{
				Name: to.Ptr(armnetwork.PublicIPAddressSKUNameBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressCreateDefaults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update public IP address tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ip",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name:     to.Ptr("testDNS-ip"),
			Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](10),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
				},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all public IP addresses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPAddressListResult{
			Value: []*armnetwork.PublicIPAddress{
				{
					Name:     to.Ptr("testDNS-ip"),
					Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				},
				{
					Name:     to.Ptr("ip01"),
					Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/ip01"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("testlbl"),
							Fqdn:            to.Ptr("testlbl.westus.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						IPAddress:            to.Ptr("40.85.154.247"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/loadBalancers/testLb/frontendIPConfigurations/LoadBalancerFrontEnd"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPAddressListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPAddressListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List resource group public IP addresses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPAddressListResult{
			Value: []*armnetwork.PublicIPAddress{
				{
					Name:     to.Ptr("testDNS-ip"),
					Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"),
						},
						IPTags: []*armnetwork.IPTag{
							{
								IPTagType: to.Ptr("FirstPartyUsage"),
								Tag:       to.Ptr("SQL"),
							},
							{
								IPTagType: to.Ptr("FirstPartyUsage"),
								Tag:       to.Ptr("Storage"),
							}},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				},
				{
					Name:     to.Ptr("ip03"),
					Type:     to.Ptr("Microsoft.Network/publicIPAddresses"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/ip03"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("testlbl"),
							Fqdn:            to.Ptr("testlbl.westus.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						IPAddress:            to.Ptr("40.85.154.247"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/testLb/frontendIPConfigurations/LoadBalancerFrontEnd"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPAddressListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPAddressListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpAddressList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssPublicIpListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVMSSPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	pager := client.ListVirtualMachineScaleSetPublicIPAddresses("vmss-tester",
		"vmss1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssPublicIpListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPAddressListResult{
			Value: []*armnetwork.PublicIPAddress{
				{
					Name: to.Ptr("pub1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("vm1.testvmssacc"),
							Fqdn:            to.Ptr("vm1.testvmssacc.southeastasia.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						IPAddress:            to.Ptr("13.67.119.72"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				},
				{
					Name: to.Ptr("pub1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/3/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("vm3.testvmssacc"),
							Fqdn:            to.Ptr("vm3.testvmssacc.southeastasia.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						IPAddress:            to.Ptr("13.67.118.216"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/3/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPAddressListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPAddressListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssPublicIpListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_ListVirtualMachineScaleSetVMPublicIPAddresses(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssVmPublicIpList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVMSSVMPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	pager := client.ListVirtualMachineScaleSetVMPublicIPAddresses("vmss-tester",
		"vmss1",
		"1",
		"nic1",
		"ip1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssVmPublicIpList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPAddressListResult{
			Value: []*armnetwork.PublicIPAddress{
				{
					Name: to.Ptr("pub1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
					Properties: &armnetwork.PublicIPAddressPropertiesFormat{
						DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
							DomainNameLabel: to.Ptr("vm1.testvmssacc"),
							Fqdn:            to.Ptr("vm1.testvmssacc.southeastasia.cloudapp.azure.com"),
						},
						IdleTimeoutInMinutes: to.Ptr[int32](10),
						IPAddress:            to.Ptr("13.67.119.72"),
						IPConfiguration: &armnetwork.IPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPAddressListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPAddressListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssVmPublicIpList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssPublicIpGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVMSSPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPAddressesClient("subid", cred, &options)
	res, err := client.GetVirtualMachineScaleSetPublicIPAddress(ctx,
		"vmss-tester",
		"vmss1",
		"1",
		"nic1",
		"ip1",
		"pub1",
		&armnetwork.PublicIPAddressesClientGetVirtualMachineScaleSetPublicIPAddressOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssPublicIpGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPAddress{
			Name: to.Ptr("pub1"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				DNSSettings: &armnetwork.PublicIPAddressDNSSettings{
					DomainNameLabel: to.Ptr("vm1.testvmssacc"),
					Fqdn:            to.Ptr("vm1.testvmssacc.southeastasia.cloudapp.azure.com"),
				},
				IdleTimeoutInMinutes: to.Ptr[int32](10),
				IPAddress:            to.Ptr("13.67.119.72"),
				IPConfiguration: &armnetwork.IPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
				},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VmssPublicIpGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomIPPrefixes_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete custom IP prefix"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewCustomIPPrefixesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-customipprefix",
		&armnetwork.CustomIPPrefixesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixDelete.json: %v", err)
	}
}

func TestCustomIPPrefixes_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get custom IP prefix"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewCustomIPPrefixesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-customipprefix",
		&armnetwork.CustomIPPrefixesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.CustomIPPrefix{
			Name:     to.Ptr("test-customipprefix"),
			Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
				AuthorizationMessage:  to.Ptr("authorizationMessage"),
				ChildCustomIPPrefixes: []*armnetwork.SubResource{},
				Cidr:                  to.Ptr("0.0.0.0/24"),
				CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
				FailedReason:          to.Ptr(""),
				ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPPrefixes:      []*armnetwork.SubResource{},
				ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
				SignedMessage:         to.Ptr("signedMessage"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomIPPrefixes_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixCreateCustomizedValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create custom IP prefix allocation method"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewCustomIPPrefixesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-customipprefix",
		armnetwork.CustomIPPrefix{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
				Cidr: to.Ptr("0.0.0.0/24"),
			},
		},
		&armnetwork.CustomIPPrefixesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixCreateCustomizedValues.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixCreateCustomizedValues.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.CustomIPPrefix{
			Name:     to.Ptr("test-customipprefix"),
			Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
				AuthorizationMessage:  to.Ptr("authorizationMessage"),
				ChildCustomIPPrefixes: []*armnetwork.SubResource{},
				Cidr:                  to.Ptr("192.168.254.2/24"),
				CommissionedState:     to.Ptr(armnetwork.CommissionedStateProvisioning),
				FailedReason:          to.Ptr(""),
				ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPPrefixes:      []*armnetwork.SubResource{},
				ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
				SignedMessage:         to.Ptr("signedMessage"),
			},
			Zones: []*string{
				to.Ptr("1")},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixCreateCustomizedValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomIPPrefixes_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update public IP address tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewCustomIPPrefixesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-customipprefix",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.CustomIPPrefix{
			Name:     to.Ptr("test-customipprefix"),
			Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
				AuthorizationMessage:  to.Ptr("authorizationMessage"),
				ChildCustomIPPrefixes: []*armnetwork.SubResource{},
				Cidr:                  to.Ptr("192.168.254.2/24"),
				CommissionedState:     to.Ptr(armnetwork.CommissionedStateProvisioning),
				FailedReason:          to.Ptr(""),
				ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPPrefixes:      []*armnetwork.SubResource{},
				ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
				SignedMessage:         to.Ptr("signedMessage"),
			},
			Zones: []*string{
				to.Ptr("1")},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomIPPrefixes_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all custom IP prefixes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewCustomIPPrefixesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.CustomIPPrefixListResult{
			Value: []*armnetwork.CustomIPPrefix{
				{
					Name:     to.Ptr("test-customipprefix"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("0.0.0.0/24"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
						FailedReason:          to.Ptr(""),
						ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:      []*armnetwork.SubResource{},
						ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:         to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix2"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/customIpPrefixes/test-customipprefix2"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("0.0.2.0/23"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
						FailedReason:          to.Ptr(""),
						ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:      []*armnetwork.SubResource{},
						ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:         to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix3"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix3"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("0.0.4.0/22"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateProvisioning),
						FailedReason:          to.Ptr(""),
						ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:      []*armnetwork.SubResource{},
						ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:         to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix4"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix4"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("2607:f0d1:1002:0001::/64"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
						CustomIPPrefixParent: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix5"),
						},
						FailedReason:      to.Ptr(""),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:  []*armnetwork.SubResource{},
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:     to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix5"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix5"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage: to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix4"),
							}},
						Cidr:              to.Ptr("2607:f0d1:1002::/48"),
						CommissionedState: to.Ptr(armnetwork.CommissionedStateProvisioned),
						FailedReason:      to.Ptr(""),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:  []*armnetwork.SubResource{},
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:     to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix6"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix6"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("0.0.5.0/22"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedState("ProvisionFailed")),
						FailedReason:          to.Ptr("CustomerSignatureNotVerified"),
						ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:      []*armnetwork.SubResource{},
						ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:         to.Ptr("signedMessage"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomIPPrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomIPPrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomIPPrefixes_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List resource group Custom IP prefixes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewCustomIPPrefixesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.CustomIPPrefixListResult{
			Value: []*armnetwork.CustomIPPrefix{
				{
					Name:     to.Ptr("test-customipprefix"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("0.0.0.0/24"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
						FailedReason:          to.Ptr(""),
						ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:      []*armnetwork.SubResource{},
						ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:         to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix2"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix2"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("0.0.1.0/30"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
						FailedReason:          to.Ptr(""),
						ProvisioningState:     to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:      []*armnetwork.SubResource{},
						ResourceGUID:          to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:         to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix4"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix4"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage:  to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{},
						Cidr:                  to.Ptr("2607:f0d1:1002:0001::/64"),
						CommissionedState:     to.Ptr(armnetwork.CommissionedStateCommissioned),
						CustomIPPrefixParent: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix5"),
						},
						FailedReason:      to.Ptr(""),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:  []*armnetwork.SubResource{},
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:     to.Ptr("signedMessage"),
					},
				},
				{
					Name:     to.Ptr("test-customipprefix5"),
					Type:     to.Ptr("Microsoft.Network/customIpPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix5"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.CustomIPPrefixPropertiesFormat{
						AuthorizationMessage: to.Ptr("authorizationMessage"),
						ChildCustomIPPrefixes: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix4"),
							}},
						Cidr:              to.Ptr("2607:f0d1:1002::/48"),
						CommissionedState: to.Ptr(armnetwork.CommissionedStateProvisioned),
						FailedReason:      to.Ptr(""),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPPrefixes:  []*armnetwork.SubResource{},
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
						SignedMessage:     to.Ptr("signedMessage"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomIPPrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomIPPrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CustomIpPrefixList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosCustomPolicies_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete DDoS custom policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosCustomPoliciesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ddos-custom-policy",
		&armnetwork.DdosCustomPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyDelete.json: %v", err)
	}
}

func TestDdosCustomPolicies_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DDoS custom policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosCustomPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-ddos-custom-policy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DdosCustomPolicy{
			Name:     to.Ptr("test-ddos-custom-policy"),
			Type:     to.Ptr("Microsoft.Network/ddosCustomPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosCustomPolicies/test-ddos-custom-policy"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.DdosCustomPolicyPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddresses: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"),
					}},
				ResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DdosCustomPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DdosCustomPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosCustomPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create DDoS custom policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosCustomPoliciesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ddos-custom-policy",
		armnetwork.DdosCustomPolicy{
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.DdosCustomPolicyPropertiesFormat{
				ProtocolCustomSettings: []*armnetwork.ProtocolCustomSettingsFormat{
					{
						Protocol: to.Ptr(armnetwork.DdosCustomPolicyProtocolTCP),
					}},
			},
		},
		&armnetwork.DdosCustomPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DdosCustomPolicy{
			Name:     to.Ptr("test-ddos-custom-policy"),
			Type:     to.Ptr("Microsoft.Network/ddosCustomPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosCustomPolicies/test-ddos-custom-policy"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.DdosCustomPolicyPropertiesFormat{
				ProtocolCustomSettings: []*armnetwork.ProtocolCustomSettingsFormat{
					{
						TriggerRateOverride: to.Ptr("20000"),
						Protocol:            to.Ptr(armnetwork.DdosCustomPolicyProtocolTCP),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddresses: []*armnetwork.SubResource{},
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DdosCustomPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DdosCustomPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosCustomPolicies_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DDoS Custom policy Update tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosCustomPoliciesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ddos-custom-policy",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DdosCustomPolicy{
			Name:     to.Ptr("test-ddos-custom-policy"),
			Type:     to.Ptr("Microsoft.Network/ddosCustomPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosCustomPolicies/test-ddos-custom-policy"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.DdosCustomPolicyPropertiesFormat{
				ProtocolCustomSettings: []*armnetwork.ProtocolCustomSettingsFormat{
					{
						TriggerRateOverride: to.Ptr("20000"),
						Protocol:            to.Ptr(armnetwork.DdosCustomPolicyProtocolTCP),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddresses: []*armnetwork.SubResource{},
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DdosCustomPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DdosCustomPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosCustomPolicyUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosProtectionPlans_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete DDoS protection plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosProtectionPlansClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-plan",
		&armnetwork.DdosProtectionPlansClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanDelete.json: %v", err)
	}
}

func TestDdosProtectionPlans_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DDoS protection plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosProtectionPlansClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-plan",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DdosProtectionPlan{
			Name:     to.Ptr("test-plan"),
			Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/test-plan"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				VirtualNetworks: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DdosProtectionPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DdosProtectionPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosProtectionPlans_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create DDoS protection plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosProtectionPlansClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-plan",
		armnetwork.DdosProtectionPlan{
			Location:   to.Ptr("westus"),
			Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{},
		},
		&armnetwork.DdosProtectionPlansClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DdosProtectionPlan{
			Name:     to.Ptr("test-plan"),
			Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/test-plan"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				VirtualNetworks:   []*armnetwork.SubResource{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DdosProtectionPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DdosProtectionPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosProtectionPlans_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DDoS protection plan Update tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosProtectionPlansClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-plan",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DdosProtectionPlan{
			Name:     to.Ptr("test-plan"),
			Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/test-plan"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				VirtualNetworks:   []*armnetwork.SubResource{},
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DdosProtectionPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DdosProtectionPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosProtectionPlans_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all DDoS protection plans"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosProtectionPlansClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.DdosProtectionPlanListResult{
			Value: []*armnetwork.DdosProtectionPlan{
				{
					Name:     to.Ptr("plan1"),
					Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						VirtualNetworks: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet1"),
							}},
					},
				},
				{
					Name:     to.Ptr("plan2"),
					Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						VirtualNetworks: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet3"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DdosProtectionPlanListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DdosProtectionPlanListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDdosProtectionPlans_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DDoS protection plans in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDdosProtectionPlansClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.DdosProtectionPlanListResult{
			Value: []*armnetwork.DdosProtectionPlan{
				{
					Name:     to.Ptr("plan1"),
					Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						VirtualNetworks: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
							}},
					},
				},
				{
					Name:     to.Ptr("plan2"),
					Type:     to.Ptr("Microsoft.Network/ddosProtectionPlans"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.DdosProtectionPlanPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						VirtualNetworks: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DdosProtectionPlanListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DdosProtectionPlanListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DdosProtectionPlanList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscpConfiguration_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create DSCP Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDscpConfigurationClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mydscpconfig",
		armnetwork.DscpConfiguration{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.DscpConfigurationPropertiesFormat{
				QosDefinitionCollection: []*armnetwork.QosDefinition{
					{
						DestinationIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("127.0.10.2"),
								StartIP: to.Ptr("127.0.10.1"),
							}},
						DestinationPortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](15),
								Start: to.Ptr[int32](15),
							}},
						Markings: []*int32{
							to.Ptr[int32](1)},
						SourceIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("127.0.0.2"),
								StartIP: to.Ptr("127.0.0.1"),
							}},
						SourcePortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](11),
								Start: to.Ptr[int32](10),
							},
							{
								End:   to.Ptr[int32](21),
								Start: to.Ptr[int32](20),
							}},
						Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
					},
					{
						DestinationIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("12.0.10.2"),
								StartIP: to.Ptr("12.0.10.1"),
							}},
						DestinationPortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](52),
								Start: to.Ptr[int32](51),
							}},
						Markings: []*int32{
							to.Ptr[int32](2)},
						SourceIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("12.0.0.2"),
								StartIP: to.Ptr("12.0.0.1"),
							}},
						SourcePortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](12),
								Start: to.Ptr[int32](11),
							}},
						Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
					}},
			},
		},
		&armnetwork.DscpConfigurationClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DscpConfiguration{
			Name:     to.Ptr("mydscpConfig"),
			Type:     to.Ptr("Microsoft.Network/dscpConfiguration"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.DscpConfigurationPropertiesFormat{
				AssociatedNetworkInterfaces: []*armnetwork.Interface{},
				ProvisioningState:           to.Ptr(armnetwork.ProvisioningStateSucceeded),
				QosCollectionID:             to.Ptr("0f8fad5b-d9cb-469f-a165-70867728950e"),
				QosDefinitionCollection: []*armnetwork.QosDefinition{
					{
						DestinationIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("127.0.10.2"),
								StartIP: to.Ptr("127.0.10.1"),
							}},
						DestinationPortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](62),
								Start: to.Ptr[int32](61),
							}},
						Markings: []*int32{
							to.Ptr[int32](1)},
						SourceIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("127.0.0.2"),
								StartIP: to.Ptr("127.0.0.1"),
							}},
						SourcePortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](12),
								Start: to.Ptr[int32](11),
							}},
						Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
					},
					{
						DestinationIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("12.0.10.2"),
								StartIP: to.Ptr("12.0.10.1"),
							}},
						DestinationPortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](52),
								Start: to.Ptr[int32](51),
							}},
						Markings: []*int32{
							to.Ptr[int32](2)},
						SourceIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("12.0.0.2"),
								StartIP: to.Ptr("12.0.0.1"),
							}},
						SourcePortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](12),
								Start: to.Ptr[int32](11),
							}},
						Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscpConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscpConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscpConfiguration_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete DSCP Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDscpConfigurationClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"mydscpConfig",
		&armnetwork.DscpConfigurationClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationDelete.json: %v", err)
	}
}

func TestDscpConfiguration_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Dscp Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDscpConfigurationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"mydscpConfig",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.DscpConfiguration{
			Name:     to.Ptr("mydscpConfig"),
			Type:     to.Ptr("Microsoft.Network/dscpConfiguration"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.DscpConfigurationPropertiesFormat{
				AssociatedNetworkInterfaces: []*armnetwork.Interface{
					{},
					{}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				QosCollectionID:   to.Ptr("0f8fad5b-d9cb-469f-a165-70867728950e"),
				QosDefinitionCollection: []*armnetwork.QosDefinition{
					{
						DestinationIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("127.0.10.2"),
								StartIP: to.Ptr("127.0.10.1"),
							}},
						DestinationPortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](62),
								Start: to.Ptr[int32](61),
							}},
						Markings: []*int32{
							to.Ptr[int32](1)},
						SourceIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("127.0.0.2"),
								StartIP: to.Ptr("127.0.0.1"),
							}},
						SourcePortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](12),
								Start: to.Ptr[int32](11),
							}},
						Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
					},
					{
						DestinationIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("12.0.10.2"),
								StartIP: to.Ptr("12.0.10.1"),
							}},
						DestinationPortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](52),
								Start: to.Ptr[int32](51),
							}},
						Markings: []*int32{
							to.Ptr[int32](2)},
						SourceIPRanges: []*armnetwork.QosIPRange{
							{
								EndIP:   to.Ptr("12.0.0.2"),
								StartIP: to.Ptr("12.0.0.1"),
							}},
						SourcePortRanges: []*armnetwork.QosPortRange{
							{
								End:   to.Ptr[int32](12),
								Start: to.Ptr[int32](11),
							}},
						Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscpConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscpConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscpConfiguration_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Dscp Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDscpConfigurationClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.DscpConfigurationListResult{
			Value: []*armnetwork.DscpConfiguration{
				{
					Name:     to.Ptr("mydscpConfig"),
					Type:     to.Ptr("Microsoft.Network/dscpConfiguration"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.DscpConfigurationPropertiesFormat{
						AssociatedNetworkInterfaces: []*armnetwork.Interface{
							{},
							{}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						QosCollectionID:   to.Ptr("0f8fad5b-d9cb-469f-a165-70867728950e"),
						QosDefinitionCollection: []*armnetwork.QosDefinition{
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.10.2"),
										StartIP: to.Ptr("127.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](62),
										Start: to.Ptr[int32](61),
									}},
								Markings: []*int32{
									to.Ptr[int32](1)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.0.2"),
										StartIP: to.Ptr("127.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
							},
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.10.2"),
										StartIP: to.Ptr("12.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](52),
										Start: to.Ptr[int32](51),
									}},
								Markings: []*int32{
									to.Ptr[int32](2)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.0.2"),
										StartIP: to.Ptr("12.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
							}},
					},
				},
				{
					Name:     to.Ptr("mydscpConfig2"),
					Type:     to.Ptr("Microsoft.Network/dscpConfiguration"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.DscpConfigurationPropertiesFormat{
						AssociatedNetworkInterfaces: []*armnetwork.Interface{
							{},
							{}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						QosCollectionID:   to.Ptr("9as24mf6-d9cb-7a7f-a165-70867728950e"),
						QosDefinitionCollection: []*armnetwork.QosDefinition{
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.10.2"),
										StartIP: to.Ptr("127.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](62),
										Start: to.Ptr[int32](61),
									}},
								Markings: []*int32{
									to.Ptr[int32](1)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.0.2"),
										StartIP: to.Ptr("127.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
							},
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.10.2"),
										StartIP: to.Ptr("12.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](52),
										Start: to.Ptr[int32](51),
									}},
								Markings: []*int32{
									to.Ptr[int32](2)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.0.2"),
										StartIP: to.Ptr("12.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscpConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscpConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscpConfiguration_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all network interfaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDscpConfigurationClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.DscpConfigurationListResult{
			Value: []*armnetwork.DscpConfiguration{
				{
					Name:     to.Ptr("mydscpConfig"),
					Type:     to.Ptr("Microsoft.Network/dscpConfiguration"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.DscpConfigurationPropertiesFormat{
						AssociatedNetworkInterfaces: []*armnetwork.Interface{
							{},
							{}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						QosCollectionID:   to.Ptr("0f8fad5b-d9cb-469f-a165-70867728950e"),
						QosDefinitionCollection: []*armnetwork.QosDefinition{
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.10.2"),
										StartIP: to.Ptr("127.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](62),
										Start: to.Ptr[int32](61),
									}},
								Markings: []*int32{
									to.Ptr[int32](1)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.0.2"),
										StartIP: to.Ptr("127.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
							},
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.10.2"),
										StartIP: to.Ptr("12.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](52),
										Start: to.Ptr[int32](51),
									}},
								Markings: []*int32{
									to.Ptr[int32](2)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.0.2"),
										StartIP: to.Ptr("12.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
							}},
					},
				},
				{
					Name:     to.Ptr("mydscpConfig2"),
					Type:     to.Ptr("Microsoft.Network/dscpConfiguration"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/dscpConfiguration/mydscpConfig2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.DscpConfigurationPropertiesFormat{
						AssociatedNetworkInterfaces: []*armnetwork.Interface{
							{},
							{}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						QosCollectionID:   to.Ptr("9as24mf6-d9cb-7a7f-a165-70867728950e"),
						QosDefinitionCollection: []*armnetwork.QosDefinition{
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.10.2"),
										StartIP: to.Ptr("127.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](62),
										Start: to.Ptr[int32](61),
									}},
								Markings: []*int32{
									to.Ptr[int32](1)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("127.0.0.2"),
										StartIP: to.Ptr("127.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeTCP),
							},
							{
								DestinationIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.10.2"),
										StartIP: to.Ptr("12.0.10.1"),
									}},
								DestinationPortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](52),
										Start: to.Ptr[int32](51),
									}},
								Markings: []*int32{
									to.Ptr[int32](2)},
								SourceIPRanges: []*armnetwork.QosIPRange{
									{
										EndIP:   to.Ptr("12.0.0.2"),
										StartIP: to.Ptr("12.0.0.1"),
									}},
								SourcePortRanges: []*armnetwork.QosPortRange{
									{
										End:   to.Ptr[int32](12),
										Start: to.Ptr[int32](11),
									}},
								Protocol: to.Ptr(armnetwork.ProtocolTypeUDP),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscpConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscpConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DscpConfigurationListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableEndpointServices_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EndpointServicesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EndpointServicesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailableEndpointServicesClient("subid", cred, &options)
	pager := client.List("westus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EndpointServicesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.EndpointServicesListResult{
			Value: []*armnetwork.EndpointServiceResult{
				{
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Network/virtualNetworkEndpointServices/Microsoft.Storage"),
					Name: to.Ptr("Microsoft.Storage"),
					Type: to.Ptr("Microsoft.Network/virtualNetworkEndpointServices"),
				},
				{
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Network/virtualNetworkEndpointServices/Microsoft.Sql"),
					Name: to.Ptr("Microsoft.Sql"),
					Type: to.Ptr("Microsoft.Network/virtualNetworkEndpointServices"),
				},
				{
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Network/virtualNetworkEndpointServices/Microsoft.AzureActiveDirectory"),
					Name: to.Ptr("Microsoft.AzureActiveDirectory"),
					Type: to.Ptr("Microsoft.Network/virtualNetworkEndpointServices"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EndpointServicesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EndpointServicesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EndpointServicesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitAuthorizations_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ExpressRouteCircuit Authorization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitAuthorizationsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"circuitName",
		"authorizationName",
		&armnetwork.ExpressRouteCircuitAuthorizationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationDelete.json: %v", err)
	}
}

func TestExpressRouteCircuitAuthorizations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ExpressRouteCircuit Authorization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitAuthorizationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"circuitName",
		"authorizationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitAuthorization{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/authorizations/MyAuthorization1"),
			Name: to.Ptr("MyAuthorization1"),
			Type: to.Ptr("Microsoft.Network/expressRouteCircuits/authorizations"),
			Etag: to.Ptr("W/\"e33c875f-48df-4a91-b7d3-eb95b5ddbb89\""),
			Properties: &armnetwork.AuthorizationPropertiesFormat{
				AuthorizationKey:       to.Ptr("authKey"),
				AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitAuthorization) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitAuthorization)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitAuthorizations_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ExpressRouteCircuit Authorization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitAuthorizationsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"circuitName",
		"authorizatinName",
		armnetwork.ExpressRouteCircuitAuthorization{
			Properties: &armnetwork.AuthorizationPropertiesFormat{},
		},
		&armnetwork.ExpressRouteCircuitAuthorizationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitAuthorization{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/authorizations/authorizationName"),
			Name: to.Ptr("authorizationName"),
			Etag: to.Ptr("W/\"e22dd4b2-4c24-44cf-b702-70a472b62914\""),
			Properties: &armnetwork.AuthorizationPropertiesFormat{
				AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitAuthorization) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitAuthorization)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitAuthorizations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ExpressRouteCircuit Authorization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitAuthorizationsClient("subid", cred, &options)
	pager := client.List("rg1",
		"circuitName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AuthorizationListResult{
			Value: []*armnetwork.ExpressRouteCircuitAuthorization{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/authorizations/MyAuthorization1"),
					Name: to.Ptr("MyAuthorization1"),
					Etag: to.Ptr("W/\"e33c875f-48df-4a91-b7d3-eb95b5ddbb89\""),
					Properties: &armnetwork.AuthorizationPropertiesFormat{
						AuthorizationKey:       to.Ptr("authKey"),
						AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AuthorizationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AuthorizationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitAuthorizationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitPeerings_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ExpressRouteCircuit Peerings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitPeeringsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		&armnetwork.ExpressRouteCircuitPeeringsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringDelete.json: %v", err)
	}
}

func TestExpressRouteCircuitPeerings_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ExpressRouteCircuit Peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitPeeringsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"circuitName",
		"MicrosoftPeering",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/MicrosoftPeering"),
			Name: to.Ptr("MicrosoftPeering"),
			Type: to.Ptr("Microsoft.Network/expressRouteCircuits/peerings"),
			Etag: to.Ptr("W/\"b2a25b98-2e6d-4d46-87f2-089de5f6fdf9\""),
			Properties: &armnetwork.ExpressRouteCircuitPeeringPropertiesFormat{
				AzureASN:           to.Ptr[int32](12076),
				GatewayManagerEtag: to.Ptr("103"),
				IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
					MicrosoftPeeringConfig: &armnetwork.ExpressRouteCircuitPeeringConfig{
						AdvertisedCommunities: []*string{},
						AdvertisedPublicPrefixes: []*string{
							to.Ptr("3FFE:FFFF:0:CD31::/120")},
						AdvertisedPublicPrefixesState: to.Ptr(armnetwork.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded),
						CustomerASN:                   to.Ptr[int32](23),
						LegacyMode:                    to.Ptr[int32](0),
						RoutingRegistryName:           to.Ptr("ARIN"),
					},
					PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
					SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
					State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
				},
				LastModifiedBy: to.Ptr("Customer"),
				MicrosoftPeeringConfig: &armnetwork.ExpressRouteCircuitPeeringConfig{
					AdvertisedCommunities: []*string{},
					AdvertisedPublicPrefixes: []*string{
						to.Ptr("123.1.0.0/24")},
					AdvertisedPublicPrefixesState: to.Ptr(armnetwork.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded),
					CustomerASN:                   to.Ptr[int32](23),
					LegacyMode:                    to.Ptr[int32](0),
					RoutingRegistryName:           to.Ptr("ARIN"),
				},
				PeerASN:                  to.Ptr[int64](100),
				PeeringType:              to.Ptr(armnetwork.ExpressRoutePeeringTypeMicrosoftPeering),
				PrimaryAzurePort:         to.Ptr("A51-TEST-06GMR-CIS-1-PRI-A"),
				PrimaryPeerAddressPrefix: to.Ptr("123.0.0.0/30"),
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RouteFilter: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName"),
				},
				SecondaryAzurePort:         to.Ptr("A51-TEST-06GMR-CIS-2-SEC-A"),
				SecondaryPeerAddressPrefix: to.Ptr("123.0.0.4/30"),
				State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
				VlanID:                     to.Ptr[int32](300),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitPeerings_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ExpressRouteCircuit Peerings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitPeeringsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"circuitName",
		"AzurePrivatePeering",
		armnetwork.ExpressRouteCircuitPeering{
			Properties: &armnetwork.ExpressRouteCircuitPeeringPropertiesFormat{
				PeerASN:                    to.Ptr[int64](200),
				PrimaryPeerAddressPrefix:   to.Ptr("192.168.16.252/30"),
				SecondaryPeerAddressPrefix: to.Ptr("192.168.18.252/30"),
				VlanID:                     to.Ptr[int32](200),
			},
		},
		&armnetwork.ExpressRouteCircuitPeeringsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
			Name: to.Ptr("AzurePrivatePeering"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.ExpressRouteCircuitPeeringPropertiesFormat{
				AzureASN:               to.Ptr[int32](12076),
				ExpressRouteConnection: &armnetwork.ExpressRouteConnectionID{},
				GatewayManagerEtag:     to.Ptr(""),
				IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
					PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
					SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
					State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
				},
				LastModifiedBy:             to.Ptr("Customer"),
				PeerASN:                    to.Ptr[int64](200),
				PeeringType:                to.Ptr(armnetwork.ExpressRoutePeeringTypeAzurePrivatePeering),
				PrimaryAzurePort:           to.Ptr(""),
				PrimaryPeerAddressPrefix:   to.Ptr("192.168.16.252/30"),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecondaryAzurePort:         to.Ptr(""),
				SecondaryPeerAddressPrefix: to.Ptr("192.168.18.252/30"),
				State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
				VlanID:                     to.Ptr[int32](200),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitPeerings_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ExpressRouteCircuit Peerings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitPeeringsClient("subid", cred, &options)
	pager := client.List("rg1",
		"circuitName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCircuitPeeringListResult{
			Value: []*armnetwork.ExpressRouteCircuitPeering{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/MicrosoftPeering"),
					Name: to.Ptr("MicrosoftPeering"),
					Etag: to.Ptr("W/\"b2a25b98-2e6d-4d46-87f2-089de5f6fdf9\""),
					Properties: &armnetwork.ExpressRouteCircuitPeeringPropertiesFormat{
						AzureASN:               to.Ptr[int32](12076),
						ExpressRouteConnection: &armnetwork.ExpressRouteConnectionID{},
						GatewayManagerEtag:     to.Ptr("103"),
						IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
							MicrosoftPeeringConfig: &armnetwork.ExpressRouteCircuitPeeringConfig{
								AdvertisedCommunities: []*string{},
								AdvertisedPublicPrefixes: []*string{
									to.Ptr("3FFE:FFFF:0:CD31::/120")},
								AdvertisedPublicPrefixesState: to.Ptr(armnetwork.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded),
								CustomerASN:                   to.Ptr[int32](23),
								LegacyMode:                    to.Ptr[int32](0),
								RoutingRegistryName:           to.Ptr("ARIN"),
							},
							PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
							SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
							State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
						},
						LastModifiedBy: to.Ptr("Customer"),
						MicrosoftPeeringConfig: &armnetwork.ExpressRouteCircuitPeeringConfig{
							AdvertisedCommunities: []*string{},
							AdvertisedPublicPrefixes: []*string{
								to.Ptr("123.1.0.0/24")},
							AdvertisedPublicPrefixesState: to.Ptr(armnetwork.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded),
							CustomerASN:                   to.Ptr[int32](23),
							LegacyMode:                    to.Ptr[int32](0),
							RoutingRegistryName:           to.Ptr("ARIN"),
						},
						PeerASN:                    to.Ptr[int64](100),
						PeeringType:                to.Ptr(armnetwork.ExpressRoutePeeringTypeMicrosoftPeering),
						PrimaryAzurePort:           to.Ptr("A51-TEST-06GMR-CIS-1-PRI-A"),
						PrimaryPeerAddressPrefix:   to.Ptr("123.0.0.0/30"),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecondaryAzurePort:         to.Ptr("A51-TEST-06GMR-CIS-2-SEC-A"),
						SecondaryPeerAddressPrefix: to.Ptr("123.0.0.4/30"),
						State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
						VlanID:                     to.Ptr[int32](300),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
					Name: to.Ptr("AzurePrivatePeering"),
					Etag: to.Ptr("W/\"b2a25b98-2e6d-4d46-87f2-089de5f6fdf9\""),
					Properties: &armnetwork.ExpressRouteCircuitPeeringPropertiesFormat{
						AzureASN: to.Ptr[int32](12076),
						ExpressRouteConnection: &armnetwork.ExpressRouteConnectionID{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
						},
						GatewayManagerEtag: to.Ptr("103"),
						IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
							PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
							SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
							State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
						},
						LastModifiedBy:             to.Ptr("Customer"),
						PeerASN:                    to.Ptr[int64](100),
						PeeringType:                to.Ptr(armnetwork.ExpressRoutePeeringTypeAzurePrivatePeering),
						PrimaryAzurePort:           to.Ptr("A51-TEST-06GMR-CIS-1-PRI-A"),
						PrimaryPeerAddressPrefix:   to.Ptr("10.0.0.0/30"),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecondaryAzurePort:         to.Ptr("A51-TEST-06GMR-CIS-2-SEC-A"),
						SecondaryPeerAddressPrefix: to.Ptr("10.0.0.4/30"),
						State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
						VlanID:                     to.Ptr[int32](200),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCircuitPeeringListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCircuitPeeringListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitConnections_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ExpressRouteCircuit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"circuitConnectionUSAUS",
		&armnetwork.ExpressRouteCircuitConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionDelete.json: %v", err)
	}
}

func TestExpressRouteCircuitConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteCircuitConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitConnectionsClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"circuitConnectionUSAUS",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitConnection{
			ID:   to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/connections/circuitConnectionUSAUS"),
			Name: to.Ptr("circuitConnectionUSAUS"),
			Type: to.Ptr("Microsoft.Network/expressRouteCircuits/peerings/connections"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteCircuitConnectionPropertiesFormat{
				AddressPrefix:           to.Ptr("10.0.0.0/24"),
				AuthorizationKey:        to.Ptr("946a1918-b7a2-4917-b43c-8c4cdaee006a"),
				CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
				ExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
				},
				IPv6CircuitConnectionConfig: &armnetwork.IPv6CircuitConnectionConfig{
					AddressPrefix:           to.Ptr("aa:bb::1/125"),
					CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
				},
				PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid2/resourceGroups/dedharcktpeer/providers/Microsoft.Network/expressRouteCircuits/dedharcktremote/peerings/AzurePrivatePeering"),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteCircuitConnectionCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitConnectionsClient("subid1", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"circuitConnectionUSAUS",
		armnetwork.ExpressRouteCircuitConnection{
			Properties: &armnetwork.ExpressRouteCircuitConnectionPropertiesFormat{
				AddressPrefix:    to.Ptr("10.0.0.0/29"),
				AuthorizationKey: to.Ptr("946a1918-b7a2-4917-b43c-8c4cdaee006a"),
				ExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
				},
				IPv6CircuitConnectionConfig: &armnetwork.IPv6CircuitConnectionConfig{
					AddressPrefix: to.Ptr("aa:bb::/125"),
				},
				PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid2/resourceGroups/dedharcktpeer/providers/Microsoft.Network/expressRouteCircuits/dedharcktremote/peerings/AzurePrivatePeering"),
				},
			},
		},
		&armnetwork.ExpressRouteCircuitConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitConnection{
			ID:   to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/connections/circuitConnectionUSAUS"),
			Name: to.Ptr("circuitConnectionUSAUS"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteCircuitConnectionPropertiesFormat{
				AddressPrefix:           to.Ptr("10.0.0.0/24"),
				AuthorizationKey:        to.Ptr("946a1918-b7a2-4917-b43c-8c4cdaee006a"),
				CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
				ExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
				},
				IPv6CircuitConnectionConfig: &armnetwork.IPv6CircuitConnectionConfig{
					AddressPrefix:           to.Ptr("aa:bb::1/125"),
					CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
				},
				PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid2/resourceGroups/dedharcktpeer/providers/Microsoft.Network/expressRouteCircuits/dedharcktremote/peerings/AzurePrivatePeering"),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuitConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ExpressRouteCircuit Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitConnectionsClient("subid1", cred, &options)
	pager := client.List("rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCircuitConnectionListResult{
			Value: []*armnetwork.ExpressRouteCircuitConnection{
				{
					ID:   to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/connections/circuitConnectionUSAUS"),
					Name: to.Ptr("circuitConnectionUSAUS"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.ExpressRouteCircuitConnectionPropertiesFormat{
						AddressPrefix:           to.Ptr("10.0.0.0/24"),
						AuthorizationKey:        to.Ptr("946a1918-b7a2-4917-b43c-8c4cdaee006a"),
						CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
						ExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
						},
						IPv6CircuitConnectionConfig: &armnetwork.IPv6CircuitConnectionConfig{
							AddressPrefix:           to.Ptr("aa:bb::1/125"),
							CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
						},
						PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid2/resourceGroups/dedharcktpeer/providers/Microsoft.Network/expressRouteCircuits/dedharcktremote/peerings/AzurePrivatePeering"),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/connections/circuitConnectionUSEUR"),
					Name: to.Ptr("circuitConnectionUSEUR"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.ExpressRouteCircuitConnectionPropertiesFormat{
						AddressPrefix:           to.Ptr("20.0.0.0/24"),
						CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
						ExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
						},
						PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/dedharckteurope/providers/Microsoft.Network/expressRouteCircuits/dedharcktams/peerings/AzurePrivatePeering"),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCircuitConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCircuitConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerExpressRouteCircuitConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PeerExpressRouteCircuitConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PeerExpressRouteCircuitConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPeerExpressRouteCircuitConnectionsClient("subid1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		"60aee347-e889-4a42-8c1b-0aae8b1e4013",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PeerExpressRouteCircuitConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PeerExpressRouteCircuitConnection{
			ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/peerConnections/60aee347-e889-4a42-8c1b-0aae8b1e4013"),
			Name: to.Ptr("60aee347-e889-4a42-8c1b-0aae8b1e4013"),
			Etag: to.Ptr("W/\"6ffbbb06-da20-44ca-a34f-280c4653b1e9\""),
			Properties: &armnetwork.PeerExpressRouteCircuitConnectionPropertiesFormat{
				AddressPrefix:           to.Ptr("20.0.0.0/29"),
				AuthResourceGUID:        to.Ptr(""),
				CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
				ConnectionName:          to.Ptr("circuitConnectionWestusEastus"),
				ExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering"),
				},
				PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitB/peerings/AzurePrivatePeering"),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PeerExpressRouteCircuitConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeerExpressRouteCircuitConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PeerExpressRouteCircuitConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerExpressRouteCircuitConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PeerExpressRouteCircuitConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Peer ExpressRouteCircuit Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPeerExpressRouteCircuitConnectionsClient("subid1", cred, &options)
	pager := client.List("rg1",
		"ExpressRouteARMCircuitA",
		"AzurePrivatePeering",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PeerExpressRouteCircuitConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PeerExpressRouteCircuitConnectionListResult{
			Value: []*armnetwork.PeerExpressRouteCircuitConnection{
				{
					ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/peerConnections/60aee347-e889-4a42-8c1b-0aae8b1e4013"),
					Name: to.Ptr("60aee347-e889-4a42-8c1b-0aae8b1e4013"),
					Etag: to.Ptr("W/\"6ffbbb06-da20-44ca-a34f-280c4653b1e9\""),
					Properties: &armnetwork.PeerExpressRouteCircuitConnectionPropertiesFormat{
						AddressPrefix:           to.Ptr("20.0.0.0/29"),
						AuthResourceGUID:        to.Ptr(""),
						CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
						ConnectionName:          to.Ptr("circuitConnectionWestusEastus"),
						ExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering"),
						},
						PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitB/peerings/AzurePrivatePeering"),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering/peerConnections/c8b17193-8dd3-4f61-866d-8cdd2e2e268e"),
					Name: to.Ptr("c8b17193-8dd3-4f61-866d-8cdd2e2e268e"),
					Etag: to.Ptr("W/\"6ffbbb06-da20-44ca-a34f-280c4653b1e9\""),
					Properties: &armnetwork.PeerExpressRouteCircuitConnectionPropertiesFormat{
						AddressPrefix:           to.Ptr("30.0.0.0/29"),
						AuthResourceGUID:        to.Ptr("64283012-d377-421d-8398-f6aeb2ac7ea0"),
						CircuitConnectionStatus: to.Ptr(armnetwork.CircuitConnectionStatusConnected),
						ConnectionName:          to.Ptr("circuitConnectionCentralusEastus"),
						ExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitA/peerings/AzurePrivatePeering"),
						},
						PeerExpressRouteCircuitPeering: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/ExpressRouteARMCircuitC/peerings/AzurePrivatePeering"),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PeerExpressRouteCircuitConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PeerExpressRouteCircuitConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PeerExpressRouteCircuitConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ExpressRouteCircuit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"circuitName",
		&armnetwork.ExpressRouteCircuitsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitDelete.json: %v", err)
	}
}

func TestExpressRouteCircuits_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ExpressRouteCircuit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"circuitName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuit{
			Name:     to.Ptr("circuitName"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
				AllowClassicOperations:   to.Ptr(false),
				Authorizations:           []*armnetwork.ExpressRouteCircuitAuthorization{},
				CircuitProvisioningState: to.Ptr("Enabled"),
				Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ServiceKey:               to.Ptr("a1410692-0000-4ceb-b94a-b90b94d398d1"),
				ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
					BandwidthInMbps:     to.Ptr[int32](200),
					PeeringLocation:     to.Ptr("peeringLocation"),
					ServiceProviderName: to.Ptr("providerName"),
				},
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
			SKU: &armnetwork.ExpressRouteCircuitSKU{
				Name:   to.Ptr("Standard_MeteredData"),
				Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
				Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuit) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuit)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ExpressRouteCircuit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"circuitName",
		armnetwork.ExpressRouteCircuit{
			Location: to.Ptr("Brazil South"),
			Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
				AllowClassicOperations: to.Ptr(false),
				Authorizations:         []*armnetwork.ExpressRouteCircuitAuthorization{},
				Peerings:               []*armnetwork.ExpressRouteCircuitPeering{},
				ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
					BandwidthInMbps:     to.Ptr[int32](200),
					PeeringLocation:     to.Ptr("Silicon Valley"),
					ServiceProviderName: to.Ptr("Equinix"),
				},
			},
			SKU: &armnetwork.ExpressRouteCircuitSKU{
				Name:   to.Ptr("Standard_MeteredData"),
				Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
				Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
			},
		},
		&armnetwork.ExpressRouteCircuitsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuit{
			Name:     to.Ptr("circuitName"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName"),
			Location: to.Ptr("Brazil South"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
				AllowClassicOperations:   to.Ptr(false),
				Authorizations:           []*armnetwork.ExpressRouteCircuitAuthorization{},
				CircuitProvisioningState: to.Ptr("Enabled"),
				Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ServiceKey:               to.Ptr("a1410692-0000-4ceb-b94a-b90b94d398d1"),
				ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
					BandwidthInMbps:     to.Ptr[int32](200),
					PeeringLocation:     to.Ptr("Silicon Valley"),
					ServiceProviderName: to.Ptr("Equinix"),
				},
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
			SKU: &armnetwork.ExpressRouteCircuitSKU{
				Name:   to.Ptr("Standard_MeteredData"),
				Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
				Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuit) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuit)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreateOnExpressRoutePort.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ExpressRouteCircuit on ExpressRoutePort"},
	})
	client = armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"expressRouteCircuit1",
		armnetwork.ExpressRouteCircuit{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
				BandwidthInGbps: to.Ptr[float32](10),
				ExpressRoutePort: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
				},
			},
			SKU: &armnetwork.ExpressRouteCircuitSKU{
				Name:   to.Ptr("Premium_MeteredData"),
				Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
				Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierPremium),
			},
		},
		&armnetwork.ExpressRouteCircuitsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreateOnExpressRoutePort.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreateOnExpressRoutePort.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuit{
			Name:     to.Ptr("expressRouteCircuit1"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/expressRouteCircuit1"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
				AllowClassicOperations:   to.Ptr(false),
				Authorizations:           []*armnetwork.ExpressRouteCircuitAuthorization{},
				BandwidthInGbps:          to.Ptr[float32](10),
				CircuitProvisioningState: to.Ptr("Enabled"),
				ExpressRoutePort: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
				},
				GatewayManagerEtag:               to.Ptr("20"),
				Peerings:                         []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ServiceKey:                       to.Ptr("d281f746-ee01-4d00-8b0a-edec4833772b"),
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateProvisioned),
			},
			SKU: &armnetwork.ExpressRouteCircuitSKU{
				Name:   to.Ptr("Premium_MeteredData"),
				Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
				Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierPremium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuit) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuit)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitCreateOnExpressRoutePort.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Express Route Circuit Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"ertest",
		"er1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuit{
			Name:     to.Ptr("er1"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/ertest/providers/Microsoft.Network/expressRouteCircuits/er1"),
			Location: to.Ptr("brazilsouth"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
				AllowClassicOperations:   to.Ptr(false),
				Authorizations:           []*armnetwork.ExpressRouteCircuitAuthorization{},
				CircuitProvisioningState: to.Ptr("Enabled"),
				GatewayManagerEtag:       to.Ptr(""),
				Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ServiceKey:               to.Ptr("0b392c2e-1e9d-46d7-b5e0-9ce90ca6b60c"),
				ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
					BandwidthInMbps:     to.Ptr[int32](1000),
					PeeringLocation:     to.Ptr("Silicon Valley"),
					ServiceProviderName: to.Ptr("Equinix"),
				},
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
			SKU: &armnetwork.ExpressRouteCircuitSKU{
				Name:   to.Ptr("Standard_MeteredData"),
				Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
				Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuit) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuit)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_ListArpTable(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitARPTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ARP Table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	poller, err := client.BeginListArpTable(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		"devicePath",
		&armnetwork.ExpressRouteCircuitsClientBeginListArpTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitARPTableList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitARPTableList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitsArpTableListResult{
			Value: []*armnetwork.ExpressRouteCircuitArpTable{
				{
					Age:        to.Ptr[int32](0),
					Interface:  to.Ptr("Microsoft"),
					IPAddress:  to.Ptr("IPAddress"),
					MacAddress: to.Ptr("macAddress"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitsArpTableListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitsArpTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitARPTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_ListRoutesTable(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Route Tables"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	poller, err := client.BeginListRoutesTable(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		"devicePath",
		&armnetwork.ExpressRouteCircuitsClientBeginListRoutesTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitsRoutesTableListResult{
			Value: []*armnetwork.ExpressRouteCircuitRoutesTable{
				{
					Path:    to.Ptr(""),
					LocPrf:  to.Ptr(""),
					Network: to.Ptr(""),
					NextHop: to.Ptr(""),
					Weight:  to.Ptr[int32](0),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitsRoutesTableListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitsRoutesTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_ListRoutesTableSummary(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableSummaryList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Route Table Summary"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	poller, err := client.BeginListRoutesTableSummary(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		"devicePath",
		&armnetwork.ExpressRouteCircuitsClientBeginListRoutesTableSummaryOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableSummaryList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableSummaryList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitsRoutesTableSummaryListResult{
			Value: []*armnetwork.ExpressRouteCircuitRoutesTableSummary{
				{
					As:          to.Ptr[int32](9583),
					Neighbor:    to.Ptr("100.65.171.1"),
					StatePfxRcd: to.Ptr("Idle"),
					UpDown:      to.Ptr("never"),
					V:           to.Ptr[int32](4),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitsRoutesTableSummaryListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitsRoutesTableSummaryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitRouteTableSummaryList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_GetStats(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitStats.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ExpressRoute Circuit Traffic Stats"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	res, err := client.GetStats(ctx,
		"rg1",
		"circuitName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitStats.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitStats{
			PrimarybytesIn:    to.Ptr[int64](537408),
			PrimarybytesOut:   to.Ptr[int64](44032550),
			SecondarybytesIn:  to.Ptr[int64](0),
			SecondarybytesOut: to.Ptr[int64](39002500),
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitStats) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitStats)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitStats.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_GetPeeringStats(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringStats.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ExpressRoute Circuit Peering Traffic Stats"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	res, err := client.GetPeeringStats(ctx,
		"rg1",
		"circuitName",
		"peeringName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringStats.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitStats{
			PrimarybytesIn:    to.Ptr[int64](537408),
			PrimarybytesOut:   to.Ptr[int64](44032550),
			SecondarybytesIn:  to.Ptr[int64](0),
			SecondarybytesOut: to.Ptr[int64](39002500),
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitStats) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitStats)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitPeeringStats.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ExpressRouteCircuits in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCircuitListResult{
			Value: []*armnetwork.ExpressRouteCircuit{
				{
					Name:     to.Ptr("circuitName1"),
					Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName1"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"832b28c3-f5fd-4d2a-a2cb-6e4a2fe452b3\""),
					Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
						AllowClassicOperations: to.Ptr(false),
						Authorizations: []*armnetwork.ExpressRouteCircuitAuthorization{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/authorizations/MyAuthorization1"),
								Name: to.Ptr("MyAuthorization1"),
								Etag: to.Ptr("W/\"832b28c3-f5fd-4d2a-a2cb-6e4a2fe452b3\""),
								Properties: &armnetwork.AuthorizationPropertiesFormat{
									AuthorizationKey:       to.Ptr("authkey"),
									AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
									ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						CircuitProvisioningState: to.Ptr("Enabled"),
						GatewayManagerEtag:       to.Ptr("113"),
						Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ServiceKey:               to.Ptr("a1410692-ed3b-4ceb-b94a-b90b95d398d1"),
						ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
							BandwidthInMbps:     to.Ptr[int32](200),
							PeeringLocation:     to.Ptr("peeringLocation"),
							ServiceProviderName: to.Ptr("providerName"),
						},
						ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateProvisioned),
					},
					SKU: &armnetwork.ExpressRouteCircuitSKU{
						Name:   to.Ptr("Standard_MeteredData"),
						Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
						Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("circuitName2"),
					Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName2"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"e33c875f-48df-4a91-b7d3-eb95b5ddbb89\""),
					Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
						AllowClassicOperations: to.Ptr(false),
						Authorizations: []*armnetwork.ExpressRouteCircuitAuthorization{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName2/authorizations/MyAuthorization2"),
								Name: to.Ptr("MyAuthorization2"),
								Etag: to.Ptr("W/\"e33c875f-48df-4a91-b7d3-eb95b5ddbb89\""),
								Properties: &armnetwork.AuthorizationPropertiesFormat{
									AuthorizationKey:       to.Ptr("authkey"),
									AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
									ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						CircuitProvisioningState: to.Ptr("Enabled"),
						GatewayManagerEtag:       to.Ptr(""),
						Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ServiceKey:               to.Ptr("6569625a-9ba4-498b-9719-14d778eef609"),
						ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
							BandwidthInMbps:     to.Ptr[int32](200),
							PeeringLocation:     to.Ptr("peeringLocation"),
							ServiceProviderName: to.Ptr("providerName"),
						},
						ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
					},
					SKU: &armnetwork.ExpressRouteCircuitSKU{
						Name:   to.Ptr("Standard_MeteredData"),
						Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
						Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCircuitListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCircuitListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCircuits_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ExpressRouteCircuits in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCircuitsClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCircuitListResult{
			Value: []*armnetwork.ExpressRouteCircuit{
				{
					Name:     to.Ptr("circuitName1"),
					Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName1"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"832b28c3-f5fd-4d2a-a2cb-6e4a2fe452b3\""),
					Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
						AllowClassicOperations: to.Ptr(false),
						Authorizations: []*armnetwork.ExpressRouteCircuitAuthorization{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName/authorizations/MyAuthorization1"),
								Name: to.Ptr("MyAuthorization1"),
								Etag: to.Ptr("W/\"832b28c3-f5fd-4d2a-a2cb-6e4a2fe452b3\""),
								Properties: &armnetwork.AuthorizationPropertiesFormat{
									AuthorizationKey:       to.Ptr("authkey"),
									AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
									ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						CircuitProvisioningState: to.Ptr("Enabled"),
						GatewayManagerEtag:       to.Ptr("113"),
						Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ServiceKey:               to.Ptr("a1410692-ed3b-4ceb-b94a-b90b95d398d1"),
						ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
							BandwidthInMbps:     to.Ptr[int32](200),
							PeeringLocation:     to.Ptr("peeringLocation"),
							ServiceProviderName: to.Ptr("providerName"),
						},
						ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateProvisioned),
					},
					SKU: &armnetwork.ExpressRouteCircuitSKU{
						Name:   to.Ptr("Standard_MeteredData"),
						Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
						Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("circuitName2"),
					Type:     to.Ptr("Microsoft.Network/expressRouteCircuits"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName2"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"e33c875f-48df-4a91-b7d3-eb95b5ddbb89\""),
					Properties: &armnetwork.ExpressRouteCircuitPropertiesFormat{
						AllowClassicOperations: to.Ptr(false),
						Authorizations: []*armnetwork.ExpressRouteCircuitAuthorization{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName2/authorizations/MyAuthorization2"),
								Name: to.Ptr("MyAuthorization2"),
								Etag: to.Ptr("W/\"e33c875f-48df-4a91-b7d3-eb95b5ddbb89\""),
								Properties: &armnetwork.AuthorizationPropertiesFormat{
									AuthorizationKey:       to.Ptr("authkey"),
									AuthorizationUseStatus: to.Ptr(armnetwork.AuthorizationUseStatusAvailable),
									ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						CircuitProvisioningState: to.Ptr("Enabled"),
						GatewayManagerEtag:       to.Ptr(""),
						Peerings:                 []*armnetwork.ExpressRouteCircuitPeering{},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ServiceKey:               to.Ptr("6569625a-9ba4-498b-9719-14d778eef609"),
						ServiceProviderProperties: &armnetwork.ExpressRouteCircuitServiceProviderProperties{
							BandwidthInMbps:     to.Ptr[int32](200),
							PeeringLocation:     to.Ptr("peeringLocation"),
							ServiceProviderName: to.Ptr("providerName"),
						},
						ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
					},
					SKU: &armnetwork.ExpressRouteCircuitSKU{
						Name:   to.Ptr("Standard_MeteredData"),
						Family: to.Ptr(armnetwork.ExpressRouteCircuitSKUFamilyMeteredData),
						Tier:   to.Ptr(armnetwork.ExpressRouteCircuitSKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCircuitListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCircuitListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCircuitListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteServiceProviders_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteProviderList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ExpressRoute providers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteServiceProvidersClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteProviderList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteServiceProviderListResult{
			Value: []*armnetwork.ExpressRouteServiceProvider{
				{
					Name: to.Ptr("providerName"),
					Type: to.Ptr("Microsoft.Network/expressRouteServiceProviders"),
					ID:   to.Ptr("/subscriptions//resourceGroups//providers/Microsoft.Network/expressRouteServiceProviders/"),
					Properties: &armnetwork.ExpressRouteServiceProviderPropertiesFormat{
						BandwidthsOffered: []*armnetwork.ExpressRouteServiceProviderBandwidthsOffered{
							{
								OfferName:   to.Ptr("50Mbps"),
								ValueInMbps: to.Ptr[int32](50),
							},
							{
								OfferName:   to.Ptr("100Mbps"),
								ValueInMbps: to.Ptr[int32](100),
							},
							{
								OfferName:   to.Ptr("200Mbps"),
								ValueInMbps: to.Ptr[int32](200),
							},
							{
								OfferName:   to.Ptr("500Mbps"),
								ValueInMbps: to.Ptr[int32](500),
							},
							{
								OfferName:   to.Ptr("1Gbps"),
								ValueInMbps: to.Ptr[int32](1000),
							},
							{
								OfferName:   to.Ptr("2Gbps"),
								ValueInMbps: to.Ptr[int32](2000),
							},
							{
								OfferName:   to.Ptr("5Gbps"),
								ValueInMbps: to.Ptr[int32](5000),
							},
							{
								OfferName:   to.Ptr("10Gbps"),
								ValueInMbps: to.Ptr[int32](10000),
							}},
						PeeringLocations: []*string{
							to.Ptr("peeringLocation1"),
							to.Ptr("peeringLocation2")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteServiceProviderListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteServiceProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteProviderList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteCrossConnectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCrossConnectionListResult{
			Value: []*armnetwork.ExpressRouteCrossConnection{
				{
					Name:     to.Ptr("<circuitServiceKey>"),
					Type:     to.Ptr("Microsoft.Network/expressRouteCrossConnections"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/CrossConnectionSiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armnetwork.ExpressRouteCrossConnectionProperties{
						BandwidthInMbps: to.Ptr[int32](1000),
						ExpressRouteCircuit: &armnetwork.ExpressRouteCircuitReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/ertest/providers/Microsoft.Network/expressRouteCircuits/er1"),
						},
						PeeringLocation:                  to.Ptr("SiliconValley"),
						Peerings:                         []*armnetwork.ExpressRouteCrossConnectionPeering{},
						PrimaryAzurePort:                 to.Ptr("bvtazureixp01"),
						ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
						STag:                             to.Ptr[int32](2),
						SecondaryAzurePort:               to.Ptr("bvtazureixp01"),
						ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCrossConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCrossConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteCrossConnectionListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("CrossConnection-SiliconValley",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCrossConnectionListResult{
			Value: []*armnetwork.ExpressRouteCrossConnection{
				{
					Name:     to.Ptr("<circuitServiceKey>"),
					Type:     to.Ptr("Microsoft.Network/expressRouteCrossConnections"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/CrossConnectionSilicon-Valley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armnetwork.ExpressRouteCrossConnectionProperties{
						BandwidthInMbps: to.Ptr[int32](1000),
						ExpressRouteCircuit: &armnetwork.ExpressRouteCircuitReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/ertest/providers/Microsoft.Network/expressRouteCircuits/er1"),
						},
						PeeringLocation:                  to.Ptr("SiliconValley"),
						Peerings:                         []*armnetwork.ExpressRouteCrossConnectionPeering{},
						PrimaryAzurePort:                 to.Ptr("bvtazureixp01"),
						ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
						STag:                             to.Ptr[int32](2),
						SecondaryAzurePort:               to.Ptr("bvtazureixp01"),
						ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCrossConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCrossConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetExpressRouteCrossConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCrossConnection{
			Name:     to.Ptr("<circuitServiceKey>"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCrossConnections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/CrossConnection-SiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>"),
			Location: to.Ptr("brazilsouth"),
			Etag:     to.Ptr("W/\"c0e6477e-8150-4d4f-9bf6-bb10e6acb63a\""),
			Properties: &armnetwork.ExpressRouteCrossConnectionProperties{
				BandwidthInMbps: to.Ptr[int32](1000),
				ExpressRouteCircuit: &armnetwork.ExpressRouteCircuitReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/ertest/providers/Microsoft.Network/expressRouteCircuits/er1"),
				},
				PeeringLocation:                  to.Ptr("SiliconValley"),
				Peerings:                         []*armnetwork.ExpressRouteCrossConnectionPeering{},
				PrimaryAzurePort:                 to.Ptr("bvtazureixp01"),
				ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
				STag:                             to.Ptr[int32](2),
				SecondaryAzurePort:               to.Ptr("bvtazureixp01"),
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCrossConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCrossConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateExpressRouteCrossConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		armnetwork.ExpressRouteCrossConnection{
			Properties: &armnetwork.ExpressRouteCrossConnectionProperties{
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
		},
		&armnetwork.ExpressRouteCrossConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCrossConnection{
			Name:     to.Ptr("<circuitServiceKey>"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCrossConnections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/CrossConnectionSiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>"),
			Location: to.Ptr("brazilsouth"),
			Properties: &armnetwork.ExpressRouteCrossConnectionProperties{
				BandwidthInMbps: to.Ptr[int32](1000),
				ExpressRouteCircuit: &armnetwork.ExpressRouteCircuitReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/ertest/providers/Microsoft.Network/expressRouteCircuits/er1"),
				},
				PeeringLocation:                  to.Ptr("SiliconValley"),
				Peerings:                         []*armnetwork.ExpressRouteCrossConnectionPeering{},
				PrimaryAzurePort:                 to.Ptr("bvtazureixp01"),
				ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
				STag:                             to.Ptr[int32](2),
				SecondaryAzurePort:               to.Ptr("bvtazureixp01"),
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCrossConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCrossConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateExpressRouteCrossConnectionTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCrossConnection{
			Name:     to.Ptr("er1"),
			Type:     to.Ptr("Microsoft.Network/expressRouteCrossConnections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/CrossConnectionSiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>"),
			Location: to.Ptr("brazilsouth"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.ExpressRouteCrossConnectionProperties{
				BandwidthInMbps: to.Ptr[int32](1000),
				ExpressRouteCircuit: &armnetwork.ExpressRouteCircuitReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/ertest/providers/Microsoft.Network/expressRouteCircuits/er1"),
				},
				PeeringLocation:                  to.Ptr("SiliconValley"),
				Peerings:                         []*armnetwork.ExpressRouteCrossConnectionPeering{},
				PrimaryAzurePort:                 to.Ptr("bvtazureixp01"),
				ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
				STag:                             to.Ptr[int32](2),
				SecondaryAzurePort:               to.Ptr("bvtazureixp01"),
				ServiceProviderProvisioningState: to.Ptr(armnetwork.ServiceProviderProvisioningStateNotProvisioned),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCrossConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCrossConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_ListArpTable(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsArpTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetExpressRouteCrossConnectionsArpTable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	poller, err := client.BeginListArpTable(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		"primary",
		&armnetwork.ExpressRouteCrossConnectionsClientBeginListArpTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsArpTable.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsArpTable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitsArpTableListResult{
			Value: []*armnetwork.ExpressRouteCircuitArpTable{
				{
					Age:        to.Ptr[int32](0),
					Interface:  to.Ptr("Microsoft"),
					IPAddress:  to.Ptr("192.116.14.254"),
					MacAddress: to.Ptr("885a.9269.9110"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitsArpTableListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitsArpTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsArpTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_ListRoutesTableSummary(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTableSummary.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetExpressRouteCrossConnectionsRouteTableSummary"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	poller, err := client.BeginListRoutesTableSummary(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		"primary",
		&armnetwork.ExpressRouteCrossConnectionsClientBeginListRoutesTableSummaryOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTableSummary.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTableSummary.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCrossConnectionsRoutesTableSummaryListResult{
			Value: []*armnetwork.ExpressRouteCrossConnectionRoutesTableSummary{
				{
					Asn:                     to.Ptr[int32](65514),
					Neighbor:                to.Ptr("10.6.1.112"),
					StateOrPrefixesReceived: to.Ptr("Active"),
					UpDown:                  to.Ptr("1d14h"),
				},
				{
					Asn:                     to.Ptr[int32](65514),
					Neighbor:                to.Ptr("10.6.1.113"),
					StateOrPrefixesReceived: to.Ptr("1"),
					UpDown:                  to.Ptr("1d14h"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCrossConnectionsRoutesTableSummaryListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCrossConnectionsRoutesTableSummaryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTableSummary.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnections_ListRoutesTable(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetExpressRouteCrossConnectionsRouteTable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionsClient("subid", cred, &options)
	poller, err := client.BeginListRoutesTable(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		"primary",
		&armnetwork.ExpressRouteCrossConnectionsClientBeginListRoutesTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTable.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCircuitsRoutesTableListResult{
			Value: []*armnetwork.ExpressRouteCircuitRoutesTable{
				{
					Path:    to.Ptr("65514"),
					LocPrf:  to.Ptr(""),
					Network: to.Ptr("10.6.0.0/16"),
					NextHop: to.Ptr("10.6.1.12"),
					Weight:  to.Ptr[int32](0),
				},
				{
					Path:    to.Ptr("65514"),
					LocPrf:  to.Ptr(""),
					Network: to.Ptr("10.7.0.0/16"),
					NextHop: to.Ptr("10.7.1.13"),
					Weight:  to.Ptr[int32](0),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCircuitsRoutesTableListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCircuitsRoutesTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionsRouteTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnectionPeerings_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteCrossConnectionBgpPeeringList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionPeeringsClient("subid", cred, &options)
	pager := client.List("CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteCrossConnectionPeeringList{
			Value: []*armnetwork.ExpressRouteCrossConnectionPeering{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/CrossConnection-SiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>/peerings/AzurePrivatePeering"),
					Name: to.Ptr("AzurePrivatePeering"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.ExpressRouteCrossConnectionPeeringProperties{
						AzureASN:           to.Ptr[int32](12076),
						GatewayManagerEtag: to.Ptr(""),
						IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
							PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
							SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
							State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
						},
						LastModifiedBy:             to.Ptr("Customer"),
						PeerASN:                    to.Ptr[int64](200),
						PeeringType:                to.Ptr(armnetwork.ExpressRoutePeeringTypeAzurePrivatePeering),
						PrimaryAzurePort:           to.Ptr(""),
						PrimaryPeerAddressPrefix:   to.Ptr("192.168.16.252/30"),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecondaryAzurePort:         to.Ptr(""),
						SecondaryPeerAddressPrefix: to.Ptr("192.168.18.252/30"),
						State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
						VlanID:                     to.Ptr[int32](200),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteCrossConnectionPeeringList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteCrossConnectionPeeringList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnectionPeerings_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteExpressRouteCrossConnectionBgpPeering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionPeeringsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		&armnetwork.ExpressRouteCrossConnectionPeeringsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringDelete.json: %v", err)
	}
}

func TestExpressRouteCrossConnectionPeerings_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetExpressRouteCrossConnectionBgpPeering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionPeeringsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCrossConnectionPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/CrossConnection-Boydton1DC/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>/peerings/AzurePrivatePeering"),
			Name: to.Ptr("AzurePrivatePeering"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.ExpressRouteCrossConnectionPeeringProperties{
				AzureASN:           to.Ptr[int32](12076),
				GatewayManagerEtag: to.Ptr(""),
				IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
					PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
					SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
					State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
				},
				LastModifiedBy:             to.Ptr("Customer"),
				PeerASN:                    to.Ptr[int64](200),
				PeeringType:                to.Ptr(armnetwork.ExpressRoutePeeringTypeAzurePrivatePeering),
				PrimaryAzurePort:           to.Ptr(""),
				PrimaryPeerAddressPrefix:   to.Ptr("192.168.16.252/30"),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecondaryAzurePort:         to.Ptr(""),
				SecondaryPeerAddressPrefix: to.Ptr("192.168.18.252/30"),
				State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
				VlanID:                     to.Ptr[int32](200),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCrossConnectionPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCrossConnectionPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteCrossConnectionPeerings_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteCrossConnectionBgpPeeringCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteCrossConnectionPeeringsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"CrossConnection-SiliconValley",
		"<circuitServiceKey>",
		"AzurePrivatePeering",
		armnetwork.ExpressRouteCrossConnectionPeering{
			Properties: &armnetwork.ExpressRouteCrossConnectionPeeringProperties{
				IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
					PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
					SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
				},
				PeerASN:                    to.Ptr[int64](200),
				PrimaryPeerAddressPrefix:   to.Ptr("192.168.16.252/30"),
				SecondaryPeerAddressPrefix: to.Ptr("192.168.18.252/30"),
				VlanID:                     to.Ptr[int32](200),
			},
		},
		&armnetwork.ExpressRouteCrossConnectionPeeringsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteCrossConnectionPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/CrossConnection-Boydton1DC/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>/peerings/AzurePrivatePeering"),
			Name: to.Ptr("AzurePrivatePeering"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.ExpressRouteCrossConnectionPeeringProperties{
				AzureASN:           to.Ptr[int32](12076),
				GatewayManagerEtag: to.Ptr(""),
				IPv6PeeringConfig: &armnetwork.IPv6ExpressRouteCircuitPeeringConfig{
					PrimaryPeerAddressPrefix:   to.Ptr("3FFE:FFFF:0:CD30::/126"),
					SecondaryPeerAddressPrefix: to.Ptr("3FFE:FFFF:0:CD30::4/126"),
					State:                      to.Ptr(armnetwork.ExpressRouteCircuitPeeringStateEnabled),
				},
				LastModifiedBy:             to.Ptr("Customer"),
				PeerASN:                    to.Ptr[int64](200),
				PeeringType:                to.Ptr(armnetwork.ExpressRoutePeeringTypeAzurePrivatePeering),
				PrimaryAzurePort:           to.Ptr(""),
				PrimaryPeerAddressPrefix:   to.Ptr("192.168.16.252/30"),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecondaryAzurePort:         to.Ptr(""),
				SecondaryPeerAddressPrefix: to.Ptr("192.168.18.252/30"),
				State:                      to.Ptr(armnetwork.ExpressRoutePeeringStateEnabled),
				VlanID:                     to.Ptr[int32](200),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteCrossConnectionPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteCrossConnectionPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteCrossConnectionBgpPeeringCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePortsLocations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortsLocationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortsLocationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsLocationsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortsLocationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRoutePortsLocationListResult{
			Value: []*armnetwork.ExpressRoutePortsLocation{
				{
					Name:     to.Ptr("locationName"),
					Type:     to.Ptr("Microsoft.Network/expressRoutePortsLocations"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.Network/expressRoutePortsLocations/locationName"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ExpressRoutePortsLocationPropertiesFormat{
						Address:             to.Ptr("123 Main Street, City, State, Zip"),
						AvailableBandwidths: []*armnetwork.ExpressRoutePortsLocationBandwidths{},
						Contact:             to.Ptr("email@address.com"),
						ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRoutePortsLocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRoutePortsLocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortsLocationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePortsLocations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortsLocationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortsLocationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsLocationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"locationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortsLocationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRoutePortsLocation{
			Name:     to.Ptr("locationName"),
			Type:     to.Ptr("Microsoft.Network/expressRoutePortsLocations"),
			ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.Network/expressRoutePortsLocations/locationName"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortsLocationPropertiesFormat{
				Address: to.Ptr("123 Main Street, City, State, Zip"),
				AvailableBandwidths: []*armnetwork.ExpressRoutePortsLocationBandwidths{
					{
						OfferName:   to.Ptr("100 Gbps"),
						ValueInGbps: to.Ptr[int32](100),
					}},
				Contact:           to.Ptr("email@address.com"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRoutePortsLocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRoutePortsLocation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortsLocationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePorts_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"portName",
		&armnetwork.ExpressRoutePortsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortDelete.json: %v", err)
	}
}

func TestExpressRoutePorts_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"portName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRoutePort{
			Name:     to.Ptr("portName"),
			Type:     to.Ptr("Microsoft.Network/expressRoutePorts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
				AllocationDate:  to.Ptr("Friday, July 1, 2018"),
				BandwidthInGbps: to.Ptr[int32](100),
				Circuits:        []*armnetwork.SubResource{},
				Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
				EtherType:       to.Ptr("0x8100"),
				Links: []*armnetwork.ExpressRouteLink{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
						Name: to.Ptr("link1"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId1"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId1"),
							RouterName:        to.Ptr("router1"),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
						Name: to.Ptr("link2"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId2"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId2"),
							RouterName:        to.Ptr("router2"),
						},
					}},
				Mtu:                        to.Ptr("1500"),
				PeeringLocation:            to.Ptr("peeringLocationName"),
				ProvisionedBandwidthInGbps: to.Ptr[float32](0),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRoutePort) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRoutePort)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePorts_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"portName",
		armnetwork.ExpressRoutePort{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
				BandwidthInGbps: to.Ptr[int32](100),
				Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
				PeeringLocation: to.Ptr("peeringLocationName"),
			},
		},
		&armnetwork.ExpressRoutePortsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRoutePort{
			Name:     to.Ptr("portName"),
			Type:     to.Ptr("Microsoft.Network/expressRoutePorts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
				AllocationDate:  to.Ptr("Friday, July 1, 2018"),
				BandwidthInGbps: to.Ptr[int32](100),
				Circuits:        []*armnetwork.SubResource{},
				Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
				EtherType:       to.Ptr("0x8100"),
				Links: []*armnetwork.ExpressRouteLink{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
						Name: to.Ptr("link1"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId1"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId1"),
							RouterName:        to.Ptr("router1"),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
						Name: to.Ptr("link2"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId2"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId2"),
							RouterName:        to.Ptr("router2"),
						},
					}},
				Mtu:                        to.Ptr("1500"),
				PeeringLocation:            to.Ptr("peeringLocationName"),
				ProvisionedBandwidthInGbps: to.Ptr[float32](0),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRoutePort) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRoutePort)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortUpdateLink"},
	})
	client = armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"portName",
		armnetwork.ExpressRoutePort{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
				BandwidthInGbps: to.Ptr[int32](100),
				Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
				Links: []*armnetwork.ExpressRouteLink{
					{
						Name: to.Ptr("link1"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState: to.Ptr(armnetwork.ExpressRouteLinkAdminStateEnabled),
						},
					}},
				PeeringLocation: to.Ptr("peeringLocationName"),
			},
		},
		&armnetwork.ExpressRoutePortsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateLink.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateLink.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRoutePort{
			Name:     to.Ptr("portName"),
			Type:     to.Ptr("Microsoft.Network/expressRoutePorts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
				AllocationDate:  to.Ptr("Friday, July 1, 2018"),
				BandwidthInGbps: to.Ptr[int32](100),
				Circuits:        []*armnetwork.SubResource{},
				Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
				EtherType:       to.Ptr("0x8100"),
				Links: []*armnetwork.ExpressRouteLink{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
						Name: to.Ptr("link1"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateEnabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId1"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId1"),
							RouterName:        to.Ptr("router1"),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
						Name: to.Ptr("link2"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId2"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId2"),
							RouterName:        to.Ptr("router2"),
						},
					}},
				Mtu:                        to.Ptr("1500"),
				PeeringLocation:            to.Ptr("peeringLocationName"),
				ProvisionedBandwidthInGbps: to.Ptr[float32](0),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRoutePort) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRoutePort)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePorts_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortUpdateTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"portName",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRoutePort{
			Name:     to.Ptr("portName"),
			Type:     to.Ptr("Microsoft.Network/expressRoutePorts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
				AllocationDate:  to.Ptr("Friday, July 1, 2018"),
				BandwidthInGbps: to.Ptr[int32](100),
				Circuits:        []*armnetwork.SubResource{},
				Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
				EtherType:       to.Ptr("0x8100"),
				Links: []*armnetwork.ExpressRouteLink{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
						Name: to.Ptr("link1"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId1"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId1"),
							RouterName:        to.Ptr("router1"),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
						Name: to.Ptr("link2"),
						Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
							AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
							ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
							InterfaceName:     to.Ptr("Ethernet 0/0"),
							PatchPanelID:      to.Ptr("patchPanelId2"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RackID:            to.Ptr("rackId2"),
							RouterName:        to.Ptr("router2"),
						},
					}},
				Mtu:                        to.Ptr("1500"),
				PeeringLocation:            to.Ptr("peeringLocationName"),
				ProvisionedBandwidthInGbps: to.Ptr[float32](0),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRoutePort) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRoutePort)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePorts_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRoutePortListResult{
			Value: []*armnetwork.ExpressRoutePort{
				{
					Name:     to.Ptr("portName"),
					Type:     to.Ptr("Microsoft.Network/expressRoutePorts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
						AllocationDate:  to.Ptr("Friday, July 1, 2018"),
						BandwidthInGbps: to.Ptr[int32](100),
						Circuits:        []*armnetwork.SubResource{},
						Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
						EtherType:       to.Ptr("0x8100"),
						Links: []*armnetwork.ExpressRouteLink{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
								Name: to.Ptr("link1"),
								Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
									AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
									ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
									InterfaceName:     to.Ptr("Ethernet 0/0"),
									PatchPanelID:      to.Ptr("patchPanelId1"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RackID:            to.Ptr("rackId1"),
									RouterName:        to.Ptr("router1"),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
								Name: to.Ptr("link2"),
								Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
									AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
									ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
									InterfaceName:     to.Ptr("Ethernet 0/0"),
									PatchPanelID:      to.Ptr("patchPanelId2"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RackID:            to.Ptr("rackId2"),
									RouterName:        to.Ptr("router2"),
								},
							}},
						Mtu:                        to.Ptr("1500"),
						PeeringLocation:            to.Ptr("peeringLocationName"),
						ProvisionedBandwidthInGbps: to.Ptr[float32](0),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRoutePortListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRoutePortListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePorts_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRoutePortList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRoutePortListResult{
			Value: []*armnetwork.ExpressRoutePort{
				{
					Name:     to.Ptr("portName"),
					Type:     to.Ptr("Microsoft.Network/expressRoutePorts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
						AllocationDate:  to.Ptr("Friday, July 1, 2018"),
						BandwidthInGbps: to.Ptr[int32](100),
						Circuits:        []*armnetwork.SubResource{},
						Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
						EtherType:       to.Ptr("0x8100"),
						Links: []*armnetwork.ExpressRouteLink{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
								Name: to.Ptr("link1"),
								Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
									AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
									ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
									InterfaceName:     to.Ptr("Ethernet 0/0"),
									PatchPanelID:      to.Ptr("patchPanelId1"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RackID:            to.Ptr("rackId1"),
									RouterName:        to.Ptr("router1"),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
								Name: to.Ptr("link2"),
								Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
									AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
									ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
									InterfaceName:     to.Ptr("Ethernet 0/0"),
									PatchPanelID:      to.Ptr("patchPanelId2"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RackID:            to.Ptr("rackId2"),
									RouterName:        to.Ptr("router2"),
								},
							}},
						Mtu:                        to.Ptr("1500"),
						PeeringLocation:            to.Ptr("peeringLocationName"),
						ProvisionedBandwidthInGbps: to.Ptr[float32](0),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRoutePortListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRoutePortListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRoutePortList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRoutePorts_GenerateLOA(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateExpressRoutePortsLOA.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateExpressRoutePortLOA"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRoutePortsClient("subid", cred, &options)
	res, err := client.GenerateLOA(ctx,
		"rg1",
		"portName",
		armnetwork.GenerateExpressRoutePortsLOARequest{
			CustomerName: to.Ptr("customerName"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateExpressRoutePortsLOA.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.GenerateExpressRoutePortsLOAResult{
			EncodedContent: to.Ptr("TWFuIGlzIGRpc3"),
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateExpressRoutePortsLOAResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateExpressRoutePortsLOAResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GenerateExpressRoutePortsLOA.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteLinks_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteLinkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteLinkGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteLinksClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"portName",
		"linkName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteLinkGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteLink{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/linkName"),
			Name: to.Ptr("linkName"),
			Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
				AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
				ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
				InterfaceName:     to.Ptr("Ethernet 0/0"),
				PatchPanelID:      to.Ptr("patchPanelId1"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RackID:            to.Ptr("rackId1"),
				RouterName:        to.Ptr("router1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteLink)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteLinkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteLinks_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteLinkList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteLinkGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteLinksClient("subid", cred, &options)
	pager := client.List("rg1",
		"portName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteLinkList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ExpressRouteLinkListResult{
			Value: []*armnetwork.ExpressRouteLink{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1"),
					Name: to.Ptr("link1"),
					Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
						AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
						ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
						InterfaceName:     to.Ptr("Ethernet 0/0"),
						PatchPanelID:      to.Ptr("patchPanelId1"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RackID:            to.Ptr("rackId1"),
						RouterName:        to.Ptr("router1"),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2"),
					Name: to.Ptr("link2"),
					Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
						AdminState:        to.Ptr(armnetwork.ExpressRouteLinkAdminStateDisabled),
						ConnectorType:     to.Ptr(armnetwork.ExpressRouteLinkConnectorTypeLC),
						InterfaceName:     to.Ptr("Ethernet 0/0"),
						PatchPanelID:      to.Ptr("patchPanelId2"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RackID:            to.Ptr("rackId2"),
						RouterName:        to.Ptr("router2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteLinkList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicies_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Firewall Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPoliciesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"firewallPolicy",
		&armnetwork.FirewallPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyDelete.json: %v", err)
	}
}

func TestFirewallPolicies_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FirewallPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"firewallPolicy",
		&armnetwork.FirewallPoliciesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicy{
			Name:     to.Ptr("firewallPolicy"),
			Type:     to.Ptr("Microsoft.Network/firewallPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.FirewallPolicyPropertiesFormat{
				DNSSettings: &armnetwork.DNSSettings{
					EnableProxy:                 to.Ptr(true),
					RequireProxyForNetworkRules: to.Ptr(false),
					Servers: []*string{
						to.Ptr("30.3.4.5")},
				},
				ExplicitProxySettings: &armnetwork.ExplicitProxySettings{
					EnableExplicitProxy: to.Ptr(true),
					HTTPPort:            to.Ptr[int32](8087),
					HTTPSPort:           to.Ptr[int32](8087),
					PacFile:             to.Ptr("https://tinawstorage.file.core.windows.net/?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacuptfx&se=2021-06-04T07:01:12Z&st=2021-06-03T23:01:12Z&sip=68.65.171.11&spr=https&sig=Plsa0RRVpGbY0IETZZOT6znOHcSro71LLTTbzquYPgs%3D"),
					PacFilePort:         to.Ptr[int32](8087),
				},
				Firewalls: []*armnetwork.SubResource{},
				Insights: &armnetwork.FirewallPolicyInsights{
					IsEnabled: to.Ptr(true),
					LogAnalyticsResources: &armnetwork.FirewallPolicyLogAnalyticsResources{
						DefaultWorkspaceID: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"),
						},
						Workspaces: []*armnetwork.FirewallPolicyLogAnalyticsWorkspace{
							{
								Region: to.Ptr("westus"),
								WorkspaceID: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"),
								},
							},
							{
								Region: to.Ptr("eastus"),
								WorkspaceID: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"),
								},
							}},
					},
					RetentionDays: to.Ptr[int32](100),
				},
				IntrusionDetection: &armnetwork.FirewallPolicyIntrusionDetection{
					Configuration: &armnetwork.FirewallPolicyIntrusionDetectionConfiguration{
						BypassTrafficSettings: []*armnetwork.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications{
							{
								Name:        to.Ptr("bypassRule1"),
								Description: to.Ptr("Rule 1"),
								DestinationAddresses: []*string{
									to.Ptr("5.6.7.8")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								SourceAddresses: []*string{
									to.Ptr("1.2.3.4")},
								Protocol: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionProtocolTCP),
							}},
						SignatureOverrides: []*armnetwork.FirewallPolicyIntrusionDetectionSignatureSpecification{
							{
								ID:   to.Ptr("2525004"),
								Mode: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionStateTypeDeny),
							}},
					},
					Mode: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionStateTypeAlert),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollectionGroups: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
					}},
				SKU: &armnetwork.FirewallPolicySKU{
					Tier: to.Ptr(armnetwork.FirewallPolicySKUTierPremium),
				},
				Snat: &armnetwork.FirewallPolicySNAT{
					PrivateRanges: []*string{
						to.Ptr("IANAPrivateRanges")},
				},
				SQL: &armnetwork.FirewallPolicySQL{
					AllowSQLRedirect: to.Ptr(true),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
				ThreatIntelWhitelist: &armnetwork.FirewallPolicyThreatIntelWhitelist{
					Fqdns: []*string{
						to.Ptr("*.microsoft.com")},
					IPAddresses: []*string{
						to.Ptr("20.3.4.5")},
				},
				TransportSecurity: &armnetwork.FirewallPolicyTransportSecurity{
					CertificateAuthority: &armnetwork.FirewallPolicyCertificateAuthority{
						Name:             to.Ptr("clientcert"),
						KeyVaultSecretID: to.Ptr("https://kv/secret"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create FirewallPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPoliciesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		armnetwork.FirewallPolicy{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.FirewallPolicyPropertiesFormat{
				DNSSettings: &armnetwork.DNSSettings{
					EnableProxy:                 to.Ptr(true),
					RequireProxyForNetworkRules: to.Ptr(false),
					Servers: []*string{
						to.Ptr("30.3.4.5")},
				},
				ExplicitProxySettings: &armnetwork.ExplicitProxySettings{
					EnableExplicitProxy: to.Ptr(true),
					HTTPPort:            to.Ptr[int32](8087),
					HTTPSPort:           to.Ptr[int32](8087),
					PacFile:             to.Ptr("https://tinawstorage.file.core.windows.net/?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacuptfx&se=2021-06-04T07:01:12Z&st=2021-06-03T23:01:12Z&sip=68.65.171.11&spr=https&sig=Plsa0RRVpGbY0IETZZOT6znOHcSro71LLTTbzquYPgs%3D"),
					PacFilePort:         to.Ptr[int32](8087),
				},
				Insights: &armnetwork.FirewallPolicyInsights{
					IsEnabled: to.Ptr(true),
					LogAnalyticsResources: &armnetwork.FirewallPolicyLogAnalyticsResources{
						DefaultWorkspaceID: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"),
						},
						Workspaces: []*armnetwork.FirewallPolicyLogAnalyticsWorkspace{
							{
								Region: to.Ptr("westus"),
								WorkspaceID: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"),
								},
							},
							{
								Region: to.Ptr("eastus"),
								WorkspaceID: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"),
								},
							}},
					},
					RetentionDays: to.Ptr[int32](100),
				},
				IntrusionDetection: &armnetwork.FirewallPolicyIntrusionDetection{
					Configuration: &armnetwork.FirewallPolicyIntrusionDetectionConfiguration{
						BypassTrafficSettings: []*armnetwork.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications{
							{
								Name:        to.Ptr("bypassRule1"),
								Description: to.Ptr("Rule 1"),
								DestinationAddresses: []*string{
									to.Ptr("5.6.7.8")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								SourceAddresses: []*string{
									to.Ptr("1.2.3.4")},
								Protocol: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionProtocolTCP),
							}},
						SignatureOverrides: []*armnetwork.FirewallPolicyIntrusionDetectionSignatureSpecification{
							{
								ID:   to.Ptr("2525004"),
								Mode: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionStateTypeDeny),
							}},
					},
					Mode: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionStateTypeAlert),
				},
				SKU: &armnetwork.FirewallPolicySKU{
					Tier: to.Ptr(armnetwork.FirewallPolicySKUTierPremium),
				},
				Snat: &armnetwork.FirewallPolicySNAT{
					PrivateRanges: []*string{
						to.Ptr("IANAPrivateRanges")},
				},
				SQL: &armnetwork.FirewallPolicySQL{
					AllowSQLRedirect: to.Ptr(true),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
				ThreatIntelWhitelist: &armnetwork.FirewallPolicyThreatIntelWhitelist{
					Fqdns: []*string{
						to.Ptr("*.microsoft.com")},
					IPAddresses: []*string{
						to.Ptr("20.3.4.5")},
				},
				TransportSecurity: &armnetwork.FirewallPolicyTransportSecurity{
					CertificateAuthority: &armnetwork.FirewallPolicyCertificateAuthority{
						Name:             to.Ptr("clientcert"),
						KeyVaultSecretID: to.Ptr("https://kv/secret"),
					},
				},
			},
		},
		&armnetwork.FirewallPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicy{
			Name:     to.Ptr("firewallPolicy"),
			Type:     to.Ptr("Microsoft.Network/firewallPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.FirewallPolicyPropertiesFormat{
				DNSSettings: &armnetwork.DNSSettings{
					EnableProxy:                 to.Ptr(true),
					RequireProxyForNetworkRules: to.Ptr(false),
					Servers: []*string{
						to.Ptr("30.3.4.5")},
				},
				ExplicitProxySettings: &armnetwork.ExplicitProxySettings{
					EnableExplicitProxy: to.Ptr(true),
					HTTPPort:            to.Ptr[int32](8087),
					HTTPSPort:           to.Ptr[int32](8087),
					PacFile:             to.Ptr("https://tinawstorage.file.core.windows.net/?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacuptfx&se=2021-06-04T07:01:12Z&st=2021-06-03T23:01:12Z&sip=68.65.171.11&spr=https&sig=Plsa0RRVpGbY0IETZZOT6znOHcSro71LLTTbzquYPgs%3D"),
					PacFilePort:         to.Ptr[int32](8087),
				},
				Firewalls: []*armnetwork.SubResource{},
				Insights: &armnetwork.FirewallPolicyInsights{
					IsEnabled: to.Ptr(true),
					LogAnalyticsResources: &armnetwork.FirewallPolicyLogAnalyticsResources{
						DefaultWorkspaceID: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"),
						},
						Workspaces: []*armnetwork.FirewallPolicyLogAnalyticsWorkspace{
							{
								Region: to.Ptr("westus"),
								WorkspaceID: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"),
								},
							},
							{
								Region: to.Ptr("eastus"),
								WorkspaceID: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"),
								},
							}},
					},
					RetentionDays: to.Ptr[int32](100),
				},
				IntrusionDetection: &armnetwork.FirewallPolicyIntrusionDetection{
					Configuration: &armnetwork.FirewallPolicyIntrusionDetectionConfiguration{
						BypassTrafficSettings: []*armnetwork.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications{
							{
								Name:        to.Ptr("bypassRule1"),
								Description: to.Ptr("Rule 1"),
								DestinationAddresses: []*string{
									to.Ptr("5.6.7.8")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								SourceAddresses: []*string{
									to.Ptr("1.2.3.4")},
								Protocol: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionProtocolTCP),
							}},
						SignatureOverrides: []*armnetwork.FirewallPolicyIntrusionDetectionSignatureSpecification{
							{
								ID:   to.Ptr("2525004"),
								Mode: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionStateTypeDeny),
							}},
					},
					Mode: to.Ptr(armnetwork.FirewallPolicyIntrusionDetectionStateTypeAlert),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollectionGroups: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
					},
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup2"),
					}},
				SKU: &armnetwork.FirewallPolicySKU{
					Tier: to.Ptr(armnetwork.FirewallPolicySKUTierPremium),
				},
				Snat: &armnetwork.FirewallPolicySNAT{
					PrivateRanges: []*string{
						to.Ptr("IANAPrivateRanges")},
				},
				SQL: &armnetwork.FirewallPolicySQL{
					AllowSQLRedirect: to.Ptr(true),
				},
				ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
				ThreatIntelWhitelist: &armnetwork.FirewallPolicyThreatIntelWhitelist{
					Fqdns: []*string{
						to.Ptr("*.microsoft.com")},
					IPAddresses: []*string{
						to.Ptr("20.3.4.5")},
				},
				TransportSecurity: &armnetwork.FirewallPolicyTransportSecurity{
					CertificateAuthority: &armnetwork.FirewallPolicyCertificateAuthority{
						Name:             to.Ptr("clientcert"),
						KeyVaultSecretID: to.Ptr("https://kv/secret"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicies_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Firewall Policies for a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPoliciesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.FirewallPolicyListResult{
			Value: []*armnetwork.FirewallPolicy{
				{
					Name:     to.Ptr("firewallPolicy"),
					Type:     to.Ptr("Microsoft.Network/firewallPolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.FirewallPolicyPropertiesFormat{
						DNSSettings: &armnetwork.DNSSettings{
							EnableProxy:                 to.Ptr(true),
							RequireProxyForNetworkRules: to.Ptr(false),
							Servers: []*string{
								to.Ptr("30.3.4.5")},
						},
						Firewalls:         []*armnetwork.SubResource{},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RuleCollectionGroups: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
							}},
						SKU: &armnetwork.FirewallPolicySKU{
							Tier: to.Ptr(armnetwork.FirewallPolicySKUTierStandard),
						},
						Snat: &armnetwork.FirewallPolicySNAT{
							PrivateRanges: []*string{
								to.Ptr("IANAPrivateRanges")},
						},
						SQL: &armnetwork.FirewallPolicySQL{
							AllowSQLRedirect: to.Ptr(true),
						},
						ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicies_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Firewall Policies for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPoliciesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.FirewallPolicyListResult{
			Value: []*armnetwork.FirewallPolicy{
				{
					Name:     to.Ptr("firewallPolicy"),
					Type:     to.Ptr("Microsoft.Network/firewallPolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.FirewallPolicyPropertiesFormat{
						DNSSettings: &armnetwork.DNSSettings{
							EnableProxy:                 to.Ptr(true),
							RequireProxyForNetworkRules: to.Ptr(false),
							Servers: []*string{
								to.Ptr("30.3.4.5")},
						},
						Firewalls:         []*armnetwork.SubResource{},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RuleCollectionGroups: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
							}},
						SKU: &armnetwork.FirewallPolicySKU{
							Tier: to.Ptr(armnetwork.FirewallPolicySKUTierStandard),
						},
						Snat: &armnetwork.FirewallPolicySNAT{
							PrivateRanges: []*string{
								to.Ptr("IANAPrivateRanges")},
						},
						SQL: &armnetwork.FirewallPolicySQL{
							AllowSQLRedirect: to.Ptr(true),
						},
						ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyRuleCollectionGroups_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete FirewallPolicyRuleCollectionGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		&armnetwork.FirewallPolicyRuleCollectionGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupDelete.json: %v", err)
	}
}

func TestFirewallPolicyRuleCollectionGroups_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FirewallPolicyNatRuleCollectionGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](100),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyNatRuleCollection{
						Name:               to.Ptr("NatRC"),
						Priority:           to.Ptr[int32](100),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection),
						Action: &armnetwork.FirewallPolicyNatRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyNatRuleCollectionActionTypeDNAT),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.NatRule{
								Name:     to.Ptr("NatRule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNatRule),
								DestinationAddresses: []*string{
									to.Ptr("152.23.32.23")},
								DestinationPorts: []*string{
									to.Ptr("8080")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP),
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolUDP)},
								SourceAddresses: []*string{
									to.Ptr("2.2.2.2")},
								SourceIPGroups: []*string{},
								TranslatedFqdn: to.Ptr("internalhttpserver"),
								TranslatedPort: to.Ptr("8080"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FirewallPolicyRuleCollectionGroup"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](110),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						Priority:           to.Ptr[int32](200),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.Rule{
								Name:     to.Ptr("network-rule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
								DestinationAddresses: []*string{
									to.Ptr("*")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
								SourceAddresses: []*string{
									to.Ptr("10.1.25.0/24")},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FirewallPolicyRuleCollectionGroup With IpGroups"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleGroups/ruleGroup1"),
			Name: to.Ptr("ruleGroup1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](110),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						Priority:           to.Ptr[int32](200),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.Rule{
								Name:     to.Ptr("network-rule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
								DestinationIPGroups: []*string{
									to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
								SourceIPGroups: []*string{
									to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1")},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FirewallPolicyRuleCollectionGroup With Web Categories"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](110),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						Priority:           to.Ptr[int32](200),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.ApplicationRule{
								Name:        to.Ptr("rule1"),
								Description: to.Ptr("Deny inbound rule"),
								RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeApplicationRule),
								Protocols: []*armnetwork.FirewallPolicyRuleApplicationProtocol{
									{
										Port:         to.Ptr[int32](443),
										ProtocolType: to.Ptr(armnetwork.FirewallPolicyRuleApplicationProtocolTypeHTTPS),
									}},
								SourceAddresses: []*string{
									to.Ptr("216.58.216.164"),
									to.Ptr("10.0.0.0/24")},
								WebCategories: []*string{
									to.Ptr("Hacking")},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyRuleCollectionGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create FirewallPolicyNatRuleCollectionGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		armnetwork.FirewallPolicyRuleCollectionGroup{
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Ptr[int32](100),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyNatRuleCollection{
						Name:               to.Ptr("Example-Nat-Rule-Collection"),
						Priority:           to.Ptr[int32](100),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection),
						Action: &armnetwork.FirewallPolicyNatRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyNatRuleCollectionActionTypeDNAT),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.NatRule{
								Name:     to.Ptr("nat-rule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNatRule),
								DestinationAddresses: []*string{
									to.Ptr("152.23.32.23")},
								DestinationPorts: []*string{
									to.Ptr("8080")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP),
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolUDP)},
								SourceAddresses: []*string{
									to.Ptr("2.2.2.2")},
								SourceIPGroups: []*string{},
								TranslatedFqdn: to.Ptr("internalhttp.server.net"),
								TranslatedPort: to.Ptr("8080"),
							}},
					}},
			},
		},
		&armnetwork.FirewallPolicyRuleCollectionGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](100),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyNatRuleCollection{
						Name:               to.Ptr("Example-Nat-Rule-Collection"),
						Priority:           to.Ptr[int32](100),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection),
						Action: &armnetwork.FirewallPolicyNatRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyNatRuleCollectionActionTypeDNAT),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.NatRule{
								Name:     to.Ptr("nat-rule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNatRule),
								DestinationAddresses: []*string{
									to.Ptr("152.23.32.23")},
								DestinationPorts: []*string{
									to.Ptr("8080")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP),
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolUDP)},
								SourceAddresses: []*string{
									to.Ptr("2.2.2.2")},
								SourceIPGroups: []*string{},
								TranslatedFqdn: to.Ptr("internalhttp.server.net"),
								TranslatedPort: to.Ptr("8080"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyNatRuleCollectionGroupPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create FirewallPolicyRuleCollectionGroup"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		armnetwork.FirewallPolicyRuleCollectionGroup{
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Ptr[int32](100),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						Priority:           to.Ptr[int32](100),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.Rule{
								Name:     to.Ptr("network-rule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
								DestinationAddresses: []*string{
									to.Ptr("*")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
								SourceAddresses: []*string{
									to.Ptr("10.1.25.0/24")},
							}},
					}},
			},
		},
		&armnetwork.FirewallPolicyRuleCollectionGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupPut.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](100),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						Priority:           to.Ptr[int32](100),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.Rule{
								Name:     to.Ptr("network-rule1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
								DestinationAddresses: []*string{
									to.Ptr("*")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
								SourceAddresses: []*string{
									to.Ptr("10.1.25.0/24")},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create FirewallPolicyRuleCollectionGroup With IpGroups"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		armnetwork.FirewallPolicyRuleCollectionGroup{
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Ptr[int32](110),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.Rule{
								Name:     to.Ptr("network-1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
								DestinationIPGroups: []*string{
									to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
								SourceIPGroups: []*string{
									to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1")},
							}},
					}},
			},
		},
		&armnetwork.FirewallPolicyRuleCollectionGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsPut.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](110),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.Rule{
								Name:     to.Ptr("network-1"),
								RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
								DestinationIPGroups: []*string{
									to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2")},
								DestinationPorts: []*string{
									to.Ptr("*")},
								IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
									to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
								SourceIPGroups: []*string{
									to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1")},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create FirewallPolicyRuleCollectionGroup With Web Categories"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"firewallPolicy",
		"ruleCollectionGroup1",
		armnetwork.FirewallPolicyRuleCollectionGroup{
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority: to.Ptr[int32](110),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.ApplicationRule{
								Name:        to.Ptr("rule1"),
								Description: to.Ptr("Deny inbound rule"),
								RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeApplicationRule),
								Protocols: []*armnetwork.FirewallPolicyRuleApplicationProtocol{
									{
										Port:         to.Ptr[int32](443),
										ProtocolType: to.Ptr(armnetwork.FirewallPolicyRuleApplicationProtocolTypeHTTPS),
									}},
								SourceAddresses: []*string{
									to.Ptr("216.58.216.164"),
									to.Ptr("10.0.0.0/24")},
								WebCategories: []*string{
									to.Ptr("Hacking")},
							}},
					}},
			},
		},
		&armnetwork.FirewallPolicyRuleCollectionGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesPut.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FirewallPolicyRuleCollectionGroup{
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
			Name: to.Ptr("ruleCollectionGroup1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
				Priority:          to.Ptr[int32](110),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
					&armnetwork.FirewallPolicyFilterRuleCollection{
						Name:               to.Ptr("Example-Filter-Rule-Collection"),
						RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
						Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
							Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
						},
						Rules: []armnetwork.FirewallPolicyRuleClassification{
							&armnetwork.ApplicationRule{
								Name:        to.Ptr("rule1"),
								Description: to.Ptr("Deny inbound rule"),
								RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeApplicationRule),
								Protocols: []*armnetwork.FirewallPolicyRuleApplicationProtocol{
									{
										Port:         to.Ptr[int32](443),
										ProtocolType: to.Ptr(armnetwork.FirewallPolicyRuleApplicationProtocolTypeHTTPS),
									}},
								SourceAddresses: []*string{
									to.Ptr("216.58.216.164"),
									to.Ptr("10.0.0.0/24")},
								WebCategories: []*string{
									to.Ptr("Hacking")},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallPolicyRuleCollectionGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallPolicyRuleCollectionGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyRuleCollectionGroups_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all FirewallPolicyRuleCollectionGroup With Web Categories"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	pager := client.List("rg1",
		"firewallPolicy",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.FirewallPolicyRuleCollectionGroupListResult{
			Value: []*armnetwork.FirewallPolicyRuleCollectionGroup{
				{
					ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
					Name: to.Ptr("ruleCollectionGroup1"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
						Priority:          to.Ptr[int32](110),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
							&armnetwork.FirewallPolicyFilterRuleCollection{
								Name:               to.Ptr("Example-Filter-Rule-Collection"),
								Priority:           to.Ptr[int32](120),
								RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
								Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
									Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
								},
								Rules: []armnetwork.FirewallPolicyRuleClassification{
									&armnetwork.ApplicationRule{
										Name:        to.Ptr("rule1"),
										Description: to.Ptr("Deny inbound rule"),
										RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeApplicationRule),
										Protocols: []*armnetwork.FirewallPolicyRuleApplicationProtocol{
											{
												Port:         to.Ptr[int32](443),
												ProtocolType: to.Ptr(armnetwork.FirewallPolicyRuleApplicationProtocolTypeHTTPS),
											}},
										SourceAddresses: []*string{
											to.Ptr("216.58.216.164"),
											to.Ptr("10.0.0.0/24")},
										WebCategories: []*string{
											to.Ptr("Hacking")},
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallPolicyRuleCollectionGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallPolicyRuleCollectionGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all FirewallPolicyRuleCollectionGroups for a given FirewallPolicy"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	pager = client.List("rg1",
		"firewallPolicy",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.FirewallPolicyRuleCollectionGroupListResult{
			Value: []*armnetwork.FirewallPolicyRuleCollectionGroup{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
					Name: to.Ptr("ruleCollectionGroup1"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
						Priority:          to.Ptr[int32](110),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
							&armnetwork.FirewallPolicyFilterRuleCollection{
								Name:               to.Ptr("Example-Filter-Rule-Collection"),
								Priority:           to.Ptr[int32](120),
								RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
								Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
									Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
								},
								Rules: []armnetwork.FirewallPolicyRuleClassification{
									&armnetwork.Rule{
										Name:        to.Ptr("network-rule-1"),
										Description: to.Ptr("Network rule"),
										RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
										DestinationAddresses: []*string{
											to.Ptr("*")},
										DestinationPorts: []*string{
											to.Ptr("*")},
										IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
											to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
										SourceAddresses: []*string{
											to.Ptr("10.1.25.0/24")},
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallPolicyRuleCollectionGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallPolicyRuleCollectionGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all FirewallPolicyRuleCollectionGroups with IpGroups for a given FirewallPolicy"},
	})
	client = armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, &options)
	pager = client.List("rg1",
		"firewallPolicy",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.FirewallPolicyRuleCollectionGroupListResult{
			Value: []*armnetwork.FirewallPolicyRuleCollectionGroup{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"),
					Name: to.Ptr("ruleCollectionGroup1"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
						Priority:          to.Ptr[int32](110),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
							&armnetwork.FirewallPolicyFilterRuleCollection{
								Name:               to.Ptr("Example-Filter-Rule-Collection"),
								Priority:           to.Ptr[int32](120),
								RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
								Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
									Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
								},
								Rules: []armnetwork.FirewallPolicyRuleClassification{
									&armnetwork.Rule{
										Name:        to.Ptr("network-rule-1"),
										Description: to.Ptr("Network rule"),
										RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
										DestinationIPGroups: []*string{
											to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2")},
										DestinationPorts: []*string{
											to.Ptr("*")},
										IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
											to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
										SourceIPGroups: []*string{
											to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1")},
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallPolicyRuleCollectionGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallPolicyRuleCollectionGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyIdpsSignatures_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyQuerySignatureOverrides.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"query signature overrides"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyIdpsSignaturesClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"firewallPolicy",
		armnetwork.IDPSQueryObject{
			Filters: []*armnetwork.FilterItems{
				{
					Field: to.Ptr("Mode"),
					Values: []*string{
						to.Ptr("Deny")},
				}},
			OrderBy: &armnetwork.OrderBy{
				Field: to.Ptr("severity"),
				Order: to.Ptr(armnetwork.OrderByOrderAscending),
			},
			ResultsPerPage: to.Ptr[int32](20),
			Search:         to.Ptr(""),
			Skip:           to.Ptr[int32](0),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyQuerySignatureOverrides.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.QueryResults{
			MatchingRecordsCount: to.Ptr[int64](2),
			Signatures: []*armnetwork.SingleQueryResult{
				{
					Description: to.Ptr("P2P Phatbot Control Connection"),
					DestinationPorts: []*string{
						to.Ptr("any")},
					Direction:                 to.Ptr(armnetwork.SingleQueryResultDirection(2)),
					Group:                     to.Ptr("A Network Trojan was detected"),
					InheritedFromParentPolicy: to.Ptr(false),
					LastUpdated:               to.Ptr("2010-07-30T00:00:00"),
					Mode:                      to.Ptr(armnetwork.SingleQueryResultMode(2)),
					Severity:                  to.Ptr(armnetwork.SingleQueryResultSeverity(1)),
					SignatureID:               to.Ptr[int32](2000015),
					SourcePorts: []*string{
						to.Ptr("any")},
					Protocol: to.Ptr("tcp"),
				},
				{
					Description: to.Ptr("WEB_SERVER SQL sp_delete_alert attempt"),
					DestinationPorts: []*string{
						to.Ptr("any")},
					Direction:                 to.Ptr(armnetwork.SingleQueryResultDirection(1)),
					Group:                     to.Ptr("Attempted User Privilege Gain"),
					InheritedFromParentPolicy: to.Ptr(false),
					LastUpdated:               to.Ptr("2019-09-27T00:00:00"),
					Mode:                      to.Ptr(armnetwork.SingleQueryResultMode(2)),
					Severity:                  to.Ptr(armnetwork.SingleQueryResultSeverity(1)),
					SignatureID:               to.Ptr[int32](2000106),
					SourcePorts: []*string{
						to.Ptr("any")},
					Protocol: to.Ptr("http"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResults)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyQuerySignatureOverrides.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyIdpsSignaturesOverrides_Patch(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patch signature overrides"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyIdpsSignaturesOverridesClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err := client.Patch(ctx,
		"rg1",
		"firewallPolicy",
		armnetwork.SignaturesOverrides{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/firewallPolicies/signatureOverrides"),
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/signatureOverrides/default"),
			Properties: &armnetwork.SignaturesOverridesProperties{
				Signatures: map[string]*string{
					"2000105": to.Ptr("Off"),
					"2000106": to.Ptr("Deny"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SignaturesOverrides{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/firewallPolicies/signatureOverrides"),
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/signatureOverrides/default"),
			Properties: &armnetwork.SignaturesOverridesProperties{
				Signatures: map[string]*string{
					"2000105": to.Ptr("Off"),
					"2000106": to.Ptr("Deny"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SignaturesOverrides) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SignaturesOverrides)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyIdpsSignaturesOverrides_Put(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"put signature overrides"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyIdpsSignaturesOverridesClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err := client.Put(ctx,
		"rg1",
		"firewallPolicy",
		armnetwork.SignaturesOverrides{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/firewallPolicies/signatureOverrides"),
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/signatureOverrides/default"),
			Properties: &armnetwork.SignaturesOverridesProperties{
				Signatures: map[string]*string{
					"2000105": to.Ptr("Off"),
					"2000106": to.Ptr("Deny"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SignaturesOverrides{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/firewallPolicies/signatureOverrides"),
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/signatureOverrides/default"),
			Properties: &armnetwork.SignaturesOverridesProperties{
				Signatures: map[string]*string{
					"2000105": to.Ptr("Off"),
					"2000106": to.Ptr("Deny"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SignaturesOverrides) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SignaturesOverrides)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyIdpsSignaturesOverrides_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"get signature overrides"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyIdpsSignaturesOverridesClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"firewallPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SignaturesOverrides{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/firewallPolicies/signatureOverrides"),
			ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/signatureOverrides/default"),
			Properties: &armnetwork.SignaturesOverridesProperties{
				Signatures: map[string]*string{
					"2000105": to.Ptr("Off"),
					"2000106": to.Ptr("Deny"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SignaturesOverrides) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SignaturesOverrides)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyIdpsSignaturesOverrides_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"get signature overrides"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyIdpsSignaturesOverridesClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"firewallPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SignaturesOverridesList{
			Value: []*armnetwork.SignaturesOverrides{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Network/firewallPolicies/signatureOverrides"),
					ID:   to.Ptr("/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/signatureOverrides/default"),
					Properties: &armnetwork.SignaturesOverridesProperties{
						Signatures: map[string]*string{
							"2000105": to.Ptr("Off"),
							"2000106": to.Ptr("Deny"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SignaturesOverridesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SignaturesOverridesList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicySignatureOverridesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallPolicyIdpsSignaturesFilterValues_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyQuerySignatureOverridesFilterValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"query signature overrides"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFirewallPolicyIdpsSignaturesFilterValuesClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"firewallPolicy",
		armnetwork.SignatureOverridesFilterValuesQuery{
			FilterName: to.Ptr("severity"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyQuerySignatureOverridesFilterValues.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SignatureOverridesFilterValuesResponse{
			FilterValues: []*string{
				to.Ptr("low"),
				to.Ptr("medium"),
				to.Ptr("high")},
		}
		if !reflect.DeepEqual(exampleRes, res.SignatureOverridesFilterValuesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SignatureOverridesFilterValuesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/FirewallPolicyQuerySignatureOverridesFilterValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPAllocations_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete IpAllocation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPAllocationsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ipallocation",
		&armnetwork.IPAllocationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationDelete.json: %v", err)
	}
}

func TestIPAllocations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get IpAllocation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPAllocationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-ipallocation",
		&armnetwork.IPAllocationsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPAllocation{
			Name:     to.Ptr("test-ipallocation"),
			Type:     to.Ptr("Microsoft.Network/IpAllocations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.IPAllocationPropertiesFormat{
				Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
				AllocationTags: map[string]*string{
					"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
				},
				IpamAllocationID: to.Ptr("916d3b28-663f-448b-9abc-1bea9d5fed8f"),
				Prefix:           to.Ptr("3.2.5.0/24"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPAllocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPAllocation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPAllocations_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create IpAllocation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPAllocationsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ipallocation",
		armnetwork.IPAllocation{
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.IPAllocationPropertiesFormat{
				Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
				AllocationTags: map[string]*string{
					"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
				},
				Prefix: to.Ptr("3.2.5.0/24"),
			},
		},
		&armnetwork.IPAllocationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPAllocation{
			Name:     to.Ptr("test-ipallocation"),
			Type:     to.Ptr("Microsoft.Network/IpAllocations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.IPAllocationPropertiesFormat{
				Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
				AllocationTags: map[string]*string{
					"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
				},
				IpamAllocationID: to.Ptr("916d3b28-663f-448b-9abc-1bea9d5fed8f"),
				Prefix:           to.Ptr("3.2.5.0/24"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPAllocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPAllocation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPAllocations_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update virtual network tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPAllocationsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ipallocation",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPAllocation{
			Name:     to.Ptr("test-ipallocation"),
			Type:     to.Ptr("Microsoft.Network/IpAllocations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation"),
			Location: to.Ptr("centraluseuap"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.IPAllocationPropertiesFormat{
				Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
				AllocationTags: map[string]*string{
					"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
				},
				IpamAllocationID: to.Ptr("916d3b28-663f-448b-9abc-1bea9d5fed8f"),
				Prefix:           to.Ptr("3.2.5.0/24"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPAllocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPAllocation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPAllocations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all IpAllocations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPAllocationsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.IPAllocationListResult{
			Value: []*armnetwork.IPAllocation{
				{
					Name:     to.Ptr("test-ipallocation1"),
					Type:     to.Ptr("Microsoft.Network/IpAllocations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation1"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.IPAllocationPropertiesFormat{
						Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
						AllocationTags: map[string]*string{
							"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
						},
						IpamAllocationID: to.Ptr("916d3b28-663f-448b-9abc-1bea9d5fed8f"),
						Prefix:           to.Ptr("3.2.5.0/24"),
					},
				},
				{
					Name:     to.Ptr("test-ipallocation2"),
					Type:     to.Ptr("Microsoft.Network/IpAllocations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation2"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.IPAllocationPropertiesFormat{
						Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
						AllocationTags: map[string]*string{
							"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet2"),
						},
						IpamAllocationID: to.Ptr("57dc7256-2ff7-43f2-b9c8-85a70b5c6408"),
						Prefix:           to.Ptr("3.2.6.0/24"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IPAllocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IPAllocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPAllocations_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IpAllocations in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPAllocationsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.IPAllocationListResult{
			Value: []*armnetwork.IPAllocation{
				{
					Name:     to.Ptr("test-ipallocation1"),
					Type:     to.Ptr("Microsoft.Network/IpAllocations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation1"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.IPAllocationPropertiesFormat{
						Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
						AllocationTags: map[string]*string{
							"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"),
						},
						IpamAllocationID: to.Ptr("916d3b28-663f-448b-9abc-1bea9d5fed8f"),
						Prefix:           to.Ptr("3.2.5.0/24"),
					},
				},
				{
					Name:     to.Ptr("test-ipallocation2"),
					Type:     to.Ptr("Microsoft.Network/IpAllocations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation2"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.IPAllocationPropertiesFormat{
						Type: to.Ptr(armnetwork.IPAllocationTypeHypernet),
						AllocationTags: map[string]*string{
							"VNetID": to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet2"),
						},
						IpamAllocationID: to.Ptr("57dc7256-2ff7-43f2-b9c8-85a70b5c6408"),
						Prefix:           to.Ptr("3.2.6.0/24"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IPAllocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IPAllocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpAllocationListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPGroups_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get_IpGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPGroupsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"ipGroups1",
		&armnetwork.IPGroupsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPGroup{
			Name:     to.Ptr("ipGroups1"),
			Type:     to.Ptr("Microsoft.Network/ipGroups"),
			ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1"),
			Location: to.Ptr("westcentralus"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.IPGroupPropertiesFormat{
				FirewallPolicies: []*armnetwork.SubResource{},
				Firewalls: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
					}},
				IPAddresses: []*string{
					to.Ptr("13.64.39.16/32"),
					to.Ptr("40.74.146.80/31"),
					to.Ptr("40.74.147.32/28")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate_IpGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPGroupsClient("subId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"ipGroups1",
		armnetwork.IPGroup{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.IPGroupPropertiesFormat{
				IPAddresses: []*string{
					to.Ptr("13.64.39.16/32"),
					to.Ptr("40.74.146.80/31"),
					to.Ptr("40.74.147.32/28")},
			},
		},
		&armnetwork.IPGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPGroup{
			Name:     to.Ptr("ipGroups1"),
			Type:     to.Ptr("Microsoft.Network/ipGroups"),
			ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1"),
			Location: to.Ptr("westcentralus"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.IPGroupPropertiesFormat{
				FirewallPolicies: []*armnetwork.SubResource{},
				Firewalls: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
					}},
				IPAddresses: []*string{
					to.Ptr("13.64.39.16/32"),
					to.Ptr("40.74.146.80/31"),
					to.Ptr("40.74.147.32/28")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPGroups_UpdateGroups(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update_IpGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPGroupsClient("subId", cred, &options)
	res, err := client.UpdateGroups(ctx,
		"myResourceGroup",
		"ipGroups1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPGroup{
			Name:     to.Ptr("ipGroups1"),
			Type:     to.Ptr("Microsoft.Network/ipGroups"),
			ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1"),
			Location: to.Ptr("westcentralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.IPGroupPropertiesFormat{
				FirewallPolicies: []*armnetwork.SubResource{},
				Firewalls: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
					}},
				IPAddresses: []*string{
					to.Ptr("13.64.39.16/32"),
					to.Ptr("40.74.146.80/31"),
					to.Ptr("40.74.147.32/28")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPGroups_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete_IpGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPGroupsClient("subId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"ipGroups1",
		&armnetwork.IPGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsDelete.json: %v", err)
	}
}

func TestIPGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListByResourceGroup_IpGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPGroupsClient("subId", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.IPGroupListResult{
			Value: []*armnetwork.IPGroup{
				{
					Name:     to.Ptr("ipGroups1"),
					Type:     to.Ptr("Microsoft.Network/ipGroups"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups"),
					Location: to.Ptr("westcentralus"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.IPGroupPropertiesFormat{
						FirewallPolicies: []*armnetwork.SubResource{},
						Firewalls: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
							}},
						IPAddresses: []*string{
							to.Ptr("13.64.39.16/32"),
							to.Ptr("40.74.146.80/31"),
							to.Ptr("40.74.147.32/28")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("ipGroups2"),
					Type:     to.Ptr("Microsoft.Network/ipGroups"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups"),
					Location: to.Ptr("centralus"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.IPGroupPropertiesFormat{
						FirewallPolicies: []*armnetwork.SubResource{},
						Firewalls: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
							}},
						IPAddresses: []*string{
							to.Ptr("14.64.39.16/32"),
							to.Ptr("41.74.146.80/31"),
							to.Ptr("42.74.147.32/28")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IPGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IPGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPGroups_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List_IpGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewIPGroupsClient("subId", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.IPGroupListResult{
			Value: []*armnetwork.IPGroup{
				{
					Name:     to.Ptr("iptag1"),
					Type:     to.Ptr("Microsoft.Network/ipGroups"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup1/ipGroups"),
					Location: to.Ptr("westcentralus"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.IPGroupPropertiesFormat{
						FirewallPolicies: []*armnetwork.SubResource{},
						Firewalls: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
							}},
						IPAddresses: []*string{
							to.Ptr("13.64.39.16/32"),
							to.Ptr("40.74.146.80/31"),
							to.Ptr("40.74.147.32/28")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("iptag2"),
					Type:     to.Ptr("Microsoft.Network/ipGroups"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup2/ipGroups"),
					Location: to.Ptr("centralus"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.IPGroupPropertiesFormat{
						FirewallPolicies: []*armnetwork.SubResource{},
						Firewalls: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"),
							}},
						IPAddresses: []*string{
							to.Ptr("14.64.39.16/32"),
							to.Ptr("41.74.146.80/31"),
							to.Ptr("42.74.147.32/28")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IPGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IPGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/IpGroupsListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancers_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete load balancer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"lb",
		&armnetwork.LoadBalancersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerDelete.json: %v", err)
	}
}

func TestLoadBalancers_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get load balancer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"lb",
		&armnetwork.LoadBalancersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							EnableTCPReset:      to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGetInboundNatRulePortMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get load balancer with inbound NAT rule port mapping"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"lb",
		&armnetwork.LoadBalancersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGetInboundNatRulePortMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
								{
									Name: to.Ptr("8bec96ef-0a6a-45b8-9860-4ffde7bf3572"),
									Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
										InboundNatRulesPortMapping: []*armnetwork.NatRulePortMapping{
											{
												BackendPort:        to.Ptr[int32](3389),
												FrontendPort:       to.Ptr[int32](3389),
												InboundNatRuleName: to.Ptr("natRule"),
											}},
										IPAddress: to.Ptr("10.0.0.4"),
										Subnet: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
										},
									},
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:           to.Ptr[int32](0),
							FrontendPortRangeEnd:   to.Ptr[int32](4000),
							FrontendPortRangeStart: to.Ptr[int32](3389),
							IdleTimeoutInMinutes:   to.Ptr[int32](15),
							ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:               to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							EnableTCPReset:      to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGetInboundNatRulePortMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancers_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						Name: to.Ptr("in-nat-rule"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Ptr[int32](80),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							EnableTCPReset:      to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with Frontend IP in Zone 1"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
						Zones: []*string{
							to.Ptr("1")},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						Name: to.Ptr("in-nat-rule"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Ptr[int32](80),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithZones.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithZones.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
						Zones: []*string{
							to.Ptr("1")},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerConsumer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with Gateway Load Balancer Consumer configured"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							GatewayLoadBalancer: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
							},
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						Name: to.Ptr("in-nat-rule"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Ptr[int32](80),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerConsumer.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerConsumer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							GatewayLoadBalancer: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
							},
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerConsumer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithOneBackendPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with Gateway Load Balancer Provider configured with one Backend Pool"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name: to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							TunnelInterfaces: []*armnetwork.GatewayLoadBalancerTunnelInterface{
								{
									Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
									Identifier: to.Ptr[int32](900),
									Port:       to.Ptr[int32](15000),
									Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
								},
								{
									Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
									Identifier: to.Ptr[int32](901),
									Port:       to.Ptr[int32](15001),
									Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
								}},
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPools: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
								}},
							BackendPort:      to.Ptr[int32](0),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](0),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolAll),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUName("Premium")),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithOneBackendPool.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithOneBackendPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							TunnelInterfaces: []*armnetwork.GatewayLoadBalancerTunnelInterface{
								{
									Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
									Identifier: to.Ptr[int32](900),
									Port:       to.Ptr[int32](15000),
									Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
								},
								{
									Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
									Identifier: to.Ptr[int32](901),
									Port:       to.Ptr[int32](15001),
									Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
								}},
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPools: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
								}},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithOneBackendPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithTwoBackendPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with Gateway Load Balancer Provider configured with two Backend Pool"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.Ptr("be-lb1"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					},
					{
						Name:       to.Ptr("be-lb2"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{},
							BackendAddressPools: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"),
								}},
							BackendPort:      to.Ptr[int32](0),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](0),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolAll),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUName("Premium")),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithTwoBackendPool.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithTwoBackendPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"),
						Name: to.Ptr("be-lb1"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							TunnelInterfaces: []*armnetwork.GatewayLoadBalancerTunnelInterface{
								{
									Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
									Identifier: to.Ptr[int32](900),
									Port:       to.Ptr[int32](15000),
									Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
								}},
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"),
						Name: to.Ptr("be-lb2"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							TunnelInterfaces: []*armnetwork.GatewayLoadBalancerTunnelInterface{
								{
									Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
									Identifier: to.Ptr[int32](901),
									Port:       to.Ptr[int32](15001),
									Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
								}},
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPools: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"),
								}},
							BackendPort:         to.Ptr[int32](0),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](0),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithTwoBackendPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGlobalTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with Global Tier and one regional load balancer in its backend pool"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name: to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
								{
									Name: to.Ptr("regional-lb1-address"),
									Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
										LoadBalancerFrontendIPConfiguration: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"),
										},
									},
								}},
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Ptr[int32](80),
							EnableFloatingIP: to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
				Tier: to.Ptr(armnetwork.LoadBalancerSKUTierGlobal),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGlobalTier.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGlobalTier.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
								{
									Name: to.Ptr("regional-lb1-address"),
									Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
										LoadBalancerFrontendIPConfiguration: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"),
										},
									},
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
				Tier: to.Ptr(armnetwork.LoadBalancerSKUTierGlobal),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateGlobalTier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateStandardSku.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with Standard SKU"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						Name: to.Ptr("in-nat-rule"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:      to.Ptr[int32](80),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateStandardSku.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateStandardSku.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateStandardSku.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithInboundNatPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with inbound nat pool"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
						Name: to.Ptr("test"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"),
							},
						},
						Zones: []*string{},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"),
						Name: to.Ptr("test"),
						Properties: &armnetwork.InboundNatPoolPropertiesFormat{
							BackendPort:      to.Ptr[int32](8888),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
							},
							FrontendPortRangeEnd:   to.Ptr[int32](8085),
							FrontendPortRangeStart: to.Ptr[int32](8080),
							IdleTimeoutInMinutes:   to.Ptr[int32](10),
							Protocol:               to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				InboundNatRules:    []*armnetwork.InboundNatRule{},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{},
				OutboundRules:      []*armnetwork.OutboundRule{},
				Probes:             []*armnetwork.Probe{},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithInboundNatPool.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithInboundNatPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
						Name: to.Ptr("test"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatPools: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"),
						Name: to.Ptr("test"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatPoolPropertiesFormat{
							BackendPort:      to.Ptr[int32](8888),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
							},
							FrontendPortRangeEnd:   to.Ptr[int32](8085),
							FrontendPortRangeStart: to.Ptr[int32](8080),
							IdleTimeoutInMinutes:   to.Ptr[int32](10),
							ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:               to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				InboundNatRules:    []*armnetwork.InboundNatRule{},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{},
				OutboundRules:      []*armnetwork.OutboundRule{},
				Probes:             []*armnetwork.Probe{},
				ProvisioningState:  to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:       to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithInboundNatPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithOutboundRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create load balancer with outbound rules"},
	})
	client = armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"lb",
		armnetwork.LoadBalancer{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						Name: to.Ptr("in-nat-rule"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(true),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{
					{
						Name: to.Ptr("rule1"),
						Properties: &armnetwork.OutboundRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							FrontendIPConfigurations: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
								}},
							Protocol: to.Ptr(armnetwork.LoadBalancerOutboundRuleProtocolAll),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		},
		&armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithOutboundRules.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithOutboundRules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("eastus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							OutboundRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							OutboundRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"),
								}},
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.PublicIPAddress{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							EnableTCPReset:   to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(true),
							EnableFloatingIP:    to.Ptr(true),
							EnableTCPReset:      to.Ptr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"),
						Name: to.Ptr("rule1"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/outboundRules"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.OutboundRulePropertiesFormat{
							AllocatedOutboundPorts: to.Ptr[int32](1024),
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							EnableTCPReset: to.Ptr(false),
							FrontendIPConfigurations: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
								}},
							IdleTimeoutInMinutes: to.Ptr[int32](4),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.LoadBalancerOutboundRuleProtocolAll),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.LoadBalancerSKU{
				Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreateWithOutboundRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancers_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update load balancer tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"lb",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancer{
			Name:     to.Ptr("lb"),
			Type:     to.Ptr("Microsoft.Network/loadBalancers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
						Name: to.Ptr("be-lb"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							InboundNatRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
								}},
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"),
						Name: to.Ptr("in-nat-rule"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Ptr[int32](3389),
							EnableFloatingIP: to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](3389),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
						Name: to.Ptr("rulelb"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
							},
							BackendPort:         to.Ptr[int32](80),
							DisableOutboundSnat: to.Ptr(false),
							EnableFloatingIP:    to.Ptr(true),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
							},
							FrontendPort:         to.Ptr[int32](80),
							IdleTimeoutInMinutes: to.Ptr[int32](15),
							LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
							Probe: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
						},
					}},
				OutboundRules: []*armnetwork.OutboundRule{},
				Probes: []*armnetwork.Probe{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
						Name: to.Ptr("probe-lb"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Ptr[int32](15),
							LoadBalancingRules: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								}},
							NumberOfProbes:    to.Ptr[int32](2),
							Port:              to.Ptr[int32](80),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RequestPath:       to.Ptr("healthcheck.aspx"),
							Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancer)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancers_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all load balancers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerListResult{
			Value: []*armnetwork.LoadBalancer{
				{
					Name:     to.Ptr("lb"),
					Type:     to.Ptr("Microsoft.Network/loadBalancers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.LoadBalancerPropertiesFormat{
						BackendAddressPools: []*armnetwork.BackendAddressPool{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/belb"),
								Name: to.Ptr("belb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/felb"),
								Name: to.Ptr("felb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
									InboundNatRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"),
										}},
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
										}},
									PrivateIPAddress:          to.Ptr("10.0.1.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
									},
								},
							}},
						InboundNatPools: []*armnetwork.InboundNatPool{},
						InboundNatRules: []*armnetwork.InboundNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"),
								Name: to.Ptr("inrlb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.InboundNatRulePropertiesFormat{
									BackendPort:      to.Ptr[int32](3389),
									EnableFloatingIP: to.Ptr(true),
									EnableTCPReset:   to.Ptr(true),
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/felb"),
									},
									FrontendPort:         to.Ptr[int32](3389),
									IdleTimeoutInMinutes: to.Ptr[int32](15),
									ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
								},
							}},
						LoadBalancingRules: []*armnetwork.LoadBalancingRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								Name: to.Ptr("rulelb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
									BackendAddressPool: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/belb"),
									},
									BackendPort:      to.Ptr[int32](80),
									EnableFloatingIP: to.Ptr(true),
									EnableTCPReset:   to.Ptr(true),
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/felb"),
									},
									FrontendPort:         to.Ptr[int32](80),
									IdleTimeoutInMinutes: to.Ptr[int32](15),
									LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
									Probe: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/prlb"),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
								},
							}},
						Probes: []*armnetwork.Probe{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/prlb"),
								Name: to.Ptr("prlb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.ProbePropertiesFormat{
									IntervalInSeconds: to.Ptr[int32](15),
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
										}},
									NumberOfProbes:    to.Ptr[int32](2),
									Port:              to.Ptr[int32](80),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RequestPath:       to.Ptr("healthcheck.aspx"),
									Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.LoadBalancerSKU{
						Name: to.Ptr(armnetwork.LoadBalancerSKUNameBasic),
					},
				},
				{
					Name:     to.Ptr("lb3"),
					Type:     to.Ptr("Microsoft.Network/loadBalancers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/loadBalancers/lb3"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.LoadBalancerPropertiesFormat{
						BackendAddressPools:      []*armnetwork.BackendAddressPool{},
						FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{},
						InboundNatPools:          []*armnetwork.InboundNatPool{},
						InboundNatRules:          []*armnetwork.InboundNatRule{},
						LoadBalancingRules:       []*armnetwork.LoadBalancingRule{},
						Probes:                   []*armnetwork.Probe{},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:             to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.LoadBalancerSKU{
						Name: to.Ptr(armnetwork.LoadBalancerSKUNameBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancers_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List load balancers in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerListResult{
			Value: []*armnetwork.LoadBalancer{
				{
					Name:     to.Ptr("lb"),
					Type:     to.Ptr("Microsoft.Network/loadBalancers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.LoadBalancerPropertiesFormat{
						BackendAddressPools: []*armnetwork.BackendAddressPool{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/belb"),
								Name: to.Ptr("belb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/felb"),
								Name: to.Ptr("felb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
									InboundNatRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"),
										}},
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
										}},
									PrivateIPAddress:          to.Ptr("10.0.1.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
									},
								},
							}},
						InboundNatPools: []*armnetwork.InboundNatPool{},
						InboundNatRules: []*armnetwork.InboundNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"),
								Name: to.Ptr("inrlb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/inboundNatRules"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.InboundNatRulePropertiesFormat{
									BackendPort:      to.Ptr[int32](3389),
									EnableFloatingIP: to.Ptr(true),
									EnableTCPReset:   to.Ptr(true),
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/felb"),
									},
									FrontendPort:         to.Ptr[int32](3389),
									IdleTimeoutInMinutes: to.Ptr[int32](15),
									ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
								},
							}},
						LoadBalancingRules: []*armnetwork.LoadBalancingRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
								Name: to.Ptr("rulelb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
									BackendAddressPool: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/belb"),
									},
									BackendPort:      to.Ptr[int32](80),
									EnableFloatingIP: to.Ptr(true),
									EnableTCPReset:   to.Ptr(true),
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/felb"),
									},
									FrontendPort:         to.Ptr[int32](80),
									IdleTimeoutInMinutes: to.Ptr[int32](15),
									LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
									Probe: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/prlb"),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
								},
							}},
						Probes: []*armnetwork.Probe{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/prlb"),
								Name: to.Ptr("prlb"),
								Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
								Properties: &armnetwork.ProbePropertiesFormat{
									IntervalInSeconds: to.Ptr[int32](15),
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
										}},
									NumberOfProbes:    to.Ptr[int32](2),
									Port:              to.Ptr[int32](80),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RequestPath:       to.Ptr("healthcheck.aspx"),
									Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.LoadBalancerSKU{
						Name: to.Ptr(armnetwork.LoadBalancerSKUNameBasic),
					},
				},
				{
					Name:     to.Ptr("lb2"),
					Type:     to.Ptr("Microsoft.Network/loadBalancers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb2"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.LoadBalancerPropertiesFormat{
						BackendAddressPools:      []*armnetwork.BackendAddressPool{},
						FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{},
						InboundNatPools:          []*armnetwork.InboundNatPool{},
						InboundNatRules:          []*armnetwork.InboundNatRule{},
						LoadBalancingRules:       []*armnetwork.LoadBalancingRule{},
						Probes:                   []*armnetwork.Probe{},
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:             to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.LoadBalancerSKU{
						Name: to.Ptr(armnetwork.LoadBalancerSKUNameBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancers_ListInboundNatRulePortMappings(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/QueryInboundNatRulePortMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Query inbound NAT rule port mapping"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancersClient("subid", cred, &options)
	poller, err := client.BeginListInboundNatRulePortMappings(ctx,
		"rg1",
		"lb1",
		"bp1",
		armnetwork.QueryInboundNatRulePortMappingRequest{
			IPAddress: to.Ptr("10.0.0.4"),
		},
		&armnetwork.LoadBalancersClientBeginListInboundNatRulePortMappingsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/QueryInboundNatRulePortMapping.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/QueryInboundNatRulePortMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BackendAddressInboundNatRulePortMappings{
			InboundNatRulePortMappings: []*armnetwork.InboundNatRulePortMapping{
				{
					BackendPort:        to.Ptr[int32](3389),
					FrontendPort:       to.Ptr[int32](3389),
					InboundNatRuleName: to.Ptr("natRule"),
					Protocol:           to.Ptr(armnetwork.TransportProtocolTCP),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendAddressInboundNatRulePortMappings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendAddressInboundNatRulePortMappings)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/QueryInboundNatRulePortMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerBackendAddressPools_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolListWithBackendAddressesPoolType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Load balancer with BackendAddressPool containing BackendAddresses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerBackendAddressPoolsClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolListWithBackendAddressesPoolType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerBackendAddressPoolListResult{
			Value: []*armnetwork.BackendAddressPool{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/backend"),
					Name: to.Ptr("backend"),
					Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
						LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
							{
								Name: to.Ptr("address1"),
								Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
									IPAddress: to.Ptr("10.0.0.4"),
									VirtualNetwork: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
									},
								},
							},
							{
								Name: to.Ptr("address2"),
								Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
									IPAddress: to.Ptr("10.0.0.5"),
									VirtualNetwork: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
									},
								},
							}},
						LoadBalancingRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerBackendAddressPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerBackendAddressPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolListWithBackendAddressesPoolType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerBackendAddressPoolList"},
	})
	client = armnetwork.NewLoadBalancerBackendAddressPoolsClient("subid", cred, &options)
	pager = client.List("testrg",
		"lb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerBackendAddressPoolListResult{
			Value: []*armnetwork.BackendAddressPool{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/backend"),
					Name: to.Ptr("backend"),
					Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
						BackendIPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic/ipConfigurations/default-ip-config"),
							}},
						LoadBalancingRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerBackendAddressPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerBackendAddressPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerBackendAddressPools_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancer with BackendAddressPool with BackendAddresses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerBackendAddressPoolsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"lb",
		"backend",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BackendAddressPool{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/backend"),
			Name: to.Ptr("backend"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
				LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
					{
						Name: to.Ptr("address1"),
						Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.Ptr("10.0.0.4"),
							VirtualNetwork: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					},
					{
						Name: to.Ptr("address2"),
						Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.Ptr("10.0.0.5"),
							VirtualNetwork: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					}},
				LoadBalancingRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendAddressPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendAddressPool)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerBackendAddressPoolGet"},
	})
	client = armnetwork.NewLoadBalancerBackendAddressPoolsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"testrg",
		"lb",
		"backend",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BackendAddressPool{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/backend"),
			Name: to.Ptr("backend"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
				BackendIPConfigurations: []*armnetwork.InterfaceIPConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic/ipConfigurations/default-ip-config"),
					}},
				LoadBalancingRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendAddressPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendAddressPool)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerBackendAddressPools_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update load balancer backend pool with backend addresses containing virtual network and  IP address."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerBackendAddressPoolsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"lb",
		"backend",
		armnetwork.BackendAddressPool{
			Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
				LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
					{
						Name: to.Ptr("address1"),
						Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.Ptr("10.0.0.4"),
							VirtualNetwork: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					},
					{
						Name: to.Ptr("address2"),
						Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.Ptr("10.0.0.5"),
							VirtualNetwork: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					}},
			},
		},
		&armnetwork.LoadBalancerBackendAddressPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BackendAddressPool{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/backend"),
			Name: to.Ptr("backend"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/backendAddressPools"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
				LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
					{
						Name: to.Ptr("address1"),
						Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.Ptr("10.0.0.4"),
							VirtualNetwork: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					},
					{
						Name: to.Ptr("address2"),
						Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
							IPAddress: to.Ptr("10.0.0.5"),
							VirtualNetwork: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb"),
							},
						},
					}},
				LoadBalancingRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendAddressPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendAddressPool)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LBBackendAddressPoolWithBackendAddressesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerBackendAddressPools_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BackendAddressPoolDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerBackendAddressPoolsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"lb",
		"backend",
		&armnetwork.LoadBalancerBackendAddressPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerBackendAddressPoolDelete.json: %v", err)
	}
}

func TestLoadBalancerFrontendIPConfigurations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerFrontendIPConfigurationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerFrontendIPConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerFrontendIPConfigurationsClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerFrontendIPConfigurationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerFrontendIPConfigurationListResult{
			Value: []*armnetwork.FrontendIPConfiguration{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/frontend"),
					Name: to.Ptr("frontend"),
					Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
						InboundNatRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"),
							}},
						LoadBalancingRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
							}},
						PrivateIPAddress:          to.Ptr("10.0.1.4"),
						PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerFrontendIPConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerFrontendIPConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerFrontendIPConfigurationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerFrontendIPConfigurations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerFrontendIPConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerFrontendIPConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerFrontendIPConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"lb",
		"frontend",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerFrontendIPConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FrontendIPConfiguration{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/frontend"),
			Name: to.Ptr("frontend"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/frontendIPConfigurations"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
				InboundNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"),
					}},
				LoadBalancingRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
					}},
				PrivateIPAddress:          to.Ptr("10.0.1.4"),
				PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FrontendIPConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FrontendIPConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerFrontendIPConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInboundNatRules_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InboundNatRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInboundNatRulesClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InboundNatRuleListResult{
			Value: []*armnetwork.InboundNatRule{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1"),
					Name: to.Ptr("natRule1.1"),
					Properties: &armnetwork.InboundNatRulePropertiesFormat{
						BackendIPConfiguration: &armnetwork.InterfaceIPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						BackendPort:      to.Ptr[int32](3389),
						EnableFloatingIP: to.Ptr(false),
						EnableTCPReset:   to.Ptr(true),
						FrontendIPConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
						},
						FrontendPort:         to.Ptr[int32](3390),
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.3"),
					Name: to.Ptr("natRule1.3"),
					Properties: &armnetwork.InboundNatRulePropertiesFormat{
						BackendIPConfiguration: &armnetwork.InterfaceIPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/3/networkInterfaces/nic1/ipConfigurations/ip1"),
						},
						BackendPort:      to.Ptr[int32](3389),
						EnableFloatingIP: to.Ptr(false),
						EnableTCPReset:   to.Ptr(true),
						FrontendIPConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
						},
						FrontendPort:         to.Ptr[int32](3392),
						IdleTimeoutInMinutes: to.Ptr[int32](4),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InboundNatRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InboundNatRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInboundNatRules_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InboundNatRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInboundNatRulesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"lb1",
		"natRule1.1",
		&armnetwork.InboundNatRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleDelete.json: %v", err)
	}
}

func TestInboundNatRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InboundNatRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInboundNatRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"lb1",
		"natRule1.1",
		&armnetwork.InboundNatRulesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.InboundNatRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1"),
			Name: to.Ptr("natRule1.1"),
			Properties: &armnetwork.InboundNatRulePropertiesFormat{
				BackendIPConfiguration: &armnetwork.InterfaceIPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
				},
				BackendPort:      to.Ptr[int32](3389),
				EnableFloatingIP: to.Ptr(false),
				EnableTCPReset:   to.Ptr(true),
				FrontendIPConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
				},
				FrontendPort:         to.Ptr[int32](3390),
				IdleTimeoutInMinutes: to.Ptr[int32](4),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InboundNatRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InboundNatRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInboundNatRules_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InboundNatRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInboundNatRulesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"lb1",
		"natRule1.1",
		armnetwork.InboundNatRule{
			Properties: &armnetwork.InboundNatRulePropertiesFormat{
				BackendPort:      to.Ptr[int32](3389),
				EnableFloatingIP: to.Ptr(false),
				EnableTCPReset:   to.Ptr(false),
				FrontendIPConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
				},
				FrontendPort:         to.Ptr[int32](3390),
				IdleTimeoutInMinutes: to.Ptr[int32](4),
				Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
			},
		},
		&armnetwork.InboundNatRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.InboundNatRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1"),
			Name: to.Ptr("natRule1.1"),
			Properties: &armnetwork.InboundNatRulePropertiesFormat{
				BackendIPConfiguration: &armnetwork.InterfaceIPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"),
				},
				BackendPort:      to.Ptr[int32](3389),
				EnableFloatingIP: to.Ptr(false),
				EnableTCPReset:   to.Ptr(false),
				FrontendIPConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
				},
				FrontendPort:         to.Ptr[int32](3390),
				IdleTimeoutInMinutes: to.Ptr[int32](4),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InboundNatRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InboundNatRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundNatRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerLoadBalancingRules_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerLoadBalancingRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerLoadBalancingRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerLoadBalancingRulesClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerLoadBalancingRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerLoadBalancingRuleListResult{
			Value: []*armnetwork.LoadBalancingRule{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/loadBalancingRules/rule1"),
					Name: to.Ptr("rule1"),
					Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
						BackendAddressPool: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/bepool1"),
						},
						BackendPort:      to.Ptr[int32](80),
						EnableFloatingIP: to.Ptr(false),
						EnableTCPReset:   to.Ptr(true),
						FrontendIPConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfrontend"),
						},
						FrontendPort:         to.Ptr[int32](80),
						IdleTimeoutInMinutes: to.Ptr[int32](15),
						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
						Probe: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/probes/probe1"),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerLoadBalancingRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerLoadBalancingRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerLoadBalancingRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerLoadBalancingRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerLoadBalancingRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerLoadBalancingRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerLoadBalancingRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"lb1",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerLoadBalancingRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LoadBalancingRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/loadBalancingRules/rule1"),
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/loadBalancingRules"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
				BackendAddressPool: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/bepool1"),
				},
				BackendPort:      to.Ptr[int32](80),
				EnableFloatingIP: to.Ptr(false),
				EnableTCPReset:   to.Ptr(true),
				FrontendIPConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfrontend"),
				},
				FrontendPort:         to.Ptr[int32](80),
				IdleTimeoutInMinutes: to.Ptr[int32](15),
				LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
				Probe: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/probes/probe1"),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadBalancingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadBalancingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerLoadBalancingRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerOutboundRules_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerOutboundRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerOutboundRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerOutboundRulesClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerOutboundRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerOutboundRuleListResult{
			Value: []*armnetwork.OutboundRule{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/outboundRules/rule1"),
					Name: to.Ptr("rule1"),
					Type: to.Ptr("Microsoft.Network/loadBalancers/outboundRules"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.OutboundRulePropertiesFormat{
						AllocatedOutboundPorts: to.Ptr[int32](64),
						BackendAddressPool: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/bepool1"),
						},
						EnableTCPReset: to.Ptr(true),
						FrontendIPConfigurations: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfrontend"),
							}},
						IdleTimeoutInMinutes: to.Ptr[int32](15),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Protocol:             to.Ptr(armnetwork.LoadBalancerOutboundRuleProtocolTCP),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerOutboundRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerOutboundRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerOutboundRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerOutboundRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerOutboundRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerOutboundRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerOutboundRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"lb1",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerOutboundRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.OutboundRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/outboundRules/rule1"),
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/outboundRules"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.OutboundRulePropertiesFormat{
				AllocatedOutboundPorts: to.Ptr[int32](64),
				BackendAddressPool: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/bepool1"),
				},
				EnableTCPReset: to.Ptr(true),
				FrontendIPConfigurations: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfrontend"),
					}},
				IdleTimeoutInMinutes: to.Ptr[int32](15),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Protocol:             to.Ptr(armnetwork.LoadBalancerOutboundRuleProtocolTCP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OutboundRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OutboundRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerOutboundRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerNetworkInterfaces_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerNetworkInterfaceListSimple.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerNetworkInterfaceListSimple"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerNetworkInterfacesClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerNetworkInterfaceListSimple.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name:     to.Ptr("mynic"),
					Type:     to.Ptr("Microsoft.Network/networkInterfaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers: []*string{},
							DNSServers:        []*string{},
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/ipConfigurations/ipconfig1"),
								Name: to.Ptr("ipconfig1"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/bepool1"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inbound1"),
										}},
									PrivateIPAddress:          to.Ptr("10.0.1.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/frontendSubnet"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerNetworkInterfaceListSimple.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerNetworkInterfaceListVmss.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerNetworkInterfaceListVmss"},
	})
	client = armnetwork.NewLoadBalancerNetworkInterfacesClient("subid", cred, &options)
	pager = client.List("testrg",
		"lb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerNetworkInterfaceListVmss.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceListResult{
			Value: []*armnetwork.Interface{
				{
					Name: to.Ptr("vmss1Nic"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/vmss1Nic"),
					Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa.dx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/vmss1Nic/ipConfigurations/vmss1IpConfig"),
								Name: to.Ptr("vmss1IpConfig"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/bepool"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/natpool.0"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vmss1Vnet/subnets/default"),
									},
								},
							}},
						MacAddress:        to.Ptr("00-00-00-00-00-00"),
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0"),
						},
					},
				},
				{
					Name: to.Ptr("vmss1Nic"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/vmss1Nic"),
					Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
					Properties: &armnetwork.InterfacePropertiesFormat{
						DNSSettings: &armnetwork.InterfaceDNSSettings{
							AppliedDNSServers:        []*string{},
							DNSServers:               []*string{},
							InternalDomainNameSuffix: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa.dx.internal.cloudapp.net"),
						},
						EnableAcceleratedNetworking: to.Ptr(false),
						EnableIPForwarding:          to.Ptr(false),
						IPConfigurations: []*armnetwork.InterfaceIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/vmss1Nic/ipConfigurations/vmss1IpConfig"),
								Name: to.Ptr("vmss1IpConfig"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
									LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/bepool"),
										}},
									LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/natpool.1"),
										}},
									Primary:                   to.Ptr(true),
									PrivateIPAddress:          to.Ptr("10.0.0.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vmss1Vnet/subnets/default"),
									},
								},
							}},
						MacAddress:        to.Ptr("00-00-00-00-00-00"),
						Primary:           to.Ptr(true),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						VirtualMachine: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerNetworkInterfaceListVmss.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerProbes_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerProbeList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerProbeList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerProbesClient("subid", cred, &options)
	pager := client.List("testrg",
		"lb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerProbeList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LoadBalancerProbeListResult{
			Value: []*armnetwork.Probe{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/probes/prlb"),
					Name: to.Ptr("prlb"),
					Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.ProbePropertiesFormat{
						IntervalInSeconds: to.Ptr[int32](15),
						LoadBalancingRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
							}},
						NumberOfProbes:    to.Ptr[int32](2),
						Port:              to.Ptr[int32](80),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RequestPath:       to.Ptr("healthcheck.aspx"),
						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadBalancerProbeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadBalancerProbeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerProbeList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadBalancerProbes_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerProbeGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadBalancerProbeGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLoadBalancerProbesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"lb",
		"probe1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerProbeGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Probe{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/probes/probe1"),
			Name: to.Ptr("probe1"),
			Type: to.Ptr("Microsoft.Network/loadBalancers/probes"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.ProbePropertiesFormat{
				IntervalInSeconds: to.Ptr[int32](15),
				LoadBalancingRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"),
					}},
				NumberOfProbes:    to.Ptr[int32](2),
				Port:              to.Ptr[int32](80),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RequestPath:       to.Ptr("healthcheck.aspx"),
				Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Probe) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Probe)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerProbeGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete nat gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-natGateway",
		&armnetwork.NatGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayDelete.json: %v", err)
	}
}

func TestNatGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get nat gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-natGateway",
		&armnetwork.NatGatewaysClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.NatGateway{
			Name:     to.Ptr("test-natGateway"),
			Type:     to.Ptr("Microsoft.Network/natGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.NatGatewayPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](5),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddresses: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
					}},
				PublicIPPrefixes: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
					}},
				Subnets: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
					}},
			},
			SKU: &armnetwork.NatGatewaySKU{
				Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NatGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NatGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create nat gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-natgateway",
		armnetwork.NatGateway{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.NatGatewayPropertiesFormat{
				PublicIPAddresses: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
					}},
				PublicIPPrefixes: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
					}},
			},
			SKU: &armnetwork.NatGatewaySKU{
				Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
			},
		},
		&armnetwork.NatGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.NatGateway{
			Name:     to.Ptr("test-natGateway"),
			Type:     to.Ptr("Microsoft.Network/natGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.NatGatewayPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](5),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddresses: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
					}},
				PublicIPPrefixes: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
					}},
				Subnets: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
					}},
			},
			SKU: &armnetwork.NatGatewaySKU{
				Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NatGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NatGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update nat gateway tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatGatewaysClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-natGateway",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.NatGateway{
			Name:     to.Ptr("test-natGateway"),
			Type:     to.Ptr("Microsoft.Network/natGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.NatGatewayPropertiesFormat{
				IdleTimeoutInMinutes: to.Ptr[int32](5),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddresses: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
					}},
				PublicIPPrefixes: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
					}},
				Subnets: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
					}},
			},
			SKU: &armnetwork.NatGatewaySKU{
				Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NatGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NatGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatGateways_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all nat gateways"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatGatewaysClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.NatGatewayListResult{
			Value: []*armnetwork.NatGateway{
				{
					Name:     to.Ptr("test-natGateway"),
					Type:     to.Ptr("Microsoft.Network/natGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.NatGatewayPropertiesFormat{
						IdleTimeoutInMinutes: to.Ptr[int32](5),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddresses: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
							}},
						PublicIPPrefixes: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
							}},
						Subnets: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
							}},
					},
					SKU: &armnetwork.NatGatewaySKU{
						Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("test-natGateway2"),
					Type:     to.Ptr("Microsoft.Network/natGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/natGatewayes/test-natGateway2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.NatGatewayPropertiesFormat{
						IdleTimeoutInMinutes: to.Ptr[int32](5),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddresses: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
							}},
						PublicIPPrefixes: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
							}},
						Subnets: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
							}},
					},
					SKU: &armnetwork.NatGatewaySKU{
						Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NatGatewayListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NatGatewayListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatGateways_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List nat gateways in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatGatewaysClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.NatGatewayListResult{
			Value: []*armnetwork.NatGateway{
				{
					Name:     to.Ptr("test-natGateway"),
					Type:     to.Ptr("Microsoft.Network/natGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateway/test-natGateway"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.NatGatewayPropertiesFormat{
						IdleTimeoutInMinutes: to.Ptr[int32](5),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddresses: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
							}},
						PublicIPPrefixes: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
							}},
						Subnets: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
							}},
					},
					SKU: &armnetwork.NatGatewaySKU{
						Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("test-natGateway2"),
					Type:     to.Ptr("Microsoft.Network/natGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/natGateway/test-natGateway2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.NatGatewayPropertiesFormat{
						IdleTimeoutInMinutes: to.Ptr[int32](5),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddresses: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
							}},
						PublicIPPrefixes: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"),
							}},
						Subnets: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
							}},
					},
					SKU: &armnetwork.NatGatewaySKU{
						Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NatGatewayListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NatGatewayListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatGatewayList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaceIPConfigurations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceIPConfigurationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NetworkInterfaceIPConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceIPConfigurationsClient("subid", cred, &options)
	pager := client.List("testrg",
		"nic1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceIPConfigurationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceIPConfigurationListResult{
			Value: []*armnetwork.InterfaceIPConfiguration{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"),
					Name: to.Ptr("ipconfig1"),
					Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
					Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
						Primary:                   to.Ptr(true),
						PrivateIPAddress:          to.Ptr("10.0.0.4"),
						PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
						PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet12/subnets/subnet12"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceIPConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceIPConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceIPConfigurationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaceIPConfigurations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceIPConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NetworkInterfaceIPConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceIPConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"mynic",
		"ipconfig1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceIPConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.InterfaceIPConfiguration{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/ipConfigurations/ipconfig1"),
			Name: to.Ptr("ipconfig1"),
			Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
			Properties: &armnetwork.InterfaceIPConfigurationPropertiesFormat{
				LoadBalancerBackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"),
					}},
				LoadBalancerInboundNatRules: []*armnetwork.InboundNatRule{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"),
					}},
				PrivateIPAddress:          to.Ptr("10.0.1.4"),
				PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
				PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/frontendSubnet"),
				},
				VirtualNetworkTaps: []*armnetwork.VirtualNetworkTap{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/vTAP1"),
					},
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/vTAP2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InterfaceIPConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InterfaceIPConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceIPConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaceLoadBalancers_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceLoadBalancerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NetworkInterfaceLoadBalancerList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceLoadBalancersClient("subid", cred, &options)
	pager := client.List("testrg",
		"nic1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceLoadBalancerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceLoadBalancerListResult{
			Value: []*armnetwork.LoadBalancer{
				{
					Name:     to.Ptr("lbname1"),
					Type:     to.Ptr("Microsoft.Network/loadBalancers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
					Properties: &armnetwork.LoadBalancerPropertiesFormat{
						BackendAddressPools: []*armnetwork.BackendAddressPool{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"),
								Name: to.Ptr("bepool1"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
									BackendIPConfigurations: []*armnetwork.InterfaceIPConfiguration{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"),
										}},
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"),
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/frontendIPConfigurations/lbfrontend"),
								Name: to.Ptr("lbfrontend"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
									InboundNatRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"),
										}},
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"),
										}},
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.PublicIPAddress{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/publicIPAddresses/myDynamicPublicIP"),
									},
								},
							}},
						InboundNatPools: []*armnetwork.InboundNatPool{},
						InboundNatRules: []*armnetwork.InboundNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"),
								Name: to.Ptr("inbound1"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.InboundNatRulePropertiesFormat{
									BackendIPConfiguration: &armnetwork.InterfaceIPConfiguration{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"),
									},
									BackendPort:      to.Ptr[int32](3389),
									EnableFloatingIP: to.Ptr(false),
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/frontendIPConfigurations/lbfrontend"),
									},
									FrontendPort:         to.Ptr[int32](3389),
									IdleTimeoutInMinutes: to.Ptr[int32](15),
									ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
								},
							}},
						LoadBalancingRules: []*armnetwork.LoadBalancingRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"),
								Name: to.Ptr("rule1"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
									BackendAddressPool: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"),
									},
									BackendPort:      to.Ptr[int32](80),
									EnableFloatingIP: to.Ptr(false),
									FrontendIPConfiguration: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/frontendIPConfigurations/lbfrontend"),
									},
									FrontendPort:         to.Ptr[int32](80),
									IdleTimeoutInMinutes: to.Ptr[int32](15),
									LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
									Probe: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/probes/probe1"),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Protocol:          to.Ptr(armnetwork.TransportProtocolTCP),
								},
							}},
						OutboundRules: []*armnetwork.OutboundRule{},
						Probes: []*armnetwork.Probe{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/probes/probe1"),
								Name: to.Ptr("probe1"),
								Etag: to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
								Properties: &armnetwork.ProbePropertiesFormat{
									IntervalInSeconds: to.Ptr[int32](15),
									LoadBalancingRules: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"),
										}},
									NumberOfProbes:    to.Ptr[int32](2),
									Port:              to.Ptr[int32](80),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RequestPath:       to.Ptr("healthcheck.aspx"),
									Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceLoadBalancerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceLoadBalancerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceLoadBalancerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaceTapConfigurations_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete tap configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceTapConfigurationsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-networkinterface",
		"test-tapconfiguration",
		&armnetwork.InterfaceTapConfigurationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationDelete.json: %v", err)
	}
}

func TestNetworkInterfaceTapConfigurations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Network Interface Tap Configurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceTapConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"mynic",
		"tapconfiguration1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.InterfaceTapConfiguration{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/tapConfigurations/tapConfiguration1"),
			Name: to.Ptr("tapConfiguration1"),
			Type: to.Ptr("Microsoft.Network/networkInterfaces/tapConfigurations"),
			Etag: to.Ptr("etag"),
			Properties: &armnetwork.InterfaceTapConfigurationPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualNetworkTap: &armnetwork.VirtualNetworkTap{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InterfaceTapConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InterfaceTapConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaceTapConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Network Interface Tap Configurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceTapConfigurationsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"mynic",
		"tapconfiguration1",
		armnetwork.InterfaceTapConfiguration{
			Properties: &armnetwork.InterfaceTapConfigurationPropertiesFormat{
				VirtualNetworkTap: &armnetwork.VirtualNetworkTap{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
				},
			},
		},
		&armnetwork.InterfaceTapConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.InterfaceTapConfiguration{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/tapConfigurations/tapConfiguration1"),
			Name: to.Ptr("tapConfiguration1"),
			Type: to.Ptr("Microsoft.Network/networkInterfaces/tapConfigurations"),
			Etag: to.Ptr("etag"),
			Properties: &armnetwork.InterfaceTapConfigurationPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualNetworkTap: &armnetwork.VirtualNetworkTap{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InterfaceTapConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InterfaceTapConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkInterfaceTapConfigurations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual network tap configurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInterfaceTapConfigurationsClient("subid", cred, &options)
	pager := client.List("rg1",
		"mynic",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.InterfaceTapConfigurationListResult{
			Value: []*armnetwork.InterfaceTapConfiguration{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/tapConfigurations/tapConfiguration1"),
					Name: to.Ptr("tapConfiguration1"),
					Type: to.Ptr("Microsoft.Network/networkInterfaces/tapConfigurations"),
					Etag: to.Ptr("etag"),
					Properties: &armnetwork.InterfaceTapConfigurationPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualNetworkTap: &armnetwork.VirtualNetworkTap{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InterfaceTapConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InterfaceTapConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkInterfaceTapConfigurationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkProfiles_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewProfilesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"networkProfile1",
		&armnetwork.ProfilesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileDelete.json: %v", err)
	}
}

func TestNetworkProfiles_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileGetConfigOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewProfilesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"networkProfile1",
		&armnetwork.ProfilesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileGetConfigOnly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Profile{
			Name:     to.Ptr("networkProfile1"),
			Type:     to.Ptr("Microsoft.Network/networkProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1"),
			Location: to.Ptr("centraluseuap"),
			Etag:     to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
			Properties: &armnetwork.ProfilePropertiesFormat{
				ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
						Name: to.Ptr("eth0"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
						Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"),
									Name: to.Ptr("ipconfigprofile1"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								},
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile2"),
									Name: to.Ptr("ipconfigprofile2"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
						Name: to.Ptr("eth1"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
						Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3"),
									Name: to.Ptr("ipconfigprofile3"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:               to.Ptr("1570d8b6-ab8a-4ad2-81d6-d2799b429cbf"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileGetConfigOnly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileGetWithContainerNic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network profile with container network interfaces"},
	})
	client = armnetwork.NewProfilesClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"networkProfile1",
		&armnetwork.ProfilesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileGetWithContainerNic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Profile{
			Name:     to.Ptr("networkProfile1"),
			Type:     to.Ptr("Microsoft.Network/networkProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1"),
			Location: to.Ptr("centraluseuap"),
			Etag:     to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
			Properties: &armnetwork.ProfilePropertiesFormat{
				ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
						Name: to.Ptr("eth0"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							ContainerNetworkInterfaces: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup1_eth0"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup2_eth0"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup3_eth0"),
								}},
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"),
									Name: to.Ptr("ipconfigprofile1"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								},
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile2"),
									Name: to.Ptr("ipconfigprofile2"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
						Name: to.Ptr("eth1"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							ContainerNetworkInterfaces: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup1_eth1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup2_eth1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup3_eth1"),
								}},
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3"),
									Name: to.Ptr("ipconfigprofile3"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup1_eth0"),
						Name: to.Ptr("containerGroup1_eth0"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaces"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfacePropertiesFormat{
							Container: &armnetwork.Container{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/networkProfilesDemo/providers/Microsoft.ContainerInstance/containerGroups/containerGroup1"),
							},
							ContainerNetworkInterfaceConfiguration: &armnetwork.ContainerNetworkInterfaceConfiguration{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
							},
							IPConfigurations:  []*armnetwork.ContainerNetworkInterfaceIPConfiguration{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup1_eth1"),
						Name: to.Ptr("containerGroup1_eth1"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaces"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfacePropertiesFormat{
							Container: &armnetwork.Container{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/networkProfilesDemo/providers/Microsoft.ContainerInstance/containerGroups/containerGroup1"),
							},
							ContainerNetworkInterfaceConfiguration: &armnetwork.ContainerNetworkInterfaceConfiguration{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
							},
							IPConfigurations:  []*armnetwork.ContainerNetworkInterfaceIPConfiguration{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup2_eth0"),
						Name: to.Ptr("containerGroup2_eth0"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaces"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfacePropertiesFormat{
							Container: &armnetwork.Container{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/networkProfilesDemo/providers/Microsoft.ContainerInstance/containerGroups/containerGroup2"),
							},
							ContainerNetworkInterfaceConfiguration: &armnetwork.ContainerNetworkInterfaceConfiguration{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
							},
							IPConfigurations:  []*armnetwork.ContainerNetworkInterfaceIPConfiguration{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup2_eth1"),
						Name: to.Ptr("containerGroup2_eth1"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaces"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfacePropertiesFormat{
							Container: &armnetwork.Container{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/networkProfilesDemo/providers/Microsoft.ContainerInstance/containerGroups/containerGroup2"),
							},
							ContainerNetworkInterfaceConfiguration: &armnetwork.ContainerNetworkInterfaceConfiguration{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
							},
							IPConfigurations:  []*armnetwork.ContainerNetworkInterfaceIPConfiguration{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup3_eth0"),
						Name: to.Ptr("containerGroup3_eth0"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaces"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfacePropertiesFormat{
							Container: &armnetwork.Container{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/networkProfilesDemo/providers/Microsoft.ContainerInstance/containerGroups/containerGroup3"),
							},
							ContainerNetworkInterfaceConfiguration: &armnetwork.ContainerNetworkInterfaceConfiguration{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
							},
							IPConfigurations:  []*armnetwork.ContainerNetworkInterfaceIPConfiguration{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaces/containerGroup3_eth1"),
						Name: to.Ptr("containerGroup3_eth1"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaces"),
						Etag: to.Ptr("W/\"de9b89d2-83b0-4da3-b488-6ea8b0557edd\""),
						Properties: &armnetwork.ContainerNetworkInterfacePropertiesFormat{
							Container: &armnetwork.Container{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/networkProfilesDemo/providers/Microsoft.ContainerInstance/containerGroups/containerGroup3"),
							},
							ContainerNetworkInterfaceConfiguration: &armnetwork.ContainerNetworkInterfaceConfiguration{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
							},
							IPConfigurations:  []*armnetwork.ContainerNetworkInterfaceIPConfiguration{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("1570d8b6-ab8a-4ad2-81d6-d2799b429cbf"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileGetWithContainerNic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileCreateConfigOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network profile defaults"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewProfilesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"networkProfile1",
		armnetwork.Profile{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ProfilePropertiesFormat{
				ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
					{
						Name: to.Ptr("eth1"),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									Name: to.Ptr("ipconfig1"),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileCreateConfigOnly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Profile{
			Name:     to.Ptr("networkProfile1"),
			Type:     to.Ptr("Microsoft.Network/networkProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
			Properties: &armnetwork.ProfilePropertiesFormat{
				ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
						Name: to.Ptr("eth1"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
						Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfig1"),
									Name: to.Ptr("ipconfig1"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:               to.Ptr("1570d8b6-ab8a-4ad2-81d6-d2799b429cbf"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileCreateConfigOnly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkProfiles_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update network profile tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewProfilesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-np",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Profile{
			Name:     to.Ptr("test-np"),
			Type:     to.Ptr("Microsoft.Network/networkProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-np"),
			Location: to.Ptr("centraluseuap"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.ProfilePropertiesFormat{
				ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
						Name: to.Ptr("eth0"),
						Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
						Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
						Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
							IPConfigurations: []*armnetwork.IPConfigurationProfile{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"),
									Name: to.Ptr("ipconfigprofile1"),
									Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
									Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
									Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										Subnet: &armnetwork.Subnet{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
										},
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:               to.Ptr("1570d8b6-ab8a-4ad2-81d6-d2799b429cbf"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkProfiles_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all network profiles"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewProfilesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ProfileListResult{
			Value: []*armnetwork.Profile{
				{
					Name:     to.Ptr("networkProfile1"),
					Type:     to.Ptr("Microsoft.Network/networkProfiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.ProfilePropertiesFormat{
						ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
								Name: to.Ptr("eth0"),
								Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
								Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
								Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
									IPConfigurations: []*armnetwork.IPConfigurationProfile{
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"),
											Name: to.Ptr("ipconfigprofile1"),
											Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
											Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
											Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
												ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
												Subnet: &armnetwork.Subnet{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
												},
											},
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:               to.Ptr("1570d8b6-ab8a-4ad2-81d6-d2799b429cbf"),
					},
				},
				{
					Name:     to.Ptr("networkProfile2"),
					Type:     to.Ptr("Microsoft.Network/networkProfiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkProfiles/networkProfile2"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.ProfilePropertiesFormat{
						ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
								Name: to.Ptr("eth1"),
								Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
								Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
								Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
									IPConfigurations: []*armnetwork.IPConfigurationProfile{
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3"),
											Name: to.Ptr("ipconfigprofile3"),
											Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
											Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
											Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
												ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
												Subnet: &armnetwork.Subnet{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
												},
											},
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkProfiles_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List resource group network profiles"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewProfilesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ProfileListResult{
			Value: []*armnetwork.Profile{
				{
					Name:     to.Ptr("networkProfile1"),
					Type:     to.Ptr("Microsoft.Network/networkProfiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.ProfilePropertiesFormat{
						ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0"),
								Name: to.Ptr("eth0"),
								Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
								Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
								Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
									IPConfigurations: []*armnetwork.IPConfigurationProfile{
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"),
											Name: to.Ptr("ipconfigprofile1"),
											Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
											Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
											Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
												ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
												Subnet: &armnetwork.Subnet{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
												},
											},
										},
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile2"),
											Name: to.Ptr("ipconfigprofile2"),
											Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
											Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
											Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
												ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
												Subnet: &armnetwork.Subnet{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
												},
											},
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:               to.Ptr("1570d8b6-ab8a-4ad2-81d6-d2799b429cbf"),
					},
				},
				{
					Name:     to.Ptr("networkProfile2"),
					Type:     to.Ptr("Microsoft.Network/networkProfiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile2"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armnetwork.ProfilePropertiesFormat{
						ContainerNetworkInterfaceConfigurations: []*armnetwork.ContainerNetworkInterfaceConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1"),
								Name: to.Ptr("eth1"),
								Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations"),
								Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
								Properties: &armnetwork.ContainerNetworkInterfaceConfigurationPropertiesFormat{
									IPConfigurations: []*armnetwork.IPConfigurationProfile{
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3"),
											Name: to.Ptr("ipconfigprofile3"),
											Type: to.Ptr("Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations"),
											Etag: to.Ptr("W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\""),
											Properties: &armnetwork.IPConfigurationProfilePropertiesFormat{
												ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
												Subnet: &armnetwork.Subnet{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"),
												},
											},
										}},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						ContainerNetworkInterfaces: []*armnetwork.ContainerNetworkInterface{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkProfileList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkSecurityGroups_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testnsg",
		&armnetwork.SecurityGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupDelete.json: %v", err)
	}
}

func TestNetworkSecurityGroups_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testnsg",
		&armnetwork.SecurityGroupsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityGroup{
			Name:     to.Ptr("testnsg"),
			Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.SecurityGroupPropertiesFormat{
				DefaultSecurityRules: []*armnetwork.SecurityRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound"),
						Name: to.Ptr("AllowVnetInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
						Name: to.Ptr("AllowAzureLoadBalancerInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound"),
						Name: to.Ptr("DenyAllInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all inbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound"),
						Name: to.Ptr("AllowVnetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound"),
						Name: to.Ptr("AllowInternetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("Internet"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound"),
						Name: to.Ptr("DenyAllOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all outbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityRules: []*armnetwork.SecurityRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1"),
						Name: to.Ptr("rule1"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("80"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](130),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkSecurityGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testnsg",
		armnetwork.SecurityGroup{
			Location: to.Ptr("eastus"),
		},
		&armnetwork.SecurityGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityGroup{
			Name:     to.Ptr("testnsg"),
			Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.SecurityGroupPropertiesFormat{
				DefaultSecurityRules: []*armnetwork.SecurityRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound"),
						Name: to.Ptr("AllowVnetInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
						Name: to.Ptr("AllowAzureLoadBalancerInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound"),
						Name: to.Ptr("DenyAllInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all inbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound"),
						Name: to.Ptr("AllowVnetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound"),
						Name: to.Ptr("AllowInternetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("Internet"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound"),
						Name: to.Ptr("DenyAllOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all outbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityRules:     []*armnetwork.SecurityRule{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreateWithRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network security group with rule"},
	})
	client = armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testnsg",
		armnetwork.SecurityGroup{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.SecurityGroupPropertiesFormat{
				SecurityRules: []*armnetwork.SecurityRule{
					{
						Name: to.Ptr("rule1"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("80"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](130),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
			},
		},
		&armnetwork.SecurityGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreateWithRule.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreateWithRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityGroup{
			Name:     to.Ptr("testnsg"),
			Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.SecurityGroupPropertiesFormat{
				DefaultSecurityRules: []*armnetwork.SecurityRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound"),
						Name: to.Ptr("AllowVnetInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
						Name: to.Ptr("AllowAzureLoadBalancerInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound"),
						Name: to.Ptr("DenyAllInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all inbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound"),
						Name: to.Ptr("AllowVnetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound"),
						Name: to.Ptr("AllowInternetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("Internet"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound"),
						Name: to.Ptr("DenyAllOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all outbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityRules: []*armnetwork.SecurityRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1"),
						Name: to.Ptr("rule1"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("80"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](130),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupCreateWithRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkSecurityGroups_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update network security group tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"testnsg",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityGroup{
			Name:     to.Ptr("testnsg"),
			Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.SecurityGroupPropertiesFormat{
				DefaultSecurityRules: []*armnetwork.SecurityRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound"),
						Name: to.Ptr("AllowVnetInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
						Name: to.Ptr("AllowAzureLoadBalancerInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound"),
						Name: to.Ptr("DenyAllInBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all inbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound"),
						Name: to.Ptr("AllowVnetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65000),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound"),
						Name: to.Ptr("AllowInternetOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
							DestinationAddressPrefix: to.Ptr("Internet"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65001),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound"),
						Name: to.Ptr("DenyAllOutBound"),
						Properties: &armnetwork.SecurityRulePropertiesFormat{
							Description:              to.Ptr("Deny all outbound traffic"),
							Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
							DestinationAddressPrefix: to.Ptr("*"),
							DestinationPortRange:     to.Ptr("*"),
							Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
							Priority:                 to.Ptr[int32](65500),
							ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
							SourceAddressPrefix:      to.Ptr("*"),
							SourcePortRange:          to.Ptr("*"),
							Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityRules:     []*armnetwork.SecurityRule{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkSecurityGroups_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all network security groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SecurityGroupListResult{
			Value: []*armnetwork.SecurityGroup{
				{
					Name:     to.Ptr("nsg1"),
					Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.SecurityGroupPropertiesFormat{
						DefaultSecurityRules: []*armnetwork.SecurityRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound"),
								Name: to.Ptr("AllowVnetInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
								Name: to.Ptr("AllowAzureLoadBalancerInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllInBound"),
								Name: to.Ptr("DenyAllInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all inbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetOutBound"),
								Name: to.Ptr("AllowVnetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowInternetOutBound"),
								Name: to.Ptr("AllowInternetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("Internet"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllOutBound"),
								Name: to.Ptr("DenyAllOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all outbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecurityRules:     []*armnetwork.SecurityRule{},
					},
				},
				{
					Name:     to.Ptr("nsg3"),
					Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.SecurityGroupPropertiesFormat{
						DefaultSecurityRules: []*armnetwork.SecurityRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetInBound"),
								Name: to.Ptr("AllowVnetInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
								Name: to.Ptr("AllowAzureLoadBalancerInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllInBound"),
								Name: to.Ptr("DenyAllInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all inbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetOutBound"),
								Name: to.Ptr("AllowVnetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowInternetOutBound"),
								Name: to.Ptr("AllowInternetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("Internet"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllOutBound"),
								Name: to.Ptr("DenyAllOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all outbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecurityRules:     []*armnetwork.SecurityRule{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkSecurityGroups_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List network security groups in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityGroupsClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SecurityGroupListResult{
			Value: []*armnetwork.SecurityGroup{
				{
					Name:     to.Ptr("nsg1"),
					Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.SecurityGroupPropertiesFormat{
						DefaultSecurityRules: []*armnetwork.SecurityRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound"),
								Name: to.Ptr("AllowVnetInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
								Name: to.Ptr("AllowAzureLoadBalancerInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllInBound"),
								Name: to.Ptr("DenyAllInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all inbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetOutBound"),
								Name: to.Ptr("AllowVnetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowInternetOutBound"),
								Name: to.Ptr("AllowInternetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("Internet"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllOutBound"),
								Name: to.Ptr("DenyAllOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all outbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecurityRules:     []*armnetwork.SecurityRule{},
					},
				},
				{
					Name:     to.Ptr("nsg3"),
					Type:     to.Ptr("Microsoft.Network/networkSecurityGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.SecurityGroupPropertiesFormat{
						DefaultSecurityRules: []*armnetwork.SecurityRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetInBound"),
								Name: to.Ptr("AllowVnetInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
								Name: to.Ptr("AllowAzureLoadBalancerInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from azure load balancer"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("AzureLoadBalancer"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllInBound"),
								Name: to.Ptr("DenyAllInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all inbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetOutBound"),
								Name: to.Ptr("AllowVnetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowInternetOutBound"),
								Name: to.Ptr("AllowInternetOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow outbound traffic from all VMs to Internet"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("Internet"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65001),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllOutBound"),
								Name: to.Ptr("DenyAllOutBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Deny all outbound traffic"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
									DestinationAddressPrefix: to.Ptr("*"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
									Priority:                 to.Ptr[int32](65500),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("*"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecurityRules:     []*armnetwork.SecurityRule{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityRules_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network security rule from network security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityRulesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testnsg",
		"rule1",
		&armnetwork.SecurityRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleDelete.json: %v", err)
	}
}

func TestSecurityRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network security rule in network security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testnsg",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1"),
			Name: to.Ptr("rule1"),
			Properties: &armnetwork.SecurityRulePropertiesFormat{
				Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
				DestinationAddressPrefix: to.Ptr("*"),
				DestinationPortRange:     to.Ptr("80"),
				Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
				Priority:                 to.Ptr[int32](130),
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SourceAddressPrefix:      to.Ptr("*"),
				SourcePortRange:          to.Ptr("*"),
				Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityRules_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create security rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityRulesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testnsg",
		"rule1",
		armnetwork.SecurityRule{
			Properties: &armnetwork.SecurityRulePropertiesFormat{
				Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
				DestinationAddressPrefix: to.Ptr("11.0.0.0/8"),
				DestinationPortRange:     to.Ptr("8080"),
				Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
				Priority:                 to.Ptr[int32](100),
				SourceAddressPrefix:      to.Ptr("10.0.0.0/8"),
				SourcePortRange:          to.Ptr("*"),
				Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
			},
		},
		&armnetwork.SecurityRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1"),
			Name: to.Ptr("rule1"),
			Properties: &armnetwork.SecurityRulePropertiesFormat{
				Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
				DestinationAddressPrefix: to.Ptr("11.0.0.0/8"),
				DestinationPortRange:     to.Ptr("8080"),
				Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
				Priority:                 to.Ptr[int32](100),
				ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SourceAddressPrefix:      to.Ptr("10.0.0.0/8"),
				SourcePortRange:          to.Ptr("*"),
				Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityRules_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List network security rules in network security group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityRulesClient("subid", cred, &options)
	pager := client.List("rg1",
		"testnsg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SecurityRuleListResult{
			Value: []*armnetwork.SecurityRule{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1"),
					Name: to.Ptr("rule1"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
						DestinationAddressPrefix: to.Ptr("*"),
						DestinationPortRange:     to.Ptr("80"),
						Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
						Priority:                 to.Ptr[int32](130),
						ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:      to.Ptr("*"),
						SourcePortRange:          to.Ptr("*"),
						Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkSecurityGroupRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultSecurityRules_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DefaultSecurityRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultSecurityRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDefaultSecurityRulesClient("subid", cred, &options)
	pager := client.List("testrg",
		"nsg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DefaultSecurityRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SecurityRuleListResult{
			Value: []*armnetwork.SecurityRule{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound"),
					Name: to.Ptr("AllowVnetInBound"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Description:                to.Ptr("Allow inbound traffic from all VMs in VNET"),
						Access:                     to.Ptr(armnetwork.SecurityRuleAccessAllow),
						DestinationAddressPrefix:   to.Ptr("VirtualNetwork"),
						DestinationAddressPrefixes: []*string{},
						DestinationPortRange:       to.Ptr("*"),
						DestinationPortRanges:      []*string{},
						Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionInbound),
						Priority:                   to.Ptr[int32](65000),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:        to.Ptr("VirtualNetwork"),
						SourceAddressPrefixes:      []*string{},
						SourcePortRange:            to.Ptr("*"),
						SourcePortRanges:           []*string{},
						Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowAzureLoadBalancerInBound"),
					Name: to.Ptr("AllowAzureLoadBalancerInBound"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Description:                to.Ptr("Allow inbound traffic from azure load balancer"),
						Access:                     to.Ptr(armnetwork.SecurityRuleAccessAllow),
						DestinationAddressPrefix:   to.Ptr("*"),
						DestinationAddressPrefixes: []*string{},
						DestinationPortRange:       to.Ptr("*"),
						DestinationPortRanges:      []*string{},
						Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionInbound),
						Priority:                   to.Ptr[int32](65001),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:        to.Ptr("AzureLoadBalancer"),
						SourceAddressPrefixes:      []*string{},
						SourcePortRange:            to.Ptr("*"),
						SourcePortRanges:           []*string{},
						Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllInBound"),
					Name: to.Ptr("DenyAllInBound"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Description:                to.Ptr("Deny all inbound traffic"),
						Access:                     to.Ptr(armnetwork.SecurityRuleAccessDeny),
						DestinationAddressPrefix:   to.Ptr("*"),
						DestinationAddressPrefixes: []*string{},
						DestinationPortRange:       to.Ptr("*"),
						DestinationPortRanges:      []*string{},
						Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionInbound),
						Priority:                   to.Ptr[int32](65500),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:        to.Ptr("*"),
						SourceAddressPrefixes:      []*string{},
						SourcePortRange:            to.Ptr("*"),
						SourcePortRanges:           []*string{},
						Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetOutBound"),
					Name: to.Ptr("AllowVnetOutBound"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Description:                to.Ptr("Allow outbound traffic from all VMs to all VMs in VNET"),
						Access:                     to.Ptr(armnetwork.SecurityRuleAccessAllow),
						DestinationAddressPrefix:   to.Ptr("VirtualNetwork"),
						DestinationAddressPrefixes: []*string{},
						DestinationPortRange:       to.Ptr("*"),
						DestinationPortRanges:      []*string{},
						Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
						Priority:                   to.Ptr[int32](65000),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:        to.Ptr("VirtualNetwork"),
						SourceAddressPrefixes:      []*string{},
						SourcePortRange:            to.Ptr("*"),
						SourcePortRanges:           []*string{},
						Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowInternetOutBound"),
					Name: to.Ptr("AllowInternetOutBound"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Description:                to.Ptr("Allow outbound traffic from all VMs to Internet"),
						Access:                     to.Ptr(armnetwork.SecurityRuleAccessAllow),
						DestinationAddressPrefix:   to.Ptr("Internet"),
						DestinationAddressPrefixes: []*string{},
						DestinationPortRange:       to.Ptr("*"),
						DestinationPortRanges:      []*string{},
						Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
						Priority:                   to.Ptr[int32](65001),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:        to.Ptr("*"),
						SourceAddressPrefixes:      []*string{},
						SourcePortRange:            to.Ptr("*"),
						SourcePortRanges:           []*string{},
						Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllOutBound"),
					Name: to.Ptr("DenyAllOutBound"),
					Properties: &armnetwork.SecurityRulePropertiesFormat{
						Description:                to.Ptr("Deny all outbound traffic"),
						Access:                     to.Ptr(armnetwork.SecurityRuleAccessDeny),
						DestinationAddressPrefix:   to.Ptr("*"),
						DestinationAddressPrefixes: []*string{},
						DestinationPortRange:       to.Ptr("*"),
						DestinationPortRanges:      []*string{},
						Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
						Priority:                   to.Ptr[int32](65500),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SourceAddressPrefix:        to.Ptr("*"),
						SourceAddressPrefixes:      []*string{},
						SourcePortRange:            to.Ptr("*"),
						SourcePortRanges:           []*string{},
						Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DefaultSecurityRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultSecurityRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DefaultSecurityRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultSecurityRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewDefaultSecurityRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"nsg1",
		"AllowVnetInBound",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DefaultSecurityRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound"),
			Name: to.Ptr("AllowVnetInBound"),
			Properties: &armnetwork.SecurityRulePropertiesFormat{
				Description:                to.Ptr("Allow inbound traffic from all VMs in VNET"),
				Access:                     to.Ptr(armnetwork.SecurityRuleAccessAllow),
				DestinationAddressPrefix:   to.Ptr("VirtualNetwork"),
				DestinationAddressPrefixes: []*string{},
				DestinationPortRange:       to.Ptr("*"),
				DestinationPortRanges:      []*string{},
				Direction:                  to.Ptr(armnetwork.SecurityRuleDirectionInbound),
				Priority:                   to.Ptr[int32](65000),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SourceAddressPrefix:        to.Ptr("VirtualNetwork"),
				SourceAddressPrefixes:      []*string{},
				SourcePortRange:            to.Ptr("*"),
				SourcePortRanges:           []*string{},
				Protocol:                   to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/DefaultSecurityRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkVirtualAppliances_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete NetworkVirtualAppliance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualAppliancesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nva",
		&armnetwork.VirtualAppliancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceDelete.json: %v", err)
	}
}

func TestNetworkVirtualAppliances_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get NetworkVirtualAppliance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualAppliancesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"nva",
		&armnetwork.VirtualAppliancesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualAppliance{
			Name:     to.Ptr("nva"),
			Type:     to.Ptr("Microsoft.Network/networkVirtualAppliances"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Identity: &armnetwork.ManagedServiceIdentity{
				Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armnetwork.VirtualAppliancePropertiesFormat{
				AddressPrefix: to.Ptr("192.168.1.0/16"),
				BootStrapConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
				CloudInitConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
				InboundSecurityRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"),
					}},
				NvaSKU: &armnetwork.VirtualApplianceSKUProperties{
					BundledScaleUnit:   to.Ptr("1"),
					MarketPlaceVersion: to.Ptr("12.1"),
					Vendor:             to.Ptr("Cisco SDWAN"),
				},
				ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualApplianceAsn: to.Ptr[int64](10000),
				VirtualApplianceNics: []*armnetwork.VirtualApplianceNicProperties{
					{
						Name:             to.Ptr("managementNic"),
						PrivateIPAddress: to.Ptr("192.168.12.1"),
						PublicIPAddress:  to.Ptr("40.30.2.2"),
					},
					{
						Name:             to.Ptr("privateNic-1"),
						PrivateIPAddress: to.Ptr("192.168.12.2"),
					}},
				VirtualApplianceSites: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"),
					}},
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualAppliance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualAppliance)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkVirtualAppliances_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update NetworkVirtualAppliance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualAppliancesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nva",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualAppliance{
			Name:     to.Ptr("nva"),
			Type:     to.Ptr("Microsoft.Network/networkVirtualAppliances"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Identity: &armnetwork.ManagedServiceIdentity{
				Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armnetwork.VirtualAppliancePropertiesFormat{
				AddressPrefix: to.Ptr("192.168.1.0/16"),
				BootStrapConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
				CloudInitConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
				NvaSKU: &armnetwork.VirtualApplianceSKUProperties{
					BundledScaleUnit:   to.Ptr("1"),
					MarketPlaceVersion: to.Ptr("12.1"),
					Vendor:             to.Ptr("Cisco SDWAN"),
				},
				ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualApplianceAsn: to.Ptr[int64](10000),
				VirtualApplianceNics: []*armnetwork.VirtualApplianceNicProperties{
					{
						Name:             to.Ptr("managementNic"),
						PrivateIPAddress: to.Ptr("192.168.12.1"),
						PublicIPAddress:  to.Ptr("40.30.2.2"),
					},
					{
						Name:             to.Ptr("privateNic-1"),
						PrivateIPAddress: to.Ptr("192.168.12.2"),
					}},
				VirtualApplianceSites: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"),
					}},
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualAppliance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualAppliance)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkVirtualAppliances_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualAppliancePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create NetworkVirtualAppliance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualAppliancesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nva",
		armnetwork.VirtualAppliance{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armnetwork.ManagedServiceIdentity{
				Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armnetwork.VirtualAppliancePropertiesFormat{
				BootStrapConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
				CloudInitConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
				NvaSKU: &armnetwork.VirtualApplianceSKUProperties{
					BundledScaleUnit:   to.Ptr("1"),
					MarketPlaceVersion: to.Ptr("12.1"),
					Vendor:             to.Ptr("Cisco SDWAN"),
				},
				VirtualApplianceAsn: to.Ptr[int64](10000),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		},
		&armnetwork.VirtualAppliancesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualAppliancePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualAppliancePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualAppliance{
			Name:     to.Ptr("nva"),
			Type:     to.Ptr("Microsoft.Network/networkVirtualAppliances"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Identity: &armnetwork.ManagedServiceIdentity{
				Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Properties: &armnetwork.VirtualAppliancePropertiesFormat{
				AddressPrefix: to.Ptr("192.168.1.0/16"),
				BootStrapConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
				CloudInitConfigurationBlobs: []*string{
					to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
				InboundSecurityRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"),
					}},
				NvaSKU: &armnetwork.VirtualApplianceSKUProperties{
					BundledScaleUnit:   to.Ptr("1"),
					MarketPlaceVersion: to.Ptr("12.1"),
					Vendor:             to.Ptr("Cisco SDWAN"),
				},
				ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualApplianceAsn: to.Ptr[int64](10000),
				VirtualApplianceNics: []*armnetwork.VirtualApplianceNicProperties{
					{
						Name:             to.Ptr("managementNic"),
						PrivateIPAddress: to.Ptr("192.168.12.1"),
						PublicIPAddress:  to.Ptr("40.30.2.2"),
					},
					{
						Name:             to.Ptr("privateNic-1"),
						PrivateIPAddress: to.Ptr("192.168.12.2"),
					}},
				VirtualApplianceSites: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"),
					}},
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualAppliance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualAppliance)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualAppliancePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkVirtualAppliances_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Network Virtual Appliance for a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualAppliancesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualApplianceListResult{
			Value: []*armnetwork.VirtualAppliance{
				{
					Name:     to.Ptr("nva"),
					Type:     to.Ptr("Microsoft.Network/networkVirtualAppliances"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Identity: &armnetwork.ManagedServiceIdentity{
						Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
						},
					},
					Properties: &armnetwork.VirtualAppliancePropertiesFormat{
						AddressPrefix: to.Ptr("192.168.1.0/16"),
						BootStrapConfigurationBlobs: []*string{
							to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
						CloudInitConfigurationBlobs: []*string{
							to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
						InboundSecurityRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"),
							}},
						NvaSKU: &armnetwork.VirtualApplianceSKUProperties{
							BundledScaleUnit:   to.Ptr("1"),
							MarketPlaceVersion: to.Ptr("12.1"),
							Vendor:             to.Ptr("Cisco SDWAN"),
						},
						ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualApplianceAsn: to.Ptr[int64](10000),
						VirtualApplianceNics: []*armnetwork.VirtualApplianceNicProperties{
							{
								Name:             to.Ptr("managementNic"),
								PrivateIPAddress: to.Ptr("192.168.12.1"),
								PublicIPAddress:  to.Ptr("40.30.2.2"),
							},
							{
								Name:             to.Ptr("privateNic-1"),
								PrivateIPAddress: to.Ptr("192.168.12.2"),
							}},
						VirtualApplianceSites: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"),
							}},
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualApplianceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualApplianceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkVirtualAppliances_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Network Virtual Appliances for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualAppliancesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualApplianceListResult{
			Value: []*armnetwork.VirtualAppliance{
				{
					Name:     to.Ptr("nva"),
					Type:     to.Ptr("Microsoft.Network/networkVirtualAppliances"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Identity: &armnetwork.ManagedServiceIdentity{
						Type: to.Ptr(armnetwork.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armnetwork.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
						},
					},
					Properties: &armnetwork.VirtualAppliancePropertiesFormat{
						AddressPrefix: to.Ptr("192.168.1.0/16"),
						BootStrapConfigurationBlobs: []*string{
							to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig")},
						CloudInitConfigurationBlobs: []*string{
							to.Ptr("https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig")},
						InboundSecurityRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"),
							}},
						NvaSKU: &armnetwork.VirtualApplianceSKUProperties{
							BundledScaleUnit:   to.Ptr("1"),
							MarketPlaceVersion: to.Ptr("12.1"),
							Vendor:             to.Ptr("Cisco SDWAN"),
						},
						ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualApplianceAsn: to.Ptr[int64](10000),
						VirtualApplianceNics: []*armnetwork.VirtualApplianceNicProperties{
							{
								Name:             to.Ptr("managementNic"),
								PrivateIPAddress: to.Ptr("192.168.12.1"),
								PublicIPAddress:  to.Ptr("40.30.2.2"),
							},
							{
								Name:             to.Ptr("privateNic-1"),
								PrivateIPAddress: to.Ptr("192.168.12.2"),
							}},
						VirtualApplianceSites: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"),
							}},
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualApplianceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualApplianceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualApplianceSites_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Network Virtual Appliance Site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualApplianceSitesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nva",
		"site1",
		&armnetwork.VirtualApplianceSitesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteDelete.json: %v", err)
	}
}

func TestVirtualApplianceSites_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetNetwork Virtual Appliance Site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualApplianceSitesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"nva",
		"site1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualApplianceSite{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/virtualApplianceSites/site1"),
			Name: to.Ptr("site1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.VirtualApplianceSiteProperties{
				AddressPrefix: to.Ptr("192.168.1.0/24"),
				O365Policy: &armnetwork.Office365PolicyProperties{
					BreakOutCategories: &armnetwork.BreakOutCategoryPolicies{
						Default:  to.Ptr(true),
						Allow:    to.Ptr(true),
						Optimize: to.Ptr(true),
					},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualApplianceSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualApplianceSite)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualApplianceSites_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSitePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Network Virtual Appliance Site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualApplianceSitesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nva",
		"site1",
		armnetwork.VirtualApplianceSite{
			Properties: &armnetwork.VirtualApplianceSiteProperties{
				AddressPrefix: to.Ptr("192.168.1.0/24"),
				O365Policy: &armnetwork.Office365PolicyProperties{
					BreakOutCategories: &armnetwork.BreakOutCategoryPolicies{
						Default:  to.Ptr(true),
						Allow:    to.Ptr(true),
						Optimize: to.Ptr(true),
					},
				},
			},
		},
		&armnetwork.VirtualApplianceSitesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSitePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSitePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualApplianceSite{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/virtualApplianceSites/site1"),
			Name: to.Ptr("site1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.VirtualApplianceSiteProperties{
				AddressPrefix: to.Ptr("192.168.1.0/24"),
				O365Policy: &armnetwork.Office365PolicyProperties{
					BreakOutCategories: &armnetwork.BreakOutCategoryPolicies{
						Default:  to.Ptr(true),
						Allow:    to.Ptr(true),
						Optimize: to.Ptr(true),
					},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualApplianceSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualApplianceSite)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSitePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualApplianceSites_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Network Virtual Appliance sites for a given Network Virtual Appliance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualApplianceSitesClient("subid", cred, &options)
	pager := client.List("rg1",
		"nva",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualApplianceSiteListResult{
			Value: []*armnetwork.VirtualApplianceSite{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/virtualApplianceSites/site1"),
					Name: to.Ptr("site1"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.VirtualApplianceSiteProperties{
						AddressPrefix: to.Ptr("192.168.1.0/24"),
						O365Policy: &armnetwork.Office365PolicyProperties{
							BreakOutCategories: &armnetwork.BreakOutCategoryPolicies{
								Default:  to.Ptr(true),
								Allow:    to.Ptr(true),
								Optimize: to.Ptr(true),
							},
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualApplianceSiteListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualApplianceSiteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSiteList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualApplianceSKUs_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSkuList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NetworkVirtualApplianceSkuListResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualApplianceSKUsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSkuList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualApplianceSKUListResult{
			Value: []*armnetwork.VirtualApplianceSKU{
				{
					Name: to.Ptr("ciscoSdwan"),
					Type: to.Ptr("Microsoft.Network/networkVirtualApplianceSkus"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualApplianceSkus/ciscoSdwan"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualApplianceSKUPropertiesFormat{
						AvailableScaleUnits: []*armnetwork.VirtualApplianceSKUInstances{
							{
								InstanceCount: to.Ptr[int32](2),
								ScaleUnit:     to.Ptr("1"),
							},
							{
								InstanceCount: to.Ptr[int32](2),
								ScaleUnit:     to.Ptr("2"),
							}},
						AvailableVersions: []*string{
							to.Ptr("11.12")},
						Vendor: to.Ptr("Cisco"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualApplianceSKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualApplianceSKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSkuList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualApplianceSKUs_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSkuGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NetworkVirtualApplianceSkuGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualApplianceSKUsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"ciscoSdwan",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSkuGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualApplianceSKU{
			Name: to.Ptr("ciscoSdwan"),
			Type: to.Ptr("Microsoft.Network/networkVirtualApplianceSkus"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualApplianceSkus/ciscoSdwan"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualApplianceSKUPropertiesFormat{
				AvailableScaleUnits: []*armnetwork.VirtualApplianceSKUInstances{
					{
						InstanceCount: to.Ptr[int32](2),
						ScaleUnit:     to.Ptr("1"),
					},
					{
						InstanceCount: to.Ptr[int32](2),
						ScaleUnit:     to.Ptr("2"),
					}},
				AvailableVersions: []*string{
					to.Ptr("11.12")},
				Vendor: to.Ptr("Cisco"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualApplianceSKU) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualApplianceSKU)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkVirtualApplianceSkuGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInboundSecurityRule_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundSecurityRulePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Network Virtual Appliance Inbound Security Rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewInboundSecurityRuleClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nva",
		"rule1",
		armnetwork.InboundSecurityRule{
			Properties: &armnetwork.InboundSecurityRuleProperties{
				Rules: []*armnetwork.InboundSecurityRules{
					{
						DestinationPortRange: to.Ptr[int32](22),
						SourceAddressPrefix:  to.Ptr("50.20.121.5/32"),
						Protocol:             to.Ptr(armnetwork.InboundSecurityRulesProtocolTCP),
					}},
			},
		},
		&armnetwork.InboundSecurityRuleClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundSecurityRulePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundSecurityRulePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.InboundSecurityRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"),
			Name: to.Ptr("rule1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.InboundSecurityRuleProperties{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Rules: []*armnetwork.InboundSecurityRules{
					{
						DestinationPortRange: to.Ptr[int32](22),
						SourceAddressPrefix:  to.Ptr("50.20.121.5/32"),
						Protocol:             to.Ptr(armnetwork.InboundSecurityRulesProtocolTCP),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InboundSecurityRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InboundSecurityRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/InboundSecurityRulePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create network watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"nw1",
		armnetwork.Watcher{
			Location:   to.Ptr("eastus"),
			Properties: &armnetwork.WatcherPropertiesFormat{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Watcher{
			Name:     to.Ptr("nw1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.WatcherPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Watcher) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watcher)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get network watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Watcher{
			Name:     to.Ptr("nw1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.WatcherPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Watcher) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watcher)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		&armnetwork.WatchersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherDelete.json: %v", err)
	}
}

func TestNetworkWatchers_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update network watcher tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nw1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Watcher{
			Name:     to.Ptr("nw1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.WatcherPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Watcher) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watcher)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List network watchers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.WatcherListResult{
			Value: []*armnetwork.Watcher{
				{
					Name:     to.Ptr("nw1"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.WatcherPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("nw2"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw2"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.WatcherPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WatcherListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WatcherListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all network watchers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.WatcherListResult{
			Value: []*armnetwork.Watcher{
				{
					Name:     to.Ptr("nw1"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.WatcherPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("nw2"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.WatcherPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WatcherListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WatcherListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetTopology(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTopologyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Topology"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	res, err := client.GetTopology(ctx,
		"rg1",
		"nw1",
		armnetwork.TopologyParameters{
			TargetResourceGroupName: to.Ptr("rg2"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTopologyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Topology{
			CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-02T19:31:55.9461781Z"); return t }()),
			ID:              to.Ptr("ce592f46-8164-4bf2-ad36-b8e4acf6fb68"),
			LastModified:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T00:00:13.2005337Z"); return t }()),
			Resources: []*armnetwork.TopologyResource{
				{
					Name: to.Ptr("MultiTierApp0"),
					Associations: []*armnetwork.TopologyAssociation{
						{
							Name:            to.Ptr("appNic0"),
							AssociationType: to.Ptr(armnetwork.AssociationTypeContains),
							ResourceID:      to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/appNic0"),
						},
						{
							Name:            to.Ptr("appNic10"),
							AssociationType: to.Ptr(armnetwork.AssociationTypeContains),
							ResourceID:      to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/appNic10"),
						}},
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/MultiTierApp0"),
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Topology) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Topology)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTopologyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_VerifyIPFlow(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherIpFlowVerify.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Ip flow verify"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginVerifyIPFlow(ctx,
		"rg1",
		"nw1",
		armnetwork.VerificationIPFlowParameters{
			Direction:        to.Ptr(armnetwork.DirectionOutbound),
			LocalIPAddress:   to.Ptr("10.2.0.4"),
			LocalPort:        to.Ptr("80"),
			RemoteIPAddress:  to.Ptr("121.10.1.1"),
			RemotePort:       to.Ptr("80"),
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
			Protocol:         to.Ptr(armnetwork.IPFlowProtocolTCP),
		},
		&armnetwork.WatchersClientBeginVerifyIPFlowOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherIpFlowVerify.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherIpFlowVerify.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VerificationIPFlowResult{
			Access:   to.Ptr(armnetwork.AccessAllow),
			RuleName: to.Ptr("Rule1"),
		}
		if !reflect.DeepEqual(exampleRes, res.VerificationIPFlowResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VerificationIPFlowResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherIpFlowVerify.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetNextHop(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNextHopGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get next hop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetNextHop(ctx,
		"rg1",
		"nw1",
		armnetwork.NextHopParameters{
			DestinationIPAddress: to.Ptr("10.0.0.10"),
			SourceIPAddress:      to.Ptr("10.0.0.5"),
			TargetNicResourceID:  to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1"),
			TargetResourceID:     to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&armnetwork.WatchersClientBeginGetNextHopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNextHopGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNextHopGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.NextHopResult{
			NextHopIPAddress: to.Ptr("10.0.0.1"),
			NextHopType:      to.Ptr(armnetwork.NextHopTypeVnetLocal),
			RouteTableID:     to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/routeTables/rt1"),
		}
		if !reflect.DeepEqual(exampleRes, res.NextHopResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NextHopResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNextHopGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetVMSecurityRules(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherSecurityGroupViewGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security group view"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetVMSecurityRules(ctx,
		"rg1",
		"nw1",
		armnetwork.SecurityGroupViewParameters{
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&armnetwork.WatchersClientBeginGetVMSecurityRulesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherSecurityGroupViewGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherSecurityGroupViewGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityGroupViewResult{
			NetworkInterfaces: []*armnetwork.SecurityGroupNetworkInterface{
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/nic1"),
					SecurityRuleAssociations: &armnetwork.SecurityRuleAssociations{
						DefaultSecurityRules: []*armnetwork.SecurityRule{
							{
								ID:   to.Ptr("/subscriptions//resourceGroups//providers/Microsoft.Network/networkSecurityGroups//defaultSecurityRules/"),
								Name: to.Ptr("AllowVnetInBound"),
								Properties: &armnetwork.SecurityRulePropertiesFormat{
									Description:              to.Ptr("Allow inbound traffic from all VMs in VNET"),
									Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
									DestinationAddressPrefix: to.Ptr("VirtualNetwork"),
									DestinationPortRange:     to.Ptr("*"),
									Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
									Priority:                 to.Ptr[int32](65000),
									ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
									SourceAddressPrefix:      to.Ptr("VirtualNetwork"),
									SourcePortRange:          to.Ptr("*"),
									Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),
								},
							}},
						EffectiveSecurityRules: []*armnetwork.EffectiveNetworkSecurityRule{
							{
								Name:                     to.Ptr("DefaultOutboundDenyAll"),
								Access:                   to.Ptr(armnetwork.SecurityRuleAccessDeny),
								DestinationAddressPrefix: to.Ptr("*"),
								DestinationPortRange:     to.Ptr("0-65535"),
								Direction:                to.Ptr(armnetwork.SecurityRuleDirectionOutbound),
								Priority:                 to.Ptr[int32](65500),
								SourceAddressPrefix:      to.Ptr("*"),
								SourcePortRange:          to.Ptr("0-65535"),
								Protocol:                 to.Ptr(armnetwork.EffectiveSecurityRuleProtocolAll),
							}},
						SubnetAssociation: &armnetwork.SubnetAssociation{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
							SecurityRules: []*armnetwork.SecurityRule{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/AppNSG/securityRules/fe_rule"),
									Name: to.Ptr("fe_rule"),
									Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
									Properties: &armnetwork.SecurityRulePropertiesFormat{
										Description:              to.Ptr("Allow Frontend"),
										Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),
										DestinationAddressPrefix: to.Ptr("*"),
										DestinationPortRange:     to.Ptr("*"),
										Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),
										Priority:                 to.Ptr[int32](100),
										ProvisioningState:        to.Ptr(armnetwork.ProvisioningStateSucceeded),
										SourceAddressPrefix:      to.Ptr("10.1.0.0/24"),
										SourcePortRange:          to.Ptr("*"),
										Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolTCP),
									},
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityGroupViewResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityGroupViewResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherSecurityGroupViewGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetTroubleshooting(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get troubleshooting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetTroubleshooting(ctx,
		"rg1",
		"nw1",
		armnetwork.TroubleshootingParameters{
			Properties: &armnetwork.TroubleshootingProperties{
				StorageID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/st1"),
				StoragePath: to.Ptr("https://st1.blob.core.windows.net/cn1"),
			},
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&armnetwork.WatchersClientBeginGetTroubleshootingOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.TroubleshootingResult{
			Code:    to.Ptr("UnHealthy"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T00:20:09.914Z"); return t }()),
			Results: []*armnetwork.TroubleshootingDetails{
				{
					Detail:     to.Ptr("During this time S2S VPN tunnels to on premises sites or other Azure virtual networks will be disconnected"),
					ID:         to.Ptr("000000"),
					ReasonType: to.Ptr("VipUnResponsive"),
					RecommendedActions: []*armnetwork.TroubleshootingRecommendedActions{
						{
							ActionText:    to.Ptr("Verify if there is a network security group (NSG) applied to the GatewaySubnet"),
							ActionURI:     to.Ptr("https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-create-nsg-arm-pportal"),
							ActionURIText: to.Ptr("Verify"),
						},
						{
							ActionText:    to.Ptr("If your VPN gateway isn't up and running by the expected resolution time, contact support"),
							ActionURI:     to.Ptr("http://azure.microsoft.com/support"),
							ActionURIText: to.Ptr("contact support"),
						}},
					Summary: to.Ptr("We are sorry, your VPN gateway is unreachable from the Internet"),
				}},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T00:19:47.0442834Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.TroubleshootingResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TroubleshootingResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetTroubleshootingResult(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootResultQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get troubleshoot result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetTroubleshootingResult(ctx,
		"rg1",
		"nw1",
		armnetwork.QueryTroubleshootingParameters{
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&armnetwork.WatchersClientBeginGetTroubleshootingResultOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootResultQuery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootResultQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.TroubleshootingResult{
			Code:    to.Ptr("UnHealthy"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T00:20:09.914Z"); return t }()),
			Results: []*armnetwork.TroubleshootingDetails{
				{
					Detail:     to.Ptr("During this time S2S VPN tunnels to on premises sites or other Azure virtual networks will be disconnected"),
					ID:         to.Ptr("000000"),
					ReasonType: to.Ptr("VipUnResponsive"),
					RecommendedActions: []*armnetwork.TroubleshootingRecommendedActions{
						{
							ActionText:    to.Ptr("Verify if there is a network security group (NSG) applied to the GatewaySubnet"),
							ActionURI:     to.Ptr("https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-create-nsg-arm-pportal"),
							ActionURIText: to.Ptr("Verify"),
						},
						{
							ActionText:    to.Ptr("If your VPN gateway isn't up and running by the expected resolution time, contact support"),
							ActionURI:     to.Ptr("http://azure.microsoft.com/support"),
							ActionURIText: to.Ptr("contact support"),
						}},
					Summary: to.Ptr("We are sorry, your VPN gateway is unreachable from the Internet"),
				}},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T00:19:47.0442834Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.TroubleshootingResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TroubleshootingResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherTroubleshootResultQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_SetFlowLogConfiguration(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogConfigure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Configure flow log"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginSetFlowLogConfiguration(ctx,
		"rg1",
		"nw1",
		armnetwork.FlowLogInformation{
			Properties: &armnetwork.FlowLogProperties{
				Enabled:   to.Ptr(true),
				StorageID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/st1"),
			},
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
		},
		&armnetwork.WatchersClientBeginSetFlowLogConfigurationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogConfigure.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogConfigure.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FlowLogInformation{
			Properties: &armnetwork.FlowLogProperties{
				Enabled:   to.Ptr(true),
				StorageID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/st1"),
			},
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
		}
		if !reflect.DeepEqual(exampleRes, res.FlowLogInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FlowLogInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogConfigure.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetFlowLogStatus(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogStatusQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get flow log status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetFlowLogStatus(ctx,
		"rg1",
		"nw1",
		armnetwork.FlowLogStatusParameters{
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
		},
		&armnetwork.WatchersClientBeginGetFlowLogStatusOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogStatusQuery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogStatusQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FlowLogInformation{
			Properties: &armnetwork.FlowLogProperties{
				Enabled:   to.Ptr(true),
				StorageID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/st1"),
			},
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
		}
		if !reflect.DeepEqual(exampleRes, res.FlowLogInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FlowLogInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogStatusQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_CheckConnectivity(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectivityCheck.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check connectivity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginCheckConnectivity(ctx,
		"rg1",
		"nw1",
		armnetwork.ConnectivityParameters{
			Destination: &armnetwork.ConnectivityDestination{
				Address: to.Ptr("192.168.100.4"),
				Port:    to.Ptr[int32](3389),
			},
			PreferredIPVersion: to.Ptr(armnetwork.IPVersionIPv4),
			Source: &armnetwork.ConnectivitySource{
				ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
			},
		},
		&armnetwork.WatchersClientBeginCheckConnectivityOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectivityCheck.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectivityCheck.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectivityInformation{
			AvgLatencyInMs:   to.Ptr[int32](1),
			ConnectionStatus: to.Ptr(armnetwork.ConnectionStatusConnected),
			Hops: []*armnetwork.ConnectivityHop{
				{
					Type:    to.Ptr("Source"),
					Address: to.Ptr("10.1.1.4"),
					ID:      to.Ptr("7dbbe7aa-60ba-4650-831e-63d775d38e9e"),
					Issues:  []*armnetwork.ConnectivityIssue{},
					NextHopIDs: []*string{
						to.Ptr("75c8d819-b208-4584-a311-1aa45ce753f9")},
					ResourceID: to.Ptr("subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/nic0/ipConfigurations/ipconfig1"),
				},
				{
					Type:       to.Ptr("VirtualNetwork"),
					Address:    to.Ptr("192.168.100.4"),
					ID:         to.Ptr("75c8d819-b208-4584-a311-1aa45ce753f9"),
					Issues:     []*armnetwork.ConnectivityIssue{},
					NextHopIDs: []*string{},
					ResourceID: to.Ptr("subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"),
				}},
			MaxLatencyInMs: to.Ptr[int32](4),
			MinLatencyInMs: to.Ptr[int32](1),
			ProbesFailed:   to.Ptr[int32](0),
			ProbesSent:     to.Ptr[int32](100),
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectivityInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectivityInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectivityCheck.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetAzureReachabilityReport(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAzureReachabilityReportGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Reachability Report"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetAzureReachabilityReport(ctx,
		"rg1",
		"nw1",
		armnetwork.AzureReachabilityReportParameters{
			AzureLocations: []*string{
				to.Ptr("West US")},
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-10T00:00:00Z"); return t }()),
			ProviderLocation: &armnetwork.AzureReachabilityReportLocation{
				Country: to.Ptr("United States"),
				State:   to.Ptr("washington"),
			},
			Providers: []*string{
				to.Ptr("Frontier Communications of America, Inc. - ASN 5650")},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-07T00:00:00Z"); return t }()),
		},
		&armnetwork.WatchersClientBeginGetAzureReachabilityReportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAzureReachabilityReportGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAzureReachabilityReportGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AzureReachabilityReport{
			AggregationLevel: to.Ptr("State"),
			ProviderLocation: &armnetwork.AzureReachabilityReportLocation{
				Country: to.Ptr("United States"),
				State:   to.Ptr("washington"),
			},
			ReachabilityReport: []*armnetwork.AzureReachabilityReportItem{
				{
					AzureLocation: to.Ptr("West US"),
					Latencies: []*armnetwork.AzureReachabilityReportLatencyInfo{
						{
							Score:     to.Ptr[int32](94),
							TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-07T00:00:00Z"); return t }()),
						},
						{
							Score:     to.Ptr[int32](94),
							TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-08T00:00:00Z"); return t }()),
						},
						{
							Score:     to.Ptr[int32](94),
							TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-09T00:00:00Z"); return t }()),
						}},
					Provider: to.Ptr("Frontier Communications of America, Inc. - ASN 5650"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureReachabilityReport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureReachabilityReport)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAzureReachabilityReportGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_ListAvailableProviders(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAvailableProvidersListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Available Providers List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginListAvailableProviders(ctx,
		"rg1",
		"nw1",
		armnetwork.AvailableProvidersListParameters{
			AzureLocations: []*string{
				to.Ptr("West US")},
			City:    to.Ptr("seattle"),
			Country: to.Ptr("United States"),
			State:   to.Ptr("washington"),
		},
		&armnetwork.WatchersClientBeginListAvailableProvidersOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAvailableProvidersListGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAvailableProvidersListGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.AvailableProvidersList{
			Countries: []*armnetwork.AvailableProvidersListCountry{
				{
					CountryName: to.Ptr("United States"),
					States: []*armnetwork.AvailableProvidersListState{
						{
							Cities: []*armnetwork.AvailableProvidersListCity{
								{
									CityName: to.Ptr("seattle"),
									Providers: []*string{
										to.Ptr("Comcast Cable Communications, Inc. - ASN 7922"),
										to.Ptr("Comcast Cable Communications, LLC - ASN 7922"),
										to.Ptr("Level 3 Communications, Inc. (GBLX) - ASN 3549"),
										to.Ptr("Qwest Communications Company, LLC - ASN 209")},
								}},
							StateName: to.Ptr("washington"),
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableProvidersList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableProvidersList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherAvailableProvidersListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkWatchers_GetNetworkConfigurationDiagnostic(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNetworkConfigurationDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Network configuration diagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWatchersClient("subid", cred, &options)
	poller, err := client.BeginGetNetworkConfigurationDiagnostic(ctx,
		"rg1",
		"nw1",
		armnetwork.ConfigurationDiagnosticParameters{
			Profiles: []*armnetwork.ConfigurationDiagnosticProfile{
				{
					Destination:     to.Ptr("12.11.12.14"),
					DestinationPort: to.Ptr("12100"),
					Direction:       to.Ptr(armnetwork.DirectionInbound),
					Source:          to.Ptr("10.1.0.4"),
					Protocol:        to.Ptr("TCP"),
				}},
			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
		},
		&armnetwork.WatchersClientBeginGetNetworkConfigurationDiagnosticOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNetworkConfigurationDiagnostic.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNetworkConfigurationDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConfigurationDiagnosticResponse{
			Results: []*armnetwork.ConfigurationDiagnosticResult{
				{
					NetworkSecurityGroupResult: &armnetwork.SecurityGroupResult{
						EvaluatedNetworkSecurityGroups: []*armnetwork.EvaluatedNetworkSecurityGroup{
							{
								AppliedTo: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnet/subnets/AppSubnet"),
								MatchedRule: &armnetwork.MatchedRule{
									Action:   to.Ptr("Allow"),
									RuleName: to.Ptr("UserRule_fe_rule"),
								},
								NetworkSecurityGroupID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
								RulesEvaluationResult: []*armnetwork.SecurityRulesEvaluationResult{
									{
										Name:                   to.Ptr("UserRule_Cleanuptool-Allow-100"),
										DestinationMatched:     to.Ptr(true),
										DestinationPortMatched: to.Ptr(false),
										ProtocolMatched:        to.Ptr(true),
										SourceMatched:          to.Ptr(false),
										SourcePortMatched:      to.Ptr(true),
									},
									{
										Name:                   to.Ptr("UserRule_Cleanuptool-Allow-101"),
										DestinationMatched:     to.Ptr(true),
										DestinationPortMatched: to.Ptr(false),
										ProtocolMatched:        to.Ptr(true),
										SourceMatched:          to.Ptr(true),
										SourcePortMatched:      to.Ptr(true),
									},
									{
										Name:                   to.Ptr("UserRule_Cleanuptool-Allow-102"),
										DestinationMatched:     to.Ptr(true),
										DestinationPortMatched: to.Ptr(false),
										ProtocolMatched:        to.Ptr(true),
										SourceMatched:          to.Ptr(false),
										SourcePortMatched:      to.Ptr(true),
									},
									{
										Name:                   to.Ptr("UserRule_Cleanuptool-Deny-103"),
										DestinationMatched:     to.Ptr(true),
										DestinationPortMatched: to.Ptr(false),
										ProtocolMatched:        to.Ptr(true),
										SourceMatched:          to.Ptr(true),
										SourcePortMatched:      to.Ptr(true),
									},
									{
										Name:                   to.Ptr("UserRule_fe_rule"),
										DestinationMatched:     to.Ptr(true),
										DestinationPortMatched: to.Ptr(true),
										ProtocolMatched:        to.Ptr(true),
										SourceMatched:          to.Ptr(true),
										SourcePortMatched:      to.Ptr(true),
									}},
							},
							{
								AppliedTo: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnet/networkInterfaces/nic"),
								MatchedRule: &armnetwork.MatchedRule{
									Action:   to.Ptr("Allow"),
									RuleName: to.Ptr("UserRule_fe_rule"),
								},
								NetworkSecurityGroupID: to.Ptr("/subscriptions/61cc8a98-a8be-4bfe-a04e-0b461f93fe35/resourceGroups/NwRgCentralUSEUAP_copy/providers/Microsoft.Network/networkSecurityGroups/AppNSG"),
								RulesEvaluationResult: []*armnetwork.SecurityRulesEvaluationResult{
									{
										Name:                   to.Ptr("UserRule_fe_rule"),
										DestinationMatched:     to.Ptr(true),
										DestinationPortMatched: to.Ptr(true),
										ProtocolMatched:        to.Ptr(true),
										SourceMatched:          to.Ptr(true),
										SourcePortMatched:      to.Ptr(true),
									}},
							}},
						SecurityRuleAccessResult: to.Ptr(armnetwork.SecurityRuleAccessAllow),
					},
					Profile: &armnetwork.ConfigurationDiagnosticProfile{
						Destination:     to.Ptr("12.11.12.14"),
						DestinationPort: to.Ptr("12100"),
						Direction:       to.Ptr(armnetwork.DirectionInbound),
						Source:          to.Ptr("10.1.0.4"),
						Protocol:        to.Ptr("TCP"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationDiagnosticResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationDiagnosticResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherNetworkConfigurationDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPacketCaptures_Create(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create packet capture"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPacketCapturesClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"nw1",
		"pc1",
		armnetwork.PacketCapture{
			Properties: &armnetwork.PacketCaptureParameters{
				BytesToCapturePerPacket: to.Ptr[int64](10000),
				Filters: []*armnetwork.PacketCaptureFilter{
					{
						LocalIPAddress: to.Ptr("10.0.0.4"),
						LocalPort:      to.Ptr("80"),
						Protocol:       to.Ptr(armnetwork.PcProtocolTCP),
					}},
				StorageLocation: &armnetwork.PacketCaptureStorageLocation{
					FilePath:    to.Ptr("D:\\capture\\pc1.cap"),
					StorageID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Storage/storageAccounts/pcstore"),
					StoragePath: to.Ptr("https://mytestaccountname.blob.core.windows.net/capture/pc1.cap"),
				},
				Target:               to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
				TimeLimitInSeconds:   to.Ptr[int32](100),
				TotalBytesPerSession: to.Ptr[int64](100000),
			},
		},
		&armnetwork.PacketCapturesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureCreate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureCreate.json: %v", err)
	}
}

func TestPacketCaptures_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get packet capture"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPacketCapturesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		"pc1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PacketCaptureResult{
			Name: to.Ptr("pc1"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/packetCaptures/pc1"),
			Properties: &armnetwork.PacketCaptureResultProperties{
				BytesToCapturePerPacket: to.Ptr[int64](10000),
				Filters: []*armnetwork.PacketCaptureFilter{
					{
						LocalIPAddress: to.Ptr("10.0.0.4"),
						LocalPort:      to.Ptr("80"),
						Protocol:       to.Ptr(armnetwork.PcProtocolTCP),
					}},
				StorageLocation: &armnetwork.PacketCaptureStorageLocation{
					FilePath:    to.Ptr("D:\\capture\\pc1.cap"),
					StorageID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Storage/storageAccounts/pcstore"),
					StoragePath: to.Ptr("https://mytestaccountname.blob.core.windows.net/capture/pc1.cap"),
				},
				Target:               to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
				TimeLimitInSeconds:   to.Ptr[int32](100),
				TotalBytesPerSession: to.Ptr[int64](100000),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PacketCaptureResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PacketCaptureResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPacketCaptures_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete packet capture"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPacketCapturesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		"pc1",
		&armnetwork.PacketCapturesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureDelete.json: %v", err)
	}
}

func TestPacketCaptures_Stop(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop packet capture"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPacketCapturesClient("subid", cred, &options)
	poller, err := client.BeginStop(ctx,
		"rg1",
		"nw1",
		"pc1",
		&armnetwork.PacketCapturesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureStop.json: %v", err)
	}
}

func TestPacketCaptures_GetStatus(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureQueryStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Query packet capture status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPacketCapturesClient("subid", cred, &options)
	poller, err := client.BeginGetStatus(ctx,
		"rg1",
		"nw1",
		"pc1",
		&armnetwork.PacketCapturesClientBeginGetStatusOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureQueryStatus.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureQueryStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PacketCaptureQueryStatusResult{
			Name:                to.Ptr("pc1"),
			CaptureStartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-07T12:35:24Z"); return t }()),
			ID:                  to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/packetCaptures/pc1"),
			PacketCaptureError:  []*armnetwork.PcError{},
			PacketCaptureStatus: to.Ptr(armnetwork.PcStatusStopped),
			StopReason:          to.Ptr("TimeExceeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.PacketCaptureQueryStatusResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PacketCaptureQueryStatusResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCaptureQueryStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPacketCaptures_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCapturesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List packet captures"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPacketCapturesClient("subid", cred, &options)
	pager := client.List("rg1",
		"nw1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCapturesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PacketCaptureListResult{
			Value: []*armnetwork.PacketCaptureResult{
				{
					Name: to.Ptr("pc1"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/packetCaptures/pc1"),
					Properties: &armnetwork.PacketCaptureResultProperties{
						BytesToCapturePerPacket: to.Ptr[int64](10000),
						Filters: []*armnetwork.PacketCaptureFilter{
							{
								LocalIPAddress: to.Ptr("10.0.0.4"),
								LocalPort:      to.Ptr("80"),
								Protocol:       to.Ptr(armnetwork.PcProtocolTCP),
							}},
						StorageLocation: &armnetwork.PacketCaptureStorageLocation{
							FilePath:    to.Ptr("D:\\capture\\pc1.cap"),
							StorageID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Storage/storageAccounts/pcstore"),
							StoragePath: to.Ptr("https://mytestaccountname.blob.core.windows.net/capture/pc1.cap"),
						},
						Target:               to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
						TimeLimitInSeconds:   to.Ptr[int32](100),
						TotalBytesPerSession: to.Ptr[int64](100000),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("pc2"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/packetCaptures/pc2"),
					Properties: &armnetwork.PacketCaptureResultProperties{
						BytesToCapturePerPacket: to.Ptr[int64](10000),
						Filters:                 []*armnetwork.PacketCaptureFilter{},
						StorageLocation: &armnetwork.PacketCaptureStorageLocation{
							FilePath:    to.Ptr("D:\\capture\\pc2.cap"),
							StorageID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Storage/storageAccounts/pcstore"),
							StoragePath: to.Ptr("https://mytestaccountname.blob.core.windows.net/capture/pc2.cap"),
						},
						Target:               to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
						TimeLimitInSeconds:   to.Ptr[int32](100),
						TotalBytesPerSession: to.Ptr[int64](100000),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PacketCaptureListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PacketCaptureListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherPacketCapturesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitors_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create connection monitor V1"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nw1",
		"cm1",
		armnetwork.ConnectionMonitor{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.ConnectionMonitorParameters{
				Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
					{
						Name:       to.Ptr("source"),
						ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1"),
					},
					{
						Name:    to.Ptr("destination"),
						Address: to.Ptr("bing.com"),
					}},
				TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
					{
						Name: to.Ptr("tcp"),
						TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
							Port: to.Ptr[int32](80),
						},
						TestFrequencySec: to.Ptr[int32](60),
						Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
					}},
				TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
					{
						Name: to.Ptr("tg"),
						Destinations: []*string{
							to.Ptr("destination")},
						Sources: []*string{
							to.Ptr("source")},
						TestConfigurations: []*string{
							to.Ptr("tcp")},
					}},
			},
		},
		&armnetwork.ConnectionMonitorsClientBeginCreateOrUpdateOptions{Migrate: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionMonitorResult{
			Name:     to.Ptr("cm1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/connectionMonitors"),
			Etag:     to.Ptr("W/\"e7497f26-5f09-4559-900b-fe98f3dedb6f\""),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/connectionMonitors/cm1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.ConnectionMonitorResultProperties{
				Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
					{
						Name:       to.Ptr("source"),
						ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1"),
					},
					{
						Name:    to.Ptr("destination"),
						Address: to.Ptr("bing.com"),
					}},
				TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
					{
						Name: to.Ptr("tcp"),
						TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
							Port: to.Ptr[int32](80),
						},
						TestFrequencySec: to.Ptr[int32](60),
						Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
					}},
				TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
					{
						Name: to.Ptr("tg"),
						Destinations: []*string{
							to.Ptr("destination")},
						Sources: []*string{
							to.Ptr("source")},
						TestConfigurations: []*string{
							to.Ptr("tcp")},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorV2Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create connection monitor V2"},
	})
	client = armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nw1",
		"cm1",
		armnetwork.ConnectionMonitor{
			Properties: &armnetwork.ConnectionMonitorParameters{
				Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
					{
						Name:       to.Ptr("vm1"),
						ResourceID: to.Ptr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/NwRgIrinaCentralUSEUAP/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
					{
						Name: to.Ptr("CanaryWorkspaceVamshi"),
						Filter: &armnetwork.ConnectionMonitorEndpointFilter{
							Type: to.Ptr(armnetwork.ConnectionMonitorEndpointFilterTypeInclude),
							Items: []*armnetwork.ConnectionMonitorEndpointFilterItem{
								{
									Type:    to.Ptr(armnetwork.ConnectionMonitorEndpointFilterItemTypeAgentAddress),
									Address: to.Ptr("npmuser"),
								}},
						},
						ResourceID: to.Ptr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/vasamudrRG/providers/Microsoft.OperationalInsights/workspaces/vasamudrWorkspace"),
					},
					{
						Name:    to.Ptr("bing"),
						Address: to.Ptr("bing.com"),
					},
					{
						Name:    to.Ptr("google"),
						Address: to.Ptr("google.com"),
					}},
				Outputs: []*armnetwork.ConnectionMonitorOutput{},
				TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
					{
						Name: to.Ptr("testConfig1"),
						TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
							DisableTraceRoute: to.Ptr(false),
							Port:              to.Ptr[int32](80),
						},
						TestFrequencySec: to.Ptr[int32](60),
						Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
					}},
				TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
					{
						Name: to.Ptr("test1"),
						Destinations: []*string{
							to.Ptr("bing"),
							to.Ptr("google")},
						Disable: to.Ptr(false),
						Sources: []*string{
							to.Ptr("vm1"),
							to.Ptr("CanaryWorkspaceVamshi")},
						TestConfigurations: []*string{
							to.Ptr("testConfig1")},
					}},
			},
		},
		&armnetwork.ConnectionMonitorsClientBeginCreateOrUpdateOptions{Migrate: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorV2Create.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorV2Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionMonitorResult{
			Name:     to.Ptr("cm1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/connectionMonitors"),
			Etag:     to.Ptr("W/\"e7497f26-5f09-4559-900b-fe98f3dedb6f\""),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/connectionMonitors/cm1"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.ConnectionMonitorResultProperties{
				Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
					{
						Name:       to.Ptr("vm1"),
						ResourceID: to.Ptr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/NwRgIrinaCentralUSEUAP/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
					{
						Name: to.Ptr("CanaryWorkspaceVamshi"),
						Filter: &armnetwork.ConnectionMonitorEndpointFilter{
							Type: to.Ptr(armnetwork.ConnectionMonitorEndpointFilterTypeInclude),
							Items: []*armnetwork.ConnectionMonitorEndpointFilterItem{
								{
									Type:    to.Ptr(armnetwork.ConnectionMonitorEndpointFilterItemTypeAgentAddress),
									Address: to.Ptr("npmuser"),
								}},
						},
						ResourceID: to.Ptr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/vasamudrRG/providers/Microsoft.OperationalInsights/workspaces/vasamudrWorkspace"),
					},
					{
						Name:    to.Ptr("bing"),
						Address: to.Ptr("bing.com"),
					},
					{
						Name:    to.Ptr("google"),
						Address: to.Ptr("google.com"),
					}},
				Outputs: []*armnetwork.ConnectionMonitorOutput{},
				TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
					{
						Name: to.Ptr("testConfig1"),
						TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
							DisableTraceRoute: to.Ptr(false),
							Port:              to.Ptr[int32](80),
						},
						TestFrequencySec: to.Ptr[int32](60),
						Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
					}},
				TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
					{
						Name: to.Ptr("test1"),
						Destinations: []*string{
							to.Ptr("bing"),
							to.Ptr("google")},
						Disable: to.Ptr(false),
						Sources: []*string{
							to.Ptr("vm1"),
							to.Ptr("CanaryWorkspaceVamshi")},
						TestConfigurations: []*string{
							to.Ptr("testConfig1")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorV2Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitors_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get connection monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		"cm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionMonitorResult{
			Name:     to.Ptr("cm1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/connectionMonitors"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/connectionMonitors/cm1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.ConnectionMonitorResultProperties{
				Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
					{
						Name:       to.Ptr("source"),
						ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1"),
					},
					{
						Name:    to.Ptr("destination"),
						Address: to.Ptr("bing.com"),
					}},
				TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
					{
						Name: to.Ptr("tcp"),
						TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
							Port: to.Ptr[int32](80),
						},
						TestFrequencySec: to.Ptr[int32](60),
						Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
					}},
				TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
					{
						Name: to.Ptr("tg"),
						Destinations: []*string{
							to.Ptr("destination")},
						Sources: []*string{
							to.Ptr("source")},
						TestConfigurations: []*string{
							to.Ptr("tcp")},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitors_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete connection monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		"cm1",
		&armnetwork.ConnectionMonitorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorDelete.json: %v", err)
	}
}

func TestConnectionMonitors_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update connection monitor tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nw1",
		"cm1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionMonitorResult{
			Name:     to.Ptr("cm1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/connectionMonitors"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			ID:       to.Ptr("/subscriptions/subid/`/rg1/providers/Microsoft.Network/networkWatchers/nw1/connectionMonitors/cm1"),
			Location: to.Ptr("westcentralus"),
			Properties: &armnetwork.ConnectionMonitorResultProperties{
				AutoStart: to.Ptr(true),
				Destination: &armnetwork.ConnectionMonitorDestination{
					Address: to.Ptr("bing.com"),
					Port:    to.Ptr[int32](80),
				},
				MonitoringIntervalInSeconds: to.Ptr[int32](60),
				Source: &armnetwork.ConnectionMonitorSource{
					Port:       to.Ptr[int32](0),
					ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"),
				},
				MonitoringStatus:  to.Ptr("Running"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T02:48:10.6797393Z"); return t }()),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitors_Stop(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop connection monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	poller, err := client.BeginStop(ctx,
		"rg1",
		"nw1",
		"cm1",
		&armnetwork.ConnectionMonitorsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorStop.json: %v", err)
	}
}

func TestConnectionMonitors_Start(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start connection monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"rg1",
		"nw1",
		"cm1",
		&armnetwork.ConnectionMonitorsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorStart.json: %v", err)
	}
}

func TestConnectionMonitors_Query(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Query connection monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	poller, err := client.BeginQuery(ctx,
		"rg1",
		"nw1",
		"cm1",
		&armnetwork.ConnectionMonitorsClientBeginQueryOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorQuery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionMonitorQueryResult{
			SourceStatus: to.Ptr(armnetwork.ConnectionMonitorSourceStatusActive),
			States: []*armnetwork.ConnectionStateSnapshot{
				{
					ConnectionState: to.Ptr(armnetwork.ConnectionStateReachable),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-08T05:12:41.5265438Z"); return t }()),
					EvaluationState: to.Ptr(armnetwork.EvaluationStateCompleted),
					Hops: []*armnetwork.ConnectivityHop{
						{
							Type:    to.Ptr("Source"),
							Address: to.Ptr("10.1.1.4"),
							ID:      to.Ptr("7dbbe7aa-60ba-4650-831e-63d775d38e9e"),
							Issues:  []*armnetwork.ConnectivityIssue{},
							NextHopIDs: []*string{
								to.Ptr("75c8d819-b208-4584-a311-1aa45ce753f9")},
							ResourceID: to.Ptr("subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/nic0/ipConfigurations/ipconfig1"),
						},
						{
							Type:       to.Ptr("VirtualNetwork"),
							Address:    to.Ptr("192.168.100.4"),
							ID:         to.Ptr("75c8d819-b208-4584-a311-1aa45ce753f9"),
							Issues:     []*armnetwork.ConnectivityIssue{},
							NextHopIDs: []*string{},
							ResourceID: to.Ptr("subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-08T03:42:33.3387305Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorQueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorQueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitors_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List connection monitors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewConnectionMonitorsClient("subid", cred, &options)
	pager := client.List("rg1",
		"nw1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ConnectionMonitorListResult{
			Value: []*armnetwork.ConnectionMonitorResult{
				{
					Name:     to.Ptr("cm1"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers/connectionMonitors"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/connectionMonitors/cm1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.ConnectionMonitorResultProperties{
						Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
							{
								Name:       to.Ptr("source"),
								ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1"),
							},
							{
								Name:    to.Ptr("destination"),
								Address: to.Ptr("bing.com"),
							}},
						TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
							{
								Name: to.Ptr("tcp"),
								TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
									Port: to.Ptr[int32](80),
								},
								TestFrequencySec: to.Ptr[int32](60),
								Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
							}},
						TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
							{
								Name: to.Ptr("tg"),
								Destinations: []*string{
									to.Ptr("destination")},
								Sources: []*string{
									to.Ptr("source")},
								TestConfigurations: []*string{
									to.Ptr("tcp")},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("cm2"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers/connectionMonitors"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/connectionMonitors/cm2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.ConnectionMonitorResultProperties{
						Endpoints: []*armnetwork.ConnectionMonitorEndpoint{
							{
								Name:       to.Ptr("source"),
								ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct2"),
							},
							{
								Name:    to.Ptr("destination"),
								Address: to.Ptr("google.com"),
							}},
						TestConfigurations: []*armnetwork.ConnectionMonitorTestConfiguration{
							{
								Name: to.Ptr("tcp"),
								TCPConfiguration: &armnetwork.ConnectionMonitorTCPConfiguration{
									Port: to.Ptr[int32](80),
								},
								TestFrequencySec: to.Ptr[int32](60),
								Protocol:         to.Ptr(armnetwork.ConnectionMonitorTestConfigurationProtocolTCP),
							}},
						TestGroups: []*armnetwork.ConnectionMonitorTestGroup{
							{
								Name: to.Ptr("tg"),
								Destinations: []*string{
									to.Ptr("destination")},
								Sources: []*string{
									to.Ptr("source")},
								TestConfigurations: []*string{
									to.Ptr("tcp")},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionMonitorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionMonitorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherConnectionMonitorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFlowLogs_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update flow log"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFlowLogsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"nw1",
		"fl",
		armnetwork.FlowLog{
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.FlowLogPropertiesFormat{
				Format: &armnetwork.FlowLogFormatParameters{
					Type:    to.Ptr(armnetwork.FlowLogFormatTypeJSON),
					Version: to.Ptr[int32](1),
				},
				Enabled:          to.Ptr(true),
				StorageID:        to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/nwtest1mgvbfmqsigdxe"),
				TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/desmondcentral-nsg"),
			},
		},
		&armnetwork.FlowLogsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FlowLog{
			Name:     to.Ptr("Microsoft.Networkdesmond-rgdesmondcentral-nsg"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/FlowLogs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw/FlowLogs/fl"),
			Location: to.Ptr("centraluseuap"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.FlowLogPropertiesFormat{
				Format: &armnetwork.FlowLogFormatParameters{
					Type:    to.Ptr(armnetwork.FlowLogFormatTypeJSON),
					Version: to.Ptr[int32](1),
				},
				Enabled:                    to.Ptr(true),
				FlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsProperties{},
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RetentionPolicy: &armnetwork.RetentionPolicyParameters{
					Days:    to.Ptr[int32](0),
					Enabled: to.Ptr(false),
				},
				StorageID:          to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/nwtest1mgvbfmqsigdxe"),
				TargetResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TargetResourceID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/desmondcentral-nsg"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FlowLog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FlowLog)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFlowLogs_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update flow log tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFlowLogsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"nw",
		"fl",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FlowLog{
			Name:     to.Ptr("Microsoft.Networkdesmond-rgdesmondcentral-nsg"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/FlowLogs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw/FlowLogs/fl"),
			Location: to.Ptr("centralus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.FlowLogPropertiesFormat{
				Format: &armnetwork.FlowLogFormatParameters{
					Type:    to.Ptr(armnetwork.FlowLogFormatTypeJSON),
					Version: to.Ptr[int32](1),
				},
				Enabled:                    to.Ptr(true),
				FlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsProperties{},
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RetentionPolicy: &armnetwork.RetentionPolicyParameters{
					Days:    to.Ptr[int32](0),
					Enabled: to.Ptr(false),
				},
				StorageID:          to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/nwtest1mgvbfmqsigdxe"),
				TargetResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TargetResourceID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/desmondcentral-nsg"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FlowLog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FlowLog)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFlowLogs_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get flow log"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFlowLogsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"nw1",
		"flowLog1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.FlowLog{
			Name:     to.Ptr("flowLog1"),
			Type:     to.Ptr("Microsoft.Network/networkWatchers/FlowLogs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/тц1/FlowLogs/flowLog1"),
			Location: to.Ptr("centraluseuap"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.FlowLogPropertiesFormat{
				Format: &armnetwork.FlowLogFormatParameters{
					Type:    to.Ptr(armnetwork.FlowLogFormatTypeJSON),
					Version: to.Ptr[int32](2),
				},
				Enabled: to.Ptr(true),
				FlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsProperties{
					NetworkWatcherFlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsConfigurationProperties{
						Enabled:                  to.Ptr(false),
						TrafficAnalyticsInterval: to.Ptr[int32](60),
						WorkspaceID:              to.Ptr("-"),
						WorkspaceRegion:          to.Ptr("-"),
					},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RetentionPolicy: &armnetwork.RetentionPolicyParameters{
					Days:    to.Ptr[int32](0),
					Enabled: to.Ptr(false),
				},
				StorageID:          to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Storage/storageAccounts/wzstorage002"),
				TargetResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TargetResourceID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/networkSecurityGroups/vm5-nsg"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FlowLog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FlowLog)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFlowLogs_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete flow log"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFlowLogsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"nw1",
		"fl",
		&armnetwork.FlowLogsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogDelete.json: %v", err)
	}
}

func TestFlowLogs_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List connection monitors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewFlowLogsClient("subid", cred, &options)
	pager := client.List("rg1",
		"nw1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.FlowLogListResult{
			Value: []*armnetwork.FlowLog{
				{
					Name:     to.Ptr("flowLog1"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers/FlowLogs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/тц1/FlowLogs/flowLog1"),
					Location: to.Ptr("centraluseuap"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.FlowLogPropertiesFormat{
						Format: &armnetwork.FlowLogFormatParameters{
							Type:    to.Ptr(armnetwork.FlowLogFormatTypeJSON),
							Version: to.Ptr[int32](2),
						},
						Enabled: to.Ptr(true),
						FlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsProperties{
							NetworkWatcherFlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsConfigurationProperties{
								Enabled:                  to.Ptr(false),
								TrafficAnalyticsInterval: to.Ptr[int32](60),
								WorkspaceID:              to.Ptr("-"),
								WorkspaceRegion:          to.Ptr("-"),
							},
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RetentionPolicy: &armnetwork.RetentionPolicyParameters{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
						StorageID:          to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Storage/storageAccounts/wzstorage002"),
						TargetResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TargetResourceID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/networkSecurityGroups/vm5-nsg"),
					},
				},
				{
					Name:     to.Ptr("flowLog2"),
					Type:     to.Ptr("Microsoft.Network/networkWatchers/FlowLogs"),
					ID:       to.Ptr("/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/NetworkWatcherRG/providers/Microsoft.Network/networkWatchers/NetworkWatcher_centraluseuap/FlowLogs/flowLog2"),
					Location: to.Ptr("centraluseuap"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.FlowLogPropertiesFormat{
						Format: &armnetwork.FlowLogFormatParameters{
							Type:    to.Ptr(armnetwork.FlowLogFormatTypeJSON),
							Version: to.Ptr[int32](2),
						},
						Enabled:                    to.Ptr(true),
						FlowAnalyticsConfiguration: &armnetwork.TrafficAnalyticsProperties{},
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RetentionPolicy: &armnetwork.RetentionPolicyParameters{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
						StorageID:          to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Storage/storageAccounts/iraflowlogtest2diag"),
						TargetResourceGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TargetResourceID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/networkSecurityGroups/DSCP-test-vm1-nsg"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FlowLogListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FlowLogListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NetworkWatcherFlowLogList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of operations for a resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/OperationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.OperationListResult{
			Value: []*armnetwork.Operation{
				{
					Name: to.Ptr("Microsoft.Network/localnetworkgateways/read"),
					Display: &armnetwork.OperationDisplay{
						Description: to.Ptr("Gets LocalNetworkGateway"),
						Operation:   to.Ptr("Get LocalNetworkGateway"),
						Provider:    to.Ptr("Microsoft Network"),
						Resource:    to.Ptr("LocalNetworkGateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Network/localnetworkgateways/write"),
					Display: &armnetwork.OperationDisplay{
						Description: to.Ptr("Creates or updates an existing LocalNetworkGateway"),
						Operation:   to.Ptr("Create or update LocalNetworkGateway"),
						Provider:    to.Ptr("Microsoft Network"),
						Resource:    to.Ptr("LocalNetworkGateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Network/localnetworkgateways/delete"),
					Display: &armnetwork.OperationDisplay{
						Description: to.Ptr("Deletes LocalNetworkGateway"),
						Operation:   to.Ptr("Delete LocalNetworkGateway"),
						Provider:    to.Ptr("Microsoft Network"),
						Resource:    to.Ptr("LocalNetworkGateway"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Network/networkInterfaces/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armnetwork.OperationDisplay{
						Description: to.Ptr("Gets available metrics for the Network Interface"),
						Operation:   to.Ptr("Read Network Interface metric definitions"),
						Provider:    to.Ptr("Microsoft Network"),
						Resource:    to.Ptr("Network Interface metric definition"),
					},
					Origin: to.Ptr("system"),
					Properties: &armnetwork.OperationPropertiesFormat{
						ServiceSpecification: &armnetwork.OperationPropertiesFormatServiceSpecification{
							MetricSpecifications: []*armnetwork.MetricSpecification{
								{
									Name:            to.Ptr("BytesSentRate"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armnetwork.Availability{
										{
											BlobDuration: to.Ptr("01:00:00"),
											Retention:    to.Ptr("00:00:00"),
											TimeGrain:    to.Ptr("00:01:00"),
										},
										{
											BlobDuration: to.Ptr("1.00:00:00"),
											Retention:    to.Ptr("00:00:00"),
											TimeGrain:    to.Ptr("01:00:00"),
										}},
									Dimensions:               []*armnetwork.Dimension{},
									DisplayDescription:       to.Ptr("Number of bytes the Network Interface sent"),
									DisplayName:              to.Ptr("Bytes Sent"),
									EnableRegionalMdmAccount: to.Ptr(false),
									FillGapWithZero:          to.Ptr(false),
									IsInternal:               to.Ptr(false),
									MetricFilterPattern:      to.Ptr("^__Ready__$"),
									Unit:                     to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("BytesReceivedRate"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armnetwork.Availability{
										{
											BlobDuration: to.Ptr("01:00:00"),
											Retention:    to.Ptr("00:00:00"),
											TimeGrain:    to.Ptr("00:01:00"),
										},
										{
											BlobDuration: to.Ptr("1.00:00:00"),
											Retention:    to.Ptr("00:00:00"),
											TimeGrain:    to.Ptr("01:00:00"),
										}},
									Dimensions:               []*armnetwork.Dimension{},
									DisplayDescription:       to.Ptr("Number of bytes the Network Interface received"),
									DisplayName:              to.Ptr("Bytes Received"),
									EnableRegionalMdmAccount: to.Ptr(false),
									FillGapWithZero:          to.Ptr(false),
									IsInternal:               to.Ptr(false),
									MetricFilterPattern:      to.Ptr("^__Ready__$"),
									Unit:                     to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Network/networksecuritygroups/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armnetwork.OperationDisplay{
						Description: to.Ptr("Gets the events for network security group"),
						Operation:   to.Ptr("Get Network Security Group Event Log Definitions"),
						Provider:    to.Ptr("Microsoft Network"),
						Resource:    to.Ptr("Network Security Groups Log Definitions"),
					},
					Origin: to.Ptr("system"),
					Properties: &armnetwork.OperationPropertiesFormat{
						ServiceSpecification: &armnetwork.OperationPropertiesFormatServiceSpecification{
							LogSpecifications: []*armnetwork.LogSpecification{
								{
									Name:         to.Ptr("NetworkSecurityGroupEvent"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Network Security Group Event"),
								},
								{
									Name:         to.Ptr("NetworkSecurityGroupRuleCounter"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Network Security Group Rule Counter"),
								},
								{
									Name:         to.Ptr("NetworkSecurityGroupFlowEvent"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Network Security Group Rule Flow Event"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPe",
		&armnetwork.PrivateEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDelete.json: %v", err)
	}
}

func TestPrivateEndpoints_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testPe",
		&armnetwork.PrivateEndpointsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpoint{
			Name:     to.Ptr("testPe"),
			Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
				CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
					{
						Fqdn: to.Ptr("abc.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.4")},
					},
					{
						Fqdn: to.Ptr("abc2.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.5")},
					}},
				CustomNetworkInterfaceName: to.Ptr("testPeNic"),
				IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
					{
						Name: to.Ptr("pestaticconfig"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file"),
							PrivateIPAddress: to.Ptr("192.168.0.6"),
						},
					},
					{
						Name: to.Ptr("pestaticconfig2"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file2"),
							PrivateIPAddress: to.Ptr("192.168.0.7"),
						},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGetWithASG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private endpoint with application security groups"},
	})
	client = armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"testPe",
		&armnetwork.PrivateEndpointsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGetWithASG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpoint{
			Name:     to.Ptr("testPe"),
			Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/applicationSecurityGroup/asg1"),
					}},
				CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
					{
						Fqdn: to.Ptr("abc.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.4")},
					},
					{
						Fqdn: to.Ptr("abc2.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.5")},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGetWithASG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGetForManualApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private endpoint with manual approval connection"},
	})
	client = armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"testPe",
		&armnetwork.PrivateEndpointsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGetForManualApproval.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpoint{
			Name:     to.Ptr("testPe"),
			Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
				CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
					{
						Fqdn: to.Ptr("abc.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.4")},
					},
					{
						Fqdn: to.Ptr("abc2.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.5")},
					}},
				CustomNetworkInterfaceName: to.Ptr("testPeNic"),
				IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
					{
						Name: to.Ptr("pestaticconfig"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file"),
							PrivateIPAddress: to.Ptr("192.168.0.5"),
						},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Awaiting approval"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Pending"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please manually approve my connection."),
						},
					}},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
				ProvisioningState:             to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointGetForManualApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		armnetwork.PrivateEndpoint{
			Location: to.Ptr("eastus2euap"),
			Properties: &armnetwork.PrivateEndpointProperties{
				CustomNetworkInterfaceName: to.Ptr("testPeNic"),
				IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
					{
						Name: to.Ptr("pestaticconfig"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file"),
							PrivateIPAddress: to.Ptr("192.168.0.6"),
						},
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		},
		&armnetwork.PrivateEndpointsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpoint{
			Name:     to.Ptr("testPe"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
			Location: to.Ptr("eastus2euap"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
				CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
					{
						Fqdn: to.Ptr("abc.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.4")},
					},
					{
						Fqdn: to.Ptr("abc2.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.5")},
					}},
				CustomNetworkInterfaceName: to.Ptr("testPeNic"),
				IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
					{
						Name: to.Ptr("pestaticconfig"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file"),
							PrivateIPAddress: to.Ptr("192.168.0.6"),
						},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateWithASG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create private endpoint with application security groups"},
	})
	client = armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		armnetwork.PrivateEndpoint{
			Location: to.Ptr("eastus2euap"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/applicationSecurityGroup/asg1"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		},
		&armnetwork.PrivateEndpointsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateWithASG.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateWithASG.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpoint{
			Name:     to.Ptr("testPe"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
			Location: to.Ptr("eastus2euap"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/applicationSecurityGroup/asg1"),
					}},
				CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
					{
						Fqdn: to.Ptr("abc.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.4")},
					},
					{
						Fqdn: to.Ptr("abc2.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.5")},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateWithASG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateForManualApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create private endpoint with manual approval connection"},
	})
	client = armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		armnetwork.PrivateEndpoint{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateEndpointProperties{
				CustomNetworkInterfaceName: to.Ptr("testPeNic"),
				IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
					{
						Name: to.Ptr("pestaticconfig"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file"),
							PrivateIPAddress: to.Ptr("192.168.0.5"),
						},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please manually approve my connection."),
						},
					}},
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		},
		&armnetwork.PrivateEndpointsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateForManualApproval.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateForManualApproval.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpoint{
			Name:     to.Ptr("testPe"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateEndpointProperties{
				ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
				CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
					{
						Fqdn: to.Ptr("abc.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.4")},
					},
					{
						Fqdn: to.Ptr("abc2.cosmos.com"),
						IPAddresses: []*string{
							to.Ptr("192.168.0.5")},
					}},
				CustomNetworkInterfaceName: to.Ptr("testPeNic"),
				IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
					{
						Name: to.Ptr("pestaticconfig"),
						Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
							GroupID:          to.Ptr("file"),
							MemberName:       to.Ptr("file"),
							PrivateIPAddress: to.Ptr("192.168.0.5"),
						},
					}},
				ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
					{
						Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Awaiting approval"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Pending"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please manually approve my connection."),
						},
					}},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"),
					}},
				PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
				ProvisioningState:             to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointCreateForManualApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private endpoints in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PrivateEndpointListResult{
			Value: []*armnetwork.PrivateEndpoint{
				{
					Name:     to.Ptr("pe1"),
					Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateEndpointProperties{
						ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
						CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
							{
								Fqdn: to.Ptr("abc.cosmos.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.4")},
							},
							{
								Fqdn: to.Ptr("abc2.cosmos.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.5")},
							}},
						CustomNetworkInterfaceName: to.Ptr("testPeNic"),
						IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
							{
								Name: to.Ptr("pestaticconfig"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file"),
									PrivateIPAddress: to.Ptr("192.168.0.10"),
								},
							},
							{
								Name: to.Ptr("pestaticconfig"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file2"),
									PrivateIPAddress: to.Ptr("192.168.0.11"),
								},
							}},
						ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/pe1.nic.abcd1234"),
							}},
						PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
							{
								Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"),
									RequestMessage:       to.Ptr("Please approve my connection for pe1."),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
						},
					},
				},
				{
					Name:     to.Ptr("pe2"),
					Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateEndpointProperties{
						ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
						CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
							{
								Fqdn: to.Ptr("abc3.cosmos1.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.6")},
							},
							{
								Fqdn: to.Ptr("abc4.cosmos1.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.7")},
							}},
						CustomNetworkInterfaceName: to.Ptr("testPeNic"),
						IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
							{
								Name: to.Ptr("pestaticconfig3"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file"),
									PrivateIPAddress: to.Ptr("192.168.0.8"),
								},
							},
							{
								Name: to.Ptr("pestaticconfig4"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file2"),
									PrivateIPAddress: to.Ptr("192.168.0.9"),
								},
							}},
						ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
							{
								Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Awaiting approval"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Pending"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"),
									RequestMessage:       to.Ptr("Please manually approve my connection for pe2."),
								},
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/pe2.nic.zyxw9876"),
							}},
						PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
						ProvisioningState:             to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_ListBySubscription(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all private endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateEndpointsClient("subId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PrivateEndpointListResult{
			Value: []*armnetwork.PrivateEndpoint{
				{
					Name:     to.Ptr("pe1"),
					Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateEndpointProperties{
						ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
						CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
							{
								Fqdn: to.Ptr("abc.cosmos.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.4")},
							},
							{
								Fqdn: to.Ptr("abc2.cosmos.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.5")},
							}},
						CustomNetworkInterfaceName: to.Ptr("testPeNic"),
						IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
							{
								Name: to.Ptr("pestaticconfig1"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file"),
									PrivateIPAddress: to.Ptr("192.168.0.9"),
								},
							},
							{
								Name: to.Ptr("pestaticconfig2"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file2"),
									PrivateIPAddress: to.Ptr("192.168.0.10"),
								},
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/pe1.nic.abcd1234"),
							}},
						PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
							{
								Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"),
									RequestMessage:       to.Ptr("Please approve my connection for pe1."),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
						},
					},
				},
				{
					Name:     to.Ptr("pe2"),
					Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateEndpointProperties{
						ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
						CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
							{
								Fqdn: to.Ptr("abc3.cosmos1.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.5")},
							},
							{
								Fqdn: to.Ptr("abc4.cosmos1.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.6")},
							}},
						CustomNetworkInterfaceName: to.Ptr("testPeNic"),
						IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
							{
								Name: to.Ptr("pestaticconfig3"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file"),
									PrivateIPAddress: to.Ptr("192.168.0.11"),
								},
							},
							{
								Name: to.Ptr("pestaticconfig4"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file2"),
									PrivateIPAddress: to.Ptr("192.168.0.12"),
								},
							}},
						ManualPrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
							{
								Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Awaiting approval"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Pending"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"),
									RequestMessage:       to.Ptr("Please manually approve my connection for pe2."),
								},
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg2/provders/Microsoft.Network/networkInterfaces/pe2.nic.zyxw9876"),
							}},
						PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{},
						ProvisioningState:             to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet2"),
						},
					},
				},
				{
					Name:     to.Ptr("pe3"),
					Type:     to.Ptr("Microsoft.Network/privateEndpoints"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg3/providers/Microsoft.Network/privateEndpoints/pe3"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateEndpointProperties{
						ApplicationSecurityGroups: []*armnetwork.ApplicationSecurityGroup{},
						CustomDNSConfigs: []*armnetwork.CustomDNSConfigPropertiesFormat{
							{
								Fqdn: to.Ptr("abc5.cosmos2.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.7")},
							},
							{
								Fqdn: to.Ptr("abc6.cosmos2.com"),
								IPAddresses: []*string{
									to.Ptr("192.168.0.8")},
							}},
						CustomNetworkInterfaceName: to.Ptr("testPeNic"),
						IPConfigurations: []*armnetwork.PrivateEndpointIPConfiguration{
							{
								Name: to.Ptr("pestaticconfig5"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file"),
									PrivateIPAddress: to.Ptr("192.168.0.13"),
								},
							},
							{
								Name: to.Ptr("pestaticconfig6"),
								Properties: &armnetwork.PrivateEndpointIPConfigurationProperties{
									GroupID:          to.Ptr("file"),
									MemberName:       to.Ptr("file2"),
									PrivateIPAddress: to.Ptr("192.168.0.14"),
								},
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg3/provders/Microsoft.Network/networkInterfaces/pe3.nic.efgh5463"),
							}},
						PrivateLinkServiceConnections: []*armnetwork.PrivateLinkServiceConnection{
							{
								Properties: &armnetwork.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg3/providers/Microsoft.Network/privateLinkServices/testPls3"),
									RequestMessage:       to.Ptr("Please approve my connection for pe3."),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg3/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet3"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailablePrivateEndpointTypes_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailablePrivateEndpointTypesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available PrivateEndpoint types"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailablePrivateEndpointTypesClient("subId", cred, &options)
	pager := client.List("regionName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailablePrivateEndpointTypesGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AvailablePrivateEndpointTypesResult{
			Value: []*armnetwork.AvailablePrivateEndpointType{
				{
					Type:         to.Ptr("Microsoft.Network/availablePrivateEndpointTypes"),
					ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/availablePrivateEndpointTypes/Microsoft.Provider.resourceType"),
					ResourceName: to.Ptr("Microsoft.Provider/resourceType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailablePrivateEndpointTypesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailablePrivateEndpointTypesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailablePrivateEndpointTypesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailablePrivateEndpointTypes_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailablePrivateEndpointTypesResourceGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available PrivateEndpoint types in the resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewAvailablePrivateEndpointTypesClient("subId", cred, &options)
	pager := client.ListByResourceGroup("regionName",
		"rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailablePrivateEndpointTypesResourceGroupGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AvailablePrivateEndpointTypesResult{
			Value: []*armnetwork.AvailablePrivateEndpointType{
				{
					Type:         to.Ptr("Microsoft.Network/availablePrivateEndpointTypes"),
					ID:           to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/availablePrivateEndpointTypes/Microsoft.Provider.resourceType"),
					ResourceName: to.Ptr("Microsoft.Provider/resourceType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailablePrivateEndpointTypesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailablePrivateEndpointTypesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AvailablePrivateEndpointTypesResourceGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateDNSZoneGroups_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete private dns zone group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateDNSZoneGroupsClient("subId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPe",
		"testPdnsgroup",
		&armnetwork.PrivateDNSZoneGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupDelete.json: %v", err)
	}
}

func TestPrivateDNSZoneGroups_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private dns zone group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateDNSZoneGroupsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testPe",
		"testPdnsgroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateDNSZoneGroup{
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup"),
			Name: to.Ptr("testPdnsgroup"),
			Properties: &armnetwork.PrivateDNSZoneGroupPropertiesFormat{
				PrivateDNSZoneConfigs: []*armnetwork.PrivateDNSZoneConfig{
					{
						Properties: &armnetwork.PrivateDNSZonePropertiesFormat{
							PrivateDNSZoneID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"),
							RecordSets: []*armnetwork.RecordSet{
								{
									Fqdn: to.Ptr("abc.zone1.com"),
									IPAddresses: []*string{
										to.Ptr("10.0.0.4")},
									RecordSetName: to.Ptr("abc"),
									RecordType:    to.Ptr("A"),
								},
								{
									Fqdn: to.Ptr("abc2.zone1.com"),
									IPAddresses: []*string{
										to.Ptr("10.0.0.5")},
									RecordSetName: to.Ptr("abc2"),
									RecordType:    to.Ptr("A"),
								}},
						},
					},
					{
						Properties: &armnetwork.PrivateDNSZonePropertiesFormat{
							PrivateDNSZoneID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone2.com"),
							RecordSets: []*armnetwork.RecordSet{
								{
									Fqdn: to.Ptr("abc.zone2.com"),
									IPAddresses: []*string{
										to.Ptr("10.0.0.6")},
									RecordSetName: to.Ptr("abc"),
									RecordType:    to.Ptr("A"),
								},
								{
									Fqdn: to.Ptr("abc2.zone2.com"),
									IPAddresses: []*string{
										to.Ptr("10.0.0.7")},
									RecordSetName: to.Ptr("abc2"),
									RecordType:    to.Ptr("A"),
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateDNSZoneGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateDNSZoneGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateDNSZoneGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create private dns zone group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateDNSZoneGroupsClient("subId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPe",
		"testPdnsgroup",
		armnetwork.PrivateDNSZoneGroup{
			Properties: &armnetwork.PrivateDNSZoneGroupPropertiesFormat{
				PrivateDNSZoneConfigs: []*armnetwork.PrivateDNSZoneConfig{
					{
						Properties: &armnetwork.PrivateDNSZonePropertiesFormat{
							PrivateDNSZoneID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"),
						},
					}},
			},
		},
		&armnetwork.PrivateDNSZoneGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateDNSZoneGroup{
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup"),
			Name: to.Ptr("testPdnsgroup"),
			Properties: &armnetwork.PrivateDNSZoneGroupPropertiesFormat{
				PrivateDNSZoneConfigs: []*armnetwork.PrivateDNSZoneConfig{
					{
						Properties: &armnetwork.PrivateDNSZonePropertiesFormat{
							PrivateDNSZoneID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"),
							RecordSets: []*armnetwork.RecordSet{
								{
									Fqdn: to.Ptr("abc.zone1.com"),
									IPAddresses: []*string{
										to.Ptr("10.0.0.4")},
									RecordSetName: to.Ptr("abc"),
									RecordType:    to.Ptr("A"),
								},
								{
									Fqdn: to.Ptr("abc2.zone1.com"),
									IPAddresses: []*string{
										to.Ptr("10.0.0.5")},
									RecordSetName: to.Ptr("abc2"),
									RecordType:    to.Ptr("A"),
								}},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateDNSZoneGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateDNSZoneGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateDNSZoneGroups_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private endpoints in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateDNSZoneGroupsClient("subId", cred, &options)
	pager := client.List("testPe",
		"rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PrivateDNSZoneGroupListResult{
			Value: []*armnetwork.PrivateDNSZoneGroup{
				{
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup1"),
					Name: to.Ptr("testPdnsgroup1"),
					Properties: &armnetwork.PrivateDNSZoneGroupPropertiesFormat{
						PrivateDNSZoneConfigs: []*armnetwork.PrivateDNSZoneConfig{
							{
								Properties: &armnetwork.PrivateDNSZonePropertiesFormat{
									PrivateDNSZoneID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"),
									RecordSets: []*armnetwork.RecordSet{
										{
											Fqdn: to.Ptr("abc.zone1.com"),
											IPAddresses: []*string{
												to.Ptr("10.0.0.4")},
											RecordSetName: to.Ptr("abc"),
											RecordType:    to.Ptr("A"),
										},
										{
											Fqdn: to.Ptr("abc2.zone1.com"),
											IPAddresses: []*string{
												to.Ptr("10.0.0.5")},
											RecordSetName: to.Ptr("abc2"),
											RecordType:    to.Ptr("A"),
										}},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup2"),
					Name: to.Ptr("testPdnsgroup2"),
					Properties: &armnetwork.PrivateDNSZoneGroupPropertiesFormat{
						PrivateDNSZoneConfigs: []*armnetwork.PrivateDNSZoneConfig{
							{
								Properties: &armnetwork.PrivateDNSZonePropertiesFormat{
									PrivateDNSZoneID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone2.com"),
									RecordSets: []*armnetwork.RecordSet{
										{
											Fqdn: to.Ptr("abc3.zone2.com"),
											IPAddresses: []*string{
												to.Ptr("10.0.0.6")},
											RecordSetName: to.Ptr("abc3"),
											RecordType:    to.Ptr("A"),
										},
										{
											Fqdn: to.Ptr("abc4.zone2.com"),
											IPAddresses: []*string{
												to.Ptr("10.0.0.7")},
											RecordSetName: to.Ptr("abc4"),
											RecordType:    to.Ptr("A"),
										}},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateDNSZoneGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateDNSZoneGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateEndpointDnsZoneGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete private link service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPls",
		&armnetwork.PrivateLinkServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceDelete.json: %v", err)
	}
}

func TestPrivateLinkServices_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testPls",
		&armnetwork.PrivateLinkServicesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateLinkService{
			Name:     to.Ptr("testPls"),
			Type:     to.Ptr("Microsoft.Network/privateLinkServices"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateLinkServiceProperties{
				Alias: to.Ptr("ContosoService.{guid}.azure.privatelinkservice"),
				AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
					Subscriptions: []*string{
						to.Ptr("subscription1"),
						to.Ptr("subscription2")},
				},
				Fqdns: []*string{
					to.Ptr("fqdn1"),
					to.Ptr("fqdn2"),
					to.Ptr("fqdn3")},
				IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
					}},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls.nic.abcd1234"),
					}},
				PrivateEndpointConnections: []*armnetwork.PrivateEndpointConnection{
					{
						Name: to.Ptr("privateEndpointConnection"),
						Properties: &armnetwork.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armnetwork.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
							},
							PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
								Description: to.Ptr("approved it for some reason."),
								Status:      to.Ptr("Approved"),
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
					Subscriptions: []*string{
						to.Ptr("subscription1"),
						to.Ptr("subscription2"),
						to.Ptr("subscription3")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkService)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create private link service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPls",
		armnetwork.PrivateLinkService{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateLinkServiceProperties{
				AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
					Subscriptions: []*string{
						to.Ptr("subscription1"),
						to.Ptr("subscription2")},
				},
				Fqdns: []*string{
					to.Ptr("fqdn1"),
					to.Ptr("fqdn2"),
					to.Ptr("fqdn3")},
				IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
					}},
				Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
					Subscriptions: []*string{
						to.Ptr("subscription1"),
						to.Ptr("subscription2"),
						to.Ptr("subscription3")},
				},
			},
		},
		&armnetwork.PrivateLinkServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateLinkService{
			Name:     to.Ptr("testPls"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.PrivateLinkServiceProperties{
				Alias: to.Ptr("ContosoService.{guid}.azure.privatelinkservice"),
				AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
					Subscriptions: []*string{
						to.Ptr("subscription1"),
						to.Ptr("subscription2")},
				},
				Fqdns: []*string{
					to.Ptr("fqdn1"),
					to.Ptr("fqdn2"),
					to.Ptr("fqdn3")},
				IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
					{
						Name: to.Ptr("fe-lb"),
						Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
							PrivateIPAddress:          to.Ptr("10.0.1.4"),
							PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
							Subnet: &armnetwork.Subnet{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
							},
						},
					}},
				LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
					}},
				NetworkInterfaces: []*armnetwork.Interface{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls.nic.abcd1234"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
					Subscriptions: []*string{
						to.Ptr("subscription1"),
						to.Ptr("subscription2"),
						to.Ptr("subscription3")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkService)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private link service in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PrivateLinkServiceListResult{
			Value: []*armnetwork.PrivateLinkService{
				{
					Name:     to.Ptr("testPls1"),
					Type:     to.Ptr("Microsoft.Network/privateLinkServices"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateLinkServiceProperties{
						Alias: to.Ptr("ContosoService.{guid}.azure.privatelinkservice"),
						AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
							Subscriptions: []*string{
								to.Ptr("subscription1")},
						},
						Fqdns: []*string{
							to.Ptr("fqdn1"),
							to.Ptr("fqdn2")},
						IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
							{
								Name: to.Ptr("fe-lb1"),
								Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
									PrivateIPAddress:          to.Ptr("10.0.1.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb1"),
									},
								},
							}},
						LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb1"),
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls1.nic.abcd1234"),
							}},
						PrivateEndpointConnections: []*armnetwork.PrivateEndpointConnection{
							{
								Name: to.Ptr("pec1"),
								Properties: &armnetwork.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armnetwork.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe1"),
									},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description: to.Ptr("approved it for some reason."),
										Status:      to.Ptr("Approved"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
							Subscriptions: []*string{
								to.Ptr("subscription1")},
						},
					},
				},
				{
					Name:     to.Ptr("testPls2"),
					Type:     to.Ptr("Microsoft.Network/privateLinkServices"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateLinkServiceProperties{
						Alias: to.Ptr("ContosoService.{guid}.azure.privatelinkservice"),
						AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
							Subscriptions: []*string{
								to.Ptr("subscription1"),
								to.Ptr("subscription2")},
						},
						Fqdns: []*string{
							to.Ptr("fqdn1"),
							to.Ptr("fqdn2"),
							to.Ptr("fqdn3")},
						IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
							{
								Name: to.Ptr("fe-lb2"),
								Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
									PrivateIPAddress:          to.Ptr("10.0.1.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb2"),
									},
								},
							}},
						LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb2"),
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls2.nic.efgh5678"),
							}},
						PrivateEndpointConnections: []*armnetwork.PrivateEndpointConnection{
							{
								Name: to.Ptr("pec2"),
								Properties: &armnetwork.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armnetwork.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe2"),
									},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description: to.Ptr("approved it for some reason."),
										Status:      to.Ptr("Approved"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
							Subscriptions: []*string{
								to.Ptr("subscription1"),
								to.Ptr("subscription2"),
								to.Ptr("subscription3")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_ListBySubscription(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all private list service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PrivateLinkServiceListResult{
			Value: []*armnetwork.PrivateLinkService{
				{
					Name:     to.Ptr("testPls1"),
					Type:     to.Ptr("Microsoft.Network/privateLinkServices"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateLinkServiceProperties{
						Alias: to.Ptr("ContosoService.{guid}.azure.privatelinkservice"),
						AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
							Subscriptions: []*string{
								to.Ptr("subscription1"),
								to.Ptr("subscription2")},
						},
						Fqdns: []*string{
							to.Ptr("fqdn1"),
							to.Ptr("fqdn2"),
							to.Ptr("fqdn3")},
						IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
							{
								Name: to.Ptr("fe-lb1"),
								Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
									PrivateIPAddress:          to.Ptr("10.0.1.4"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb1"),
									},
								},
							}},
						LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb1"),
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls1.nic.abcd1234"),
							}},
						PrivateEndpointConnections: []*armnetwork.PrivateEndpointConnection{
							{
								Name: to.Ptr("pec1"),
								Properties: &armnetwork.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armnetwork.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe1"),
									},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description: to.Ptr("approved it for some reason."),
										Status:      to.Ptr("Approved"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
							Subscriptions: []*string{
								to.Ptr("subscription1"),
								to.Ptr("subscription2"),
								to.Ptr("subscription3")},
						},
					},
				},
				{
					Name:     to.Ptr("testPls2"),
					Type:     to.Ptr("Microsoft.Network/privateLinkServices"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/privateLinkServices/testPls2"),
					Location: to.Ptr("eastus"),
					Properties: &armnetwork.PrivateLinkServiceProperties{
						Alias: to.Ptr("ContosoService.{guid}.azure.privatelinkservice"),
						AutoApproval: &armnetwork.PrivateLinkServicePropertiesAutoApproval{
							Subscriptions: []*string{
								to.Ptr("subscription1"),
								to.Ptr("subscription2")},
						},
						Fqdns: []*string{
							to.Ptr("fqdn1"),
							to.Ptr("fqdn2")},
						IPConfigurations: []*armnetwork.PrivateLinkServiceIPConfiguration{
							{
								Name: to.Ptr("fe-lb2"),
								Properties: &armnetwork.PrivateLinkServiceIPConfigurationProperties{
									PrivateIPAddress:          to.Ptr("10.0.1.5"),
									PrivateIPAddressVersion:   to.Ptr(armnetwork.IPVersionIPv4),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
									Subnet: &armnetwork.Subnet{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb2"),
									},
								},
							}},
						LoadBalancerFrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb2"),
							}},
						NetworkInterfaces: []*armnetwork.Interface{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg2/provders/Microsoft.Network/networkInterfaces/testPls2.nic.efgh5678"),
							}},
						PrivateEndpointConnections: []*armnetwork.PrivateEndpointConnection{
							{
								Name: to.Ptr("pec1"),
								Properties: &armnetwork.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armnetwork.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/testPe2"),
									},
									PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
										Description: to.Ptr("approved it for some reason."),
										Status:      to.Ptr("Approved"),
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Visibility: &armnetwork.PrivateLinkServicePropertiesVisibility{
							Subscriptions: []*string{
								to.Ptr("subscription1"),
								to.Ptr("subscription2")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_GetPrivateEndpointConnection(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private end point connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	res, err := client.GetPrivateEndpointConnection(ctx,
		"rg1",
		"testPls",
		"testPlePeConnection",
		&armnetwork.PrivateLinkServicesClientGetPrivateEndpointConnectionOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpointConnection{
			Name: to.Ptr("testPlePeConnection"),
			Properties: &armnetwork.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armnetwork.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
				},
				PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
					Description: to.Ptr("approved it for some reason."),
					Status:      to.Ptr("Approved"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_UpdatePrivateEndpointConnection(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceUpdatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"approve or reject private end point connection for a private link service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	res, err := client.UpdatePrivateEndpointConnection(ctx,
		"rg1",
		"testPls",
		"testPlePeConnection",
		armnetwork.PrivateEndpointConnection{
			Name: to.Ptr("testPlePeConnection"),
			Properties: &armnetwork.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armnetwork.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
				},
				PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
					Description: to.Ptr("approved it for some reason."),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceUpdatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateEndpointConnection{
			Name: to.Ptr("testPlePeConnection"),
			Properties: &armnetwork.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armnetwork.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"),
				},
				PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
					Description: to.Ptr("approved it for some reason."),
					Status:      to.Ptr("Approved"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceUpdatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_DeletePrivateEndpointConnection(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"delete private end point connection for a private link service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"rg1",
		"testPls",
		"testPlePeConnection",
		&armnetwork.PrivateLinkServicesClientBeginDeletePrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkServices_ListPrivateEndpointConnections(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceListPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private link service in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	pager := client.ListPrivateEndpointConnections("rg1",
		"testPls",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceListPrivateEndpointConnection.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PrivateEndpointConnectionListResult{
			Value: []*armnetwork.PrivateEndpointConnection{
				{
					Name: to.Ptr("testPlePeConnection1"),
					Properties: &armnetwork.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armnetwork.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe1"),
						},
						PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
							Description: to.Ptr("approved it for some reason."),
							Status:      to.Ptr("Approved"),
						},
					},
				},
				{
					Name: to.Ptr("testPlePeConnection2"),
					Properties: &armnetwork.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armnetwork.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe2"),
						},
						PrivateLinkServiceConnectionState: &armnetwork.PrivateLinkServiceConnectionState{
							Description: to.Ptr("rejected by some reason."),
							Status:      to.Ptr("Rejected"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PrivateLinkServiceListPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_CheckPrivateLinkServiceVisibility(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibility.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check private link service visibility"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subid", cred, &options)
	poller, err := client.BeginCheckPrivateLinkServiceVisibility(ctx,
		"westus",
		armnetwork.CheckPrivateLinkServiceVisibilityRequest{
			PrivateLinkServiceAlias: to.Ptr("mypls.00000000-0000-0000-0000-000000000000.azure.privatelinkservice"),
		},
		&armnetwork.PrivateLinkServicesClientBeginCheckPrivateLinkServiceVisibilityOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibility.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibility.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateLinkServiceVisibility{
			Visible: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServiceVisibility) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServiceVisibility)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibility.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_CheckPrivateLinkServiceVisibilityByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibilityByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check private link service visibility"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subid", cred, &options)
	poller, err := client.BeginCheckPrivateLinkServiceVisibilityByResourceGroup(ctx,
		"westus",
		"rg1",
		armnetwork.CheckPrivateLinkServiceVisibilityRequest{
			PrivateLinkServiceAlias: to.Ptr("mypls.00000000-0000-0000-0000-000000000000.azure.privatelinkservice"),
		},
		&armnetwork.PrivateLinkServicesClientBeginCheckPrivateLinkServiceVisibilityByResourceGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibilityByResourceGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibilityByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PrivateLinkServiceVisibility{
			Visible: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServiceVisibility) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServiceVisibility)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/CheckPrivateLinkServiceVisibilityByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_ListAutoApprovedPrivateLinkServices(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AutoApprovedPrivateLinkServicesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of private link service id that can be linked to a private end point with auto approved"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	pager := client.ListAutoApprovedPrivateLinkServices("regionName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AutoApprovedPrivateLinkServicesGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AutoApprovedPrivateLinkServicesResult{
			Value: []*armnetwork.AutoApprovedPrivateLinkService{
				{
					PrivateLinkService: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"),
				},
				{
					PrivateLinkService: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"),
				},
				{
					PrivateLinkService: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls3"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoApprovedPrivateLinkServicesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoApprovedPrivateLinkServicesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AutoApprovedPrivateLinkServicesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_ListAutoApprovedPrivateLinkServicesByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AutoApprovedPrivateLinkServicesResourceGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of private link service id that can be linked to a private end point with auto approved"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPrivateLinkServicesClient("subId", cred, &options)
	pager := client.ListAutoApprovedPrivateLinkServicesByResourceGroup("regionName",
		"rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AutoApprovedPrivateLinkServicesResourceGroupGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.AutoApprovedPrivateLinkServicesResult{
			Value: []*armnetwork.AutoApprovedPrivateLinkService{
				{
					PrivateLinkService: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"),
				},
				{
					PrivateLinkService: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"),
				},
				{
					PrivateLinkService: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls3"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoApprovedPrivateLinkServicesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoApprovedPrivateLinkServicesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/AutoApprovedPrivateLinkServicesResourceGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPPrefixes_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete public IP prefix"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-ipprefix",
		&armnetwork.PublicIPPrefixesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixDelete.json: %v", err)
	}
}

func TestPublicIPPrefixes_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get public IP prefix"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-ipprefix",
		&armnetwork.PublicIPPrefixesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPPrefix{
			Name:     to.Ptr("test-ipprefix"),
			Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
				IPPrefix:               to.Ptr("192.168.254.2/30"),
				IPTags:                 []*armnetwork.IPTag{},
				PrefixLength:           to.Ptr[int32](30),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
				PublicIPAddresses: []*armnetwork.ReferencedPublicIPAddress{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
					}},
				ResourceGUID: to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.PublicIPPrefixSKU{
				Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPPrefixes_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateCustomizedValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create public IP prefix allocation method"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ipprefix",
		armnetwork.PublicIPPrefix{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
				PrefixLength:           to.Ptr[int32](30),
				PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
			},
			SKU: &armnetwork.PublicIPPrefixSKU{
				Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
				Tier: to.Ptr(armnetwork.PublicIPPrefixSKUTierRegional),
			},
		},
		&armnetwork.PublicIPPrefixesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateCustomizedValues.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateCustomizedValues.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPPrefix{
			Name:     to.Ptr("test-ipprefix"),
			Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
				IPPrefix:               to.Ptr("192.168.254.2/30"),
				IPTags:                 []*armnetwork.IPTag{},
				PrefixLength:           to.Ptr[int32](30),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
				ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.PublicIPPrefixSKU{
				Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
				Tier: to.Ptr(armnetwork.PublicIPPrefixSKUTierRegional),
			},
			Zones: []*string{
				to.Ptr("1")},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateCustomizedValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateDefaults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create public IP prefix defaults"},
	})
	client = armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-ipprefix",
		armnetwork.PublicIPPrefix{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
				PrefixLength: to.Ptr[int32](30),
			},
			SKU: &armnetwork.PublicIPPrefixSKU{
				Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
			},
		},
		&armnetwork.PublicIPPrefixesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateDefaults.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateDefaults.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPPrefix{
			Name:     to.Ptr("test-ipprefix"),
			Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
				IPPrefix:               to.Ptr("192.168.254.2/30"),
				IPTags:                 []*armnetwork.IPTag{},
				PrefixLength:           to.Ptr[int32](30),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
				ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.PublicIPPrefixSKU{
				Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixCreateDefaults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPPrefixes_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update public IP prefix tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-ipprefix",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PublicIPPrefix{
			Name:     to.Ptr("test-ipprefix"),
			Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
			Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
				IPPrefix:               to.Ptr("40.85.154.247/30"),
				IPTags:                 []*armnetwork.IPTag{},
				PrefixLength:           to.Ptr[int32](30),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
				ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
			},
			SKU: &armnetwork.PublicIPPrefixSKU{
				Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicIPPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicIPPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPPrefixes_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all public IP prefixes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPPrefixListResult{
			Value: []*armnetwork.PublicIPPrefix{
				{
					Name:     to.Ptr("test-ipprefix"),
					Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
						IPPrefix:               to.Ptr("41.85.154.247/30"),
						IPTags:                 []*armnetwork.IPTag{},
						PrefixLength:           to.Ptr[int32](30),
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
						PublicIPAddresses: []*armnetwork.ReferencedPublicIPAddress{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"),
							}},
						ResourceGUID: to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.PublicIPPrefixSKU{
						Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("ipprefix01"),
					Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPPrefixes/ipprefix01"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
						IPPrefix:               to.Ptr("40.85.154.247/30"),
						IPTags:                 []*armnetwork.IPTag{},
						PrefixLength:           to.Ptr[int32](30),
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
						ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.PublicIPPrefixSKU{
						Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("pfx"),
					Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/publicIPPrefixes/pfx"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
						IPPrefix: to.Ptr("25.101.84.16/30"),
						IPTags:   []*armnetwork.IPTag{},
						LoadBalancerFrontendIPConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/loadBalancers/lb-pfx/frontendIPConfigurations/ipconfig1"),
						},
						PrefixLength:           to.Ptr[int32](30),
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
						ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.PublicIPPrefixSKU{
						Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPPrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPPrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicIPPrefixes_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List resource group public IP prefixes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewPublicIPPrefixesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.PublicIPPrefixListResult{
			Value: []*armnetwork.PublicIPPrefix{
				{
					Name:     to.Ptr("test-ipprefix"),
					Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
						IPPrefix: to.Ptr("40.85.154.2/30"),
						IPTags: []*armnetwork.IPTag{
							{
								IPTagType: to.Ptr("FirstPartyUsage"),
								Tag:       to.Ptr("SQL"),
							}},
						PrefixLength:           to.Ptr[int32](30),
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
						ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.PublicIPPrefixSKU{
						Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("ipprefix03"),
					Type:     to.Ptr("Microsoft.Network/publicIPPrefixes"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/ipprefix03"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-00000000\""),
					Properties: &armnetwork.PublicIPPrefixPropertiesFormat{
						IPPrefix:               to.Ptr("40.85.153.2/31"),
						IPTags:                 []*armnetwork.IPTag{},
						PrefixLength:           to.Ptr[int32](31),
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						PublicIPAddressVersion: to.Ptr(armnetwork.IPVersionIPv4),
						ResourceGUID:           to.Ptr("00000000-0000-0000-0000-00000000"),
					},
					SKU: &armnetwork.PublicIPPrefixSKU{
						Name: to.Ptr(armnetwork.PublicIPPrefixSKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicIPPrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicIPPrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/PublicIpPrefixList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilters_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFiltersClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"filterName",
		&armnetwork.RouteFiltersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterDelete.json: %v", err)
	}
}

func TestRouteFilters_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFiltersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"filterName",
		&armnetwork.RouteFiltersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteFilter{
			Name:     to.Ptr("filterName"),
			Type:     to.Ptr("Microsoft.Network/routeFilters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RouteFilterPropertiesFormat{
				Peerings:          []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Rules: []*armnetwork.RouteFilterRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
						Name: to.Ptr("ruleName"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.RouteFilterRulePropertiesFormat{
							Access: to.Ptr(armnetwork.AccessAllow),
							Communities: []*string{
								to.Ptr("12076:5030"),
								to.Ptr("12076:5040")},
							ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilters_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFiltersClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"filterName",
		armnetwork.RouteFilter{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.RouteFilterPropertiesFormat{
				Rules: []*armnetwork.RouteFilterRule{
					{
						Name: to.Ptr("ruleName"),
						Properties: &armnetwork.RouteFilterRulePropertiesFormat{
							Access: to.Ptr(armnetwork.AccessAllow),
							Communities: []*string{
								to.Ptr("12076:5030"),
								to.Ptr("12076:5040")},
							RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
						},
					}},
			},
		},
		&armnetwork.RouteFiltersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteFilter{
			Name:     to.Ptr("filterName"),
			Type:     to.Ptr("Microsoft.Network/routeFilters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RouteFilterPropertiesFormat{
				Peerings:          []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Rules: []*armnetwork.RouteFilterRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
						Name: to.Ptr("ruleName"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.RouteFilterRulePropertiesFormat{
							Access: to.Ptr(armnetwork.AccessAllow),
							Communities: []*string{
								to.Ptr("12076:5030"),
								to.Ptr("12076:5040")},
							ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilters_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update route filter tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFiltersClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"filterName",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteFilter{
			Name:     to.Ptr("filterName"),
			Type:     to.Ptr("Microsoft.Network/routeFilters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RouteFilterPropertiesFormat{
				Peerings:          []*armnetwork.ExpressRouteCircuitPeering{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Rules: []*armnetwork.RouteFilterRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
						Name: to.Ptr("ruleName"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.RouteFilterRulePropertiesFormat{
							Access: to.Ptr(armnetwork.AccessAllow),
							Communities: []*string{
								to.Ptr("12076:5030")},
							ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilters_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFiltersClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.RouteFilterListResult{
			Value: []*armnetwork.RouteFilter{
				{
					Name:     to.Ptr("filterName"),
					Type:     to.Ptr("Microsoft.Network/routeFilters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.RouteFilterPropertiesFormat{
						Peerings:          []*armnetwork.ExpressRouteCircuitPeering{},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Rules: []*armnetwork.RouteFilterRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
								Name: to.Ptr("ruleName"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.RouteFilterRulePropertiesFormat{
									Access: to.Ptr(armnetwork.AccessAllow),
									Communities: []*string{
										to.Ptr("12076:5030"),
										to.Ptr("12076:5040")},
									ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteFilterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteFilterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilters_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFiltersClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.RouteFilterListResult{
			Value: []*armnetwork.RouteFilter{
				{
					Name:     to.Ptr("filterName"),
					Type:     to.Ptr("Microsoft.Network/routeFilters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.RouteFilterPropertiesFormat{
						Peerings:          []*armnetwork.ExpressRouteCircuitPeering{},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Rules: []*armnetwork.RouteFilterRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
								Name: to.Ptr("ruleName"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.RouteFilterRulePropertiesFormat{
									Access: to.Ptr(armnetwork.AccessAllow),
									Communities: []*string{
										to.Ptr("12076:5030"),
										to.Ptr("12076:5040")},
									ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteFilterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteFilterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilterRules_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFilterRulesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"filterName",
		"ruleName",
		&armnetwork.RouteFilterRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleDelete.json: %v", err)
	}
}

func TestRouteFilterRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFilterRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"filterName",
		"filterName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteFilterRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
			Name: to.Ptr("ruleName"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RouteFilterRulePropertiesFormat{
				Access: to.Ptr(armnetwork.AccessAllow),
				Communities: []*string{
					to.Ptr("12076:5030"),
					to.Ptr("12076:5040")},
				ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteFilterRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteFilterRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilterRules_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFilterRulesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"filterName",
		"ruleName",
		armnetwork.RouteFilterRule{
			Properties: &armnetwork.RouteFilterRulePropertiesFormat{
				Access: to.Ptr(armnetwork.AccessAllow),
				Communities: []*string{
					to.Ptr("12076:5030"),
					to.Ptr("12076:5040")},
				RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
			},
		},
		&armnetwork.RouteFilterRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteFilterRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
			Name: to.Ptr("ruleName"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RouteFilterRulePropertiesFormat{
				Access: to.Ptr(armnetwork.AccessAllow),
				Communities: []*string{
					to.Ptr("12076:5030"),
					to.Ptr("12076:5040")},
				ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteFilterRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteFilterRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteFilterRules_ListByRouteFilter(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleListByRouteFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteFilterRuleListByRouteFilter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteFilterRulesClient("subid", cred, &options)
	pager := client.ListByRouteFilter("rg1",
		"filterName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleListByRouteFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.RouteFilterRuleListResult{
			Value: []*armnetwork.RouteFilterRule{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeFilters/filterName/routeFilterRules/ruleName"),
					Name: to.Ptr("ruleName"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.RouteFilterRulePropertiesFormat{
						Access: to.Ptr(armnetwork.AccessAllow),
						Communities: []*string{
							to.Ptr("12076:5030"),
							to.Ptr("12076:5040")},
						ProvisioningState:   to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RouteFilterRuleType: to.Ptr(armnetwork.RouteFilterRuleTypeCommunity),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteFilterRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteFilterRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteFilterRuleListByRouteFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteTables_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete route table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteTablesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testrt",
		&armnetwork.RouteTablesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableDelete.json: %v", err)
	}
}

func TestRouteTables_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get route table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteTablesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testrt",
		&armnetwork.RouteTablesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteTable{
			Name:     to.Ptr("testrt"),
			Type:     to.Ptr("Microsoft.Network/routeTables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.RouteTablePropertiesFormat{
				DisableBgpRoutePropagation: to.Ptr(false),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes: []*armnetwork.Route{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
						Name: to.Ptr("route1"),
						Properties: &armnetwork.RoutePropertiesFormat{
							AddressPrefix:     to.Ptr("10.0.3.0/24"),
							NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteTable)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteTables_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create route table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteTablesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testrt",
		armnetwork.RouteTable{
			Location: to.Ptr("westus"),
		},
		&armnetwork.RouteTablesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteTable{
			Name:     to.Ptr("testrt"),
			Type:     to.Ptr("Microsoft.Network/routeTables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.RouteTablePropertiesFormat{
				DisableBgpRoutePropagation: to.Ptr(true),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes:                     []*armnetwork.Route{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteTable)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreateWithRoute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create route table with route"},
	})
	client = armnetwork.NewRouteTablesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testrt",
		armnetwork.RouteTable{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.RouteTablePropertiesFormat{
				DisableBgpRoutePropagation: to.Ptr(true),
				Routes: []*armnetwork.Route{
					{
						Name: to.Ptr("route1"),
						Properties: &armnetwork.RoutePropertiesFormat{
							AddressPrefix: to.Ptr("10.0.3.0/24"),
							NextHopType:   to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
						},
					}},
			},
		},
		&armnetwork.RouteTablesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreateWithRoute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreateWithRoute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteTable{
			Name:     to.Ptr("testrt"),
			Type:     to.Ptr("Microsoft.Network/routeTables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.RouteTablePropertiesFormat{
				DisableBgpRoutePropagation: to.Ptr(true),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes: []*armnetwork.Route{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
						Name: to.Ptr("route1"),
						Properties: &armnetwork.RoutePropertiesFormat{
							AddressPrefix:     to.Ptr("10.0.3.0/24"),
							NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteTable)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableCreateWithRoute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteTables_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update route table tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteTablesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"testrt",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RouteTable{
			Name:     to.Ptr("testrt"),
			Type:     to.Ptr("Microsoft.Network/routeTables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.RouteTablePropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes:            []*armnetwork.Route{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RouteTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RouteTable)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteTables_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List route tables in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteTablesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.RouteTableListResult{
			Value: []*armnetwork.RouteTable{
				{
					Name:     to.Ptr("testrt"),
					Type:     to.Ptr("Microsoft.Network/routeTables"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.RouteTablePropertiesFormat{
						DisableBgpRoutePropagation: to.Ptr(true),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Routes: []*armnetwork.Route{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
								Name: to.Ptr("route1"),
								Properties: &armnetwork.RoutePropertiesFormat{
									AddressPrefix:     to.Ptr("10.0.3.0/24"),
									NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
					},
				},
				{
					Name:     to.Ptr("testrt2"),
					Type:     to.Ptr("Microsoft.Network/routeTables"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.RouteTablePropertiesFormat{
						DisableBgpRoutePropagation: to.Ptr(true),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Routes:                     []*armnetwork.Route{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteTableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRouteTables_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all route tables"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRouteTablesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.RouteTableListResult{
			Value: []*armnetwork.RouteTable{
				{
					Name:     to.Ptr("testrt"),
					Type:     to.Ptr("Microsoft.Network/routeTables"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.RouteTablePropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Routes: []*armnetwork.Route{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
								Name: to.Ptr("route1"),
								Properties: &armnetwork.RoutePropertiesFormat{
									AddressPrefix:     to.Ptr("10.0.3.0/24"),
									NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
					},
				},
				{
					Name:     to.Ptr("testrt3"),
					Type:     to.Ptr("Microsoft.Network/routeTables"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/routeTables/testrt3"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.RouteTablePropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Routes:            []*armnetwork.Route{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteTableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete route"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testrt",
		"route1",
		&armnetwork.RoutesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteDelete.json: %v", err)
	}
}

func TestRoutes_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get route"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testrt",
		"route1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Route{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
			Name: to.Ptr("route1"),
			Properties: &armnetwork.RoutePropertiesFormat{
				AddressPrefix:     to.Ptr("10.0.3.0/24"),
				NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeInternet),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Route) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Route)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create route"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testrt",
		"route1",
		armnetwork.Route{
			Properties: &armnetwork.RoutePropertiesFormat{
				AddressPrefix: to.Ptr("10.0.3.0/24"),
				NextHopType:   to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
			},
		},
		&armnetwork.RoutesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Route{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
			Name: to.Ptr("route1"),
			Properties: &armnetwork.RoutePropertiesFormat{
				AddressPrefix:     to.Ptr("10.0.3.0/24"),
				NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Route) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Route)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List routes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutesClient("subid", cred, &options)
	pager := client.List("rg1",
		"testrt",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.RouteListResult{
			Value: []*armnetwork.Route{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1"),
					Name: to.Ptr("route1"),
					Properties: &armnetwork.RoutePropertiesFormat{
						AddressPrefix:     to.Ptr("10.0.3.0/24"),
						NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeInternet),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route2"),
					Name: to.Ptr("route2"),
					Properties: &armnetwork.RoutePropertiesFormat{
						AddressPrefix:     to.Ptr("10.0.2.0/24"),
						NextHopType:       to.Ptr(armnetwork.RouteNextHopTypeVirtualNetworkGateway),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RouteTableRouteList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPartnerProviders_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Security Partner Provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityPartnerProvidersClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"securityPartnerProvider",
		&armnetwork.SecurityPartnerProvidersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderDelete.json: %v", err)
	}
}

func TestSecurityPartnerProviders_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Security Partner Provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityPartnerProvidersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"securityPartnerProvider",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityPartnerProvider{
			Name:     to.Ptr("securityPartnerProvider"),
			Type:     to.Ptr("Microsoft.Network/securityPartnerProviders"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.SecurityPartnerProviderPropertiesFormat{
				ConnectionStatus:     to.Ptr(armnetwork.SecurityPartnerProviderConnectionStatusUnknown),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityProviderName: to.Ptr(armnetwork.SecurityProviderNameZScaler),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityPartnerProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityPartnerProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPartnerProviders_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Security Partner Provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityPartnerProvidersClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"securityPartnerProvider",
		armnetwork.SecurityPartnerProvider{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.SecurityPartnerProviderPropertiesFormat{
				SecurityProviderName: to.Ptr(armnetwork.SecurityProviderNameZScaler),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		},
		&armnetwork.SecurityPartnerProvidersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityPartnerProvider{
			Name:     to.Ptr("securityPartnerProvider"),
			Type:     to.Ptr("Microsoft.Network/securityPartnerProviders"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.SecurityPartnerProviderPropertiesFormat{
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityProviderName: to.Ptr(armnetwork.SecurityProviderNameZScaler),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityPartnerProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityPartnerProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPartnerProviders_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Security Partner Provider Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityPartnerProvidersClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"securityPartnerProvider",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.SecurityPartnerProvider{
			Name:     to.Ptr("fw1"),
			Type:     to.Ptr("Microsoft.Network/securityPartnerProviders"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/azfwtest/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider"),
			Location: to.Ptr("brazilsouth"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.SecurityPartnerProviderPropertiesFormat{
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SecurityProviderName: to.Ptr(armnetwork.SecurityProviderNameZScaler),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityPartnerProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityPartnerProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPartnerProviders_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Security Partner Providers for a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityPartnerProvidersClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SecurityPartnerProviderListResult{
			Value: []*armnetwork.SecurityPartnerProvider{
				{
					Name:     to.Ptr("securityPartnerProvider"),
					Type:     to.Ptr("Microsoft.Network/securityPartnerProviders"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.SecurityPartnerProviderPropertiesFormat{
						ConnectionStatus:     to.Ptr(armnetwork.SecurityPartnerProviderConnectionStatusUnknown),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecurityProviderName: to.Ptr(armnetwork.SecurityProviderNameZScaler),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityPartnerProviderListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityPartnerProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPartnerProviders_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Security Partner Providers for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSecurityPartnerProvidersClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SecurityPartnerProviderListResult{
			Value: []*armnetwork.SecurityPartnerProvider{
				{
					Name:     to.Ptr("securityPartnerProvider"),
					Type:     to.Ptr("Microsoft.Network/securityPartnerProviders"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.SecurityPartnerProviderPropertiesFormat{
						ConnectionStatus:     to.Ptr(armnetwork.SecurityPartnerProviderConnectionStatusUnknown),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						SecurityProviderName: to.Ptr(armnetwork.SecurityProviderNameZScaler),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityPartnerProviderListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityPartnerProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SecurityPartnerProviderListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBgpServiceCommunities_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceCommunityList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceCommunityList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewBgpServiceCommunitiesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceCommunityList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.BgpServiceCommunityListResult{
			Value: []*armnetwork.BgpServiceCommunity{
				{
					Name: to.Ptr("skype"),
					Type: to.Ptr("Microsoft.Network/bgpServiceCommunities"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Network/bgpServiceCommunities/skype"),
					Properties: &armnetwork.BgpServiceCommunityPropertiesFormat{
						BgpCommunities: []*armnetwork.BGPCommunity{
							{
								CommunityName: to.Ptr("Skype For Business Online"),
								CommunityPrefixes: []*string{
									to.Ptr("13.67.56.225/32"),
									to.Ptr("13.67.186.105/32")},
								CommunityValue:         to.Ptr("12076:5030"),
								IsAuthorizedToUse:      to.Ptr(true),
								ServiceGroup:           to.Ptr("O365"),
								ServiceSupportedRegion: to.Ptr("Global"),
							}},
						ServiceName: to.Ptr("skype"),
					},
				},
				{
					Name: to.Ptr("exchange"),
					Type: to.Ptr("Microsoft.Network/bgpServiceCommunities"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Network/bgpServiceCommunities/exchange"),
					Properties: &armnetwork.BgpServiceCommunityPropertiesFormat{
						BgpCommunities: []*armnetwork.BGPCommunity{
							{
								CommunityName: to.Ptr("Exchange Online"),
								CommunityPrefixes: []*string{
									to.Ptr("13.67.56.225/32"),
									to.Ptr("13.67.186.105/32")},
								CommunityValue:         to.Ptr("12076:5040"),
								IsAuthorizedToUse:      to.Ptr(true),
								ServiceGroup:           to.Ptr("O365"),
								ServiceSupportedRegion: to.Ptr("Global"),
							}},
						ServiceName: to.Ptr("exchange"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BgpServiceCommunityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BgpServiceCommunityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceCommunityList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicies_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service endpoint policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"serviceEndpointPolicy1",
		&armnetwork.ServiceEndpointPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDelete.json: %v", err)
	}
}

func TestServiceEndpointPolicies_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get service endPoint Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testServiceEndpointPolicy",
		&armnetwork.ServiceEndpointPoliciesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceEndpointPolicy{
			Name:     to.Ptr("testServiceEndpointPolicy"),
			Type:     to.Ptr("Microsoft.Network/serviceEndpointPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testServiceEndpointPolicy"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
				ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
					{
						Name: to.Ptr("StorageServiceEndpointPolicyDefinition"),
						Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
							Description: to.Ptr("Storage Service EndpointPolicy Definition"),
							Service:     to.Ptr("Microsoft.Storage"),
							ServiceResources: []*string{
								to.Ptr("/subscriptions/subid1"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
						},
					}},
				Subnets: []*armnetwork.Subnet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceEndpointPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceEndpointPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create service endpoint policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPolicy",
		armnetwork.ServiceEndpointPolicy{
			Location: to.Ptr("westus"),
		},
		&armnetwork.ServiceEndpointPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceEndpointPolicy{
			Name:     to.Ptr("testnsg"),
			Type:     to.Ptr("Microsoft.Network/ServiceEndpointPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ServiceEndpointPolicies/testpolicy"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
				ProvisioningState:                to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:                     to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
				ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{},
				Subnets:                          []*armnetwork.Subnet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceEndpointPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceEndpointPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreateWithDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create service endpoint policy with definition"},
	})
	client = armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPolicy",
		armnetwork.ServiceEndpointPolicy{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
				ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
					{
						Name: to.Ptr("StorageServiceEndpointPolicyDefinition"),
						Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
							Description: to.Ptr("Storage Service EndpointPolicy Definition"),
							Service:     to.Ptr("Microsoft.Storage"),
							ServiceResources: []*string{
								to.Ptr("/subscriptions/subid1"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
						},
					}},
			},
		},
		&armnetwork.ServiceEndpointPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreateWithDefinition.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreateWithDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceEndpointPolicy{
			Name:     to.Ptr("testnsg"),
			Type:     to.Ptr("Microsoft.Network/ServiceEndpointPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ServiceEndpointPolicies/testpolicy"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
				ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
					{
						Name: to.Ptr("StorageServiceEndpointPolicyDefinition"),
						Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
							Description: to.Ptr("Storage Service EndpointPolicy Definition"),
							Service:     to.Ptr("Microsoft.Storage"),
							ServiceResources: []*string{
								to.Ptr("/subscriptions/subid1"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
						},
					}},
				Subnets: []*armnetwork.Subnet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceEndpointPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceEndpointPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyCreateWithDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicies_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update service endpoint policy tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"testServiceEndpointPolicy",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceEndpointPolicy{
			Name:     to.Ptr("testServiceEndpointPolicy"),
			Type:     to.Ptr("Microsoft.Network/serviceEndpointPolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testServiceEndpointPolicy"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
					{
						Name: to.Ptr("StorageServiceEndpointPolicyDefinition"),
						Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
							Description: to.Ptr("Storage Service EndpointPolicy Definition"),
							Service:     to.Ptr("Microsoft.Storage"),
							ServiceResources: []*string{
								to.Ptr("/subscriptions/subid1"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
								to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
						},
					}},
				Subnets: []*armnetwork.Subnet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceEndpointPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceEndpointPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicies_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all service endpoint policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ServiceEndpointPolicyListResult{
			Value: []*armnetwork.ServiceEndpointPolicy{
				{
					Name:     to.Ptr("testPolicy"),
					Type:     to.Ptr("Microsoft.Network/serviceEndpointPolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testPolicy"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
						ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
							{
								Name: to.Ptr("StorageServiceEndpointPolicyDefinition1"),
								Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
									Description: to.Ptr("Storage Service EndpointPolicy Definition"),
									Service:     to.Ptr("Microsoft.Storage"),
									ServiceResources: []*string{
										to.Ptr("/subscriptions/subid1"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
								},
							}},
						Subnets: []*armnetwork.Subnet{},
					},
				},
				{
					Name:     to.Ptr("testPolicy1"),
					Type:     to.Ptr("Microsoft.Network/serviceEndpointPolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/serviceEndpointPolicies/testPolicy2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
						ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
							{
								Name: to.Ptr("StorageServiceEndpointPolicyDefinition2"),
								Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
									Description: to.Ptr("Storage Service EndpointPolicy Definition"),
									Service:     to.Ptr("Microsoft.Storage"),
									ServiceResources: []*string{
										to.Ptr("/subscriptions/subid1"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
								},
							}},
						Subnets: []*armnetwork.Subnet{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceEndpointPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceEndpointPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicies_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List resource group service endpoint policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPoliciesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ServiceEndpointPolicyListResult{
			Value: []*armnetwork.ServiceEndpointPolicy{
				{
					Name:     to.Ptr("testServiceEndpointPolicy"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testServiceEndpointPolicy"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
						ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
							{
								Name: to.Ptr("StorageServiceEndpointPolicyDefinition"),
								Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
									Description: to.Ptr("Storage Service EndpointPolicy Definition"),
									Service:     to.Ptr("Microsoft.Storage"),
									ServiceResources: []*string{
										to.Ptr("/subscriptions/subid1"),
										to.Ptr("/subscriptions/subid1resourceGroups/storageRg"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
								},
							}},
						Subnets: []*armnetwork.Subnet{},
					},
				},
				{
					Name:     to.Ptr("testServiceEndpointPolicy1"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testServiceEndpointPolicy1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.ServiceEndpointPolicyPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
						ServiceEndpointPolicyDefinitions: []*armnetwork.ServiceEndpointPolicyDefinition{
							{
								Name: to.Ptr("StorageServiceEndpointPolicyDefinition1"),
								Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
									Description: to.Ptr("Storage Service EndpointPolicy Definition"),
									Service:     to.Ptr("Microsoft.Storage"),
									ServiceResources: []*string{
										to.Ptr("/subscriptions/subid1"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
										to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
								},
							}},
						Subnets: []*armnetwork.Subnet{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceEndpointPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceEndpointPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicyDefinitions_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service endpoint policy definitions from service endpoint policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPolicyDefinitionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"testPolicy",
		"testDefinition",
		&armnetwork.ServiceEndpointPolicyDefinitionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionDelete.json: %v", err)
	}
}

func TestServiceEndpointPolicyDefinitions_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get service endpoint definition in service endpoint policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPolicyDefinitionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testPolicy",
		"testDefinition",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceEndpointPolicyDefinition{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testPolicy/serviceEndpointPolicyDefinitions/testDefinition"),
			Name: to.Ptr("testDefinition"),
			Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
				Description: to.Ptr("Storage Service EndpointPolicy Definition"),
				Service:     to.Ptr("Microsoft.Storage"),
				ServiceResources: []*string{
					to.Ptr("/subscriptions/subid1"),
					to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
					to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceEndpointPolicyDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceEndpointPolicyDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicyDefinitions_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create service endpoint policy definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPolicyDefinitionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"testPolicy",
		"testDefinition",
		armnetwork.ServiceEndpointPolicyDefinition{
			Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
				Description: to.Ptr("Storage Service EndpointPolicy Definition"),
				Service:     to.Ptr("Microsoft.Storage"),
				ServiceResources: []*string{
					to.Ptr("/subscriptions/subid1"),
					to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
					to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
			},
		},
		&armnetwork.ServiceEndpointPolicyDefinitionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceEndpointPolicyDefinition{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testPolicy/serviceEndpointPolicyDefinitions/testDefinition"),
			Name: to.Ptr("testDefinition"),
			Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
				Description: to.Ptr("Storage Service EndpointPolicy Definition"),
				Service:     to.Ptr("Microsoft.Storage"),
				ServiceResources: []*string{
					to.Ptr("/subscriptions/subid1"),
					to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
					to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceEndpointPolicyDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceEndpointPolicyDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceEndpointPolicyDefinitions_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List service endpoint definitions in service end point policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceEndpointPolicyDefinitionsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		"testPolicy",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ServiceEndpointPolicyDefinitionListResult{
			Value: []*armnetwork.ServiceEndpointPolicyDefinition{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/serviceEndpointPolicies/testPolicy/serviceEndpointPolicyDefinitions/testDef"),
					Name: to.Ptr("testDef"),
					Properties: &armnetwork.ServiceEndpointPolicyDefinitionPropertiesFormat{
						Description: to.Ptr("Storage Service EndpointPolicy Definition"),
						Service:     to.Ptr("Microsoft.Storage"),
						ServiceResources: []*string{
							to.Ptr("/subscriptions/subid1"),
							to.Ptr("/subscriptions/subid1/resourceGroups/storageRg"),
							to.Ptr("/subscriptions/subid1/resourceGroups/storageRg/providers/Microsoft.Storage/storageAccounts/stAccount")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceEndpointPolicyDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceEndpointPolicyDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceEndpointPolicyDefinitionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTags_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of service tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceTagsClient("subId", cred, &options)
	res, err := client.List(ctx,
		"westcentralus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceTagsListResult{
			Name:         to.Ptr("public"),
			Type:         to.Ptr("Microsoft.Network/serviceTags"),
			ChangeNumber: to.Ptr("63"),
			Cloud:        to.Ptr("Public"),
			ID:           to.Ptr("/subscriptions/subId/providers/Microsoft.Network/serviceTags/public"),
			Values: []*armnetwork.ServiceTagInformation{
				{
					Name: to.Ptr("ApiManagement"),
					ID:   to.Ptr("ApiManagement"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("13.64.39.16/32"),
							to.Ptr("40.74.146.80/31"),
							to.Ptr("40.74.147.32/28")},
						ChangeNumber:  to.Ptr("7"),
						Region:        to.Ptr(""),
						SystemService: to.Ptr("AzureApiManagement"),
					},
				},
				{
					Name: to.Ptr("ApiManagement.AustraliaCentral"),
					ID:   to.Ptr("ApiManagement.AustraliaCentral"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("20.36.106.68/31"),
							to.Ptr("20.36.107.176/28")},
						ChangeNumber:  to.Ptr("2"),
						Region:        to.Ptr("australiacentral"),
						SystemService: to.Ptr("AzureApiManagement"),
					},
				},
				{
					Name: to.Ptr("AppService"),
					ID:   to.Ptr("AppService"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("13.64.73.110/32"),
							to.Ptr("191.235.208.12/32"),
							to.Ptr("191.235.215.184/32")},
						ChangeNumber:  to.Ptr("13"),
						Region:        to.Ptr(""),
						SystemService: to.Ptr("AzureAppService"),
					},
				},
				{
					Name: to.Ptr("ServiceBus"),
					ID:   to.Ptr("ServiceBus"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("23.98.82.96/29"),
							to.Ptr("40.68.127.68/32"),
							to.Ptr("40.70.146.64/29")},
						ChangeNumber:  to.Ptr("10"),
						Region:        to.Ptr(""),
						SystemService: to.Ptr("AzureServiceBus"),
					},
				},
				{
					Name: to.Ptr("ServiceBus.EastUS2"),
					ID:   to.Ptr("ServiceBus.EastUS2"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("13.68.110.36/32"),
							to.Ptr("40.70.146.64/29")},
						ChangeNumber:  to.Ptr("1"),
						Region:        to.Ptr("eastus2"),
						SystemService: to.Ptr("AzureServiceBus"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceTagsListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceTagsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTagInformation_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of service tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceTagInformationClient("subid", cred, &options)
	pager := client.List("westeurope",
		&armnetwork.ServiceTagInformationClientListOptions{NoAddressPrefixes: nil,
			TagName: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResult.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ServiceTagInformationListResult{
			Value: []*armnetwork.ServiceTagInformation{
				{
					Name: to.Ptr("ApiManagement"),
					ID:   to.Ptr("ApiManagement"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("13.64.39.16/32"),
							to.Ptr("40.74.146.80/31"),
							to.Ptr("40.74.147.32/28")},
						ChangeNumber:  to.Ptr("7"),
						Region:        to.Ptr(""),
						SystemService: to.Ptr("AzureApiManagement"),
					},
				},
				{
					Name: to.Ptr("ApiManagement.AustraliaCentral"),
					ID:   to.Ptr("ApiManagement.AustraliaCentral"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("20.36.106.68/31"),
							to.Ptr("20.36.107.176/28")},
						ChangeNumber:  to.Ptr("2"),
						Region:        to.Ptr("australiacentral"),
						SystemService: to.Ptr("AzureApiManagement"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceTagInformationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceTagInformationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResultWithNoAddressPrefixes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of service tags with no address prefixes"},
	})
	client = armnetwork.NewServiceTagInformationClient("subid", cred, &options)
	pager = client.List("westeurope",
		&armnetwork.ServiceTagInformationClientListOptions{NoAddressPrefixes: to.Ptr(true),
			TagName: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResultWithNoAddressPrefixes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ServiceTagInformationListResult{
			Value: []*armnetwork.ServiceTagInformation{
				{
					Name: to.Ptr("ApiManagement"),
					ID:   to.Ptr("ApiManagement"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{},
						ChangeNumber:    to.Ptr("7"),
						Region:          to.Ptr(""),
						SystemService:   to.Ptr("AzureApiManagement"),
					},
				},
				{
					Name: to.Ptr("ApiManagement.AustraliaCentral"),
					ID:   to.Ptr("ApiManagement.AustraliaCentral"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{},
						ChangeNumber:    to.Ptr("2"),
						Region:          to.Ptr("australiacentral"),
						SystemService:   to.Ptr("AzureApiManagement"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceTagInformationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceTagInformationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResultWithNoAddressPrefixes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResultWithTagname.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of service tags with tag name."},
	})
	client = armnetwork.NewServiceTagInformationClient("subid", cred, &options)
	pager = client.List("westeurope",
		&armnetwork.ServiceTagInformationClientListOptions{NoAddressPrefixes: nil,
			TagName: to.Ptr("ApiManagement"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResultWithTagname.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ServiceTagInformationListResult{
			Value: []*armnetwork.ServiceTagInformation{
				{
					Name: to.Ptr("ApiManagement"),
					ID:   to.Ptr("ApiManagement"),
					Properties: &armnetwork.ServiceTagInformationPropertiesFormat{
						AddressPrefixes: []*string{
							to.Ptr("13.64.39.16/32"),
							to.Ptr("40.74.146.80/31"),
							to.Ptr("40.74.147.32/28")},
						ChangeNumber:  to.Ptr("7"),
						Region:        to.Ptr(""),
						SystemService: to.Ptr("AzureApiManagement"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceTagInformationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceTagInformationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ServiceTagInformationListResultWithTagname.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/UsageList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List usages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewUsagesClient("subid", cred, &options)
	pager := client.List("westus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/UsageList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.UsagesListResult{
			Value: []*armnetwork.Usage{
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Virtual Networks"),
						Value:          to.Ptr("VirtualNetworks"),
					},
					CurrentValue: to.Ptr[int64](8),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/VirtualNetworks"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Static Public IP Addresses"),
						Value:          to.Ptr("StaticPublicIPAddresses"),
					},
					CurrentValue: to.Ptr[int64](3),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/StaticPublicIPAddresses"),
					Limit:        to.Ptr[int64](20),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Security Groups"),
						Value:          to.Ptr("NetworkSecurityGroups"),
					},
					CurrentValue: to.Ptr[int64](1),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/NetworkSecurityGroups"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Public IP Addresses"),
						Value:          to.Ptr("PublicIPAddresses"),
					},
					CurrentValue: to.Ptr[int64](8),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/PublicIPAddresses"),
					Limit:        to.Ptr[int64](60),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Interfaces"),
						Value:          to.Ptr("NetworkInterfaces"),
					},
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/NetworkInterfaces"),
					Limit:        to.Ptr[int64](350),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Load Balancers"),
						Value:          to.Ptr("LoadBalancers"),
					},
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/LoadBalancers"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Application Gateways"),
						Value:          to.Ptr("ApplicationGateways"),
					},
					CurrentValue: to.Ptr[int64](1),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/ApplicationGateways"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route Tables"),
						Value:          to.Ptr("RouteTables"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteTables"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route Filters"),
						Value:          to.Ptr("RouteFilters"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteFilters"),
					Limit:        to.Ptr[int64](1000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Watchers"),
						Value:          to.Ptr("NetworkWatchers"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/NetworkWatchers"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Packet Captures"),
						Value:          to.Ptr("PacketCaptures"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/PacketCaptures"),
					Limit:        to.Ptr[int64](10),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("DNS servers per Virtual Network"),
						Value:          to.Ptr("DnsServersPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/DnsServersPerVirtualNetwork"),
					Limit:        to.Ptr[int64](9),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Subnets per Virtual Network"),
						Value:          to.Ptr("SubnetsPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SubnetsPerVirtualNetwork"),
					Limit:        to.Ptr[int64](1000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("IP Configurations per Virtual Network"),
						Value:          to.Ptr("IPConfigurationsPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/IPConfigurationsPerVirtualNetwork"),
					Limit:        to.Ptr[int64](4096),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Peerings per Virtual Network"),
						Value:          to.Ptr("PeeringsPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/PeeringsPerVirtualNetwork"),
					Limit:        to.Ptr[int64](10),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Security rules per Network Security Group"),
						Value:          to.Ptr("SecurityRulesPerNetworkSecurityGroup"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SecurityRulesPerNetworkSecurityGroup"),
					Limit:        to.Ptr[int64](200),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Security rules addresses or ports per Network Security Group"),
						Value:          to.Ptr("SecurityRuleAddressesOrPortsPerNetworkSecurityGroup"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SecurityRuleAddressesOrPortsPerNetworkSecurityGroup"),
					Limit:        to.Ptr[int64](2000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Inbound Rules per Load Balancer"),
						Value:          to.Ptr("InboundRulesPerLoadBalancer"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/InboundRulesPerLoadBalancer"),
					Limit:        to.Ptr[int64](150),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Frontend IP Configurations per Load Balancer"),
						Value:          to.Ptr("FrontendIPConfigurationPerLoadBalancer"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/FrontendIPConfigurationPerLoadBalancer"),
					Limit:        to.Ptr[int64](10),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Outbound Rules per Load Balancer"),
						Value:          to.Ptr("outboundRulesPerLoadBalancer"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/outboundRulesPerLoadBalancer"),
					Limit:        to.Ptr[int64](5),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Routes per Route Table"),
						Value:          to.Ptr("RoutesPerRouteTable"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RoutesPerRouteTable"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Secondary IP Configurations per Network Interface"),
						Value:          to.Ptr("SecondaryIPConfigurationsPerNetworkInterface"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SecondaryIPConfigurationsPerNetworkInterface"),
					Limit:        to.Ptr[int64](256),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Inbound rules per Network Interface"),
						Value:          to.Ptr("InboundRulesPerNetworkInterface"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/InboundRulesPerNetworkInterface"),
					Limit:        to.Ptr[int64](500),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route filter rules per Route Filter"),
						Value:          to.Ptr("RouteFilterRulesPerRouteFilter"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteFilterRulesPerRouteFilter"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route filters per Express route BGP Peering"),
						Value:          to.Ptr("RouteFiltersPerExpressRouteBgpPeering"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteFiltersPerExpressRouteBgpPeering"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/UsageList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/UsageListSpacedLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List usages spaced location"},
	})
	client = armnetwork.NewUsagesClient("subid", cred, &options)
	pager = client.List("West US",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/UsageListSpacedLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.UsagesListResult{
			Value: []*armnetwork.Usage{
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Virtual Networks"),
						Value:          to.Ptr("VirtualNetworks"),
					},
					CurrentValue: to.Ptr[int64](12),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/VirtualNetworks"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Static Public IP Addresses"),
						Value:          to.Ptr("StaticPublicIPAddresses"),
					},
					CurrentValue: to.Ptr[int64](1),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/StaticPublicIPAddresses"),
					Limit:        to.Ptr[int64](20),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Security Groups"),
						Value:          to.Ptr("NetworkSecurityGroups"),
					},
					CurrentValue: to.Ptr[int64](3),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/NetworkSecurityGroups"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Public IP Addresses"),
						Value:          to.Ptr("PublicIPAddresses"),
					},
					CurrentValue: to.Ptr[int64](12),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/PublicIPAddresses"),
					Limit:        to.Ptr[int64](60),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Public Ip Prefixes"),
						Value:          to.Ptr("PublicIpPrefixes"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/PublicIpPrefixes"),
					Limit:        to.Ptr[int64](2147483647),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Interfaces"),
						Value:          to.Ptr("NetworkInterfaces"),
					},
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/NetworkInterfaces"),
					Limit:        to.Ptr[int64](24000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Load Balancers"),
						Value:          to.Ptr("LoadBalancers"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/LoadBalancers"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Application Gateways"),
						Value:          to.Ptr("ApplicationGateways"),
					},
					CurrentValue: to.Ptr[int64](3),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/ApplicationGateways"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route Tables"),
						Value:          to.Ptr("RouteTables"),
					},
					CurrentValue: to.Ptr[int64](5),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/RouteTables"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route Filters"),
						Value:          to.Ptr("RouteFilters"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/RouteFilters"),
					Limit:        to.Ptr[int64](1000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Watchers"),
						Value:          to.Ptr("NetworkWatchers"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/NetworkWatchers"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Packet Captures"),
						Value:          to.Ptr("PacketCaptures"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/PacketCaptures"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Application Security Groups."),
						Value:          to.Ptr("ApplicationSecurityGroups"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/ApplicationSecurityGroups"),
					Limit:        to.Ptr[int64](500),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("DDoS Protection Plans."),
						Value:          to.Ptr("DdosProtectionPlans"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/DdosProtectionPlans"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Service Endpoint Policies"),
						Value:          to.Ptr("ServiceEndpointPolicies"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/ServiceEndpointPolicies"),
					Limit:        to.Ptr[int64](200),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Network Intent Policies"),
						Value:          to.Ptr("NetworkIntentPolicies"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/NetworkIntentPolicies"),
					Limit:        to.Ptr[int64](200),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("DNS servers per Virtual Network"),
						Value:          to.Ptr("DnsServersPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/DnsServersPerVirtualNetwork"),
					Limit:        to.Ptr[int64](9),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Subnets per Virtual Network"),
						Value:          to.Ptr("SubnetsPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/SubnetsPerVirtualNetwork"),
					Limit:        to.Ptr[int64](1000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("IP Configurations per Virtual Network"),
						Value:          to.Ptr("IPConfigurationsPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/IPConfigurationsPerVirtualNetwork"),
					Limit:        to.Ptr[int64](16384),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Peerings per Virtual Network"),
						Value:          to.Ptr("PeeringsPerVirtualNetwork"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/PeeringsPerVirtualNetwork"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Security rules per Network Security Group"),
						Value:          to.Ptr("SecurityRulesPerNetworkSecurityGroup"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/SecurityRulesPerNetworkSecurityGroup"),
					Limit:        to.Ptr[int64](1000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Security rules per Network Intent Policy"),
						Value:          to.Ptr("SecurityRulesPerNetworkIntentPolicy"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/SecurityRulesPerNetworkIntentPolicy"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Routes per Network Intent Policy"),
						Value:          to.Ptr("RoutesPerNetworkIntentPolicy"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/RoutesPerNetworkIntentPolicy"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Security rules addresses or ports per Network Security Group"),
						Value:          to.Ptr("SecurityRuleAddressesOrPortsPerNetworkSecurityGroup"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/SecurityRuleAddressesOrPortsPerNetworkSecurityGroup"),
					Limit:        to.Ptr[int64](2000),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Inbound Rules per Load Balancer"),
						Value:          to.Ptr("InboundRulesPerLoadBalancer"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/InboundRulesPerLoadBalancer"),
					Limit:        to.Ptr[int64](150),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Frontend IP Configurations per Load Balancer"),
						Value:          to.Ptr("FrontendIPConfigurationPerLoadBalancer"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/FrontendIPConfigurationPerLoadBalancer"),
					Limit:        to.Ptr[int64](10),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Outbound Rules per Load Balancer"),
						Value:          to.Ptr("OutboundRulesPerLoadBalancer"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/OutboundRulesPerLoadBalancer"),
					Limit:        to.Ptr[int64](5),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Routes per Route Table"),
						Value:          to.Ptr("RoutesPerRouteTable"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/RoutesPerRouteTable"),
					Limit:        to.Ptr[int64](400),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Secondary IP Configurations per Network Interface"),
						Value:          to.Ptr("SecondaryIPConfigurationsPerNetworkInterface"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/SecondaryIPConfigurationsPerNetworkInterface"),
					Limit:        to.Ptr[int64](256),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Inbound rules per Network Interface"),
						Value:          to.Ptr("InboundRulesPerNetworkInterface"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/InboundRulesPerNetworkInterface"),
					Limit:        to.Ptr[int64](500),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route filter rules per Route Filter"),
						Value:          to.Ptr("RouteFilterRulesPerRouteFilter"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/RouteFilterRulesPerRouteFilter"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				},
				{
					Name: &armnetwork.UsageName{
						LocalizedValue: to.Ptr("Route filters per Express route BGP Peering"),
						Value:          to.Ptr("RouteFiltersPerExpressRouteBgpPeering"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/providers/Microsoft.Network/locations/West US/usages/RouteFiltersPerExpressRouteBgpPeering"),
					Limit:        to.Ptr[int64](1),
					Unit:         to.Ptr(armnetwork.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/UsageListSpacedLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete virtual network"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-vnet",
		&armnetwork.VirtualNetworksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkDelete.json: %v", err)
	}
}

func TestVirtualNetworks_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get virtual network"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"test-vnet",
		&armnetwork.VirtualNetworksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
						Name: to.Ptr("subnet1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.1.0/24"),
							IPConfigurations: []*armnetwork.IPConfiguration{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetWithSubnetDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get virtual network with a delegated subnet"},
	})
	client = armnetwork.NewVirtualNetworksClient("subId", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"test-vnet",
		&armnetwork.VirtualNetworksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetWithSubnetDelegation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
						Name: to.Ptr("subnet1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.1.0/24"),
							Delegations: []*armnetwork.Delegation{
								{
									ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1/delegations/myDelegation"),
									Name: to.Ptr("myDelegation"),
									Properties: &armnetwork.ServiceDelegationPropertiesFormat{
										Actions:           []*string{},
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										ServiceName:       to.Ptr("Microsoft.Provider/resourceType"),
									},
								}},
							IPConfigurations: []*armnetwork.IPConfiguration{
								{
									ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Purpose:           to.Ptr(""),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetWithSubnetDelegation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetWithServiceAssociationLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get virtual network with service association links"},
	})
	client = armnetwork.NewVirtualNetworksClient("subId", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"test-vnet",
		&armnetwork.VirtualNetworksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetWithServiceAssociationLink.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("westus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
						Name: to.Ptr("subnet1"),
						Etag: to.Ptr("W/\"4d3e91b4-f67f-48be-880b-e4a8abdd019e\""),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.214.0/24"),
							Delegations: []*armnetwork.Delegation{
								{
									ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1/delegations/aciDelegation"),
									Name: to.Ptr("aciDelegation"),
									Etag: to.Ptr("W/\"4d3e91b4-f67f-48be-880b-e4a8abdd019e\""),
									Properties: &armnetwork.ServiceDelegationPropertiesFormat{
										Actions: []*string{
											to.Ptr("Microsoft.Network/virtualNetworks/subnets/action")},
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										ServiceName:       to.Ptr("Microsoft.Provider/resourceType"),
									},
								}},
							IPConfigurationProfiles: []*armnetwork.IPConfigurationProfile{
								{
									ID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"),
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							ServiceAssociationLinks: []*armnetwork.ServiceAssociationLink{
								{
									ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1/serviceAssociationLinks/serviceAssociationLink1"),
									Name: to.Ptr("serviceAssociationLink1"),
									Etag: to.Ptr("W/\"4d3e91b4-f67f-48be-880b-e4a8abdd019e\""),
									Properties: &armnetwork.ServiceAssociationLinkPropertiesFormat{
										LinkedResourceType: to.Ptr("Microsoft.Provider/resourceType"),
										ProvisioningState:  to.Ptr(armnetwork.ProvisioningStateSucceeded),
									},
								}},
							ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{},
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetWithServiceAssociationLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				FlowTimeoutInMinutes: to.Ptr[int32](10),
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				FlowTimeoutInMinutes:   to.Ptr[int32](10),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets:                []*armnetwork.Subnet{},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithBgpCommunities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with Bgp Communities"},
	})
	client = armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				BgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					VirtualNetworkCommunity: to.Ptr("12076:20000"),
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/24"),
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithBgpCommunities.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithBgpCommunities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				BgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					RegionalCommunity:       to.Ptr("12076:50004"),
					VirtualNetworkCommunity: to.Ptr("12076:20000"),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-1"),
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix:     to.Ptr("10.0.0.0/24"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithBgpCommunities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with delegated subnets"},
	})
	client = armnetwork.NewVirtualNetworksClient("subId", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("westcentralus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/24"),
							Delegations: []*armnetwork.Delegation{
								{
									Name: to.Ptr("myDelegation"),
									Properties: &armnetwork.ServiceDelegationPropertiesFormat{
										ServiceName: to.Ptr("Microsoft.Sql/managedInstances"),
									},
								}},
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithDelegation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithDelegation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("westcentralus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-1"),
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/24"),
							Delegations: []*armnetwork.Delegation{
								{
									ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-1/delegations/myDelegation"),
									Name: to.Ptr("myDelegation"),
									Properties: &armnetwork.ServiceDelegationPropertiesFormat{
										Actions:           []*string{},
										ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
										ServiceName:       to.Ptr("Microsoft.Sql/managedInstances"),
									},
								}},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							Purpose:           to.Ptr(""),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithDelegation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with encryption"},
	})
	client = armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Encryption: &armnetwork.VirtualNetworkEncryption{
					Enabled:     to.Ptr(true),
					Enforcement: to.Ptr(armnetwork.VirtualNetworkEncryptionEnforcementAllowUnencrypted),
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/24"),
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithEncryption.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Encryption: &armnetwork.VirtualNetworkEncryption{
					Enabled:     to.Ptr(true),
					Enforcement: to.Ptr(armnetwork.VirtualNetworkEncryptionEnforcementAllowUnencrypted),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-1"),
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix:     to.Ptr("10.0.0.0/24"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateWithEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with service endpoints"},
	})
	client = armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"vnetTest",
		"vnet1",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/16"),
							ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{
								{
									Service: to.Ptr("Microsoft.Storage"),
								}},
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpoints.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("vnet1"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/virtualNetworks/vnet1"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/test-1"),
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix:           to.Ptr("10.0.0.0/16"),
							IPConfigurations:        []*armnetwork.IPConfiguration{},
							ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
							ResourceNavigationLinks: []*armnetwork.ResourceNavigationLink{},
							ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{
								{
									Locations: []*string{
										to.Ptr("eastus2(stage)"),
										to.Ptr("usnorth(stage)")},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Service:           to.Ptr("Microsoft.Storage"),
								}},
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpointPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with service endpoints and service endpoint policy"},
	})
	client = armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"vnetTest",
		"vnet1",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus2euap"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/16"),
							ServiceEndpointPolicies: []*armnetwork.ServiceEndpointPolicy{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1"),
								}},
							ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{
								{
									Service: to.Ptr("Microsoft.Storage"),
								}},
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpointPolicy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpointPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("vnet1"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/virtualNetworks/vnet1"),
			Location: to.Ptr("eastus2euap"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/test-1"),
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix:           to.Ptr("10.0.0.0/16"),
							IPConfigurations:        []*armnetwork.IPConfiguration{},
							ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
							ResourceNavigationLinks: []*armnetwork.ResourceNavigationLink{},
							ServiceEndpointPolicies: []*armnetwork.ServiceEndpointPolicy{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1"),
								}},
							ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{
								{
									Locations: []*string{
										to.Ptr("eastus2(stage)"),
										to.Ptr("usnorth(stage)")},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Service:           to.Ptr("Microsoft.Storage"),
								}},
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateServiceEndpointPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with subnet"},
	})
	client = armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix: to.Ptr("10.0.0.0/24"),
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-1"),
						Name: to.Ptr("test-1"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefix:     to.Ptr("10.0.0.0/24"),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithAddressPrefixes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create virtual network with subnet containing address prefixes"},
	})
	client = armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vnet",
		armnetwork.VirtualNetwork{
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				Subnets: []*armnetwork.Subnet{
					{
						Name: to.Ptr("test-2"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/28"),
								to.Ptr("10.0.1.0/28")},
						},
					}},
			},
		},
		&armnetwork.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithAddressPrefixes.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithAddressPrefixes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("eastus"),
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets: []*armnetwork.Subnet{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-2"),
						Name: to.Ptr("test-2"),
						Properties: &armnetwork.SubnetPropertiesFormat{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/28"),
								to.Ptr("10.1.0.0/28")},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCreateSubnetWithAddressPrefixes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update virtual network tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-vnet",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetwork{
			Name:     to.Ptr("test-vnet"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.VirtualNetworkPropertiesFormat{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnets:                []*armnetwork.Subnet{},
				VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual networks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkListResult{
			Value: []*armnetwork.VirtualNetwork{
				{
					Name:     to.Ptr("vnet1"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.VirtualNetworkPropertiesFormat{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/8")},
						},
						DhcpOptions: &armnetwork.DhcpOptions{
							DNSServers: []*string{},
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnets: []*armnetwork.Subnet{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/test-1"),
								Name: to.Ptr("test-1"),
								Properties: &armnetwork.SubnetPropertiesFormat{
									AddressPrefix:     to.Ptr("10.0.0.0/24"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
					},
				},
				{
					Name:     to.Ptr("vnet2"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnet2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.VirtualNetworkPropertiesFormat{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/16")},
						},
						DhcpOptions: &armnetwork.DhcpOptions{
							DNSServers: []*string{
								to.Ptr("8.8.8.8")},
						},
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnets:                []*armnetwork.Subnet{},
						VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual networks in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkListResult{
			Value: []*armnetwork.VirtualNetwork{
				{
					Name:     to.Ptr("vnet1"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.VirtualNetworkPropertiesFormat{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/8")},
						},
						DhcpOptions: &armnetwork.DhcpOptions{
							DNSServers: []*string{},
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnets: []*armnetwork.Subnet{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/test-1"),
								Name: to.Ptr("test-1"),
								Properties: &armnetwork.SubnetPropertiesFormat{
									AddressPrefix:     to.Ptr("10.0.0.0/24"),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
					},
				},
				{
					Name:     to.Ptr("vnet2"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2"),
					Location: to.Ptr("westus"),
					Properties: &armnetwork.VirtualNetworkPropertiesFormat{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/16")},
						},
						DhcpOptions: &armnetwork.DhcpOptions{
							DNSServers: []*string{
								to.Ptr("8.8.8.8")},
						},
						ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnets:                []*armnetwork.Subnet{},
						VirtualNetworkPeerings: []*armnetwork.VirtualNetworkPeering{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_CheckIPAddressAvailability(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCheckIPAddressAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check IP address availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	res, err := client.CheckIPAddressAvailability(ctx,
		"rg1",
		"test-vnet",
		"10.0.1.4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCheckIPAddressAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.IPAddressAvailabilityResult{
			Available: to.Ptr(false),
			AvailableIPAddresses: []*string{
				to.Ptr("10.0.1.5"),
				to.Ptr("10.0.1.6"),
				to.Ptr("10.0.1.7"),
				to.Ptr("10.0.1.8"),
				to.Ptr("10.0.1.9")},
		}
		if !reflect.DeepEqual(exampleRes, res.IPAddressAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPAddressAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkCheckIPAddressAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_ListUsage(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkListUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VnetGetUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworksClient("subid", cred, &options)
	pager := client.ListUsage("rg1",
		"vnetName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkListUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkListUsageResult{
			Value: []*armnetwork.VirtualNetworkUsage{
				{
					Name: &armnetwork.VirtualNetworkUsageName{
						LocalizedValue: to.Ptr("Subnet size and usage"),
						Value:          to.Ptr("SubnetSpace"),
					},
					CurrentValue: to.Ptr[float64](-1),
					ID:           to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetName/subnets/GatewaySubnet"),
					Limit:        to.Ptr[float64](-1),
					Unit:         to.Ptr("Count"),
				},
				{
					Name: &armnetwork.VirtualNetworkUsageName{
						LocalizedValue: to.Ptr("Subnet size and usage"),
						Value:          to.Ptr("SubnetSpace"),
					},
					CurrentValue: to.Ptr[float64](2),
					ID:           to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetName/subnets/newSubnet"),
					Limit:        to.Ptr[float64](3),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkListUsageResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkListUsageResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkListUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubnets_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSubnetsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		&armnetwork.SubnetsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetDelete.json: %v", err)
	}
}

func TestSubnets_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSubnetsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		&armnetwork.SubnetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Subnet{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1"),
			Name: to.Ptr("subnet1"),
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix:     to.Ptr("10.0.0.0/16"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subnet)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetGetWithDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get subnet with a delegation"},
	})
	client = armnetwork.NewSubnetsClient("subId", cred, &options)
	res, err = client.Get(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		&armnetwork.SubnetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetGetWithDelegation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Subnet{
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1"),
			Name: to.Ptr("subnet1"),
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix: to.Ptr("10.0.0.0/16"),
				Delegations: []*armnetwork.Delegation{
					{
						ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1/delegations/myDelegation"),
						Name: to.Ptr("myDelegation"),
						Properties: &armnetwork.ServiceDelegationPropertiesFormat{
							Actions:           []*string{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							ServiceName:       to.Ptr("Microsoft.Provider/resourceType"),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Purpose:           to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subnet)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetGetWithDelegation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubnets_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSubnetsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		armnetwork.Subnet{
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix: to.Ptr("10.0.0.0/16"),
			},
		},
		&armnetwork.SubnetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Subnet{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1"),
			Name: to.Ptr("subnet1"),
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix:     to.Ptr("10.0.0.0/16"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subnet)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateWithDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create subnet with a delegation"},
	})
	client = armnetwork.NewSubnetsClient("subId", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		armnetwork.Subnet{
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix: to.Ptr("10.0.0.0/16"),
			},
		},
		&armnetwork.SubnetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateWithDelegation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateWithDelegation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Subnet{
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1"),
			Name: to.Ptr("subnet1"),
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix: to.Ptr("10.0.0.0/16"),
				Delegations: []*armnetwork.Delegation{
					{
						ID:   to.Ptr("/subscriptions/subId/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1/delegations/myDelegation"),
						Name: to.Ptr("myDelegation"),
						Properties: &armnetwork.ServiceDelegationPropertiesFormat{
							Actions:           []*string{},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
							ServiceName:       to.Ptr("Microsoft.Provider/resourceType"),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Purpose:           to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subnet)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateWithDelegation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateServiceEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create subnet with service endpoints"},
	})
	client = armnetwork.NewSubnetsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"subnet-test",
		"vnetname",
		"subnet1",
		armnetwork.Subnet{
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix: to.Ptr("10.0.0.0/16"),
				ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{
					{
						Service: to.Ptr("Microsoft.Storage"),
					}},
			},
		},
		&armnetwork.SubnetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateServiceEndpoint.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateServiceEndpoint.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.Subnet{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1"),
			Name: to.Ptr("subnet1"),
			Properties: &armnetwork.SubnetPropertiesFormat{
				AddressPrefix:     to.Ptr("10.0.0.0/16"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ServiceEndpoints: []*armnetwork.ServiceEndpointPropertiesFormat{
					{
						Locations: []*string{
							to.Ptr("eastus2(stage)"),
							to.Ptr("usnorth(stage)")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Service:           to.Ptr("Microsoft.Storage"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subnet)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetCreateServiceEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubnets_PrepareNetworkPolicies(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetPrepareNetworkPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Prepare Network Policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSubnetsClient("subid", cred, &options)
	poller, err := client.BeginPrepareNetworkPolicies(ctx,
		"rg1",
		"test-vnet",
		"subnet1",
		armnetwork.PrepareNetworkPoliciesRequest{
			ServiceName: to.Ptr("Microsoft.Sql/managedInstances"),
		},
		&armnetwork.SubnetsClientBeginPrepareNetworkPoliciesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetPrepareNetworkPolicies.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetPrepareNetworkPolicies.json: %v", err)
	}
}

func TestSubnets_UnprepareNetworkPolicies(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetUnprepareNetworkPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Unprepare Network Policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSubnetsClient("subid", cred, &options)
	poller, err := client.BeginUnprepareNetworkPolicies(ctx,
		"rg1",
		"test-vnet",
		"subnet1",
		armnetwork.UnprepareNetworkPoliciesRequest{
			ServiceName: to.Ptr("Microsoft.Sql/managedInstances"),
		},
		&armnetwork.SubnetsClientBeginUnprepareNetworkPoliciesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetUnprepareNetworkPolicies.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetUnprepareNetworkPolicies.json: %v", err)
	}
}

func TestSubnets_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List subnets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewSubnetsClient("subid", cred, &options)
	pager := client.List("subnet-test",
		"vnetname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.SubnetListResult{
			Value: []*armnetwork.Subnet{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1"),
					Name: to.Ptr("subnet1"),
					Properties: &armnetwork.SubnetPropertiesFormat{
						AddressPrefix:     to.Ptr("10.0.0.0/16"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet2"),
					Name: to.Ptr("subnet2"),
					Properties: &armnetwork.SubnetPropertiesFormat{
						AddressPrefix:     to.Ptr("10.0.0.0/16"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubnetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubnetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/SubnetList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceNavigationLinks_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetResourceNavigationLinks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Resource Navigation Links"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewResourceNavigationLinksClient("subid", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"vnet",
		"subnet",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetResourceNavigationLinks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ResourceNavigationLinksListResult{
			Value: []*armnetwork.ResourceNavigationLink{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet/resourceNavigationLinks/redisCache_redis-tester"),
					Name: to.Ptr("redisCache_redis-tester"),
					Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets/resourceNavigationLinks"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.ResourceNavigationLinkFormat{
						Link:               to.Ptr("/subscriptions/subid/resourceGroups/another-rg/providers/Microsoft.Cache/Redis/redis-tester"),
						LinkedResourceType: to.Ptr("Microsoft.Cache/redis"),
						ProvisioningState:  to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceNavigationLinksListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceNavigationLinksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetResourceNavigationLinks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceAssociationLinks_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetServiceAssociationLinks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Service Association Links"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewServiceAssociationLinksClient("subid", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"vnet",
		"subnet",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetServiceAssociationLinks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ServiceAssociationLinksListResult{
			Value: []*armnetwork.ServiceAssociationLink{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet/serviceAssociationLinks/acisal"),
					Name: to.Ptr("acisal"),
					Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets/serviceAssociationLinks"),
					Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.ServiceAssociationLinkPropertiesFormat{
						AllowDelete:        to.Ptr(true),
						LinkedResourceType: to.Ptr("Microsoft.ContainerInstance/containerGroups"),
						Locations: []*string{
							to.Ptr("westus")},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceAssociationLinksListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceAssociationLinksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGetServiceAssociationLinks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkPeerings_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"peerTest",
		"vnet1",
		"peer",
		&armnetwork.VirtualNetworkPeeringsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringDelete.json: %v", err)
	}
}

func TestVirtualNetworkPeerings_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"peerTest",
		"vnet1",
		"peer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
			Name: to.Ptr("peer"),
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
				PeeringSyncLevel:          to.Ptr(armnetwork.VirtualNetworkPeeringLevelFullyInSync),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					RegionalCommunity:       to.Ptr("12076:50004"),
					VirtualNetworkCommunity: to.Ptr("12076:20002"),
				},
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				RemoteVirtualNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringGetWithRemoteVirtualNetworkEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get peering with remote virtual network encryption"},
	})
	client = armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"peerTest",
		"vnet1",
		"peer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringGetWithRemoteVirtualNetworkEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
			Name: to.Ptr("peer"),
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					RegionalCommunity:       to.Ptr("12076:50004"),
					VirtualNetworkCommunity: to.Ptr("12076:20002"),
				},
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				RemoteVirtualNetworkEncryption: &armnetwork.VirtualNetworkEncryption{
					Enabled:     to.Ptr(true),
					Enforcement: to.Ptr(armnetwork.VirtualNetworkEncryptionEnforcementAllowUnencrypted),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringGetWithRemoteVirtualNetworkEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkPeerings_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"peerTest",
		"vnet1",
		"peer",
		armnetwork.VirtualNetworkPeering{
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		},
		&armnetwork.VirtualNetworkPeeringsClientBeginCreateOrUpdateOptions{SyncRemoteAddressSpace: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
			Name: to.Ptr("peer"),
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
				PeeringSyncLevel:          to.Ptr(armnetwork.VirtualNetworkPeeringLevelFullyInSync),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					RegionalCommunity:       to.Ptr("12076:50004"),
					VirtualNetworkCommunity: to.Ptr("12076:20002"),
				},
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				RemoteVirtualNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreateWithRemoteVirtualNetworkEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create peering with remote virtual network encryption"},
	})
	client = armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"peerTest",
		"vnet1",
		"peer",
		armnetwork.VirtualNetworkPeering{
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		},
		&armnetwork.VirtualNetworkPeeringsClientBeginCreateOrUpdateOptions{SyncRemoteAddressSpace: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreateWithRemoteVirtualNetworkEncryption.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreateWithRemoteVirtualNetworkEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
			Name: to.Ptr("peer"),
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					RegionalCommunity:       to.Ptr("12076:50004"),
					VirtualNetworkCommunity: to.Ptr("12076:20002"),
				},
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				RemoteVirtualNetworkEncryption: &armnetwork.VirtualNetworkEncryption{
					Enabled:     to.Ptr(true),
					Enforcement: to.Ptr(armnetwork.VirtualNetworkEncryptionEnforcementAllowUnencrypted),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringCreateWithRemoteVirtualNetworkEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringSync.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sync Peering"},
	})
	client = armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"peerTest",
		"vnet1",
		"peer",
		armnetwork.VirtualNetworkPeering{
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		},
		&armnetwork.VirtualNetworkPeeringsClientBeginCreateOrUpdateOptions{SyncRemoteAddressSpace: to.Ptr(armnetwork.SyncRemoteAddressSpaceTrue),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringSync.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringSync.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
			Name: to.Ptr("peer"),
			Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(true),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
				PeeringSyncLevel:          to.Ptr(armnetwork.VirtualNetworkPeeringLevelFullyInSync),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
					RegionalCommunity:       to.Ptr("12076:50004"),
					VirtualNetworkCommunity: to.Ptr("12076:20002"),
				},
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
				},
				RemoteVirtualNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringSync.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkPeerings_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peerings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	pager := client.List("peerTest",
		"vnet1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkPeeringListResult{
			Value: []*armnetwork.VirtualNetworkPeering{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
					Name: to.Ptr("peer"),
					Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
						AllowForwardedTraffic:     to.Ptr(true),
						AllowGatewayTransit:       to.Ptr(false),
						AllowVirtualNetworkAccess: to.Ptr(true),
						PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
						PeeringSyncLevel:          to.Ptr(armnetwork.VirtualNetworkPeeringLevelFullyInSync),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RemoteAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("12.0.0.0/8")},
						},
						RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
							RegionalCommunity:       to.Ptr("12076:50004"),
							VirtualNetworkCommunity: to.Ptr("12076:20002"),
						},
						RemoteVirtualNetwork: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
						},
						RemoteVirtualNetworkAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("12.0.0.0/8")},
						},
						UseRemoteGateways: to.Ptr(false),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer2"),
					Name: to.Ptr("peer"),
					Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
						AllowForwardedTraffic:     to.Ptr(false),
						AllowGatewayTransit:       to.Ptr(false),
						AllowVirtualNetworkAccess: to.Ptr(true),
						PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
						PeeringSyncLevel:          to.Ptr(armnetwork.VirtualNetworkPeeringLevelFullyInSync),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RemoteAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("13.0.0.0/8")},
						},
						RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
							RegionalCommunity:       to.Ptr("12076:50004"),
							VirtualNetworkCommunity: to.Ptr("12076:20003"),
						},
						RemoteVirtualNetwork: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet3"),
						},
						RemoteVirtualNetworkAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("13.0.0.0/8")},
						},
						UseRemoteGateways: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkPeeringListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkPeeringListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringListWithRemoteVirtualNetworkEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peerings with remote virtual network encryption"},
	})
	client = armnetwork.NewVirtualNetworkPeeringsClient("subid", cred, &options)
	pager = client.List("peerTest",
		"vnet1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringListWithRemoteVirtualNetworkEncryption.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkPeeringListResult{
			Value: []*armnetwork.VirtualNetworkPeering{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer"),
					Name: to.Ptr("peer"),
					Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
						AllowForwardedTraffic:     to.Ptr(true),
						AllowGatewayTransit:       to.Ptr(false),
						AllowVirtualNetworkAccess: to.Ptr(true),
						PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RemoteAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("12.0.0.0/8")},
						},
						RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
							RegionalCommunity:       to.Ptr("12076:50004"),
							VirtualNetworkCommunity: to.Ptr("12076:20002"),
						},
						RemoteVirtualNetwork: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
						},
						RemoteVirtualNetworkEncryption: &armnetwork.VirtualNetworkEncryption{
							Enabled:     to.Ptr(true),
							Enforcement: to.Ptr(armnetwork.VirtualNetworkEncryptionEnforcementAllowUnencrypted),
						},
						UseRemoteGateways: to.Ptr(false),
					},
				},
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer2"),
					Name: to.Ptr("peer"),
					Properties: &armnetwork.VirtualNetworkPeeringPropertiesFormat{
						AllowForwardedTraffic:     to.Ptr(false),
						AllowGatewayTransit:       to.Ptr(false),
						AllowVirtualNetworkAccess: to.Ptr(true),
						PeeringState:              to.Ptr(armnetwork.VirtualNetworkPeeringStateInitiated),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RemoteAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("13.0.0.0/8")},
						},
						RemoteBgpCommunities: &armnetwork.VirtualNetworkBgpCommunities{
							RegionalCommunity:       to.Ptr("12076:50004"),
							VirtualNetworkCommunity: to.Ptr("12076:20003"),
						},
						RemoteVirtualNetwork: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet3"),
						},
						RemoteVirtualNetworkEncryption: &armnetwork.VirtualNetworkEncryption{
							Enabled:     to.Ptr(true),
							Enforcement: to.Ptr(armnetwork.VirtualNetworkEncryptionEnforcementAllowUnencrypted),
						},
						UseRemoteGateways: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkPeeringListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkPeeringListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkPeeringListWithRemoteVirtualNetworkEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateVirtualNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"vpngw",
		armnetwork.VirtualNetworkGateway{
			Location: to.Ptr("centralus"),
			Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
				Active: to.Ptr(false),
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65515),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					PeerWeight:        to.Ptr[int32](0),
				},
				CustomRoutes: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("101.168.0.6/32")},
				},
				DisableIPSecReplayProtection:    to.Ptr(false),
				EnableBgp:                       to.Ptr(false),
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				EnableDNSForwarding:             to.Ptr(true),
				GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
				IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
					{
						Name: to.Ptr("gwipconfig1"),
						Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
							},
						},
					}},
				NatRules: []*armnetwork.VirtualNetworkGatewayNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
						Name: to.Ptr("natRule1"),
						Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("50.0.0.0/24"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("10.10.0.0/24"),
								}},
							IPConfigurationID: to.Ptr(""),
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
						Name: to.Ptr("natRule2"),
						Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("30.0.0.0/24"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("20.10.0.0/24"),
								}},
							IPConfigurationID: to.Ptr(""),
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeIngressSnat),
						},
					}},
				SKU: &armnetwork.VirtualNetworkGatewaySKU{
					Name: to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
					Tier: to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
				},
				VPNClientConfiguration: &armnetwork.VPNClientConfiguration{
					RadiusServers: []*armnetwork.RadiusServer{
						{
							RadiusServerAddress: to.Ptr("10.2.0.0"),
							RadiusServerScore:   to.Ptr[int64](20),
							RadiusServerSecret:  to.Ptr("radiusServerSecret"),
						}},
					VPNClientProtocols: []*armnetwork.VPNClientProtocol{
						to.Ptr(armnetwork.VPNClientProtocolOpenVPN)},
					VPNClientRevokedCertificates: []*armnetwork.VPNClientRevokedCertificate{},
					VPNClientRootCertificates:    []*armnetwork.VPNClientRootCertificate{},
				},
				VPNType: to.Ptr(armnetwork.VPNTypeRouteBased),
			},
		},
		&armnetwork.VirtualNetworkGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGateway{
			Name:     to.Ptr("vpngw"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
				Active: to.Ptr(false),
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65515),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.3.1.254")},
							IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
							TunnelIPAddresses: []*string{
								to.Ptr("52.161.10.135")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				CustomRoutes: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("101.168.0.6/32")},
				},
				DisableIPSecReplayProtection:    to.Ptr(false),
				EnableBgp:                       to.Ptr(false),
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				EnableDNSForwarding:             to.Ptr(true),
				GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
				InboundDNSForwardingEndpoint:    to.Ptr("10.0.1.14"),
				IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
						Name: to.Ptr("gwipconfig1"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
						Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
							},
						},
					}},
				NatRules: []*armnetwork.VirtualNetworkGatewayNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
						Name: to.Ptr("natRule1"),
						Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("50.0.0.0/24"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("10.10.0.0/24"),
								}},
							IPConfigurationID: to.Ptr(""),
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
						Name: to.Ptr("natRule2"),
						Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("30.0.0.0/24"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("20.10.0.0/24"),
								}},
							IPConfigurationID: to.Ptr(""),
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeIngressSnat),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				SKU: &armnetwork.VirtualNetworkGatewaySKU{
					Name:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
					Capacity: to.Ptr[int32](0),
					Tier:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
				},
				VPNClientConfiguration: &armnetwork.VPNClientConfiguration{
					RadiusServers: []*armnetwork.RadiusServer{
						{
							RadiusServerAddress: to.Ptr("10.2.0.0"),
							RadiusServerScore:   to.Ptr[int64](20),
						}},
					VPNClientProtocols: []*armnetwork.VPNClientProtocol{
						to.Ptr(armnetwork.VPNClientProtocolOpenVPN)},
					VPNClientRevokedCertificates: []*armnetwork.VPNClientRevokedCertificate{},
					VPNClientRootCertificates:    []*armnetwork.VPNClientRootCertificate{},
				},
				VPNGatewayGeneration: to.Ptr(armnetwork.VPNGatewayGenerationNone),
				VPNType:              to.Ptr(armnetwork.VPNTypeRouteBased),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"vpngw",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGateway{
			Name:     to.Ptr("vpngw"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
				Active: to.Ptr(false),
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65514),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.3.1.254")},
							IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
							TunnelIPAddresses: []*string{
								to.Ptr("52.161.10.135")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				CustomRoutes: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("101.168.0.6/32")},
				},
				DisableIPSecReplayProtection:    to.Ptr(false),
				EnableBgp:                       to.Ptr(false),
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				EnablePrivateIPAddress:          to.Ptr(false),
				GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
				IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
						Name: to.Ptr("gwipconfig1"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
						Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
							},
						},
					}},
				NatRules: []*armnetwork.VirtualNetworkGatewayNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
						Name: to.Ptr("natRule1"),
						Etag: to.Ptr("W/\"00ae2b69-88e7-4b3a-b66a-cfa2244e0801\""),
						Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("50.0.0.0/24"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("10.10.0.0/24"),
								}},
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
						Name: to.Ptr("natRule2"),
						Etag: to.Ptr("W/\"00ae2b69-88e7-4b3a-b66a-cfa2244e0801\""),
						Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("30.0.0.0/24"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("20.10.0.0/24"),
								}},
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeIngressSnat),
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				SKU: &armnetwork.VirtualNetworkGatewaySKU{
					Name:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
					Capacity: to.Ptr[int32](0),
					Tier:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
				},
				VPNClientConfiguration: &armnetwork.VPNClientConfiguration{
					RadiusServers: []*armnetwork.RadiusServer{
						{
							RadiusServerAddress: to.Ptr("10.1.0.0"),
							RadiusServerScore:   to.Ptr[int64](20),
						}},
					VPNClientProtocols: []*armnetwork.VPNClientProtocol{
						to.Ptr(armnetwork.VPNClientProtocolOpenVPN)},
					VPNClientRevokedCertificates: []*armnetwork.VPNClientRevokedCertificate{},
					VPNClientRootCertificates:    []*armnetwork.VPNClientRootCertificate{},
				},
				VPNGatewayGeneration: to.Ptr(armnetwork.VPNGatewayGenerationNone),
				VPNType:              to.Ptr(armnetwork.VPNTypeRouteBased),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteVirtualNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VirtualNetworkGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayDelete.json: %v", err)
	}
}

func TestVirtualNetworkGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateVirtualNetworkGatewayTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"vpngw",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.VirtualNetworkGatewaysClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGateway{
			Name:     to.Ptr("vpngw"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
				Active: to.Ptr(false),
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65515),
					BgpPeeringAddress: to.Ptr("10.0.0.254"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.3.1.254")},
							IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
							TunnelIPAddresses: []*string{
								to.Ptr("52.161.10.135")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				CustomRoutes: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("101.168.0.6/32")},
				},
				DisableIPSecReplayProtection:    to.Ptr(false),
				EnableBgp:                       to.Ptr(false),
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
				IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/default"),
						Name: to.Ptr("default"),
						Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testpub1"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/GatewaySubnet"),
							},
						},
					}},
				NatRules:          []*armnetwork.VirtualNetworkGatewayNatRule{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				SKU: &armnetwork.VirtualNetworkGatewaySKU{
					Name:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
					Capacity: to.Ptr[int32](2),
					Tier:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
				},
				VPNGatewayGeneration: to.Ptr(armnetwork.VPNGatewayGenerationNone),
				VPNType:              to.Ptr(armnetwork.VPNTypeRouteBased),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVirtualNetworkGatewaysinResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkGatewayListResult{
			Value: []*armnetwork.VirtualNetworkGateway{
				{
					Name:     to.Ptr("vpngw1"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworkGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1"),
					Location: to.Ptr("loc1"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
						Active: to.Ptr(false),
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65515),
							BgpPeeringAddress: to.Ptr("10.0.0.14"),
							PeerWeight:        to.Ptr[int32](0),
						},
						CustomRoutes: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("101.168.0.6/32")},
						},
						DisableIPSecReplayProtection:    to.Ptr(false),
						EnableBgp:                       to.Ptr(false),
						EnableBgpRouteTranslationForNat: to.Ptr(false),
						EnablePrivateIPAddress:          to.Ptr(false),
						GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
						IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1/ipConfigurations/default"),
								Name: to.Ptr("default"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
								Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/vpngw1-ip"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
									},
								},
							}},
						NatRules: []*armnetwork.VirtualNetworkGatewayNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1/natRules/natRule1"),
								Name: to.Ptr("natRule1"),
								Etag: to.Ptr("W/\"00ae2b69-88e7-4b3a-b66a-cfa2244e0801\""),
								Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("50.0.0.0/24"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("10.10.0.0/24"),
										}},
									Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1/natRules/natRule2"),
								Name: to.Ptr("natRule2"),
								Etag: to.Ptr("W/\"00ae2b69-88e7-4b3a-b66a-cfa2244e0801\""),
								Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("30.0.0.0/24"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("20.10.0.0/24"),
										}},
									Mode:              to.Ptr(armnetwork.VPNNatRuleModeIngressSnat),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						SKU: &armnetwork.VirtualNetworkGatewaySKU{
							Name:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
							Capacity: to.Ptr[int32](2),
							Tier:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
						},
						VPNClientConfiguration: &armnetwork.VPNClientConfiguration{
							VPNClientProtocols:           []*armnetwork.VPNClientProtocol{},
							VPNClientRevokedCertificates: []*armnetwork.VPNClientRevokedCertificate{},
							VPNClientRootCertificates:    []*armnetwork.VPNClientRootCertificate{},
						},
						VPNGatewayGeneration: to.Ptr(armnetwork.VPNGatewayGenerationNone),
						VPNType:              to.Ptr(armnetwork.VPNTypeRouteBased),
					},
				},
				{
					Name:     to.Ptr("vpngw2"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworkGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2"),
					Location: to.Ptr("loc2"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
						Active: to.Ptr(false),
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65515),
							BgpPeeringAddress: to.Ptr("10.1.0.46"),
							PeerWeight:        to.Ptr[int32](0),
						},
						CustomRoutes: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("101.168.0.6/32")},
						},
						DisableIPSecReplayProtection:    to.Ptr(false),
						EnableBgp:                       to.Ptr(false),
						EnableBgpRouteTranslationForNat: to.Ptr(false),
						EnablePrivateIPAddress:          to.Ptr(true),
						GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
						IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2/ipConfigurations/default"),
								Name: to.Ptr("default"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
								Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
									PrivateIPAddress:          to.Ptr("10.1.0.7"),
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/vpngw2-ip"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/GatewaySubnet"),
									},
								},
							}},
						NatRules: []*armnetwork.VirtualNetworkGatewayNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2/natRules/natRule1"),
								Name: to.Ptr("natRule1"),
								Etag: to.Ptr("W/\"00ae2b69-88e7-4b3a-b66a-cfa2244e0801\""),
								Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("50.0.0.0/24"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("10.10.0.0/24"),
										}},
									Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2/natRules/natRule2"),
								Name: to.Ptr("natRule2"),
								Etag: to.Ptr("W/\"00ae2b69-88e7-4b3a-b66a-cfa2244e0801\""),
								Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("30.0.0.0/24"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("20.10.0.0/24"),
										}},
									Mode:              to.Ptr(armnetwork.VPNNatRuleModeIngressSnat),
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						SKU: &armnetwork.VirtualNetworkGatewaySKU{
							Name:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
							Capacity: to.Ptr[int32](2),
							Tier:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
						},
						VPNClientConfiguration: &armnetwork.VPNClientConfiguration{
							RadiusServers: []*armnetwork.RadiusServer{
								{
									RadiusServerAddress: to.Ptr("10.2.0.0"),
									RadiusServerScore:   to.Ptr[int64](20),
								}},
							VPNClientProtocols: []*armnetwork.VPNClientProtocol{
								to.Ptr(armnetwork.VPNClientProtocolOpenVPN)},
							VPNClientRevokedCertificates: []*armnetwork.VPNClientRevokedCertificate{},
							VPNClientRootCertificates:    []*armnetwork.VPNClientRootCertificate{},
						},
						VPNGatewayGeneration: to.Ptr(armnetwork.VPNGatewayGenerationNone),
						VPNType:              to.Ptr(armnetwork.VPNTypeRouteBased),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkGatewayListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkGatewayListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_ListConnections(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewaysListConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworkGatewaysListConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	pager := client.ListConnections("testrg",
		"test-vpn-gateway-1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewaysListConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkGatewayListConnectionsResult{
			Value: []*armnetwork.VirtualNetworkGatewayConnectionListEntity{
				{
					Name:     to.Ptr("test-vpn-connection"),
					Type:     to.Ptr("Microsoft.Network/connections"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/connections/test-vpn-connection"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\\\"00000000-0000-0000-0000-000000000000\\\""),
					Properties: &armnetwork.VirtualNetworkGatewayConnectionListEntityPropertiesFormat{
						ConnectionType:                 to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeVnet2Vnet),
						EgressBytesTransferred:         to.Ptr[int64](0),
						EnableBgp:                      to.Ptr(true),
						IngressBytesTransferred:        to.Ptr[int64](0),
						IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
						ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:                   to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoutingWeight:                  to.Ptr[int32](22),
						TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
						UsePolicyBasedTrafficSelectors: to.Ptr(false),
						VirtualNetworkGateway1: &armnetwork.VirtualNetworkConnectionGatewayReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkGateways/test-vpn-gateway-1"),
						},
						VirtualNetworkGateway2: &armnetwork.VirtualNetworkConnectionGatewayReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/testrg-2/providers/Microsoft.Network/virtualNetworkGateways/test-vpn-gateway-2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkGatewayListConnectionsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkGatewayListConnectionsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewaysListConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_Reset(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayReset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResetVirtualNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginReset(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VirtualNetworkGatewaysClientBeginResetOptions{GatewayVip: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayReset.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayReset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGateway{
			Name:     to.Ptr("vpngw"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
				Active: to.Ptr(false),
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65514),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.3.1.254")},
							IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
							TunnelIPAddresses: []*string{
								to.Ptr("52.161.10.135")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				CustomRoutes: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("101.168.0.6/32")},
				},
				DisableIPSecReplayProtection:    to.Ptr(false),
				EnableBgp:                       to.Ptr(false),
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				GatewayType:                     to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
				IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
						Name: to.Ptr("gwipconfig1"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
						Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
							PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
							ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
							PublicIPAddress: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
							},
							Subnet: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
							},
						},
					}},
				NatRules:          []*armnetwork.VirtualNetworkGatewayNatRule{},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
				SKU: &armnetwork.VirtualNetworkGatewaySKU{
					Name:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
					Capacity: to.Ptr[int32](0),
					Tier:     to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
				},
				VPNType: to.Ptr(armnetwork.VPNTypeRouteBased),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayReset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_Generatevpnclientpackage(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGenerateVpnClientPackage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateVPNClientPackage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginGeneratevpnclientpackage(ctx,
		"rg1",
		"vpngw",
		armnetwork.VPNClientParameters{},
		&armnetwork.VirtualNetworkGatewaysClientBeginGeneratevpnclientpackageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGenerateVpnClientPackage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGenerateVpnClientPackage.json: %v", err)
	}
	// Response check
	{
		exampleRes := ""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGenerateVpnClientPackage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_GetBgpPeerStatus(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetBGPPeerStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayBGPPeerStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginGetBgpPeerStatus(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VirtualNetworkGatewaysClientBeginGetBgpPeerStatusOptions{Peer: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetBGPPeerStatus.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetBGPPeerStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BgpPeerStatusListResult{}
		if !reflect.DeepEqual(exampleRes, res.BgpPeerStatusListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BgpPeerStatusListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetBGPPeerStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_GetLearnedRoutes(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayLearnedRoutes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayLearnedRoutes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginGetLearnedRoutes(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VirtualNetworkGatewaysClientBeginGetLearnedRoutesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayLearnedRoutes.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayLearnedRoutes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.GatewayRouteListResult{}
		if !reflect.DeepEqual(exampleRes, res.GatewayRouteListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayRouteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayLearnedRoutes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_GetAdvertisedRoutes(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetAdvertisedRoutes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayAdvertisedRoutes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginGetAdvertisedRoutes(ctx,
		"rg1",
		"vpngw",
		"test",
		&armnetwork.VirtualNetworkGatewaysClientBeginGetAdvertisedRoutesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetAdvertisedRoutes.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetAdvertisedRoutes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.GatewayRouteListResult{}
		if !reflect.DeepEqual(exampleRes, res.GatewayRouteListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayRouteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetAdvertisedRoutes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_StartPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCaptureFilterData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on virtual network gateway with filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VirtualNetworkGatewaysClientBeginStartPacketCaptureOptions{Parameters: &armnetwork.VPNPacketCaptureStartParameters{
			FilterData: to.Ptr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCaptureFilterData.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCaptureFilterData.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCaptureFilterData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on virtual network gateway without filter"},
	})
	client = armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VirtualNetworkGatewaysClientBeginStartPacketCaptureOptions{Parameters: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCapture.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStartPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_StopPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStopPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop packet capture on virtual network gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"vpngw",
		armnetwork.VPNPacketCaptureStopParameters{
			SasURL: to.Ptr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
		&armnetwork.VirtualNetworkGatewaysClientBeginStopPacketCaptureOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStopPacketCapture.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStopPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayStopPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGateways_GetVpnclientConnectionHealth(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetVpnclientConnectionHealth.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayVpnclientConnectionHealth"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginGetVpnclientConnectionHealth(ctx,
		"p2s-vnet-test",
		"vpnp2sgw",
		&armnetwork.VirtualNetworkGatewaysClientBeginGetVpnclientConnectionHealthOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetVpnclientConnectionHealth.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetVpnclientConnectionHealth.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNClientConnectionHealthDetailListResult{
			Value: []*armnetwork.VPNClientConnectionHealthDetail{
				{
					EgressBytesTransferred:    to.Ptr[int64](33420),
					EgressPacketsTransferred:  to.Ptr[int64](557),
					IngressBytesTransferred:   to.Ptr[int64](33420),
					IngressPacketsTransferred: to.Ptr[int64](557),
					MaxBandwidth:              to.Ptr[int64](240000000),
					MaxPacketsPerSecond:       to.Ptr[int64](4),
					PrivateIPAddress:          to.Ptr("192.168.210.2"),
					PublicIPAddress:           to.Ptr("167.220.2.232:45522"),
					VPNConnectionDuration:     to.Ptr[int64](900),
					VPNConnectionID:           to.Ptr("IKEv2_1e1cfe59-5c7c-4315-a876-b11fbfdfeed4"),
					VPNConnectionTime:         to.Ptr("2019-05-02T22:26:22"),
					VPNUserName:               to.Ptr("gwp2schildcert"),
				},
				{
					EgressBytesTransferred:    to.Ptr[int64](23420),
					EgressPacketsTransferred:  to.Ptr[int64](357),
					IngressBytesTransferred:   to.Ptr[int64](23420),
					IngressPacketsTransferred: to.Ptr[int64](357),
					MaxBandwidth:              to.Ptr[int64](220000000),
					MaxPacketsPerSecond:       to.Ptr[int64](4),
					PrivateIPAddress:          to.Ptr("192.168.210.1"),
					PublicIPAddress:           to.Ptr("167.220.2.232:45213"),
					VPNConnectionDuration:     to.Ptr[int64](800),
					VPNConnectionID:           to.Ptr("IKEv2_571cfe59-2c7d-1415-e813-c51fbfdfea16"),
					VPNConnectionTime:         to.Ptr("2019-05-01T21:06:12"),
					VPNUserName:               to.Ptr("gwp2schildcert"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNClientConnectionHealthDetailListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNClientConnectionHealthDetailListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayGetVpnclientConnectionHealth.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateVirtualNetworkGatewayConnection_S2S"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"connS2S",
		armnetwork.VirtualNetworkGatewayConnection{
			Location: to.Ptr("centralus"),
			Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
				ConnectionMode:     to.Ptr(armnetwork.VirtualNetworkGatewayConnectionModeDefault),
				ConnectionProtocol: to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
				ConnectionType:     to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeIPsec),
				DpdTimeoutSeconds:  to.Ptr[int32](30),
				EgressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
					}},
				EnableBgp: to.Ptr(false),
				IngressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
					}},
				IPSecPolicies: []*armnetwork.IPSecPolicy{},
				LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw"),
					Location: to.Ptr("centralus"),
					Tags:     map[string]*string{},
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
						GatewayIPAddress: to.Ptr("x.x.x.x"),
						LocalNetworkAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.1.0.0/16")},
						},
					},
				},
				RoutingWeight:                  to.Ptr[int32](0),
				SharedKey:                      to.Ptr("Abc123"),
				TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
				UsePolicyBasedTrafficSelectors: to.Ptr(false),
				VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
					Location: to.Ptr("centralus"),
					Tags:     map[string]*string{},
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
						Active: to.Ptr(false),
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65514),
							BgpPeeringAddress: to.Ptr("10.0.1.30"),
							PeerWeight:        to.Ptr[int32](0),
						},
						EnableBgp:   to.Ptr(false),
						GatewayType: to.Ptr(armnetwork.VirtualNetworkGatewayTypeVPN),
						IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/ipConfigurations/gwipconfig1"),
								Name: to.Ptr("gwipconfig1"),
								Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
									PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet"),
									},
								},
							}},
						SKU: &armnetwork.VirtualNetworkGatewaySKU{
							Name: to.Ptr(armnetwork.VirtualNetworkGatewaySKUNameVPNGw1),
							Tier: to.Ptr(armnetwork.VirtualNetworkGatewaySKUTierVPNGw1),
						},
						VPNType: to.Ptr(armnetwork.VPNTypeRouteBased),
					},
				},
			},
		},
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGatewayConnection{
			Name:     to.Ptr("connS2S"),
			Type:     to.Ptr("Microsoft.Network/connections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/connections/connS2S"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
				ConnectionMode:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionModeDefault),
				ConnectionProtocol:     to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
				ConnectionType:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeIPsec),
				DpdTimeoutSeconds:      to.Ptr[int32](30),
				EgressBytesTransferred: to.Ptr[int64](0),
				EgressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
					}},
				EnableBgp:               to.Ptr(false),
				IngressBytesTransferred: to.Ptr[int64](0),
				IngressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
					}},
				IPSecPolicies: []*armnetwork.IPSecPolicy{},
				LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
					ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw"),
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{},
				},
				ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:                   to.Ptr("00000000-0000-0000-0000-000000000000"),
				RoutingWeight:                  to.Ptr[int32](0),
				SharedKey:                      to.Ptr("Abc123"),
				UseLocalAzureIPAddress:         to.Ptr(false),
				UsePolicyBasedTrafficSelectors: to.Ptr(false),
				VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
					ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGatewayConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGatewayConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"connS2S",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGatewayConnection{
			Name:     to.Ptr("connS2S"),
			Type:     to.Ptr("Microsoft.Network/connections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/connections/connS2S"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
				ConnectionMode:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionModeDefault),
				ConnectionProtocol:     to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
				ConnectionStatus:       to.Ptr(armnetwork.VirtualNetworkGatewayConnectionStatusConnecting),
				ConnectionType:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeIPsec),
				DpdTimeoutSeconds:      to.Ptr[int32](30),
				EgressBytesTransferred: to.Ptr[int64](0),
				EgressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
					}},
				EnableBgp:               to.Ptr(false),
				IngressBytesTransferred: to.Ptr[int64](0),
				IngressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
					}},
				IPSecPolicies: []*armnetwork.IPSecPolicy{},
				LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
					ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw"),
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{},
				},
				ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:                   to.Ptr("00000000-0000-0000-0000-000000000000"),
				RoutingWeight:                  to.Ptr[int32](0),
				SharedKey:                      to.Ptr("Abc123"),
				TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
				UseLocalAzureIPAddress:         to.Ptr(false),
				UsePolicyBasedTrafficSelectors: to.Ptr(false),
				VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
					ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGatewayConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGatewayConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteVirtualNetworkGatewayConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"conn1",
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionDelete.json: %v", err)
	}
}

func TestVirtualNetworkGatewayConnections_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateVirtualNetworkGatewayConnectionTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"test",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGatewayConnection{
			Name:     to.Ptr("test"),
			Type:     to.Ptr("Microsoft.Network/connections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/connections/test"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
				ConnectionStatus:       to.Ptr(armnetwork.VirtualNetworkGatewayConnectionStatusUnknown),
				ConnectionType:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeIPsec),
				EgressBytesTransferred: to.Ptr[int64](0),
				EgressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2"),
					}},
				EnableBgp:               to.Ptr(false),
				IngressBytesTransferred: to.Ptr[int64](0),
				IngressNatRules: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1"),
					}},
				IPSecPolicies: []*armnetwork.IPSecPolicy{},
				LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
					ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/lgw"),
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{},
				},
				ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:                   to.Ptr("00000000-0000-0000-0000-000000000000"),
				RoutingWeight:                  to.Ptr[int32](0),
				SharedKey:                      to.Ptr("temp1234"),
				TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
				UsePolicyBasedTrafficSelectors: to.Ptr(false),
				VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
					ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"),
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGatewayConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGatewayConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_SetSharedKey(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionSetSharedKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetVirtualNetworkGatewayConnectionSharedKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginSetSharedKey(ctx,
		"rg1",
		"connS2S",
		armnetwork.ConnectionSharedKey{
			Value: to.Ptr("AzureAbc123"),
		},
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginSetSharedKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionSetSharedKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionSetSharedKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionSharedKey{
			Value: to.Ptr("AzureAbc123"),
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionSharedKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionSharedKey)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionSetSharedKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_GetSharedKey(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetSharedKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayConnectionSharedKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	res, err := client.GetSharedKey(ctx,
		"rg1",
		"connS2S",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetSharedKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionSharedKey{
			Value: to.Ptr("AzureAbc123"),
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionSharedKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionSharedKey)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetSharedKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVirtualNetworkGatewayConnectionsinResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkGatewayConnectionListResult{
			Value: []*armnetwork.VirtualNetworkGatewayConnection{
				{
					Name:     to.Ptr("conn1"),
					Type:     to.Ptr("Microsoft.Network/connections"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/connections/conn1"),
					Location: to.Ptr("centralus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
						ConnectionMode:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionModeDefault),
						ConnectionProtocol:     to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv1),
						ConnectionType:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeIPsec),
						DpdTimeoutSeconds:      to.Ptr[int32](30),
						EgressBytesTransferred: to.Ptr[int64](0),
						EgressNatRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1/natRules/natRule2"),
							}},
						EnableBgp:               to.Ptr(false),
						IngressBytesTransferred: to.Ptr[int64](0),
						IngressNatRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1/natRules/natRule1"),
							}},
						IPSecPolicies: []*armnetwork.IPSecPolicy{},
						LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
							ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw1"),
							Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{},
						},
						ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:                   to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoutingWeight:                  to.Ptr[int32](0),
						TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
						UseLocalAzureIPAddress:         to.Ptr(false),
						UsePolicyBasedTrafficSelectors: to.Ptr(false),
						VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
							ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw1"),
							Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{},
						},
					},
				},
				{
					Name:     to.Ptr("conn2"),
					Type:     to.Ptr("Microsoft.Network/connections"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/connections/conn2"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
						ConnectionMode:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionModeDefault),
						ConnectionProtocol:     to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
						ConnectionType:         to.Ptr(armnetwork.VirtualNetworkGatewayConnectionTypeIPsec),
						DpdTimeoutSeconds:      to.Ptr[int32](20),
						EgressBytesTransferred: to.Ptr[int64](0),
						EgressNatRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2/natRules/natRule2"),
							}},
						EnableBgp:               to.Ptr(false),
						IngressBytesTransferred: to.Ptr[int64](0),
						IngressNatRules: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2/natRules/natRule1"),
							}},
						IPSecPolicies: []*armnetwork.IPSecPolicy{},
						LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
							ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw2"),
							Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{},
						},
						ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:                   to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoutingWeight:                  to.Ptr[int32](0),
						TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
						UseLocalAzureIPAddress:         to.Ptr(true),
						UsePolicyBasedTrafficSelectors: to.Ptr(false),
						VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
							ID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw2"),
							Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkGatewayConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkGatewayConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_ResetSharedKey(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionResetSharedKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResetVirtualNetworkGatewayConnectionSharedKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginResetSharedKey(ctx,
		"rg1",
		"conn1",
		armnetwork.ConnectionResetSharedKey{
			KeyLength: to.Ptr[int32](128),
		},
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginResetSharedKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionResetSharedKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionResetSharedKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ConnectionResetSharedKey{
			KeyLength: to.Ptr[int32](128),
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionResetSharedKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionResetSharedKey)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionResetSharedKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_StartPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCaptureFilterData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on virtual network gateway connection with filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngwcn1",
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginStartPacketCaptureOptions{Parameters: &armnetwork.VPNPacketCaptureStartParameters{
			FilterData: to.Ptr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCaptureFilterData.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCaptureFilterData.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCaptureFilterData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on virtual network gateway connection without filter"},
	})
	client = armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngwcn1",
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginStartPacketCaptureOptions{Parameters: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCapture.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_StopPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStopPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop packet capture on virtual network gateway connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"vpngwcn1",
		armnetwork.VPNPacketCaptureStopParameters{
			SasURL: to.Ptr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginStopPacketCaptureOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStopPacketCapture.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStopPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStopPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_GetIkeSas(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetIkeSas.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetworkGatewayConnectionIkeSa"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginGetIkeSas(ctx,
		"rg1",
		"vpngwcn1",
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginGetIkeSasOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetIkeSas.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetIkeSas.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetIkeSas.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayConnections_ResetConnection(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionReset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResetVirtualNetworkGatewayConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("subid", cred, &options)
	poller, err := client.BeginResetConnection(ctx,
		"rg1",
		"conn1",
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginResetConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionReset.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionReset.json: %v", err)
	}
}

func TestLocalNetworkGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateLocalNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLocalNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"localgw",
		armnetwork.LocalNetworkGateway{
			Location: to.Ptr("Central US"),
			Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
				Fqdn:             to.Ptr("site1.contoso.com"),
				GatewayIPAddress: to.Ptr("11.12.13.14"),
				LocalNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.1.0.0/16")},
				},
			},
		},
		&armnetwork.LocalNetworkGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LocalNetworkGateway{
			Name:     to.Ptr("localgw"),
			Type:     to.Ptr("Microsoft.Network/localNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
				GatewayIPAddress: to.Ptr("11.12.13.14"),
				LocalNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.1.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalNetworkGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetLocalNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLocalNetworkGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"localgw",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LocalNetworkGateway{
			Name:     to.Ptr("localgw"),
			Type:     to.Ptr("Microsoft.Network/localNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw"),
			Location: to.Ptr("centralus"),
			Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
				GatewayIPAddress: to.Ptr("x.x.x.x"),
				LocalNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.1.0.0/16")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalNetworkGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteLocalNetworkGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLocalNetworkGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"localgw",
		&armnetwork.LocalNetworkGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayDelete.json: %v", err)
	}
}

func TestLocalNetworkGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateLocalNetworkGatewayTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLocalNetworkGatewaysClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"lgw",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.LocalNetworkGateway{
			Name:     to.Ptr("lgw"),
			Type:     to.Ptr("Microsoft.Network/localNetworkGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/lgw"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
				GatewayIPAddress: to.Ptr("12.0.0.1"),
				LocalNetworkAddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("12.0.0.0/8")},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocalNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocalNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocalNetworkGateways_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListLocalNetworkGateways"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewLocalNetworkGatewaysClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.LocalNetworkGatewayListResult{
			Value: []*armnetwork.LocalNetworkGateway{
				{
					Name:     to.Ptr("localgw1"),
					Type:     to.Ptr("Microsoft.Network/localNetworkGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw1"),
					Location: to.Ptr("centralus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
						GatewayIPAddress: to.Ptr("x.x.x.x"),
						LocalNetworkAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.1.0.0/16")},
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name:     to.Ptr("localgw2"),
					Type:     to.Ptr("Microsoft.Network/localNetworkGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/localNetworkGateways/localgw2"),
					Location: to.Ptr("eastus"),
					Etag:     to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
						GatewayIPAddress: to.Ptr("x.x.x.x"),
						LocalNetworkAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.2.0.0/16")},
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocalNetworkGatewayListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocalNetworkGatewayListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LocalNetworkGatewayList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayNatRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworkGatewayNatRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayNatRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGatewayNatRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/gateway1/natRules/natRule1"),
			Name: to.Ptr("natRule1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
				Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
				ExternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("50.4.0.0/24"),
						PortRange:    to.Ptr("200-200"),
					}},
				InternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("10.4.0.0/24"),
						PortRange:    to.Ptr("100-100"),
					}},
				IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/gateway1/ipConfigurations/default"),
				Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGatewayNatRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGatewayNatRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayNatRules_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRulePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworkGatewayNatRulePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayNatRulesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		armnetwork.VirtualNetworkGatewayNatRule{
			Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
				Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
				ExternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("192.168.21.0/24"),
						PortRange:    to.Ptr("300-400"),
					}},
				InternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("10.4.0.0/24"),
						PortRange:    to.Ptr("200-300"),
					}},
				IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/gateway1/ipConfigurations/default"),
				Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
			},
		},
		&armnetwork.VirtualNetworkGatewayNatRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRulePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRulePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkGatewayNatRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/gateway1/natRules/natRule1"),
			Name: to.Ptr("natRule1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualNetworkGatewayNatRuleProperties{
				Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
				ExternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("192.168.21.0/24"),
						PortRange:    to.Ptr("300-400"),
					}},
				InternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("10.4.0.0/24"),
						PortRange:    to.Ptr("200-300"),
					}},
				IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/gateway1/ipConfigurations/default"),
				Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkGatewayNatRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkGatewayNatRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRulePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkGatewayNatRules_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworkGatewayNatRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayNatRulesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		&armnetwork.VirtualNetworkGatewayNatRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleDelete.json: %v", err)
	}
}

func TestVirtualNetworkGatewayNatRules_ListByVirtualNetworkGateway(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworkGatewayNatRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkGatewayNatRulesClient("subid", cred, &options)
	pager := client.ListByVirtualNetworkGateway("rg1",
		"gateway1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualNetworkGatewayNatRulesResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualNetworkGatewayNatRulesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualNetworkGatewayNatRulesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayNatRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkTaps_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Virtual Network Tap resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkTapsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"test-vtap",
		&armnetwork.VirtualNetworkTapsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapDelete.json: %v", err)
	}
}

func TestVirtualNetworkTaps_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Network Tap"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkTapsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"testvtap",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkTap{
			Name:     to.Ptr("testvtap"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
			Location: to.Ptr("centraluseuap"),
			Etag:     to.Ptr("etag"),
			Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
				DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
				},
				DestinationPort: to.Ptr[int32](4789),
				NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface2/tapConfigurations/testtapConfiguration"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkTap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkTap)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkTaps_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Virtual Network Tap"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkTapsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"test-vtap",
		armnetwork.VirtualNetworkTap{
			Location: to.Ptr("centraluseuap"),
			Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
				DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/ipconfig1"),
				},
			},
		},
		&armnetwork.VirtualNetworkTapsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkTap{
			Name:     to.Ptr("testvtap"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
			Location: to.Ptr("centraluseuap"),
			Etag:     to.Ptr("etag"),
			Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
				DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
				},
				DestinationPort: to.Ptr[int32](4789),
				NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface2/tapConfigurations/testtapConfiguration"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkTap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkTap)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkTaps_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update virtual network tap tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkTapsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"test-vtap",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualNetworkTap{
			Name:     to.Ptr("test-vtap"),
			Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/test-vtap"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
				DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
				},
				DestinationPort: to.Ptr[int32](4789),
				NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface2/tapConfigurations/testtapConfiguration"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkTap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkTap)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkTaps_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual network taps"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkTapsClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkTapListResult{
			Value: []*armnetwork.VirtualNetworkTap{
				{
					Name:     to.Ptr("testvtap"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
					Location: to.Ptr("centraluseuap"),
					Etag:     to.Ptr("etag"),
					Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
						DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
						},
						DestinationPort: to.Ptr[int32](4789),
						NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface2/tapConfigurations/testtapConfiguration"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
					},
				},
				{
					Name:     to.Ptr("testvtap2"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/testvtap2"),
					Location: to.Ptr("centraluseuap"),
					Etag:     to.Ptr("etag"),
					Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
						DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
						},
						DestinationPort: to.Ptr[int32](4789),
						NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface3/tapConfigurations/testtapConfiguration"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkTapListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkTapListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkTaps_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual network taps in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualNetworkTapsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualNetworkTapListResult{
			Value: []*armnetwork.VirtualNetworkTap{
				{
					Name:     to.Ptr("testvtap"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/testvtap"),
					Location: to.Ptr("centraluseuap"),
					Etag:     to.Ptr("etag"),
					Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
						DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
						},
						DestinationPort: to.Ptr[int32](4789),
						NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface2/tapConfigurations/testtapConfiguration"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
					},
				},
				{
					Name:     to.Ptr("testvtap2"),
					Type:     to.Ptr("Microsoft.Network/virtualNetworkTaps"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkTaps/testvtap2"),
					Location: to.Ptr("centraluseuap"),
					Etag:     to.Ptr("etag"),
					Properties: &armnetwork.VirtualNetworkTapPropertiesFormat{
						DestinationNetworkInterfaceIPConfiguration: &armnetwork.InterfaceIPConfiguration{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface/ipConfigurations/testIPConfig1"),
						},
						DestinationPort: to.Ptr[int32](4789),
						NetworkInterfaceTapConfigurations: []*armnetwork.InterfaceTapConfiguration{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testNetworkInterface3/tapConfigurations/testtapConfiguration"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceGUID:      to.Ptr("6A7C139D-8B8D-499B-B7CB-4F3F02A8A44F"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkTapListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkTapListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkTapList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouters_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualRouter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRoutersClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualRouter",
		&armnetwork.VirtualRoutersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterDelete.json: %v", err)
	}
}

func TestVirtualRouters_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualRouter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRoutersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualRouter",
		&armnetwork.VirtualRoutersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualRouter{
			Name:     to.Ptr("virtualRouter"),
			Type:     to.Ptr("Microsoft.Network/virtualRouters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualRouterPropertiesFormat{
				HostedGateway: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"),
				},
				Peerings: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualRouterAsn:  to.Ptr[int64](10000),
				VirtualRouterIPs: []*string{
					to.Ptr("192.168.1.1"),
					to.Ptr("192.168.1.2")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualRouter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualRouter)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouters_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualRouter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRoutersClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualRouter",
		armnetwork.VirtualRouter{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.VirtualRouterPropertiesFormat{
				HostedGateway: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"),
				},
			},
		},
		&armnetwork.VirtualRoutersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualRouter{
			Name:     to.Ptr("virtualRouter"),
			Type:     to.Ptr("Microsoft.Network/virtualRouters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualRouterPropertiesFormat{
				HostedGateway: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"),
				},
				Peerings: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualRouterAsn:  to.Ptr[int64](10000),
				VirtualRouterIPs: []*string{
					to.Ptr("192.168.1.1"),
					to.Ptr("192.168.1.2")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualRouter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualRouter)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouters_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Virtual Router for a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRoutersClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualRouterListResult{
			Value: []*armnetwork.VirtualRouter{
				{
					Name:     to.Ptr("virtualRouter"),
					Type:     to.Ptr("Microsoft.Network/virtualRouters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualRouterPropertiesFormat{
						HostedGateway: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"),
						},
						Peerings: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualRouterAsn:  to.Ptr[int64](10000),
						VirtualRouterIPs: []*string{
							to.Ptr("192.168.1.1"),
							to.Ptr("192.168.1.2")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualRouterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualRouterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouters_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Virtual Routers for a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRoutersClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualRouterListResult{
			Value: []*armnetwork.VirtualRouter{
				{
					Name:     to.Ptr("virtualRouter"),
					Type:     to.Ptr("Microsoft.Network/virtualRouters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualRouterPropertiesFormat{
						HostedGateway: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"),
						},
						Peerings: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualRouterAsn:  to.Ptr[int64](10000),
						VirtualRouterIPs: []*string{
							to.Ptr("192.168.1.1"),
							to.Ptr("192.168.1.2")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualRouterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualRouterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouterPeerings_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualRouterPeering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRouterPeeringsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualRouter",
		"peering1",
		&armnetwork.VirtualRouterPeeringsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringDelete.json: %v", err)
	}
}

func TestVirtualRouterPeerings_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Router Peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRouterPeeringsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualRouter",
		"peering1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualRouterPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
			Name: to.Ptr("peering1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.VirtualRouterPeeringProperties{
				PeerAsn:           to.Ptr[int64](20000),
				PeerIP:            to.Ptr("192.168.1.5"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualRouterPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualRouterPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouterPeerings_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Virtual Router Peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRouterPeeringsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualRouter",
		"peering1",
		armnetwork.VirtualRouterPeering{
			Properties: &armnetwork.VirtualRouterPeeringProperties{
				PeerAsn: to.Ptr[int64](20000),
				PeerIP:  to.Ptr("192.168.1.5"),
			},
		},
		&armnetwork.VirtualRouterPeeringsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualRouterPeering{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
			Name: to.Ptr("peering1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.VirtualRouterPeeringProperties{
				PeerAsn:           to.Ptr[int64](20000),
				PeerIP:            to.Ptr("192.168.1.5"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualRouterPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualRouterPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualRouterPeerings_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Virtual Router Peerings for a given Virtual Router"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualRouterPeeringsClient("subid", cred, &options)
	pager := client.List("rg1",
		"virtualRouter",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.VirtualRouterPeeringListResult{
			Value: []*armnetwork.VirtualRouterPeering{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"),
					Name: to.Ptr("peering1"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.VirtualRouterPeeringProperties{
						PeerAsn:           to.Ptr[int64](20000),
						PeerIP:            to.Ptr("192.168.1.5"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualRouterPeeringListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualRouterPeeringListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeeringList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualWans_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualWANGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualWansClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"wan1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualWAN{
			Name:     to.Ptr("wan1"),
			Type:     to.Ptr("Microsoft.Network/virtualWANs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualWanProperties{
				Type:                 to.Ptr("Basic"),
				DisableVPNEncryption: to.Ptr(false),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHubs: []*armnetwork.SubResource{
					{},
					{}},
				VPNSites: []*armnetwork.SubResource{
					{},
					{}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualWAN) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualWAN)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualWans_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualWANCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualWansClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"wan1",
		armnetwork.VirtualWAN{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.VirtualWanProperties{
				Type:                 to.Ptr("Basic"),
				DisableVPNEncryption: to.Ptr(false),
			},
		},
		&armnetwork.VirtualWansClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualWAN{
			Name:     to.Ptr("wan1"),
			Type:     to.Ptr("Microsoft.Network/virtualWANs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualWanProperties{
				Type:                 to.Ptr("Basic"),
				DisableVPNEncryption: to.Ptr(false),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHubs: []*armnetwork.SubResource{
					{},
					{}},
				VPNSites: []*armnetwork.SubResource{
					{},
					{}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualWAN) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualWAN)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualWans_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualWANUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualWansClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"wan1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualWAN{
			Name:     to.Ptr("wan1"),
			Type:     to.Ptr("Microsoft.Network/virtualWANs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualWanProperties{
				Type:                 to.Ptr("Basic"),
				DisableVPNEncryption: to.Ptr(false),
				ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHubs: []*armnetwork.SubResource{
					{},
					{}},
				VPNSites: []*armnetwork.SubResource{
					{},
					{}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualWAN) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualWAN)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualWans_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualWANDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualWansClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualWan1",
		&armnetwork.VirtualWansClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANDelete.json: %v", err)
	}
}

func TestVirtualWans_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualWANListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualWansClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualWANsResult{
			Value: []*armnetwork.VirtualWAN{
				{
					Name:     to.Ptr("wan1"),
					Type:     to.Ptr("Microsoft.Network/virtualWANs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualWanProperties{
						Type:                 to.Ptr("Basic"),
						DisableVPNEncryption: to.Ptr(false),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHubs: []*armnetwork.SubResource{
							{},
							{}},
						VPNSites: []*armnetwork.SubResource{
							{},
							{}},
					},
				},
				{
					Name:     to.Ptr("wan2"),
					Type:     to.Ptr("Microsoft.Network/virtualWANs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualWanProperties{
						Type:                 to.Ptr("Basic"),
						DisableVPNEncryption: to.Ptr(false),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHubs: []*armnetwork.SubResource{
							{},
							{}},
						VPNSites: []*armnetwork.SubResource{
							{},
							{}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualWANsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualWANsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualWans_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualWANList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualWansClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualWANsResult{
			Value: []*armnetwork.VirtualWAN{
				{
					Name:     to.Ptr("wan1"),
					Type:     to.Ptr("Microsoft.Network/virtualWANs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualWanProperties{
						Type:                 to.Ptr("Basic"),
						DisableVPNEncryption: to.Ptr(false),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHubs: []*armnetwork.SubResource{
							{},
							{}},
						VPNSites: []*armnetwork.SubResource{
							{},
							{}},
					},
				},
				{
					Name:     to.Ptr("wan2"),
					Type:     to.Ptr("Microsoft.Network/virtualWANs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualWANs/wan2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualWanProperties{
						Type:                 to.Ptr("Basic"),
						DisableVPNEncryption: to.Ptr(false),
						ProvisioningState:    to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHubs: []*armnetwork.SubResource{
							{},
							{}},
						VPNSites: []*armnetwork.SubResource{
							{},
							{}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualWANsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualWANsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualWANList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSites_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"vpnSite1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNSite{
			Name:     to.Ptr("vpnSite1"),
			Type:     to.Ptr("Microsoft.Network/vpnSites"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNSiteProperties{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				DeviceProperties: &armnetwork.DeviceProperties{
					LinkSpeedInMbps: to.Ptr[int32](0),
				},
				IsSecuritySite:    to.Ptr(false),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
				},
				VPNSiteLinks: []*armnetwork.VPNSiteLink{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/vpnSiteLink1"),
						Name: to.Ptr("vpnSiteLink1"),
						Type: to.Ptr("Microsoft.Network/vpnSites/vpnSiteLinks"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
						Properties: &armnetwork.VPNSiteLinkProperties{
							BgpProperties: &armnetwork.VPNLinkBgpSettings{
								Asn:               to.Ptr[int64](1234),
								BgpPeeringAddress: to.Ptr("192.168.0.0"),
							},
							IPAddress: to.Ptr("50.50.50.56"),
							LinkProperties: &armnetwork.VPNLinkProviderProperties{
								LinkProviderName: to.Ptr("vendor1"),
								LinkSpeedInMbps:  to.Ptr[int32](0),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNSite)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSites_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"vpnSite1",
		armnetwork.VPNSite{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.VPNSiteProperties{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				IsSecuritySite: to.Ptr(false),
				O365Policy: &armnetwork.O365PolicyProperties{
					BreakOutCategories: &armnetwork.O365BreakOutCategoryPolicies{
						Default:  to.Ptr(false),
						Allow:    to.Ptr(true),
						Optimize: to.Ptr(true),
					},
				},
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
				},
				VPNSiteLinks: []*armnetwork.VPNSiteLink{
					{
						Name: to.Ptr("vpnSiteLink1"),
						Properties: &armnetwork.VPNSiteLinkProperties{
							BgpProperties: &armnetwork.VPNLinkBgpSettings{
								Asn:               to.Ptr[int64](1234),
								BgpPeeringAddress: to.Ptr("192.168.0.0"),
							},
							Fqdn:      to.Ptr("link1.vpnsite1.contoso.com"),
							IPAddress: to.Ptr("50.50.50.56"),
							LinkProperties: &armnetwork.VPNLinkProviderProperties{
								LinkProviderName: to.Ptr("vendor1"),
								LinkSpeedInMbps:  to.Ptr[int32](0),
							},
						},
					}},
			},
		},
		&armnetwork.VPNSitesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNSite{
			Name:     to.Ptr("vpnSite1"),
			Type:     to.Ptr("Microsoft.Network/vpnSites"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNSiteProperties{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				DeviceProperties: &armnetwork.DeviceProperties{
					LinkSpeedInMbps: to.Ptr[int32](0),
				},
				IsSecuritySite:    to.Ptr(false),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
				},
				VPNSiteLinks: []*armnetwork.VPNSiteLink{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/vpnSiteLink1"),
						Name: to.Ptr("vpnSiteLink1"),
						Type: to.Ptr("Microsoft.Network/vpnSites/vpnSiteLinks"),
						Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
						Properties: &armnetwork.VPNSiteLinkProperties{
							BgpProperties: &armnetwork.VPNLinkBgpSettings{
								Asn:               to.Ptr[int64](1234),
								BgpPeeringAddress: to.Ptr("192.168.0.0"),
							},
							IPAddress: to.Ptr("50.50.50.56"),
							LinkProperties: &armnetwork.VPNLinkProviderProperties{
								LinkProviderName: to.Ptr("vendor1"),
								LinkSpeedInMbps:  to.Ptr[int32](0),
							},
							ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNSite)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSites_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"vpnSite1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNSite{
			Name:     to.Ptr("vpnSite1"),
			Type:     to.Ptr("Microsoft.Network/vpnSites"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNSiteProperties{
				AddressSpace: &armnetwork.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.0.0.0/16")},
				},
				BgpProperties: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](1234),
					BgpPeeringAddress: to.Ptr("192.168.0.0"),
				},
				DeviceProperties: &armnetwork.DeviceProperties{
					DeviceModel:     to.Ptr("model01"),
					DeviceVendor:    to.Ptr("vendor1"),
					LinkSpeedInMbps: to.Ptr[int32](200),
				},
				IPAddress:         to.Ptr("10.0.0.0"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualWan:        &armnetwork.SubResource{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNSite)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSites_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"vpnSite1",
		&armnetwork.VPNSitesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteDelete.json: %v", err)
	}
}

func TestVPNSites_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVPNSitesResult{
			Value: []*armnetwork.VPNSite{
				{
					Name:     to.Ptr("vpnSite1"),
					Type:     to.Ptr("Microsoft.Network/vpnSites"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNSiteProperties{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/16")},
						},
						DeviceProperties: &armnetwork.DeviceProperties{
							LinkSpeedInMbps: to.Ptr[int32](0),
						},
						IsSecuritySite:    to.Ptr(false),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualWan: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
						},
						VPNSiteLinks: []*armnetwork.VPNSiteLink{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/vpnSiteLink1"),
								Name: to.Ptr("vpnSiteLink1"),
								Type: to.Ptr("Microsoft.Network/vpnSites/vpnSiteLinks"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
								Properties: &armnetwork.VPNSiteLinkProperties{
									BgpProperties: &armnetwork.VPNLinkBgpSettings{
										Asn:               to.Ptr[int64](1234),
										BgpPeeringAddress: to.Ptr("192.168.0.0"),
									},
									IPAddress: to.Ptr("50.50.50.56"),
									LinkProperties: &armnetwork.VPNLinkProviderProperties{
										LinkSpeedInMbps: to.Ptr[int32](0),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
					},
				},
				{
					Name:     to.Ptr("vpnSite2"),
					Type:     to.Ptr("Microsoft.Network/vpnSites"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNSiteProperties{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/16")},
						},
						BgpProperties: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](1234),
							BgpPeeringAddress: to.Ptr("192.168.0.0"),
						},
						DeviceProperties: &armnetwork.DeviceProperties{
							DeviceModel:     to.Ptr("model01"),
							DeviceVendor:    to.Ptr("vendor1"),
							LinkSpeedInMbps: to.Ptr[int32](200),
						},
						IPAddress:         to.Ptr("10.1.0.0"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualWan:        &armnetwork.SubResource{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVPNSitesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVPNSitesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSites_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVPNSitesResult{
			Value: []*armnetwork.VPNSite{
				{
					Name:     to.Ptr("vpnSite1"),
					Type:     to.Ptr("Microsoft.Network/vpnSites"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNSiteProperties{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/16")},
						},
						DeviceProperties: &armnetwork.DeviceProperties{
							LinkSpeedInMbps: to.Ptr[int32](0),
						},
						IsSecuritySite:    to.Ptr(false),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualWan: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
						},
						VPNSiteLinks: []*armnetwork.VPNSiteLink{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/vpnSiteLink1"),
								Name: to.Ptr("vpnSiteLink1"),
								Type: to.Ptr("Microsoft.Network/vpnSites/vpnSiteLinks"),
								Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
								Properties: &armnetwork.VPNSiteLinkProperties{
									BgpProperties: &armnetwork.VPNLinkBgpSettings{
										Asn:               to.Ptr[int64](1234),
										BgpPeeringAddress: to.Ptr("192.168.0.0"),
									},
									IPAddress: to.Ptr("50.50.50.56"),
									LinkProperties: &armnetwork.VPNLinkProviderProperties{
										LinkSpeedInMbps: to.Ptr[int32](0),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
								},
							}},
					},
				},
				{
					Name:     to.Ptr("vpnSite2"),
					Type:     to.Ptr("Microsoft.Network/vpnSites"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnSites/vpnSite2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNSiteProperties{
						AddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.0.0.0/16")},
						},
						BgpProperties: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](1234),
							BgpPeeringAddress: to.Ptr("192.168.0.0"),
						},
						DeviceProperties: &armnetwork.DeviceProperties{
							DeviceModel:     to.Ptr("model01"),
							DeviceVendor:    to.Ptr("vendor1"),
							LinkSpeedInMbps: to.Ptr[int32](200),
						},
						IPAddress:         to.Ptr("10.1.0.0"),
						IsSecuritySite:    to.Ptr(false),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualWan:        &armnetwork.SubResource{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVPNSitesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVPNSitesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSiteLinks_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSiteLinksClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"vpnSite1",
		"vpnSiteLink1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNSiteLink{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/vpnSiteLink1"),
			Name: to.Ptr("vpnSiteLink1"),
			Type: to.Ptr("Microsoft.Network/vpnSites/vpnSiteLinks"),
			Etag: to.Ptr("W/\"00000000-0000-0000-0000-000000000000\""),
			Properties: &armnetwork.VPNSiteLinkProperties{
				BgpProperties: &armnetwork.VPNLinkBgpSettings{
					Asn:               to.Ptr[int64](1234),
					BgpPeeringAddress: to.Ptr("192.168.0.0"),
				},
				IPAddress: to.Ptr("50.50.50.56"),
				LinkProperties: &armnetwork.VPNLinkProviderProperties{
					LinkSpeedInMbps: to.Ptr[int32](0),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNSiteLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNSiteLink)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSitesConfiguration_Download(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitesConfigurationDownload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSitesConfigurationDownload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSitesConfigurationClient("subid", cred, &options)
	poller, err := client.BeginDownload(ctx,
		"rg1",
		"wan1",
		armnetwork.GetVPNSitesConfigurationRequest{
			OutputBlobSasURL: to.Ptr("https://blobcortextesturl.blob.core.windows.net/folderforconfig/vpnFile?sp=rw&se=2018-01-10T03%3A42%3A04Z&sv=2017-04-17&sig=WvXrT5bDmDFfgHs%2Brz%2BjAu123eRCNE9BO0eQYcPDT7pY%3D&sr=b"),
			VPNSites: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/abc")},
		},
		&armnetwork.VPNSitesConfigurationClientBeginDownloadOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitesConfigurationDownload.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSitesConfigurationDownload.json: %v", err)
	}
}

func TestVPNServerConfigurations_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnServerConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"vpnServerConfiguration1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNServerConfiguration{
			Name:     to.Ptr("vpnServerConfiguration1"),
			Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNServerConfigurationProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
					{
						Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
					}},
				RadiusServers: []*armnetwork.RadiusServer{
					{
						RadiusServerAddress: to.Ptr("10.0.0.0"),
						RadiusServerScore:   to.Ptr[int64](25),
					}},
				VPNAuthenticationTypes: []*armnetwork.VPNAuthenticationType{
					to.Ptr(armnetwork.VPNAuthenticationTypeCertificate)},
				VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
					{
						DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
						IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
						IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
						IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
						IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
						PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
						SaDataSizeKilobytes: to.Ptr[int32](429497),
						SaLifeTimeSeconds:   to.Ptr[int32](86472),
					}},
				VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
					{
						Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
					}},
				VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
					to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNServerConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNServerConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNServerConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnServerConfigurationCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"vpnServerConfiguration1",
		armnetwork.VPNServerConfiguration{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.VPNServerConfigurationProperties{
				RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
					{
						Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
					}},
				RadiusServers: []*armnetwork.RadiusServer{
					{
						RadiusServerAddress: to.Ptr("10.0.0.0"),
						RadiusServerScore:   to.Ptr[int64](25),
						RadiusServerSecret:  to.Ptr("radiusServerSecret"),
					}},
				VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
					{
						DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
						IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
						IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
						IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
						IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
						PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
						SaDataSizeKilobytes: to.Ptr[int32](429497),
						SaLifeTimeSeconds:   to.Ptr[int32](86472),
					}},
				VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
					{
						Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
					}},
				VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
					to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
			},
		},
		&armnetwork.VPNServerConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNServerConfiguration{
			Name:     to.Ptr("vpnServerConfiguration1"),
			Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNServerConfigurationProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
					{
						Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
					}},
				RadiusServers: []*armnetwork.RadiusServer{
					{
						RadiusServerAddress: to.Ptr("10.0.0.0"),
						RadiusServerScore:   to.Ptr[int64](25),
					}},
				VPNAuthenticationTypes: []*armnetwork.VPNAuthenticationType{
					to.Ptr(armnetwork.VPNAuthenticationTypeCertificate)},
				VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
					{
						DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
						IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
						IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
						IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
						IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
						PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
						SaDataSizeKilobytes: to.Ptr[int32](429497),
						SaLifeTimeSeconds:   to.Ptr[int32](86472),
					}},
				VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
					{
						Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
					}},
				VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
					to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNServerConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNServerConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNServerConfigurations_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnServerConfigurationUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"vpnServerConfiguration1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNServerConfiguration{
			Name:     to.Ptr("vpnServerConfiguration1"),
			Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNServerConfigurationProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
					{
						Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				RadiusServerAddress: to.Ptr("8.9.9.9"),
				RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
					}},
				RadiusServerSecret: to.Ptr("<password>"),
				VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
					{
						DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
						IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
						IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
						IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
						IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
						PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
						SaDataSizeKilobytes: to.Ptr[int32](429497),
						SaLifeTimeSeconds:   to.Ptr[int32](86472),
					}},
				VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
					{
						Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
						Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
					}},
				VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
					{
						Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
						PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
					}},
				VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
					to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNServerConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNServerConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNServerConfigurations_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnServerConfigurationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"vpnServerConfiguration1",
		&armnetwork.VPNServerConfigurationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationDelete.json: %v", err)
	}
}

func TestVPNServerConfigurations_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnServerConfigurationListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVPNServerConfigurationsResult{
			Value: []*armnetwork.VPNServerConfiguration{
				{
					Name:     to.Ptr("vpnServerConfiguration1"),
					Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNServerConfigurationProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
							{
								Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						RadiusServerAddress: to.Ptr("8.9.9.9"),
						RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
							}},
						RadiusServerSecret: to.Ptr("<password>"),
						VPNAuthenticationTypes: []*armnetwork.VPNAuthenticationType{
							to.Ptr(armnetwork.VPNAuthenticationTypeCertificate)},
						VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
							{
								DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
								IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
								IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
								IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
								IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
								PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
								SaDataSizeKilobytes: to.Ptr[int32](429497),
								SaLifeTimeSeconds:   to.Ptr[int32](86472),
							}},
						VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
							{
								Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
							}},
						VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
							to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
					},
				},
				{
					Name:     to.Ptr("vpnServerConfiguration2"),
					Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNServerConfigurationProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
							{
								Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						RadiusServerAddress: to.Ptr("8.9.9.9"),
						RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
							}},
						RadiusServerSecret: to.Ptr("<password>"),
						VPNAuthenticationTypes: []*armnetwork.VPNAuthenticationType{
							to.Ptr(armnetwork.VPNAuthenticationTypeCertificate)},
						VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
							{
								DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
								IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
								IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
								IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
								IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
								PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
								SaDataSizeKilobytes: to.Ptr[int32](429497),
								SaLifeTimeSeconds:   to.Ptr[int32](86472),
							}},
						VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
							{
								Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
							}},
						VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
							to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVPNServerConfigurationsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVPNServerConfigurationsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNServerConfigurations_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnServerConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVPNServerConfigurationsResult{
			Value: []*armnetwork.VPNServerConfiguration{
				{
					Name:     to.Ptr("vpnServerConfiguration1"),
					Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNServerConfigurationProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
							{
								Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						RadiusServerAddress: to.Ptr("8.9.9.9"),
						RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
							}},
						RadiusServerSecret: to.Ptr("<password>"),
						VPNAuthenticationTypes: []*armnetwork.VPNAuthenticationType{
							to.Ptr(armnetwork.VPNAuthenticationTypeCertificate)},
						VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
							{
								DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
								IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
								IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
								IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
								IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
								PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
								SaDataSizeKilobytes: to.Ptr[int32](429497),
								SaLifeTimeSeconds:   to.Ptr[int32](86472),
							}},
						VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
							{
								Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
							}},
						VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
							to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
					},
				},
				{
					Name:     to.Ptr("vpnServerConfiguration2"),
					Type:     to.Ptr("Microsoft.Network/vpnServerConfigurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNServerConfigurationProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
							{
								Name:       to.Ptr("vpnServerConfigRadiusClientRootCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigRadiusServerRootCer1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuM"),
							}},
						RadiusServers: []*armnetwork.RadiusServer{
							{
								RadiusServerAddress: to.Ptr("10.0.0.0"),
								RadiusServerScore:   to.Ptr[int64](25),
							}},
						VPNAuthenticationTypes: []*armnetwork.VPNAuthenticationType{
							to.Ptr(armnetwork.VPNAuthenticationTypeCertificate)},
						VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
							{
								DhGroup:             to.Ptr(armnetwork.DhGroupDHGroup14),
								IkeEncryption:       to.Ptr(armnetwork.IkeEncryptionAES256),
								IkeIntegrity:        to.Ptr(armnetwork.IkeIntegritySHA384),
								IPSecEncryption:     to.Ptr(armnetwork.IPSecEncryptionAES256),
								IPSecIntegrity:      to.Ptr(armnetwork.IPSecIntegritySHA256),
								PfsGroup:            to.Ptr(armnetwork.PfsGroupPFS14),
								SaDataSizeKilobytes: to.Ptr[int32](429497),
								SaLifeTimeSeconds:   to.Ptr[int32](86472),
							}},
						VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
							{
								Name:       to.Ptr("vpnServerConfigVpnClientRevokedCert1"),
								Thumbprint: to.Ptr("83FFBFC8848B5A5836C94D0112367E16148A286F"),
							}},
						VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
							{
								Name:           to.Ptr("vpnServerConfigVpnClientRootCert1"),
								PublicCertData: to.Ptr("MIIC5zCCAc+gAwIBAgIQErQ0Hk4aDJxIA+Q5RagB+jANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzEyMTQyMTA3MzhaFw0xODEyMTQyMTI3MzhaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArP7/NQXmW7cQ/ZR1mv3Y3I29Lt7HTOqzo/1KUOoVH3NItbQIRAQbwKy3UWrOFz4eGNX2GWtNRMdCyWsKeqy9Ltsdfcm1IbKXkl84DFeU/ZacXu4Dl3xX3gV5du4TLZjEowJELyur11Ea2YcjPRQ/FzAF9/hGuboS1HZQEPLx4FdUs9OxCYOtc0MxBCwLfVTTRqarb0Ne+arNYd4kCzIhAke1nOyKAJBda5ZL+VHy3S5S8qGlD46jm8HXugmAkUygS4oIIXOmj/1O9sNAi3LN60zufSzCmP8Rm/iUGX+DHAGGiXxwZOKQLEDaZXKqoHjMPP0XudmSWwOIbyeQVrLhkwIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFEfeNU2trYxNLF9ONmuJUsT13pKDMA0GCSqGSIb3DQEBCwUAA4IBAQBmM6RJzsGGipxyMhimHKN2xlkejhVsgBoTAhOU0llW9aUSwINJ9zFUGgI8IzUFy1VG776fchHp0LMRmPSIUYk5btEPxbsrPtumPuMH8EQGrS+Rt4pD+78c8H1fEPkq5CmDl/PKu4JoFGv+aFcE+Od0hlILstIF10Qysf++QXDolKfzJa/56bgMeYKFiju73loiRM57ns8ddXpfLl792UVpRkFU62LNns6Y1LKTwapmUF4IvIuAIzd6LZNOQng64LAKXtKnViJ1JQiXwf4CEzhgvAti3/ejpb3U90hsrUcyZi6wBv9bZLcAJRWpz61JNYliM1d1grSwQDKGXNQE4xuN"),
							}},
						VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
							to.Ptr(armnetwork.VPNGatewayTunnelingProtocolIkeV2)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVPNServerConfigurationsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVPNServerConfigurationsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubs_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualHub{
			Name:     to.Ptr("virtualHub1"),
			Type:     to.Ptr("Microsoft.Network/virtualHubs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualHubProperties{
				AddressPrefix:              to.Ptr("10.10.1.0/24"),
				AllowBranchToBranchTraffic: to.Ptr(false),
				PreferredRoutingGateway:    to.Ptr(armnetwork.PreferredRoutingGatewayExpressRoute),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingState:               to.Ptr(armnetwork.RoutingStateProvisioned),
				SKU:                        to.Ptr("Basic"),
				VirtualHubRouteTableV2S:    []*armnetwork.VirtualHubRouteTableV2{},
				VirtualRouterAsn:           to.Ptr[int64](65515),
				VirtualRouterIPs: []*string{
					to.Ptr("10.10.1.12"),
					to.Ptr("10.10.1.13")},
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualHub)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubs_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub2",
		armnetwork.VirtualHub{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.VirtualHubProperties{
				AddressPrefix: to.Ptr("10.168.0.0/24"),
				SKU:           to.Ptr("Basic"),
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
				},
			},
		},
		&armnetwork.VirtualHubsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualHub{
			Name:     to.Ptr("virtualHub2"),
			Type:     to.Ptr("Microsoft.Network/virtualHubs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualHubProperties{
				AddressPrefix:              to.Ptr("10.168.0.0/24"),
				AllowBranchToBranchTraffic: to.Ptr(false),
				PreferredRoutingGateway:    to.Ptr(armnetwork.PreferredRoutingGatewayExpressRoute),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingState:               to.Ptr(armnetwork.RoutingStateProvisioned),
				SKU:                        to.Ptr("Basic"),
				VirtualHubRouteTableV2S:    []*armnetwork.VirtualHubRouteTableV2{},
				VirtualRouterAsn:           to.Ptr[int64](65515),
				VirtualRouterIPs: []*string{
					to.Ptr("10.10.1.12"),
					to.Ptr("10.10.1.13")},
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualHub)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubs_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"virtualHub2",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualHub{
			Name:     to.Ptr("virtualHub2"),
			Type:     to.Ptr("Microsoft.Network/virtualHubs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualHubProperties{
				AddressPrefix:              to.Ptr("10.168.0.0/24"),
				AllowBranchToBranchTraffic: to.Ptr(false),
				ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
				SKU:                        to.Ptr("Basic"),
				VirtualHubRouteTableV2S:    []*armnetwork.VirtualHubRouteTableV2{},
				VirtualRouterAsn:           to.Ptr[int64](65515),
				VirtualRouterIPs: []*string{
					to.Ptr("10.10.1.12"),
					to.Ptr("10.10.1.13")},
				VirtualWan: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualHub)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubs_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		&armnetwork.VirtualHubsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubDelete.json: %v", err)
	}
}

func TestVirtualHubs_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualHubsResult{
			Value: []*armnetwork.VirtualHub{
				{
					Name:     to.Ptr("virtualHub1"),
					Type:     to.Ptr("Microsoft.Network/virtualHubs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualHubProperties{
						AddressPrefix:              to.Ptr("10.10.1.0/24"),
						AllowBranchToBranchTraffic: to.Ptr(false),
						PreferredRoutingGateway:    to.Ptr(armnetwork.PreferredRoutingGatewayExpressRoute),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RoutingState:               to.Ptr(armnetwork.RoutingStateProvisioned),
						SKU:                        to.Ptr("Basic"),
						VirtualHubRouteTableV2S: []*armnetwork.VirtualHubRouteTableV2{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/routeTables/virtualHubRouteTable2"),
								Name: to.Ptr("rt2a"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VirtualHubRouteTableV2Properties{
									AttachedConnections: []*string{
										to.Ptr("All_Vnets")},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Routes: []*armnetwork.VirtualHubRouteV2{
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("20.10.0.0/16"),
												to.Ptr("20.20.0.0/16")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										},
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("0.0.0.0/0")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										}},
								},
							}},
						VirtualRouterAsn: to.Ptr[int64](65515),
						VirtualRouterIPs: []*string{
							to.Ptr("10.10.1.12"),
							to.Ptr("10.10.1.13")},
						VirtualWan: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
						},
					},
				},
				{
					Name:     to.Ptr("virtualHub2"),
					Type:     to.Ptr("Microsoft.Network/virtualHubs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"),
					Location: to.Ptr("East US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualHubProperties{
						AddressPrefix:              to.Ptr("210.10.1.0/24"),
						AllowBranchToBranchTraffic: to.Ptr(false),
						PreferredRoutingGateway:    to.Ptr(armnetwork.PreferredRoutingGatewayExpressRoute),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RoutingState:               to.Ptr(armnetwork.RoutingStateProvisioned),
						SKU:                        to.Ptr("Basic"),
						VirtualHubRouteTableV2S: []*armnetwork.VirtualHubRouteTableV2{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/routeTables/virtualHubRouteTable2"),
								Name: to.Ptr("rt2a"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VirtualHubRouteTableV2Properties{
									AttachedConnections: []*string{
										to.Ptr("All_Vnets")},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Routes: []*armnetwork.VirtualHubRouteV2{
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("20.10.0.0/16"),
												to.Ptr("20.20.0.0/16")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										},
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("0.0.0.0/0")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										}},
								},
							}},
						VirtualRouterAsn: to.Ptr[int64](65515),
						VirtualRouterIPs: []*string{
							to.Ptr("10.10.1.12"),
							to.Ptr("10.10.1.13")},
						VirtualWan: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualHubsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualHubsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubs_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualHubsResult{
			Value: []*armnetwork.VirtualHub{
				{
					Name:     to.Ptr("virtualHub1"),
					Type:     to.Ptr("Microsoft.Network/virtualHubs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualHubProperties{
						AddressPrefix:              to.Ptr("10.10.1.0/24"),
						AllowBranchToBranchTraffic: to.Ptr(false),
						PreferredRoutingGateway:    to.Ptr(armnetwork.PreferredRoutingGatewayExpressRoute),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RoutingState:               to.Ptr(armnetwork.RoutingStateProvisioned),
						SKU:                        to.Ptr("Basic"),
						VirtualHubRouteTableV2S: []*armnetwork.VirtualHubRouteTableV2{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeTables/virtualHubRouteTable1"),
								Name: to.Ptr("rt2a"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VirtualHubRouteTableV2Properties{
									AttachedConnections: []*string{
										to.Ptr("All_Vnets")},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Routes: []*armnetwork.VirtualHubRouteV2{
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("20.10.0.0/16"),
												to.Ptr("20.20.0.0/16")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										},
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("0.0.0.0/0")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										}},
								},
							}},
						VirtualRouterAsn: to.Ptr[int64](65515),
						VirtualRouterIPs: []*string{
							to.Ptr("10.10.1.12"),
							to.Ptr("10.10.1.13")},
						VirtualWan: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
						},
					},
				},
				{
					Name:     to.Ptr("virtualHub2"),
					Type:     to.Ptr("Microsoft.Network/virtualHubs"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"),
					Location: to.Ptr("East US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VirtualHubProperties{
						AddressPrefix:              to.Ptr("210.10.1.0/24"),
						AllowBranchToBranchTraffic: to.Ptr(false),
						PreferredRoutingGateway:    to.Ptr(armnetwork.PreferredRoutingGatewayExpressRoute),
						ProvisioningState:          to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RoutingState:               to.Ptr(armnetwork.RoutingStateProvisioned),
						SKU:                        to.Ptr("Basic"),
						VirtualHubRouteTableV2S: []*armnetwork.VirtualHubRouteTableV2{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/routeTables/virtualHubRouteTable2"),
								Name: to.Ptr("rt2a"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VirtualHubRouteTableV2Properties{
									AttachedConnections: []*string{
										to.Ptr("All_Vnets")},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									Routes: []*armnetwork.VirtualHubRouteV2{
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("20.10.0.0/16"),
												to.Ptr("20.20.0.0/16")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										},
										{
											DestinationType: to.Ptr("CIDR"),
											Destinations: []*string{
												to.Ptr("0.0.0.0/0")},
											NextHopType: to.Ptr("IPAddress"),
											NextHops: []*string{
												to.Ptr("10.0.0.68")},
										}},
								},
							}},
						VirtualRouterAsn: to.Ptr[int64](65515),
						VirtualRouterIPs: []*string{
							to.Ptr("10.10.1.12"),
							to.Ptr("10.10.1.13")},
						VirtualWan: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualHubsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualHubsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubs_GetEffectiveVirtualHubRoutes(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Effective Routes for a Connection resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubsClient("subid", cred, &options)
	poller, err := client.BeginGetEffectiveVirtualHubRoutes(ctx,
		"rg1",
		"virtualHub1",
		&armnetwork.VirtualHubsClientBeginGetEffectiveVirtualHubRoutesOptions{EffectiveRoutesParameters: &armnetwork.EffectiveRoutesParameters{
			ResourceID:             to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
			VirtualWanResourceType: to.Ptr("ExpressRouteConnection"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForConnection.json: %v", err)
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForRouteTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Effective Routes for a Route Table resource"},
	})
	client = armnetwork.NewVirtualHubsClient("subid", cred, &options)
	poller, err = client.BeginGetEffectiveVirtualHubRoutes(ctx,
		"rg1",
		"virtualHub1",
		&armnetwork.VirtualHubsClientBeginGetEffectiveVirtualHubRoutesOptions{EffectiveRoutesParameters: &armnetwork.EffectiveRoutesParameters{
			ResourceID:             to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
			VirtualWanResourceType: to.Ptr("RouteTable"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForRouteTable.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForRouteTable.json: %v", err)
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForVirtualHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Effective Routes for the Virtual Hub"},
	})
	client = armnetwork.NewVirtualHubsClient("subid", cred, &options)
	poller, err = client.BeginGetEffectiveVirtualHubRoutes(ctx,
		"rg1",
		"virtualHub1",
		&armnetwork.VirtualHubsClientBeginGetEffectiveVirtualHubRoutesOptions{EffectiveRoutesParameters: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForVirtualHub.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/EffectiveRoutesListForVirtualHub.json: %v", err)
	}
}

func TestHubVirtualNetworkConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HubVirtualNetworkConnectionPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubVirtualNetworkConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"connection1",
		armnetwork.HubVirtualNetworkConnection{
			Properties: &armnetwork.HubVirtualNetworkConnectionProperties{
				EnableInternetSecurity: to.Ptr(false),
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"),
				},
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						StaticRoutes: []*armnetwork.StaticRoute{
							{
								Name: to.Ptr("route1"),
								AddressPrefixes: []*string{
									to.Ptr("10.1.0.0/16"),
									to.Ptr("10.2.0.0/16")},
								NextHopIPAddress: to.Ptr("10.0.0.68"),
							},
							{
								Name: to.Ptr("route2"),
								AddressPrefixes: []*string{
									to.Ptr("10.3.0.0/16"),
									to.Ptr("10.4.0.0/16")},
								NextHopIPAddress: to.Ptr("10.0.0.65"),
							}},
					},
				},
			},
		},
		&armnetwork.HubVirtualNetworkConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.HubVirtualNetworkConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/connection1"),
			Name: to.Ptr("connection1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.HubVirtualNetworkConnectionProperties{
				EnableInternetSecurity: to.Ptr(false),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"),
				},
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						BgpConnections: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/bgpConnections/bgpConn1"),
							}},
						StaticRoutes: []*armnetwork.StaticRoute{
							{
								Name: to.Ptr("route1"),
								AddressPrefixes: []*string{
									to.Ptr("10.1.0.0/16"),
									to.Ptr("10.2.0.0/16")},
								NextHopIPAddress: to.Ptr("10.0.0.68"),
							},
							{
								Name: to.Ptr("route2"),
								AddressPrefixes: []*string{
									to.Ptr("10.3.0.0/16"),
									to.Ptr("10.4.0.0/16")},
								NextHopIPAddress: to.Ptr("10.0.0.65"),
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HubVirtualNetworkConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HubVirtualNetworkConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubVirtualNetworkConnections_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HubVirtualNetworkConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubVirtualNetworkConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"connection1",
		&armnetwork.HubVirtualNetworkConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionDelete.json: %v", err)
	}
}

func TestHubVirtualNetworkConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HubVirtualNetworkConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubVirtualNetworkConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"connection1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.HubVirtualNetworkConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/virtualHubVnetConnections/connection1"),
			Name: to.Ptr("connection1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.HubVirtualNetworkConnectionProperties{
				EnableInternetSecurity: to.Ptr(false),
				ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteVirtualNetwork: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1"),
				},
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						BgpConnections: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/bgpConnections/bgpConn1"),
							}},
						StaticRoutes: []*armnetwork.StaticRoute{
							{
								Name: to.Ptr("route1"),
								AddressPrefixes: []*string{
									to.Ptr("10.1.0.0/16"),
									to.Ptr("10.2.0.0/16")},
								NextHopIPAddress: to.Ptr("10.0.0.68"),
							},
							{
								Name: to.Ptr("route2"),
								AddressPrefixes: []*string{
									to.Ptr("10.3.0.0/16"),
									to.Ptr("10.4.0.0/16")},
								NextHopIPAddress: to.Ptr("10.0.0.65"),
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HubVirtualNetworkConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HubVirtualNetworkConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubVirtualNetworkConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HubVirtualNetworkConnectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubVirtualNetworkConnectionsClient("subid", cred, &options)
	pager := client.List("rg1",
		"virtualHub1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListHubVirtualNetworkConnectionsResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListHubVirtualNetworkConnectionsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListHubVirtualNetworkConnectionsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubVirtualNetworkConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnGatewayGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNGateway{
			Name:     to.Ptr("gateway1"),
			Type:     to.Ptr("Microsoft.Network/vpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNGatewayProperties{
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65514),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.5")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.4")},
							IPConfigurationID: to.Ptr("Instance0"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.178")},
						},
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.5")},
							IPConfigurationID: to.Ptr("Instance1"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.179")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				Connections: []*armnetwork.VPNConnection{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
						Name: to.Ptr("vpnConnection1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNConnectionProperties{
							EgressBytesTransferred:  to.Ptr[int64](0),
							EnableInternetSecurity:  to.Ptr(false),
							IngressBytesTransferred: to.Ptr[int64](0),
							ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RemoteVPNSite: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
							},
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
									Name: to.Ptr("Connection-Link1"),
									Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
									Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
									Properties: &armnetwork.VPNSiteLinkConnectionProperties{
										ConnectionBandwidth:     to.Ptr[int32](200),
										EgressBytesTransferred:  to.Ptr[int64](0),
										EnableBgp:               to.Ptr(false),
										EnableRateLimiting:      to.Ptr(false),
										IngressBytesTransferred: to.Ptr[int64](0),
										IngressNatRules: []*armnetwork.SubResource{
											{
												ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
											}},
										IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
										ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
										RoutingWeight:                  to.Ptr[int32](0),
										SharedKey:                      to.Ptr("key"),
										UseLocalAzureIPAddress:         to.Ptr(false),
										UsePolicyBasedTrafficSelectors: to.Ptr(false),
										VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
										VPNSiteLink: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
										},
									},
								},
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link2"),
									Name: to.Ptr("Connection-Link2"),
									Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
									Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
									Properties: &armnetwork.VPNSiteLinkConnectionProperties{
										ConnectionBandwidth:    to.Ptr[int32](200),
										EgressBytesTransferred: to.Ptr[int64](0),
										EgressNatRules: []*armnetwork.SubResource{
											{
												ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat04"),
											}},
										EnableBgp:                      to.Ptr(false),
										EnableRateLimiting:             to.Ptr(false),
										IngressBytesTransferred:        to.Ptr[int64](0),
										IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
										ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
										RoutingWeight:                  to.Ptr[int32](0),
										SharedKey:                      to.Ptr("key"),
										UseLocalAzureIPAddress:         to.Ptr(false),
										UsePolicyBasedTrafficSelectors: to.Ptr(false),
										VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
										VPNSiteLink: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink2"),
										},
									},
								}},
						},
					}},
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				IsRoutingPreferenceInternet:     to.Ptr(false),
				NatRules: []*armnetwork.VPNGatewayNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
						Name: to.Ptr("nat03"),
						Type: to.Ptr("Microsoft.Network/vpnGateways/natRules"),
						Properties: &armnetwork.VPNGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeDynamic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("192.168.0.0/26"),
								}},
							IngressVPNSiteLinkConnections: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/Connection-Link1"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("0.0.0.0/26"),
								}},
							Mode: to.Ptr(armnetwork.VPNNatRuleMode("IgressSnat")),
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat04"),
						Name: to.Ptr("nat04"),
						Type: to.Ptr("Microsoft.Network/vpnGateways/natRules"),
						Properties: &armnetwork.VPNGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							EgressVPNSiteLinkConnections: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/Connection-Link2"),
								}},
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("192.168.0.0/26"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("0.0.0.0/26"),
								}},
							Mode: to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnGatewayPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		armnetwork.VPNGateway{
			Location: to.Ptr("westcentralus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.VPNGatewayProperties{
				BgpSettings: &armnetwork.BgpSettings{
					Asn: to.Ptr[int64](65515),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.5")},
							IPConfigurationID: to.Ptr("Instance0"),
						},
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							IPConfigurationID: to.Ptr("Instance1"),
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				Connections: []*armnetwork.VPNConnection{
					{
						Name: to.Ptr("vpnConnection1"),
						Properties: &armnetwork.VPNConnectionProperties{
							RemoteVPNSite: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
							},
							VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
								{
									Name: to.Ptr("Connection-Link1"),
									Properties: &armnetwork.VPNSiteLinkConnectionProperties{
										ConnectionBandwidth: to.Ptr[int32](200),
										EgressNatRules: []*armnetwork.SubResource{
											{
												ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
											}},
										SharedKey:                 to.Ptr("key"),
										VPNConnectionProtocolType: to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
										VPNSiteLink: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
										},
									},
								}},
						},
					}},
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				IsRoutingPreferenceInternet:     to.Ptr(false),
				NatRules: []*armnetwork.VPNGatewayNatRule{
					{
						Name: to.Ptr("nat03"),
						Properties: &armnetwork.VPNGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("192.168.0.0/26"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("0.0.0.0/26"),
								}},
							IPConfigurationID: to.Ptr(""),
							Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
						},
					}},
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
			},
		},
		&armnetwork.VPNGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNGateway{
			Name:     to.Ptr("gateway1"),
			Type:     to.Ptr("Microsoft.Network/vpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNGatewayProperties{
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65514),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.5")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.4")},
							IPConfigurationID: to.Ptr("Instance0"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.178")},
						},
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.5")},
							IPConfigurationID: to.Ptr("Instance1"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.179")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				Connections: []*armnetwork.VPNConnection{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
						Name: to.Ptr("vpnConnection1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNConnectionProperties{
							EgressBytesTransferred:  to.Ptr[int64](0),
							EnableInternetSecurity:  to.Ptr(false),
							IngressBytesTransferred: to.Ptr[int64](0),
							ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RemoteVPNSite: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
							},
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
								{
									ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
									Name: to.Ptr("Connection-Link1"),
									Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
									Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
									Properties: &armnetwork.VPNSiteLinkConnectionProperties{
										ConnectionBandwidth:    to.Ptr[int32](200),
										EgressBytesTransferred: to.Ptr[int64](0),
										EgressNatRules: []*armnetwork.SubResource{
											{
												ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
											}},
										EnableBgp:                      to.Ptr(false),
										EnableRateLimiting:             to.Ptr(false),
										IngressBytesTransferred:        to.Ptr[int64](0),
										IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
										ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
										RoutingWeight:                  to.Ptr[int32](0),
										SharedKey:                      to.Ptr("key"),
										UseLocalAzureIPAddress:         to.Ptr(false),
										UsePolicyBasedTrafficSelectors: to.Ptr(false),
										VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
										VPNSiteLink: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
										},
									},
								}},
						},
					}},
				IsRoutingPreferenceInternet: to.Ptr(false),
				NatRules: []*armnetwork.VPNGatewayNatRule{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
						Name: to.Ptr("nat03"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNGatewayNatRuleProperties{
							Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
							EgressVPNSiteLinkConnections: []*armnetwork.SubResource{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/Connection-Link1"),
								}},
							ExternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("192.168.0.0/26"),
								}},
							InternalMappings: []*armnetwork.VPNNatRuleMapping{
								{
									AddressSpace: to.Ptr("0.0.0.0/26"),
								}},
							Mode: to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnGatewayUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"gateway1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.VPNGatewaysClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNGateway{
			Name:     to.Ptr("gateway1"),
			Type:     to.Ptr("Microsoft.Network/vpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNGatewayProperties{
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65515),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.5")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.4")},
							IPConfigurationID: to.Ptr("Instance0"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.178")},
						},
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.5")},
							IPConfigurationID: to.Ptr("Instance1"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.179")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				Connections: []*armnetwork.VPNConnection{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
						Name: to.Ptr("vpnConnection1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNConnectionProperties{
							ConnectionStatus:        to.Ptr(armnetwork.VPNConnectionStatusConnected),
							EgressBytesTransferred:  to.Ptr[int64](0),
							EnableBgp:               to.Ptr(false),
							IngressBytesTransferred: to.Ptr[int64](0),
							IPSecPolicies:           []*armnetwork.IPSecPolicy{},
							ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RemoteVPNSite: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
							},
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							RoutingWeight: to.Ptr[int32](0),
							SharedKey:     to.Ptr("key"),
						},
					}},
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				IsRoutingPreferenceInternet:     to.Ptr(false),
				NatRules:                        []*armnetwork.VPNGatewayNatRule{},
				ProvisioningState:               to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnGatewayDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		&armnetwork.VPNGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayDelete.json: %v", err)
	}
}

func TestVPNGateways_Reset(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayReset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResetVpnGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginReset(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VPNGatewaysClientBeginResetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayReset.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayReset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNGateway{
			Name:     to.Ptr("vpngw"),
			Type:     to.Ptr("Microsoft.Network/vpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/vpngw"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNGatewayProperties{
				BgpSettings: &armnetwork.BgpSettings{
					Asn:               to.Ptr[int64](65514),
					BgpPeeringAddress: to.Ptr("10.0.1.30"),
					BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.5")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.4")},
							IPConfigurationID: to.Ptr("Instance0"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.178")},
						},
						{
							CustomBgpIPAddresses: []*string{
								to.Ptr("169.254.21.10")},
							DefaultBgpIPAddresses: []*string{
								to.Ptr("10.30.0.5")},
							IPConfigurationID: to.Ptr("Instance1"),
							TunnelIPAddresses: []*string{
								to.Ptr("104.208.48.179")},
						}},
					PeerWeight: to.Ptr[int32](0),
				},
				Connections: []*armnetwork.VPNConnection{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/vpngw/vpnConnections/vpnConnection1"),
						Name: to.Ptr("vpnConnection1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNConnectionProperties{
							ConnectionBandwidth:     to.Ptr[int32](100),
							ConnectionStatus:        to.Ptr(armnetwork.VPNConnectionStatusConnected),
							EgressBytesTransferred:  to.Ptr[int64](0),
							EnableBgp:               to.Ptr(false),
							IngressBytesTransferred: to.Ptr[int64](0),
							IPSecPolicies:           []*armnetwork.IPSecPolicy{},
							ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RemoteVPNSite: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
							},
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							RoutingWeight:          to.Ptr[int32](0),
							SharedKey:              to.Ptr("key"),
							UseLocalAzureIPAddress: to.Ptr(false),
						},
					}},
				EnableBgpRouteTranslationForNat: to.Ptr(false),
				IsRoutingPreferenceInternet:     to.Ptr(false),
				NatRules:                        []*armnetwork.VPNGatewayNatRule{},
				ProvisioningState:               to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayReset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_StartPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCaptureFilterData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on vpn gateway with filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VPNGatewaysClientBeginStartPacketCaptureOptions{Parameters: &armnetwork.VPNGatewayPacketCaptureStartParameters{
			FilterData: to.Ptr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCaptureFilterData.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCaptureFilterData.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCaptureFilterData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on vpn gateway without filter"},
	})
	client = armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VPNGatewaysClientBeginStartPacketCaptureOptions{Parameters: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCapture.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStartPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_StopPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStopPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop packet capture on vpn gateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"vpngw",
		&armnetwork.VPNGatewaysClientBeginStopPacketCaptureOptions{Parameters: &armnetwork.VPNGatewayPacketCaptureStopParameters{
			SasURL: to.Ptr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStopPacketCapture.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStopPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayStopPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnGatewayListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVPNGatewaysResult{
			Value: []*armnetwork.VPNGateway{
				{
					Name:     to.Ptr("gateway1"),
					Type:     to.Ptr("Microsoft.Network/vpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNGatewayProperties{
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65514),
							BgpPeeringAddress: to.Ptr("10.0.1.30"),
							BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.5")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.4")},
									IPConfigurationID: to.Ptr("Instance0"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.178")},
								},
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.10")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.5")},
									IPConfigurationID: to.Ptr("Instance1"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.179")},
								}},
							PeerWeight: to.Ptr[int32](0),
						},
						Connections: []*armnetwork.VPNConnection{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
								Name: to.Ptr("vpnConnection1"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VPNConnectionProperties{
									EgressBytesTransferred:  to.Ptr[int64](0),
									EnableInternetSecurity:  to.Ptr(false),
									IngressBytesTransferred: to.Ptr[int64](0),
									ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RemoteVPNSite: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
									},
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
											Name: to.Ptr("Connection-Link1"),
											Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
											Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
											Properties: &armnetwork.VPNSiteLinkConnectionProperties{
												ConnectionBandwidth:    to.Ptr[int32](200),
												EgressBytesTransferred: to.Ptr[int64](0),
												EgressNatRules: []*armnetwork.SubResource{
													{
														ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
													}},
												EnableBgp:                      to.Ptr(false),
												EnableRateLimiting:             to.Ptr(false),
												IngressBytesTransferred:        to.Ptr[int64](0),
												IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
												ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
												RoutingWeight:                  to.Ptr[int32](0),
												SharedKey:                      to.Ptr("key"),
												UseLocalAzureIPAddress:         to.Ptr(false),
												UsePolicyBasedTrafficSelectors: to.Ptr(false),
												VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
												VPNSiteLink: &armnetwork.SubResource{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
												},
											},
										},
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link2"),
											Name: to.Ptr("Connection-Link2"),
											Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
											Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
											Properties: &armnetwork.VPNSiteLinkConnectionProperties{
												ConnectionBandwidth:    to.Ptr[int32](200),
												EgressBytesTransferred: to.Ptr[int64](0),
												EgressNatRules: []*armnetwork.SubResource{
													{
														ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
													}},
												EnableBgp:                      to.Ptr(false),
												EnableRateLimiting:             to.Ptr(false),
												IngressBytesTransferred:        to.Ptr[int64](0),
												IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
												ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
												RoutingWeight:                  to.Ptr[int32](0),
												SharedKey:                      to.Ptr("key"),
												UseLocalAzureIPAddress:         to.Ptr(false),
												UsePolicyBasedTrafficSelectors: to.Ptr(false),
												VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
												VPNSiteLink: &armnetwork.SubResource{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink2"),
												},
											},
										}},
								},
							}},
						EnableBgpRouteTranslationForNat: to.Ptr(false),
						IsRoutingPreferenceInternet:     to.Ptr(false),
						NatRules: []*armnetwork.VPNGatewayNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
								Name: to.Ptr("nat03"),
								Type: to.Ptr("Microsoft.Network/vpnGateways/natRules"),
								Properties: &armnetwork.VPNGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
									EgressVPNSiteLinkConnections: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/Connection-Link1"),
										}},
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("192.168.0.0/26"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("0.0.0.0/26"),
										}},
									Mode: to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
						},
					},
				},
				{
					Name:     to.Ptr("gateway2"),
					Type:     to.Ptr("Microsoft.Network/vpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnGateways/gateway2"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNGatewayProperties{
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65514),
							BgpPeeringAddress: to.Ptr("10.0.1.30"),
							BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.5")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.4")},
									IPConfigurationID: to.Ptr("Instance0"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.178")},
								},
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.10")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.5")},
									IPConfigurationID: to.Ptr("Instance1"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.179")},
								}},
							PeerWeight: to.Ptr[int32](0),
						},
						Connections: []*armnetwork.VPNConnection{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnGateways/gateway2/vpnConnections/vpnConnection2"),
								Name: to.Ptr("vpnConnection1"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VPNConnectionProperties{
									ConnectionBandwidth:     to.Ptr[int32](100),
									ConnectionStatus:        to.Ptr(armnetwork.VPNConnectionStatusConnected),
									EgressBytesTransferred:  to.Ptr[int64](0),
									EnableBgp:               to.Ptr(false),
									IngressBytesTransferred: to.Ptr[int64](0),
									IPSecPolicies:           []*armnetwork.IPSecPolicy{},
									ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RemoteVPNSite: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnSites/vpnSite2"),
									},
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									RoutingWeight:          to.Ptr[int32](0),
									SharedKey:              to.Ptr("key"),
									UseLocalAzureIPAddress: to.Ptr(false),
								},
							}},
						EnableBgpRouteTranslationForNat: to.Ptr(false),
						IsRoutingPreferenceInternet:     to.Ptr(false),
						NatRules:                        []*armnetwork.VPNGatewayNatRule{},
						ProvisioningState:               to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVPNGatewaysResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVPNGatewaysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNGateways_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnGatewayListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNGatewaysClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVPNGatewaysResult{
			Value: []*armnetwork.VPNGateway{
				{
					Name:     to.Ptr("gateway1"),
					Type:     to.Ptr("Microsoft.Network/vpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNGatewayProperties{
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65514),
							BgpPeeringAddress: to.Ptr("10.0.1.30"),
							BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.5")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.4")},
									IPConfigurationID: to.Ptr("Instance0"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.178")},
								},
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.10")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.5")},
									IPConfigurationID: to.Ptr("Instance1"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.179")},
								}},
							PeerWeight: to.Ptr[int32](0),
						},
						Connections: []*armnetwork.VPNConnection{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
								Name: to.Ptr("vpnConnection1"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VPNConnectionProperties{
									EgressBytesTransferred:  to.Ptr[int64](0),
									EnableInternetSecurity:  to.Ptr(false),
									IngressBytesTransferred: to.Ptr[int64](0),
									ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RemoteVPNSite: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
									},
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
											Name: to.Ptr("Connection-Link1"),
											Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
											Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
											Properties: &armnetwork.VPNSiteLinkConnectionProperties{
												ConnectionBandwidth:     to.Ptr[int32](200),
												EgressBytesTransferred:  to.Ptr[int64](0),
												EnableBgp:               to.Ptr(false),
												EnableRateLimiting:      to.Ptr(false),
												IngressBytesTransferred: to.Ptr[int64](0),
												IngressNatRules: []*armnetwork.SubResource{
													{
														ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
													}},
												IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
												ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
												RoutingWeight:                  to.Ptr[int32](0),
												SharedKey:                      to.Ptr("key"),
												UseLocalAzureIPAddress:         to.Ptr(false),
												UsePolicyBasedTrafficSelectors: to.Ptr(false),
												VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
												VPNSiteLink: &armnetwork.SubResource{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
												},
											},
										},
										{
											ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link2"),
											Name: to.Ptr("Connection-Link2"),
											Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
											Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
											Properties: &armnetwork.VPNSiteLinkConnectionProperties{
												ConnectionBandwidth:    to.Ptr[int32](200),
												EgressBytesTransferred: to.Ptr[int64](0),
												EgressNatRules: []*armnetwork.SubResource{
													{
														ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat04"),
													}},
												EnableBgp:                      to.Ptr(false),
												EnableRateLimiting:             to.Ptr(false),
												IngressBytesTransferred:        to.Ptr[int64](0),
												IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
												ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
												RoutingWeight:                  to.Ptr[int32](0),
												SharedKey:                      to.Ptr("key"),
												UseLocalAzureIPAddress:         to.Ptr(false),
												UsePolicyBasedTrafficSelectors: to.Ptr(false),
												VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
												VPNSiteLink: &armnetwork.SubResource{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink2"),
												},
											},
										}},
								},
							}},
						EnableBgpRouteTranslationForNat: to.Ptr(false),
						IsRoutingPreferenceInternet:     to.Ptr(false),
						NatRules: []*armnetwork.VPNGatewayNatRule{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03"),
								Name: to.Ptr("nat03"),
								Type: to.Ptr("Microsoft.Network/vpnGateways/natRules"),
								Properties: &armnetwork.VPNGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeDynamic),
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("192.168.0.0/26"),
										}},
									IngressVPNSiteLinkConnections: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/Connection-Link1"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("0.0.0.0/26"),
										}},
									Mode: to.Ptr(armnetwork.VPNNatRuleMode("IgressSnat")),
								},
							},
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat04"),
								Name: to.Ptr("nat04"),
								Type: to.Ptr("Microsoft.Network/vpnGateways/natRules"),
								Properties: &armnetwork.VPNGatewayNatRuleProperties{
									Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
									EgressVPNSiteLinkConnections: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/Connection-Link2"),
										}},
									ExternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("192.168.0.0/26"),
										}},
									InternalMappings: []*armnetwork.VPNNatRuleMapping{
										{
											AddressSpace: to.Ptr("0.0.0.0/26"),
										}},
									Mode: to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
						},
					},
				},
				{
					Name:     to.Ptr("gateway2"),
					Type:     to.Ptr("Microsoft.Network/vpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnGateways/gateway2"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.VPNGatewayProperties{
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Ptr[int64](65514),
							BgpPeeringAddress: to.Ptr("10.0.1.30"),
							BgpPeeringAddresses: []*armnetwork.IPConfigurationBgpPeeringAddress{
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.5")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.4")},
									IPConfigurationID: to.Ptr("Instance0"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.178")},
								},
								{
									CustomBgpIPAddresses: []*string{
										to.Ptr("169.254.21.10")},
									DefaultBgpIPAddresses: []*string{
										to.Ptr("10.30.0.5")},
									IPConfigurationID: to.Ptr("Instance1"),
									TunnelIPAddresses: []*string{
										to.Ptr("104.208.48.179")},
								}},
							PeerWeight: to.Ptr[int32](0),
						},
						Connections: []*armnetwork.VPNConnection{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnGateways/gateway2/vpnConnections/vpnConnection2"),
								Name: to.Ptr("vpnConnection1"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.VPNConnectionProperties{
									ConnectionBandwidth:     to.Ptr[int32](100),
									ConnectionStatus:        to.Ptr(armnetwork.VPNConnectionStatusConnected),
									EgressBytesTransferred:  to.Ptr[int64](0),
									EnableBgp:               to.Ptr(false),
									IngressBytesTransferred: to.Ptr[int64](0),
									IPSecPolicies:           []*armnetwork.IPSecPolicy{},
									ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RemoteVPNSite: &armnetwork.SubResource{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/vpnSites/vpnSite2"),
									},
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									RoutingWeight:          to.Ptr[int32](0),
									SharedKey:              to.Ptr("key"),
									UseLocalAzureIPAddress: to.Ptr(false),
								},
							}},
						EnableBgpRouteTranslationForNat: to.Ptr(false),
						IsRoutingPreferenceInternet:     to.Ptr(false),
						NatRules:                        []*armnetwork.VPNGatewayNatRule{},
						ProvisioningState:               to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualHubs/virtualHub2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVPNGatewaysResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVPNGatewaysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnGatewayList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNLinkConnections_ResetConnection(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionReset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResetVpnLinkConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNLinkConnectionsClient("subid", cred, &options)
	poller, err := client.BeginResetConnection(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		"Connection-Link1",
		&armnetwork.VPNLinkConnectionsClientBeginResetConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionReset.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionReset.json: %v", err)
	}
}

func TestVPNLinkConnections_GetIkeSas(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGetIkeSas.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVpnLinkConnectionIkeSa"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNLinkConnectionsClient("subid", cred, &options)
	poller, err := client.BeginGetIkeSas(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		"Connection-Link1",
		&armnetwork.VPNLinkConnectionsClientBeginGetIkeSasOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGetIkeSas.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGetIkeSas.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGetIkeSas.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
			Name: to.Ptr("vpnConnection1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNConnectionProperties{
				EgressBytesTransferred:  to.Ptr[int64](0),
				EnableInternetSecurity:  to.Ptr(false),
				IngressBytesTransferred: to.Ptr[int64](0),
				ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteVPNSite: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
				},
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable3"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						StaticRoutes: []*armnetwork.StaticRoute{},
					},
				},
				TrafficSelectorPolicies: []*armnetwork.TrafficSelectorPolicy{},
				VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
						Name: to.Ptr("Connection-Link1"),
						Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNSiteLinkConnectionProperties{
							ConnectionBandwidth:            to.Ptr[int32](200),
							EgressBytesTransferred:         to.Ptr[int64](0),
							EnableBgp:                      to.Ptr(false),
							EnableRateLimiting:             to.Ptr(false),
							IngressBytesTransferred:        to.Ptr[int64](0),
							IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
							ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RoutingWeight:                  to.Ptr[int32](0),
							SharedKey:                      to.Ptr("key"),
							UseLocalAzureIPAddress:         to.Ptr(false),
							UsePolicyBasedTrafficSelectors: to.Ptr(false),
							VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
							VPNLinkConnectionMode:          to.Ptr(armnetwork.VPNLinkConnectionModeResponderOnly),
							VPNSiteLink: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
							},
						},
					},
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link2"),
						Name: to.Ptr("Connection-Link2"),
						Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNSiteLinkConnectionProperties{
							ConnectionBandwidth:            to.Ptr[int32](200),
							EgressBytesTransferred:         to.Ptr[int64](0),
							EnableBgp:                      to.Ptr(false),
							EnableRateLimiting:             to.Ptr(false),
							IngressBytesTransferred:        to.Ptr[int64](0),
							IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
							ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RoutingWeight:                  to.Ptr[int32](0),
							SharedKey:                      to.Ptr("key"),
							UseLocalAzureIPAddress:         to.Ptr(false),
							UsePolicyBasedTrafficSelectors: to.Ptr(false),
							VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
							VPNLinkConnectionMode:          to.Ptr(armnetwork.VPNLinkConnectionModeInitiatorOnly),
							VPNSiteLink: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink2"),
							},
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnConnectionPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		armnetwork.VPNConnection{
			Properties: &armnetwork.VPNConnectionProperties{
				RemoteVPNSite: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
				},
				TrafficSelectorPolicies: []*armnetwork.TrafficSelectorPolicy{},
				VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
					{
						Name: to.Ptr("Connection-Link1"),
						Properties: &armnetwork.VPNSiteLinkConnectionProperties{
							ConnectionBandwidth:            to.Ptr[int32](200),
							SharedKey:                      to.Ptr("key"),
							UsePolicyBasedTrafficSelectors: to.Ptr(false),
							VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
							VPNLinkConnectionMode:          to.Ptr(armnetwork.VPNLinkConnectionModeDefault),
							VPNSiteLink: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
							},
						},
					}},
			},
		},
		&armnetwork.VPNConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1"),
			Name: to.Ptr("vpnConnection1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNConnectionProperties{
				EgressBytesTransferred:  to.Ptr[int64](0),
				EnableInternetSecurity:  to.Ptr(false),
				IngressBytesTransferred: to.Ptr[int64](0),
				ProvisioningState:       to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RemoteVPNSite: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1"),
				},
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable3"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						StaticRoutes: []*armnetwork.StaticRoute{},
					},
				},
				TrafficSelectorPolicies: []*armnetwork.TrafficSelectorPolicy{},
				VPNLinkConnections: []*armnetwork.VPNSiteLinkConnection{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
						Name: to.Ptr("Connection-Link1"),
						Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.VPNSiteLinkConnectionProperties{
							ConnectionBandwidth:            to.Ptr[int32](200),
							EgressBytesTransferred:         to.Ptr[int64](0),
							EnableBgp:                      to.Ptr(false),
							EnableRateLimiting:             to.Ptr(false),
							IngressBytesTransferred:        to.Ptr[int64](0),
							IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
							ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RoutingWeight:                  to.Ptr[int32](0),
							SharedKey:                      to.Ptr("key"),
							UseLocalAzureIPAddress:         to.Ptr(false),
							UsePolicyBasedTrafficSelectors: to.Ptr(false),
							VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
							VPNLinkConnectionMode:          to.Ptr(armnetwork.VPNLinkConnectionModeDefault),
							VPNSiteLink: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
							},
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNConnections_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&armnetwork.VPNConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionDelete.json: %v", err)
	}
}

func TestVPNConnections_StartPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCaptureFilterData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on vpn connection with filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNConnectionsClient("subid", cred, &options)
	poller, err := client.BeginStartPacketCapture(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&armnetwork.VPNConnectionsClientBeginStartPacketCaptureOptions{Parameters: &armnetwork.VPNConnectionPacketCaptureStartParameters{
			FilterData: to.Ptr("{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}"),
			LinkConnectionNames: []*string{
				to.Ptr("siteLink1"),
				to.Ptr("siteLink2")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCaptureFilterData.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCaptureFilterData.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCaptureFilterData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on vpn connection without filter"},
	})
	client = armnetwork.NewVPNConnectionsClient("subid", cred, &options)
	poller, err = client.BeginStartPacketCapture(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&armnetwork.VPNConnectionsClientBeginStartPacketCaptureOptions{Parameters: &armnetwork.VPNConnectionPacketCaptureStartParameters{
			LinkConnectionNames: []*string{
				to.Ptr("siteLink1"),
				to.Ptr("siteLink2")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCapture.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStartPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNConnections_StopPacketCapture(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStopPacketCapture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start packet capture on vpn connection without filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNConnectionsClient("subid", cred, &options)
	poller, err := client.BeginStopPacketCapture(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		&armnetwork.VPNConnectionsClientBeginStopPacketCaptureOptions{Parameters: &armnetwork.VPNConnectionPacketCaptureStopParameters{
			LinkConnectionNames: []*string{
				to.Ptr("vpnSiteLink1"),
				to.Ptr("vpnSiteLink2")},
			SasURL: to.Ptr("https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStopPacketCapture.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStopPacketCapture.json: %v", err)
	}
	// Response check
	{
		exampleRes := "\"{\"Status\":\"Successful\",\"Data\":null}\""
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnConnectionStopPacketCapture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNSiteLinkConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VpnSiteLinkConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNSiteLinkConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"vpnConnection1",
		"Connection-Link1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNSiteLinkConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/VpnSiteLinkConnections/Connection-Link1"),
			Name: to.Ptr("Connection-Link1"),
			Type: to.Ptr("Microsoft.Network/vpnGateways/vpnConnections/VpnSiteLinkConnections"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNSiteLinkConnectionProperties{
				ConnectionBandwidth:            to.Ptr[int32](200),
				EgressBytesTransferred:         to.Ptr[int64](0),
				EnableBgp:                      to.Ptr(false),
				EnableRateLimiting:             to.Ptr(false),
				IngressBytesTransferred:        to.Ptr[int64](0),
				IPSecPolicies:                  []*armnetwork.IPSecPolicy{},
				ProvisioningState:              to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingWeight:                  to.Ptr[int32](0),
				SharedKey:                      to.Ptr("key"),
				UseLocalAzureIPAddress:         to.Ptr(false),
				UsePolicyBasedTrafficSelectors: to.Ptr(false),
				VPNConnectionProtocolType:      to.Ptr(armnetwork.VirtualNetworkGatewayConnectionProtocolIKEv2),
				VPNSiteLink: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNSiteLinkConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNSiteLinkConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnSiteLinkConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatRules_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NatRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNGatewayNatRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/natRule1"),
			Name: to.Ptr("natRule1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNGatewayNatRuleProperties{
				Type:                          to.Ptr(armnetwork.VPNNatRuleTypeStatic),
				EgressVPNSiteLinkConnections:  []*armnetwork.SubResource{},
				ExternalMappings:              []*armnetwork.VPNNatRuleMapping{},
				IngressVPNSiteLinkConnections: []*armnetwork.SubResource{},
				InternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("10.4.0.0/24"),
					}},
				Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNGatewayNatRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNGatewayNatRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatRules_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRulePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NatRulePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatRulesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		armnetwork.VPNGatewayNatRule{
			Properties: &armnetwork.VPNGatewayNatRuleProperties{
				Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
				ExternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("192.168.21.0/24"),
					}},
				InternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("10.4.0.0/24"),
					}},
				IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/cloudnet1-VNG/ipConfigurations/default"),
				Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
			},
		},
		&armnetwork.NatRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRulePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRulePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNGatewayNatRule{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/natRule1"),
			Name: to.Ptr("natRule1"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VPNGatewayNatRuleProperties{
				Type: to.Ptr(armnetwork.VPNNatRuleTypeStatic),
				EgressVPNSiteLinkConnections: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/vpnLinkConnection1"),
					}},
				ExternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("192.168.21.0/24"),
					}},
				IngressVPNSiteLinkConnections: []*armnetwork.SubResource{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/vpnConnections/vpnConnection1/vpnLinkConnections/vpnLinkConnection2"),
					}},
				InternalMappings: []*armnetwork.VPNNatRuleMapping{
					{
						AddressSpace: to.Ptr("10.4.0.0/24"),
					}},
				IPConfigurationID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/cloudnet1-VNG/ipConfigurations/default"),
				Mode:              to.Ptr(armnetwork.VPNNatRuleModeEgressSnat),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNGatewayNatRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNGatewayNatRule)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRulePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNatRules_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NatRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewNatRulesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"gateway1",
		"natRule1",
		&armnetwork.NatRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/NatRuleDelete.json: %v", err)
	}
}

func TestP2SVPNGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"P2SVpnGatewayGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"p2sVpnGateway1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.P2SVPNGateway{
			Name:     to.Ptr("p2sVpnGateway1"),
			Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway1"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.P2SVPNGatewayProperties{
				CustomDNSServers: []*string{
					to.Ptr("3.3.3.3")},
				IsRoutingPreferenceInternet: to.Ptr(false),
				P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
						Name: to.Ptr("P2SConnectionConfig1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.P2SConnectionConfigurationProperties{
							EnableInternetSecurity: to.Ptr(false),
							ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							VPNClientAddressPool: &armnetwork.AddressSpace{
								AddressPrefixes: []*string{
									to.Ptr("101.3.0.0/16")},
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
				VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
					AllocatedIPAddresses: []*string{
						to.Ptr("1.1.1.1"),
						to.Ptr("2.2.2.2")},
					TotalEgressBytesTransferred:  to.Ptr[int64](3000),
					TotalIngressBytesTransferred: to.Ptr[int64](2000),
					VPNClientConnectionsCount:    to.Ptr[int32](2),
				},
				VPNGatewayScaleUnit: to.Ptr[int32](1),
				VPNServerConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.P2SVPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.P2SVPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestP2SVPNGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"P2SVpnGatewayPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"p2sVpnGateway1",
		armnetwork.P2SVPNGateway{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armnetwork.P2SVPNGatewayProperties{
				CustomDNSServers: []*string{
					to.Ptr("1.1.1.1"),
					to.Ptr("2.2.2.2")},
				IsRoutingPreferenceInternet: to.Ptr(false),
				P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
						Name: to.Ptr("P2SConnectionConfig1"),
						Properties: &armnetwork.P2SConnectionConfigurationProperties{
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							VPNClientAddressPool: &armnetwork.AddressSpace{
								AddressPrefixes: []*string{
									to.Ptr("101.3.0.0/16")},
							},
						},
					}},
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
				VPNGatewayScaleUnit: to.Ptr[int32](1),
				VPNServerConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
				},
			},
		},
		&armnetwork.P2SVPNGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.P2SVPNGateway{
			Name:     to.Ptr("p2sVpnGateway1"),
			Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway1"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.P2SVPNGatewayProperties{
				CustomDNSServers: []*string{
					to.Ptr("1.1.1.1"),
					to.Ptr("2.2.2.2")},
				IsRoutingPreferenceInternet: to.Ptr(false),
				P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
						Name: to.Ptr("P2SConnectionConfig1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.P2SConnectionConfigurationProperties{
							EnableInternetSecurity: to.Ptr(false),
							ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							VPNClientAddressPool: &armnetwork.AddressSpace{
								AddressPrefixes: []*string{
									to.Ptr("101.3.0.0/16")},
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
				VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
					AllocatedIPAddresses:         []*string{},
					TotalEgressBytesTransferred:  to.Ptr[int64](0),
					TotalIngressBytesTransferred: to.Ptr[int64](0),
					VPNClientConnectionsCount:    to.Ptr[int32](0),
				},
				VPNGatewayScaleUnit: to.Ptr[int32](1),
				VPNServerConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.P2SVPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.P2SVPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestP2SVPNGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"P2SVpnGatewayUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"rg1",
		"p2sVpnGateway1",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.P2SVPNGatewaysClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.P2SVPNGateway{
			Name:     to.Ptr("p2sVpnGateway1"),
			Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.P2SVPNGatewayProperties{
				CustomDNSServers: []*string{
					to.Ptr("3.3.3.3")},
				IsRoutingPreferenceInternet: to.Ptr(false),
				P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
						Name: to.Ptr("P2SConnectionConfig1"),
						Properties: &armnetwork.P2SConnectionConfigurationProperties{
							EnableInternetSecurity: to.Ptr(false),
							RoutingConfiguration: &armnetwork.RoutingConfiguration{
								AssociatedRouteTable: &armnetwork.SubResource{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
								},
								PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
									IDs: []*armnetwork.SubResource{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
										}},
									Labels: []*string{
										to.Ptr("label1"),
										to.Ptr("label2")},
								},
								VnetRoutes: &armnetwork.VnetRoute{
									StaticRoutes: []*armnetwork.StaticRoute{},
								},
							},
							VPNClientAddressPool: &armnetwork.AddressSpace{
								AddressPrefixes: []*string{
									to.Ptr("101.3.0.0/16")},
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
				VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
					AllocatedIPAddresses: []*string{
						to.Ptr("1.1.1.1"),
						to.Ptr("2.2.2.2")},
					TotalEgressBytesTransferred:  to.Ptr[int64](3000),
					TotalIngressBytesTransferred: to.Ptr[int64](2000),
					VPNClientConnectionsCount:    to.Ptr[int32](2),
				},
				VPNGatewayScaleUnit: to.Ptr[int32](1),
				VPNServerConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.P2SVPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.P2SVPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestP2SVPNGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"P2SVpnGatewayDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"p2sVpnGateway1",
		&armnetwork.P2SVPNGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayDelete.json: %v", err)
	}
}

func TestP2SVPNGateways_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"P2SVpnGatewayListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListP2SVPNGatewaysResult{
			Value: []*armnetwork.P2SVPNGateway{
				{
					Name:     to.Ptr("p2sVpnGateway1"),
					Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway1"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.P2SVPNGatewayProperties{
						CustomDNSServers: []*string{
							to.Ptr("3.3.3.3")},
						IsRoutingPreferenceInternet: to.Ptr(false),
						P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
								Name: to.Ptr("P2SConnectionConfig1"),
								Properties: &armnetwork.P2SConnectionConfigurationProperties{
									EnableInternetSecurity: to.Ptr(false),
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									VPNClientAddressPool: &armnetwork.AddressSpace{
										AddressPrefixes: []*string{
											to.Ptr("101.3.0.0/16")},
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
						},
						VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
							AllocatedIPAddresses: []*string{
								to.Ptr("1.1.1.1"),
								to.Ptr("2.2.2.2")},
							TotalEgressBytesTransferred:  to.Ptr[int64](3000),
							TotalIngressBytesTransferred: to.Ptr[int64](2000),
							VPNClientConnectionsCount:    to.Ptr[int32](2),
						},
						VPNGatewayScaleUnit: to.Ptr[int32](1),
						VPNServerConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
						},
					},
				},
				{
					Name:     to.Ptr("p2sVpnGateway2"),
					Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway2"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.P2SVPNGatewayProperties{
						CustomDNSServers: []*string{
							to.Ptr("4.4.4.4")},
						IsRoutingPreferenceInternet: to.Ptr(false),
						P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
								Name: to.Ptr("P2SConnectionConfig1"),
								Properties: &armnetwork.P2SConnectionConfigurationProperties{
									EnableInternetSecurity: to.Ptr(false),
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									VPNClientAddressPool: &armnetwork.AddressSpace{
										AddressPrefixes: []*string{
											to.Ptr("101.3.0.0/16")},
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"),
						},
						VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
							AllocatedIPAddresses: []*string{
								to.Ptr("1.1.1.1"),
								to.Ptr("2.2.2.2")},
							TotalEgressBytesTransferred:  to.Ptr[int64](3000),
							TotalIngressBytesTransferred: to.Ptr[int64](2000),
							VPNClientConnectionsCount:    to.Ptr[int32](2),
						},
						VPNGatewayScaleUnit: to.Ptr[int32](1),
						VPNServerConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListP2SVPNGatewaysResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListP2SVPNGatewaysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestP2SVPNGateways_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"P2SVpnGatewayListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListP2SVPNGatewaysResult{
			Value: []*armnetwork.P2SVPNGateway{
				{
					Name:     to.Ptr("p2sVpnGateway1"),
					Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway1"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.P2SVPNGatewayProperties{
						CustomDNSServers: []*string{
							to.Ptr("3.3.3.3")},
						IsRoutingPreferenceInternet: to.Ptr(false),
						P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
								Name: to.Ptr("P2SConnectionConfig1"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.P2SConnectionConfigurationProperties{
									EnableInternetSecurity: to.Ptr(true),
									ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									VPNClientAddressPool: &armnetwork.AddressSpace{
										AddressPrefixes: []*string{
											to.Ptr("101.3.0.0/16")},
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
						},
						VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
							AllocatedIPAddresses: []*string{
								to.Ptr("1.1.1.1"),
								to.Ptr("2.2.2.2")},
							TotalEgressBytesTransferred:  to.Ptr[int64](3000),
							TotalIngressBytesTransferred: to.Ptr[int64](2000),
							VPNClientConnectionsCount:    to.Ptr[int32](2),
						},
						VPNGatewayScaleUnit: to.Ptr[int32](1),
						VPNServerConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
						},
					},
				},
				{
					Name:     to.Ptr("p2sVpnGateway2"),
					Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway2"),
					Location: to.Ptr("West US"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.P2SVPNGatewayProperties{
						CustomDNSServers: []*string{
							to.Ptr("4.4.4.4")},
						IsRoutingPreferenceInternet: to.Ptr(false),
						P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
								Name: to.Ptr("P2SConnectionConfig1"),
								Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
								Properties: &armnetwork.P2SConnectionConfigurationProperties{
									EnableInternetSecurity: to.Ptr(true),
									ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									VPNClientAddressPool: &armnetwork.AddressSpace{
										AddressPrefixes: []*string{
											to.Ptr("101.4.0.0/16")},
									},
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"),
						},
						VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
							AllocatedIPAddresses: []*string{
								to.Ptr("1.1.1.1"),
								to.Ptr("2.2.2.2")},
							TotalEgressBytesTransferred:  to.Ptr[int64](3000),
							TotalIngressBytesTransferred: to.Ptr[int64](2000),
							VPNClientConnectionsCount:    to.Ptr[int32](2),
						},
						VPNGatewayScaleUnit: to.Ptr[int32](1),
						VPNServerConfiguration: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListP2SVPNGatewaysResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListP2SVPNGatewaysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestP2SVPNGateways_Reset(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayReset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResetP2SVpnGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewP2SVPNGatewaysClient("subid", cred, &options)
	poller, err := client.BeginReset(ctx,
		"rg1",
		"p2sVpnGateway1",
		&armnetwork.P2SVPNGatewaysClientBeginResetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayReset.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayReset.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.P2SVPNGateway{
			Name:     to.Ptr("p2sVpnGateway1"),
			Type:     to.Ptr("Microsoft.Network/p2sVpnGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/P2SvpnGateways/p2sVpnGateway1"),
			Location: to.Ptr("West US"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.P2SVPNGatewayProperties{
				CustomDNSServers: []*string{
					to.Ptr("3.3.3.3")},
				IsRoutingPreferenceInternet: to.Ptr(false),
				P2SConnectionConfigurations: []*armnetwork.P2SConnectionConfiguration{
					{
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/p2sVpnGateways/p2sVpnGateway1/p2sConnectionConfigurations/P2SConnectionConfig1"),
						Name: to.Ptr("P2SConnectionConfig1"),
						Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
						Properties: &armnetwork.P2SConnectionConfigurationProperties{
							EnableInternetSecurity: to.Ptr(false),
							ProvisioningState:      to.Ptr(armnetwork.ProvisioningStateSucceeded),
							VPNClientAddressPool: &armnetwork.AddressSpace{
								AddressPrefixes: []*string{
									to.Ptr("101.3.0.0/16")},
							},
						},
					}},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"),
				},
				VPNClientConnectionHealth: &armnetwork.VPNClientConnectionHealth{
					AllocatedIPAddresses: []*string{
						to.Ptr("1.1.1.1"),
						to.Ptr("2.2.2.2")},
					TotalEgressBytesTransferred:  to.Ptr[int64](3000),
					TotalIngressBytesTransferred: to.Ptr[int64](2000),
					VPNClientConnectionsCount:    to.Ptr[int32](2),
				},
				VPNGatewayScaleUnit: to.Ptr[int32](1),
				VPNServerConfiguration: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnServerConfiguration1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.P2SVPNGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.P2SVPNGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/P2SVpnGatewayReset.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVPNServerConfigurationsAssociatedWithVirtualWan_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GetVirtualWanVpnServerConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualWanVpnServerConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVPNServerConfigurationsAssociatedWithVirtualWanClient("subid", cred, &options)
	poller, err := client.BeginList(ctx,
		"rg1",
		"wan1",
		&armnetwork.VPNServerConfigurationsAssociatedWithVirtualWanClientBeginListOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GetVirtualWanVpnServerConfigurations.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GetVirtualWanVpnServerConfigurations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VPNServerConfigurationsResponse{
			VPNServerConfigurationResourceIDs: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnconfig1"),
				to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnconfig2")},
		}
		if !reflect.DeepEqual(exampleRes, res.VPNServerConfigurationsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VPNServerConfigurationsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/GetVirtualWanVpnServerConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubRouteTableV2S_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubVirtualHubRouteTableV2Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubRouteTableV2SClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"virtualHubRouteTable1a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualHubRouteTableV2{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeTables/virtualHubRouteTable1a"),
			Name: to.Ptr("virtualHubRouteTable1a"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualHubRouteTableV2Properties{
				AttachedConnections: []*string{
					to.Ptr("All_Vnets")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes: []*armnetwork.VirtualHubRouteV2{
					{
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("20.10.0.0/16"),
							to.Ptr("20.20.0.0/16")},
						NextHopType: to.Ptr("IPAddress"),
						NextHops: []*string{
							to.Ptr("10.0.0.68")},
					},
					{
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("0.0.0.0/0")},
						NextHopType: to.Ptr("IPAddress"),
						NextHops: []*string{
							to.Ptr("10.0.0.68")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualHubRouteTableV2) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualHubRouteTableV2)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubRouteTableV2S_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2Put"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubRouteTableV2SClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"virtualHubRouteTable1a",
		armnetwork.VirtualHubRouteTableV2{
			Properties: &armnetwork.VirtualHubRouteTableV2Properties{
				AttachedConnections: []*string{
					to.Ptr("All_Vnets")},
				Routes: []*armnetwork.VirtualHubRouteV2{
					{
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("20.10.0.0/16"),
							to.Ptr("20.20.0.0/16")},
						NextHopType: to.Ptr("IPAddress"),
						NextHops: []*string{
							to.Ptr("10.0.0.68")},
					},
					{
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("0.0.0.0/0")},
						NextHopType: to.Ptr("IPAddress"),
						NextHops: []*string{
							to.Ptr("10.0.0.68")},
					}},
			},
		},
		&armnetwork.VirtualHubRouteTableV2SClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Put.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.VirtualHubRouteTableV2{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeTables/virtualHubRouteTable1a"),
			Name: to.Ptr("virtualHubRouteTable1a"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.VirtualHubRouteTableV2Properties{
				AttachedConnections: []*string{
					to.Ptr("All_Vnets")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes: []*armnetwork.VirtualHubRouteV2{
					{
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("20.10.0.0/16"),
							to.Ptr("20.20.0.0/16")},
						NextHopType: to.Ptr("IPAddress"),
						NextHops: []*string{
							to.Ptr("10.0.0.68")},
					},
					{
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("0.0.0.0/0")},
						NextHopType: to.Ptr("IPAddress"),
						NextHops: []*string{
							to.Ptr("10.0.0.68")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualHubRouteTableV2) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualHubRouteTableV2)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubRouteTableV2S_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubRouteTableV2SClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"virtualHubRouteTable1a",
		&armnetwork.VirtualHubRouteTableV2SClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2Delete.json: %v", err)
	}
}

func TestVirtualHubRouteTableV2S_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubRouteTableV2SClient("subid", cred, &options)
	pager := client.List("rg1",
		"virtualHub1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualHubRouteTableV2SResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualHubRouteTableV2SResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualHubRouteTableV2SResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubRouteTableV2List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteGateways_ListBySubscription(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteGatewayListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteGatewaysClient("subid", cred, &options)
	res, err := client.ListBySubscription(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayListBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteGatewayList{
			Value: []*armnetwork.ExpressRouteGateway{
				{
					Name:     to.Ptr("expressRouteGatewayName"),
					Type:     to.Ptr("Microsoft.Network/expressRouteGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.ExpressRouteGatewayProperties{
						AutoScaleConfiguration: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfiguration{
							Bounds: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds{
								Min: to.Ptr[int32](2),
							},
						},
						ExpressRouteConnections: []*armnetwork.ExpressRouteConnection{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
								Name: to.Ptr("connectionName"),
								Properties: &armnetwork.ExpressRouteConnectionProperties{
									AuthorizationKey:       to.Ptr("f28e9c99-78d8-4248-a855-c54cf6beb99d"),
									EnableInternetSecurity: to.Ptr(false),
									ExpressRouteCircuitPeering: &armnetwork.ExpressRouteCircuitPeeringID{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hvirtualHubNameub1/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									RoutingWeight: to.Ptr[int32](1),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.VirtualHubID{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteGatewayList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteGatewayList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteGateways_ListByResourceGroup(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteGatewayListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteGatewaysClient("subid", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"resourceGroupName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayListByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteGatewayList{
			Value: []*armnetwork.ExpressRouteGateway{
				{
					Name:     to.Ptr("expressRouteGatewayName"),
					Type:     to.Ptr("Microsoft.Network/expressRouteGateways"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.ExpressRouteGatewayProperties{
						AutoScaleConfiguration: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfiguration{
							Bounds: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds{
								Min: to.Ptr[int32](2),
							},
						},
						ExpressRouteConnections: []*armnetwork.ExpressRouteConnection{
							{
								ID:   to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
								Name: to.Ptr("connectionName"),
								Properties: &armnetwork.ExpressRouteConnectionProperties{
									AuthorizationKey:       to.Ptr("f28e9c99-78d8-4248-a855-c54cf6beb99d"),
									EnableInternetSecurity: to.Ptr(false),
									ExpressRouteCircuitPeering: &armnetwork.ExpressRouteCircuitPeeringID{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
									},
									ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
									RoutingConfiguration: &armnetwork.RoutingConfiguration{
										AssociatedRouteTable: &armnetwork.SubResource{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName/hubRouteTables/hubRouteTable1"),
										},
										PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
											IDs: []*armnetwork.SubResource{
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName/hubRouteTables/hubRouteTable1"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName/hubRouteTables/hubRouteTable2"),
												},
												{
													ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hvirtualHubNameub1/hubRouteTables/hubRouteTable3"),
												}},
											Labels: []*string{
												to.Ptr("label1"),
												to.Ptr("label2")},
										},
										VnetRoutes: &armnetwork.VnetRoute{
											StaticRoutes: []*armnetwork.StaticRoute{},
										},
									},
									RoutingWeight: to.Ptr[int32](1),
								},
							}},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						VirtualHub: &armnetwork.VirtualHubID{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteGatewayList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteGatewayList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteGatewayCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteGatewaysClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"gateway-2",
		armnetwork.ExpressRouteGateway{
			Location: to.Ptr("westus"),
			Properties: &armnetwork.ExpressRouteGatewayProperties{
				AutoScaleConfiguration: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfiguration{
					Bounds: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds{
						Min: to.Ptr[int32](3),
					},
				},
				VirtualHub: &armnetwork.VirtualHubID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupId/providers/Microsoft.Network/virtualHubs/virtualHubName"),
				},
			},
		},
		&armnetwork.ExpressRouteGatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteGateway{
			Name:     to.Ptr("gateway-2"),
			Type:     to.Ptr("Microsoft.Network/expressRouteGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/gateway-2"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteGatewayProperties{
				AutoScaleConfiguration: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfiguration{
					Bounds: &armnetwork.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds{
						Min: to.Ptr[int32](3),
					},
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.VirtualHubID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteGateways_UpdateTags(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteGatewayUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteGatewaysClient("subid", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armnetwork.ExpressRouteGatewaysClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteGateway{
			Name:     to.Ptr("expressRouteGatewayName"),
			Type:     to.Ptr("Microsoft.Network/expressRouteGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteGatewayProperties{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.VirtualHubID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteGateways_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteGatewayGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteGatewaysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteGateway{
			Name:     to.Ptr("expressRouteGatewayName"),
			Type:     to.Ptr("Microsoft.Network/expressRouteGateways"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.ExpressRouteGatewayProperties{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				VirtualHub: &armnetwork.VirtualHubID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/virtualHubName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteGateways_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteGatewayDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteGatewaysClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		&armnetwork.ExpressRouteGatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteGatewayDelete.json: %v", err)
	}
}

func TestExpressRouteConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteConnectionCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"gateway-2",
		"connectionName",
		armnetwork.ExpressRouteConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/gateway-2/expressRouteConnections/connectionName"),
			Name: to.Ptr("connectionName"),
			Properties: &armnetwork.ExpressRouteConnectionProperties{
				AuthorizationKey: to.Ptr("authorizationKey"),
				ExpressRouteCircuitPeering: &armnetwork.ExpressRouteCircuitPeeringID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
				},
				RoutingWeight: to.Ptr[int32](2),
			},
		},
		&armnetwork.ExpressRouteConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/gateway-2/expressRouteConnections/connectionName"),
			Name: to.Ptr("connectionName"),
			Properties: &armnetwork.ExpressRouteConnectionProperties{
				AuthorizationKey:       to.Ptr("authorizationKey"),
				EnableInternetSecurity: to.Ptr(false),
				ExpressRouteCircuitPeering: &armnetwork.ExpressRouteCircuitPeeringID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
				},
				ExpressRouteGatewayBypass: to.Ptr(false),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable3"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						StaticRoutes: []*armnetwork.StaticRoute{},
					},
				},
				RoutingWeight: to.Ptr[int32](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteConnections_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		"connectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
			Name: to.Ptr("connectionName"),
			Properties: &armnetwork.ExpressRouteConnectionProperties{
				AuthorizationKey:       to.Ptr("authorizationKey"),
				EnableInternetSecurity: to.Ptr(false),
				ExpressRouteCircuitPeering: &armnetwork.ExpressRouteCircuitPeeringID{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
				},
				ExpressRouteGatewayBypass: to.Ptr(false),
				ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingConfiguration: &armnetwork.RoutingConfiguration{
					AssociatedRouteTable: &armnetwork.SubResource{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
					},
					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
						IDs: []*armnetwork.SubResource{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable2"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable3"),
							}},
						Labels: []*string{
							to.Ptr("label1"),
							to.Ptr("label2")},
					},
					VnetRoutes: &armnetwork.VnetRoute{
						StaticRoutes: []*armnetwork.StaticRoute{},
					},
				},
				RoutingWeight: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExpressRouteConnections_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		"connectionName",
		&armnetwork.ExpressRouteConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionDelete.json: %v", err)
	}
}

func TestExpressRouteConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExpressRouteConnectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewExpressRouteConnectionsClient("subid", cred, &options)
	res, err := client.List(ctx,
		"resourceGroupName",
		"expressRouteGatewayName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.ExpressRouteConnectionList{
			Value: []*armnetwork.ExpressRouteConnection{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName"),
					Name: to.Ptr("connectionName"),
					Properties: &armnetwork.ExpressRouteConnectionProperties{
						AuthorizationKey:       to.Ptr("authorizationKey"),
						EnableInternetSecurity: to.Ptr(false),
						ExpressRouteCircuitPeering: &armnetwork.ExpressRouteCircuitPeeringID{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
						},
						ExpressRouteGatewayBypass: to.Ptr(false),
						ProvisioningState:         to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RoutingConfiguration: &armnetwork.RoutingConfiguration{
							AssociatedRouteTable: &armnetwork.SubResource{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
							},
							PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
								IDs: []*armnetwork.SubResource{
									{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable1"),
									},
									{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable2"),
									},
									{
										ID: to.Ptr("/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/hubRouteTable3"),
									}},
								Labels: []*string{
									to.Ptr("label1"),
									to.Ptr("label2")},
							},
							VnetRoutes: &armnetwork.VnetRoute{
								StaticRoutes: []*armnetwork.StaticRoute{},
							},
						},
						RoutingWeight: to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteConnectionList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteConnectionList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/ExpressRouteConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubBgpConnection_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubVirtualHubRouteTableV2Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubBgpConnectionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"hub1",
		"conn1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BgpConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/bgpConnections/conn1"),
			Name: to.Ptr("conn1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.BgpConnectionProperties{
				ConnectionState: to.Ptr(armnetwork.HubBgpConnectionStatusConnected),
				HubVirtualNetworkConnection: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/hubVnetConn1"),
				},
				PeerAsn:           to.Ptr[int64](20000),
				PeerIP:            to.Ptr("192.168.1.5"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BgpConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BgpConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubBgpConnection_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2Put"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubBgpConnectionClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"hub1",
		"conn1",
		armnetwork.BgpConnection{
			Properties: &armnetwork.BgpConnectionProperties{
				HubVirtualNetworkConnection: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/hubVnetConn1"),
				},
				PeerAsn: to.Ptr[int64](20000),
				PeerIP:  to.Ptr("192.168.1.5"),
			},
		},
		&armnetwork.VirtualHubBgpConnectionClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.BgpConnection{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/bgpConnections/conn1"),
			Name: to.Ptr("conn1"),
			Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
			Properties: &armnetwork.BgpConnectionProperties{
				ConnectionState: to.Ptr(armnetwork.HubBgpConnectionStatusConnected),
				HubVirtualNetworkConnection: &armnetwork.SubResource{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/hubVnetConn1"),
				},
				PeerAsn:           to.Ptr[int64](20000),
				PeerIP:            to.Ptr("192.168.1.5"),
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BgpConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BgpConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubBgpConnection_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubBgpConnectionClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"hub1",
		"conn1",
		&armnetwork.VirtualHubBgpConnectionClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionDelete.json: %v", err)
	}
}

func TestVirtualHubBgpConnections_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubBgpConnectionsClient("subid", cred, &options)
	pager := client.List("rg1",
		"hub1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualHubBgpConnectionResults{
			Value: []*armnetwork.BgpConnection{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/bgpConnections/conn1"),
					Name: to.Ptr("conn1"),
					Etag: to.Ptr("W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\""),
					Properties: &armnetwork.BgpConnectionProperties{
						ConnectionState: to.Ptr(armnetwork.HubBgpConnectionStatusConnected),
						HubVirtualNetworkConnection: &armnetwork.SubResource{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/hubVnetConn1"),
						},
						PeerAsn:           to.Ptr[int64](20000),
						PeerIP:            to.Ptr("192.168.1.5"),
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualHubBgpConnectionResults) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualHubBgpConnectionResults)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubBgpConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubBgpConnections_ListLearnedRoutes(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListLearnedRoute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualRouterPeerListLearnedRoutes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubBgpConnectionsClient("subid", cred, &options)
	poller, err := client.BeginListLearnedRoutes(ctx,
		"rg1",
		"virtualRouter1",
		"peer1",
		&armnetwork.VirtualHubBgpConnectionsClientBeginListLearnedRoutesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListLearnedRoute.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListLearnedRoute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PeerRouteList{
			Value: []*armnetwork.PeerRoute{
				{
					AsPath:       to.Ptr("65002-65001"),
					LocalAddress: to.Ptr("10.85.3.4"),
					Network:      to.Ptr("10.101.0.0/16"),
					NextHop:      to.Ptr("10.85.4.4"),
					Origin:       to.Ptr("EBgp"),
					SourcePeer:   to.Ptr("10.85.4.4"),
					Weight:       to.Ptr[int32](32768),
				},
				{
					AsPath:       to.Ptr("65002-65001"),
					LocalAddress: to.Ptr("10.85.3.5"),
					Network:      to.Ptr("10.101.0.0/16"),
					NextHop:      to.Ptr("10.85.4.4"),
					Origin:       to.Ptr("EBgp"),
					SourcePeer:   to.Ptr("10.85.4.4"),
					Weight:       to.Ptr[int32](32768),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PeerRouteList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeerRouteList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListLearnedRoute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubBgpConnections_ListAdvertisedRoutes(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListAdvertisedRoute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualRouterPeerListAdvertisedRoutes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubBgpConnectionsClient("subid", cred, &options)
	poller, err := client.BeginListAdvertisedRoutes(ctx,
		"rg1",
		"virtualRouter1",
		"peer1",
		&armnetwork.VirtualHubBgpConnectionsClientBeginListAdvertisedRoutesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListAdvertisedRoute.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListAdvertisedRoute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.PeerRouteList{
			Value: []*armnetwork.PeerRoute{
				{
					AsPath:       to.Ptr("65515"),
					LocalAddress: to.Ptr("10.85.3.4"),
					Network:      to.Ptr("10.45.0.0/16"),
					NextHop:      to.Ptr("10.85.3.4"),
					Origin:       to.Ptr("Igp"),
					SourcePeer:   to.Ptr("10.85.3.4"),
					Weight:       to.Ptr[int32](0),
				},
				{
					AsPath:       to.Ptr("65515"),
					LocalAddress: to.Ptr("10.85.3.4"),
					Network:      to.Ptr("10.85.0.0/16"),
					NextHop:      to.Ptr("10.85.3.4"),
					Origin:       to.Ptr("Igp"),
					SourcePeer:   to.Ptr("10.85.3.4"),
					Weight:       to.Ptr[int32](0),
				},
				{
					AsPath:       to.Ptr("65515"),
					LocalAddress: to.Ptr("10.85.3.4"),
					Network:      to.Ptr("10.100.0.0/16"),
					NextHop:      to.Ptr("10.85.3.4"),
					Origin:       to.Ptr("Igp"),
					SourcePeer:   to.Ptr("10.85.3.4"),
					Weight:       to.Ptr[int32](0),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PeerRouteList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeerRouteList)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualRouterPeerListAdvertisedRoute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubIPConfiguration_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubVirtualHubRouteTableV2Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubIPConfigurationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"hub1",
		"ipconfig1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.HubIPConfiguration{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/ipConfigurations/ipconfig1"),
			Name: to.Ptr("ipconfig1"),
			Type: to.Ptr("Microsoft.Network/virtualHubs/ipConfigurations"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.HubIPConfigurationPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HubIPConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HubIPConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubIPConfiguration_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubIpConfigurationPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubIPConfigurationClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"hub1",
		"ipconfig1",
		armnetwork.HubIPConfiguration{
			Properties: &armnetwork.HubIPConfigurationPropertiesFormat{
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				},
			},
		},
		&armnetwork.VirtualHubIPConfigurationClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.HubIPConfiguration{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/ipConfigurations/ipconfig1"),
			Name: to.Ptr("ipconfig1"),
			Type: to.Ptr("Microsoft.Network/virtualHubs/ipConfigurations"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.HubIPConfigurationPropertiesFormat{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Subnet: &armnetwork.Subnet{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HubIPConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HubIPConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualHubIPConfiguration_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubIpConfigurationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubIPConfigurationClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"hub1",
		"ipconfig1",
		&armnetwork.VirtualHubIPConfigurationClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationDelete.json: %v", err)
	}
}

func TestVirtualHubIPConfiguration_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualHubRouteTableV2List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewVirtualHubIPConfigurationClient("subid", cred, &options)
	pager := client.List("rg1",
		"hub1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListVirtualHubIPConfigurationResults{
			Value: []*armnetwork.HubIPConfiguration{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1/ipConfigurations/ipconfig1"),
					Name: to.Ptr("ipconfig1"),
					Type: to.Ptr("Microsoft.Network/virtualHubs/ipConfigurations"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.HubIPConfigurationPropertiesFormat{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						Subnet: &armnetwork.Subnet{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListVirtualHubIPConfigurationResults) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListVirtualHubIPConfigurationResults)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualHubIpConfigurationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubRouteTables_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTablePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTablePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubRouteTablesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"hubRouteTable1",
		armnetwork.HubRouteTable{
			Properties: &armnetwork.HubRouteTableProperties{
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				Routes: []*armnetwork.HubRoute{
					{
						Name:            to.Ptr("route1"),
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("10.0.0.0/8"),
							to.Ptr("20.0.0.0/8"),
							to.Ptr("30.0.0.0/8")},
						NextHop:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azureFirewall1"),
						NextHopType: to.Ptr("ResourceId"),
					}},
			},
		},
		&armnetwork.HubRouteTablesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTablePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTablePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.HubRouteTable{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
			Name: to.Ptr("hubRouteTable1"),
			Type: to.Ptr("Microsoft.Network/virtualHubs/hubRouteTables"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.HubRouteTableProperties{
				AssociatedConnections: []*string{
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/vnetConnn1"),
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/vnetConnn2")},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				PropagatingConnections: []*string{
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteGateways/erg1/expressRouteConnections/erConn1"),
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/vpngw1/vpnConnections/vpnConn2")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes: []*armnetwork.HubRoute{
					{
						Name:            to.Ptr("route1"),
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("10.0.0.0/8"),
							to.Ptr("20.0.0.0/8"),
							to.Ptr("30.0.0.0/8")},
						NextHop:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azureFirewall1"),
						NextHopType: to.Ptr("ResourceId"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HubRouteTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HubRouteTable)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTablePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubRouteTables_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTableGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubRouteTablesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"hubRouteTable1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.HubRouteTable{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
			Name: to.Ptr("hubRouteTable1"),
			Type: to.Ptr("Microsoft.Network/virtualHubs/hubRouteTables"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.HubRouteTableProperties{
				AssociatedConnections: []*string{
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/vnetConnn1"),
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/vnetConnn2")},
				Labels: []*string{
					to.Ptr("label1"),
					to.Ptr("label2")},
				PropagatingConnections: []*string{
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteGateways/erg1/expressRouteConnections/erConn1"),
					to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/vpngw1/vpnConnections/vpnConn2")},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				Routes: []*armnetwork.HubRoute{
					{
						Name:            to.Ptr("route1"),
						DestinationType: to.Ptr("CIDR"),
						Destinations: []*string{
							to.Ptr("10.0.0.0/8"),
							to.Ptr("20.0.0.0/8"),
							to.Ptr("30.0.0.0/8")},
						NextHop:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azureFirewall1"),
						NextHopType: to.Ptr("ResourceId"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HubRouteTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HubRouteTable)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubRouteTables_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTableDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubRouteTablesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"hubRouteTable1",
		&armnetwork.HubRouteTablesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableDelete.json: %v", err)
	}
}

func TestHubRouteTables_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTableList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewHubRouteTablesClient("subid", cred, &options)
	pager := client.List("rg1",
		"virtualHub1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListHubRouteTablesResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListHubRouteTablesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListHubRouteTablesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/HubRouteTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutingIntent_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTablePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutingIntentClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"virtualHub1",
		"Intent1",
		armnetwork.RoutingIntent{
			Properties: &armnetwork.RoutingIntentProperties{
				RoutingPolicies: []*armnetwork.RoutingPolicy{
					{
						Name: to.Ptr("InternetTraffic"),
						Destinations: []*string{
							to.Ptr("Internet")},
						NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
					},
					{
						Name: to.Ptr("PrivateTrafficPolicy"),
						Destinations: []*string{
							to.Ptr("PrivateTraffic")},
						NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
					}},
			},
		},
		&armnetwork.RoutingIntentClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RoutingIntent{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routingIntent/Intent1"),
			Name: to.Ptr("Intent1"),
			Type: to.Ptr("Microsoft.Network/virtualHubs/routingIntent"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RoutingIntentProperties{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingPolicies: []*armnetwork.RoutingPolicy{
					{
						Name: to.Ptr("InternetTraffic"),
						Destinations: []*string{
							to.Ptr("Internet")},
						NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
					},
					{
						Name: to.Ptr("PrivateTrafficPolicy"),
						Destinations: []*string{
							to.Ptr("PrivateTraffic")},
						NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoutingIntent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoutingIntent)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutingIntent_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTableGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutingIntentClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"virtualHub1",
		"Intent1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.RoutingIntent{
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routingIntent/Intent1"),
			Name: to.Ptr("Intent1"),
			Type: to.Ptr("Microsoft.Network/virtualHubs/routingIntent"),
			Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
			Properties: &armnetwork.RoutingIntentProperties{
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				RoutingPolicies: []*armnetwork.RoutingPolicy{
					{
						Name: to.Ptr("InternetTraffic"),
						Destinations: []*string{
							to.Ptr("Internet")},
						NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
					},
					{
						Name: to.Ptr("PrivateTrafficPolicy"),
						Destinations: []*string{
							to.Ptr("PrivateTraffic")},
						NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoutingIntent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoutingIntent)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutingIntent_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RouteTableDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutingIntentClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"virtualHub1",
		"Intent1",
		&armnetwork.RoutingIntentClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentDelete.json: %v", err)
	}
}

func TestRoutingIntent_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoutingIntentList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewRoutingIntentClient("subid", cred, &options)
	pager := client.List("rg1",
		"virtualHub1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.ListRoutingIntentResult{
			Value: []*armnetwork.RoutingIntent{
				{
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routingIntent/Intent1"),
					Name: to.Ptr("Intent1"),
					Type: to.Ptr("Microsoft.Network/virtualHubs/routingIntent"),
					Etag: to.Ptr("w/\\00000000-0000-0000-0000-000000000000\\"),
					Properties: &armnetwork.RoutingIntentProperties{
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						RoutingPolicies: []*armnetwork.RoutingPolicy{
							{
								Name: to.Ptr("InternetTraffic"),
								Destinations: []*string{
									to.Ptr("Internet")},
								NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
							},
							{
								Name: to.Ptr("PrivateTrafficPolicy"),
								Destinations: []*string{
									to.Ptr("PrivateTraffic")},
								NextHop: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfw1"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListRoutingIntentResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListRoutingIntentResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/RoutingIntentList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApplicationFirewallPolicies_List(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafListPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all WAF policies in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebApplicationFirewallPoliciesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafListPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.WebApplicationFirewallPolicyListResult{
			Value: []*armnetwork.WebApplicationFirewallPolicy{
				{
					Name:     to.Ptr("Policy1"),
					Type:     to.Ptr("Microsoft.Network/applicationgatewaywebapplicationfirewallpolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/Policy1"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armnetwork.WebApplicationFirewallPolicyPropertiesFormat{
						CustomRules: []*armnetwork.WebApplicationFirewallCustomRule{
							{
								Name:   to.Ptr("Rule1"),
								Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
								MatchConditions: []*armnetwork.MatchCondition{
									{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24"),
											to.Ptr("10.0.0.0/24")},
										MatchVariables: []*armnetwork.MatchVariable{
											{
												VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
											}},
										NegationConditon: to.Ptr(false),
										Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
										Transforms:       []*armnetwork.WebApplicationFirewallTransform{},
									}},
								Priority: to.Ptr[int32](1),
								RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
							},
							{
								Name:   to.Ptr("Rule2"),
								Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
								MatchConditions: []*armnetwork.MatchCondition{
									{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24")},
										MatchVariables: []*armnetwork.MatchVariable{
											{
												VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
											}},
										NegationConditon: to.Ptr(false),
										Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
									},
									{
										MatchValues: []*string{
											to.Ptr("Windows")},
										MatchVariables: []*armnetwork.MatchVariable{
											{
												Selector:     to.Ptr("UserAgent"),
												VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariable("RequestHeader")),
											}},
										NegationConditon: to.Ptr(false),
										Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorContains),
									}},
								Priority: to.Ptr[int32](2),
								RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
							}},
						ManagedRules: &armnetwork.ManagedRulesDefinition{
							ManagedRuleSets: []*armnetwork.ManagedRuleSet{
								{
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.2"),
								}},
						},
						PolicySettings: &armnetwork.PolicySettings{
							FileUploadLimitInMb:    to.Ptr[int32](4000),
							MaxRequestBodySizeInKb: to.Ptr[int32](2000),
							Mode:                   to.Ptr(armnetwork.WebApplicationFirewallModeDetection),
							RequestBodyCheck:       to.Ptr(true),
							State:                  to.Ptr(armnetwork.WebApplicationFirewallEnabledStateEnabled),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceState:     to.Ptr(armnetwork.WebApplicationFirewallPolicyResourceStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebApplicationFirewallPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebApplicationFirewallPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafListPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApplicationFirewallPolicies_ListAll(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafListAllPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all WAF policies in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebApplicationFirewallPoliciesClient("subid", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafListAllPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnetwork.WebApplicationFirewallPolicyListResult{
			Value: []*armnetwork.WebApplicationFirewallPolicy{
				{
					Name:     to.Ptr("Policy1"),
					Type:     to.Ptr("Microsoft.Network/applicationgatewaywebapplicationfirewallpolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/Policy1"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armnetwork.WebApplicationFirewallPolicyPropertiesFormat{
						CustomRules: []*armnetwork.WebApplicationFirewallCustomRule{
							{
								Name:   to.Ptr("Rule1"),
								Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
								MatchConditions: []*armnetwork.MatchCondition{
									{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24"),
											to.Ptr("10.0.0.0/24")},
										MatchVariables: []*armnetwork.MatchVariable{
											{
												VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
											}},
										NegationConditon: to.Ptr(false),
										Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
										Transforms:       []*armnetwork.WebApplicationFirewallTransform{},
									}},
								Priority: to.Ptr[int32](1),
								RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
							},
							{
								Name:   to.Ptr("Rule2"),
								Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
								MatchConditions: []*armnetwork.MatchCondition{
									{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24")},
										MatchVariables: []*armnetwork.MatchVariable{
											{
												VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
											}},
										NegationConditon: to.Ptr(false),
										Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
									},
									{
										MatchValues: []*string{
											to.Ptr("Windows")},
										MatchVariables: []*armnetwork.MatchVariable{
											{
												Selector:     to.Ptr("UserAgent"),
												VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariable("RequestHeader")),
											}},
										NegationConditon: to.Ptr(false),
										Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorContains),
									}},
								Priority: to.Ptr[int32](2),
								RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
							}},
						ManagedRules: &armnetwork.ManagedRulesDefinition{
							ManagedRuleSets: []*armnetwork.ManagedRuleSet{
								{
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.2"),
								}},
						},
						PolicySettings: &armnetwork.PolicySettings{
							FileUploadLimitInMb:    to.Ptr[int32](4000),
							MaxRequestBodySizeInKb: to.Ptr[int32](2000),
							Mode:                   to.Ptr(armnetwork.WebApplicationFirewallModePrevention),
							RequestBodyCheck:       to.Ptr(true),
							State:                  to.Ptr(armnetwork.WebApplicationFirewallEnabledStateEnabled),
						},
						ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
						ResourceState:     to.Ptr(armnetwork.WebApplicationFirewallPolicyResourceStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebApplicationFirewallPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebApplicationFirewallPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafListAllPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApplicationFirewallPolicies_Get(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a WAF policy within a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebApplicationFirewallPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"Policy1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.WebApplicationFirewallPolicy{
			Name:     to.Ptr("Policy1"),
			Type:     to.Ptr("Microsoft.Network/applicationgatewaywebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/Policy1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armnetwork.WebApplicationFirewallPolicyPropertiesFormat{
				CustomRules: []*armnetwork.WebApplicationFirewallCustomRule{
					{
						Name:   to.Ptr("Rule1"),
						Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
						MatchConditions: []*armnetwork.MatchCondition{
							{
								MatchValues: []*string{
									to.Ptr("192.168.1.0/24"),
									to.Ptr("10.0.0.0/24")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
									}},
								NegationConditon: to.Ptr(false),
								Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
								Transforms:       []*armnetwork.WebApplicationFirewallTransform{},
							}},
						Priority: to.Ptr[int32](1),
						RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
					},
					{
						Name:   to.Ptr("Rule2"),
						Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
						MatchConditions: []*armnetwork.MatchCondition{
							{
								MatchValues: []*string{
									to.Ptr("192.168.1.0/24")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
									}},
								NegationConditon: to.Ptr(false),
								Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
							},
							{
								MatchValues: []*string{
									to.Ptr("Windows")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										Selector:     to.Ptr("UserAgent"),
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariable("RequestHeader")),
									}},
								NegationConditon: to.Ptr(false),
								Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorContains),
							}},
						Priority: to.Ptr[int32](2),
						RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
					}},
				ManagedRules: &armnetwork.ManagedRulesDefinition{
					Exclusions: []*armnetwork.OwaspCrsExclusionEntry{
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestHeaderNames),
							Selector:              to.Ptr("testHeader1"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorEquals),
						},
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestHeaderNames),
							Selector:              to.Ptr("testHeader2"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgValues),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							ExclusionManagedRuleSets: []*armnetwork.ExclusionManagedRuleSet{
								{
									RuleGroups: []*armnetwork.ExclusionManagedRuleGroup{
										{
											RuleGroupName: to.Ptr("REQUEST-930-APPLICATION-ATTACK-LFI"),
											Rules: []*armnetwork.ExclusionManagedRule{
												{
													RuleID: to.Ptr("930120"),
												}},
										},
										{
											RuleGroupName: to.Ptr("REQUEST-932-APPLICATION-ATTACK-RCE"),
										}},
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.2"),
								}},
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							ExclusionManagedRuleSets: []*armnetwork.ExclusionManagedRuleSet{
								{
									RuleGroups:     []*armnetwork.ExclusionManagedRuleGroup{},
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.1"),
								}},
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith),
						}},
					ManagedRuleSets: []*armnetwork.ManagedRuleSet{
						{
							RuleGroupOverrides: []*armnetwork.ManagedRuleGroupOverride{
								{
									RuleGroupName: to.Ptr("REQUEST-942-APPLICATION-ATTACK-SQLI"),
									Rules: []*armnetwork.ManagedRuleOverride{
										{
											RuleID: to.Ptr("942130"),
											State:  to.Ptr(armnetwork.ManagedRuleEnabledStateDisabled),
										},
										{
											RuleID: to.Ptr("942110"),
											State:  to.Ptr(armnetwork.ManagedRuleEnabledStateDisabled),
										}},
								},
								{
									RuleGroupName: to.Ptr("REQUEST-920-PROTOCOL-ENFORCEMENT"),
									Rules: []*armnetwork.ManagedRuleOverride{
										{
											RuleID: to.Ptr("920100"),
											State:  to.Ptr(armnetwork.ManagedRuleEnabledStateDisabled),
										},
										{
											RuleID: to.Ptr("920120"),
											State:  to.Ptr(armnetwork.ManagedRuleEnabledStateDisabled),
										}},
								}},
							RuleSetType:    to.Ptr("OWASP"),
							RuleSetVersion: to.Ptr("3.2"),
						}},
				},
				PolicySettings: &armnetwork.PolicySettings{
					FileUploadLimitInMb:    to.Ptr[int32](4000),
					MaxRequestBodySizeInKb: to.Ptr[int32](2000),
					Mode:                   to.Ptr(armnetwork.WebApplicationFirewallModePrevention),
					RequestBodyCheck:       to.Ptr(true),
					State:                  to.Ptr(armnetwork.WebApplicationFirewallEnabledStateEnabled),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceState:     to.Ptr(armnetwork.WebApplicationFirewallPolicyResourceStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApplicationFirewallPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a WAF policy within a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebApplicationFirewallPoliciesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"Policy1",
		armnetwork.WebApplicationFirewallPolicy{
			Location: to.Ptr("WestUs"),
			Properties: &armnetwork.WebApplicationFirewallPolicyPropertiesFormat{
				CustomRules: []*armnetwork.WebApplicationFirewallCustomRule{
					{
						Name:   to.Ptr("Rule1"),
						Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
						MatchConditions: []*armnetwork.MatchCondition{
							{
								MatchValues: []*string{
									to.Ptr("192.168.1.0/24"),
									to.Ptr("10.0.0.0/24")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
									}},
								Operator: to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
							}},
						Priority: to.Ptr[int32](1),
						RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
					},
					{
						Name:   to.Ptr("Rule2"),
						Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
						MatchConditions: []*armnetwork.MatchCondition{
							{
								MatchValues: []*string{
									to.Ptr("192.168.1.0/24")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
									}},
								Operator: to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
							},
							{
								MatchValues: []*string{
									to.Ptr("Windows")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										Selector:     to.Ptr("UserAgent"),
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRequestHeaders),
									}},
								Operator: to.Ptr(armnetwork.WebApplicationFirewallOperatorContains),
							}},
						Priority: to.Ptr[int32](2),
						RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
					}},
				ManagedRules: &armnetwork.ManagedRulesDefinition{
					Exclusions: []*armnetwork.OwaspCrsExclusionEntry{
						{
							ExclusionManagedRuleSets: []*armnetwork.ExclusionManagedRuleSet{
								{
									RuleGroups: []*armnetwork.ExclusionManagedRuleGroup{
										{
											RuleGroupName: to.Ptr("REQUEST-930-APPLICATION-ATTACK-LFI"),
											Rules: []*armnetwork.ExclusionManagedRule{
												{
													RuleID: to.Ptr("930120"),
												}},
										},
										{
											RuleGroupName: to.Ptr("REQUEST-932-APPLICATION-ATTACK-RCE"),
										}},
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.2"),
								}},
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							ExclusionManagedRuleSets: []*armnetwork.ExclusionManagedRuleSet{
								{
									RuleGroups:     []*armnetwork.ExclusionManagedRuleGroup{},
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.1"),
								}},
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith),
						},
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("test"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgValues),
							Selector:              to.Ptr("test"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						}},
					ManagedRuleSets: []*armnetwork.ManagedRuleSet{
						{
							RuleSetType:    to.Ptr("OWASP"),
							RuleSetVersion: to.Ptr("3.2"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnetwork.WebApplicationFirewallPolicy{
			Name:     to.Ptr("Policy1"),
			Type:     to.Ptr("Microsoft.Network/applicationgatewaywebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/Policy1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armnetwork.WebApplicationFirewallPolicyPropertiesFormat{
				CustomRules: []*armnetwork.WebApplicationFirewallCustomRule{
					{
						Name:   to.Ptr("Rule1"),
						Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
						MatchConditions: []*armnetwork.MatchCondition{
							{
								MatchValues: []*string{
									to.Ptr("192.168.1.0/24"),
									to.Ptr("10.0.0.0/24")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
									}},
								NegationConditon: to.Ptr(false),
								Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
								Transforms:       []*armnetwork.WebApplicationFirewallTransform{},
							}},
						Priority: to.Ptr[int32](1),
						RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
					},
					{
						Name:   to.Ptr("Rule2"),
						Action: to.Ptr(armnetwork.WebApplicationFirewallActionBlock),
						MatchConditions: []*armnetwork.MatchCondition{
							{
								MatchValues: []*string{
									to.Ptr("192.168.1.0/24")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariableRemoteAddr),
									}},
								NegationConditon: to.Ptr(false),
								Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorIPMatch),
							},
							{
								MatchValues: []*string{
									to.Ptr("Windows")},
								MatchVariables: []*armnetwork.MatchVariable{
									{
										Selector:     to.Ptr("UserAgent"),
										VariableName: to.Ptr(armnetwork.WebApplicationFirewallMatchVariable("RequestHeader")),
									}},
								NegationConditon: to.Ptr(false),
								Operator:         to.Ptr(armnetwork.WebApplicationFirewallOperatorContains),
							}},
						Priority: to.Ptr[int32](2),
						RuleType: to.Ptr(armnetwork.WebApplicationFirewallRuleTypeMatchRule),
					}},
				ManagedRules: &armnetwork.ManagedRulesDefinition{
					Exclusions: []*armnetwork.OwaspCrsExclusionEntry{
						{
							ExclusionManagedRuleSets: []*armnetwork.ExclusionManagedRuleSet{
								{
									RuleGroups: []*armnetwork.ExclusionManagedRuleGroup{
										{
											RuleGroupName: to.Ptr("REQUEST-930-APPLICATION-ATTACK-LFI"),
											Rules: []*armnetwork.ExclusionManagedRule{
												{
													RuleID: to.Ptr("930120"),
												}},
										},
										{
											RuleGroupName: to.Ptr("REQUEST-932-APPLICATION-ATTACK-RCE"),
										}},
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.2"),
								}},
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							ExclusionManagedRuleSets: []*armnetwork.ExclusionManagedRuleSet{
								{
									RuleGroups:     []*armnetwork.ExclusionManagedRuleGroup{},
									RuleSetType:    to.Ptr("OWASP"),
									RuleSetVersion: to.Ptr("3.1"),
								}},
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("hello"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith),
						},
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgNames),
							Selector:              to.Ptr("test"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						},
						{
							MatchVariable:         to.Ptr(armnetwork.OwaspCrsExclusionEntryMatchVariableRequestArgValues),
							Selector:              to.Ptr("test"),
							SelectorMatchOperator: to.Ptr(armnetwork.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith),
						}},
					ManagedRuleSets: []*armnetwork.ManagedRuleSet{
						{
							RuleSetType:    to.Ptr("OWASP"),
							RuleSetVersion: to.Ptr("3.2"),
						}},
				},
				PolicySettings: &armnetwork.PolicySettings{
					FileUploadLimitInMb:    to.Ptr[int32](4000),
					MaxRequestBodySizeInKb: to.Ptr[int32](2000),
					Mode:                   to.Ptr(armnetwork.WebApplicationFirewallModeDetection),
					RequestBodyCheck:       to.Ptr(true),
					State:                  to.Ptr(armnetwork.WebApplicationFirewallEnabledStateEnabled),
				},
				ProvisioningState: to.Ptr(armnetwork.ProvisioningStateSucceeded),
				ResourceState:     to.Ptr(armnetwork.WebApplicationFirewallPolicyResourceStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApplicationFirewallPolicies_Delete(t *testing.T) {
	// From example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a WAF policy within a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnetwork.NewWebApplicationFirewallPoliciesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"Policy1",
		&armnetwork.WebApplicationFirewallPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/WafPolicyDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
