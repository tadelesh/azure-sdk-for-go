//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armanalysisservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestServers_GetDetails(t *testing.T) {
	// From example Get details of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	res, err := client.GetDetails(ctx,
		"TestRG",
		"azsdktest",
		&ServersGetDetailsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisServicesServer.ID == nil {
		t.Fatal("AnalysisServicesServer.ID should not be nil!")
	}
}

func TestServers_Create(t *testing.T) {
	// From example Create a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	poller, err := client.BeginCreate(ctx,
		"TestRG",
		"azsdktest",
		AnalysisServicesServer{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				SKU: &ResourceSKU{
					Name:     to.StringPtr("S1"),
					Capacity: to.Int32Ptr(1),
					Tier:     SKUTierStandard.ToPtr(),
				},
				Tags: map[string]*string{
					"testKey": to.StringPtr("testValue"),
				},
			},
			Properties: &AnalysisServicesServerProperties{
				AnalysisServicesServerMutableProperties: AnalysisServicesServerMutableProperties{
					AsAdministrators: &ServerAdministrators{
						Members: []*string{
							to.StringPtr("azsdktest@microsoft.com"),
							to.StringPtr("azsdktest2@microsoft.com")},
					},
				},
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisServicesServer.ID == nil {
		t.Fatal("AnalysisServicesServer.ID should not be nil!")
	}
}

func TestServers_Delete(t *testing.T) {
	// From example Delete a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	poller, err := client.BeginDelete(ctx,
		"TestRG",
		"azsdktest",
		&ServersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Update(t *testing.T) {
	// From example Update a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	poller, err := client.BeginUpdate(ctx,
		"TestRG",
		"azsdktest",
		AnalysisServicesServerUpdateParameters{
			Properties: &AnalysisServicesServerMutableProperties{
				AsAdministrators: &ServerAdministrators{
					Members: []*string{
						to.StringPtr("azsdktest@microsoft.com"),
						to.StringPtr("azsdktest2@microsoft.com")},
				},
			},
			SKU: &ResourceSKU{
				Name:     to.StringPtr("S1"),
				Capacity: to.Int32Ptr(1),
				Tier:     SKUTierStandard.ToPtr(),
			},
			Tags: map[string]*string{
				"testKey": to.StringPtr("testValue"),
			},
		},
		&ServersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisServicesServer.ID == nil {
		t.Fatal("AnalysisServicesServer.ID should not be nil!")
	}
}

func TestServers_Suspend(t *testing.T) {
	// From example Suspend a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	poller, err := client.BeginSuspend(ctx,
		"TestRG",
		"azsdktest",
		&ServersBeginSuspendOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Resume(t *testing.T) {
	// From example Resume a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	poller, err := client.BeginResume(ctx,
		"TestRG",
		"azsdktest",
		&ServersBeginResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example List existing servers in the resource group.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.ListByResourceGroup(ctx,
		"TestRG",
		&ServersListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_List(t *testing.T) {
	// From example List existing servers under the subscription.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.List(ctx,
		&ServersListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_ListSkusForNew(t *testing.T) {
	// From example List eligible SKUs for a new server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.ListSKUsForNew(ctx,
		&ServersListSKUsForNewOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_ListSkusForExisting(t *testing.T) {
	// From example List eligible SKUs for an existing server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.ListSKUsForExisting(ctx,
		"TestRG",
		"azsdktest",
		&ServersListSKUsForExistingOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_ListGatewayStatus(t *testing.T) {
	// From example Get details of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.ListGatewayStatus(ctx,
		"TestRG",
		"azsdktest",
		&ServersListGatewayStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_DissociateGateway(t *testing.T) {
	// From example Get details of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.DissociateGateway(ctx,
		"TestRG",
		"azsdktest",
		&ServersDissociateGatewayOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_CheckNameAvailability(t *testing.T) {
	// From example Get details of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.CheckNameAvailability(ctx,
		"West US",
		CheckServerNameAvailabilityParameters{
			Name: to.StringPtr("azsdktest"),
			Type: to.StringPtr("Microsoft.AnalysisServices/servers"),
		},
		&ServersCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_ListOperationResults(t *testing.T) {
	// From example Get details of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	_, err := client.ListOperationResults(ctx,
		"West US",
		"00000000000000000000000000000000",
		&ServersListOperationResultsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_ListOperationStatuses(t *testing.T) {
	// From example Get details of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	res, err := client.ListOperationStatuses(ctx,
		"West US",
		"testoperationid",
		&ServersListOperationStatusesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
