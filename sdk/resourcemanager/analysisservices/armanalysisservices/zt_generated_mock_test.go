//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armanalysisservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/analysisservices/armanalysisservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServers_GetDetails(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/getServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.GetDetails(ctx,
		"TestRG",
		"azsdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/getServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armanalysisservices.Server{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.AnalysisServices/servers/azsdktest"),
			Location: to.Ptr("West US"),
			SKU: &armanalysisservices.ResourceSKU{
				Name:     to.Ptr("S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armanalysisservices.ServerProperties{
				AsAdministrators: &armanalysisservices.ServerAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com")},
				},
				ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
				ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
				State:             to.Ptr(armanalysisservices.StateProvisioning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/getServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Create(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/createServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TestRG",
		"azsdktest",
		armanalysisservices.Server{
			Location: to.Ptr("West US"),
			SKU: &armanalysisservices.ResourceSKU{
				Name:     to.Ptr("S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armanalysisservices.ServerProperties{
				AsAdministrators: &armanalysisservices.ServerAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
			},
		},
		&armanalysisservices.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/createServer.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/createServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armanalysisservices.Server{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.AnalysisServices/servers/azsdktest"),
			Location: to.Ptr("West US"),
			SKU: &armanalysisservices.ResourceSKU{
				Name:     to.Ptr("S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armanalysisservices.ServerProperties{
				AsAdministrators: &armanalysisservices.ServerAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
				ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
				ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
				State:             to.Ptr(armanalysisservices.StateProvisioning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/createServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Delete(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/deleteServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestRG",
		"azsdktest",
		&armanalysisservices.ServersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/deleteServer.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/deleteServer.json: %v", err)
	}
}

func TestServers_Update(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/updateServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"TestRG",
		"azsdktest",
		armanalysisservices.ServerUpdateParameters{
			Properties: &armanalysisservices.ServerMutableProperties{
				AsAdministrators: &armanalysisservices.ServerAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
			},
			SKU: &armanalysisservices.ResourceSKU{
				Name:     to.Ptr("S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
		},
		&armanalysisservices.ServersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/updateServer.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/updateServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armanalysisservices.Server{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.AnalysisServices/servers/azsdktest"),
			Location: to.Ptr("West US"),
			SKU: &armanalysisservices.ResourceSKU{
				Name:     to.Ptr("S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armanalysisservices.ServerProperties{
				AsAdministrators: &armanalysisservices.ServerAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
				ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
				ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
				State:             to.Ptr(armanalysisservices.StateProvisioning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/updateServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Suspend(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/suspendServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Suspend a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginSuspend(ctx,
		"TestRG",
		"azsdktest",
		&armanalysisservices.ServersClientBeginSuspendOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/suspendServer.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/suspendServer.json: %v", err)
	}
}

func TestServers_Resume(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/resumeServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resume a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginResume(ctx,
		"TestRG",
		"azsdktest",
		&armanalysisservices.ServersClientBeginResumeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/resumeServer.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/resumeServer.json: %v", err)
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServersInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List existing servers in the resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	pager := client.ListByResourceGroup("TestRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServersInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armanalysisservices.Servers{
			Value: []*armanalysisservices.Server{
				{
					Name:     to.Ptr("azsdktest"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.AnalysisServices/servers/azsdktest"),
					Location: to.Ptr("West US"),
					SKU: &armanalysisservices.ResourceSKU{
						Name:     to.Ptr("S1"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
					},
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armanalysisservices.ServerProperties{
						AsAdministrators: &armanalysisservices.ServerAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
						ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
						State:             to.Ptr(armanalysisservices.StateProvisioning),
					},
				},
				{
					Name:     to.Ptr("azsdktest2"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.AnalysisServices/servers/azsdktest"),
					Location: to.Ptr("West US"),
					SKU: &armanalysisservices.ResourceSKU{
						Name:     to.Ptr("S0"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
					},
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armanalysisservices.ServerProperties{
						AsAdministrators: &armanalysisservices.ServerAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
						ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
						State:             to.Ptr(armanalysisservices.StateProvisioning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Servers) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Servers)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServersInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_List(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List existing servers under the subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armanalysisservices.Servers{
			Value: []*armanalysisservices.Server{
				{
					Name:     to.Ptr("azsdktest"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.AnalysisServices/servers/azsdktest"),
					Location: to.Ptr("West US"),
					SKU: &armanalysisservices.ResourceSKU{
						Name:     to.Ptr("S1"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
					},
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armanalysisservices.ServerProperties{
						AsAdministrators: &armanalysisservices.ServerAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
						ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
						State:             to.Ptr(armanalysisservices.StateProvisioning),
					},
				},
				{
					Name:     to.Ptr("azsdktest2"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG2/providers/Microsoft.AnalysisServices/servers/azsdktest"),
					Location: to.Ptr("West US"),
					SKU: &armanalysisservices.ResourceSKU{
						Name:     to.Ptr("S0"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr(armanalysisservices.SKUTierStandard),
					},
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armanalysisservices.ServerProperties{
						AsAdministrators: &armanalysisservices.ServerAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armanalysisservices.ProvisioningStateSucceeded),
						ServerFullName:    to.Ptr("asazure://nightly1.asazure-int.windows.net/azsdktest"),
						State:             to.Ptr(armanalysisservices.StateProvisioning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Servers) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Servers)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ListGatewayStatus(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listGatewayStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.ListGatewayStatus(ctx,
		"TestRG",
		"azsdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listGatewayStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armanalysisservices.GatewayListStatusLive{
			Status: to.Ptr[int32](0),
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayListStatusLive) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayListStatusLive)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listGatewayStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_DissociateGateway(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/dissociateGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	_, err := client.DissociateGateway(ctx,
		"TestRG",
		"azsdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/dissociateGateway.json: %v", err)
	}
}

func TestServers_CheckNameAvailability(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/checkNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"West US",
		armanalysisservices.CheckServerNameAvailabilityParameters{
			Name: to.Ptr("azsdktest"),
			Type: to.Ptr("Microsoft.AnalysisServices/servers"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/checkNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armanalysisservices.CheckServerNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckServerNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckServerNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/checkNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ListOperationResults(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationResults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	_, err := client.ListOperationResults(ctx,
		"West US",
		"00000000000000000000000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationResults.json: %v", err)
	}
}

func TestServers_ListOperationStatuses(t *testing.T) {
	// From example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationStatuses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armanalysisservices.NewServersClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.ListOperationStatuses(ctx,
		"West US",
		"testoperationid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationStatuses.json: %v", err)
	}
	// Response check
	{
		exampleRes := armanalysisservices.OperationStatus{
			Name:      to.Ptr("testoperationid"),
			EndTime:   to.Ptr("2017-01-01T16:13:13.933Z"),
			ID:        to.Ptr("/subscriptions/id/locations/westus/operationstatuses/testoperationid"),
			StartTime: to.Ptr("2017-01-01T13:13:13.933Z"),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationStatuses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
