//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armserialconsole

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func Test_ListOperations(t *testing.T) {
	// From example List all Serial Console management operations supported by Serial Console RP
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMicrosoftSerialConsoleClientClient(con,
		nil)
	_, err := client.ListOperations(ctx,
		&MicrosoftSerialConsoleClientListOperationsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_GetConsoleStatus(t *testing.T) {
	// From example Get the Serial Console disabled status for a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMicrosoftSerialConsoleClientClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.GetConsoleStatus(ctx,
		"default",
		&MicrosoftSerialConsoleClientGetConsoleStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_DisableConsole(t *testing.T) {
	// From example Disable Serial Console for a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMicrosoftSerialConsoleClientClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.DisableConsole(ctx,
		"default",
		&MicrosoftSerialConsoleClientDisableConsoleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_EnableConsole(t *testing.T) {
	// From example Enable Serial Console for a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMicrosoftSerialConsoleClientClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.EnableConsole(ctx,
		"default",
		&MicrosoftSerialConsoleClientEnableConsoleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSerialPorts_List(t *testing.T) {
	// From example List Serial Ports for parent resources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSerialPortsClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.List(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		&SerialPortsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSerialPorts_Get(t *testing.T) {
	// From example Get the serial port for a parent resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSerialPortsClient(con,
		"00000000-00000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		&SerialPortsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SerialPort.ID == nil {
		t.Fatal("SerialPort.ID should not be nil!")
	}
}

func TestSerialPorts_Create(t *testing.T) {
	// From example Create a new serial port resource.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSerialPortsClient(con,
		"00000000-00000-0000-0000-000000000000")
	res, err := client.Create(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		SerialPort{
			Properties: &SerialPortProperties{
				State: SerialPortStateEnabled.ToPtr(),
			},
		},
		&SerialPortsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SerialPort.ID == nil {
		t.Fatal("SerialPort.ID should not be nil!")
	}
}

func TestSerialPorts_Delete(t *testing.T) {
	// From example Delete a serial port resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSerialPortsClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		&SerialPortsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSerialPorts_ListBySubscriptions(t *testing.T) {
	// From example List Serial Ports for subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSerialPortsClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.ListBySubscriptions(ctx,
		&SerialPortsListBySubscriptionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSerialPorts_Connect(t *testing.T) {
	// From example Connect to a scale set instance serial port
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSerialPortsClient(con,
		"00000000-00000-0000-0000-000000000000")
	_, err := client.Connect(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"myscaleset/virtualMachines/2",
		"0",
		&SerialPortsConnectOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Connect to a virtual machine serial port
	_, err = client.Connect(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		&SerialPortsConnectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
