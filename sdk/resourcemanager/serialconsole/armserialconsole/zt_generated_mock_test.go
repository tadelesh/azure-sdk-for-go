//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armserialconsole_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/serialconsole/armserialconsole"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMicrosoftSerialConsoleClient_ListOperations(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/GetOperationsExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Serial Console management operations supported by Serial Console RP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewMicrosoftSerialConsoleClient("<subscription-id>", cred, &options)
	res, err := client.ListOperations(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/GetOperationsExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.Operations{
			Value: []*armserialconsole.OperationsValueItem{
				{
					Name: to.Ptr("Microsoft.SerialConsole/consoleServices/read"),
					Display: &armserialconsole.OperationsValueItemDisplay{
						Description: to.Ptr("Retrieves the current subscription state"),
						Operation:   to.Ptr("Default"),
						Provider:    to.Ptr("Microsoft.SerialConsole"),
						Resource:    to.Ptr("Serial Console instance"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.SerialConsole/consoleServices/disableConsole/action"),
					Display: &armserialconsole.OperationsValueItemDisplay{
						Description: to.Ptr("Disable Serial Console for a subscription"),
						Operation:   to.Ptr("Disable Console"),
						Provider:    to.Ptr("Microsoft.SerialConsole"),
						Resource:    to.Ptr("Serial Console instance"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.SerialConsole/consoleServices/enableConsole/action"),
					Display: &armserialconsole.OperationsValueItemDisplay{
						Description: to.Ptr("Enable Serial Console for a subscription"),
						Operation:   to.Ptr("Enable Console"),
						Provider:    to.Ptr("Microsoft.SerialConsole"),
						Resource:    to.Ptr("Serial Console instance"),
					},
					IsDataAction: to.Ptr("false"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Operations) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Operations)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/GetOperationsExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMicrosoftSerialConsoleClient_GetConsoleStatus(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialConsoleStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the Serial Console disabled status for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewMicrosoftSerialConsoleClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.GetConsoleStatus(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialConsoleStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.Status{
			Disabled: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialConsoleStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMicrosoftSerialConsoleClient_DisableConsole(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/DisableConsoleExamples.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable Serial Console for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewMicrosoftSerialConsoleClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.DisableConsole(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/DisableConsoleExamples.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.DisableSerialConsoleResult{
			Disabled: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/DisableConsoleExamples.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMicrosoftSerialConsoleClient_EnableConsole(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/EnableConsoleExamples.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable Serial Console for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewMicrosoftSerialConsoleClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.EnableConsole(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/EnableConsoleExamples.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.EnableSerialConsoleResult{
			Disabled: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/EnableConsoleExamples.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSerialPorts_List(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/ListSerialPort.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Serial Ports for parent resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/ListSerialPort.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.SerialPortListResult{
			Value: []*armserialconsole.SerialPort{
				{
					Name: to.Ptr("0"),
					Type: to.Ptr("Microsoft.SerialConsole/serialPorts"),
					ID:   to.Ptr("/subscriptions/00000000-00000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/providers/Microsoft.SerialConsole/serialPorts/0"),
					Properties: &armserialconsole.SerialPortProperties{
						State: to.Ptr(armserialconsole.SerialPortStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SerialPortListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SerialPortListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/ListSerialPort.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSerialPorts_Get(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/GetSerialPort.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the serial port for a parent resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/GetSerialPort.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.SerialPort{
			Name: to.Ptr("0"),
			Type: to.Ptr("Microsoft.SerialConsole/serialPorts"),
			ID:   to.Ptr("/subscriptions/00000000-00000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/providers/Microsoft.SerialConsole/serialPorts/0"),
			Properties: &armserialconsole.SerialPortProperties{
				State: to.Ptr(armserialconsole.SerialPortStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SerialPort) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SerialPort)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/GetSerialPort.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSerialPorts_Create(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/CreateSerialPort.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new serial port resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	_, err := client.Create(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		armserialconsole.SerialPort{
			Properties: &armserialconsole.SerialPortProperties{
				State: to.Ptr(armserialconsole.SerialPortStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/CreateSerialPort.json: %v", err)
	}
}

func TestSerialPorts_Delete(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/DeleteSerialPort.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a serial port resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/DeleteSerialPort.json: %v", err)
	}
}

func TestSerialPorts_ListBySubscriptions(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/ListSerialPortSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Serial Ports for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.ListBySubscriptions(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/ListSerialPortSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.SerialPortListResult{
			Value: []*armserialconsole.SerialPort{
				{
					Name: to.Ptr("0"),
					Type: to.Ptr("Microsoft.SerialConsole/serialPorts"),
					ID:   to.Ptr("/subscriptions/00000000-00000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/providers/Microsoft.SerialConsole/serialPorts/0"),
					Properties: &armserialconsole.SerialPortProperties{
						State: to.Ptr(armserialconsole.SerialPortStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SerialPortListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SerialPortListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/ListSerialPortSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSerialPorts_Connect(t *testing.T) {
	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialPortConnectVMSS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connect to a scale set instance serial port"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err := client.Connect(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"myscaleset/virtualMachines/2",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialPortConnectVMSS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.SerialPortConnectResult{
			ConnectionString: to.Ptr("wss://eastus.gateway.serialconsole.azure.com/n/connector/{containerid}/sessions/{sessionId}/client"),
		}
		if !reflect.DeepEqual(exampleRes, res.SerialPortConnectResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SerialPortConnectResult)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialPortConnectVMSS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialPortConnectVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connect to a virtual machine serial port"},
	})
	client = armserialconsole.NewSerialPortsClient("00000000-00000-0000-0000-000000000000", cred, &options)
	res, err = client.Connect(ctx,
		"myResourceGroup",
		"Microsoft.Compute",
		"virtualMachines",
		"myVM",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialPortConnectVM.json: %v", err)
	}
	// Response check
	{
		exampleRes := armserialconsole.SerialPortConnectResult{
			ConnectionString: to.Ptr("wss://eastus.gateway.serialconsole.azure.com/n/connector/{containerid}/sessions/{sessionId}/client"),
		}
		if !reflect.DeepEqual(exampleRes, res.SerialPortConnectResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SerialPortConnectResult)
			t.Fatalf("Mock response is not equal to example response for example specification/serialconsole/resource-manager/Microsoft.SerialConsole/stable/2018-05-01/examples/SerialPortConnectVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
