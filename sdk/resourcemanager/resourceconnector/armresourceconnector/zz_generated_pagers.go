//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.

package armresourceconnector

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AppliancesClientListByResourceGroupPager provides operations for iterating over paged responses.
type AppliancesClientListByResourceGroupPager struct {
	client    *AppliancesClient
	current   AppliancesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppliancesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AppliancesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplianceListResult.NextLink == nil || len(*p.current.ApplianceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AppliancesClientListByResourceGroupPager) NextPage(ctx context.Context) (AppliancesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AppliancesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AppliancesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AppliancesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AppliancesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return AppliancesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AppliancesClientListBySubscriptionPager provides operations for iterating over paged responses.
type AppliancesClientListBySubscriptionPager struct {
	client    *AppliancesClient
	current   AppliancesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppliancesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AppliancesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplianceListResult.NextLink == nil || len(*p.current.ApplianceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AppliancesClientListBySubscriptionPager) NextPage(ctx context.Context) (AppliancesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AppliancesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AppliancesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AppliancesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AppliancesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return AppliancesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AppliancesClientListOperationsPager provides operations for iterating over paged responses.
type AppliancesClientListOperationsPager struct {
	client    *AppliancesClient
	current   AppliancesClientListOperationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppliancesClientListOperationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AppliancesClientListOperationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplianceOperationsList.NextLink == nil || len(*p.current.ApplianceOperationsList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AppliancesClientListOperationsPager) NextPage(ctx context.Context) (AppliancesClientListOperationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AppliancesClientListOperationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AppliancesClientListOperationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AppliancesClientListOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AppliancesClientListOperationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		return AppliancesClientListOperationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}
