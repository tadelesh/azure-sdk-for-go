//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.

package armresourceconnector

const (
	moduleName    = "armresourceconnector"
	moduleVersion = "v0.2.0"
)

// AccessProfileType - Name which contains the role of the kubeconfig.
type AccessProfileType string

const (
	AccessProfileTypeClusterUser AccessProfileType = "clusterUser"
)

// PossibleAccessProfileTypeValues returns the possible values for the AccessProfileType const type.
func PossibleAccessProfileTypeValues() []AccessProfileType {
	return []AccessProfileType{
		AccessProfileTypeClusterUser,
	}
}

// ToPtr returns a *AccessProfileType pointing to the current value.
func (c AccessProfileType) ToPtr() *AccessProfileType {
	return &c
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ToPtr returns a *CreatedByType pointing to the current value.
func (c CreatedByType) ToPtr() *CreatedByType {
	return &c
}

// Distro - Represents a supported Fabric/Infra. (AKSEdge etc…).
type Distro string

const (
	DistroAKSEdge Distro = "AKSEdge"
)

// PossibleDistroValues returns the possible values for the Distro const type.
func PossibleDistroValues() []Distro {
	return []Distro{
		DistroAKSEdge,
	}
}

// ToPtr returns a *Distro pointing to the current value.
func (c Distro) ToPtr() *Distro {
	return &c
}

// Provider - Information about the connected appliance.
type Provider string

const (
	ProviderHCI    Provider = "HCI"
	ProviderSCVMM  Provider = "SCVMM"
	ProviderVMWare Provider = "VMWare"
)

// PossibleProviderValues returns the possible values for the Provider const type.
func PossibleProviderValues() []Provider {
	return []Provider{
		ProviderHCI,
		ProviderSCVMM,
		ProviderVMWare,
	}
}

// ToPtr returns a *Provider pointing to the current value.
func (c Provider) ToPtr() *Provider {
	return &c
}

// ResourceIdentityType - The identity type.
type ResourceIdentityType string

const (
	ResourceIdentityTypeNone           ResourceIdentityType = "None"
	ResourceIdentityTypeSystemAssigned ResourceIdentityType = "SystemAssigned"
)

// PossibleResourceIdentityTypeValues returns the possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{
		ResourceIdentityTypeNone,
		ResourceIdentityTypeSystemAssigned,
	}
}

// ToPtr returns a *ResourceIdentityType pointing to the current value.
func (c ResourceIdentityType) ToPtr() *ResourceIdentityType {
	return &c
}

// Status - Appliance’s health and state of connection to on-prem
type Status string

const (
	StatusConnected           Status = "Connected"
	StatusRunning             Status = "Running"
	StatusValidating          Status = "Validating"
	StatusWaitingForHeartbeat Status = "WaitingForHeartbeat"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusConnected,
		StatusRunning,
		StatusValidating,
		StatusWaitingForHeartbeat,
	}
}

// ToPtr returns a *Status pointing to the current value.
func (c Status) ToPtr() *Status {
	return &c
}
