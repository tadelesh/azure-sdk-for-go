//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsaas_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/saas/armsaas"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV1/SaaSGetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get saas operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV1/SaaSGetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsaas.AppOperationsResponseWithContinuation{
			Value: []*armsaas.AppOperation{
				{
					Name: to.Ptr("Microsoft.SaaS/register/action"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Register Saas resource provider in the tenant"),
						Operation:   to.Ptr("Register SaaS resource provider"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/saasresources/read"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Get all SaaS resources or one resource"),
						Operation:   to.Ptr("Get SaaS Resources"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/saasresources/write"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Create or Update a SaaS resource"),
						Operation:   to.Ptr("Create or Update a SaaS resource"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/saasresources/delete"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Delete a SaaS Resource"),
						Operation:   to.Ptr("Delete a SaaS Resource"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/resources/read"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Get one resource"),
						Operation:   to.Ptr("Get SaaS Subscription Level Resources"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Subscription Level Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/resources/write"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Create or Update a SaaS Subscription Level resource"),
						Operation:   to.Ptr("Create or Update a SaaS Subscription Level resource"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Subscription Level Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/resources/delete"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Delete a SaaS Subscription Level Resource"),
						Operation:   to.Ptr("Delete a SaaS Subscription Level Resource"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Subscription Level Resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SaaS/saasresources/listaccesstoken/action"),
					Display: &armsaas.AppOperationDisplay{
						Description: to.Ptr("Get the access Token for a SaaS resource"),
						Operation:   to.Ptr("Get the access Token"),
						Provider:    to.Ptr("Microsoft"),
						Resource:    to.Ptr("SaaS Resources"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppOperationsResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppOperationsResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV1/SaaSGetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_List(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV1/SaaSGetApplications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get saas application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewApplicationsClient("bc6c2f82-a39d-41b8-a648-71527498a23e", cred, &options)
	pager := client.List("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV1/SaaSGetApplications.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsaas.AppResponseWithContinuation{
			Value: []*armsaas.App{
				{
					Name:     to.Ptr("myapp"),
					Type:     to.Ptr("Microsoft.SaaS/applications"),
					ID:       to.Ptr("/subscriptions/bc6c2f82-a39d-41b8-a648-71527498a23e/resourceGroups/myResourceGroup/providers/Microsoft.SaaS/applications/myapp"),
					Location: to.Ptr("location"),
					Properties: &armsaas.AppProperties{
						SaasAppPlan: &armsaas.AppPlan{
							Name:      to.Ptr("myPlan1"),
							Product:   to.Ptr("myOffer"),
							Publisher: to.Ptr("contoso"),
						},
						Status: to.Ptr(armsaas.SaasAppStatusSubscribed),
					},
					Tags: map[string]*string{},
				},
				{
					Name:     to.Ptr("myapp"),
					Type:     to.Ptr("Microsoft.SaaS/applications"),
					ID:       to.Ptr("/subscriptions/bc6c2f82-a39d-41b8-a648-71527498a23e/resourceGroups/myResourceGroup/providers/Microsoft.SaaS/applications/myapp"),
					Location: to.Ptr("location"),
					Properties: &armsaas.AppProperties{
						SaasAppPlan: &armsaas.AppPlan{
							Name:      to.Ptr("myPlan2"),
							Product:   to.Ptr("myOffer"),
							Publisher: to.Ptr("contoso"),
						},
						Status: to.Ptr(armsaas.SaasAppStatusSubscribed),
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV1/SaaSGetApplications.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaaS_Delete(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewClient(cred, &options)
	poller, err := client.BeginDelete(ctx,
		"115c3523-1fae-757f-af86-7b27cfd29805",
		armsaas.DeleteOptions{
			ReasonCode:      to.Ptr[float32](0),
			UnsubscribeOnly: to.Ptr(true),
		},
		&armsaas.ClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasDelete.json: %v", err)
	}
}

func TestSaaS_GetResource(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewClient(cred, &options)
	res, err := client.GetResource(ctx,
		"115c3523-1fae-757f-af86-7b27cfd29805",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("diyakobo-transfer"),
			Type: to.Ptr("Microsoft.SaaS/saasresources"),
			ID:   to.Ptr("/providers/Microsoft.SaaS/saasresources/115c3523-1fae-757f-af86-7b27cfd29805"),
			Properties: &armsaas.ResourceProperties{
				OfferID: to.Ptr("microsofthealthcarebot"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
					"resourceId":          to.Ptr("b25dba9a-1bd7-4600-9447-3d27d11a6477"),
				},
				PublisherID:      to.Ptr("microsoft-hcb"),
				SaasResourceName: to.Ptr("diyakobo-transfer"),
				SKUID:            to.Ptr("free"),
				Created:          to.Ptr("2020-10-12T05:08:40.9235607Z"),
				IsFreeTrial:      to.Ptr(false),
				LastModified:     to.Ptr("2020-11-12T21:25:40.2736665Z"),
				Status:           to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2020-12-11T00:00:00Z"),
					StartDate: to.Ptr("2020-11-12T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaaS_UpdateResource(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewClient(cred, &options)
	poller, err := client.BeginUpdateResource(ctx,
		"115c3523-1fae-757f-af86-7b27cfd29805",
		armsaas.ResourceCreation{
			Properties: &armsaas.CreationProperties{
				SKUID: to.Ptr("premium"),
			},
			Tags: map[string]*string{},
		},
		&armsaas.ClientBeginUpdateResourceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("MyContosoSubscription"),
			Type: to.Ptr("Microsoft.SaaS/saasresources"),
			ID:   to.Ptr("/providers/Microsoft.SaaS/saasresources/115c3523-1fae-757f-af86-7b27cfd29805"),
			Properties: &armsaas.ResourceProperties{
				AutoRenew: to.Ptr(true),
				OfferID:   to.Ptr("contosoOffer"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("c825645b-e31b-9cf4-1cee-2aba9e58bc7c"),
					"resourceId":          to.Ptr("263ebe8c-3621-4ac0-a6ba-f1419bfb9166"),
				},
				PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
				PublisherID:        to.Ptr("microsoft-contoso"),
				SaasResourceName:   to.Ptr("MyContosoSubscription"),
				SKUID:              to.Ptr("premium"),
				Created:            to.Ptr("2021-01-01T08:30:10.1234567Z"),
				IsFreeTrial:        to.Ptr(false),
				LastModified:       to.Ptr("2020-01-01T08:35:05.7654321Z"),
				Status:             to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2021-02-31T00:00:00Z"),
					StartDate: to.Ptr("2021-01-01T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaaS_CreateResource(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewClient(cred, &options)
	poller, err := client.BeginCreateResource(ctx,
		armsaas.ResourceCreation{
			Properties: &armsaas.CreationProperties{
				OfferID: to.Ptr("microsofthealthcarebot"),
				PaymentChannelMetadata: map[string]*string{
					"AzureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
				},
				PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
				PublisherID:        to.Ptr("microsoft-hcb"),
				SaasResourceName:   to.Ptr("testRunnerFromArm"),
				SKUID:              to.Ptr("free"),
				TermID:             to.Ptr("hjdtn7tfnxcy"),
			},
		},
		&armsaas.ClientBeginCreateResourceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("diyakobo-transfer"),
			Type: to.Ptr("Microsoft.SaaS/saasresources"),
			ID:   to.Ptr("/providers/Microsoft.SaaS/saasresources/115c3523-1fae-757f-af86-7b27cfd29805"),
			Properties: &armsaas.ResourceProperties{
				OfferID: to.Ptr("microsofthealthcarebot"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
					"resourceId":          to.Ptr("b25dba9a-1bd7-4600-9447-3d27d11a6477"),
				},
				PublisherID:      to.Ptr("microsoft-hcb"),
				SaasResourceName: to.Ptr("diyakobo-transfer"),
				SKUID:            to.Ptr("free"),
				Created:          to.Ptr("2020-10-12T05:08:40.9235607Z"),
				IsFreeTrial:      to.Ptr(false),
				LastModified:     to.Ptr("2020-11-12T21:25:40.2736665Z"),
				Status:           to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2020-12-11T00:00:00Z"),
					StartDate: to.Ptr("2020-11-12T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaasPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasResources_List(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaaSGetAllResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all SaaS resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewResourcesClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaaSGetAllResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsaas.ResourceResponseWithContinuation{
			Value: []*armsaas.Resource{
				{
					Name: to.Ptr("diyakobo-transfer"),
					Type: to.Ptr("Microsoft.SaaS/saasresources"),
					ID:   to.Ptr("/providers/Microsoft.SaaS/saasresources/115c3523-1fae-757f-af86-7b27cfd29805"),
					Properties: &armsaas.ResourceProperties{
						OfferID: to.Ptr("microsofthealthcarebot"),
						PaymentChannelMetadata: map[string]*string{
							"azureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
							"resourceId":          to.Ptr("b25dba9a-1bd7-4600-9447-3d27d11a6477"),
						},
						PublisherID:      to.Ptr("microsoft-hcb"),
						SaasResourceName: to.Ptr("diyakobo-transfer"),
						SKUID:            to.Ptr("free"),
						Created:          to.Ptr("2020-10-12T05:08:40.9235607Z"),
						IsFreeTrial:      to.Ptr(false),
						LastModified:     to.Ptr("2020-11-12T21:25:40.2736665Z"),
						Status:           to.Ptr(armsaas.SaasResourceStatusSubscribed),
						Term: &armsaas.PropertiesTerm{
							EndDate:   to.Ptr("2020-12-11T00:00:00Z"),
							StartDate: to.Ptr("2020-11-12T00:00:00Z"),
							TermUnit:  to.Ptr("P1M"),
						},
					},
					Tags: map[string]*string{},
				},
				{
					Name: to.Ptr("test-transfer"),
					Type: to.Ptr("Microsoft.SaaS/saasresources"),
					ID:   to.Ptr("/providers/Microsoft.SaaS/saasresources/7a4a733c-2204-ee2c-2f51-47c2dfbcb7fd"),
					Properties: &armsaas.ResourceProperties{
						OfferID: to.Ptr("microsofthealthcarebot"),
						PaymentChannelMetadata: map[string]*string{
							"azureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
							"resourceId":          to.Ptr("f5816b76-67e3-45e1-b331-91fbb021e068"),
						},
						PublisherID:      to.Ptr("microsoft-hcb"),
						SaasResourceName: to.Ptr("test-transfer"),
						SKUID:            to.Ptr("free"),
						Created:          to.Ptr("2020-09-30T16:45:41.2981172Z"),
						IsFreeTrial:      to.Ptr(false),
						LastModified:     to.Ptr("2020-10-30T16:22:15.4319475Z"),
						Status:           to.Ptr(armsaas.SaasResourceStatusSubscribed),
						Term: &armsaas.PropertiesTerm{
							EndDate:   to.Ptr("2020-11-29T00:00:00Z"),
							StartDate: to.Ptr("2020-10-30T00:00:00Z"),
							TermUnit:  to.Ptr("P1M"),
						},
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/SaaSGetAllResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasResources_ListAccessToken(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/ListAccessTokenPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"generated SaaS resource token"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewResourcesClient(cred, &options)
	res, err := client.ListAccessToken(ctx,
		"c825645b-e31b-9cf4-1cee-2aba9e58bc7c",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/ListAccessTokenPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.AccessTokenResult{
			PublisherOfferBaseURI: to.Ptr("https://contoso.website.com/api/v1/marketplace/azure/common/auth"),
			Token:                 to.Ptr("jyhAtr3AiFTXO0QsEkYizsNzqIAUJ+E0M1SXhl4E5hwAl7+GJT6t+dEwuWpSizgR0Vn6dMhzpS94JRzkUh2Xuq5L1QDgmDkDUeIikTFNviwtwxtF8CwipcB49rq5d8whmVp0CmWEjd/FzU0vvlikBRuy+asxC1UhXv6XxBkSxkZKj29AAFiGgsgRvXIld47C"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessTokenResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessTokenResult)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasV2/ListAccessTokenPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_ListByAzureSubscription(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGetAllInAzureSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get subscription level saas resources in Azure subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	pager := client.ListByAzureSubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGetAllInAzureSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsaas.ResourceResponseWithContinuation{
			Value: []*armsaas.Resource{
				{
					Name: to.Ptr("MyContosoSubscription"),
					Type: to.Ptr("Microsoft.SaaS/resources"),
					ID:   to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/MyContosoSubscription"),
					Properties: &armsaas.ResourceProperties{
						AutoRenew: to.Ptr(true),
						OfferID:   to.Ptr("contosoOffer"),
						PaymentChannelMetadata: map[string]*string{
							"azureSubscriptionId": to.Ptr("c825645b-e31b-9cf4-1cee-2aba9e58bc7c"),
							"resourceId":          to.Ptr("263ebe8c-3621-4ac0-a6ba-f1419bfb9166"),
						},
						PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
						PublisherID:        to.Ptr("microsoft-contoso"),
						SaasResourceName:   to.Ptr("MyContosoSubscription"),
						SKUID:              to.Ptr("free"),
						Created:            to.Ptr("2021-01-01T08:30:10.1234567Z"),
						IsFreeTrial:        to.Ptr(false),
						LastModified:       to.Ptr("2020-01-01T08:35:05.7654321Z"),
						Status:             to.Ptr(armsaas.SaasResourceStatusSubscribed),
						Term: &armsaas.PropertiesTerm{
							EndDate:   to.Ptr("2021-02-31T00:00:00Z"),
							StartDate: to.Ptr("2021-01-01T00:00:00Z"),
							TermUnit:  to.Ptr("P1M"),
						},
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGetAllInAzureSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_ListByResourceGroup(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGetAllInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get subscription level saas resources in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	pager := client.ListByResourceGroup("my-saas-rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGetAllInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsaas.ResourceResponseWithContinuation{
			Value: []*armsaas.Resource{
				{
					Name: to.Ptr("MyContosoSubscription"),
					Type: to.Ptr("Microsoft.SaaS/resources"),
					ID:   to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/MyContosoSubscription"),
					Properties: &armsaas.ResourceProperties{
						AutoRenew: to.Ptr(true),
						OfferID:   to.Ptr("contosoOffer"),
						PaymentChannelMetadata: map[string]*string{
							"azureSubscriptionId": to.Ptr("c825645b-e31b-9cf4-1cee-2aba9e58bc7c"),
							"resourceId":          to.Ptr("263ebe8c-3621-4ac0-a6ba-f1419bfb9166"),
						},
						PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
						PublisherID:        to.Ptr("microsoft-contoso"),
						SaasResourceName:   to.Ptr("MyContosoSubscription"),
						SKUID:              to.Ptr("free"),
						Created:            to.Ptr("2021-01-01T08:30:10.1234567Z"),
						IsFreeTrial:        to.Ptr(false),
						LastModified:       to.Ptr("2020-01-01T08:35:05.7654321Z"),
						Status:             to.Ptr(armsaas.SaasResourceStatusSubscribed),
						Term: &armsaas.PropertiesTerm{
							EndDate:   to.Ptr("2021-02-31T00:00:00Z"),
							StartDate: to.Ptr("2021-01-01T00:00:00Z"),
							TermUnit:  to.Ptr("P1M"),
						},
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGetAllInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_Get(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get subscription level saas resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	res, err := client.Get(ctx,
		"my-saas-rg",
		"MyContosoSubscription",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("MyContosoSubscription"),
			Type: to.Ptr("Microsoft.SaaS/resources"),
			ID:   to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/MyContosoSubscription"),
			Properties: &armsaas.ResourceProperties{
				AutoRenew: to.Ptr(true),
				OfferID:   to.Ptr("contosoOffer"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("c825645b-e31b-9cf4-1cee-2aba9e58bc7c"),
					"resourceId":          to.Ptr("263ebe8c-3621-4ac0-a6ba-f1419bfb9166"),
				},
				PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
				PublisherID:        to.Ptr("microsoft-contoso"),
				SaasResourceName:   to.Ptr("MyContosoSubscription"),
				SKUID:              to.Ptr("free"),
				Created:            to.Ptr("2021-01-01T08:30:10.1234567Z"),
				IsFreeTrial:        to.Ptr(false),
				LastModified:       to.Ptr("2020-01-01T08:35:05.7654321Z"),
				Status:             to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2021-02-31T00:00:00Z"),
					StartDate: to.Ptr("2021-01-01T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_CreateOrUpdate(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create subscription level SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"my-saas-rg",
		"MyContosoSubscription",
		armsaas.ResourceCreation{
			Name:     to.Ptr("MyContosoSubscription"),
			Location: to.Ptr("global"),
			Properties: &armsaas.CreationProperties{
				OfferID: to.Ptr("contosoOffer"),
				PaymentChannelMetadata: map[string]*string{
					"AzureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
				},
				PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
				PublisherID:        to.Ptr("microsoft-contoso"),
				SaasResourceName:   to.Ptr("MyContosoSubscription"),
				SKUID:              to.Ptr("free"),
				TermID:             to.Ptr("hjdtn7tfnxcy"),
			},
		},
		&armsaas.SubscriptionLevelClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("MyContosoSubscription"),
			Type: to.Ptr("Microsoft.SaaS/resources"),
			ID:   to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/MyContosoSubscription"),
			Properties: &armsaas.ResourceProperties{
				AutoRenew: to.Ptr(true),
				OfferID:   to.Ptr("contosoOffer"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("c825645b-e31b-9cf4-1cee-2aba9e58bc7c"),
					"resourceId":          to.Ptr("263ebe8c-3621-4ac0-a6ba-f1419bfb9166"),
				},
				PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
				PublisherID:        to.Ptr("microsoft-contoso"),
				SaasResourceName:   to.Ptr("MyContosoSubscription"),
				SKUID:              to.Ptr("free"),
				Created:            to.Ptr("2021-01-01T08:30:10.1234567Z"),
				IsFreeTrial:        to.Ptr(false),
				LastModified:       to.Ptr("2020-01-01T08:35:05.7654321Z"),
				Status:             to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2021-02-31T00:00:00Z"),
					StartDate: to.Ptr("2021-01-01T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_Update(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update subscription level SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"my-saas-rg",
		"MyContosoSubscription",
		armsaas.ResourceCreation{
			Properties: &armsaas.CreationProperties{
				SKUID: to.Ptr("premium"),
			},
			Tags: map[string]*string{},
		},
		&armsaas.SubscriptionLevelClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("MyContosoSubscription"),
			Type: to.Ptr("Microsoft.SaaS/resources"),
			ID:   to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/MyContosoSubscription"),
			Properties: &armsaas.ResourceProperties{
				AutoRenew: to.Ptr(true),
				OfferID:   to.Ptr("contosoOffer"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("c825645b-e31b-9cf4-1cee-2aba9e58bc7c"),
					"resourceId":          to.Ptr("263ebe8c-3621-4ac0-a6ba-f1419bfb9166"),
				},
				PaymentChannelType: to.Ptr(armsaas.PaymentChannelTypeSubscriptionDelegated),
				PublisherID:        to.Ptr("microsoft-contoso"),
				SaasResourceName:   to.Ptr("MyContosoSubscription"),
				SKUID:              to.Ptr("free"),
				Created:            to.Ptr("2021-01-01T08:30:10.1234567Z"),
				IsFreeTrial:        to.Ptr(false),
				LastModified:       to.Ptr("2020-01-01T08:35:05.7654321Z"),
				Status:             to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2021-02-31T00:00:00Z"),
					StartDate: to.Ptr("2021-01-01T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_Delete(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Subscription Level SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"my-saas-rg",
		"MyContosoSubscription",
		&armsaas.SubscriptionLevelClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasDelete.json: %v", err)
	}
}

func TestSaasSubscriptionLevel_UpdateToUnsubscribed(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasUnsubscribe.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Unsubscribe Subscription Level SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	poller, err := client.BeginUpdateToUnsubscribed(ctx,
		"my-saas-rg",
		"MyContosoSubscription",
		armsaas.DeleteOptions{
			Feedback:        to.Ptr("No longer need this SaaS"),
			ReasonCode:      to.Ptr[float32](0),
			UnsubscribeOnly: to.Ptr(true),
		},
		&armsaas.SubscriptionLevelClientBeginUpdateToUnsubscribedOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasUnsubscribe.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/SaasUnsubscribe.json: %v", err)
	}
}

func TestSaasSubscriptionLevel_ListAccessToken(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ListAccessTokenPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List subscription level SaaS resource access token"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	res, err := client.ListAccessToken(ctx,
		"my-saas-rg",
		"MyContosoSubscription",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ListAccessTokenPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.AccessTokenResult{
			PublisherOfferBaseURI: to.Ptr("https://contoso.website.com/api/v1/marketplace/azure/common/auth"),
			Token:                 to.Ptr("jyhAtr3AiFTXO0QsEkYizsNzqIAUJ+E0M1SXhl4E5hwAl7+GJT6t+dEwuWpSizgR0Vn6dMhzpS94JRzkUh2Xuq5L1QDgmDkDUeIikTFNviwtwxtF8CwipcB49rq5d8whmVp0CmWEjd/FzU0vvlikBRuy+asxC1UhXv6XxBkSxkZKj29AAFiGgsgRvXIld47C"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessTokenResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessTokenResult)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ListAccessTokenPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSaasSubscriptionLevel_ValidateMoveResources(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ValidateResourceMove.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate move of a subscription Level SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	_, err := client.ValidateMoveResources(ctx,
		"my-saas-rg",
		armsaas.MoveResource{
			Resources: []*string{
				to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/saas1"),
				to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/saas2"),
				to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/saas3")},
			TargetResourceGroup: to.Ptr("/subscriptions/5122d0a3-1e10-4baf-bdc5-c2a452489525/resourceGroups/new-saas-rg"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ValidateResourceMove.json: %v", err)
	}
}

func TestSaasSubscriptionLevel_MoveResources(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ResourceMove.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Move of a subscription Level SaaS resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewSubscriptionLevelClient("c825645b-e31b-9cf4-1cee-2aba9e58bc7c", cred, &options)
	poller, err := client.BeginMoveResources(ctx,
		"my-saas-rg",
		armsaas.MoveResource{
			Resources: []*string{
				to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/saas1"),
				to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/saas2"),
				to.Ptr("/subscriptions/c825645b-e31b-9cf4-1cee-2aba9e58bc7c/resourceGroups/my-saas-rg/providers/Microsoft.SaaS/resources/saas3")},
			TargetResourceGroup: to.Ptr("/subscriptions/5122d0a3-1e10-4baf-bdc5-c2a452489525/resourceGroups/new-saas-rg"),
		},
		&armsaas.SubscriptionLevelClientBeginMoveResourcesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ResourceMove.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/saasSubscriptionLevel/ResourceMove.json: %v", err)
	}
}

func TestSaaSOperation_Get(t *testing.T) {
	// From example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/OperationResults/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get operation status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsaas.NewOperationClient(cred, &options)
	poller, err := client.BeginGet(ctx,
		"5f35cb4c-8065-45b3-9116-5ba335462e95",
		&armsaas.OperationClientBeginGetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/OperationResults/Get.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/OperationResults/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsaas.Resource{
			Name: to.Ptr("diyakobo-transfer"),
			Type: to.Ptr("Microsoft.SaaS/saasresources"),
			ID:   to.Ptr("/providers/Microsoft.SaaS/saasresources/115c3523-1fae-757f-af86-7b27cfd29805"),
			Properties: &armsaas.ResourceProperties{
				OfferID: to.Ptr("microsofthealthcarebot"),
				PaymentChannelMetadata: map[string]*string{
					"azureSubscriptionId": to.Ptr("155af98a-3205-47e7-883b-a2ab9db9f88d"),
					"resourceId":          to.Ptr("b25dba9a-1bd7-4600-9447-3d27d11a6477"),
				},
				PublisherID:      to.Ptr("microsoft-hcb"),
				SaasResourceName: to.Ptr("diyakobo-transfer"),
				SKUID:            to.Ptr("free"),
				Created:          to.Ptr("2020-10-12T05:08:40.9235607Z"),
				IsFreeTrial:      to.Ptr(false),
				LastModified:     to.Ptr("2020-11-12T21:25:40.2736665Z"),
				Status:           to.Ptr(armsaas.SaasResourceStatusSubscribed),
				Term: &armsaas.PropertiesTerm{
					EndDate:   to.Ptr("2020-12-11T00:00:00Z"),
					StartDate: to.Ptr("2020-11-12T00:00:00Z"),
					TermUnit:  to.Ptr("P1M"),
				},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Resource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Resource)
			t.Fatalf("Mock response is not equal to example response for example specification/saas/resource-manager/Microsoft.SaaS/preview/2018-03-01-beta/examples/OperationResults/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
