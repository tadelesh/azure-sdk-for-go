//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorageimportexport_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storageimportexport/armstorageimportexport"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestLocations_List(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List locations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewLocationsClient(nil, cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListLocations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorageimportexport.LocationsResponse{
			Value: []*armstorageimportexport.Location{
				{
					Name: to.Ptr("Australia East"),
					Type: to.Ptr("Microsoft.ImportExport/locations"),
					ID:   to.Ptr("/providers/Microsoft.ImportExport/locations/australiaeast"),
					Properties: &armstorageimportexport.LocationProperties{
						AdditionalShippingInformation: to.Ptr(""),
						AlternateLocations: []*string{
							to.Ptr("/providers/Microsoft.ImportExport/locations/australiaeast")},
						City:            to.Ptr("Macquarie Park"),
						CountryOrRegion: to.Ptr("Australia"),
						Phone:           to.Ptr("612 0000 0000"),
						PostalCode:      to.Ptr("2113"),
						RecipientName:   to.Ptr("Windows Azure Import/Export Service"),
						StateOrProvince: to.Ptr("NSW"),
						StreetAddress1:  to.Ptr("Customer-A c/o NEXTDC Ltd, Delivery code ABCDEFG, 4 Eden Park Drive"),
						StreetAddress2:  to.Ptr(""),
						SupportedCarriers: []*string{
							to.Ptr("DHL")},
					},
				},
				{
					Name: to.Ptr("Australia Southeast"),
					Type: to.Ptr("Microsoft.ImportExport/locations"),
					ID:   to.Ptr("/providers/Microsoft.ImportExport/locations/australiasoutheast"),
					Properties: &armstorageimportexport.LocationProperties{
						AdditionalShippingInformation: to.Ptr(""),
						AlternateLocations: []*string{
							to.Ptr("/providers/Microsoft.ImportExport/locations/australiasoutheast")},
						City:            to.Ptr("Melbourne"),
						CountryOrRegion: to.Ptr("Australia"),
						Phone:           to.Ptr("61 0 0000 0000"),
						PostalCode:      to.Ptr("3207"),
						RecipientName:   to.Ptr("Microsoft Azure Import/Export Service"),
						StateOrProvince: to.Ptr("Melbourne"),
						StreetAddress1:  to.Ptr("Microsoft, c/o NEXTDC Ltd, Delivery code ABCDEFG, 826-830 Lorimer St, Port"),
						StreetAddress2:  to.Ptr(""),
						SupportedCarriers: []*string{
							to.Ptr("DHL")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocationsResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocationsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_Get(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get locations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewLocationsClient(nil, cred, &options)
	res, err := client.Get(ctx,
		"West US",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.Location{
			Name: to.Ptr("West US"),
			Type: to.Ptr("Microsoft.ImportExport/locations"),
			ID:   to.Ptr("/providers/Microsoft.ImportExport/locations/westus"),
			Properties: &armstorageimportexport.LocationProperties{
				AdditionalShippingInformation: to.Ptr(""),
				AlternateLocations: []*string{
					to.Ptr("/providers/Microsoft.ImportExport/locations/westus")},
				City:            to.Ptr("Santa Clara"),
				CountryOrRegion: to.Ptr("USA"),
				Phone:           to.Ptr("408 352 7600"),
				PostalCode:      to.Ptr("95050"),
				RecipientName:   to.Ptr("Microsoft Azure Import/Export Service"),
				StateOrProvince: to.Ptr("CA"),
				StreetAddress1:  to.Ptr("2045 Lafayette Street"),
				StreetAddress2:  to.Ptr(""),
				SupportedCarriers: []*string{
					to.Ptr("FedEx")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Location) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Location)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_ListBySubscription(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListJobsInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List jobs in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	pager := client.ListBySubscription(&armstorageimportexport.JobsClientListBySubscriptionOptions{Top: nil,
		Filter: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListJobsInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorageimportexport.ListJobsResponse{
			Value: []*armstorageimportexport.JobResponse{
				{
					Name: to.Ptr("test-bn1-import-cpu100-01"),
					Type: to.Ptr("Microsoft.ImportExport/jobs"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/testrg/providers/Microsoft.ImportExport/jobs/test-bn1-import-cpu100-01"),
					Identity: &armstorageimportexport.IdentityDetails{
						Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
					},
					Location: to.Ptr("East US 2"),
					Properties: &armstorageimportexport.JobDetails{
						BackupDriveManifest: to.Ptr(true),
						CancelRequested:     to.Ptr(false),
						DeliveryPackage: &armstorageimportexport.DeliveryPackageInformation{
							CarrierName:    to.Ptr("FedEx"),
							DriveCount:     to.Ptr[int64](1),
							ShipDate:       to.Ptr("8/11/2017 9:05:00 PM"),
							TrackingNumber: to.Ptr("992016102507"),
						},
						DiagnosticsPath: to.Ptr("waimportexport"),
						DriveList: []*armstorageimportexport.DriveStatus{
							{
								DriveID:      to.Ptr("7PHR882C"),
								ManifestFile: to.Ptr("\\DriveManifest.xml"),
								ManifestHash: to.Ptr("E5D632DB047C74B3B17C8F3359950ADB"),
								State:        to.Ptr(armstorageimportexport.DriveStateReceived),
							}},
						EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
							KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
						},
						JobType:           to.Ptr("Import"),
						LogLevel:          to.Ptr("Verbose"),
						ProvisioningState: to.Ptr("Succeeded"),
						ReturnAddress: &armstorageimportexport.ReturnAddress{
							City:            to.Ptr("city"),
							CountryOrRegion: to.Ptr("USA"),
							Email:           to.Ptr("test@contoso.com"),
							Phone:           to.Ptr("425000000"),
							PostalCode:      to.Ptr("98007"),
							RecipientName:   to.Ptr("La"),
							StateOrProvince: to.Ptr("wa"),
							StreetAddress1:  to.Ptr("Street1"),
							StreetAddress2:  to.Ptr("street2"),
						},
						ReturnShipping: &armstorageimportexport.ReturnShipping{
							CarrierAccountNumber: to.Ptr("989ffff"),
							CarrierName:          to.Ptr("FedEx"),
						},
						ShippingInformation: &armstorageimportexport.ShippingInformation{
							AdditionalInformation: to.Ptr(""),
							City:                  to.Ptr("Boydton"),
							CountryOrRegion:       to.Ptr("USA"),
							Phone:                 to.Ptr("+1-434-738-9443"),
							PostalCode:            to.Ptr("23917"),
							RecipientName:         to.Ptr("Windows Azure Import Export Service"),
							StateOrProvince:       to.Ptr("VA"),
							StreetAddress1:        to.Ptr("Boydton 1 / BLDG # 1 101 Herbert Drive"),
							StreetAddress2:        to.Ptr(""),
						},
						State:            to.Ptr("Received"),
						StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/testrg/providers/Microsoft.Storage/storageAccounts/xtprodtestarmos2"),
					},
					SystemData: &armstorageimportexport.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("test-bn1-import-cpu100-02"),
					Type: to.Ptr("Microsoft.ImportExport/jobs"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/testrg/providers/Microsoft.ImportExport/jobs/test-bn1-import-cpu100-02"),
					Identity: &armstorageimportexport.IdentityDetails{
						Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
					},
					Location: to.Ptr("East US 2"),
					Properties: &armstorageimportexport.JobDetails{
						BackupDriveManifest: to.Ptr(true),
						CancelRequested:     to.Ptr(false),
						DeliveryPackage: &armstorageimportexport.DeliveryPackageInformation{
							CarrierName:    to.Ptr("FedEx"),
							DriveCount:     to.Ptr[int64](1),
							ShipDate:       to.Ptr("8/13/2017 7:32:23 PM"),
							TrackingNumber: to.Ptr("992016102508"),
						},
						DiagnosticsPath: to.Ptr("waimportexport"),
						DriveList: []*armstorageimportexport.DriveStatus{
							{
								CopyStatus:    to.Ptr("InProgress"),
								DriveID:       to.Ptr("KV6H86XP"),
								ErrorLogURI:   to.Ptr("https://foo.blob.core.windows.net/waimportexport/waies/test-bn1-import-cpu100-02_KV6H86XP_20170813-194620-021_error.xml"),
								ManifestFile:  to.Ptr("\\DriveManifest.xml"),
								ManifestHash:  to.Ptr("F6A488A65AF0CCA7D050B7F9F43A197C"),
								ManifestURI:   to.Ptr("https://foo.blob.core.windows.net/waimportexport/waies/test-bn1-import-cpu100-02_KV6H86XP_20170813-194620-574_manifest.xml"),
								State:         to.Ptr(armstorageimportexport.DriveStateCompletedMoreInfo),
								VerboseLogURI: to.Ptr("https://foo.blob.core.windows.net/waimportexport/waies/test-bn1-import-cpu100-02_KV6H86XP_20170813-194618-350_verbose.xml"),
							}},
						EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
							KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
						},
						JobType:           to.Ptr("Import"),
						LogLevel:          to.Ptr("Verbose"),
						PercentComplete:   to.Ptr[int64](6),
						ProvisioningState: to.Ptr("Succeeded"),
						ReturnAddress: &armstorageimportexport.ReturnAddress{
							City:            to.Ptr("city"),
							CountryOrRegion: to.Ptr("USA"),
							Email:           to.Ptr("test@contoso.com"),
							Phone:           to.Ptr("4256150991"),
							PostalCode:      to.Ptr("98007"),
							RecipientName:   to.Ptr("La"),
							StateOrProvince: to.Ptr("wa"),
							StreetAddress1:  to.Ptr("Street1"),
							StreetAddress2:  to.Ptr("street2"),
						},
						ShippingInformation: &armstorageimportexport.ShippingInformation{
							AdditionalInformation: to.Ptr(""),
							City:                  to.Ptr("Boydton"),
							CountryOrRegion:       to.Ptr("USA"),
							Phone:                 to.Ptr("+1-434-738-9443"),
							PostalCode:            to.Ptr("23917"),
							RecipientName:         to.Ptr("Windows Azure Import Export Service"),
							StateOrProvince:       to.Ptr("VA"),
							StreetAddress1:        to.Ptr("Boydton 1 / BLDG # 1 101 Herbert Drive"),
							StreetAddress2:        to.Ptr(""),
						},
						State:            to.Ptr("Transferring"),
						StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/testrg/providers/Microsoft.Storage/storageAccounts/xtprodtestarmos2"),
					},
					SystemData: &armstorageimportexport.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListJobsResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListJobsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListJobsInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_ListByResourceGroup(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListJobsInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List jobs in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armstorageimportexport.JobsClientListByResourceGroupOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListJobsInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorageimportexport.ListJobsResponse{
			Value: []*armstorageimportexport.JobResponse{
				{
					Name: to.Ptr("test-by1-ssd-2"),
					Type: to.Ptr("Microsoft.ImportExport/jobs"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/test-by1-ssd-2"),
					Identity: &armstorageimportexport.IdentityDetails{
						Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
					},
					Location: to.Ptr("West US"),
					Properties: &armstorageimportexport.JobDetails{
						BackupDriveManifest: to.Ptr(true),
						CancelRequested:     to.Ptr(false),
						DeliveryPackage: &armstorageimportexport.DeliveryPackageInformation{
							CarrierName:    to.Ptr("FedEx"),
							DriveCount:     to.Ptr[int64](1),
							ShipDate:       to.Ptr("9/29/2017 10:28:35 PM"),
							TrackingNumber: to.Ptr("787895108176"),
						},
						DiagnosticsPath: to.Ptr("waimportexport"),
						EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
							KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
						},
						JobType:           to.Ptr("Import"),
						LogLevel:          to.Ptr("Verbose"),
						ProvisioningState: to.Ptr("Succeeded"),
						ReturnAddress: &armstorageimportexport.ReturnAddress{
							City:            to.Ptr("Redmond"),
							CountryOrRegion: to.Ptr("USA"),
							Email:           to.Ptr("test@contoso.com"),
							Phone:           to.Ptr("4250000000"),
							PostalCode:      to.Ptr("98007"),
							RecipientName:   to.Ptr("La"),
							StateOrProvince: to.Ptr("wa"),
							StreetAddress1:  to.Ptr("Street1"),
							StreetAddress2:  to.Ptr("street2"),
						},
						ReturnShipping: &armstorageimportexport.ReturnShipping{
							CarrierAccountNumber: to.Ptr("989ffff"),
							CarrierName:          to.Ptr("FedEx"),
						},
						ShippingInformation: &armstorageimportexport.ShippingInformation{
							AdditionalInformation: to.Ptr(""),
							City:                  to.Ptr("Santa Clara"),
							CountryOrRegion:       to.Ptr("USA"),
							Phone:                 to.Ptr("408 352 7600"),
							PostalCode:            to.Ptr("95050"),
							RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
							StateOrProvince:       to.Ptr("CA"),
							StreetAddress1:        to.Ptr("2045 Lafayette Street"),
							StreetAddress2:        to.Ptr(""),
						},
						State:            to.Ptr("Received"),
						StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/xtprodtestwu"),
					},
					SystemData: &armstorageimportexport.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListJobsResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListJobsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListJobsInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetExportJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get export job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	res, err := client.Get(ctx,
		"myJob",
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetExportJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.JobResponse{
			Name: to.Ptr("myJob"),
			Type: to.Ptr("Microsoft.ImportExport/jobs"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/test"),
			Identity: &armstorageimportexport.IdentityDetails{
				Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
			},
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				CancelRequested:     to.Ptr(false),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				DriveList:           []*armstorageimportexport.DriveStatus{},
				EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
					KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
				},
				Export: &armstorageimportexport.Export{
					BlobList: &armstorageimportexport.ExportBlobList{
						BlobPathPrefix: []*string{
							to.Ptr("/")},
					},
				},
				JobType:           to.Ptr("Export"),
				LogLevel:          to.Ptr("Verbose"),
				ProvisioningState: to.Ptr("Succeeded"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				ShippingInformation: &armstorageimportexport.ShippingInformation{
					AdditionalInformation: to.Ptr(""),
					City:                  to.Ptr("Santa Clara"),
					CountryOrRegion:       to.Ptr("USA"),
					Phone:                 to.Ptr("408 0000 0000"),
					PostalCode:            to.Ptr("95050"),
					RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
					StateOrProvince:       to.Ptr("CA"),
					StreetAddress1:        to.Ptr("2045 Lafayette Street"),
					StreetAddress2:        to.Ptr(""),
				},
				State:            to.Ptr("Creating"),
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
			SystemData: &armstorageimportexport.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetExportJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get import job"},
	})
	client = armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	res, err = client.Get(ctx,
		"myJob",
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.JobResponse{
			Name: to.Ptr("myJob"),
			Type: to.Ptr("Microsoft.ImportExport/jobs"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/test"),
			Identity: &armstorageimportexport.IdentityDetails{
				Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
			},
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				CancelRequested:     to.Ptr(false),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				DriveList: []*armstorageimportexport.DriveStatus{
					{
						DriveHeaderHash: to.Ptr(""),
						DriveID:         to.Ptr("9CA995BB"),
						ManifestFile:    to.Ptr("\\DriveManifest.xml"),
						ManifestHash:    to.Ptr("109B21108597EF36D5785F08303F3638"),
						State:           to.Ptr(armstorageimportexport.DriveStateSpecified),
					}},
				EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
					KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
				},
				JobType:           to.Ptr("Import"),
				LogLevel:          to.Ptr("Verbose"),
				ProvisioningState: to.Ptr("Succeeded"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				ShippingInformation: &armstorageimportexport.ShippingInformation{
					AdditionalInformation: to.Ptr(""),
					City:                  to.Ptr("Santa Clara"),
					CountryOrRegion:       to.Ptr("USA"),
					Phone:                 to.Ptr("408 0000 0000"),
					PostalCode:            to.Ptr("95050"),
					RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
					StateOrProvince:       to.Ptr("CA"),
					StreetAddress1:        to.Ptr("2045 Lafayette Street"),
					StreetAddress2:        to.Ptr(""),
				},
				State:            to.Ptr("Creating"),
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
			SystemData: &armstorageimportexport.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/GetJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Update(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/UpdateExportJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update export job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	res, err := client.Update(ctx,
		"myExportJob",
		"myResourceGroup",
		armstorageimportexport.UpdateJobParameters{
			Properties: &armstorageimportexport.UpdateJobParametersProperties{
				BackupDriveManifest: to.Ptr(true),
				LogLevel:            to.Ptr("Verbose"),
				State:               to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/UpdateExportJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.JobResponse{
			Name: to.Ptr("myExportJob"),
			Type: to.Ptr("Microsoft.ImportExport/jobs"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myExportJob"),
			Identity: &armstorageimportexport.IdentityDetails{
				Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
			},
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				CancelRequested:     to.Ptr(false),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
					KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
				},
				Export: &armstorageimportexport.Export{
					BlobList: &armstorageimportexport.ExportBlobList{
						BlobPathPrefix: []*string{
							to.Ptr("/")},
					},
				},
				JobType:           to.Ptr("Export"),
				LogLevel:          to.Ptr("Verbose"),
				ProvisioningState: to.Ptr("Succeeded"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				ShippingInformation: &armstorageimportexport.ShippingInformation{
					AdditionalInformation: to.Ptr(""),
					City:                  to.Ptr("Santa Clara"),
					CountryOrRegion:       to.Ptr("USA"),
					Phone:                 to.Ptr("408 352 7600"),
					PostalCode:            to.Ptr("95050"),
					RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
					StateOrProvince:       to.Ptr("CA"),
					StreetAddress1:        to.Ptr("2045 Lafayette Street"),
					StreetAddress2:        to.Ptr(""),
				},
				State:            to.Ptr("Creating"),
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
			SystemData: &armstorageimportexport.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/UpdateExportJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/UpdateJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update import job"},
	})
	client = armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	res, err = client.Update(ctx,
		"myJob",
		"myResourceGroup",
		armstorageimportexport.UpdateJobParameters{
			Properties: &armstorageimportexport.UpdateJobParametersProperties{
				BackupDriveManifest: to.Ptr(true),
				LogLevel:            to.Ptr("Verbose"),
				State:               to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/UpdateJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.JobResponse{
			Name: to.Ptr("myJob"),
			Type: to.Ptr("Microsoft.ImportExport/jobs"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myJob"),
			Identity: &armstorageimportexport.IdentityDetails{
				Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
			},
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				CancelRequested:     to.Ptr(false),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				DriveList: []*armstorageimportexport.DriveStatus{
					{
						DriveHeaderHash: to.Ptr("0:1048576:FB6B6ED500D49DA6E0D723C98D42C657F2881CC13357C28DCECA6A524F1292501571A321238540E621AB5BD9C9A32637615919A75593E6CB5C1515DAE341CABF;135266304:143360:C957A189AFC38C4E80731252301EB91427CE55E61448FA3C73C6FDDE70ABBC197947EC8D0249A2C639BB10B95957D5820A4BE8DFBBF76FFFA688AE5CE0D42EC3"),
						DriveID:         to.Ptr("9CA995BB"),
						ManifestFile:    to.Ptr("\\8a0c23f7-14b7-470a-9633-fcd46590a1bc.manifest"),
						ManifestHash:    to.Ptr("4228EC5D8E048CB9B515338C789314BE8D0B2FDBC7C7A0308E1C826242CDE74E"),
						State:           to.Ptr(armstorageimportexport.DriveStateSpecified),
					}},
				EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
					KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
				},
				JobType:           to.Ptr("Import"),
				LogLevel:          to.Ptr("Verbose"),
				ProvisioningState: to.Ptr("Succeeded"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				ShippingInformation: &armstorageimportexport.ShippingInformation{
					AdditionalInformation: to.Ptr(""),
					City:                  to.Ptr("Santa Clara"),
					CountryOrRegion:       to.Ptr("USA"),
					Phone:                 to.Ptr("408 352 7600"),
					PostalCode:            to.Ptr("95050"),
					RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
					StateOrProvince:       to.Ptr("CA"),
					StreetAddress1:        to.Ptr("2045 Lafayette Street"),
					StreetAddress2:        to.Ptr(""),
				},
				State:            to.Ptr("Creating"),
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
			SystemData: &armstorageimportexport.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/UpdateJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Create(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/CreateExportJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create export job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	res, err := client.Create(ctx,
		"myExportJob",
		"myResourceGroup",
		armstorageimportexport.PutJobParameters{
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				Export: &armstorageimportexport.Export{
					BlobList: &armstorageimportexport.ExportBlobList{
						BlobPathPrefix: []*string{
							to.Ptr("/")},
					},
				},
				JobType:  to.Ptr("Export"),
				LogLevel: to.Ptr("Verbose"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
		},
		&armstorageimportexport.JobsClientCreateOptions{ClientTenantID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/CreateExportJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.JobResponse{
			Name: to.Ptr("myExportJob"),
			Type: to.Ptr("Microsoft.ImportExport/jobs"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myExportJob"),
			Identity: &armstorageimportexport.IdentityDetails{
				Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
			},
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				CancelRequested:     to.Ptr(false),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
					KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
				},
				Export: &armstorageimportexport.Export{
					BlobList: &armstorageimportexport.ExportBlobList{
						BlobPathPrefix: []*string{
							to.Ptr("/")},
					},
				},
				JobType:           to.Ptr("Export"),
				LogLevel:          to.Ptr("Verbose"),
				ProvisioningState: to.Ptr("Succeeded"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				ShippingInformation: &armstorageimportexport.ShippingInformation{
					AdditionalInformation: to.Ptr(""),
					City:                  to.Ptr("Santa Clara"),
					CountryOrRegion:       to.Ptr("USA"),
					Phone:                 to.Ptr("408 0000 0000"),
					PostalCode:            to.Ptr("95050"),
					RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
					StateOrProvince:       to.Ptr("CA"),
					StreetAddress1:        to.Ptr("2045 Lafayette Street"),
					StreetAddress2:        to.Ptr(""),
				},
				State:            to.Ptr("Creating"),
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
			SystemData: &armstorageimportexport.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/CreateExportJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/CreateJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create import job"},
	})
	client = armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	res, err = client.Create(ctx,
		"myJob",
		"myResourceGroup",
		armstorageimportexport.PutJobParameters{
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				DriveList: []*armstorageimportexport.DriveStatus{
					{
						BitLockerKey:    to.Ptr("238810-662376-448998-450120-652806-203390-606320-483076"),
						DriveHeaderHash: to.Ptr("0:1048576:FB6B6ED500D49DA6E0D723C98D42C657F2881CC13357C28DCECA6A524F1292501571A321238540E621AB5BD9C9A32637615919A75593E6CB5C1515DAE341CABF;135266304:143360:C957A189AFC38C4E80731252301EB91427CE55E61448FA3C73C6FDDE70ABBC197947EC8D0249A2C639BB10B95957D5820A4BE8DFBBF76FFFA688AE5CE0D42EC3"),
						DriveID:         to.Ptr("9CA995BB"),
						ManifestFile:    to.Ptr("\\8a0c23f7-14b7-470a-9633-fcd46590a1bc.manifest"),
						ManifestHash:    to.Ptr("4228EC5D8E048CB9B515338C789314BE8D0B2FDBC7C7A0308E1C826242CDE74E"),
					}},
				JobType:  to.Ptr("Import"),
				LogLevel: to.Ptr("Verbose"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
		},
		&armstorageimportexport.JobsClientCreateOptions{ClientTenantID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/CreateJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstorageimportexport.JobResponse{
			Name: to.Ptr("myJob"),
			Type: to.Ptr("Microsoft.ImportExport/jobs"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myJob"),
			Identity: &armstorageimportexport.IdentityDetails{
				Type: to.Ptr(armstorageimportexport.IdentityTypeNone),
			},
			Location: to.Ptr("West US"),
			Properties: &armstorageimportexport.JobDetails{
				BackupDriveManifest: to.Ptr(true),
				CancelRequested:     to.Ptr(false),
				DiagnosticsPath:     to.Ptr("waimportexport"),
				DriveList: []*armstorageimportexport.DriveStatus{
					{
						DriveHeaderHash: to.Ptr("0:1048576:FB6B6ED500D49DA6E0D723C98D42C657F2881CC13357C28DCECA6A524F1292501571A321238540E621AB5BD9C9A32637615919A75593E6CB5C1515DAE341CABF;135266304:143360:C957A189AFC38C4E80731252301EB91427CE55E61448FA3C73C6FDDE70ABBC197947EC8D0249A2C639BB10B95957D5820A4BE8DFBBF76FFFA688AE5CE0D42EC3"),
						DriveID:         to.Ptr("9CA995BB"),
						ManifestFile:    to.Ptr("\\8a0c23f7-14b7-470a-9633-fcd46590a1bc.manifest"),
						ManifestHash:    to.Ptr("4228EC5D8E048CB9B515338C789314BE8D0B2FDBC7C7A0308E1C826242CDE74E"),
						State:           to.Ptr(armstorageimportexport.DriveStateSpecified),
					}},
				EncryptionKey: &armstorageimportexport.EncryptionKeyDetails{
					KekType: to.Ptr(armstorageimportexport.EncryptionKekTypeMicrosoftManaged),
				},
				JobType:           to.Ptr("Import"),
				LogLevel:          to.Ptr("Verbose"),
				ProvisioningState: to.Ptr("Succeeded"),
				ReturnAddress: &armstorageimportexport.ReturnAddress{
					City:            to.Ptr("Redmond"),
					CountryOrRegion: to.Ptr("USA"),
					Email:           to.Ptr("Test@contoso.com"),
					Phone:           to.Ptr("4250000000"),
					PostalCode:      to.Ptr("98007"),
					RecipientName:   to.Ptr("Test"),
					StateOrProvince: to.Ptr("wa"),
					StreetAddress1:  to.Ptr("Street1"),
					StreetAddress2:  to.Ptr("street2"),
				},
				ReturnShipping: &armstorageimportexport.ReturnShipping{
					CarrierAccountNumber: to.Ptr("989ffff"),
					CarrierName:          to.Ptr("FedEx"),
				},
				ShippingInformation: &armstorageimportexport.ShippingInformation{
					AdditionalInformation: to.Ptr(""),
					City:                  to.Ptr("Santa Clara"),
					CountryOrRegion:       to.Ptr("USA"),
					Phone:                 to.Ptr("408 0000 0000"),
					PostalCode:            to.Ptr("95050"),
					RecipientName:         to.Ptr("Microsoft Azure Import/Export Service"),
					StateOrProvince:       to.Ptr("CA"),
					StreetAddress1:        to.Ptr("2045 Lafayette Street"),
					StreetAddress2:        to.Ptr(""),
				},
				State:            to.Ptr("Creating"),
				StorageAccountID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test"),
			},
			SystemData: &armstorageimportexport.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armstorageimportexport.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armstorageimportexport.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/CreateJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Delete(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/DeleteJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewJobsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	_, err := client.Delete(ctx,
		"myJob",
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/DeleteJob.json: %v", err)
	}
}

func TestBitLockerKeys_List(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListBitLockerKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List BitLocker Keys for drives in a job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewBitLockerKeysClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil, cred, &options)
	pager := client.List("myJob",
		"myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListBitLockerKeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorageimportexport.GetBitLockerKeysResponse{
			Value: []*armstorageimportexport.DriveBitLockerKey{
				{
					BitLockerKey: to.Ptr("000000-000000-111111-222222-333333-444444-555555-666666"),
					DriveID:      to.Ptr("9CA995BB"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GetBitLockerKeysResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GetBitLockerKeysResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListBitLockerKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstorageimportexport.NewOperationsClient(nil, cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstorageimportexport.ListOperationsResponse{
			Value: []*armstorageimportexport.Operation{
				{
					Name: to.Ptr("Microsoft.ImportExport/locations/read"),
					Display: &armstorageimportexport.OperationDisplay{
						Description: to.Ptr("Gets the properties for the specified location or returns the list of locations."),
						Operation:   to.Ptr("Get or List Locations"),
						Provider:    to.Ptr("Microsoft Import/Export"),
						Resource:    to.Ptr("Locations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ImportExport/jobs/write"),
					Display: &armstorageimportexport.OperationDisplay{
						Description: to.Ptr("Creates a job with the specified parameters or update the properties or tags for the specified job."),
						Operation:   to.Ptr("Create or Update Job"),
						Provider:    to.Ptr("Microsoft Import/Export"),
						Resource:    to.Ptr("Jobs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ImportExport/jobs/read"),
					Display: &armstorageimportexport.OperationDisplay{
						Description: to.Ptr("Gets the properties for the specified job or returns the list of jobs."),
						Operation:   to.Ptr("Get or List Jobs"),
						Provider:    to.Ptr("Microsoft Import/Export"),
						Resource:    to.Ptr("Jobs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ImportExport/jobs/listBitLockerKeys/action"),
					Display: &armstorageimportexport.OperationDisplay{
						Description: to.Ptr("Gets the BitLocker keys for the specified job."),
						Operation:   to.Ptr("List BitLocker Keys"),
						Provider:    to.Ptr("Microsoft Import/Export"),
						Resource:    to.Ptr("Jobs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ImportExport/jobs/delete"),
					Display: &armstorageimportexport.OperationDisplay{
						Description: to.Ptr("Deletes an existing job."),
						Operation:   to.Ptr("Delete Job"),
						Provider:    to.Ptr("Microsoft Import/Export"),
						Resource:    to.Ptr("Jobs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ImportExport/register/action"),
					Display: &armstorageimportexport.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the import/export resource provider and enables the creation of import/export jobs."),
						Operation:   to.Ptr("Registers the Import/Export Resource Provider"),
						Provider:    to.Ptr("Microsoft Import/Export"),
						Resource:    to.Ptr("Import/Export Resource Provider"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListOperationsResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListOperationsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storageimportexport/resource-manager/Microsoft.ImportExport/preview/2021-01-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
