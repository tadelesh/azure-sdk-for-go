//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmariadb

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestServers_Create(t *testing.T) {
	// From example Create a database as a point in time restore
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		ServerForCreate{
			Location: to.StringPtr("brazilsouth"),
			Properties: &ServerPropertiesForRestore{
				ServerPropertiesForCreate: ServerPropertiesForCreate{
					CreateMode: CreateModePointInTimeRestore.ToPtr(),
				},
				RestorePointInTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-14T00:00:37.467Z"); return t }()),
				SourceServerID:     to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforMariaDB/servers/sourceserver"),
			},
			SKU: &SKU{
				Name:     to.StringPtr("GP_Gen5_2"),
				Capacity: to.Int32Ptr(2),
				Family:   to.StringPtr("Gen5"),
				Tier:     SKUTierGeneralPurpose.ToPtr(),
			},
			Tags: map[string]*string{
				"ElasticServer": to.StringPtr("1"),
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example Create a new server
	poller, err = client.BeginCreate(ctx,
		"testrg",
		"mariadbtestsvc4",
		ServerForCreate{
			Location: to.StringPtr("westus"),
			Properties: &ServerPropertiesForDefaultCreate{
				ServerPropertiesForCreate: ServerPropertiesForCreate{
					CreateMode:        CreateModeDefault.ToPtr(),
					MinimalTLSVersion: MinimalTLSVersionEnumTLS12.ToPtr(),
					SSLEnforcement:    SSLEnforcementEnumEnabled.ToPtr(),
					StorageProfile: &StorageProfile{
						BackupRetentionDays: to.Int32Ptr(7),
						GeoRedundantBackup:  GeoRedundantBackupEnabled.ToPtr(),
						StorageMB:           to.Int32Ptr(128000),
					},
				},
				AdministratorLogin:         to.StringPtr("cloudsa"),
				AdministratorLoginPassword: to.StringPtr("<administratorLoginPassword>"),
			},
			SKU: &SKU{
				Name:     to.StringPtr("GP_Gen5_2"),
				Capacity: to.Int32Ptr(2),
				Family:   to.StringPtr("Gen5"),
				Tier:     SKUTierGeneralPurpose.ToPtr(),
			},
			Tags: map[string]*string{
				"ElasticServer": to.StringPtr("1"),
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example Create a replica server
	poller, err = client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		ServerForCreate{
			Location: to.StringPtr("westus"),
			Properties: &ServerPropertiesForReplica{
				ServerPropertiesForCreate: ServerPropertiesForCreate{
					CreateMode: CreateModeReplica.ToPtr(),
				},
				SourceServerID: to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/MasterResourceGroup/providers/Microsoft.DBforMariaDB/servers/masterserver"),
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example Create a server as a geo restore
	poller, err = client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		ServerForCreate{
			Location: to.StringPtr("westus"),
			Properties: &ServerPropertiesForGeoRestore{
				ServerPropertiesForCreate: ServerPropertiesForCreate{
					CreateMode: CreateModeGeoRestore.ToPtr(),
				},
				SourceServerID: to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforMariaDB/servers/sourceserver"),
			},
			SKU: &SKU{
				Name:     to.StringPtr("GP_Gen5_2"),
				Capacity: to.Int32Ptr(2),
				Family:   to.StringPtr("Gen5"),
				Tier:     SKUTierGeneralPurpose.ToPtr(),
			},
			Tags: map[string]*string{
				"ElasticServer": to.StringPtr("1"),
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_Update(t *testing.T) {
	// From example ServerUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"mariadbtestsvc4",
		ServerUpdateParameters{
			Properties: &ServerUpdateParametersProperties{
				AdministratorLoginPassword: to.StringPtr("<administratorLoginPassword>"),
				SSLEnforcement:             SSLEnforcementEnumDisabled.ToPtr(),
			},
		},
		&ServersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_Delete(t *testing.T) {
	// From example ServerDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		&ServersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Get(t *testing.T) {
	// From example ServerGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testrg",
		"mariadbtestsvc4",
		&ServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example ServerListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListByResourceGroup(ctx,
		"testrg",
		&ServersListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_List(t *testing.T) {
	// From example ServerList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.List(ctx,
		&ServersListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Restart(t *testing.T) {
	// From example ServerRestart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginRestart(ctx,
		"TestGroup",
		"testserver",
		&ServersBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Start(t *testing.T) {
	// From example ServerStart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginStart(ctx,
		"TestGroup",
		"testserver",
		&ServersBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Stop(t *testing.T) {
	// From example ServerStop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginStop(ctx,
		"TestGroup",
		"testserver",
		&ServersBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicas_ListByServer(t *testing.T) {
	// From example ReplicasListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicasClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListByServer(ctx,
		"TestGroup",
		"testmaster",
		&ReplicasListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example FirewallRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		FirewallRule{
			Properties: &FirewallRuleProperties{
				EndIPAddress:   to.StringPtr("255.255.255.255"),
				StartIPAddress: to.StringPtr("0.0.0.0"),
			},
		},
		&FirewallRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example FirewallRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		&FirewallRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example FirewallRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		&FirewallRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_ListByServer(t *testing.T) {
	// From example FirewallRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListByServer(ctx,
		"TestGroup",
		"testserver",
		&FirewallRulesListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example Gets a virtual network rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&VirtualNetworkRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example Create or update a virtual network rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		VirtualNetworkRule{
			Properties: &VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.BoolPtr(false),
				VirtualNetworkSubnetID:           to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		},
		&VirtualNetworkRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example Delete a virtual network rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&VirtualNetworkRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkRules_ListByServer(t *testing.T) {
	// From example List virtual network rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("TestGroup",
		"vnet-test-svr",
		&VirtualNetworkRulesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkRule.ID should not be nil!")
			}
		}
	}
}

func TestDatabases_CreateOrUpdate(t *testing.T) {
	// From example DatabaseCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"db1",
		Database{
			Properties: &DatabaseProperties{
				Charset:   to.StringPtr("utf8"),
				Collation: to.StringPtr("utf8_general_ci"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example DatabaseDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"db1",
		&DatabasesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example DatabaseGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"db1",
		&DatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_ListByServer(t *testing.T) {
	// From example DatabaseList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListByServer(ctx,
		"TestGroup",
		"testserver",
		&DatabasesListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfigurations_CreateOrUpdate(t *testing.T) {
	// From example ConfigurationCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"event_scheduler",
		Configuration{
			Properties: &ConfigurationProperties{
				Source: to.StringPtr("user-override"),
				Value:  to.StringPtr("off"),
			},
		},
		&ConfigurationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Configuration.ID == nil {
		t.Fatal("Configuration.ID should not be nil!")
	}
}

func TestConfigurations_Get(t *testing.T) {
	// From example ConfigurationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"event_scheduler",
		&ConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Configuration.ID == nil {
		t.Fatal("Configuration.ID should not be nil!")
	}
}

func TestConfigurations_ListByServer(t *testing.T) {
	// From example ConfigurationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListByServer(ctx,
		"testrg",
		"mariadbtestsvc1",
		&ConfigurationsListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerParameters_ListUpdateConfigurations(t *testing.T) {
	// From example ConfigurationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerParametersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginListUpdateConfigurations(ctx,
		"testrg",
		"mariadbtestsvc1",
		ConfigurationListResult{},
		&ServerParametersBeginListUpdateConfigurationsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLogFiles_ListByServer(t *testing.T) {
	// From example LogFileList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLogFilesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ListByServer(ctx,
		"TestGroup",
		"testserver",
		&LogFilesListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecoverableServers_Get(t *testing.T) {
	// From example ReplicasListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoverableServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testrg",
		"testsvc4",
		&RecoverableServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecoverableServerResource.ID == nil {
		t.Fatal("RecoverableServerResource.ID should not be nil!")
	}
}

func TestServerBasedPerformanceTier_List(t *testing.T) {
	// From example PerformanceTiersList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerBasedPerformanceTierClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.List(ctx,
		"testrg",
		"mariadbtestsvc1",
		&ServerBasedPerformanceTierListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocationBasedPerformanceTier_List(t *testing.T) {
	// From example PerformanceTiersList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationBasedPerformanceTierClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.List(ctx,
		"WestUS",
		&LocationBasedPerformanceTierListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCheckNameAvailability_Execute(t *testing.T) {
	// From example NameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCheckNameAvailabilityClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.Execute(ctx,
		NameAvailabilityRequest{
			Name: to.StringPtr("name1"),
			Type: to.StringPtr("Microsoft.DBforMariaDB"),
		},
		&CheckNameAvailabilityExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example OperationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueryTexts_Get(t *testing.T) {
	// From example QueryTextsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueryTextsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"1",
		&QueryTextsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.QueryText.ID == nil {
		t.Fatal("QueryText.ID should not be nil!")
	}
}

func TestQueryTexts_ListByServer(t *testing.T) {
	// From example QueryTextsListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueryTextsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		[]*string{
			to.StringPtr("1"),
			to.StringPtr("2")},
		&QueryTextsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("QueryText.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("QueryText.ID should not be nil!")
			}
		}
	}
}

func TestTopQueryStatistics_Get(t *testing.T) {
	// From example TopQueryStatisticsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopQueryStatisticsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"66-636923268000000000-636923277000000000-avg-duration",
		&TopQueryStatisticsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.QueryStatistic.ID == nil {
		t.Fatal("QueryStatistic.ID should not be nil!")
	}
}

func TestTopQueryStatistics_ListByServer(t *testing.T) {
	// From example TopQueryStatisticsListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopQueryStatisticsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		TopQueryStatisticsInput{
			Properties: &TopQueryStatisticsInputProperties{
				AggregationFunction:  to.StringPtr("avg"),
				AggregationWindow:    to.StringPtr("PT15M"),
				NumberOfTopQueries:   to.Int32Ptr(5),
				ObservationEndTime:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T20:00:00.000Z"); return t }()),
				ObservationStartTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T20:00:00.000Z"); return t }()),
				ObservedMetric:       to.StringPtr("duration"),
			},
		},
		&TopQueryStatisticsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("QueryStatistic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("QueryStatistic.ID should not be nil!")
			}
		}
	}
}

func TestWaitStatistics_Get(t *testing.T) {
	// From example WaitStatisticsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWaitStatisticsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"636927606000000000-636927615000000000-send-wait/io/socket/sql/client_connection-2--0",
		&WaitStatisticsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WaitStatistic.ID == nil {
		t.Fatal("WaitStatistic.ID should not be nil!")
	}
}

func TestWaitStatistics_ListByServer(t *testing.T) {
	// From example WaitStatisticsListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWaitStatisticsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		WaitStatisticsInput{
			Properties: &WaitStatisticsInputProperties{
				AggregationWindow:    to.StringPtr("PT15M"),
				ObservationEndTime:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T20:00:00.000Z"); return t }()),
				ObservationStartTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T20:00:00.000Z"); return t }()),
			},
		},
		&WaitStatisticsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WaitStatistic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WaitStatistic.ID should not be nil!")
			}
		}
	}
}

func Test_ResetQueryPerformanceInsightData(t *testing.T) {
	// From example QueryPerformanceInsightResetData
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMariaDBManagementClientClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.ResetQueryPerformanceInsightData(ctx,
		"testResourceGroupName",
		"testServerName",
		&MariaDBManagementClientResetQueryPerformanceInsightDataOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_CreateRecommendedActionSession(t *testing.T) {
	// From example RecommendedActionSessionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMariaDBManagementClientClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateRecommendedActionSession(ctx,
		"testResourceGroupName",
		"testServerName",
		"Index",
		"someDatabaseName",
		&MariaDBManagementClientBeginCreateRecommendedActionSessionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAdvisors_Get(t *testing.T) {
	// From example AdvisorsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAdvisorsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"Index",
		&AdvisorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Advisor.ID == nil {
		t.Fatal("Advisor.ID should not be nil!")
	}
}

func TestAdvisors_ListByServer(t *testing.T) {
	// From example AdvisorsListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAdvisorsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		&AdvisorsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Advisor.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Advisor.ID should not be nil!")
			}
		}
	}
}

func TestRecommendedActions_Get(t *testing.T) {
	// From example RecommendedActionsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendedActionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testResourceGroupName",
		"testServerName",
		"Index",
		"Index-1",
		&RecommendedActionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecommendationAction.ID == nil {
		t.Fatal("RecommendationAction.ID should not be nil!")
	}
}

func TestRecommendedActions_ListByServer(t *testing.T) {
	// From example RecommendedActionsListByServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendedActionsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testResourceGroupName",
		"testServerName",
		"Index",
		&RecommendedActionsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecommendationAction.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecommendationAction.ID should not be nil!")
			}
		}
	}
}

func TestLocationBasedRecommendedActionSessionsOperationStatus_Get(t *testing.T) {
	// From example RecommendedActionSessionOperationStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationBasedRecommendedActionSessionsOperationStatusClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.Get(ctx,
		"WestUS",
		"aaaabbbb-cccc-dddd-0000-111122223333",
		&LocationBasedRecommendedActionSessionsOperationStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocationBasedRecommendedActionSessionsResult_List(t *testing.T) {
	// From example RecommendedActionSessionResult
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationBasedRecommendedActionSessionsResultClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.List("WestUS",
		"aaaabbbb-cccc-dddd-0000-111122223333",
		&LocationBasedRecommendedActionSessionsResultListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecommendationAction.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecommendationAction.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionStateProperty{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_UpdateTags(t *testing.T) {
	// From example Update private endpoint connection Tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdateTags(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("val1"),
				"key2": to.StringPtr("val2"),
			},
		},
		&PrivateEndpointConnectionsBeginUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_ListByServer(t *testing.T) {
	// From example Gets list of private endpoint connections on a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"test-svr",
		&PrivateEndpointConnectionsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_ListByServer(t *testing.T) {
	// From example Gets private link resources for MariaDB.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"test-svr",
		&PrivateLinkResourcesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Gets a private link resource for MariaDB.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"plr",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example Get a server's threat detection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		&ServerSecurityAlertPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a server's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		ServerSecurityAlertPolicy{
			Properties: &SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Access_Anomaly"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Int32Ptr(5),
				State:                   ServerSecurityAlertPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ServerSecurityAlertPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a server's threat detection policy with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		ServerSecurityAlertPolicy{
			Properties: &SecurityAlertPolicyProperties{
				EmailAccountAdmins: to.BoolPtr(true),
				State:              ServerSecurityAlertPolicyStateDisabled.ToPtr(),
			},
		},
		&ServerSecurityAlertPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestServerSecurityAlertPolicies_ListByServer(t *testing.T) {
	// From example List the server's threat detection policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("securityalert-4799",
		"securityalert-6440",
		&ServerSecurityAlertPoliciesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
