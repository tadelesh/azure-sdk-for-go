//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwebpubsub_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/webpubsub/armwebpubsub"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.OperationList{
			Value: []*armwebpubsub.Operation{
				{
					Name: to.Ptr("Microsoft.SignalRService/WebPubSub/read"),
					Display: &armwebpubsub.OperationDisplay{
						Description: to.Ptr("View the resource settings and configurations in the management portal or through API"),
						Operation:   to.Ptr("Manage WebPubSub (read-only)"),
						Provider:    to.Ptr("Microsoft.SignalRService"),
						Resource:    to.Ptr("WebPubSub"),
					},
					IsDataAction: to.Ptr(false),
					Properties:   &armwebpubsub.OperationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_CheckNameAvailability(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		armwebpubsub.NameAvailabilityParameters{
			Name: to.Ptr("myWebPubSubService"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.NameAvailability{
			Message:       to.Ptr("The name is already taken. Please try a different name."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_ListBySubscription(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.ResourceInfoList{
			Value: []*armwebpubsub.ResourceInfo{
				{
					Name:     to.Ptr("myWebPubSubService"),
					Type:     to.Ptr("Microsoft.SignalRService/WebPubSub"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Identity: &armwebpubsub.ManagedIdentity{
						Type:        to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Properties: &armwebpubsub.Properties{
						DisableAADAuth:   to.Ptr(false),
						DisableLocalAuth: to.Ptr(false),
						ExternalIP:       to.Ptr("10.0.0.1"),
						HostName:         to.Ptr("mywebpubsubservice.webpubsub.azure.com"),
						LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
							Categories: []*armwebpubsub.LiveTraceCategory{
								{
									Name:    to.Ptr("ConnectivityLogs"),
									Enabled: to.Ptr("true"),
								}},
							Enabled: to.Ptr("false"),
						},
						NetworkACLs: &armwebpubsub.NetworkACLs{
							DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
							PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
								{
									Allow: []*armwebpubsub.WebPubSubRequestType{
										to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
									Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								}},
							PublicNetwork: &armwebpubsub.NetworkACL{
								Allow: []*armwebpubsub.WebPubSubRequestType{
									to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
							},
						},
						PrivateEndpointConnections: []*armwebpubsub.PrivateEndpointConnection{
							{
								Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
									},
									PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
								},
								SystemData: &armwebpubsub.SystemData{
									CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									CreatedBy:          to.Ptr("string"),
									CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
									LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									LastModifiedBy:     to.Ptr("string"),
									LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
								},
							}},
						ProvisioningState:   to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr("Enabled"),
						PublicPort:          to.Ptr[int32](443),
						ResourceLogConfiguration: &armwebpubsub.ResourceLogConfiguration{
							Categories: []*armwebpubsub.ResourceLogCategory{
								{
									Name:    to.Ptr("ConnectivityLogs"),
									Enabled: to.Ptr("true"),
								}},
						},
						ServerPort: to.Ptr[int32](443),
						TLS: &armwebpubsub.TLSSettings{
							ClientCertEnabled: to.Ptr(true),
						},
						Version: to.Ptr("1.0"),
					},
					SKU: &armwebpubsub.ResourceSKU{
						Name:     to.Ptr("Standard_S1"),
						Capacity: to.Ptr[int32](1),
						Size:     to.Ptr("S1"),
						Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
					},
					SystemData: &armwebpubsub.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceInfoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceInfoList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_ListByResourceGroup(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.ResourceInfoList{
			Value: []*armwebpubsub.ResourceInfo{
				{
					Name:     to.Ptr("myWebPubSubService"),
					Type:     to.Ptr("Microsoft.SignalRService/WebPubSub"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Identity: &armwebpubsub.ManagedIdentity{
						Type:        to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Properties: &armwebpubsub.Properties{
						DisableAADAuth:   to.Ptr(false),
						DisableLocalAuth: to.Ptr(false),
						ExternalIP:       to.Ptr("10.0.0.1"),
						HostName:         to.Ptr("mywebpubsubservice.webpubsub.azure.com"),
						LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
							Categories: []*armwebpubsub.LiveTraceCategory{
								{
									Name:    to.Ptr("ConnectivityLogs"),
									Enabled: to.Ptr("true"),
								}},
							Enabled: to.Ptr("false"),
						},
						NetworkACLs: &armwebpubsub.NetworkACLs{
							DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
							PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
								{
									Allow: []*armwebpubsub.WebPubSubRequestType{
										to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
									Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								}},
							PublicNetwork: &armwebpubsub.NetworkACL{
								Allow: []*armwebpubsub.WebPubSubRequestType{
									to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
							},
						},
						PrivateEndpointConnections: []*armwebpubsub.PrivateEndpointConnection{
							{
								Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
									},
									PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
								},
								SystemData: &armwebpubsub.SystemData{
									CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									CreatedBy:          to.Ptr("string"),
									CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
									LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									LastModifiedBy:     to.Ptr("string"),
									LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
								},
							}},
						ProvisioningState:   to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr("Enabled"),
						PublicPort:          to.Ptr[int32](443),
						ResourceLogConfiguration: &armwebpubsub.ResourceLogConfiguration{
							Categories: []*armwebpubsub.ResourceLogCategory{
								{
									Name:    to.Ptr("ConnectivityLogs"),
									Enabled: to.Ptr("true"),
								}},
						},
						ServerPort: to.Ptr[int32](443),
						TLS: &armwebpubsub.TLSSettings{
							ClientCertEnabled: to.Ptr(true),
						},
						Version: to.Ptr("1.0"),
					},
					SKU: &armwebpubsub.ResourceSKU{
						Name:     to.Ptr("Standard_S1"),
						Capacity: to.Ptr[int32](1),
						Size:     to.Ptr("S1"),
						Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
					},
					SystemData: &armwebpubsub.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceInfoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceInfoList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_Get(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.ResourceInfo{
			Name:     to.Ptr("myWebPubSubService"),
			Type:     to.Ptr("Microsoft.SignalRService/WebPubSub"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type:        to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
			Properties: &armwebpubsub.Properties{
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				ExternalIP:       to.Ptr("10.0.0.1"),
				HostName:         to.Ptr("mywebpubsubservice.webpubsub.azure.com"),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
					Enabled: to.Ptr("false"),
				},
				NetworkACLs: &armwebpubsub.NetworkACLs{
					DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							Allow: []*armwebpubsub.WebPubSubRequestType{
								to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
							Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
					},
				},
				PrivateEndpointConnections: []*armwebpubsub.PrivateEndpointConnection{
					{
						Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
						},
						SystemData: &armwebpubsub.SystemData{
							CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.Ptr("string"),
							CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
							LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.Ptr("string"),
							LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
						},
					}},
				ProvisioningState:   to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr("Enabled"),
				PublicPort:          to.Ptr[int32](443),
				ResourceLogConfiguration: &armwebpubsub.ResourceLogConfiguration{
					Categories: []*armwebpubsub.ResourceLogCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
				},
				ServerPort: to.Ptr[int32](443),
				TLS: &armwebpubsub.TLSSettings{
					ClientCertEnabled: to.Ptr(true),
				},
				Version: to.Ptr("1.0"),
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Size:     to.Ptr("S1"),
				Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
			},
			SystemData: &armwebpubsub.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_CreateOrUpdate(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		armwebpubsub.ResourceInfo{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type: to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
			},
			Properties: &armwebpubsub.Properties{
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
					Enabled: to.Ptr("false"),
				},
				NetworkACLs: &armwebpubsub.NetworkACLs{
					DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							Allow: []*armwebpubsub.WebPubSubRequestType{
								to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
							Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
					},
				},
				PublicNetworkAccess: to.Ptr("Enabled"),
				TLS: &armwebpubsub.TLSSettings{
					ClientCertEnabled: to.Ptr(false),
				},
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
			},
		},
		&armwebpubsub.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.ResourceInfo{
			Name:     to.Ptr("myWebPubSubService"),
			Type:     to.Ptr("Microsoft.SignalRService/WebPubSub"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type:        to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
			Properties: &armwebpubsub.Properties{
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				ExternalIP:       to.Ptr("10.0.0.1"),
				HostName:         to.Ptr("mywebpubsubservice.webpubsub.azure.com"),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
					Enabled: to.Ptr("false"),
				},
				NetworkACLs: &armwebpubsub.NetworkACLs{
					DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							Allow: []*armwebpubsub.WebPubSubRequestType{
								to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
							Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
					},
				},
				PrivateEndpointConnections: []*armwebpubsub.PrivateEndpointConnection{
					{
						Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
						},
						SystemData: &armwebpubsub.SystemData{
							CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.Ptr("string"),
							CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
							LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.Ptr("string"),
							LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
						},
					}},
				ProvisioningState:   to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr("Enabled"),
				PublicPort:          to.Ptr[int32](443),
				ResourceLogConfiguration: &armwebpubsub.ResourceLogConfiguration{
					Categories: []*armwebpubsub.ResourceLogCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
				},
				ServerPort: to.Ptr[int32](443),
				TLS: &armwebpubsub.TLSSettings{
					ClientCertEnabled: to.Ptr(true),
				},
				Version: to.Ptr("1.0"),
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Size:     to.Ptr("S1"),
				Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
			},
			SystemData: &armwebpubsub.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_Delete(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		&armwebpubsub.ClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Delete.json: %v", err)
	}
}

func TestWebPubSub_Update(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		armwebpubsub.ResourceInfo{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type: to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
			},
			Properties: &armwebpubsub.Properties{
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
					Enabled: to.Ptr("false"),
				},
				NetworkACLs: &armwebpubsub.NetworkACLs{
					DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							Allow: []*armwebpubsub.WebPubSubRequestType{
								to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
							Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
					},
				},
				PublicNetworkAccess: to.Ptr("Enabled"),
				TLS: &armwebpubsub.TLSSettings{
					ClientCertEnabled: to.Ptr(false),
				},
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
			},
		},
		&armwebpubsub.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.ResourceInfo{
			Name:     to.Ptr("myWebPubSubService"),
			Type:     to.Ptr("Microsoft.SignalRService/WebPubSub"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type:        to.Ptr(armwebpubsub.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
			Properties: &armwebpubsub.Properties{
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				ExternalIP:       to.Ptr("10.0.0.1"),
				HostName:         to.Ptr("mywebpubsubservice.webpubsub.azure.com"),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
					Enabled: to.Ptr("false"),
				},
				NetworkACLs: &armwebpubsub.NetworkACLs{
					DefaultAction: to.Ptr(armwebpubsub.ACLActionDeny),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							Allow: []*armwebpubsub.WebPubSubRequestType{
								to.Ptr(armwebpubsub.WebPubSubRequestTypeServerConnection)},
							Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							to.Ptr(armwebpubsub.WebPubSubRequestTypeClientConnection)},
					},
				},
				PrivateEndpointConnections: []*armwebpubsub.PrivateEndpointConnection{
					{
						Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
						},
						SystemData: &armwebpubsub.SystemData{
							CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.Ptr("string"),
							CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
							LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.Ptr("string"),
							LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
						},
					}},
				ProvisioningState:   to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr("Enabled"),
				PublicPort:          to.Ptr[int32](443),
				ResourceLogConfiguration: &armwebpubsub.ResourceLogConfiguration{
					Categories: []*armwebpubsub.ResourceLogCategory{
						{
							Name:    to.Ptr("ConnectivityLogs"),
							Enabled: to.Ptr("true"),
						}},
				},
				ServerPort: to.Ptr[int32](443),
				TLS: &armwebpubsub.TLSSettings{
					ClientCertEnabled: to.Ptr(true),
				},
				Version: to.Ptr("1.0"),
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Size:     to.Ptr("S1"),
				Tier:     to.Ptr(armwebpubsub.WebPubSubSKUTierStandard),
			},
			SystemData: &armwebpubsub.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_ListKeys(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_ListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.Keys{}
		if !reflect.DeepEqual(exampleRes, res.Keys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Keys)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSub_RegenerateKey(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_RegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginRegenerateKey(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		armwebpubsub.RegenerateKeyParameters{
			KeyType: to.Ptr(armwebpubsub.KeyTypePrimary),
		},
		&armwebpubsub.ClientBeginRegenerateKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_RegenerateKey.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_RegenerateKey.json: %v", err)
	}
}

func TestWebPubSub_Restart(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSub_Restart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"myWebPubSubService",
		&armwebpubsub.ClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Restart.json: %v", err)
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/Usages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usages_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewUsagesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/Usages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.SignalRServiceUsageList{
			Value: []*armwebpubsub.SignalRServiceUsage{
				{
					Name: &armwebpubsub.SignalRServiceUsageName{
						LocalizedValue: to.Ptr("Usage1"),
						Value:          to.Ptr("Usage1"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage1"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr("Count"),
				},
				{
					Name: &armwebpubsub.SignalRServiceUsageName{
						LocalizedValue: to.Ptr("Usage2"),
						Value:          to.Ptr("Usage2"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage2"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SignalRServiceUsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SignalRServiceUsageList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/Usages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubHubs_List(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubHubs_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewHubsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myWebPubSubService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.HubList{
			Value: []*armwebpubsub.Hub{
				{
					Name: to.Ptr("exampleHub"),
					Type: to.Ptr("Microsoft.SignalRService/WebPubSub/hubs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/hubs/exampleHub"),
					Properties: &armwebpubsub.HubProperties{
						EventHandlers: []*armwebpubsub.EventHandler{
							{
								Auth: &armwebpubsub.UpstreamAuthSettings{
									Type: to.Ptr(armwebpubsub.UpstreamAuthTypeManagedIdentity),
									ManagedIdentity: &armwebpubsub.ManagedIdentitySettings{
										Resource: to.Ptr("abc"),
									},
								},
								SystemEvents: []*string{
									to.Ptr("connect"),
									to.Ptr("connected")},
								URLTemplate:      to.Ptr("http://host.com"),
								UserEventPattern: to.Ptr("*"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HubList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HubList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubHubs_Get(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubHubs_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewHubsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"exampleHub",
		"myResourceGroup",
		"myWebPubSubService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.Hub{
			Name: to.Ptr("exampleHub"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub/hubs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/hubs/exampleHub"),
			Properties: &armwebpubsub.HubProperties{
				EventHandlers: []*armwebpubsub.EventHandler{
					{
						Auth: &armwebpubsub.UpstreamAuthSettings{
							Type: to.Ptr(armwebpubsub.UpstreamAuthTypeManagedIdentity),
							ManagedIdentity: &armwebpubsub.ManagedIdentitySettings{
								Resource: to.Ptr("abc"),
							},
						},
						SystemEvents: []*string{
							to.Ptr("connect"),
							to.Ptr("connected")},
						URLTemplate:      to.Ptr("http://host.com"),
						UserEventPattern: to.Ptr("*"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Hub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Hub)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubHubs_CreateOrUpdate(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubHubs_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewHubsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"exampleHub",
		"myResourceGroup",
		"myWebPubSubService",
		armwebpubsub.Hub{
			Properties: &armwebpubsub.HubProperties{
				EventHandlers: []*armwebpubsub.EventHandler{
					{
						Auth: &armwebpubsub.UpstreamAuthSettings{
							Type: to.Ptr(armwebpubsub.UpstreamAuthTypeManagedIdentity),
							ManagedIdentity: &armwebpubsub.ManagedIdentitySettings{
								Resource: to.Ptr("abc"),
							},
						},
						SystemEvents: []*string{
							to.Ptr("connect"),
							to.Ptr("connected")},
						URLTemplate:      to.Ptr("http://host.com"),
						UserEventPattern: to.Ptr("*"),
					}},
			},
		},
		&armwebpubsub.HubsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.Hub{
			Name: to.Ptr("exampleHub"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub/hubs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/hubs/exampleHub"),
			Properties: &armwebpubsub.HubProperties{
				EventHandlers: []*armwebpubsub.EventHandler{
					{
						Auth: &armwebpubsub.UpstreamAuthSettings{
							Type: to.Ptr(armwebpubsub.UpstreamAuthTypeManagedIdentity),
							ManagedIdentity: &armwebpubsub.ManagedIdentitySettings{
								Resource: to.Ptr("abc"),
							},
						},
						SystemEvents: []*string{
							to.Ptr("connect"),
							to.Ptr("connected")},
						URLTemplate:      to.Ptr("http://host.com"),
						UserEventPattern: to.Ptr("*"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Hub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Hub)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubHubs_Delete(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubHubs_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewHubsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"exampleHub",
		"myResourceGroup",
		"myWebPubSubService",
		&armwebpubsub.HubsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Delete.json: %v", err)
	}
}

func TestWebPubSubPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubPrivateEndpointConnections_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myWebPubSubService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.PrivateEndpointConnectionList{
			Value: []*armwebpubsub.PrivateEndpointConnection{
				{
					Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
						GroupIDs: []*string{
							to.Ptr("webpubsub")},
						PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
					},
					SystemData: &armwebpubsub.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubPrivateEndpointConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"myWebPubSubService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.PrivateEndpointConnection{
			Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("webpubsub")},
				PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
			},
			SystemData: &armwebpubsub.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubPrivateEndpointConnections_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"myWebPubSubService",
		armwebpubsub.PrivateEndpointConnection{
			Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.PrivateEndpointConnection{
			Name: to.Ptr("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Properties: &armwebpubsub.PrivateEndpointConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("webpubsub")},
				PrivateEndpoint: &armwebpubsub.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armwebpubsub.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armwebpubsub.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
			},
			SystemData: &armwebpubsub.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armwebpubsub.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armwebpubsub.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubPrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"myWebPubSubService",
		&armwebpubsub.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestWebPubSubPrivateLinkResources_List(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubPrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myWebPubSubService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateLinkResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.PrivateLinkResourceList{
			Value: []*armwebpubsub.PrivateLinkResource{
				{
					Name: to.Ptr("myPrivateLink"),
					Type: to.Ptr("privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateLinkResources/myPrivateLink"),
					Properties: &armwebpubsub.PrivateLinkResourceProperties{
						GroupID: to.Ptr("webpubsub"),
						RequiredMembers: []*string{
							to.Ptr("webpubsub")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.webpubsub.azure.com")},
						ShareablePrivateLinkResourceTypes: []*armwebpubsub.ShareablePrivateLinkResourceType{
							{
								Name: to.Ptr("site"),
								Properties: &armwebpubsub.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Web/sites"),
									Description: to.Ptr("Azure App Service can be used as an upstream"),
									GroupID:     to.Ptr("sites"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubSharedPrivateLinkResources_List(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubSharedPrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myWebPubSubService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwebpubsub.SharedPrivateLinkResourceList{
			Value: []*armwebpubsub.SharedPrivateLinkResource{
				{
					Name: to.Ptr("upstream"),
					Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/upstream"),
					Properties: &armwebpubsub.SharedPrivateLinkResourceProperties{
						GroupID:               to.Ptr("sites"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
						ProvisioningState:     to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armwebpubsub.SharedPrivateLinkResourceStatusApproved),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedPrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedPrivateLinkResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubSharedPrivateLinkResources_Get(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubSharedPrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"upstream",
		"myResourceGroup",
		"myWebPubSubService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.SharedPrivateLinkResource{
			Name: to.Ptr("upstream"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/upstream"),
			Properties: &armwebpubsub.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("sites"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				ProvisioningState:     to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
				RequestMessage:        to.Ptr("Please approve"),
				Status:                to.Ptr(armwebpubsub.SharedPrivateLinkResourceStatusApproved),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubSharedPrivateLinkResources_CreateOrUpdate(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubSharedPrivateLinkResources_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"upstream",
		"myResourceGroup",
		"myWebPubSubService",
		armwebpubsub.SharedPrivateLinkResource{
			Properties: &armwebpubsub.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("sites"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				RequestMessage:        to.Ptr("Please approve"),
			},
		},
		&armwebpubsub.SharedPrivateLinkResourcesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwebpubsub.SharedPrivateLinkResource{
			Name: to.Ptr("upstream"),
			Type: to.Ptr("Microsoft.SignalRService/WebPubSub/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService/privateEndpointConnections/upstream"),
			Properties: &armwebpubsub.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("sites"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				ProvisioningState:     to.Ptr(armwebpubsub.ProvisioningStateSucceeded),
				RequestMessage:        to.Ptr("Please approve"),
				Status:                to.Ptr(armwebpubsub.SharedPrivateLinkResourceStatusApproved),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebPubSubSharedPrivateLinkResources_Delete(t *testing.T) {
	// From example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebPubSubSharedPrivateLinkResources_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwebpubsub.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"upstream",
		"myResourceGroup",
		"myWebPubSubService",
		&armwebpubsub.SharedPrivateLinkResourcesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubSharedPrivateLinkResources_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
