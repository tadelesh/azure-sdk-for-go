//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlabservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example listOperations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example getOperationResult
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationResultsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"a64149d8-84cb-4566-ab8e-b4ee1a074174",
		&OperationResultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResult.ID == nil {
		t.Fatal("OperationResult.ID should not be nil!")
	}
}

func TestLabPlans_ListBySubscription(t *testing.T) {
	// From example listLabPlans
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListBySubscription(&LabPlansListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LabPlan.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LabPlan.ID should not be nil!")
			}
		}
	}
}

func TestLabPlans_ListByResourceGroup(t *testing.T) {
	// From example listResourceGroupLabPlans
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("testrg123",
		&LabPlansListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LabPlan.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LabPlan.ID should not be nil!")
			}
		}
	}
}

func TestLabPlans_Get(t *testing.T) {
	// From example getLabPlan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testlabplan",
		&LabPlansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LabPlan.ID == nil {
		t.Fatal("LabPlan.ID should not be nil!")
	}
}

func TestLabPlans_CreateOrUpdate(t *testing.T) {
	// From example putLabPlan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testlabplan",
		LabPlan{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &LabPlanProperties{
				LabPlanUpdateProperties: LabPlanUpdateProperties{
					DefaultAutoShutdownProfile: &AutoShutdownProfile{
						DisconnectDelay:          to.StringPtr("00:05"),
						IdleDelay:                to.StringPtr("01:00"),
						NoConnectDelay:           to.StringPtr("01:00"),
						ShutdownOnDisconnect:     EnableStateEnabled.ToPtr(),
						ShutdownOnIdle:           ShutdownOnIdleModeUserAbsence.ToPtr(),
						ShutdownWhenNotConnected: EnableStateEnabled.ToPtr(),
					},
					DefaultConnectionProfile: &ConnectionProfile{
						ClientRdpAccess: ConnectionTypePublic.ToPtr(),
						ClientSSHAccess: ConnectionTypePublic.ToPtr(),
						WebRdpAccess:    ConnectionTypeNone.ToPtr(),
						WebSSHAccess:    ConnectionTypeNone.ToPtr(),
					},
					DefaultNetworkProfile: &LabPlanNetworkProfile{
						SubnetID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
					},
					SharedGalleryID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
					SupportInfo: &SupportInfo{
						Email:        to.StringPtr("help@contoso.com"),
						Instructions: to.StringPtr("Contact support for help."),
						Phone:        to.StringPtr("+1-202-555-0123"),
						URL:          to.StringPtr("help.contoso.com"),
					},
				},
			},
		},
		&LabPlansBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LabPlan.ID == nil {
		t.Fatal("LabPlan.ID should not be nil!")
	}
}

func TestLabPlans_Update(t *testing.T) {
	// From example patchLabPlan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"testlabplan",
		LabPlanUpdate{
			Properties: &LabPlanUpdateProperties{
				DefaultConnectionProfile: &ConnectionProfile{
					ClientRdpAccess: ConnectionTypePublic.ToPtr(),
					ClientSSHAccess: ConnectionTypePublic.ToPtr(),
					WebRdpAccess:    ConnectionTypeNone.ToPtr(),
					WebSSHAccess:    ConnectionTypeNone.ToPtr(),
				},
			},
		},
		&LabPlansBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LabPlan.ID == nil {
		t.Fatal("LabPlan.ID should not be nil!")
	}
}

func TestLabPlans_Delete(t *testing.T) {
	// From example deleteLabPlan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlabplan",
		&LabPlansBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabPlans_SaveImage(t *testing.T) {
	// From example saveImageVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabPlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginSaveImage(ctx,
		"testrg123",
		"testlabplan",
		SaveImageBody{
			Name:                to.StringPtr("Test Image"),
			LabVirtualMachineID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/virtualMachines/template"),
		},
		&LabPlansBeginSaveImageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestImages_ListByLabPlan(t *testing.T) {
	// From example listImages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImagesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByLabPlan("testrg123",
		"testlabplan",
		&ImagesListByLabPlanOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Image.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Image.ID should not be nil!")
			}
		}
	}
}

func TestImages_Get(t *testing.T) {
	// From example getImage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImagesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testlabplan",
		"image1",
		&ImagesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Image.ID == nil {
		t.Fatal("Image.ID should not be nil!")
	}
}

func TestImages_CreateOrUpdate(t *testing.T) {
	// From example putImage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImagesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testlabplan",
		"image1",
		Image{
			Properties: &ImageProperties{
				ImageUpdateProperties: ImageUpdateProperties{
					EnabledState: EnableStateEnabled.ToPtr(),
				},
			},
		},
		&ImagesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Image.ID == nil {
		t.Fatal("Image.ID should not be nil!")
	}
}

func TestImages_Update(t *testing.T) {
	// From example patchImage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImagesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"testrg123",
		"testlabplan",
		"image1",
		ImageUpdate{
			Properties: &ImageUpdateProperties{
				EnabledState: EnableStateEnabled.ToPtr(),
			},
		},
		&ImagesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Image.ID == nil {
		t.Fatal("Image.ID should not be nil!")
	}
}

func TestLabs_ListBySubscription(t *testing.T) {
	// From example listLabs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListBySubscription(&LabsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Lab.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Lab.ID should not be nil!")
			}
		}
	}
}

func TestLabs_ListByResourceGroup(t *testing.T) {
	// From example listResourceGroupLabs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("testrg123",
		&LabsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Lab.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Lab.ID should not be nil!")
			}
		}
	}
}

func TestLabs_Get(t *testing.T) {
	// From example getLab
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		&LabsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Lab.ID == nil {
		t.Fatal("Lab.ID should not be nil!")
	}
}

func TestLabs_CreateOrUpdate(t *testing.T) {
	// From example putLab
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testlab",
		Lab{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &LabProperties{
				LabUpdateProperties: LabUpdateProperties{
					Description: to.StringPtr("This is a test lab."),
					AutoShutdownProfile: &AutoShutdownProfile{
						DisconnectDelay:          to.StringPtr("00:05"),
						IdleDelay:                to.StringPtr("01:00"),
						NoConnectDelay:           to.StringPtr("01:00"),
						ShutdownOnDisconnect:     EnableStateEnabled.ToPtr(),
						ShutdownOnIdle:           ShutdownOnIdleModeUserAbsence.ToPtr(),
						ShutdownWhenNotConnected: EnableStateEnabled.ToPtr(),
					},
					ConnectionProfile: &ConnectionProfile{
						ClientRdpAccess: ConnectionTypePublic.ToPtr(),
						ClientSSHAccess: ConnectionTypePublic.ToPtr(),
						WebRdpAccess:    ConnectionTypeNone.ToPtr(),
						WebSSHAccess:    ConnectionTypeNone.ToPtr(),
					},
					LabPlanID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
					SecurityProfile: &SecurityProfile{
						OpenAccess: EnableStateDisabled.ToPtr(),
					},
					Title: to.StringPtr("Test Lab"),
					VirtualMachineProfile: &VirtualMachineProfile{
						AdditionalCapabilities: &VirtualMachineAdditionalCapabilities{
							InstallGpuDrivers: EnableStateDisabled.ToPtr(),
						},
						AdminUser: &Credentials{
							Username: to.StringPtr("test-user"),
						},
						CreateOption: CreateOptionTemplateVM.ToPtr(),
						ImageReference: &ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("Microsoft"),
							SKU:       to.StringPtr("2019-Datacenter"),
							Version:   to.StringPtr("2019.0.20190410"),
						},
						SKU: &SKU{
							Name: to.StringPtr("Medium"),
						},
						UsageQuota:        to.StringPtr("10:00"),
						UseSharedPassword: EnableStateDisabled.ToPtr(),
					},
				},
				NetworkProfile: &LabNetworkProfile{
					SubnetID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				State: LabStateDraft.ToPtr(),
			},
		},
		&LabsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Lab.ID == nil {
		t.Fatal("Lab.ID should not be nil!")
	}
}

func TestLabs_Update(t *testing.T) {
	// From example patchLab
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"testlab",
		LabUpdate{
			Properties: &LabUpdateProperties{
				SecurityProfile: &SecurityProfile{
					OpenAccess: EnableStateEnabled.ToPtr(),
				},
			},
		},
		&LabsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Lab.ID == nil {
		t.Fatal("Lab.ID should not be nil!")
	}
}

func TestLabs_Delete(t *testing.T) {
	// From example deleteLab
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlab",
		&LabsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_Publish(t *testing.T) {
	// From example publishLab
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginPublish(ctx,
		"testrg123",
		"testlab",
		&LabsBeginPublishOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_SyncGroup(t *testing.T) {
	// From example syncLab
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginSyncGroup(ctx,
		"testrg123",
		"testlab",
		&LabsBeginSyncGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsers_ListByLab(t *testing.T) {
	// From example listUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByLab("testrg123",
		"testlab",
		&UsersListByLabOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("User.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("User.ID should not be nil!")
			}
		}
	}
}

func TestUsers_Get(t *testing.T) {
	// From example getUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		"testuser",
		&UsersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_CreateOrUpdate(t *testing.T) {
	// From example putUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testlab",
		"testuser",
		User{
			Properties: &UserProperties{
				UserUpdateProperties: UserUpdateProperties{
					AdditionalUsageQuota: to.StringPtr("20:00"),
				},
				Email: to.StringPtr("testuser@contoso.com"),
			},
		},
		&UsersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_Update(t *testing.T) {
	// From example patchUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"testlab",
		"testuser",
		UserUpdate{
			Properties: &UserUpdateProperties{
				AdditionalUsageQuota: to.StringPtr("20:00"),
			},
		},
		&UsersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_Delete(t *testing.T) {
	// From example deleteUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlab",
		"testuser",
		&UsersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsers_Invite(t *testing.T) {
	// From example inviteUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginInvite(ctx,
		"testrg123",
		"testlab",
		"testuser",
		InviteBody{
			Text: to.StringPtr("Invitation to lab testlab"),
		},
		&UsersBeginInviteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_ListByLab(t *testing.T) {
	// From example listVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByLab("testrg123",
		"testlab",
		&VirtualMachinesListByLabOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualMachine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualMachine.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example getVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		"template",
		&VirtualMachinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualMachine.ID == nil {
		t.Fatal("VirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example startVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStart(ctx,
		"testrg123",
		"testlab",
		"template",
		&VirtualMachinesBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Stop(t *testing.T) {
	// From example stopVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStop(ctx,
		"testrg123",
		"testlab",
		"template",
		&VirtualMachinesBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Reimage(t *testing.T) {
	// From example reimageVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginReimage(ctx,
		"testrg123",
		"testlab",
		"template",
		&VirtualMachinesBeginReimageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Redeploy(t *testing.T) {
	// From example redeployVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginRedeploy(ctx,
		"testrg123",
		"testlab",
		"template",
		&VirtualMachinesBeginRedeployOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_ResetPassword(t *testing.T) {
	// From example resetPasswordVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginResetPassword(ctx,
		"testrg123",
		"testlab",
		"template",
		ResetPasswordBody{
			Password: to.StringPtr("example-password"),
			Username: to.StringPtr("example-username"),
		},
		&VirtualMachinesBeginResetPasswordOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSchedules_ListByLab(t *testing.T) {
	// From example getListSchedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByLab("testrg123",
		"testlab",
		&SchedulesListByLabOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestSchedules_Get(t *testing.T) {
	// From example getSchedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		&SchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedules_CreateOrUpdate(t *testing.T) {
	// From example putSchedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		Schedule{
			Properties: &ScheduleProperties{
				ScheduleUpdateProperties: ScheduleUpdateProperties{
					Notes: to.StringPtr("Schedule 1 for students"),
					RecurrencePattern: &RecurrencePattern{
						ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-14"); return t }()),
						Frequency:      RecurrenceFrequencyDaily.ToPtr(),
						Interval:       to.Int32Ptr(2),
					},
					StartAt:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
					StopAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
					TimeZoneID: to.StringPtr("America/Los_Angeles"),
				},
			},
		},
		&SchedulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedules_Update(t *testing.T) {
	// From example patchSchedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		ScheduleUpdate{
			Properties: &ScheduleUpdateProperties{
				RecurrencePattern: &RecurrencePattern{
					ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-14"); return t }()),
					Frequency:      RecurrenceFrequencyDaily.ToPtr(),
					Interval:       to.Int32Ptr(2),
				},
			},
		},
		&SchedulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedules_Delete(t *testing.T) {
	// From example deleteSchedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		&SchedulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
