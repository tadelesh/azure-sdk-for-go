//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlabservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/labservices/armlabservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestImages_ListByLabPlan(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/listImages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listImages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewImagesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByLabPlan("testrg123",
		"testlabplan",
		&armlabservices.ImagesClientListByLabPlanOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/listImages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedImages{
			Value: []*armlabservices.Image{
				{
					Name: to.Ptr("image1"),
					Type: to.Ptr("Microsoft.LabServices/Image"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan/images/image1"),
					Properties: &armlabservices.ImageProperties{
						EnabledState:      to.Ptr(armlabservices.EnableStateEnabled),
						Description:       to.Ptr("A description of the image"),
						DisplayName:       to.Ptr("Windows Server 2019 Datacenter"),
						Offer:             to.Ptr("WindowsServer"),
						OSType:            to.Ptr(armlabservices.OsTypeWindows),
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
						Publisher:         to.Ptr("Microsoft"),
						SKU:               to.Ptr("2019-Datacenter"),
						Version:           to.Ptr("2019.0.20190410"),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("image2"),
					Type: to.Ptr("Microsoft.LabServices/Image"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan/images/image2"),
					Properties: &armlabservices.ImageProperties{
						EnabledState:      to.Ptr(armlabservices.EnableStateEnabled),
						Description:       to.Ptr("An example custom image response"),
						DisplayName:       to.Ptr("A custom image"),
						OSType:            to.Ptr(armlabservices.OsTypeWindows),
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
						SharedGalleryID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/sig/images/test-1"),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedImages) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedImages)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/listImages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/getImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getImage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewImagesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testlabplan",
		"image1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/getImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Image{
			Name: to.Ptr("image1"),
			Type: to.Ptr("Microsoft.LabServices/Image"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan/images/image1"),
			Properties: &armlabservices.ImageProperties{
				EnabledState:      to.Ptr(armlabservices.EnableStateEnabled),
				Description:       to.Ptr("A description of the image"),
				DisplayName:       to.Ptr("Windows Server 2019 Datacenter"),
				Offer:             to.Ptr("WindowsServer"),
				OSType:            to.Ptr(armlabservices.OsTypeWindows),
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				Publisher:         to.Ptr("Microsoft"),
				SharedGalleryID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/Providers/Microsoft.Compute/Locations/westus/Publishers/MicrosoftWindowsServer/ArtifactTypes/VMImage/Offers/WindowsServer/Skus/2019-Datacenter/Versions/2019.0.20190410"),
				SKU:               to.Ptr("2019-Datacenter"),
				Version:           to.Ptr("2019.0.20190410"),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/getImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_CreateOrUpdate(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/putImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"putImage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewImagesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testlabplan",
		"image1",
		armlabservices.Image{
			Properties: &armlabservices.ImageProperties{
				EnabledState: to.Ptr(armlabservices.EnableStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/putImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Image{
			Name: to.Ptr("image1"),
			Type: to.Ptr("Microsoft.LabServices/Image"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan/images/image1"),
			Properties: &armlabservices.ImageProperties{
				EnabledState:      to.Ptr(armlabservices.EnableStateEnabled),
				Description:       to.Ptr("A description of the image"),
				DisplayName:       to.Ptr("Windows Server 2019 Datacenter"),
				Offer:             to.Ptr("WindowsServer"),
				OSType:            to.Ptr(armlabservices.OsTypeWindows),
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				Publisher:         to.Ptr("Microsoft"),
				SKU:               to.Ptr("2019-Datacenter"),
				Version:           to.Ptr("2019.0.20190410"),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/putImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_Update(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/patchImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patchImage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewImagesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"testrg123",
		"testlabplan",
		"image1",
		armlabservices.ImageUpdate{
			Properties: &armlabservices.ImageUpdateProperties{
				EnabledState: to.Ptr(armlabservices.EnableStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/patchImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Image{
			Name: to.Ptr("image1"),
			Type: to.Ptr("Microsoft.LabServices/Image"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan/images/image1"),
			Properties: &armlabservices.ImageProperties{
				EnabledState:      to.Ptr(armlabservices.EnableStateEnabled),
				Description:       to.Ptr("A description of the image"),
				DisplayName:       to.Ptr("Windows Server 2019 Datacenter"),
				Offer:             to.Ptr("WindowsServer"),
				OSType:            to.Ptr(armlabservices.OsTypeWindows),
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				Publisher:         to.Ptr("Microsoft"),
				SKU:               to.Ptr("2019-Datacenter"),
				Version:           to.Ptr("2019.0.20190410"),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Images/patchImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabPlans_ListBySubscription(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/listLabPlans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listLabPlans"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(&armlabservices.LabPlansClientListBySubscriptionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/listLabPlans.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedLabPlans{
			Value: []*armlabservices.LabPlan{
				{
					Name:     to.Ptr("testlabplan"),
					Type:     to.Ptr("Microsoft.LabServices/LabPlan"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
					Location: to.Ptr("westus"),
					Properties: &armlabservices.LabPlanProperties{
						DefaultAutoShutdownProfile: &armlabservices.AutoShutdownProfile{
							DisconnectDelay:          to.Ptr("00:05"),
							IdleDelay:                to.Ptr("01:00"),
							NoConnectDelay:           to.Ptr("01:00"),
							ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
							ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
							ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
						},
						DefaultConnectionProfile: &armlabservices.ConnectionProfile{
							ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
							WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
						},
						DefaultNetworkProfile: &armlabservices.LabPlanNetworkProfile{
							SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						SharedGalleryID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
						SupportInfo: &armlabservices.SupportInfo{
							Email:        to.Ptr("help@contoso.com"),
							Instructions: to.Ptr("Contact support for help."),
							Phone:        to.Ptr("+1-202-555-0123"),
							URL:          to.Ptr("help.contoso.com"),
						},
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedLabPlans) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedLabPlans)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/listLabPlans.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabPlans_ListByResourceGroup(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/listResourceGroupLabPlans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listResourceGroupLabPlans"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("testrg123",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/listResourceGroupLabPlans.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedLabPlans{
			Value: []*armlabservices.LabPlan{
				{
					Name:     to.Ptr("testlabplan"),
					Type:     to.Ptr("Microsoft.LabServices/LabPlan"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
					Location: to.Ptr("westus"),
					Properties: &armlabservices.LabPlanProperties{
						DefaultAutoShutdownProfile: &armlabservices.AutoShutdownProfile{
							DisconnectDelay:          to.Ptr("00:05"),
							IdleDelay:                to.Ptr("01:00"),
							NoConnectDelay:           to.Ptr("01:00"),
							ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
							ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
							ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
						},
						DefaultConnectionProfile: &armlabservices.ConnectionProfile{
							ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
							WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
						},
						DefaultNetworkProfile: &armlabservices.LabPlanNetworkProfile{
							SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						SharedGalleryID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
						SupportInfo: &armlabservices.SupportInfo{
							Email:        to.Ptr("help@contoso.com"),
							Instructions: to.Ptr("Contact support for help."),
							Phone:        to.Ptr("+1-202-555-0123"),
							URL:          to.Ptr("help.contoso.com"),
						},
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedLabPlans) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedLabPlans)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/listResourceGroupLabPlans.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabPlans_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/getLabPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getLabPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testlabplan",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/getLabPlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.LabPlan{
			Name:     to.Ptr("testlabplan"),
			Type:     to.Ptr("Microsoft.LabServices/LabPlan"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabPlanProperties{
				DefaultAutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				DefaultConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				DefaultNetworkProfile: &armlabservices.LabPlanNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				SharedGalleryID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
				SupportInfo: &armlabservices.SupportInfo{
					Email:        to.Ptr("help@contoso.com"),
					Instructions: to.Ptr("Contact support for help."),
					Phone:        to.Ptr("+1-202-555-0123"),
					URL:          to.Ptr("help.contoso.com"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/getLabPlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabPlans_CreateOrUpdate(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/putLabPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"putLabPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testlabplan",
		armlabservices.LabPlan{
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabPlanProperties{
				DefaultAutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				DefaultConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				DefaultNetworkProfile: &armlabservices.LabPlanNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				SharedGalleryID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
				SupportInfo: &armlabservices.SupportInfo{
					Email:        to.Ptr("help@contoso.com"),
					Instructions: to.Ptr("Contact support for help."),
					Phone:        to.Ptr("+1-202-555-0123"),
					URL:          to.Ptr("help.contoso.com"),
				},
			},
		},
		&armlabservices.LabPlansClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/putLabPlan.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/putLabPlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.LabPlan{
			Name:     to.Ptr("testlabplan"),
			Type:     to.Ptr("Microsoft.LabServices/LabPlan"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabPlanProperties{
				DefaultAutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				DefaultConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				DefaultNetworkProfile: &armlabservices.LabPlanNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				SharedGalleryID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
				SupportInfo: &armlabservices.SupportInfo{
					Email:        to.Ptr("help@contoso.com"),
					Instructions: to.Ptr("Contact support for help."),
					Phone:        to.Ptr("+1-202-555-0123"),
					URL:          to.Ptr("help.contoso.com"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/putLabPlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabPlans_Update(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/patchLabPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patchLabPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"testlabplan",
		armlabservices.LabPlanUpdate{
			Properties: &armlabservices.LabPlanUpdateProperties{
				DefaultConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
			},
		},
		&armlabservices.LabPlansClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/patchLabPlan.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/patchLabPlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.LabPlan{
			Name:     to.Ptr("testlabplan"),
			Type:     to.Ptr("Microsoft.LabServices/LabPlan"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabPlanProperties{
				DefaultAutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				DefaultConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				DefaultNetworkProfile: &armlabservices.LabPlanNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				SharedGalleryID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig"),
				SupportInfo: &armlabservices.SupportInfo{
					Email:        to.Ptr("help@contoso.com"),
					Instructions: to.Ptr("Contact support for help."),
					Phone:        to.Ptr("+1-202-555-0123"),
					URL:          to.Ptr("help.contoso.com"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/patchLabPlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabPlans_Delete(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/deleteLabPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"deleteLabPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlabplan",
		&armlabservices.LabPlansClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/deleteLabPlan.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/deleteLabPlan.json: %v", err)
	}
}

func TestLabPlans_SaveImage(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/saveImageVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"saveImageVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginSaveImage(ctx,
		"testrg123",
		"testlabplan",
		armlabservices.SaveImageBody{
			Name:                to.Ptr("Test Image"),
			LabVirtualMachineID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/virtualMachines/template"),
		},
		&armlabservices.LabPlansClientBeginSaveImageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/saveImageVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabPlans/saveImageVirtualMachine.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabServices/listOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabServices/listOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.OperationListResult{
			Value: []*armlabservices.Operation{
				{
					Name: to.Ptr("Microsoft.LabServices/labPlans/write"),
					Display: &armlabservices.OperationDisplay{
						Description: to.Ptr("Create new or update an existing lab plan."),
						Operation:   to.Ptr("Create or Update Lab Plan"),
						Provider:    to.Ptr("Microsoft Azure Lab Services"),
						Resource:    to.Ptr("Microsoft.LabServices/labPlans"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armlabservices.OriginUserSystem),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/LabServices/listOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_ListBySubscription(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/listLabs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listLabs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(&armlabservices.LabsClientListBySubscriptionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/listLabs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedLabs{
			Value: []*armlabservices.Lab{
				{
					Name:     to.Ptr("testlabplan"),
					Type:     to.Ptr("Microsoft.LabServices/Lab"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab"),
					Location: to.Ptr("westus"),
					Properties: &armlabservices.LabProperties{
						Description: to.Ptr("This is a test lab."),
						AutoShutdownProfile: &armlabservices.AutoShutdownProfile{
							DisconnectDelay:          to.Ptr("00:05"),
							IdleDelay:                to.Ptr("01:00"),
							NoConnectDelay:           to.Ptr("01:00"),
							ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
							ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
							ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
						},
						ConnectionProfile: &armlabservices.ConnectionProfile{
							ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
							WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
						},
						LabPlanID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
						SecurityProfile: &armlabservices.SecurityProfile{
							OpenAccess:       to.Ptr(armlabservices.EnableStateDisabled),
							RegistrationCode: to.Ptr("fAkEcodE"),
						},
						Title: to.Ptr("Test Lab"),
						VirtualMachineProfile: &armlabservices.VirtualMachineProfile{
							AdditionalCapabilities: &armlabservices.VirtualMachineAdditionalCapabilities{
								InstallGpuDrivers: to.Ptr(armlabservices.EnableStateDisabled),
							},
							AdminUser: &armlabservices.Credentials{
								Username: to.Ptr("test-user"),
							},
							CreateOption: to.Ptr(armlabservices.CreateOptionTemplateVM),
							ImageReference: &armlabservices.ImageReference{
								Offer:     to.Ptr("WindowsServer"),
								Publisher: to.Ptr("Microsoft"),
								SKU:       to.Ptr("2019-Datacenter"),
								Version:   to.Ptr("2019.0.20190410"),
							},
							OSType: to.Ptr(armlabservices.OsTypeWindows),
							SKU: &armlabservices.SKU{
								Name:     to.Ptr("Medium"),
								Capacity: to.Ptr[int32](20),
							},
							UsageQuota:        to.Ptr("10:00"),
							UseSharedPassword: to.Ptr(armlabservices.EnableStateDisabled),
						},
						NetworkProfile: &armlabservices.LabNetworkProfile{
							SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
						State:             to.Ptr(armlabservices.LabStateDraft),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedLabs) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedLabs)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/listLabs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_ListByResourceGroup(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/listResourceGroupLabs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listResourceGroupLabs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("testrg123",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/listResourceGroupLabs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedLabs{
			Value: []*armlabservices.Lab{
				{
					Name:     to.Ptr("testlabplan"),
					Type:     to.Ptr("Microsoft.LabServices/Lab"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab"),
					Location: to.Ptr("westus"),
					Properties: &armlabservices.LabProperties{
						Description: to.Ptr("This is a test lab."),
						AutoShutdownProfile: &armlabservices.AutoShutdownProfile{
							DisconnectDelay:          to.Ptr("00:05"),
							IdleDelay:                to.Ptr("01:00"),
							NoConnectDelay:           to.Ptr("01:00"),
							ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
							ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
							ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
						},
						ConnectionProfile: &armlabservices.ConnectionProfile{
							ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
							WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
							WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
						},
						LabPlanID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
						SecurityProfile: &armlabservices.SecurityProfile{
							OpenAccess:       to.Ptr(armlabservices.EnableStateDisabled),
							RegistrationCode: to.Ptr("fAkEcodE"),
						},
						Title: to.Ptr("Test Lab"),
						VirtualMachineProfile: &armlabservices.VirtualMachineProfile{
							AdditionalCapabilities: &armlabservices.VirtualMachineAdditionalCapabilities{
								InstallGpuDrivers: to.Ptr(armlabservices.EnableStateDisabled),
							},
							AdminUser: &armlabservices.Credentials{
								Username: to.Ptr("test-user"),
							},
							CreateOption: to.Ptr(armlabservices.CreateOptionTemplateVM),
							ImageReference: &armlabservices.ImageReference{
								Offer:     to.Ptr("WindowsServer"),
								Publisher: to.Ptr("Microsoft"),
								SKU:       to.Ptr("2019-Datacenter"),
								Version:   to.Ptr("2019.0.20190410"),
							},
							OSType: to.Ptr(armlabservices.OsTypeWindows),
							SKU: &armlabservices.SKU{
								Name:     to.Ptr("Medium"),
								Capacity: to.Ptr[int32](20),
							},
							UsageQuota:        to.Ptr("10:00"),
							UseSharedPassword: to.Ptr(armlabservices.EnableStateDisabled),
						},
						NetworkProfile: &armlabservices.LabNetworkProfile{
							SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
						State:             to.Ptr(armlabservices.LabStateDraft),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedLabs) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedLabs)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/listResourceGroupLabs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/getLab.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getLab"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/getLab.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Lab{
			Name:     to.Ptr("testlabplan"),
			Type:     to.Ptr("Microsoft.LabServices/Lab"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab"),
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabProperties{
				Description: to.Ptr("This is a test lab."),
				AutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				ConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				LabPlanID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
				SecurityProfile: &armlabservices.SecurityProfile{
					OpenAccess:       to.Ptr(armlabservices.EnableStateDisabled),
					RegistrationCode: to.Ptr("fAkEcodE"),
				},
				Title: to.Ptr("Test Lab"),
				VirtualMachineProfile: &armlabservices.VirtualMachineProfile{
					AdditionalCapabilities: &armlabservices.VirtualMachineAdditionalCapabilities{
						InstallGpuDrivers: to.Ptr(armlabservices.EnableStateDisabled),
					},
					AdminUser: &armlabservices.Credentials{
						Username: to.Ptr("test-user"),
					},
					CreateOption: to.Ptr(armlabservices.CreateOptionTemplateVM),
					ImageReference: &armlabservices.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("Microsoft"),
						SKU:       to.Ptr("2019-Datacenter"),
						Version:   to.Ptr("2019.0.20190410"),
					},
					OSType: to.Ptr(armlabservices.OsTypeWindows),
					SKU: &armlabservices.SKU{
						Name:     to.Ptr("Medium"),
						Capacity: to.Ptr[int32](20),
					},
					UsageQuota:        to.Ptr("10:00"),
					UseSharedPassword: to.Ptr(armlabservices.EnableStateDisabled),
				},
				NetworkProfile: &armlabservices.LabNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				State:             to.Ptr(armlabservices.LabStateDraft),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Lab) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Lab)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/getLab.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_CreateOrUpdate(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/putLab.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"putLab"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testlab",
		armlabservices.Lab{
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabProperties{
				Description: to.Ptr("This is a test lab."),
				AutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				ConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				LabPlanID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
				SecurityProfile: &armlabservices.SecurityProfile{
					OpenAccess: to.Ptr(armlabservices.EnableStateDisabled),
				},
				Title: to.Ptr("Test Lab"),
				VirtualMachineProfile: &armlabservices.VirtualMachineProfile{
					AdditionalCapabilities: &armlabservices.VirtualMachineAdditionalCapabilities{
						InstallGpuDrivers: to.Ptr(armlabservices.EnableStateDisabled),
					},
					AdminUser: &armlabservices.Credentials{
						Username: to.Ptr("test-user"),
					},
					CreateOption: to.Ptr(armlabservices.CreateOptionTemplateVM),
					ImageReference: &armlabservices.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("Microsoft"),
						SKU:       to.Ptr("2019-Datacenter"),
						Version:   to.Ptr("2019.0.20190410"),
					},
					SKU: &armlabservices.SKU{
						Name: to.Ptr("Medium"),
					},
					UsageQuota:        to.Ptr("10:00"),
					UseSharedPassword: to.Ptr(armlabservices.EnableStateDisabled),
				},
				NetworkProfile: &armlabservices.LabNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				State: to.Ptr(armlabservices.LabStateDraft),
			},
		},
		&armlabservices.LabsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/putLab.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/putLab.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Lab{
			Name:     to.Ptr("testlabplan"),
			Type:     to.Ptr("Microsoft.LabServices/Lab"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab"),
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabProperties{
				Description: to.Ptr("This is a test lab."),
				AutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				ConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				LabPlanID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
				SecurityProfile: &armlabservices.SecurityProfile{
					OpenAccess:       to.Ptr(armlabservices.EnableStateDisabled),
					RegistrationCode: to.Ptr("fAkEcodE"),
				},
				Title: to.Ptr("Test Lab"),
				VirtualMachineProfile: &armlabservices.VirtualMachineProfile{
					AdditionalCapabilities: &armlabservices.VirtualMachineAdditionalCapabilities{
						InstallGpuDrivers: to.Ptr(armlabservices.EnableStateDisabled),
					},
					AdminUser: &armlabservices.Credentials{
						Username: to.Ptr("test-user"),
					},
					CreateOption: to.Ptr(armlabservices.CreateOptionTemplateVM),
					ImageReference: &armlabservices.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("Microsoft"),
						SKU:       to.Ptr("2019-Datacenter"),
						Version:   to.Ptr("2019.0.20190410"),
					},
					OSType: to.Ptr(armlabservices.OsTypeWindows),
					SKU: &armlabservices.SKU{
						Name:     to.Ptr("Medium"),
						Capacity: to.Ptr[int32](20),
					},
					UsageQuota:        to.Ptr("10:00"),
					UseSharedPassword: to.Ptr(armlabservices.EnableStateDisabled),
				},
				NetworkProfile: &armlabservices.LabNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				State:             to.Ptr(armlabservices.LabStateDraft),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Lab) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Lab)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/putLab.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_Update(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/patchLab.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patchLab"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"testlab",
		armlabservices.LabUpdate{
			Properties: &armlabservices.LabUpdateProperties{
				SecurityProfile: &armlabservices.SecurityProfile{
					OpenAccess: to.Ptr(armlabservices.EnableStateEnabled),
				},
			},
		},
		&armlabservices.LabsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/patchLab.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/patchLab.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Lab{
			Name:     to.Ptr("testlabplan"),
			Type:     to.Ptr("Microsoft.LabServices/Lab"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab"),
			Location: to.Ptr("westus"),
			Properties: &armlabservices.LabProperties{
				Description: to.Ptr("This is a test lab."),
				AutoShutdownProfile: &armlabservices.AutoShutdownProfile{
					DisconnectDelay:          to.Ptr("00:05"),
					IdleDelay:                to.Ptr("01:00"),
					NoConnectDelay:           to.Ptr("01:00"),
					ShutdownOnDisconnect:     to.Ptr(armlabservices.EnableStateEnabled),
					ShutdownOnIdle:           to.Ptr(armlabservices.ShutdownOnIdleModeUserAbsence),
					ShutdownWhenNotConnected: to.Ptr(armlabservices.EnableStateEnabled),
				},
				ConnectionProfile: &armlabservices.ConnectionProfile{
					ClientRdpAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					ClientSSHAccess: to.Ptr(armlabservices.ConnectionTypePublic),
					WebRdpAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
					WebSSHAccess:    to.Ptr(armlabservices.ConnectionTypeNone),
				},
				LabPlanID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan"),
				SecurityProfile: &armlabservices.SecurityProfile{
					OpenAccess:       to.Ptr(armlabservices.EnableStateEnabled),
					RegistrationCode: to.Ptr("fAkEcodE"),
				},
				Title: to.Ptr("Test Lab"),
				VirtualMachineProfile: &armlabservices.VirtualMachineProfile{
					AdditionalCapabilities: &armlabservices.VirtualMachineAdditionalCapabilities{
						InstallGpuDrivers: to.Ptr(armlabservices.EnableStateDisabled),
					},
					AdminUser: &armlabservices.Credentials{
						Username: to.Ptr("test-user"),
					},
					CreateOption: to.Ptr(armlabservices.CreateOptionTemplateVM),
					ImageReference: &armlabservices.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("Microsoft"),
						SKU:       to.Ptr("2019-Datacenter"),
						Version:   to.Ptr("2019.0.20190410"),
					},
					SKU: &armlabservices.SKU{
						Name:     to.Ptr("Medium"),
						Capacity: to.Ptr[int32](20),
					},
					UsageQuota:        to.Ptr("10:00"),
					UseSharedPassword: to.Ptr(armlabservices.EnableStateDisabled),
				},
				NetworkProfile: &armlabservices.LabNetworkProfile{
					SubnetID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/id"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				State:             to.Ptr(armlabservices.LabStateDraft),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Lab) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Lab)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/patchLab.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_Delete(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/deleteLab.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"deleteLab"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlab",
		&armlabservices.LabsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/deleteLab.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/deleteLab.json: %v", err)
	}
}

func TestLabs_Publish(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/publishLab.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"publishLab"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginPublish(ctx,
		"testrg123",
		"testlab",
		&armlabservices.LabsClientBeginPublishOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/publishLab.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/publishLab.json: %v", err)
	}
}

func TestLabs_SyncGroup(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/syncLab.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"syncLab"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewLabsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginSyncGroup(ctx,
		"testrg123",
		"testlab",
		&armlabservices.LabsClientBeginSyncGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/syncLab.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Labs/syncLab.json: %v", err)
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/OperationResults/getOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getOperationResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewOperationResultsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"a64149d8-84cb-4566-ab8e-b4ee1a074174",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/OperationResults/getOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.OperationResult{
			Name:      to.Ptr("a64149d8-84cb-4566-ab8e-b4ee1a074174"),
			ID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.LabServices/operationresults/a64149d8-84cb-4566-ab8e-b4ee1a074174"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
			Status:    to.Ptr(armlabservices.OperationStatusInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/OperationResults/getOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_ListByLab(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/listSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getListSchedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewSchedulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByLab("testrg123",
		"testlab",
		&armlabservices.SchedulesClientListByLabOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/listSchedule.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedSchedules{
			Value: []*armlabservices.Schedule{
				{
					Name: to.Ptr("schedule1"),
					Type: to.Ptr("Microsoft.LabServices/Schedule"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/schedules/schedule1"),
					Properties: &armlabservices.ScheduleProperties{
						Notes: to.Ptr("Schedule 1 for students"),
						RecurrencePattern: &armlabservices.RecurrencePattern{
							ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
							Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyDaily),
							Interval:       to.Ptr[int32](1),
						},
						StartAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
						StopAt:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
						TimeZoneID:        to.Ptr("America/Los_Angeles"),
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("schedule2"),
					Type: to.Ptr("Microsoft.LabServices/Schedule"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/schedules/schedule2"),
					Properties: &armlabservices.ScheduleProperties{
						Notes: to.Ptr("Schedule 2 for students"),
						RecurrencePattern: &armlabservices.RecurrencePattern{
							ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
							Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyWeekly),
							WeekDays: []*armlabservices.WeekDay{
								to.Ptr(armlabservices.WeekDayMonday),
								to.Ptr(armlabservices.WeekDayTuesday),
								to.Ptr(armlabservices.WeekDayWednesday),
								to.Ptr(armlabservices.WeekDayThursday),
								to.Ptr(armlabservices.WeekDayFriday)},
						},
						StartAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
						StopAt:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
						TimeZoneID:        to.Ptr("America/Los_Angeles"),
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedSchedules) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedSchedules)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/listSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/getSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getSchedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewSchedulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/getSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Schedule{
			Name: to.Ptr("schedule1"),
			Type: to.Ptr("Microsoft.LabServices/Schedule"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/schedules/schedule1"),
			Properties: &armlabservices.ScheduleProperties{
				Notes: to.Ptr("Schedule 1 for students"),
				RecurrencePattern: &armlabservices.RecurrencePattern{
					ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
					Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyDaily),
					Interval:       to.Ptr[int32](1),
				},
				StartAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
				StopAt:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
				TimeZoneID:        to.Ptr("America/Los_Angeles"),
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/getSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_CreateOrUpdate(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/putSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"putSchedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewSchedulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		armlabservices.Schedule{
			Properties: &armlabservices.ScheduleProperties{
				Notes: to.Ptr("Schedule 1 for students"),
				RecurrencePattern: &armlabservices.RecurrencePattern{
					ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
					Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyDaily),
					Interval:       to.Ptr[int32](2),
				},
				StartAt:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
				StopAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
				TimeZoneID: to.Ptr("America/Los_Angeles"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/putSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Schedule{
			Name: to.Ptr("schedule1"),
			Type: to.Ptr("Microsoft.LabServices/Schedule"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/schedules/schedule1"),
			Properties: &armlabservices.ScheduleProperties{
				Notes: to.Ptr("Schedule 1 for students"),
				RecurrencePattern: &armlabservices.RecurrencePattern{
					ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
					Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyDaily),
					Interval:       to.Ptr[int32](2),
				},
				StartAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
				StopAt:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
				TimeZoneID:        to.Ptr("America/Los_Angeles"),
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/putSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_Update(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/patchSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patchSchedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewSchedulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		armlabservices.ScheduleUpdate{
			Properties: &armlabservices.ScheduleUpdateProperties{
				RecurrencePattern: &armlabservices.RecurrencePattern{
					ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
					Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyDaily),
					Interval:       to.Ptr[int32](2),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/patchSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.Schedule{
			Name: to.Ptr("schedule1"),
			Type: to.Ptr("Microsoft.LabServices/Schedule"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/schedules/schedule1"),
			Properties: &armlabservices.ScheduleProperties{
				Notes: to.Ptr("Schedule 1 for students"),
				RecurrencePattern: &armlabservices.RecurrencePattern{
					ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2020-08-14"); return t }()),
					Frequency:      to.Ptr(armlabservices.RecurrenceFrequencyDaily),
					Interval:       to.Ptr[int32](2),
				},
				StartAt:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T12:00:00Z"); return t }()),
				StopAt:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-26T18:00:00Z"); return t }()),
				TimeZoneID:        to.Ptr("America/Los_Angeles"),
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/patchSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_Delete(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/deleteSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"deleteSchedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewSchedulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlab",
		"schedule1",
		&armlabservices.SchedulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/deleteSchedule.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Schedules/deleteSchedule.json: %v", err)
	}
}

func TestUsers_ListByLab(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/listUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByLab("testrg123",
		"testlab",
		&armlabservices.UsersClientListByLabOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/listUser.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedUsers{
			Value: []*armlabservices.User{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.LabServices/User"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/users/testuser"),
					Properties: &armlabservices.UserProperties{
						AdditionalUsageQuota: to.Ptr("10:00"),
						DisplayName:          to.Ptr("Test User"),
						Email:                to.Ptr("testuser@contoso.com"),
						InvitationState:      to.Ptr(armlabservices.InvitationStateSent),
						ProvisioningState:    to.Ptr(armlabservices.ProvisioningStateSucceeded),
						RegistrationState:    to.Ptr(armlabservices.RegistrationStateRegistered),
						TotalUsage:           to.Ptr("23:59"),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedUsers) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedUsers)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/listUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/getUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		"testuser",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/getUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.User{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.LabServices/User"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/users/testuser"),
			Properties: &armlabservices.UserProperties{
				AdditionalUsageQuota: to.Ptr("10:00"),
				DisplayName:          to.Ptr("Test User"),
				Email:                to.Ptr("testuser@contoso.com"),
				InvitationState:      to.Ptr(armlabservices.InvitationStateSent),
				ProvisioningState:    to.Ptr(armlabservices.ProvisioningStateSucceeded),
				RegistrationState:    to.Ptr(armlabservices.RegistrationStateRegistered),
				TotalUsage:           to.Ptr("23:59"),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/getUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_CreateOrUpdate(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/putUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"putUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testlab",
		"testuser",
		armlabservices.User{
			Properties: &armlabservices.UserProperties{
				AdditionalUsageQuota: to.Ptr("20:00"),
				Email:                to.Ptr("testuser@contoso.com"),
			},
		},
		&armlabservices.UsersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/putUser.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/putUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.User{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.LabServices/User"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/users/testuser"),
			Properties: &armlabservices.UserProperties{
				AdditionalUsageQuota: to.Ptr("20:00"),
				DisplayName:          to.Ptr("Test User"),
				Email:                to.Ptr("testuser@contoso.com"),
				InvitationState:      to.Ptr(armlabservices.InvitationStateSent),
				ProvisioningState:    to.Ptr(armlabservices.ProvisioningStateSucceeded),
				RegistrationState:    to.Ptr(armlabservices.RegistrationStateRegistered),
				TotalUsage:           to.Ptr("23:59"),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/putUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Update(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/patchUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patchUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"testlab",
		"testuser",
		armlabservices.UserUpdate{
			Properties: &armlabservices.UserUpdateProperties{
				AdditionalUsageQuota: to.Ptr("20:00"),
			},
		},
		&armlabservices.UsersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/patchUser.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/patchUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.User{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.LabServices/User"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/users/testuser"),
			Properties: &armlabservices.UserProperties{
				AdditionalUsageQuota: to.Ptr("20:00"),
				DisplayName:          to.Ptr("Test User"),
				Email:                to.Ptr("testuser@contoso.com"),
				InvitationState:      to.Ptr(armlabservices.InvitationStateSent),
				ProvisioningState:    to.Ptr(armlabservices.ProvisioningStateSucceeded),
				RegistrationState:    to.Ptr(armlabservices.RegistrationStateRegistered),
				TotalUsage:           to.Ptr("23:59"),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/patchUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Delete(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/deleteUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"deleteUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"testlab",
		"testuser",
		&armlabservices.UsersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/deleteUser.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/deleteUser.json: %v", err)
	}
}

func TestUsers_Invite(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/inviteUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"inviteUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginInvite(ctx,
		"testrg123",
		"testlab",
		"testuser",
		armlabservices.InviteBody{
			Text: to.Ptr("Invitation to lab testlab"),
		},
		&armlabservices.UsersClientBeginInviteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/inviteUser.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Users/inviteUser.json: %v", err)
	}
}

func TestVirtualMachines_ListByLab(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/listVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByLab("testrg123",
		"testlab",
		&armlabservices.VirtualMachinesClientListByLabOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/listVirtualMachine.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedVirtualMachines{
			Value: []*armlabservices.VirtualMachine{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.LabServices/VirtualMachine"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/virtualMachines/template"),
					Properties: &armlabservices.VirtualMachineProperties{
						ClaimedByUserID: to.Ptr("testuser567"),
						ConnectionProfile: &armlabservices.VirtualMachineConnectionProfile{
							AdminUsername:    to.Ptr("user123"),
							PrivateIPAddress: to.Ptr("192.168.2.1"),
							RdpAuthority:     to.Ptr("vm-42.contoso.com:3389"),
							RdpInBrowserURL:  to.Ptr("vm-42.contoso.com"),
							SSHAuthority:     to.Ptr("vm-42.contoso.com:22"),
							SSHInBrowserURL:  to.Ptr("vm-42.contoso.com"),
						},
						ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
						State:             to.Ptr(armlabservices.VirtualMachineStateRunning),
						VMType:            to.Ptr(armlabservices.VirtualMachineTypeTemplate),
					},
					SystemData: &armlabservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("identity123"),
						CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
						LastModifiedBy:     to.Ptr("identity123"),
						LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedVirtualMachines) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedVirtualMachines)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/listVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/getVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testlab",
		"template",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/getVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlabservices.VirtualMachine{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.LabServices/VirtualMachine"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labs/testlab/virtualMachines/template"),
			Properties: &armlabservices.VirtualMachineProperties{
				ClaimedByUserID: to.Ptr("testuser567"),
				ConnectionProfile: &armlabservices.VirtualMachineConnectionProfile{
					AdminUsername:    to.Ptr("user123"),
					PrivateIPAddress: to.Ptr("192.168.2.1"),
					RdpAuthority:     to.Ptr("vm-42.contoso.com:3389"),
					RdpInBrowserURL:  to.Ptr("vm-42.contoso.com"),
					SSHAuthority:     to.Ptr("vm-42.contoso.com:22"),
					SSHInBrowserURL:  to.Ptr("vm-42.contoso.com"),
				},
				ProvisioningState: to.Ptr(armlabservices.ProvisioningStateSucceeded),
				State:             to.Ptr(armlabservices.VirtualMachineStateRunning),
				VMType:            to.Ptr(armlabservices.VirtualMachineTypeTemplate),
			},
			SystemData: &armlabservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T10:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("identity123"),
				CreatedByType:      to.Ptr(armlabservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T09:12:28Z"); return t }()),
				LastModifiedBy:     to.Ptr("identity123"),
				LastModifiedByType: to.Ptr(armlabservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/getVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/startVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"startVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStart(ctx,
		"testrg123",
		"testlab",
		"template",
		&armlabservices.VirtualMachinesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/startVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/startVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Stop(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/stopVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"stopVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStop(ctx,
		"testrg123",
		"testlab",
		"template",
		&armlabservices.VirtualMachinesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/stopVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/stopVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Reimage(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/reimageVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"reimageVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginReimage(ctx,
		"testrg123",
		"testlab",
		"template",
		&armlabservices.VirtualMachinesClientBeginReimageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/reimageVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/reimageVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Redeploy(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/redeployVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"redeployVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginRedeploy(ctx,
		"testrg123",
		"testlab",
		"template",
		&armlabservices.VirtualMachinesClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/redeployVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/redeployVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_ResetPassword(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/resetPasswordVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"resetPasswordVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewVirtualMachinesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginResetPassword(ctx,
		"testrg123",
		"testlab",
		"template",
		armlabservices.ResetPasswordBody{
			Password: to.Ptr("example-password"),
			Username: to.Ptr("example-username"),
		},
		&armlabservices.VirtualMachinesClientBeginResetPasswordOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/resetPasswordVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/VirtualMachines/resetPasswordVirtualMachine.json: %v", err)
	}
}

func TestUsages_ListByLocation(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Usages/getUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewUsagesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByLocation("westus2",
		&armlabservices.UsagesClientListByLocationOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Usages/getUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.ListUsagesResult{
			Value: []*armlabservices.Usage{
				{
					Name: &armlabservices.UsageName{
						Value: to.Ptr("NCasv3T4"),
					},
					CurrentValue: to.Ptr[int64](10),
					ID:           to.Ptr(""),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armlabservices.UsageUnitCount),
				},
				{
					Name: &armlabservices.UsageName{
						Value: to.Ptr("ESv4"),
					},
					CurrentValue: to.Ptr[int64](5),
					ID:           to.Ptr(""),
					Limit:        to.Ptr[int64](30),
					Unit:         to.Ptr(armlabservices.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListUsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Usages/getUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Skus/listSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listSkus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlabservices.NewSKUsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(&armlabservices.SKUsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Skus/listSkus.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlabservices.PagedSKUInfos{
			Value: []*armlabservices.SKUInfo{
				{
					Name: to.Ptr("Standard_Fv2_2_4GB_64_S_SSD"),
					Capabilities: []*armlabservices.SKUCapabilities{
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("4"),
						},
						{
							Name:  to.Ptr("StorageGB"),
							Value: to.Ptr("64"),
						},
						{
							Name:  to.Ptr("StorageType"),
							Value: to.Ptr("StandardSSD"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1,V2"),
						},
						{
							Name:  to.Ptr("IsGpu"),
							Value: to.Ptr("False"),
						}},
					Capacity: &armlabservices.SKUCapacity{
						Default:   to.Ptr[int64](1),
						Maximum:   to.Ptr[int64](400),
						Minimum:   to.Ptr[int64](0),
						ScaleType: to.Ptr(armlabservices.ScaleTypeAutomatic),
					},
					Costs: []*armlabservices.SKUCost{
						{
							ExtendedUnit: to.Ptr("WindowsHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](20.4),
						},
						{
							ExtendedUnit: to.Ptr("HybridBenefitHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](20.4),
						},
						{
							ExtendedUnit: to.Ptr("InactiveHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](0.7),
						},
						{
							ExtendedUnit: to.Ptr("LinuxHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](20.4),
						}},
					Family: to.Ptr("Fv2"),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("labs"),
					Size:         to.Ptr("Fv2_2_4GB_64_S_SSD"),
					Tier:         to.Ptr(armlabservices.LabServicesSKUTierStandard),
				},
				{
					Name: to.Ptr("Standard_Fv2_2_4GB_256_S_SSD"),
					Capabilities: []*armlabservices.SKUCapabilities{
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("4"),
						},
						{
							Name:  to.Ptr("StorageGB"),
							Value: to.Ptr("256"),
						},
						{
							Name:  to.Ptr("StorageType"),
							Value: to.Ptr("StandardSSD"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1,V2"),
						},
						{
							Name:  to.Ptr("IsGpu"),
							Value: to.Ptr("False"),
						}},
					Capacity: &armlabservices.SKUCapacity{
						Default:   to.Ptr[int64](1),
						Maximum:   to.Ptr[int64](400),
						Minimum:   to.Ptr[int64](0),
						ScaleType: to.Ptr(armlabservices.ScaleTypeAutomatic),
					},
					Costs: []*armlabservices.SKUCost{
						{
							ExtendedUnit: to.Ptr("WindowsHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](22.8),
						},
						{
							ExtendedUnit: to.Ptr("HybridBenefitHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](22.8),
						},
						{
							ExtendedUnit: to.Ptr("InactiveHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](2.7),
						},
						{
							ExtendedUnit: to.Ptr("LinuxHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](22.8),
						}},
					Family: to.Ptr("Fv2"),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("labs"),
					Size:         to.Ptr("Fv2_2_4GB_256_S_SSD"),
					Tier:         to.Ptr(armlabservices.LabServicesSKUTierStandard),
				},
				{
					Name: to.Ptr("Standard_Dv4_2_8GB_128_S_SSD"),
					Capabilities: []*armlabservices.SKUCapabilities{
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("8"),
						},
						{
							Name:  to.Ptr("StorageGB"),
							Value: to.Ptr("128"),
						},
						{
							Name:  to.Ptr("StorageType"),
							Value: to.Ptr("StandardSSD"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1,V2"),
						},
						{
							Name:  to.Ptr("IsGpu"),
							Value: to.Ptr("False"),
						}},
					Capacity: &armlabservices.SKUCapacity{
						Default:   to.Ptr[int64](1),
						Maximum:   to.Ptr[int64](400),
						Minimum:   to.Ptr[int64](0),
						ScaleType: to.Ptr(armlabservices.ScaleTypeAutomatic),
					},
					Costs: []*armlabservices.SKUCost{
						{
							ExtendedUnit: to.Ptr("WindowsHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](24.2),
						},
						{
							ExtendedUnit: to.Ptr("HybridBenefitHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](24.2),
						},
						{
							ExtendedUnit: to.Ptr("InactiveHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](1.4),
						},
						{
							ExtendedUnit: to.Ptr("LinuxHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](24.2),
						}},
					Family: to.Ptr("Dv4"),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("labs"),
					Size:         to.Ptr("Dv4_2_8GB_128_S_SSD"),
					Tier:         to.Ptr(armlabservices.LabServicesSKUTierStandard),
				},
				{
					Name: to.Ptr("Standard_Dv4_2_8GB_256_S_SSD"),
					Capabilities: []*armlabservices.SKUCapabilities{
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("8"),
						},
						{
							Name:  to.Ptr("StorageGB"),
							Value: to.Ptr("256"),
						},
						{
							Name:  to.Ptr("StorageType"),
							Value: to.Ptr("StandardSSD"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1,V2"),
						},
						{
							Name:  to.Ptr("IsGpu"),
							Value: to.Ptr("False"),
						}},
					Capacity: &armlabservices.SKUCapacity{
						Default:   to.Ptr[int64](1),
						Maximum:   to.Ptr[int64](400),
						Minimum:   to.Ptr[int64](0),
						ScaleType: to.Ptr(armlabservices.ScaleTypeAutomatic),
					},
					Costs: []*armlabservices.SKUCost{
						{
							ExtendedUnit: to.Ptr("WindowsHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](25.8),
						},
						{
							ExtendedUnit: to.Ptr("HybridBenefitHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](25.8),
						},
						{
							ExtendedUnit: to.Ptr("InactiveHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](2.7),
						},
						{
							ExtendedUnit: to.Ptr("LinuxHourly"),
							MeterID:      to.Ptr(""),
							Quantity:     to.Ptr[float32](25.8),
						}},
					Family: to.Ptr("Dv4"),
					Locations: []*string{
						to.Ptr("westus2")},
					ResourceType: to.Ptr("labs"),
					Size:         to.Ptr("Dv4_2_8GB_256_S_SSD"),
					Tier:         to.Ptr(armlabservices.LabServicesSKUTierStandard),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PagedSKUInfos) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PagedSKUInfos)
			t.Fatalf("Mock response is not equal to example response for example specification/labservices/resource-manager/Microsoft.LabServices/preview/2021-11-15-preview/examples/Skus/listSkus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
