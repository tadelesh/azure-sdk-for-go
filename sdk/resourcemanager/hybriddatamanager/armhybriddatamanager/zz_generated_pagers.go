//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybriddatamanager

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DataManagersClientListByResourceGroupPager provides operations for iterating over paged responses.
type DataManagersClientListByResourceGroupPager struct {
	client    *DataManagersClient
	current   DataManagersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataManagersClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DataManagersClientListByResourceGroupPager) NextPage(ctx context.Context) (DataManagersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DataManagersClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataManagersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataManagersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataManagersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return DataManagersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataManagersClientListPager provides operations for iterating over paged responses.
type DataManagersClientListPager struct {
	client    *DataManagersClient
	current   DataManagersClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataManagersClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DataManagersClientListPager) NextPage(ctx context.Context) (DataManagersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DataManagersClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataManagersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataManagersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataManagersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DataManagersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataServicesClientListByDataManagerPager provides operations for iterating over paged responses.
type DataServicesClientListByDataManagerPager struct {
	client    *DataServicesClient
	current   DataServicesClientListByDataManagerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataServicesClientListByDataManagerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataServicesClientListByDataManagerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataServiceList.NextLink == nil || len(*p.current.DataServiceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataServicesClientListByDataManagerPager) NextPage(ctx context.Context) (DataServicesClientListByDataManagerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataServicesClientListByDataManagerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataServicesClientListByDataManagerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataServicesClientListByDataManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataServicesClientListByDataManagerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataManagerHandleResponse(resp)
	if err != nil {
		return DataServicesClientListByDataManagerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataStoreTypesClientListByDataManagerPager provides operations for iterating over paged responses.
type DataStoreTypesClientListByDataManagerPager struct {
	client    *DataStoreTypesClient
	current   DataStoreTypesClientListByDataManagerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataStoreTypesClientListByDataManagerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataStoreTypesClientListByDataManagerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataStoreTypeList.NextLink == nil || len(*p.current.DataStoreTypeList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataStoreTypesClientListByDataManagerPager) NextPage(ctx context.Context) (DataStoreTypesClientListByDataManagerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataStoreTypesClientListByDataManagerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataStoreTypesClientListByDataManagerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataStoreTypesClientListByDataManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataStoreTypesClientListByDataManagerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataManagerHandleResponse(resp)
	if err != nil {
		return DataStoreTypesClientListByDataManagerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataStoresClientListByDataManagerPager provides operations for iterating over paged responses.
type DataStoresClientListByDataManagerPager struct {
	client    *DataStoresClient
	current   DataStoresClientListByDataManagerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataStoresClientListByDataManagerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataStoresClientListByDataManagerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataStoreList.NextLink == nil || len(*p.current.DataStoreList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataStoresClientListByDataManagerPager) NextPage(ctx context.Context) (DataStoresClientListByDataManagerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataStoresClientListByDataManagerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataStoresClientListByDataManagerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataStoresClientListByDataManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataStoresClientListByDataManagerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataManagerHandleResponse(resp)
	if err != nil {
		return DataStoresClientListByDataManagerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// JobDefinitionsClientListByDataManagerPager provides operations for iterating over paged responses.
type JobDefinitionsClientListByDataManagerPager struct {
	client    *JobDefinitionsClient
	current   JobDefinitionsClientListByDataManagerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobDefinitionsClientListByDataManagerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *JobDefinitionsClientListByDataManagerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobDefinitionList.NextLink == nil || len(*p.current.JobDefinitionList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *JobDefinitionsClientListByDataManagerPager) NextPage(ctx context.Context) (JobDefinitionsClientListByDataManagerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return JobDefinitionsClientListByDataManagerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return JobDefinitionsClientListByDataManagerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return JobDefinitionsClientListByDataManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return JobDefinitionsClientListByDataManagerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataManagerHandleResponse(resp)
	if err != nil {
		return JobDefinitionsClientListByDataManagerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// JobDefinitionsClientListByDataServicePager provides operations for iterating over paged responses.
type JobDefinitionsClientListByDataServicePager struct {
	client    *JobDefinitionsClient
	current   JobDefinitionsClientListByDataServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobDefinitionsClientListByDataServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *JobDefinitionsClientListByDataServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobDefinitionList.NextLink == nil || len(*p.current.JobDefinitionList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *JobDefinitionsClientListByDataServicePager) NextPage(ctx context.Context) (JobDefinitionsClientListByDataServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return JobDefinitionsClientListByDataServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return JobDefinitionsClientListByDataServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return JobDefinitionsClientListByDataServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return JobDefinitionsClientListByDataServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataServiceHandleResponse(resp)
	if err != nil {
		return JobDefinitionsClientListByDataServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// JobsClientListByDataManagerPager provides operations for iterating over paged responses.
type JobsClientListByDataManagerPager struct {
	client    *JobsClient
	current   JobsClientListByDataManagerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobsClientListByDataManagerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *JobsClientListByDataManagerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobList.NextLink == nil || len(*p.current.JobList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *JobsClientListByDataManagerPager) NextPage(ctx context.Context) (JobsClientListByDataManagerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return JobsClientListByDataManagerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return JobsClientListByDataManagerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return JobsClientListByDataManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return JobsClientListByDataManagerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataManagerHandleResponse(resp)
	if err != nil {
		return JobsClientListByDataManagerResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// JobsClientListByDataServicePager provides operations for iterating over paged responses.
type JobsClientListByDataServicePager struct {
	client    *JobsClient
	current   JobsClientListByDataServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobsClientListByDataServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *JobsClientListByDataServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobList.NextLink == nil || len(*p.current.JobList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *JobsClientListByDataServicePager) NextPage(ctx context.Context) (JobsClientListByDataServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return JobsClientListByDataServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return JobsClientListByDataServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return JobsClientListByDataServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return JobsClientListByDataServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataServiceHandleResponse(resp)
	if err != nil {
		return JobsClientListByDataServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// JobsClientListByJobDefinitionPager provides operations for iterating over paged responses.
type JobsClientListByJobDefinitionPager struct {
	client    *JobsClient
	current   JobsClientListByJobDefinitionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobsClientListByJobDefinitionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *JobsClientListByJobDefinitionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobList.NextLink == nil || len(*p.current.JobList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *JobsClientListByJobDefinitionPager) NextPage(ctx context.Context) (JobsClientListByJobDefinitionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return JobsClientListByJobDefinitionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return JobsClientListByJobDefinitionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return JobsClientListByJobDefinitionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return JobsClientListByJobDefinitionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByJobDefinitionHandleResponse(resp)
	if err != nil {
		return JobsClientListByJobDefinitionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableProviderOperations.NextLink == nil || len(*p.current.AvailableProviderOperations.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PublicKeysClientListByDataManagerPager provides operations for iterating over paged responses.
type PublicKeysClientListByDataManagerPager struct {
	client    *PublicKeysClient
	current   PublicKeysClientListByDataManagerResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PublicKeysClientListByDataManagerResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PublicKeysClientListByDataManagerPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicKeyList.NextLink == nil || len(*p.current.PublicKeyList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PublicKeysClientListByDataManagerPager) NextPage(ctx context.Context) (PublicKeysClientListByDataManagerResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PublicKeysClientListByDataManagerResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PublicKeysClientListByDataManagerResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PublicKeysClientListByDataManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PublicKeysClientListByDataManagerResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDataManagerHandleResponse(resp)
	if err != nil {
		return PublicKeysClientListByDataManagerResponse{}, err
	}
	p.current = result
	return p.current, nil
}
