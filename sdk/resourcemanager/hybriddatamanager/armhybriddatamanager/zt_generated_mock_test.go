//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybriddatamanager_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybriddatamanager/armhybriddatamanager"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Operations_List-GET-example-11.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_ListGET11"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Operations_List-GET-example-11.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.AvailableProviderOperations{
			Value: []*armhybriddatamanager.AvailableProviderOperation{
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/write"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Create or update Job definitions"),
						Operation:   to.Ptr("Creates or updates Job definitions"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Job definitions"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/delete"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Delete Job definitions"),
						Operation:   to.Ptr("Delete Job definitions"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Job definitions"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Job definitions"),
						Operation:   to.Ptr("Get Job definitions"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Job definitions"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/jobDefinitions/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Job definitions"),
						Operation:   to.Ptr("Get Job definitions"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Job definitions"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/listResults/action"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Get job defintions"),
						Operation:   to.Ptr("Get job definitions"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Job definitions"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/run/action"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Run job defintions"),
						Operation:   to.Ptr("Run job definitions"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Job definitions"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataStores/operationResults/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Operation results"),
						Operation:   to.Ptr("Get Operation results"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Operation results"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/operationResults/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Operation results"),
						Operation:   to.Ptr("Get Operation results"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Operation results"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/jobs/operationResults/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Operation results"),
						Operation:   to.Ptr("Get Operation results"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Operation results"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/operationResults/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Operation results"),
						Operation:   to.Ptr("Get Operation results"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Operation results"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/publicKeys/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Public keys"),
						Operation:   to.Ptr("Get Public keys"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Public keys"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Data services"),
						Operation:   to.Ptr("Get Data services"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Data services"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataStores/write"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Create or update Datastores"),
						Operation:   to.Ptr("Creates or updates Datastores"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Datastores"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataStores/delete"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Delete Datastores"),
						Operation:   to.Ptr("Delete Datastores"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Datastores"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataStores/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Datastores"),
						Operation:   to.Ptr("Get Datastores"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Datastores"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Datastore types"),
						Operation:   to.Ptr("Get Datastore types"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Datastore types"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/delete"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Delete Data managers"),
						Operation:   to.Ptr("Delete Data managers"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Data managers"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Data managers"),
						Operation:   to.Ptr("Get Data managers"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Data managers"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/write"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Create or update Data managers"),
						Operation:   to.Ptr("Creates or updates Data managers"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Data managers"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/jobs/cancel/action"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Cancel jobs"),
						Operation:   to.Ptr("Cancel jobs"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/jobs/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Jobs"),
						Operation:   to.Ptr("Get Jobs"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/jobs/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Jobs"),
						Operation:   to.Ptr("Get Jobs"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobs/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read Jobs"),
						Operation:   to.Ptr("Get Jobs"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions/jobs/resume/action"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Resume jobs"),
						Operation:   to.Ptr("Resumes jobs"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				},
				{
					Name: to.Ptr("Microsoft.HybridData/read"),
					Display: &armhybriddatamanager.AvailableProviderOperationDisplay{
						Description: to.Ptr("Read ArmApiRes_Microsoft.HybridData"),
						Operation:   to.Ptr("Get ArmApiRes_Microsoft.HybridData"),
						Provider:    to.Ptr("Microsoft.HybridData"),
						Resource:    to.Ptr("ArmApiRes_Microsoft.HybridData"),
					},
					Origin:     to.Ptr("user"),
					Properties: map[string]interface{}{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableProviderOperations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableProviderOperations)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Operations_List-GET-example-11.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataManagers_List(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_List-GET-example-21.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataManagers_ListGET21"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataManagersClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_List-GET-example-21.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.DataManagerList{
			Value: []*armhybriddatamanager.DataManager{
				{
					Name:     to.Ptr("batchcertneafterdep1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertneafterdep1"),
					Location: to.Ptr("northeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-23T09%3A58%3A15.3299896Z'\"_W/\"datetime'2018-07-23T09%3A58%3A15.3500041Z'\""),
				},
				{
					Name:     to.Ptr("batchcertneold"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertneold"),
					Location: to.Ptr("northeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-16T09%3A46%3A06.3239385Z'\"_W/\"datetime'2018-07-16T09%3A46%3A06.3289422Z'\""),
				},
				{
					Name:     to.Ptr("dmsnesmoketest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dmsnesmoketest"),
					Location: to.Ptr("northeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-15T10%3A53%3A10.0933461Z'\"_W/\"datetime'2018-03-15T10%3A53%3A10.1213654Z'\""),
				},
				{
					Name:     to.Ptr("ne-07-10"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/ne-07-10"),
					Location: to.Ptr("northeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-10T06%3A36%3A18.0878861Z'\"_W/\"datetime'2018-07-10T06%3A36%3A18.1139046Z'\""),
				},
				{
					Name:     to.Ptr("dms-04-10"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dms-04-10"),
					Location: to.Ptr("eastus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-04-10T06%3A09%3A32.3093315Z'\"_W/\"datetime'2018-04-10T06%3A09%3A32.3243425Z'\""),
				},
				{
					Name:     to.Ptr("eus-07-08"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/eus-07-08"),
					Location: to.Ptr("eastus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-07T19%3A05%3A00.7594128Z'\"_W/\"datetime'2018-07-07T19%3A05%3A00.7664174Z'\""),
				},
				{
					Name:     to.Ptr("eus-07-10"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/eus-07-10"),
					Location: to.Ptr("eastus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-10T06%3A36%3A46.642745Z'\"_W/\"datetime'2018-07-10T06%3A36%3A46.7658314Z'\""),
				},
				{
					Name:     to.Ptr("batchcertwus2afterdep1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertwus2afterdep1"),
					Location: to.Ptr("westus2"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-23T07%3A44%3A12.1141909Z'\"_W/\"datetime'2018-07-23T07%3A44%3A12.1432118Z'\""),
				},
				{
					Name:     to.Ptr("batchcertwus2old"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertwus2old"),
					Location: to.Ptr("westus2"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-16T09%3A44%3A49.261222Z'\"_W/\"datetime'2018-07-16T09%3A44%3A49.2702259Z'\""),
				},
				{
					Name:     to.Ptr("smoketestwus2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/smoketestwus2"),
					Location: to.Ptr("westus2"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-20T08%3A08%3A52.7007451Z'\"_W/\"datetime'2018-03-20T08%3A08%3A52.7207592Z'\""),
				},
				{
					Name:     to.Ptr("AzureSDKOperations"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/AzureSDKOperations"),
					Location: to.Ptr("westus2"),
					SKU:      &armhybriddatamanager.SKU{},
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"datetime'2019-02-17T14%3A50%3A37.866739Z'\"_W/\"datetime'2019-02-17T14%3A50%3A38.038859Z'\""),
				},
				{
					Name:     to.Ptr("batchcertwcusafterdep1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertwcusafterdep1"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-18T04%3A48%3A50.1962283Z'\"_W/\"datetime'2018-07-18T04%3A48%3A50.3433306Z'\""),
				},
				{
					Name:     to.Ptr("batchcertwcusold"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertwcusold"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-16T09%3A43%3A43.569014Z'\"_W/\"datetime'2018-07-16T09%3A43%3A43.5740171Z'\""),
				},
				{
					Name:     to.Ptr("smoketestwcus"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/smoketestwcus"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-20T08%3A08%3A11.5901685Z'\"_W/\"datetime'2018-03-20T08%3A08%3A11.6161871Z'\""),
				},
				{
					Name:     to.Ptr("wcus04-13"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/wcus04-13"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-04-13T09%3A17%3A33.9031753Z'\"_W/\"datetime'2018-04-13T09%3A17%3A33.9301949Z'\""),
				},
				{
					Name:     to.Ptr("wcus07-05"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/wcus07-05"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-05T14%3A40%3A04.7506699Z'\"_W/\"datetime'2018-07-05T14%3A40%3A04.7776888Z'\""),
				},
				{
					Name:     to.Ptr("wcussmoketest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/wcussmoketest"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-05T11%3A17%3A08.7276428Z'\"_W/\"datetime'2018-06-05T11%3A17%3A08.7336469Z'\""),
				},
				{
					Name:     to.Ptr("smoketest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ForDMS/providers/Microsoft.HybridData/dataManagers/smoketest"),
					Location: to.Ptr("westcentralus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-05-17T09%3A53%3A29.1283879Z'\"_W/\"datetime'2019-05-17T09%3A53%3A29.1844278Z'\""),
				},
				{
					Name:     to.Ptr("seasmoketestresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/amemigration/providers/Microsoft.HybridData/dataManagers/seasmoketestresource"),
					Location: to.Ptr("southeastasia"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-07-06T16%3A47%3A17.0360354Z'\"_W/\"datetime'2019-07-06T16%3A47%3A17.2111588Z'\""),
				},
				{
					Name:     to.Ptr("batchcertseaafterdep1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertseaafterdep1"),
					Location: to.Ptr("southeastasia"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-23T08%3A24%3A48.4779951Z'\"_W/\"datetime'2018-07-23T08%3A24%3A48.5120189Z'\""),
				},
				{
					Name:     to.Ptr("batchcertseaold"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertseaold"),
					Location: to.Ptr("southeastasia"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-16T10%3A00%3A28.3513242Z'\"_W/\"datetime'2018-07-16T10%3A00%3A28.3583291Z'\""),
				},
				{
					Name:     to.Ptr("testresourceon613"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/testresourceon613"),
					Location: to.Ptr("southeastasia"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-13T18%3A04%3A02.4340032Z'\"_W/\"datetime'2018-06-13T18%3A04%3A02.4430097Z'\""),
				},
				{
					Name:     to.Ptr("copyexp-wus-int"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/copyspeedexp/providers/Microsoft.HybridData/dataManagers/copyexp-wus-int"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-05-24T10%3A28%3A41.92206Z'\"_W/\"datetime'2019-05-24T10%3A28%3A42.0641646Z'\""),
				},
				{
					Name:     to.Ptr("testServiceIncident"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/DmsBvtRG3/providers/Microsoft.HybridData/dataManagers/testServiceIncident"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-02-22T11%3A13%3A22.4906285Z'\"_W/\"datetime'2018-02-22T11%3A13%3A22.6667555Z'\""),
				},
				{
					Name:     to.Ptr("prtankWusTestRes"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/DmsBvtRG/providers/Microsoft.HybridData/dataManagers/prtankWusTestRes"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-11-29T04%3A12%3A49.3583436Z'\"_W/\"datetime'2019-11-29T04%3A12%3A49.5344699Z'\""),
				},
				{
					Name:     to.Ptr("storagemanagerresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/DmsBvtRG/providers/Microsoft.HybridData/dataManagers/storagemanagerresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{
						"doNotDelete": to.Ptr("Yes"),
					},
					Etag: to.Ptr("W/\"datetime'2019-11-19T08%3A06%3A46.7263604Z'\"_W/\"datetime'2019-11-19T08%3A06%3A46.7824012Z'\""),
				},
				{
					Name:     to.Ptr("sdf"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsdatasource/providers/Microsoft.HybridData/dataManagers/sdf"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-05-27T05%3A27%3A35.150482Z'\"_W/\"datetime'2019-05-27T05%3A27%3A35.3105951Z'\""),
				},
				{
					Name:     to.Ptr("int-wus-11-29"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsintrg/providers/Microsoft.HybridData/dataManagers/int-wus-11-29"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-11-29T07%3A55%3A30.6749871Z'\"_W/\"datetime'2018-11-29T07%3A55%3A30.6809932Z'\""),
				},
				{
					Name:     to.Ptr("intnewresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsintrg/providers/Microsoft.HybridData/dataManagers/intnewresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-17T15%3A03%3A36.5993632Z'\"_W/\"datetime'2018-03-17T15%3A03%3A36.7594788Z'\""),
				},
				{
					Name:     to.Ptr("intresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsintrg/providers/Microsoft.HybridData/dataManagers/intresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-13T08%3A11%3A39.9025375Z'\"_W/\"datetime'2018-03-13T08%3A11%3A40.1036797Z'\""),
				},
				{
					Name:     to.Ptr("intresource-10-30"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsintrg/providers/Microsoft.HybridData/dataManagers/intresource-10-30"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-10-30T09%3A56%3A32.9053638Z'\"_W/\"datetime'2018-10-30T09%3A56%3A33.0704765Z'\""),
				},
				{
					Name:     to.Ptr("testresourceint"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsintrg/providers/Microsoft.HybridData/dataManagers/testresourceint"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-13T08%3A11%3A40.1389003Z'\"_W/\"datetime'2018-03-13T08%3A11%3A40.2479789Z'\""),
				},
				{
					Name:     to.Ptr("batchcertoldresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertoldresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-12T09%3A46%3A50.1774789Z'\"_W/\"datetime'2018-07-12T09%3A46%3A50.3215821Z'\""),
				},
				{
					Name:     to.Ptr("dmswusresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dmswusresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-03-01T11%3A52%3A02.7715263Z'\"_W/\"datetime'2018-03-01T11%3A52%3A02.7765292Z'\""),
				},
				{
					Name:     to.Ptr("dsmsnodebinarytest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dsmsnodebinarytest"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-07T13%3A08%3A29.4575101Z'\"_W/\"datetime'2018-06-07T13%3A08%3A29.629632Z'\""),
				},
				{
					Name:     to.Ptr("dsmsresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dsmsresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-05-23T08%3A45%3A40.8795252Z'\"_W/\"datetime'2018-05-23T08%3A45%3A41.0666584Z'\""),
				},
				{
					Name:     to.Ptr("dsmsresource1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dsmsresource1"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-05T05%3A02%3A54.5475181Z'\"_W/\"datetime'2018-06-05T05%3A02%3A54.73265Z'\""),
				},
				{
					Name:     to.Ptr("dsmsresource2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dsmsresource2"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-05T05%3A34%3A59.227556Z'\"_W/\"datetime'2018-06-05T05%3A34%3A59.4357029Z'\""),
				},
				{
					Name:     to.Ptr("dsmsresource3"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dsmsresource3"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-05T11%3A02%3A52.3744002Z'\"_W/\"datetime'2018-06-05T11%3A02%3A52.5365141Z'\""),
				},
				{
					Name:     to.Ptr("dsmsresource4"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/dsmsresource4"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-08T15%3A58%3A07.1761866Z'\"_W/\"datetime'2018-06-08T15%3A58%3A07.3703309Z'\""),
				},
				{
					Name:     to.Ptr("govtcloudtest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/govtcloudtest"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-10-03T08%3A03%3A21.5040402Z'\"_W/\"datetime'2018-10-03T08%3A03%3A21.6421388Z'\""),
				},
				{
					Name:     to.Ptr("intresource2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/intresource2"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-02-01T10%3A38%3A07.9487894Z'\"_W/\"datetime'2018-02-01T10%3A38%3A08.1499556Z'\""),
				},
				{
					Name:     to.Ptr("intresource3rdjuly"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/intresource3rdjuly"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-03T15%3A33%3A45.7585904Z'\"_W/\"datetime'2018-07-03T15%3A33%3A45.932713Z'\""),
				},
				{
					Name:     to.Ptr("intsmallfiles"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/intsmallfiles"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-09-24T12%3A01%3A29.4312765Z'\"_W/\"datetime'2018-09-24T12%3A01%3A29.489317Z'\""),
				},
				{
					Name:     to.Ptr("longrunningjob"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/longrunningjob"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-05-31T09%3A41%3A28.6739766Z'\"_W/\"datetime'2018-05-31T09%3A41%3A28.8551054Z'\""),
				},
				{
					Name:     to.Ptr("sampleclientdatamanager"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/sampleclientdatamanager"),
					Location: to.Ptr("WestUS"),
					SKU:      &armhybriddatamanager.SKU{},
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"datetime'2018-02-21T10%3A06%3A55.2175183Z'\"_W/\"datetime'2018-02-21T10%3A06%3A55.2235223Z'\""),
				},
				{
					Name:     to.Ptr("ssdmbcdrresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/ssdmbcdrresource"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-04-23T10%3A16%3A00.5751127Z'\"_W/\"datetime'2018-04-23T10%3A16%3A00.5841193Z'\""),
				},
				{
					Name:     to.Ptr("copyexp-we-int1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/copyspeedexp/providers/Microsoft.HybridData/dataManagers/copyexp-we-int1"),
					Location: to.Ptr("westeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-12-06T05%3A48%3A21.5818324Z'\"_W/\"datetime'2018-12-06T05%3A48%3A21.7748343Z'\""),
				},
				{
					Name:     to.Ptr("prtankbvttest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/DmsBvtRG/providers/Microsoft.HybridData/dataManagers/prtankbvttest"),
					Location: to.Ptr("westeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{
						"doNotDelete": to.Ptr("yes"),
						"test":        to.Ptr("true"),
					},
					Etag: to.Ptr("W/\"datetime'2019-11-19T08%3A08%3A48.3033932Z'\"_W/\"datetime'2019-11-19T08%3A08%3A48.319407Z'\""),
				},
				{
					Name:     to.Ptr("prtankBvtWeTest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/DmsBvtRG/providers/Microsoft.HybridData/dataManagers/prtankBvtWeTest"),
					Location: to.Ptr("westeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2020-01-30T10%3A18%3A35.3300821Z'\"_W/\"datetime'2020-01-30T10%3A18%3A35.3460951Z'\""),
				},
				{
					Name:     to.Ptr("we-int-1"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/we-int-1"),
					Location: to.Ptr("westeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-11-28T10%3A55%3A58.530785Z'\"_W/\"datetime'2018-11-28T10%3A55%3A58.8107858Z'\""),
				},
				{
					Name:     to.Ptr("mrinsaha-dms-we"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ForDMS/providers/Microsoft.HybridData/dataManagers/mrinsaha-dms-we"),
					Location: to.Ptr("westeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-08-06T11%3A48%3A28.3406561Z'\"_W/\"datetime'2019-08-06T11%3A48%3A28.5107985Z'\""),
				},
				{
					Name:     to.Ptr("testdurga2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ForDMS/providers/Microsoft.HybridData/dataManagers/testdurga2"),
					Location: to.Ptr("westeurope"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-05-14T09%3A07%3A12.3469862Z'\"_W/\"datetime'2019-05-14T09%3A07%3A12.3589889Z'\""),
				},
				{
					Name:     to.Ptr("ecy-aftermigration"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/amemigration/providers/Microsoft.HybridData/dataManagers/ecy-aftermigration"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-11-14T02%3A42%3A38.6041538Z'\"_W/\"datetime'2018-11-14T02%3A42%3A38.6081571Z'\""),
				},
				{
					Name:     to.Ptr("ecy-ame"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/amemigration/providers/Microsoft.HybridData/dataManagers/ecy-ame"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-11-11T03%3A11%3A40.5411975Z'\"_W/\"datetime'2018-11-11T03%3A11%3A40.6752923Z'\""),
				},
				{
					Name:     to.Ptr("ecysmoketest"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/cleanupservice/providers/Microsoft.HybridData/dataManagers/ecysmoketest"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-04-15T09%3A05%3A36.2264018Z'\"_W/\"datetime'2019-04-15T09%3A05%3A36.2854433Z'\""),
				},
				{
					Name:     to.Ptr("copyspeed-ecy"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/copyspeedexp/providers/Microsoft.HybridData/dataManagers/copyspeed-ecy"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-05-09T09%3A51%3A11.720705Z'\"_W/\"datetime'2019-05-09T09%3A51%3A11.8728117Z'\""),
				},
				{
					Name:     to.Ptr("ecyresource-04-10"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/ecyresource-04-10"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-04-10T09%3A41%3A03.749493Z'\"_W/\"datetime'2018-04-10T09%3A41%3A03.8805855Z'\""),
				},
				{
					Name:     to.Ptr("feb20ecyresource"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/feb20ecyresource"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-02-20T10%3A01%3A55.2712681Z'\"_W/\"datetime'2018-02-20T10%3A01%3A55.441388Z'\""),
				},
				{
					Name:     to.Ptr("hari-dms-analysis-ecy"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/hari-dms-analysis-ecy"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-02-06T08%3A37%3A23.6486177Z'\"_W/\"datetime'2018-02-06T08%3A37%3A23.7857152Z'\""),
				},
				{
					Name:     to.Ptr("EcySmoke"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ForDMS/providers/Microsoft.HybridData/dataManagers/EcySmoke"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-01-14T05%3A16%3A38.9573714Z'\"_W/\"datetime'2019-01-14T05%3A16%3A39.0774564Z'\""),
				},
				{
					Name:     to.Ptr("EcyTestDMSRes"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/EcyTestDMSRes"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-08-12T10%3A20%3A40.4679832Z'\"_W/\"datetime'2019-08-12T10%3A20%3A40.6030796Z'\""),
				},
				{
					Name:     to.Ptr("ccy-ame"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/amemigration/providers/Microsoft.HybridData/dataManagers/ccy-ame"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-11-11T03%3A13%3A19.0340832Z'\"_W/\"datetime'2018-11-11T03%3A13%3A19.038086Z'\""),
				},
				{
					Name:     to.Ptr("ccytest-26-march"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/amemigration/providers/Microsoft.HybridData/dataManagers/ccytest-26-march"),
					Location: to.Ptr("Central US EUAP"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-03-26T04%3A54%3A23.06065Z'\"_W/\"datetime'2019-03-26T04%3A54%3A23.1216929Z'\""),
				},
				{
					Name:     to.Ptr("batchcertoldccy"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/batchcertoldccy"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-07-12T09%3A47%3A44.2155827Z'\"_W/\"datetime'2018-07-12T09%3A47%3A44.2235883Z'\""),
				},
				{
					Name:     to.Ptr("ccylargenumberoffiles"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/ccylargenumberoffiles"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-09-04T06%3A47%3A31.8676921Z'\"_W/\"datetime'2018-09-04T06%3A47%3A32.0268062Z'\""),
				},
				{
					Name:     to.Ptr("feb20ccyresoirce"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/feb20ccyresoirce"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-02-20T10%3A02%3A19.8430119Z'\"_W/\"datetime'2018-02-20T10%3A02%3A20.0291444Z'\""),
				},
				{
					Name:     to.Ptr("smallfilesccyjob"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/dmsResourceGroup/providers/Microsoft.HybridData/dataManagers/smallfilesccyjob"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-09-24T05%3A24%3A44.2753634Z'\"_W/\"datetime'2018-09-24T05%3A24%3A44.4114594Z'\""),
				},
				{
					Name:     to.Ptr("MSCCY"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ForDMS/providers/Microsoft.HybridData/dataManagers/MSCCY"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-04-22T07%3A45%3A22.6635575Z'\"_W/\"datetime'2019-04-22T07%3A45%3A22.8346781Z'\""),
				},
				{
					Name:     to.Ptr("res4ccyBCDR"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ForDMS/providers/Microsoft.HybridData/dataManagers/res4ccyBCDR"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-02-07T09%3A38%3A22.6976591Z'\"_W/\"datetime'2019-02-07T09%3A38%3A22.8767865Z'\""),
				},
				{
					Name:     to.Ptr("prpare50lakhsmallfiles"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/prpare/providers/Microsoft.HybridData/dataManagers/prpare50lakhsmallfiles"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-09-25T07%3A11%3A55.7616108Z'\"_W/\"datetime'2018-09-25T07%3A11%3A55.8957061Z'\""),
				},
				{
					Name:     to.Ptr("CcyTestDMSRes2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/CcyTestDMSRes2"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-08-13T04%3A47%3A07.5063631Z'\"_W/\"datetime'2019-08-13T04%3A47%3A07.5113667Z'\""),
				},
				{
					Name:     to.Ptr("ccytestingpav2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/test-varavi/providers/Microsoft.HybridData/dataManagers/ccytestingpav2"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2018-06-15T07%3A04%3A34.2882012Z'\"_W/\"datetime'2018-06-15T07%3A04%3A34.3472441Z'\""),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataManagerList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataManagerList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_List-GET-example-21.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataManagers_ListByResourceGroup(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_ListByResourceGroup-GET-example-31.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataManagers_ListByResourceGroupGET31"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataManagersClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByResourceGroup("ResourceGroupForSDKTest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_ListByResourceGroup-GET-example-31.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.DataManagerList{
			Value: []*armhybriddatamanager.DataManager{
				{
					Name:     to.Ptr("AzureSDKOperations"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/AzureSDKOperations"),
					Location: to.Ptr("westus2"),
					SKU:      &armhybriddatamanager.SKU{},
					Tags:     map[string]*string{},
					Etag:     to.Ptr("W/\"datetime'2019-02-17T14%3A50%3A37.866739Z'\"_W/\"datetime'2019-02-17T14%3A50%3A38.038859Z'\""),
				},
				{
					Name:     to.Ptr("AzSDKOps"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/AzSDKOps"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{
						"helL00000": to.Ptr("dlrow"),
						"hello":     to.Ptr("World"),
						"new":       to.Ptr("true"),
					},
					Etag: to.Ptr("W/\"datetime'2019-03-30T06%3A35%3A01.1816182Z'\"_W/\"datetime'2019-03-30T06%3A35%3A01.2846913Z'\""),
				},
				{
					Name:     to.Ptr("TestAzureSDKOperations"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations"),
					Location: to.Ptr("westus"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2020-02-05T04%3A22%3A40.6354864Z'\"_W/\"datetime'2020-02-05T04%3A22%3A40.7912864Z'\""),
				},
				{
					Name:     to.Ptr("EcyTestDMSRes"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/EcyTestDMSRes"),
					Location: to.Ptr("eastus2euap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-08-12T10%3A20%3A40.4679832Z'\"_W/\"datetime'2019-08-12T10%3A20%3A40.6030796Z'\""),
				},
				{
					Name:     to.Ptr("CcyTestDMSRes2"),
					Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
					ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourcegroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/CcyTestDMSRes2"),
					Location: to.Ptr("centraluseuap"),
					SKU: &armhybriddatamanager.SKU{
						Name: to.Ptr("DS0"),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Etag: to.Ptr("W/\"datetime'2019-08-13T04%3A47%3A07.5063631Z'\"_W/\"datetime'2019-08-13T04%3A47%3A07.5113667Z'\""),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataManagerList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataManagerList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_ListByResourceGroup-GET-example-31.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataManagers_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Get-GET-example-41.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataManagers_GetGET41"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataManagersClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Get-GET-example-41.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataManager{
			Name:     to.Ptr("TestAzureSDKOperations"),
			Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
			ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations"),
			Location: to.Ptr("westus"),
			SKU: &armhybriddatamanager.SKU{
				Name: to.Ptr("DS0"),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{},
			Etag: to.Ptr("W/\"datetime'2020-02-05T04%3A22%3A40.6354864Z'\"_W/\"datetime'2020-02-05T04%3A22%3A40.7912864Z'\""),
		}
		if !reflect.DeepEqual(exampleRes, res.DataManager) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataManager)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Get-GET-example-41.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataManagers_Create(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Create-PUT-example-41.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataManagers_CreatePUT41"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataManagersClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		armhybriddatamanager.DataManager{
			Location: to.Ptr("westus"),
		},
		&armhybriddatamanager.DataManagersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Create-PUT-example-41.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Create-PUT-example-41.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataManager{
			Name:     to.Ptr("TestAzureSDKOperations"),
			Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
			ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations"),
			Location: to.Ptr("westus"),
			SKU: &armhybriddatamanager.SKU{
				Name: to.Ptr("DS0"),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{},
			Etag: to.Ptr("W/\"datetime'2020-02-05T08%3A45%3A27.420781Z'\"_W/\"datetime'2020-02-05T08%3A45%3A27.4264561Z'\""),
		}
		if !reflect.DeepEqual(exampleRes, res.DataManager) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataManager)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Create-PUT-example-41.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataManagers_Delete(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Delete-DELETE-example-41.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataManagers_DeleteDELETE41"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataManagersClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.DataManagersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Delete-DELETE-example-41.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Delete-DELETE-example-41.json: %v", err)
	}
}

func TestDataManagers_Update(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Update-PATCH-example-43.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataManagers_UpdatePATCH43"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataManagersClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		armhybriddatamanager.DataManagerUpdateParameter{
			SKU: &armhybriddatamanager.SKU{
				Name: to.Ptr("DS0"),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"UpdateDateTime": to.Ptr("05-Feb-20 2:17:22 PM"),
			},
		},
		&armhybriddatamanager.DataManagersClientBeginUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Update-PATCH-example-43.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Update-PATCH-example-43.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataManager{
			Name:     to.Ptr("TestAzureSDKOperations"),
			Type:     to.Ptr("Microsoft.HybridData/dataManagers"),
			ID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations"),
			Location: to.Ptr("westus"),
			SKU: &armhybriddatamanager.SKU{
				Name: to.Ptr("DS0"),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"updateDateTime": to.Ptr("05-Feb-20 2:17:22 PM"),
			},
			Etag: to.Ptr("W/\"datetime'2020-02-05T08%3A47%3A23.8171822Z'\"_W/\"datetime'2020-02-05T08%3A47%3A23.8361957Z'\""),
		}
		if !reflect.DeepEqual(exampleRes, res.DataManager) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataManager)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataManagers_Update-PATCH-example-43.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataServices_ListByDataManager(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataServices_ListByDataManager-GET-example-51.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataServices_ListByDataManagerGET51"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataServicesClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataServices_ListByDataManager-GET-example-51.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.DataServiceList{
			Value: []*armhybriddatamanager.DataService{
				{
					Name: to.Ptr("DataTransformation"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State: to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataSinkTypes: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureMediaServicesAccount")},
						SupportedDataSourceTypes: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series")},
					},
				},
				{
					Name: to.Ptr("KeyRollover"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/KeyRollover"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State:                    to.Ptr(armhybriddatamanager.StateSupported),
						SupportedDataSinkTypes:   []*string{},
						SupportedDataSourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("DataSecurity"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataSecurity"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State:                    to.Ptr(armhybriddatamanager.StateSupported),
						SupportedDataSinkTypes:   []*string{},
						SupportedDataSourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("DataInsights"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataInsights"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State:                    to.Ptr(armhybriddatamanager.StateSupported),
						SupportedDataSinkTypes:   []*string{},
						SupportedDataSourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("DataHealth"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataHealth"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State:                    to.Ptr(armhybriddatamanager.StateSupported),
						SupportedDataSinkTypes:   []*string{},
						SupportedDataSourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("RunnerService"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/RunnerService"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State:                    to.Ptr(armhybriddatamanager.StateSupported),
						SupportedDataSinkTypes:   []*string{},
						SupportedDataSourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("IndexingAndSearch"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/IndexingAndSearch"),
					Properties: &armhybriddatamanager.DataServiceProperties{
						State: to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataSinkTypes: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/SqlServer")},
						SupportedDataSourceTypes: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataServiceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataServiceList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataServices_ListByDataManager-GET-example-51.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataServices_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataServices_Get-GET-example-62.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataServices_GetGET62"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataServicesClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"DataTransformation",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataServices_Get-GET-example-62.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataService{
			Name: to.Ptr("DataTransformation"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation"),
			Properties: &armhybriddatamanager.DataServiceProperties{
				State: to.Ptr(armhybriddatamanager.StateEnabled),
				SupportedDataSinkTypes: []*string{
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureMediaServicesAccount")},
				SupportedDataSourceTypes: []*string{
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataService)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataServices_Get-GET-example-62.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobDefinitions_ListByDataService(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_ListByDataService-GET-example-71.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobDefinitions_ListByDataServiceGET71"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobDefinitionsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataService("DataTransformation",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobDefinitionsClientListByDataServiceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_ListByDataService-GET-example-71.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.JobDefinitionList{
			Value: []*armhybriddatamanager.JobDefinition{
				{
					Name: to.Ptr("jobdeffromtestcode1"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1"),
					Properties: &armhybriddatamanager.JobDefinitionProperties{
						DataServiceInput: map[string]interface{}{
							"AzureStorageType": "Blob",
							"BackupChoice":     "UseExistingLatest",
							"ContainerName":    "containerfromtest",
							"DeviceName":       "8600-SHG0997877L71FC",
							"FileNameFilter":   "*",
							"IsDirectoryMode":  false,
							"RootDirectories": []interface{}{
								"\\",
							},
							"VolumeNames": []interface{}{
								"TestAutomation",
							},
						},
						DataSinkID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
						DataSourceID:     to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T08:51:43.3662184Z"); return t }()),
						RunLocation:      to.Ptr(armhybriddatamanager.RunLocationWestus),
						Schedules:        []*armhybriddatamanager.Schedule{},
						State:            to.Ptr(armhybriddatamanager.StateEnabled),
						UserConfirmation: to.Ptr(armhybriddatamanager.UserConfirmationRequired),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_ListByDataService-GET-example-71.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobDefinitions_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Get-GET-example-81.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobDefinitions_GetGET81"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobDefinitionsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Get-GET-example-81.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.JobDefinition{
			Name: to.Ptr("jobdeffromtestcode1"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1"),
			Properties: &armhybriddatamanager.JobDefinitionProperties{
				DataServiceInput: map[string]interface{}{
					"AzureStorageType": "Blob",
					"BackupChoice":     "UseExistingLatest",
					"ContainerName":    "containerfromtest",
					"DeviceName":       "8600-SHG0997877L71FC",
					"FileNameFilter":   "*",
					"IsDirectoryMode":  false,
					"RootDirectories": []interface{}{
						"\\",
					},
					"VolumeNames": []interface{}{
						"TestAutomation",
					},
				},
				DataSinkID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
				DataSourceID:     to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T08:51:43.3662184Z"); return t }()),
				RunLocation:      to.Ptr(armhybriddatamanager.RunLocationWestus),
				Schedules:        []*armhybriddatamanager.Schedule{},
				State:            to.Ptr(armhybriddatamanager.StateEnabled),
				UserConfirmation: to.Ptr(armhybriddatamanager.UserConfirmationRequired),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Get-GET-example-81.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobDefinitions_CreateOrUpdate(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_CreateOrUpdate-PUT-example-83.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobDefinitions_CreateOrUpdatePUT83"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobDefinitionsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		armhybriddatamanager.JobDefinition{
			Properties: &armhybriddatamanager.JobDefinitionProperties{
				DataServiceInput: map[string]interface{}{
					"AzureStorageType": "Blob",
					"BackupChoice":     "UseExistingLatest",
					"ContainerName":    "containerfromtest",
					"DeviceName":       "8600-SHG0997877L71FC",
					"FileNameFilter":   "*",
					"IsDirectoryMode":  false,
					"RootDirectories": []interface{}{
						"\\",
					},
					"VolumeNames": []interface{}{
						"TestAutomation",
					},
				},
				DataSinkID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
				DataSourceID:     to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
				RunLocation:      to.Ptr(armhybriddatamanager.RunLocationWestus),
				State:            to.Ptr(armhybriddatamanager.StateEnabled),
				UserConfirmation: to.Ptr(armhybriddatamanager.UserConfirmationRequired),
			},
		},
		&armhybriddatamanager.JobDefinitionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_CreateOrUpdate-PUT-example-83.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_CreateOrUpdate-PUT-example-83.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.JobDefinition{
			Name: to.Ptr("jobdeffromtestcode1"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1"),
			Properties: &armhybriddatamanager.JobDefinitionProperties{
				DataServiceInput: map[string]interface{}{
					"AzureStorageType": "Blob",
					"BackupChoice":     "UseExistingLatest",
					"ContainerName":    "containerfromtest",
					"DeviceName":       "8600-SHG0997877L71FC",
					"FileNameFilter":   "*",
					"IsDirectoryMode":  false,
					"RootDirectories": []interface{}{
						"\\",
					},
					"VolumeNames": []interface{}{
						"TestAutomation",
					},
				},
				DataSinkID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
				DataSourceID:     to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T08:51:43.3662184Z"); return t }()),
				RunLocation:      to.Ptr(armhybriddatamanager.RunLocationWestus),
				Schedules:        []*armhybriddatamanager.Schedule{},
				State:            to.Ptr(armhybriddatamanager.StateEnabled),
				UserConfirmation: to.Ptr(armhybriddatamanager.UserConfirmationRequired),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_CreateOrUpdate-PUT-example-83.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobDefinitions_Delete(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Delete-DELETE-example-81.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobDefinitions_DeleteDELETE81"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobDefinitionsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobDefinitionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Delete-DELETE-example-81.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Delete-DELETE-example-81.json: %v", err)
	}
}

func TestJobDefinitions_Run(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Run-POST-example-132.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobDefinitions_RunPOST132"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobDefinitionsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginRun(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		armhybriddatamanager.RunParameters{
			CustomerSecrets: []*armhybriddatamanager.CustomerSecret{},
			DataServiceInput: map[string]interface{}{
				"AzureStorageType": "Blob",
				"BackupChoice":     "UseExistingLatest",
				"ContainerName":    "containerfromtest",
				"DeviceName":       "8600-SHG0997877L71FC",
				"FileNameFilter":   "*",
				"IsDirectoryMode":  false,
				"RootDirectories": []interface{}{
					"\\",
				},
				"VolumeNames": []interface{}{
					"TestAutomation",
				},
			},
			UserConfirmation: to.Ptr(armhybriddatamanager.UserConfirmationNotRequired),
		},
		&armhybriddatamanager.JobDefinitionsClientBeginRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Run-POST-example-132.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_Run-POST-example-132.json: %v", err)
	}
}

func TestJobDefinitions_ListByDataManager(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_ListByDataManager-GET-example-191.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobDefinitions_ListByDataManagerGET191"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobDefinitionsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobDefinitionsClientListByDataManagerOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_ListByDataManager-GET-example-191.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.JobDefinitionList{
			Value: []*armhybriddatamanager.JobDefinition{
				{
					Name: to.Ptr("jobdeffromtestcode1"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1"),
					Properties: &armhybriddatamanager.JobDefinitionProperties{
						DataServiceInput: map[string]interface{}{
							"AzureStorageType": "Blob",
							"BackupChoice":     "UseExistingLatest",
							"ContainerName":    "containerfromtest",
							"DeviceName":       "8600-SHG0997877L71FC",
							"FileNameFilter":   "*",
							"IsDirectoryMode":  false,
							"RootDirectories": []interface{}{
								"\\",
							},
							"VolumeNames": []interface{}{
								"TestAutomation",
							},
						},
						DataSinkID:       to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
						DataSourceID:     to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T08:51:43.3662184Z"); return t }()),
						RunLocation:      to.Ptr(armhybriddatamanager.RunLocationWestus),
						Schedules:        []*armhybriddatamanager.Schedule{},
						State:            to.Ptr(armhybriddatamanager.StateEnabled),
						UserConfirmation: to.Ptr(armhybriddatamanager.UserConfirmationRequired),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/JobDefinitions_ListByDataManager-GET-example-191.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_ListByJobDefinition(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByJobDefinition-GET-example-91.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Jobs_ListByJobDefinitionGET91"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByJobDefinition("DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobsClientListByJobDefinitionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByJobDefinition-GET-example-91.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.JobList{
			Value: []*armhybriddatamanager.Job{
				{
					Name: to.Ptr("99ef93fe-36be-43e4-bebf-de6746730601"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/99ef93fe-36be-43e4-bebf-de6746730601"),
					Properties: &armhybriddatamanager.JobProperties{
						BytesProcessed:      to.Ptr[int64](0),
						IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
						ItemsProcessed:      to.Ptr[int64](0),
						TotalBytesToProcess: to.Ptr[int64](0),
						TotalItemsToProcess: to.Ptr[int64](0),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:59.2771412Z"); return t }()),
					Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
				},
				{
					Name: to.Ptr("aeb6aa32-cf46-4fa0-819f-48e0fe376f6e"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/aeb6aa32-cf46-4fa0-819f-48e0fe376f6e"),
					Properties: &armhybriddatamanager.JobProperties{
						BytesProcessed:      to.Ptr[int64](0),
						IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
						ItemsProcessed:      to.Ptr[int64](0),
						TotalBytesToProcess: to.Ptr[int64](0),
						TotalItemsToProcess: to.Ptr[int64](0),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:10.6059757Z"); return t }()),
					Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByJobDefinition-GET-example-91.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Get-GET-example-101.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Jobs_GetGET101"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"99ef93fe-36be-43e4-bebf-de6746730601",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Get-GET-example-101.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.Job{
			Name: to.Ptr("99ef93fe-36be-43e4-bebf-de6746730601"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/99ef93fe-36be-43e4-bebf-de6746730601"),
			Properties: &armhybriddatamanager.JobProperties{
				BytesProcessed:      to.Ptr[int64](0),
				IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
				ItemsProcessed:      to.Ptr[int64](0),
				TotalBytesToProcess: to.Ptr[int64](0),
				TotalItemsToProcess: to.Ptr[int64](0),
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:59.2771412Z"); return t }()),
			Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Get-GET-example-101.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Cancel(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Cancel-POST-example-111.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Jobs_CancelPOST111"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"6eca9b3d-5ffe-4b44-9607-1ba838371ff7",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobsClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Cancel-POST-example-111.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Cancel-POST-example-111.json: %v", err)
	}
}

func TestJobs_Resume(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Resume-POST-example-121.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Jobs_ResumePOST121"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginResume(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"99ef93fe-36be-43e4-bebf-de6746730601",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobsClientBeginResumeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Resume-POST-example-121.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_Resume-POST-example-121.json: %v", err)
	}
}

func TestJobs_ListByDataService(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByDataService-GET-example-141.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Jobs_ListByDataServiceGET141"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataService("DataTransformation",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobsClientListByDataServiceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByDataService-GET-example-141.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.JobList{
			Value: []*armhybriddatamanager.Job{
				{
					Name: to.Ptr("99ef93fe-36be-43e4-bebf-de6746730601"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/99ef93fe-36be-43e4-bebf-de6746730601"),
					Properties: &armhybriddatamanager.JobProperties{
						BytesProcessed:      to.Ptr[int64](0),
						IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
						ItemsProcessed:      to.Ptr[int64](0),
						TotalBytesToProcess: to.Ptr[int64](0),
						TotalItemsToProcess: to.Ptr[int64](0),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:59.2771412Z"); return t }()),
					Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
				},
				{
					Name: to.Ptr("aeb6aa32-cf46-4fa0-819f-48e0fe376f6e"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/aeb6aa32-cf46-4fa0-819f-48e0fe376f6e"),
					Properties: &armhybriddatamanager.JobProperties{
						BytesProcessed:      to.Ptr[int64](0),
						IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
						ItemsProcessed:      to.Ptr[int64](0),
						TotalBytesToProcess: to.Ptr[int64](0),
						TotalItemsToProcess: to.Ptr[int64](0),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:10.6059757Z"); return t }()),
					Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByDataService-GET-example-141.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_ListByDataManager(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByDataManager-GET-example-201.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Jobs_ListByDataManagerGET201"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewJobsClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.JobsClientListByDataManagerOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByDataManager-GET-example-201.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.JobList{
			Value: []*armhybriddatamanager.Job{
				{
					Name: to.Ptr("99ef93fe-36be-43e4-bebf-de6746730601"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/99ef93fe-36be-43e4-bebf-de6746730601"),
					Properties: &armhybriddatamanager.JobProperties{
						BytesProcessed:      to.Ptr[int64](0),
						IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
						ItemsProcessed:      to.Ptr[int64](0),
						TotalBytesToProcess: to.Ptr[int64](0),
						TotalItemsToProcess: to.Ptr[int64](0),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:59.2771412Z"); return t }()),
					Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
				},
				{
					Name: to.Ptr("aeb6aa32-cf46-4fa0-819f-48e0fe376f6e"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/jobs"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation/jobDefinitions/jobdeffromtestcode1/jobs/aeb6aa32-cf46-4fa0-819f-48e0fe376f6e"),
					Properties: &armhybriddatamanager.JobProperties{
						BytesProcessed:      to.Ptr[int64](0),
						IsCancellable:       to.Ptr(armhybriddatamanager.IsJobCancellableCancellable),
						ItemsProcessed:      to.Ptr[int64](0),
						TotalBytesToProcess: to.Ptr[int64](0),
						TotalItemsToProcess: to.Ptr[int64](0),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-05T04:42:10.6059757Z"); return t }()),
					Status:    to.Ptr(armhybriddatamanager.JobStatusInProgress),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/Jobs_ListByDataManager-GET-example-201.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataStores_ListByDataManager(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_ListByDataManager-GET-example-151.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_ListByDataManagerGET151"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.DataStoresClientListByDataManagerOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_ListByDataManager-GET-example-151.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.DataStoreList{
			Value: []*armhybriddatamanager.DataStore{
				{
					Name: to.Ptr("TestAzureStorage1"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStores"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
					Properties: &armhybriddatamanager.DataStoreProperties{
						DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
						ExtendedProperties: map[string]interface{}{
							"StorageAccountNameForQueue": "dmsdatasink",
						},
						RepositoryID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink"),
						State:        to.Ptr(armhybriddatamanager.StateEnabled),
					},
				},
				{
					Name: to.Ptr("TestStorSimpleSource1"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStores"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
					Properties: &armhybriddatamanager.DataStoreProperties{
						DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
						ExtendedProperties: map[string]interface{}{
							"extendedSaKey": nil,
							"resourceId":    "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
						},
						RepositoryID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600"),
						State:        to.Ptr(armhybriddatamanager.StateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataStoreList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataStoreList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_ListByDataManager-GET-example-151.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataStores_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Get-GET-example-161.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_GetGET161"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"TestStorSimpleSource1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Get-GET-example-161.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataStore{
			Name: to.Ptr("TestStorSimpleSource1"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStores"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
			Properties: &armhybriddatamanager.DataStoreProperties{
				DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
				ExtendedProperties: map[string]interface{}{
					"extendedSaKey": nil,
					"resourceId":    "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
				},
				RepositoryID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600"),
				State:        to.Ptr(armhybriddatamanager.StateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataStore)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Get-GET-example-161.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Get-GET-example-162.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_GetGET162"},
	})
	client = armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err = client.Get(ctx,
		"TestAzureStorage1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Get-GET-example-162.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataStore{
			Name: to.Ptr("TestAzureStorage1"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStores"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
			Properties: &armhybriddatamanager.DataStoreProperties{
				DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
				ExtendedProperties: map[string]interface{}{
					"StorageAccountNameForQueue": "dmsdatasink",
				},
				RepositoryID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink"),
				State:        to.Ptr(armhybriddatamanager.StateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataStore)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Get-GET-example-162.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataStores_CreateOrUpdate(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSink-PUT-example-162.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_CreateOrUpdate_DataSinkPUT162"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestAzureStorage1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		armhybriddatamanager.DataStore{
			Properties: &armhybriddatamanager.DataStoreProperties{
				CustomerSecrets: []*armhybriddatamanager.CustomerSecret{
					{
						Algorithm:     to.Ptr(armhybriddatamanager.SupportedAlgorithmRSA15),
						KeyIdentifier: to.Ptr("StorageAccountAccessKey"),
						KeyValue:      to.Ptr("Of4H9eF03G8QuxvkZQEbFWv3YdN3U//WugzuqReQekbXXQyg+QSicVKrwSOOKVi1zWMYGbKg7d5/ES2gdz+O5ZEw89bvE4mJD/wQmkIsqhPnbN0gyVK6nZePXVUU1A+UzjLfvhSA6KyUQfzNAZ5/TLt6fo1JyQrKTtkvnkLFyfv1AqBZ+dw8JK3RZi/rEN8HD3R3qsBwUYfyEuGLGiujy2CGrr/1uPiUVMR6QuFWRsjm39eMSHa4maLg4tQ0IY/jIy8rMlx3KjF3CcCbPzAqEq5vXy37wkjZbus771te1gLSrzcpVKIMg4DrmgaoJ02jAu+izBjNgLXAFPSUneQ8yw==:ezMkh4PMhCnjJtYkpTaP0SdblP5VAeRe4glW2PgIzICHw3T8ZyGDoaTrCv4/m5wtcEhWdtxhta+j1MQWlK5MIA+hvf8QjIDIjQv696ov5y+pcFe/upd2ekGOei7FCwB2u7I8WnkAtIKTUkf6eDQBZXm26DjfG1Dlc+Mjjq+AerukEa6WpOyqrD7Qub26Pgmj4AsuBx19X1EAmTZacubkoiNagXM8V+IDanHOhLMvfgQ7rw8oZhWfofxi4m+eJqjOXXaqSyorNK8UEcqP6P9pDP8AN8ulXEx6rZy2B5Oi0vSV+wlRLbUuQslga4ItOGxctW/ZX8uWozt+5A3k4URt6A=="),
					},
					{
						Algorithm:     to.Ptr(armhybriddatamanager.SupportedAlgorithmRSA15),
						KeyIdentifier: to.Ptr("StorageAccountAccessKeyForQueue"),
						KeyValue:      to.Ptr("Of4H9eF03G8QuxvkZQEbFWv3YdN3U//WugzuqReQekbXXQyg+QSicVKrwSOOKVi1zWMYGbKg7d5/ES2gdz+O5ZEw89bvE4mJD/wQmkIsqhPnbN0gyVK6nZePXVUU1A+UzjLfvhSA6KyUQfzNAZ5/TLt6fo1JyQrKTtkvnkLFyfv1AqBZ+dw8JK3RZi/rEN8HD3R3qsBwUYfyEuGLGiujy2CGrr/1uPiUVMR6QuFWRsjm39eMSHa4maLg4tQ0IY/jIy8rMlx3KjF3CcCbPzAqEq5vXy37wkjZbus771te1gLSrzcpVKIMg4DrmgaoJ02jAu+izBjNgLXAFPSUneQ8yw==:ezMkh4PMhCnjJtYkpTaP0SdblP5VAeRe4glW2PgIzICHw3T8ZyGDoaTrCv4/m5wtcEhWdtxhta+j1MQWlK5MIA+hvf8QjIDIjQv696ov5y+pcFe/upd2ekGOei7FCwB2u7I8WnkAtIKTUkf6eDQBZXm26DjfG1Dlc+Mjjq+AerukEa6WpOyqrD7Qub26Pgmj4AsuBx19X1EAmTZacubkoiNagXM8V+IDanHOhLMvfgQ7rw8oZhWfofxi4m+eJqjOXXaqSyorNK8UEcqP6P9pDP8AN8ulXEx6rZy2B5Oi0vSV+wlRLbUuQslga4ItOGxctW/ZX8uWozt+5A3k4URt6A=="),
					}},
				DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
				ExtendedProperties: map[string]interface{}{
					"extendedSaKey":              nil,
					"extendedSaName":             "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
					"storageAccountNameForQueue": "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
				},
				RepositoryID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink"),
				State:        to.Ptr(armhybriddatamanager.StateEnabled),
			},
		},
		&armhybriddatamanager.DataStoresClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSink-PUT-example-162.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSink-PUT-example-162.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataStore{
			Name: to.Ptr("TestAzureStorage1"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStores"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
			Properties: &armhybriddatamanager.DataStoreProperties{
				DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
				ExtendedProperties: map[string]interface{}{
					"StorageAccountNameForQueue": "dmsdatasink",
				},
				RepositoryID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink"),
				State:        to.Ptr(armhybriddatamanager.StateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataStore)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSink-PUT-example-162.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSource-PUT-example-162.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_CreateOrUpdate_DataSourcePUT162"},
	})
	client = armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"TestStorSimpleSource1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		armhybriddatamanager.DataStore{
			Properties: &armhybriddatamanager.DataStoreProperties{
				CustomerSecrets: []*armhybriddatamanager.CustomerSecret{
					{
						Algorithm:     to.Ptr(armhybriddatamanager.SupportedAlgorithmRSA15),
						KeyIdentifier: to.Ptr("ServiceEncryptionKey"),
						KeyValue:      to.Ptr("EVuEBV40qv23xDRL4NZBuMms4e3So6ikHjrQYRvG9NloqxdgPOg+ZYzpho5lytI4fmv0ANmRIvDiDboRXcUVSjbB9T2gm19fMIuwZa4FK2+LYEgMqKK1GaLkk7xC8f5IeFUXLo6KyBBpaAiayTnWDcHuYEpMiGrV7trDDcbhMRefO3CHecmH3Z7ye8L0RQ/e7WW8GlCKZj3m0BaG7OrJgjai8gyDfMfGAG5rTqEhDVh2hLQ+TjvUjcOFwHvJusqKTENtbJTNQYmL9wZXsnwBvUwxqrGieILNB7V3GD1Ow9OiV0UCDW1e9LnMueukg+l7YJCU9FUhIPh/nSif6p32zw==:jCfio+pDtY3BSPZDpDJ0L6QdXLYMeOmxaFWtYTOZkNqNTgT8Loc/KSQRjtWS5K4N4btbznuSJ/dzg0aZEzlXgKDSuZgMfd4Ch92ZwAC/BkeCmVrTjiKJsoQXO1IICCUf7GHGBbYnnpsNJcEn4vyc9NXyKwOBjeU+I9AyK7PtYiC03RLpTS6xttFCICteBV0uoBHAiV0chZ5VIIUUMjO9u8EhHqRY7NNcGbWdVJeAb6J3vH4E/DHkQj+DXlpjcLvmK/uqBwxfNju30RJhR04Nmz6zcv/zTcvS0uN5hEPQoHLyv84hjnc4omg/gmNjo2cDW64QxA3RTJ5Sl///4xTBkg=="),
					}},
				DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
				ExtendedProperties: map[string]interface{}{
					"extendedSaKey": nil,
					"resourceId":    "/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
				},
				RepositoryID: to.Ptr("/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600"),
				State:        to.Ptr(armhybriddatamanager.StateEnabled),
			},
		},
		&armhybriddatamanager.DataStoresClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSource-PUT-example-162.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSource-PUT-example-162.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataStore{
			Name: to.Ptr("TestStorSimpleSource1"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStores"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
			Properties: &armhybriddatamanager.DataStoreProperties{
				DataStoreTypeID: to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
				ExtendedProperties: map[string]interface{}{
					"extendedSaKey": nil,
					"resourceId":    "/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
				},
				RepositoryID: to.Ptr("/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600"),
				State:        to.Ptr(armhybriddatamanager.StateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataStore)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_CreateOrUpdate_DataSource-PUT-example-162.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataStores_Delete(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Delete_DataSink-DELETE-example-161.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_Delete_DataSinkDELETE161"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestAzureStorage1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.DataStoresClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Delete_DataSink-DELETE-example-161.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Delete_DataSink-DELETE-example-161.json: %v", err)
	}

	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Delete_DataSource-DELETE-example-161.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStores_Delete_DataSourceDELETE161"},
	})
	client = armhybriddatamanager.NewDataStoresClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"TestStorSimpleSource1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&armhybriddatamanager.DataStoresClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Delete_DataSource-DELETE-example-161.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStores_Delete_DataSource-DELETE-example-161.json: %v", err)
	}
}

func TestDataStoreTypes_ListByDataManager(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_ListByDataManager-GET-example-171.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStoreTypes_ListByDataManagerGET171"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataStoreTypesClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_ListByDataManager-GET-example-171.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.DataStoreTypeList{
			Value: []*armhybriddatamanager.DataStoreType{
				{
					Name: to.Ptr("StorSimple8000Series"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
					Properties: &armhybriddatamanager.DataStoreTypeProperties{
						RepositoryType:              to.Ptr("Microsoft.StorSimple/managers"),
						State:                       to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataServicesAsSink: []*string{},
						SupportedDataServicesAsSource: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation"),
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/IndexingAndSearch")},
					},
				},
				{
					Name: to.Ptr("AzureStorageAccount"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
					Properties: &armhybriddatamanager.DataStoreTypeProperties{
						RepositoryType: to.Ptr("Microsoft.Storage/storageAccounts"),
						State:          to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataServicesAsSink: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation")},
						SupportedDataServicesAsSource: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/IndexingAndSearch")},
					},
				},
				{
					Name: to.Ptr("AzureMediaServicesAccount"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureMediaServicesAccount"),
					Properties: &armhybriddatamanager.DataStoreTypeProperties{
						RepositoryType: to.Ptr("Microsoft.Media/mediaservices"),
						State:          to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataServicesAsSink: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation")},
						SupportedDataServicesAsSource: []*string{},
					},
				},
				{
					Name: to.Ptr("RunnerDataSource"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/RunnerDataSource"),
					Properties: &armhybriddatamanager.DataStoreTypeProperties{
						State:                         to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataServicesAsSink:   []*string{},
						SupportedDataServicesAsSource: []*string{},
					},
				},
				{
					Name: to.Ptr("RunnerDataSink"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/RunnerDataSink"),
					Properties: &armhybriddatamanager.DataStoreTypeProperties{
						State:                         to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataServicesAsSink:   []*string{},
						SupportedDataServicesAsSource: []*string{},
					},
				},
				{
					Name: to.Ptr("SqlServer"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/SqlServer"),
					Properties: &armhybriddatamanager.DataStoreTypeProperties{
						RepositoryType: to.Ptr("Microsoft.Sql/servers"),
						State:          to.Ptr(armhybriddatamanager.StateEnabled),
						SupportedDataServicesAsSink: []*string{
							to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/IndexingAndSearch")},
						SupportedDataServicesAsSource: []*string{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataStoreTypeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataStoreTypeList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_ListByDataManager-GET-example-171.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataStoreTypes_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_Get-GET-example-182.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStoreTypes_GetGET182"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewDataStoreTypesClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"StorSimple8000Series",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_Get-GET-example-182.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataStoreType{
			Name: to.Ptr("StorSimple8000Series"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
			Properties: &armhybriddatamanager.DataStoreTypeProperties{
				RepositoryType:              to.Ptr("Microsoft.StorSimple/managers"),
				State:                       to.Ptr(armhybriddatamanager.StateEnabled),
				SupportedDataServicesAsSink: []*string{},
				SupportedDataServicesAsSource: []*string{
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation"),
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/IndexingAndSearch")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataStoreType) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataStoreType)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_Get-GET-example-182.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_Get-GET-example-183.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataStoreTypes_GetGET183"},
	})
	client = armhybriddatamanager.NewDataStoreTypesClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err = client.Get(ctx,
		"AzureStorageAccount",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_Get-GET-example-183.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.DataStoreType{
			Name: to.Ptr("AzureStorageAccount"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/dataStoreTypes"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
			Properties: &armhybriddatamanager.DataStoreTypeProperties{
				RepositoryType: to.Ptr("Microsoft.Storage/storageAccounts"),
				State:          to.Ptr(armhybriddatamanager.StateEnabled),
				SupportedDataServicesAsSink: []*string{
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/DataTransformation")},
				SupportedDataServicesAsSource: []*string{
					to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataServices/IndexingAndSearch")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataStoreType) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataStoreType)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/DataStoreTypes_Get-GET-example-183.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicKeys_ListByDataManager(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/PublicKeys_ListByDataManager-GET-example-211.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublicKeys_ListByDataManagerGET211"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewPublicKeysClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/PublicKeys_ListByDataManager-GET-example-211.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybriddatamanager.PublicKeyList{
			Value: []*armhybriddatamanager.PublicKey{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.HybridData/dataManagers/publicKeys"),
					ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/publicKeys/default"),
					Properties: &armhybriddatamanager.PublicKeyProperties{
						DataServiceLevel1Key: &armhybriddatamanager.Key{
							EncryptionChunkSizeInBytes: to.Ptr[int32](245),
							KeyExponent:                to.Ptr("AQAB"),
							KeyModulus:                 to.Ptr("mjDxqxGmawhC15TUM/oKCe2rRg6nM+IEqujgn17vc1litm3TPmv7rtDr4Y/L/t+tYCug7aXxJtwGA9ETOUF9iUoGPE3zBKMGPJhO5nRF3IW27OzYUNTdHgUjlV0ba5QlZQ/f5ideEboJvdlw05ofPVQKZ9Hh95/9sOFYuNBKP0LPwKz1VrrhvM7tVgdIhZdekuIOt4S+7WjRV5J+XT0jlhwUBEIxx8knRPagmxygSZM3h/FbX+mEbduIwVy+y1HwtfwVq3PyR9YIDjVDuc3+6VNZd69TEIHqRQlbwb2jkitgEHx/Vs32KtDyfRZgkhA6ZGZRlnEiX3R0YRzjCt5xCw=="),
						},
						DataServiceLevel2Key: &armhybriddatamanager.Key{
							EncryptionChunkSizeInBytes: to.Ptr[int32](245),
							KeyExponent:                to.Ptr("AQAB"),
							KeyModulus:                 to.Ptr("rtCsQNdCaDwLHIvgkhkKldvUNjili+rsj8CVaKGTwAyQGvAIwKOe3zfwW3TFaeycTFAQ1payBjY2tW9uWSWDTJRpHZVYTTX/1mjnXHTqcZYsgSkblt0PhLWbbYATGMmyBie0XM3Xfy1ilwAMYNHu+YaW56NyFpepyNcheZbmkD4/Vveh+5JStwObqEp1vsagraQ/IqUDCAETRxFc3iIWJZnqW2yfIWZshky20fkmyBnRrpe5fexpj6Xz4VHT76Lj+7bTEbsFSq7fNUjRcCIf2gat8bBN4HD2w//GZVCKarQG6G0kilA0bDZHFAzVeTs2+UYB+1GA+r+Uy3SOEIdLPw=="),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublicKeyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublicKeyList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/PublicKeys_ListByDataManager-GET-example-211.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublicKeys_Get(t *testing.T) {
	// From example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/PublicKeys_Get-GET-example-222.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublicKeys_GetGET222"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybriddatamanager.NewPublicKeysClient("6e0219f5-327a-4365-904f-05eed4227ad7", cred, &options)
	res, err := client.Get(ctx,
		"default",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/PublicKeys_Get-GET-example-222.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybriddatamanager.PublicKey{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.HybridData/dataManagers/publicKeys"),
			ID:   to.Ptr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/publicKeys/default"),
			Properties: &armhybriddatamanager.PublicKeyProperties{
				DataServiceLevel1Key: &armhybriddatamanager.Key{
					EncryptionChunkSizeInBytes: to.Ptr[int32](245),
					KeyExponent:                to.Ptr("AQAB"),
					KeyModulus:                 to.Ptr("mjDxqxGmawhC15TUM/oKCe2rRg6nM+IEqujgn17vc1litm3TPmv7rtDr4Y/L/t+tYCug7aXxJtwGA9ETOUF9iUoGPE3zBKMGPJhO5nRF3IW27OzYUNTdHgUjlV0ba5QlZQ/f5ideEboJvdlw05ofPVQKZ9Hh95/9sOFYuNBKP0LPwKz1VrrhvM7tVgdIhZdekuIOt4S+7WjRV5J+XT0jlhwUBEIxx8knRPagmxygSZM3h/FbX+mEbduIwVy+y1HwtfwVq3PyR9YIDjVDuc3+6VNZd69TEIHqRQlbwb2jkitgEHx/Vs32KtDyfRZgkhA6ZGZRlnEiX3R0YRzjCt5xCw=="),
				},
				DataServiceLevel2Key: &armhybriddatamanager.Key{
					EncryptionChunkSizeInBytes: to.Ptr[int32](245),
					KeyExponent:                to.Ptr("AQAB"),
					KeyModulus:                 to.Ptr("rtCsQNdCaDwLHIvgkhkKldvUNjili+rsj8CVaKGTwAyQGvAIwKOe3zfwW3TFaeycTFAQ1payBjY2tW9uWSWDTJRpHZVYTTX/1mjnXHTqcZYsgSkblt0PhLWbbYATGMmyBie0XM3Xfy1ilwAMYNHu+YaW56NyFpepyNcheZbmkD4/Vveh+5JStwObqEp1vsagraQ/IqUDCAETRxFc3iIWJZnqW2yfIWZshky20fkmyBnRrpe5fexpj6Xz4VHT76Lj+7bTEbsFSq7fNUjRcCIf2gat8bBN4HD2w//GZVCKarQG6G0kilA0bDZHFAzVeTs2+UYB+1GA+r+Uy3SOEIdLPw=="),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublicKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublicKey)
			t.Fatalf("Mock response is not equal to example response for example specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/PublicKeys_Get-GET-example-222.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
