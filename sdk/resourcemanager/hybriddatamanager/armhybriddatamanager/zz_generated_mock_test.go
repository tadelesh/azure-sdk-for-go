//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybriddatamanager

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Operations_ListGET11
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestDataManagers_List(t *testing.T) {
	// From example DataManagers_ListGET21
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataManagersClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	_, err := client.List(ctx,
		&DataManagersListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataManagers_ListByResourceGroup(t *testing.T) {
	// From example DataManagers_ListByResourceGroupGET31
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataManagersClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	_, err := client.ListByResourceGroup(ctx,
		"ResourceGroupForSDKTest",
		&DataManagersListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataManagers_Get(t *testing.T) {
	// From example DataManagers_GetGET41
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataManagersClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataManagersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataManager.ID == nil {
		t.Fatal("DataManager.ID should not be nil!")
	}
}

func TestDataManagers_Create(t *testing.T) {
	// From example DataManagers_CreatePUT41
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataManagersClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginCreate(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		DataManager{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
		},
		&DataManagersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataManager.ID == nil {
		t.Fatal("DataManager.ID should not be nil!")
	}
}

func TestDataManagers_Delete(t *testing.T) {
	// From example DataManagers_DeleteDELETE41
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataManagersClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginDelete(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataManagersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataManagers_Update(t *testing.T) {
	// From example DataManagers_UpdatePATCH43
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataManagersClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginUpdate(ctx,
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		DataManagerUpdateParameter{
			SKU: &SKU{
				Name: to.StringPtr("DS0"),
				Tier: to.StringPtr("Standard"),
			},
			Tags: map[string]*string{
				"UpdateDateTime": to.StringPtr("05-Feb-20 2:17:22 PM"),
			},
		},
		&DataManagersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataManager.ID == nil {
		t.Fatal("DataManager.ID should not be nil!")
	}
}

func TestDataServices_ListByDataManager(t *testing.T) {
	// From example DataServices_ListByDataManagerGET51
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataServicesClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataServicesListByDataManagerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataService.ID should not be nil!")
			}
		}
	}
}

func TestDataServices_Get(t *testing.T) {
	// From example DataServices_GetGET62
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataServicesClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"DataTransformation",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataService.ID == nil {
		t.Fatal("DataService.ID should not be nil!")
	}
}

func TestJobDefinitions_ListByDataService(t *testing.T) {
	// From example JobDefinitions_ListByDataServiceGET71
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobDefinitionsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataService("DataTransformation",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobDefinitionsListByDataServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobDefinition.ID should not be nil!")
			}
		}
	}
}

func TestJobDefinitions_Get(t *testing.T) {
	// From example JobDefinitions_GetGET81
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobDefinitionsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobDefinitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobDefinition.ID == nil {
		t.Fatal("JobDefinition.ID should not be nil!")
	}
}

func TestJobDefinitions_CreateOrUpdate(t *testing.T) {
	// From example JobDefinitions_CreateOrUpdatePUT83
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobDefinitionsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		JobDefinition{
			Properties: &JobDefinitionProperties{
				DataServiceInput: map[string]interface{}{
					"AzureStorageType": "Blob",
					"BackupChoice":     "UseExistingLatest",
					"ContainerName":    "containerfromtest",
					"DeviceName":       "8600-SHG0997877L71FC",
					"FileNameFilter":   "*",
					"IsDirectoryMode":  false,
					"RootDirectories": []interface{}{
						"\\",
					},
					"VolumeNames": []interface{}{
						"TestAutomation",
					},
				},
				DataSinkID:       to.StringPtr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1"),
				DataSourceID:     to.StringPtr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1"),
				RunLocation:      RunLocationWestus.ToPtr(),
				State:            StateEnabled.ToPtr(),
				UserConfirmation: UserConfirmationRequired.ToPtr(),
			},
		},
		&JobDefinitionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobDefinition.ID == nil {
		t.Fatal("JobDefinition.ID should not be nil!")
	}
}

func TestJobDefinitions_Delete(t *testing.T) {
	// From example JobDefinitions_DeleteDELETE81
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobDefinitionsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginDelete(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobDefinitionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobDefinitions_Run(t *testing.T) {
	// From example JobDefinitions_RunPOST132
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobDefinitionsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginRun(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		RunParameters{
			CustomerSecrets: []*CustomerSecret{},
			DataServiceInput: map[string]interface{}{
				"AzureStorageType": "Blob",
				"BackupChoice":     "UseExistingLatest",
				"ContainerName":    "containerfromtest",
				"DeviceName":       "8600-SHG0997877L71FC",
				"FileNameFilter":   "*",
				"IsDirectoryMode":  false,
				"RootDirectories": []interface{}{
					"\\",
				},
				"VolumeNames": []interface{}{
					"TestAutomation",
				},
			},
			UserConfirmation: UserConfirmationNotRequired.ToPtr(),
		},
		&JobDefinitionsBeginRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobDefinitions_ListByDataManager(t *testing.T) {
	// From example JobDefinitions_ListByDataManagerGET191
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobDefinitionsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobDefinitionsListByDataManagerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobDefinition.ID should not be nil!")
			}
		}
	}
}

func TestJobs_ListByJobDefinition(t *testing.T) {
	// From example Jobs_ListByJobDefinitionGET91
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByJobDefinition("DataTransformation",
		"jobdeffromtestcode1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobsListByJobDefinitionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example Jobs_GetGET101
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"99ef93fe-36be-43e4-bebf-de6746730601",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_Cancel(t *testing.T) {
	// From example Jobs_CancelPOST111
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginCancel(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"6eca9b3d-5ffe-4b44-9607-1ba838371ff7",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobsBeginCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_Resume(t *testing.T) {
	// From example Jobs_ResumePOST121
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginResume(ctx,
		"DataTransformation",
		"jobdeffromtestcode1",
		"99ef93fe-36be-43e4-bebf-de6746730601",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobsBeginResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_ListByDataService(t *testing.T) {
	// From example Jobs_ListByDataServiceGET141
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataService("DataTransformation",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobsListByDataServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestJobs_ListByDataManager(t *testing.T) {
	// From example Jobs_ListByDataManagerGET201
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&JobsListByDataManagerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestDataStores_ListByDataManager(t *testing.T) {
	// From example DataStores_ListByDataManagerGET151
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataStoresClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoresListByDataManagerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataStore.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataStore.ID should not be nil!")
			}
		}
	}
}

func TestDataStores_Get(t *testing.T) {
	// From example DataStores_GetGET161
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataStoresClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"TestStorSimpleSource1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoresGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataStore.ID == nil {
		t.Fatal("DataStore.ID should not be nil!")
	}

	// From example DataStores_GetGET162
	res, err = client.Get(ctx,
		"TestAzureStorage1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoresGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataStore.ID == nil {
		t.Fatal("DataStore.ID should not be nil!")
	}
}

func TestDataStores_CreateOrUpdate(t *testing.T) {
	// From example DataStores_CreateOrUpdate_DataSinkPUT162
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataStoresClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestAzureStorage1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		DataStore{
			Properties: &DataStoreProperties{
				CustomerSecrets: []*CustomerSecret{
					{
						Algorithm:     SupportedAlgorithmRSA15.ToPtr(),
						KeyIdentifier: to.StringPtr("StorageAccountAccessKey"),
						KeyValue:      to.StringPtr("Of4H9eF03G8QuxvkZQEbFWv3YdN3U//WugzuqReQekbXXQyg+QSicVKrwSOOKVi1zWMYGbKg7d5/ES2gdz+O5ZEw89bvE4mJD/wQmkIsqhPnbN0gyVK6nZePXVUU1A+UzjLfvhSA6KyUQfzNAZ5/TLt6fo1JyQrKTtkvnkLFyfv1AqBZ+dw8JK3RZi/rEN8HD3R3qsBwUYfyEuGLGiujy2CGrr/1uPiUVMR6QuFWRsjm39eMSHa4maLg4tQ0IY/jIy8rMlx3KjF3CcCbPzAqEq5vXy37wkjZbus771te1gLSrzcpVKIMg4DrmgaoJ02jAu+izBjNgLXAFPSUneQ8yw==:ezMkh4PMhCnjJtYkpTaP0SdblP5VAeRe4glW2PgIzICHw3T8ZyGDoaTrCv4/m5wtcEhWdtxhta+j1MQWlK5MIA+hvf8QjIDIjQv696ov5y+pcFe/upd2ekGOei7FCwB2u7I8WnkAtIKTUkf6eDQBZXm26DjfG1Dlc+Mjjq+AerukEa6WpOyqrD7Qub26Pgmj4AsuBx19X1EAmTZacubkoiNagXM8V+IDanHOhLMvfgQ7rw8oZhWfofxi4m+eJqjOXXaqSyorNK8UEcqP6P9pDP8AN8ulXEx6rZy2B5Oi0vSV+wlRLbUuQslga4ItOGxctW/ZX8uWozt+5A3k4URt6A=="),
					},
					{
						Algorithm:     SupportedAlgorithmRSA15.ToPtr(),
						KeyIdentifier: to.StringPtr("StorageAccountAccessKeyForQueue"),
						KeyValue:      to.StringPtr("Of4H9eF03G8QuxvkZQEbFWv3YdN3U//WugzuqReQekbXXQyg+QSicVKrwSOOKVi1zWMYGbKg7d5/ES2gdz+O5ZEw89bvE4mJD/wQmkIsqhPnbN0gyVK6nZePXVUU1A+UzjLfvhSA6KyUQfzNAZ5/TLt6fo1JyQrKTtkvnkLFyfv1AqBZ+dw8JK3RZi/rEN8HD3R3qsBwUYfyEuGLGiujy2CGrr/1uPiUVMR6QuFWRsjm39eMSHa4maLg4tQ0IY/jIy8rMlx3KjF3CcCbPzAqEq5vXy37wkjZbus771te1gLSrzcpVKIMg4DrmgaoJ02jAu+izBjNgLXAFPSUneQ8yw==:ezMkh4PMhCnjJtYkpTaP0SdblP5VAeRe4glW2PgIzICHw3T8ZyGDoaTrCv4/m5wtcEhWdtxhta+j1MQWlK5MIA+hvf8QjIDIjQv696ov5y+pcFe/upd2ekGOei7FCwB2u7I8WnkAtIKTUkf6eDQBZXm26DjfG1Dlc+Mjjq+AerukEa6WpOyqrD7Qub26Pgmj4AsuBx19X1EAmTZacubkoiNagXM8V+IDanHOhLMvfgQ7rw8oZhWfofxi4m+eJqjOXXaqSyorNK8UEcqP6P9pDP8AN8ulXEx6rZy2B5Oi0vSV+wlRLbUuQslga4ItOGxctW/ZX8uWozt+5A3k4URt6A=="),
					}},
				DataStoreTypeID: to.StringPtr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount"),
				ExtendedProperties: map[string]interface{}{
					"extendedSaKey":              null,
					"extendedSaName":             "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
					"storageAccountNameForQueue": "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
				},
				RepositoryID: to.StringPtr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink"),
				State:        StateEnabled.ToPtr(),
			},
		},
		&DataStoresBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataStore.ID == nil {
		t.Fatal("DataStore.ID should not be nil!")
	}

	// From example DataStores_CreateOrUpdate_DataSourcePUT162
	poller, err = client.BeginCreateOrUpdate(ctx,
		"TestStorSimpleSource1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		DataStore{
			Properties: &DataStoreProperties{
				CustomerSecrets: []*CustomerSecret{
					{
						Algorithm:     SupportedAlgorithmRSA15.ToPtr(),
						KeyIdentifier: to.StringPtr("ServiceEncryptionKey"),
						KeyValue:      to.StringPtr("EVuEBV40qv23xDRL4NZBuMms4e3So6ikHjrQYRvG9NloqxdgPOg+ZYzpho5lytI4fmv0ANmRIvDiDboRXcUVSjbB9T2gm19fMIuwZa4FK2+LYEgMqKK1GaLkk7xC8f5IeFUXLo6KyBBpaAiayTnWDcHuYEpMiGrV7trDDcbhMRefO3CHecmH3Z7ye8L0RQ/e7WW8GlCKZj3m0BaG7OrJgjai8gyDfMfGAG5rTqEhDVh2hLQ+TjvUjcOFwHvJusqKTENtbJTNQYmL9wZXsnwBvUwxqrGieILNB7V3GD1Ow9OiV0UCDW1e9LnMueukg+l7YJCU9FUhIPh/nSif6p32zw==:jCfio+pDtY3BSPZDpDJ0L6QdXLYMeOmxaFWtYTOZkNqNTgT8Loc/KSQRjtWS5K4N4btbznuSJ/dzg0aZEzlXgKDSuZgMfd4Ch92ZwAC/BkeCmVrTjiKJsoQXO1IICCUf7GHGBbYnnpsNJcEn4vyc9NXyKwOBjeU+I9AyK7PtYiC03RLpTS6xttFCICteBV0uoBHAiV0chZ5VIIUUMjO9u8EhHqRY7NNcGbWdVJeAb6J3vH4E/DHkQj+DXlpjcLvmK/uqBwxfNju30RJhR04Nmz6zcv/zTcvS0uN5hEPQoHLyv84hjnc4omg/gmNjo2cDW64QxA3RTJ5Sl///4xTBkg=="),
					}},
				DataStoreTypeID: to.StringPtr("/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series"),
				ExtendedProperties: map[string]interface{}{
					"extendedSaKey": null,
					"resourceId":    "/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
				},
				RepositoryID: to.StringPtr("/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600"),
				State:        StateEnabled.ToPtr(),
			},
		},
		&DataStoresBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataStore.ID == nil {
		t.Fatal("DataStore.ID should not be nil!")
	}
}

func TestDataStores_Delete(t *testing.T) {
	// From example DataStores_Delete_DataSinkDELETE161
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataStoresClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	poller, err := client.BeginDelete(ctx,
		"TestAzureStorage1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoresBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example DataStores_Delete_DataSourceDELETE161
	poller, err = client.BeginDelete(ctx,
		"TestStorSimpleSource1",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoresBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataStoreTypes_ListByDataManager(t *testing.T) {
	// From example DataStoreTypes_ListByDataManagerGET171
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataStoreTypesClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoreTypesListByDataManagerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataStoreType.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataStoreType.ID should not be nil!")
			}
		}
	}
}

func TestDataStoreTypes_Get(t *testing.T) {
	// From example DataStoreTypes_GetGET182
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataStoreTypesClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"StorSimple8000Series",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoreTypesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataStoreType.ID == nil {
		t.Fatal("DataStoreType.ID should not be nil!")
	}

	// From example DataStoreTypes_GetGET183
	res, err = client.Get(ctx,
		"AzureStorageAccount",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&DataStoreTypesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataStoreType.ID == nil {
		t.Fatal("DataStoreType.ID should not be nil!")
	}
}

func TestPublicKeys_ListByDataManager(t *testing.T) {
	// From example PublicKeys_ListByDataManagerGET211
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicKeysClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	pager := client.ListByDataManager("ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&PublicKeysListByDataManagerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PublicKey.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PublicKey.ID should not be nil!")
			}
		}
	}
}

func TestPublicKeys_Get(t *testing.T) {
	// From example PublicKeys_GetGET222
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicKeysClient(con,
		"6e0219f5-327a-4365-904f-05eed4227ad7")
	res, err := client.Get(ctx,
		"default",
		"ResourceGroupForSDKTest",
		"TestAzureSDKOperations",
		&PublicKeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PublicKey.ID == nil {
		t.Fatal("PublicKey.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
