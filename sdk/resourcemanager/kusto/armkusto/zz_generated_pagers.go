//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkusto

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AttachedDatabaseConfigurationsClientListByClusterPager provides operations for iterating over paged responses.
type AttachedDatabaseConfigurationsClientListByClusterPager struct {
	client    *AttachedDatabaseConfigurationsClient
	current   AttachedDatabaseConfigurationsClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AttachedDatabaseConfigurationsClientListByClusterPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AttachedDatabaseConfigurationsClientListByClusterPager) NextPage(ctx context.Context) (AttachedDatabaseConfigurationsClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AttachedDatabaseConfigurationsClientListByClusterResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AttachedDatabaseConfigurationsClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AttachedDatabaseConfigurationsClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AttachedDatabaseConfigurationsClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return AttachedDatabaseConfigurationsClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClusterPrincipalAssignmentsClientListPager provides operations for iterating over paged responses.
type ClusterPrincipalAssignmentsClientListPager struct {
	client    *ClusterPrincipalAssignmentsClient
	current   ClusterPrincipalAssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClusterPrincipalAssignmentsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClusterPrincipalAssignmentsClientListPager) NextPage(ctx context.Context) (ClusterPrincipalAssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClusterPrincipalAssignmentsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClusterPrincipalAssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClusterPrincipalAssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClusterPrincipalAssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ClusterPrincipalAssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListByResourceGroupPager provides operations for iterating over paged responses.
type ClustersClientListByResourceGroupPager struct {
	client    *ClustersClient
	current   ClustersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListByResourceGroupPager) NextPage(ctx context.Context) (ClustersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClustersClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListFollowerDatabasesPager provides operations for iterating over paged responses.
type ClustersClientListFollowerDatabasesPager struct {
	client    *ClustersClient
	current   ClustersClientListFollowerDatabasesResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListFollowerDatabasesPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListFollowerDatabasesPager) NextPage(ctx context.Context) (ClustersClientListFollowerDatabasesResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClustersClientListFollowerDatabasesResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListFollowerDatabasesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListFollowerDatabasesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListFollowerDatabasesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listFollowerDatabasesHandleResponse(resp)
	if err != nil {
		return ClustersClientListFollowerDatabasesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListLanguageExtensionsPager provides operations for iterating over paged responses.
type ClustersClientListLanguageExtensionsPager struct {
	client    *ClustersClient
	current   ClustersClientListLanguageExtensionsResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListLanguageExtensionsPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListLanguageExtensionsPager) NextPage(ctx context.Context) (ClustersClientListLanguageExtensionsResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClustersClientListLanguageExtensionsResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListLanguageExtensionsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListLanguageExtensionsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListLanguageExtensionsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listLanguageExtensionsHandleResponse(resp)
	if err != nil {
		return ClustersClientListLanguageExtensionsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListOutboundNetworkDependenciesEndpointsPager provides operations for iterating over paged responses.
type ClustersClientListOutboundNetworkDependenciesEndpointsPager struct {
	client    *ClustersClient
	current   ClustersClientListOutboundNetworkDependenciesEndpointsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListOutboundNetworkDependenciesEndpointsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListOutboundNetworkDependenciesEndpointsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundNetworkDependenciesEndpointListResult.NextLink == nil || len(*p.current.OutboundNetworkDependenciesEndpointListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListOutboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) (ClustersClientListOutboundNetworkDependenciesEndpointsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOutboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		return ClustersClientListOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListPager provides operations for iterating over paged responses.
type ClustersClientListPager struct {
	client    *ClustersClient
	current   ClustersClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListPager) NextPage(ctx context.Context) (ClustersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClustersClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ClustersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListSKUsByResourcePager provides operations for iterating over paged responses.
type ClustersClientListSKUsByResourcePager struct {
	client    *ClustersClient
	current   ClustersClientListSKUsByResourceResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListSKUsByResourcePager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListSKUsByResourcePager) NextPage(ctx context.Context) (ClustersClientListSKUsByResourceResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClustersClientListSKUsByResourceResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListSKUsByResourceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListSKUsByResourceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListSKUsByResourceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listSKUsByResourceHandleResponse(resp)
	if err != nil {
		return ClustersClientListSKUsByResourceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListSKUsPager provides operations for iterating over paged responses.
type ClustersClientListSKUsPager struct {
	client    *ClustersClient
	current   ClustersClientListSKUsResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListSKUsPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListSKUsPager) NextPage(ctx context.Context) (ClustersClientListSKUsResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ClustersClientListSKUsResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListSKUsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListSKUsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListSKUsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listSKUsHandleResponse(resp)
	if err != nil {
		return ClustersClientListSKUsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataConnectionsClientListByDatabasePager provides operations for iterating over paged responses.
type DataConnectionsClientListByDatabasePager struct {
	client    *DataConnectionsClient
	current   DataConnectionsClientListByDatabaseResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataConnectionsClientListByDatabasePager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DataConnectionsClientListByDatabasePager) NextPage(ctx context.Context) (DataConnectionsClientListByDatabaseResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DataConnectionsClientListByDatabaseResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataConnectionsClientListByDatabaseResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataConnectionsClientListByDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataConnectionsClientListByDatabaseResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		return DataConnectionsClientListByDatabaseResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DatabasePrincipalAssignmentsClientListPager provides operations for iterating over paged responses.
type DatabasePrincipalAssignmentsClientListPager struct {
	client    *DatabasePrincipalAssignmentsClient
	current   DatabasePrincipalAssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DatabasePrincipalAssignmentsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DatabasePrincipalAssignmentsClientListPager) NextPage(ctx context.Context) (DatabasePrincipalAssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DatabasePrincipalAssignmentsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DatabasePrincipalAssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DatabasePrincipalAssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DatabasePrincipalAssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DatabasePrincipalAssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DatabasesClientListByClusterPager provides operations for iterating over paged responses.
type DatabasesClientListByClusterPager struct {
	client    *DatabasesClient
	current   DatabasesClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DatabasesClientListByClusterPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DatabasesClientListByClusterPager) NextPage(ctx context.Context) (DatabasesClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DatabasesClientListByClusterResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DatabasesClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DatabasesClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DatabasesClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return DatabasesClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DatabasesClientListPrincipalsPager provides operations for iterating over paged responses.
type DatabasesClientListPrincipalsPager struct {
	client    *DatabasesClient
	current   DatabasesClientListPrincipalsResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DatabasesClientListPrincipalsPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *DatabasesClientListPrincipalsPager) NextPage(ctx context.Context) (DatabasesClientListPrincipalsResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return DatabasesClientListPrincipalsResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DatabasesClientListPrincipalsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DatabasesClientListPrincipalsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DatabasesClientListPrincipalsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listPrincipalsHandleResponse(resp)
	if err != nil {
		return DatabasesClientListPrincipalsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedPrivateEndpointsClientListPager provides operations for iterating over paged responses.
type ManagedPrivateEndpointsClientListPager struct {
	client    *ManagedPrivateEndpointsClient
	current   ManagedPrivateEndpointsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedPrivateEndpointsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ManagedPrivateEndpointsClientListPager) NextPage(ctx context.Context) (ManagedPrivateEndpointsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ManagedPrivateEndpointsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedPrivateEndpointsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedPrivateEndpointsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedPrivateEndpointsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ManagedPrivateEndpointsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PrivateEndpointConnectionsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListPager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListPager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PrivateLinkResourcesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ScriptsClientListByDatabasePager provides operations for iterating over paged responses.
type ScriptsClientListByDatabasePager struct {
	client    *ScriptsClient
	current   ScriptsClientListByDatabaseResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ScriptsClientListByDatabasePager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ScriptsClientListByDatabasePager) NextPage(ctx context.Context) (ScriptsClientListByDatabaseResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ScriptsClientListByDatabaseResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ScriptsClientListByDatabaseResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ScriptsClientListByDatabaseResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ScriptsClientListByDatabaseResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		return ScriptsClientListByDatabaseResponse{}, err
	}
	p.current = result
	return p.current, nil
}
