//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkusto_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kusto/armkusto"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestClusters_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.Cluster{
			Name:     to.Ptr("KustoClusterRPTest4"),
			Type:     to.Ptr("Microsoft.Kusto/Clusters"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("abcd123"),
			Identity: &armkusto.Identity{
				Type:                   to.Ptr(armkusto.IdentityTypeSystemAssigned),
				PrincipalID:            to.Ptr("faabad1f-4876-463c-af9d-6ba2d2d2394c"),
				TenantID:               to.Ptr("b932977f-6277-4ab7-a2cd-5bd21f07aaf4"),
				UserAssignedIdentities: map[string]*armkusto.ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties{},
			},
			Properties: &armkusto.ClusterProperties{
				AllowedFqdnList: []*string{
					to.Ptr("my-stroage.blob.core.windows.net")},
				AllowedIPRangeList:    []*string{},
				EnableAutoStop:        to.Ptr(true),
				EnableDiskEncryption:  to.Ptr(false),
				EnablePurge:           to.Ptr(false),
				EnableStreamingIngest: to.Ptr(true),
				EngineType:            to.Ptr(armkusto.EngineTypeV3),
				KeyVaultProperties: &armkusto.KeyVaultProperties{
					KeyName:     to.Ptr("keyName"),
					KeyVaultURI: to.Ptr("https://dummy.keyvault.com"),
					KeyVersion:  to.Ptr("keyVersion"),
				},
				ProvisioningState:             to.Ptr(armkusto.ProvisioningStateSucceeded),
				PublicNetworkAccess:           to.Ptr(armkusto.PublicNetworkAccessEnabled),
				RestrictOutboundNetworkAccess: to.Ptr(armkusto.ClusterNetworkAccessFlagEnabled),
			},
			SKU: &armkusto.AzureSKU{
				Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
			},
			SystemData: &armkusto.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armkusto.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@microsoft.com"),
				LastModifiedByType: to.Ptr(armkusto.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.Cluster{
			Location: to.Ptr("westus"),
			Identity: &armkusto.Identity{
				Type: to.Ptr(armkusto.IdentityTypeSystemAssigned),
			},
			Properties: &armkusto.ClusterProperties{
				AllowedIPRangeList: []*string{
					to.Ptr("0.0.0.0/0")},
				EnableAutoStop:         to.Ptr(true),
				EnableDoubleEncryption: to.Ptr(false),
				EnablePurge:            to.Ptr(true),
				EnableStreamingIngest:  to.Ptr(true),
				PublicNetworkAccess:    to.Ptr(armkusto.PublicNetworkAccessEnabled),
			},
			SKU: &armkusto.AzureSKU{
				Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
			},
		},
		&armkusto.ClustersClientBeginCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.Cluster{
			Name:     to.Ptr("KustoClusterRPTest4"),
			Type:     to.Ptr("Microsoft.Kusto/Clusters"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("abcd"),
			Identity: &armkusto.Identity{
				Type:                   to.Ptr(armkusto.IdentityTypeSystemAssigned),
				PrincipalID:            to.Ptr("faabad1f-4876-463c-af9d-6ba2d2d2394c"),
				TenantID:               to.Ptr("b932977f-6277-4ab7-a2cd-5bd21f07aaf4"),
				UserAssignedIdentities: map[string]*armkusto.ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties{},
			},
			Properties: &armkusto.ClusterProperties{
				AllowedIPRangeList: []*string{
					to.Ptr("0.0.0.0/0")},
				EnableAutoStop:         to.Ptr(true),
				EnableDiskEncryption:   to.Ptr(false),
				EnableDoubleEncryption: to.Ptr(false),
				EnablePurge:            to.Ptr(true),
				EnableStreamingIngest:  to.Ptr(true),
				EngineType:             to.Ptr(armkusto.EngineTypeV3),
				KeyVaultProperties: &armkusto.KeyVaultProperties{
					KeyName:     to.Ptr("keyName"),
					KeyVaultURI: to.Ptr("https://dummy.keyvault.com"),
					KeyVersion:  to.Ptr("keyVersion"),
				},
				ProvisioningState:   to.Ptr(armkusto.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armkusto.PublicNetworkAccessEnabled),
			},
			SKU: &armkusto.AzureSKU{
				Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.ClusterUpdate{
			Location: to.Ptr("westus"),
		},
		&armkusto.ClustersClientBeginUpdateOptions{IfMatch: to.Ptr("*"),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.Cluster{
			Name:     to.Ptr("KustoClusterRPTest4"),
			Type:     to.Ptr("Microsoft.Kusto/Clusters"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("abcd123"),
			Identity: &armkusto.Identity{
				Type:                   to.Ptr(armkusto.IdentityTypeSystemAssigned),
				PrincipalID:            to.Ptr("faabad1f-4876-463c-af9d-6ba2d2d2394c"),
				TenantID:               to.Ptr("b932977f-6277-4ab7-a2cd-5bd21f07aaf4"),
				UserAssignedIdentities: map[string]*armkusto.ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties{},
			},
			Properties: &armkusto.ClusterProperties{
				EnableAutoStop:        to.Ptr(true),
				EnableDiskEncryption:  to.Ptr(false),
				EnablePurge:           to.Ptr(true),
				EnableStreamingIngest: to.Ptr(true),
				EngineType:            to.Ptr(armkusto.EngineTypeV3),
				KeyVaultProperties: &armkusto.KeyVaultProperties{
					KeyName:     to.Ptr("keyName"),
					KeyVaultURI: to.Ptr("https://dummy.keyvault.com"),
					KeyVersion:  to.Ptr("keyVersion"),
				},
				ProvisioningState:             to.Ptr(armkusto.ProvisioningStateSucceeded),
				RestrictOutboundNetworkAccess: to.Ptr(armkusto.ClusterNetworkAccessFlagDisabled),
			},
			SKU: &armkusto.AzureSKU{
				Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		&armkusto.ClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDelete.json: %v", err)
	}
}

func TestClusters_Stop(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginStop(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		&armkusto.ClustersClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersStop.json: %v", err)
	}
}

func TestClusters_Start(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersStart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginStart(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		&armkusto.ClustersClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersStart.json: %v", err)
	}
}

func TestClusters_ListFollowerDatabases(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterListFollowerDatabases.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterListFollowerDatabases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListFollowerDatabases("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterListFollowerDatabases.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.FollowerDatabaseListResult{
			Value: []*armkusto.FollowerDatabaseDefinition{
				{
					AttachedDatabaseConfigurationName: to.Ptr("attachedDbConfiguration"),
					ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/clusters/follower1"),
					DatabaseName:                      to.Ptr("*"),
				},
				{
					AttachedDatabaseConfigurationName: to.Ptr("attachedDbConfiguration2"),
					ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/clusters/follower4"),
					DatabaseName:                      to.Ptr("db1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FollowerDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FollowerDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterListFollowerDatabases.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_DetachFollowerDatabases(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterDetachFollowerDatabases.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterDetachFollowerDatabases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDetachFollowerDatabases(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.FollowerDatabaseDefinition{
			AttachedDatabaseConfigurationName: to.Ptr("myAttachedDatabaseConfiguration"),
			ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/clusters/leader4"),
		},
		&armkusto.ClustersClientBeginDetachFollowerDatabasesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterDetachFollowerDatabases.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterDetachFollowerDatabases.json: %v", err)
	}
}

func TestClusters_DiagnoseVirtualNetwork(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDiagnoseVirtualNetwork.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterDiagnoseVirtualNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDiagnoseVirtualNetwork(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		&armkusto.ClustersClientBeginDiagnoseVirtualNetworkOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDiagnoseVirtualNetwork.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDiagnoseVirtualNetwork.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DiagnoseVirtualNetworkResult{
			Findings: []*string{
				to.Ptr("Outbound dependency 'Storage:443' might not be satisfied (Outbound)")},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnoseVirtualNetworkResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnoseVirtualNetworkResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersDiagnoseVirtualNetwork.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByResourceGroup("kustorptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.ClusterListResult{
			Value: []*armkusto.Cluster{
				{
					Name:     to.Ptr("KustoClusterRPTest4"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("abcd123"),
					Properties: &armkusto.ClusterProperties{
						AllowedFqdnList: []*string{
							to.Ptr("my-stroage.blob.core.windows.net")},
						AllowedIPRangeList:    []*string{},
						EnableDiskEncryption:  to.Ptr(false),
						EnableStreamingIngest: to.Ptr(true),
						EngineType:            to.Ptr(armkusto.EngineTypeV2),
						KeyVaultProperties: &armkusto.KeyVaultProperties{
							KeyName:     to.Ptr("keyName"),
							KeyVaultURI: to.Ptr("https://dummy.keyvault.com"),
							KeyVersion:  to.Ptr("keyVersion"),
						},
						ProvisioningState:   to.Ptr(armkusto.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armkusto.PublicNetworkAccessEnabled),
					},
					SKU: &armkusto.AzureSKU{
						Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("KustoClusterRPTest3"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest3"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("abcd123"),
					Properties: &armkusto.ClusterProperties{
						AllowedIPRangeList: []*string{
							to.Ptr("0.0.0.0/0")},
						EnableDiskEncryption:          to.Ptr(true),
						EnableStreamingIngest:         to.Ptr(true),
						EngineType:                    to.Ptr(armkusto.EngineTypeV3),
						ProvisioningState:             to.Ptr(armkusto.ProvisioningStateSucceeded),
						PublicNetworkAccess:           to.Ptr(armkusto.PublicNetworkAccessEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armkusto.ClusterNetworkAccessFlagDisabled),
					},
					SKU: &armkusto.AzureSKU{
						Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.ClusterListResult{
			Value: []*armkusto.Cluster{
				{
					Name:     to.Ptr("KustoClusterRPTest4"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("abcd123"),
					Properties: &armkusto.ClusterProperties{
						AllowedFqdnList: []*string{
							to.Ptr("my-stroage.blob.core.windows.net")},
						AllowedIPRangeList:    []*string{},
						EnableAutoStop:        to.Ptr(true),
						EnableDiskEncryption:  to.Ptr(false),
						EnableStreamingIngest: to.Ptr(true),
						EngineType:            to.Ptr(armkusto.EngineTypeV3),
						KeyVaultProperties: &armkusto.KeyVaultProperties{
							KeyName:     to.Ptr("keyName"),
							KeyVaultURI: to.Ptr("https://dummy.keyvault.com"),
							KeyVersion:  to.Ptr("keyVersion"),
						},
						ProvisioningState:             to.Ptr(armkusto.ProvisioningStateSucceeded),
						PublicNetworkAccess:           to.Ptr(armkusto.PublicNetworkAccessEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armkusto.ClusterNetworkAccessFlagEnabled),
					},
					SKU: &armkusto.AzureSKU{
						Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
					},
				},
				{
					Name:     to.Ptr("KustoClusterRPTest3"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest3"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("abcd123"),
					Properties: &armkusto.ClusterProperties{
						AllowedIPRangeList: []*string{
							to.Ptr("0.0.0.0/0")},
						EnableDiskEncryption:          to.Ptr(true),
						EnableStreamingIngest:         to.Ptr(true),
						EngineType:                    to.Ptr(armkusto.EngineTypeV2),
						ProvisioningState:             to.Ptr(armkusto.ProvisioningStateSucceeded),
						PublicNetworkAccess:           to.Ptr(armkusto.PublicNetworkAccessEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armkusto.ClusterNetworkAccessFlagDisabled),
					},
					SKU: &armkusto.AzureSKU{
						Name:     to.Ptr(armkusto.AzureSKUNameStandardL8S),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr(armkusto.AzureSKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClustersCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"westus",
		armkusto.ClusterCheckNameRequest{
			Name: to.Ptr("kustoclusterrptest4"),
			Type: to.Ptr("Microsoft.Kusto/clusters"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("kuskusprod"),
			Message:       to.Ptr("Name 'kuskusprod' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClustersCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOutboundNetworkDependenciesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Kusto cluster outbound network dependencies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListOutboundNetworkDependenciesEndpoints("kustorptest",
		"kustoclusterrptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOutboundNetworkDependenciesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.OutboundNetworkDependenciesEndpointListResult{
			Value: []*armkusto.OutboundNetworkDependenciesEndpoint{
				{
					Name: to.Ptr("kustoclusterrptest/AzureActiveDirectory"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/OutboundNetworkDependenciesEndpoints"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest/OutboundNetworkDependenciesEndpoints/AzureActiveDirectory"),
					Properties: &armkusto.OutboundNetworkDependenciesEndpointProperties{
						Category: to.Ptr("Azure Active Directory"),
						Endpoints: []*armkusto.EndpointDependency{
							{
								DomainName: to.Ptr("login.microsoftonline.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("graph.windows.net"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("graph.microsoft.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("graph.microsoft-ppe.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							}},
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("kustoclusterrptest/AzureMonitor"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/OutboundNetworkDependenciesEndpoints"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest/OutboundNetworkDependenciesEndpoints/AzureMonitor"),
					Properties: &armkusto.OutboundNetworkDependenciesEndpointProperties{
						Category: to.Ptr("Azure Monitor"),
						Endpoints: []*armkusto.EndpointDependency{
							{
								DomainName: to.Ptr("prod.warmpath.msftcloudes.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("gcs.prod.monitoring.core.windows.net"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("production.diagnostics.monitoring.core.windows.net"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("shoebox2.metrics.nsatc.net:443"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							}},
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("kustoclusterrptest/CertificateAuthority"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/OutboundNetworkDependenciesEndpoints"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest/OutboundNetworkDependenciesEndpoints/CertificateAuthority"),
					Properties: &armkusto.OutboundNetworkDependenciesEndpointProperties{
						Category: to.Ptr("Certificate Authority"),
						Endpoints: []*armkusto.EndpointDependency{
							{
								DomainName: to.Ptr("ocsp.msocsp.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](80),
									}},
							},
							{
								DomainName: to.Ptr("ocsp.digicert.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](80),
									}},
							},
							{
								DomainName: to.Ptr("crl3.digicert.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](80),
									}},
							},
							{
								DomainName: to.Ptr("crl.microsoft.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](80),
									}},
							},
							{
								DomainName: to.Ptr("www.microsoft.com"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](80),
									}},
							}},
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("kustoclusterrptest/AzureStorage"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/OutboundNetworkDependenciesEndpoints"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest/OutboundNetworkDependenciesEndpoints/AzureStorage"),
					Properties: &armkusto.OutboundNetworkDependenciesEndpointProperties{
						Category: to.Ptr("Azure Storage"),
						Endpoints: []*armkusto.EndpointDependency{
							{
								DomainName: to.Ptr("clusterinternalsa.blob.core.windows.net"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("clusterinternalsa.queue.core.windows.net"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							},
							{
								DomainName: to.Ptr("clusterinternalsa.table.core.windows.net"),
								EndpointDetails: []*armkusto.EndpointDetail{
									{
										Port: to.Ptr[int32](443),
									}},
							}},
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundNetworkDependenciesEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundNetworkDependenciesEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOutboundNetworkDependenciesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListLanguageExtensions(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterListLanguageExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterListLanguageExtensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListLanguageExtensions("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterListLanguageExtensions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.LanguageExtensionsList{
			Value: []*armkusto.LanguageExtension{
				{
					LanguageExtensionName: to.Ptr(armkusto.LanguageExtensionNamePYTHON),
				},
				{
					LanguageExtensionName: to.Ptr(armkusto.LanguageExtensionNameR),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LanguageExtensionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LanguageExtensionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterListLanguageExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_AddLanguageExtensions(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterAddLanguageExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterAddLanguageExtensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginAddLanguageExtensions(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.LanguageExtensionsList{
			Value: []*armkusto.LanguageExtension{
				{
					LanguageExtensionName: to.Ptr(armkusto.LanguageExtensionNamePYTHON),
				},
				{
					LanguageExtensionName: to.Ptr(armkusto.LanguageExtensionNameR),
				}},
		},
		&armkusto.ClustersClientBeginAddLanguageExtensionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterAddLanguageExtensions.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterAddLanguageExtensions.json: %v", err)
	}
}

func TestClusters_RemoveLanguageExtensions(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterRemoveLanguageExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterRemoveLanguageExtensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClustersClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginRemoveLanguageExtensions(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.LanguageExtensionsList{
			Value: []*armkusto.LanguageExtension{
				{
					LanguageExtensionName: to.Ptr(armkusto.LanguageExtensionNamePYTHON),
				},
				{
					LanguageExtensionName: to.Ptr(armkusto.LanguageExtensionNameR),
				}},
		},
		&armkusto.ClustersClientBeginRemoveLanguageExtensionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterRemoveLanguageExtensions.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterRemoveLanguageExtensions.json: %v", err)
	}
}

func TestClusterPrincipalAssignments_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterPrincipalAssignmentsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClusterPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.ClusterPrincipalAssignmentCheckNameRequest{
			Name: to.Ptr("kustoprincipal1"),
			Type: to.Ptr("Microsoft.Kusto/clusters/principalAssignments"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("kustoprincipal1"),
			Message:       to.Ptr("Name 'kustoprincipal1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusterPrincipalAssignments_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterPrincipalAssignmentsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClusterPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoprincipal1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.ClusterPrincipalAssignment{
			Name: to.Ptr("kustoclusterrptest4/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/PrincipalAssignments/kustoprincipal1"),
			Properties: &armkusto.ClusterPrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
				Role:              to.Ptr(armkusto.ClusterPrincipalRole("Admin")),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterPrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterPrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusterPrincipalAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterPrincipalAssignmentsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClusterPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoprincipal1",
		armkusto.ClusterPrincipalAssignment{
			Properties: &armkusto.ClusterPrincipalProperties{
				PrincipalID:   to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalType: to.Ptr(armkusto.PrincipalTypeApp),
				Role:          to.Ptr(armkusto.ClusterPrincipalRoleAllDatabasesAdmin),
				TenantID:      to.Ptr("12345678-1234-1234-1234-123456789123"),
			},
		},
		&armkusto.ClusterPrincipalAssignmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.ClusterPrincipalAssignment{
			Name: to.Ptr("kustoclusterrptest4/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/PrincipalAssignments/kustoprincipal1"),
			Properties: &armkusto.ClusterPrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
				Role:              to.Ptr(armkusto.ClusterPrincipalRole("Admin")),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterPrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterPrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusterPrincipalAssignments_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoClusterPrincipalAssignmentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClusterPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoprincipal1",
		&armkusto.ClusterPrincipalAssignmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsDelete.json: %v", err)
	}
}

func TestClusterPrincipalAssignments_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPrincipalAssignmentsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewClusterPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.ClusterPrincipalAssignmentListResult{
			Value: []*armkusto.ClusterPrincipalAssignment{
				{
					Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
					Properties: &armkusto.ClusterPrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
						Role:              to.Ptr(armkusto.ClusterPrincipalRole("Admin")),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				},
				{
					Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoprincipal2"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
					Properties: &armkusto.ClusterPrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
						Role:              to.Ptr(armkusto.ClusterPrincipalRole("Admin")),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterPrincipalAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterPrincipalAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoClusterPrincipalAssignmentsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.CheckNameRequest{
			Name: to.Ptr("database1"),
			Type: to.Ptr(armkusto.TypeMicrosoftKustoClustersDatabases),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("database1"),
			Message:       to.Ptr("Name 'database1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListByCluster(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesListByCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesListByCluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByCluster("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesListByCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.DatabaseListResult{
			Value: []armkusto.DatabaseClassification{
				&armkusto.ReadWriteDatabase{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8"),
					Kind:     to.Ptr(armkusto.KindReadWrite),
					Location: to.Ptr("westus"),
					Properties: &armkusto.ReadWriteDatabaseProperties{
						HotCachePeriod:    to.Ptr("P1D"),
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
						SoftDeletePeriod:  to.Ptr("P1D"),
					},
				},
				&armkusto.ReadOnlyFollowingDatabase{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase9"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase9"),
					Kind:     to.Ptr(armkusto.KindReadOnlyFollowing),
					Location: to.Ptr("westus"),
					Properties: &armkusto.ReadOnlyFollowingDatabaseProperties{
						HotCachePeriod:    to.Ptr("P1D"),
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
						SoftDeletePeriod:  to.Ptr("P1D"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesListByCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasesClientGetResponse{
			&armkusto.ReadWriteDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8"),
				Kind:     to.Ptr(armkusto.KindReadWrite),
				Location: to.Ptr("westus"),
				Properties: &armkusto.ReadWriteDatabaseProperties{
					ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
					SoftDeletePeriod:  to.Ptr("P1D"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseReadonlyUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kusto ReadOnly database update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoreadOnlyDatabase",
		&armkusto.ReadOnlyFollowingDatabase{
			Kind:     to.Ptr(armkusto.KindReadOnlyFollowing),
			Location: to.Ptr("westus"),
			Properties: &armkusto.ReadOnlyFollowingDatabaseProperties{
				HotCachePeriod: to.Ptr("P1D"),
			},
		},
		&armkusto.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseReadonlyUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseReadonlyUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasesClientCreateOrUpdateResponse{
			&armkusto.ReadOnlyFollowingDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoreadOnlyDatabase"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoreadOnlyDatabase"),
				Kind:     to.Ptr(armkusto.KindReadOnlyFollowing),
				Location: to.Ptr("westus"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseReadonlyUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kusto ReadWrite database create or update"},
	})
	client = armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		&armkusto.Database{
			Location: to.Ptr("westus"),
		},
		&armkusto.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCreateOrUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasesClientCreateOrUpdateResponse{
			&armkusto.ReadWriteDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8"),
				Kind:     to.Ptr(armkusto.KindReadWrite),
				Location: to.Ptr("westus"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Update(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		&armkusto.Database{},
		&armkusto.DatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasesClientUpdateResponse{
			&armkusto.ReadWriteDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8"),
				Kind:     to.Ptr(armkusto.KindReadWrite),
				Location: to.Ptr("westus"),
				Properties: &armkusto.ReadWriteDatabaseProperties{
					HotCachePeriod:    to.Ptr("P1D"),
					ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		&armkusto.DatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasesDelete.json: %v", err)
	}
}

func TestDatabases_ListPrincipals(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseListPrincipals.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabaseListPrincipals"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListPrincipals("kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseListPrincipals.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.DatabasePrincipalListResult{
			Value: []*armkusto.DatabasePrincipal{
				{
					Name:  to.Ptr("Some User"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeUser),
					AppID: to.Ptr(""),
					Email: to.Ptr("user@microsoft.com"),
					Fqn:   to.Ptr("aaduser=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				},
				{
					Name:  to.Ptr("Kusto"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeGroup),
					AppID: to.Ptr(""),
					Email: to.Ptr("kusto@microsoft.com"),
					Fqn:   to.Ptr("aadgroup=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleViewer),
				},
				{
					Name:  to.Ptr("SomeApp"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeApp),
					AppID: to.Ptr("some_guid_app_id"),
					Email: to.Ptr(""),
					Fqn:   to.Ptr("aadapp=some_guid_app_id"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabasePrincipalListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabasePrincipalListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseListPrincipals.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_AddPrincipals(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseAddPrincipals.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabaseAddPrincipals"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.AddPrincipals(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		armkusto.DatabasePrincipalListRequest{
			Value: []*armkusto.DatabasePrincipal{
				{
					Name:  to.Ptr("Some User"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeUser),
					AppID: to.Ptr(""),
					Email: to.Ptr("user@microsoft.com"),
					Fqn:   to.Ptr("aaduser=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				},
				{
					Name:  to.Ptr("Kusto"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeGroup),
					AppID: to.Ptr(""),
					Email: to.Ptr("kusto@microsoft.com"),
					Fqn:   to.Ptr("aadgroup=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleViewer),
				},
				{
					Name:  to.Ptr("SomeApp"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeApp),
					AppID: to.Ptr("some_guid_app_id"),
					Email: to.Ptr(""),
					Fqn:   to.Ptr("aadapp=some_guid_app_id"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseAddPrincipals.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasePrincipalListResult{
			Value: []*armkusto.DatabasePrincipal{
				{
					Name:  to.Ptr("Some User"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeUser),
					AppID: to.Ptr(""),
					Email: to.Ptr("user@microsoft.com"),
					Fqn:   to.Ptr("aaduser=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				},
				{
					Name:  to.Ptr("Kusto"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeGroup),
					AppID: to.Ptr(""),
					Email: to.Ptr("kusto@microsoft.com"),
					Fqn:   to.Ptr("aadgroup=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleViewer),
				},
				{
					Name:  to.Ptr("SomeApp"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeApp),
					AppID: to.Ptr("some_guid_app_id"),
					Email: to.Ptr(""),
					Fqn:   to.Ptr("aadapp=some_guid_app_id"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabasePrincipalListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabasePrincipalListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseAddPrincipals.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_RemovePrincipals(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseRemovePrincipals.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabaseRemovePrincipals"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.RemovePrincipals(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		armkusto.DatabasePrincipalListRequest{
			Value: []*armkusto.DatabasePrincipal{
				{
					Name:  to.Ptr("Some User"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeUser),
					AppID: to.Ptr(""),
					Email: to.Ptr("user@microsoft.com"),
					Fqn:   to.Ptr("aaduser=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				},
				{
					Name:  to.Ptr("Kusto"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeGroup),
					AppID: to.Ptr(""),
					Email: to.Ptr("kusto@microsoft.com"),
					Fqn:   to.Ptr("aadgroup=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleViewer),
				},
				{
					Name:  to.Ptr("SomeApp"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeApp),
					AppID: to.Ptr("some_guid_app_id"),
					Email: to.Ptr(""),
					Fqn:   to.Ptr("aadapp=some_guid_app_id"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseRemovePrincipals.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasePrincipalListResult{
			Value: []*armkusto.DatabasePrincipal{
				{
					Name:  to.Ptr("Some User"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeUser),
					AppID: to.Ptr(""),
					Email: to.Ptr("user@microsoft.com"),
					Fqn:   to.Ptr("aaduser=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				},
				{
					Name:  to.Ptr("Kusto"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeGroup),
					AppID: to.Ptr(""),
					Email: to.Ptr("kusto@microsoft.com"),
					Fqn:   to.Ptr("aadgroup=some_guid"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleViewer),
				},
				{
					Name:  to.Ptr("SomeApp"),
					Type:  to.Ptr(armkusto.DatabasePrincipalTypeApp),
					AppID: to.Ptr("some_guid_app_id"),
					Email: to.Ptr(""),
					Fqn:   to.Ptr("aadapp=some_guid_app_id"),
					Role:  to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabasePrincipalListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabasePrincipalListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabaseRemovePrincipals.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttachedDatabaseConfigurations_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoAttachedDatabaseConfigurationCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.AttachedDatabaseConfigurationsCheckNameRequest{
			Name: to.Ptr("adc1"),
			Type: to.Ptr("Microsoft.Kusto/clusters/attachedDatabaseConfigurations"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("adc1"),
			Message:       to.Ptr("Name 'adc1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttachedDatabaseConfigurations_ListByCluster(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsListByCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoAttachedDatabaseConfigurationsListByCluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByCluster("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsListByCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.AttachedDatabaseConfigurationListResult{
			Value: []*armkusto.AttachedDatabaseConfiguration{
				{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/AttachedDatabaseConfigurations"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/AttachedDatabaseConfigurations/KustoDatabase8"),
					Location: to.Ptr("westus"),
					Properties: &armkusto.AttachedDatabaseConfigurationProperties{
						ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterLeader"),
						DatabaseName:                      to.Ptr("db1"),
						DefaultPrincipalsModificationKind: to.Ptr(armkusto.DefaultPrincipalsModificationKindUnion),
						ProvisioningState:                 to.Ptr(armkusto.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase9"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/AttachedDatabaseConfigurations"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/AttachedDatabaseConfigurations/KustoDatabase9"),
					Location: to.Ptr("westus"),
					Properties: &armkusto.AttachedDatabaseConfigurationProperties{
						ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterLeader"),
						DatabaseName:                      to.Ptr("db1"),
						DefaultPrincipalsModificationKind: to.Ptr(armkusto.DefaultPrincipalsModificationKindUnion),
						ProvisioningState:                 to.Ptr(armkusto.ProvisioningStateSucceeded),
						TableLevelSharingProperties: &armkusto.TableLevelSharingProperties{
							ExternalTablesToExclude: []*string{
								to.Ptr("ExternalTable2")},
							ExternalTablesToInclude: []*string{
								to.Ptr("ExternalTable1")},
							MaterializedViewsToExclude: []*string{
								to.Ptr("MaterializedViewTable2")},
							MaterializedViewsToInclude: []*string{
								to.Ptr("MaterializedViewTable1")},
							TablesToExclude: []*string{
								to.Ptr("Table2")},
							TablesToInclude: []*string{
								to.Ptr("Table1")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AttachedDatabaseConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AttachedDatabaseConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsListByCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttachedDatabaseConfigurations_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttachedDatabaseConfigurationsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"attachedDatabaseConfigurations1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.AttachedDatabaseConfiguration{
			Name:     to.Ptr("KustoClusterRPTest4/attachedDatabaseConfigurations1"),
			Type:     to.Ptr("Microsoft.Kusto/Clusters/AttachedDatabaseConfigurations"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/AttachedDatabaseConfigurations/attachedDatabaseConfigurations1"),
			Location: to.Ptr("westus"),
			Properties: &armkusto.AttachedDatabaseConfigurationProperties{
				ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4"),
				DatabaseName:                      to.Ptr("*"),
				DefaultPrincipalsModificationKind: to.Ptr(armkusto.DefaultPrincipalsModificationKindUnion),
				ProvisioningState:                 to.Ptr(armkusto.ProvisioningStateSucceeded),
				TableLevelSharingProperties: &armkusto.TableLevelSharingProperties{
					ExternalTablesToExclude: []*string{
						to.Ptr("ExternalTable2")},
					ExternalTablesToInclude: []*string{
						to.Ptr("ExternalTable1")},
					MaterializedViewsToExclude: []*string{
						to.Ptr("MaterializedViewTable2")},
					MaterializedViewsToInclude: []*string{
						to.Ptr("MaterializedViewTable1")},
					TablesToExclude: []*string{
						to.Ptr("Table2")},
					TablesToInclude: []*string{
						to.Ptr("Table1")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AttachedDatabaseConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AttachedDatabaseConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttachedDatabaseConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttachedDatabaseConfigurationsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"attachedDatabaseConfigurations1",
		armkusto.AttachedDatabaseConfiguration{
			Location: to.Ptr("westus"),
			Properties: &armkusto.AttachedDatabaseConfigurationProperties{
				ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterLeader"),
				DatabaseName:                      to.Ptr("kustodatabase"),
				DefaultPrincipalsModificationKind: to.Ptr(armkusto.DefaultPrincipalsModificationKindUnion),
				TableLevelSharingProperties: &armkusto.TableLevelSharingProperties{
					ExternalTablesToExclude: []*string{
						to.Ptr("ExternalTable2")},
					ExternalTablesToInclude: []*string{
						to.Ptr("ExternalTable1")},
					MaterializedViewsToExclude: []*string{
						to.Ptr("MaterializedViewTable2")},
					MaterializedViewsToInclude: []*string{
						to.Ptr("MaterializedViewTable1")},
					TablesToExclude: []*string{
						to.Ptr("Table2")},
					TablesToInclude: []*string{
						to.Ptr("Table1")},
				},
			},
		},
		&armkusto.AttachedDatabaseConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.AttachedDatabaseConfiguration{
			Name:     to.Ptr("KustoClusterRPTest4/attachedDatabaseConfigurations1"),
			Type:     to.Ptr("Microsoft.Kusto/Clusters/AttachedDatabaseConfigurations"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/attachedDatabaseConfigurations/attachedDatabaseConfigurations1"),
			Location: to.Ptr("westus"),
			Properties: &armkusto.AttachedDatabaseConfigurationProperties{
				ClusterResourceID:                 to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterLeader"),
				DatabaseName:                      to.Ptr("db1"),
				DefaultPrincipalsModificationKind: to.Ptr(armkusto.DefaultPrincipalsModificationKindUnion),
				ProvisioningState:                 to.Ptr(armkusto.ProvisioningStateSucceeded),
				TableLevelSharingProperties: &armkusto.TableLevelSharingProperties{
					ExternalTablesToExclude: []*string{
						to.Ptr("ExternalTable2")},
					ExternalTablesToInclude: []*string{
						to.Ptr("ExternalTable1")},
					MaterializedViewsToExclude: []*string{
						to.Ptr("MaterializedViewTable2")},
					MaterializedViewsToInclude: []*string{
						to.Ptr("MaterializedViewTable1")},
					TablesToExclude: []*string{
						to.Ptr("Table2")},
					TablesToInclude: []*string{
						to.Ptr("Table1")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AttachedDatabaseConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AttachedDatabaseConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttachedDatabaseConfigurations_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttachedDatabaseConfigurationsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"attachedDatabaseConfigurations1",
		&armkusto.AttachedDatabaseConfigurationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoAttachedDatabaseConfigurationsDelete.json: %v", err)
	}
}

func TestManagedPrivateEndpoints_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoManagedPrivateEndpointsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		armkusto.ManagedPrivateEndpointsCheckNameRequest{
			Name: to.Ptr("pme1"),
			Type: to.Ptr("Microsoft.Kusto/clusters/managedPrivateEndpoints"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("pme1"),
			Message:       to.Ptr("Name 'pme1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoManagedPrivateEndpointsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.ManagedPrivateEndpointListResult{
			Value: []*armkusto.ManagedPrivateEndpoint{
				{
					Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustomanagedPrivateEndpoint1"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/ManagedPrivateEndpoints"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/ManagedPrivateEndpoints/kustoManagedPrivateEndpoint1"),
					Properties: &armkusto.ManagedPrivateEndpointProperties{
						GroupID:               to.Ptr("blob"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/storageAccountTest"),
						RequestMessage:        to.Ptr("Please Approve."),
					},
				},
				{
					Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustomanagedPrivateEndpoint2"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/ManagedPrivateEndpoints"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/ManagedPrivateEndpoints/kustoManagedPrivateEndpoint2"),
					Properties: &armkusto.ManagedPrivateEndpointProperties{
						GroupID:               to.Ptr("namespace"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHubs/storageAccounts/eventHubTest"),
						RequestMessage:        to.Ptr("Please Approve."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedPrivateEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedPrivateEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoManagedPrivateEndpointsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoManagedPrivateEndpoint1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.ManagedPrivateEndpoint{
			Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustomanagedPrivateEndpoint1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/ManagedPrivateEndpoints"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/ManagedPrivateEndpoints/kustoManagedPrivateEndpoint1"),
			Properties: &armkusto.ManagedPrivateEndpointProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/storageAccountTest"),
				RequestMessage:        to.Ptr("Please Approve."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedPrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedPrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoManagedPrivateEndpointsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoManagedPrivateEndpoint1",
		armkusto.ManagedPrivateEndpoint{
			Properties: &armkusto.ManagedPrivateEndpointProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/storageAccountTest"),
				RequestMessage:        to.Ptr("Please Approve."),
			},
		},
		&armkusto.ManagedPrivateEndpointsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.ManagedPrivateEndpoint{
			Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustomanagedPrivateEndpoint1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/ManagedPrivateEndpoints"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/ManagedPrivateEndpoints/kustoManagedPrivateEndpoint1"),
			Properties: &armkusto.ManagedPrivateEndpointProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/storageAccountTest"),
				RequestMessage:        to.Ptr("Please Approve."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedPrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedPrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_Update(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoManagedPrivateEndpointsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoManagedPrivateEndpoint1",
		armkusto.ManagedPrivateEndpoint{
			Properties: &armkusto.ManagedPrivateEndpointProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/storageAccountTest"),
				RequestMessage:        to.Ptr("Please Approve Managed Private Endpoint Request."),
			},
		},
		&armkusto.ManagedPrivateEndpointsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.ManagedPrivateEndpoint{
			Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustomanagedPrivateEndpoint1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/ManagedPrivateEndpoints"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/ManagedPrivateEndpoints/kustoManagedPrivateEndpoint1"),
			Properties: &armkusto.ManagedPrivateEndpointProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/storageAccountTest"),
				RequestMessage:        to.Ptr("Please Approve Managed Private Endpoint Request."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedPrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedPrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedPrivateEndpoints_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedPrivateEndpointsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewManagedPrivateEndpointsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustoManagedPrivateEndpoint1",
		&armkusto.ManagedPrivateEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoManagedPrivateEndpointsDelete.json: %v", err)
	}
}

func TestDatabasePrincipalAssignments_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabaseCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		armkusto.DatabasePrincipalAssignmentCheckNameRequest{
			Name: to.Ptr("kustoprincipal1"),
			Type: to.Ptr("Microsoft.Kusto/clusters/databases/principalAssignments"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("kustoprincipal1"),
			Message:       to.Ptr("Name 'kustoprincipal1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabasePrincipalAssignments_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasePrincipalAssignmentsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoprincipal1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasePrincipalAssignment{
			Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
			Properties: &armkusto.DatabasePrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
				Role:              to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabasePrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabasePrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabasePrincipalAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasePrincipalAssignmentsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoprincipal1",
		armkusto.DatabasePrincipalAssignment{
			Properties: &armkusto.DatabasePrincipalProperties{
				PrincipalID:   to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalType: to.Ptr(armkusto.PrincipalTypeApp),
				Role:          to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				TenantID:      to.Ptr("12345678-1234-1234-1234-123456789123"),
			},
		},
		&armkusto.DatabasePrincipalAssignmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DatabasePrincipalAssignment{
			Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
			Properties: &armkusto.DatabasePrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
				Role:              to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabasePrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabasePrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabasePrincipalAssignments_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasePrincipalAssignmentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoprincipal1",
		&armkusto.DatabasePrincipalAssignmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsDelete.json: %v", err)
	}
}

func TestDatabasePrincipalAssignments_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPrincipalAssignmentsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.DatabasePrincipalAssignmentListResult{
			Value: []*armkusto.DatabasePrincipalAssignment{
				{
					Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
					Properties: &armkusto.DatabasePrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
						Role:              to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				},
				{
					Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoprincipal2"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
					Properties: &armkusto.DatabasePrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armkusto.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armkusto.ProvisioningStateSucceeded),
						Role:              to.Ptr(armkusto.DatabasePrincipalRoleAdmin),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabasePrincipalAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabasePrincipalAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDatabasePrincipalAssignmentsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScripts_ListByDatabase(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoScriptsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewScriptsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByDatabase("kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.ScriptListResult{
			Value: []*armkusto.Script{
				{
					Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoScript1"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/Scripts"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/Scripts/kustoScript1"),
					Properties: &armkusto.ScriptProperties{
						ContinueOnErrors: to.Ptr(true),
						ForceUpdateTag:   to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
						ScriptURL:        to.Ptr("https://mysa.blob.core.windows.net/container/script.txt"),
					},
					SystemData: &armkusto.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
						CreatedBy:          to.Ptr("user@microsoft.com"),
						CreatedByType:      to.Ptr(armkusto.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@microsoft.com"),
						LastModifiedByType: to.Ptr(armkusto.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoScript2"),
					Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/Scripts"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/Scripts/kustoScript2"),
					Properties: &armkusto.ScriptProperties{
						ContinueOnErrors: to.Ptr(true),
						ForceUpdateTag:   to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
						ScriptURL:        to.Ptr("https://mysa.blob.core.windows.net/container/script2.txt"),
					},
					SystemData: &armkusto.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
						CreatedBy:          to.Ptr("user@microsoft.com"),
						CreatedByType:      to.Ptr(armkusto.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-30T16:07:55.2831451Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@microsoft.com"),
						LastModifiedByType: to.Ptr(armkusto.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScriptListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScriptListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScripts_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoScriptsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewScriptsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoScript1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.Script{
			Name: to.Ptr("kustoclusterrptest4/Kustodatabase8/kustoScript1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/Scripts"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/kustoclusterrptest4/Databases/Kustodatabase8/Scripts/kustoScript1"),
			Properties: &armkusto.ScriptProperties{
				ContinueOnErrors: to.Ptr(true),
				ForceUpdateTag:   to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
				ScriptURL:        to.Ptr("https://mysa.blob.core.windows.net/container/script.txt"),
			},
			SystemData: &armkusto.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armkusto.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@microsoft.com"),
				LastModifiedByType: to.Ptr(armkusto.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Script) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Script)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScripts_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoScriptsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewScriptsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"kustoScript1",
		armkusto.Script{
			Properties: &armkusto.ScriptProperties{
				ContinueOnErrors:  to.Ptr(true),
				ForceUpdateTag:    to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
				ScriptURL:         to.Ptr("https://mysa.blob.core.windows.net/container/script.txt"),
				ScriptURLSasToken: to.Ptr("?sv=2019-02-02&st=2019-04-29T22%3A18%3A26Z&se=2019-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=********************************"),
			},
		},
		&armkusto.ScriptsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.Script{
			Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustoScript1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/Scripts"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8/Scripts/kustoScript1"),
			Properties: &armkusto.ScriptProperties{
				ContinueOnErrors: to.Ptr(true),
				ForceUpdateTag:   to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
				ScriptURL:        to.Ptr("https://mysa.blob.core.windows.net/container/script.txt"),
			},
			SystemData: &armkusto.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armkusto.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T17:16:24.3644126Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@microsoft.com"),
				LastModifiedByType: to.Ptr(armkusto.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Script) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Script)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScripts_Update(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoScriptsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewScriptsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"kustoScript1",
		armkusto.Script{
			Properties: &armkusto.ScriptProperties{
				ContinueOnErrors:  to.Ptr(true),
				ForceUpdateTag:    to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
				ScriptURL:         to.Ptr("https://mysa.blob.core.windows.net/container/script.txt"),
				ScriptURLSasToken: to.Ptr("?sv=2019-02-02&st=2019-04-29T22%3A18%3A26Z&se=2019-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=********************************"),
			},
		},
		&armkusto.ScriptsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.Script{
			Name: to.Ptr("KustoClusterRPTest4/KustoDatabase8/kustoScript1"),
			Type: to.Ptr("Microsoft.Kusto/Clusters/Databases/Scripts"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8/Scripts/kustoScript1"),
			Properties: &armkusto.ScriptProperties{
				ContinueOnErrors: to.Ptr(true),
				ForceUpdateTag:   to.Ptr("2bcf3c21-ffd1-4444-b9dd-e52e00ee53fe"),
				ScriptURL:        to.Ptr("https://mysa.blob.core.windows.net/container/script.txt"),
			},
			SystemData: &armkusto.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T15:06:54.2757906Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armkusto.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T17:16:24.3644126Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@microsoft.com"),
				LastModifiedByType: to.Ptr(armkusto.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Script) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Script)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScripts_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoScriptsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewScriptsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"kustoScript1",
		&armkusto.ScriptsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsDelete.json: %v", err)
	}
}

func TestScripts_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoScriptsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewScriptsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"db",
		armkusto.ScriptCheckNameRequest{
			Name: to.Ptr("kustoScriptName1"),
			Type: to.Ptr("Microsoft.Kusto/clusters/databases/scripts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("kustoScriptName1"),
			Message:       to.Ptr("Name 'kustoScriptName1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoScriptsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPrivateEndpointConnectionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewPrivateEndpointConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.PrivateEndpointConnectionListResult{
			Value: []*armkusto.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateEndpointConnectionName"),
					Type: to.Ptr("Microsoft.Kusto/clusters/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/privateEndpointConnections/privateEndpointConnectionName"),
					Properties: &armkusto.PrivateEndpointConnectionProperties{
						GroupID: to.Ptr("cluster"),
						PrivateEndpoint: &armkusto.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
						},
						PrivateLinkServiceConnectionState: &armkusto.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("privateEndpointConnectionName2"),
					Type: to.Ptr("Microsoft.Kusto/clusters/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/privateEndpointConnections/privateEndpointConnectionName2"),
					Properties: &armkusto.PrivateEndpointConnectionProperties{
						GroupID: to.Ptr("cluster"),
						PrivateEndpoint: &armkusto.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName2"),
						},
						PrivateLinkServiceConnectionState: &armkusto.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewPrivateEndpointConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"privateEndpointConnectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.Kusto/clusters/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armkusto.PrivateEndpointConnectionProperties{
				GroupID: to.Ptr("cluster"),
				PrivateEndpoint: &armkusto.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armkusto.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewPrivateEndpointConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"privateEndpointConnectionName",
		armkusto.PrivateEndpointConnection{
			Properties: &armkusto.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armkusto.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armkusto.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.Kusto/clusters/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armkusto.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armkusto.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewPrivateEndpointConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"privateEndpointConnectionName",
		&armkusto.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateEndpointConnectionsDelete.json: %v", err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connections."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewPrivateLinkResourcesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("kustorptest",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateLinkResourcesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.PrivateLinkResourceListResult{
			Value: []*armkusto.PrivateLinkResource{
				{
					Name: to.Ptr("cluster"),
					Type: to.Ptr("Microsoft.Kusto/clusters/PrivateLinkResources"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/privateLinkResources/cluster"),
					Properties: &armkusto.PrivateLinkResourceProperties{
						GroupID: to.Ptr("cluster"),
						RequiredMembers: []*string{
							to.Ptr("Engine"),
							to.Ptr("DataManagement"),
							to.Ptr("blob-ne3kstrldKustoClusterRPTest400"),
							to.Ptr("queue-ne3kstrldKustoClusterRPTest400"),
							to.Ptr("table-ne3kstrldKustoClusterRPTest400"),
							to.Ptr("blob-qmukstrldKustoClusterRPTest401"),
							to.Ptr("queue-qmukstrldKustoClusterRPTest401"),
							to.Ptr("table-qmukstrldKustoClusterRPTest401")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.westus2.kusto.windows.net"),
							to.Ptr("privatelink.blob.core.windows.net"),
							to.Ptr("privatelink.queue.core.windows.net"),
							to.Ptr("privatelink.table.core.windows.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewPrivateLinkResourcesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"cluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateLinkResourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.PrivateLinkResource{
			Name: to.Ptr("cluster"),
			Type: to.Ptr("Microsoft.Kusto/clusters/PrivateLinkResources"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/privateLinkResources/cluster"),
			Properties: &armkusto.PrivateLinkResourceProperties{
				GroupID: to.Ptr("cluster"),
				RequiredMembers: []*string{
					to.Ptr("Engine"),
					to.Ptr("DataManagement"),
					to.Ptr("blob-ne3kstrldKustoClusterRPTest400"),
					to.Ptr("queue-ne3kstrldKustoClusterRPTest400"),
					to.Ptr("table-ne3kstrldKustoClusterRPTest400"),
					to.Ptr("blob-qmukstrldKustoClusterRPTest401"),
					to.Ptr("queue-qmukstrldKustoClusterRPTest401"),
					to.Ptr("table-qmukstrldKustoClusterRPTest401")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.westus2.kusto.windows.net"),
					to.Ptr("privatelink.blob.core.windows.net"),
					to.Ptr("privatelink.queue.core.windows.net"),
					to.Ptr("privatelink.table.core.windows.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoPrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_ListByDatabase(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesListByCluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByDatabase("kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.DataConnectionListResult{
			Value: []armkusto.DataConnectionClassification{
				&armkusto.EventHubDataConnection{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/KustoDataConnection8"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/KustoDataConnection8"),
					Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
					Location: to.Ptr("westus"),
					Properties: &armkusto.EventHubConnectionProperties{
						Compression:               to.Ptr(armkusto.CompressionNone),
						ConsumerGroup:             to.Ptr("testConsumerGroup1"),
						EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
						ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
					},
				},
				&armkusto.EventHubDataConnection{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase9/KustoDataConnection9"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase9/DataConnections/KustoDataConnection9"),
					Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
					Location: to.Ptr("westus"),
					Properties: &armkusto.EventHubConnectionProperties{
						Compression:               to.Ptr(armkusto.CompressionNone),
						ConsumerGroup:             to.Ptr("testConsumerGroup2"),
						EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns2/eventhubs/eventhubTest2"),
						ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_DataConnectionValidation(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionValidationAsync.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDataConnectionValidation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDataConnectionValidation(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		armkusto.DataConnectionValidation{
			DataConnectionName: to.Ptr("DataConnections8"),
			Properties: &armkusto.EventHubDataConnection{
				Kind: to.Ptr(armkusto.DataConnectionKindEventHub),
			},
		},
		&armkusto.DataConnectionsClientBeginDataConnectionValidationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionValidationAsync.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionValidationAsync.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DataConnectionValidationListResult{}
		if !reflect.DeepEqual(exampleRes, res.DataConnectionValidationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectionValidationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionValidationAsync.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_CheckNameAvailability(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDataConnectionsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		armkusto.DataConnectionCheckNameRequest{
			Name: to.Ptr("DataConnections8"),
			Type: to.Ptr("Microsoft.Kusto/clusters/databases/dataConnections"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.CheckNameResult{
			Name:          to.Ptr("DataConnections8"),
			Message:       to.Ptr("Name 'DataConnections8' is already taken. Please specify a different name."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armkusto.ReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDataConnectionsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"DataConnections8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DataConnectionsClientGetResponse{
			&armkusto.EventHubDataConnection{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/DataConnections8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/DataConnections8"),
				Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
				Location: to.Ptr("westus"),
				Properties: &armkusto.EventHubConnectionProperties{
					Compression:               to.Ptr(armkusto.CompressionNone),
					ConsumerGroup:             to.Ptr("testConsumerGroup1"),
					EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDataConnectionsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"DataConnections8",
		&armkusto.EventHubDataConnection{
			Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
			Location: to.Ptr("westus"),
			Properties: &armkusto.EventHubConnectionProperties{
				ConsumerGroup:             to.Ptr("testConsumerGroup1"),
				EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
				ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
			},
		},
		&armkusto.DataConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DataConnectionsClientCreateOrUpdateResponse{
			&armkusto.EventHubDataConnection{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/DataConnections8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/DataConnections8"),
				Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
				Location: to.Ptr("westus"),
				Properties: &armkusto.EventHubConnectionProperties{
					Compression:               to.Ptr(armkusto.CompressionNone),
					ConsumerGroup:             to.Ptr("testConsumerGroup1"),
					EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_Update(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDataConnectionsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"DataConnections8",
		&armkusto.EventHubDataConnection{
			Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
			Location: to.Ptr("westus"),
			Properties: &armkusto.EventHubConnectionProperties{
				ConsumerGroup:             to.Ptr("testConsumerGroup1"),
				EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
				ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
			},
		},
		&armkusto.DataConnectionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.DataConnectionsClientUpdateResponse{
			&armkusto.EventHubDataConnection{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/DataConnections8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Kusto/Clusters/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/DataConnections8"),
				Kind:     to.Ptr(armkusto.DataConnectionKindEventHub),
				Location: to.Ptr("westus"),
				Properties: &armkusto.EventHubConnectionProperties{
					Compression:               to.Ptr(armkusto.CompressionNone),
					ConsumerGroup:             to.Ptr("testConsumerGroup1"),
					EventHubResourceID:        to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataConnections_Delete(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDataConnectionsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"kustoeventhubconnection1",
		&armkusto.DataConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoDataConnectionsDelete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkusto.OperationListResult{
			Value: []*armkusto.Operation{
				{
					Name: to.Ptr("operationName"),
					Display: &armkusto.OperationDisplay{
						Description: to.Ptr("operation description"),
						Operation:   to.Ptr("operationName"),
						Provider:    to.Ptr("providerName"),
						Resource:    to.Ptr("resourceName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationsResults_Get(t *testing.T) {
	// From example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOperationResultsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoOperationResultsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkusto.NewOperationsResultsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"westus",
		"30972f1b-b61d-4fd8-bd34-3dcfa24670f3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOperationResultsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkusto.OperationResult{
			Name:    to.Ptr("30972f1b-b61d-4fd8-bd34-3dcfa24670f3"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-26T13:45:42.7025301Z"); return t }()),
			Error: &armkusto.OperationResultErrorProperties{
				Code:    to.Ptr("CannotAlterFollowerDatabase"),
				Message: to.Ptr("[BadRequest] Cannot alter leader cluster 'test' for resource name 'adc'."),
			},
			ID:              to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/providers/Microsoft.Kusto/locations/westus/operationresults/30972f1b-b61d-4fd8-bd34-3dcfa24670f3"),
			PercentComplete: to.Ptr[float64](1),
			Properties: &armkusto.OperationResultProperties{
				OperationKind:  to.Ptr("FollowerDatabaseCreate"),
				OperationState: to.Ptr("BadInput"),
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-26T13:45:39.6554616Z"); return t }()),
			Status:    to.Ptr(armkusto.StatusFailed),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2021-08-27/examples/KustoOperationResultsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
