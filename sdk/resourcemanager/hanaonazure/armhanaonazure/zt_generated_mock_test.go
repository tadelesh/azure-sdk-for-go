//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhanaonazure_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hanaonazure/armhanaonazure"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/HanaOperations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all HANA management operations supported by HANA RP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/HanaOperations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhanaonazure.OperationList{
			Value: []*armhanaonazure.Operation{
				{
					Name: to.Ptr("HanaOp1"),
					Display: &armhanaonazure.Display{
						Description: to.Ptr("HanaOp1Description"),
						Operation:   to.Ptr("HanaOp1OperationName"),
						Origin:      to.Ptr("HanaOp1Origin"),
						Provider:    to.Ptr("HanaOp1ProviderName"),
						Resource:    to.Ptr("HanaOp1ResourceName"),
					},
				},
				{
					Name: to.Ptr("HanaOp2"),
					Display: &armhanaonazure.Display{
						Description: to.Ptr("HanaOp2Description"),
						Operation:   to.Ptr("HanaOp2OperationName"),
						Origin:      to.Ptr("HanaOp2Origin"),
						Provider:    to.Ptr("HanaOp2ProviderName"),
						Resource:    to.Ptr("HanaOp2ResourceName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/HanaOperations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSapMonitors_List(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all SAP Monitors in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewSapMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhanaonazure.SapMonitorListResult{
			Value: []*armhanaonazure.SapMonitor{
				{
					Name:     to.Ptr("mySapMonitor1"),
					Type:     to.Ptr("Microsoft.HanaOnAzure/sapMonitors"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armhanaonazure.SapMonitorProperties{
						EnableCustomerAnalytics:        to.Ptr(true),
						LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
						LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
						LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
						ManagedResourceGroupName:       to.Ptr("myManagedResourceGroup"),
						MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
						ProvisioningState:              to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
						SapMonitorCollectorVersion:     to.Ptr("v1.0"),
					},
				},
				{
					Name:     to.Ptr("mySapMonitor2"),
					Type:     to.Ptr("Microsoft.HanaOnAzure/sapMonitors"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armhanaonazure.SapMonitorProperties{
						EnableCustomerAnalytics:        to.Ptr(true),
						LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
						LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
						LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
						ManagedResourceGroupName:       to.Ptr("myManagedResourceGroup"),
						MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
						ProvisioningState:              to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
						SapMonitorCollectorVersion:     to.Ptr("v1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SapMonitorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SapMonitorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSapMonitors_Get(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get properties of a SAP monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewSapMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySapMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhanaonazure.SapMonitor{
			Name:     to.Ptr("mySapMonitor"),
			Type:     to.Ptr("Microsoft.HanaOnAzure/sapMonitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armhanaonazure.SapMonitorProperties{
				EnableCustomerAnalytics:        to.Ptr(true),
				LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
				LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
				LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
				ManagedResourceGroupName:       to.Ptr("myManagedResourceGroup"),
				MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				ProvisioningState:              to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
				SapMonitorCollectorVersion:     to.Ptr("v1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SapMonitor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SapMonitor)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSapMonitors_Create(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a SAP Monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewSapMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"mySapMonitor",
		armhanaonazure.SapMonitor{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armhanaonazure.SapMonitorProperties{
				EnableCustomerAnalytics:        to.Ptr(true),
				LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
				LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
				LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
				MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
			},
		},
		&armhanaonazure.SapMonitorsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhanaonazure.SapMonitor{
			Name:     to.Ptr("myHanaInstance"),
			Type:     to.Ptr("Microsoft.HanaOnAzure/hanaInstances"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/hanaInstances/myHanaInstance"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armhanaonazure.SapMonitorProperties{
				EnableCustomerAnalytics:        to.Ptr(true),
				LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
				LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
				LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
				ManagedResourceGroupName:       to.Ptr("myManagedResourceGroup"),
				MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				ProvisioningState:              to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
				SapMonitorCollectorVersion:     to.Ptr("v1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SapMonitor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SapMonitor)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSapMonitors_Delete(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a SAP monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewSapMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySapMonitor",
		&armhanaonazure.SapMonitorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_Delete.json: %v", err)
	}
}

func TestSapMonitors_Update(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_PatchTags_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Tags field of a SAP monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewSapMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"mySapMonitor",
		armhanaonazure.Tags{
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_PatchTags_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhanaonazure.SapMonitor{
			Name:     to.Ptr("mySapMonitor"),
			Type:     to.Ptr("Microsoft.HanaOnAzure/sapMonitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armhanaonazure.SapMonitorProperties{
				EnableCustomerAnalytics:        to.Ptr(true),
				LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
				LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
				LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
				ManagedResourceGroupName:       to.Ptr("myManagedResourceGroup"),
				MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				ProvisioningState:              to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
				SapMonitorCollectorVersion:     to.Ptr("v1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SapMonitor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SapMonitor)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_PatchTags_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_PatchTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Tags field of a SAP monitor"},
	})
	client = armhanaonazure.NewSapMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Update(ctx,
		"myResourceGroup",
		"mySapMonitor",
		armhanaonazure.Tags{
			Tags: map[string]*string{
				"testkey": to.Ptr("testvalue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_PatchTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhanaonazure.SapMonitor{
			Name:     to.Ptr("mySapMonitor"),
			Type:     to.Ptr("Microsoft.HanaOnAzure/sapMonitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("testvalue"),
			},
			Properties: &armhanaonazure.SapMonitorProperties{
				EnableCustomerAnalytics:        to.Ptr(true),
				LogAnalyticsWorkspaceArmID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace"),
				LogAnalyticsWorkspaceID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
				LogAnalyticsWorkspaceSharedKey: to.Ptr("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000=="),
				ManagedResourceGroupName:       to.Ptr("myManagedResourceGroup"),
				MonitorSubnet:                  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"),
				ProvisioningState:              to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
				SapMonitorCollectorVersion:     to.Ptr("v1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SapMonitor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SapMonitor)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/SapMonitors_PatchTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderInstances_List(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all SAP Monitors in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewProviderInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"mySapMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhanaonazure.ProviderInstanceListResult{
			Value: []*armhanaonazure.ProviderInstance{
				{
					Name: to.Ptr("myProviderInstance1"),
					Type: to.Ptr("Microsoft.HanaOnAzure/sapMonitors/providerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor/providerInstances/myProviderInstance1"),
					Properties: &armhanaonazure.ProviderInstanceProperties{
						Type:       to.Ptr("SapHana"),
						Metadata:   to.Ptr("{\"key\":\"value\"}"),
						Properties: to.Ptr("{\"hostname\":\"10.0.0.6\",\"dbName\":\"SYSTEMDB\",\"sqlPort\":30013,\"dbUsername\":\"SYSTEM\"}"),
					},
				},
				{
					Name: to.Ptr("myProviderInstance2"),
					Type: to.Ptr("Microsoft.HanaOnAzure/sapMonitors/providerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor/providerInstances/myProviderInstance2"),
					Properties: &armhanaonazure.ProviderInstanceProperties{
						Type:       to.Ptr("PrometheusHaCluster"),
						Metadata:   to.Ptr("{\"key\":\"value\"}"),
						Properties: to.Ptr("{\"prometheusUrl\":\"http://10.0.0.21:9664/metrics\"}"),
					},
				},
				{
					Name: to.Ptr("myProviderInstance2"),
					Type: to.Ptr("Microsoft.HanaOnAzure/sapMonitors/providerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor/providerInstances/myProviderInstance2"),
					Properties: &armhanaonazure.ProviderInstanceProperties{
						Type:       to.Ptr("MsSqlServer"),
						Metadata:   to.Ptr("{\"key\":\"value\"}"),
						Properties: to.Ptr("{\"sqlHostname\":\"10.0.0.6\",\"sqlPort\":1433,\"sqlUsername\":\"sqladmin\"}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProviderInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProviderInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderInstances_Get(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get properties of a SAP monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewProviderInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySapMonitor",
		"myProviderInstance",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhanaonazure.ProviderInstance{
			Name: to.Ptr("myProviderInstance"),
			Type: to.Ptr("Microsoft.HanaOnAzure/sapMonitors/providerInstances"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor/providerInstances/myProviderInstance"),
			Properties: &armhanaonazure.ProviderInstanceProperties{
				Type:       to.Ptr("SapHana"),
				Metadata:   to.Ptr("{\"key\":\"value\"}"),
				Properties: to.Ptr("{\"hostname\":\"10.0.0.6\",\"dbName\":\"SYSTEMDB\",\"sqlPort\":30013,\"dbUsername\":\"SYSTEM\"}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderInstances_Create(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a SAP Monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewProviderInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"mySapMonitor",
		"myProviderInstance",
		armhanaonazure.ProviderInstance{
			Properties: &armhanaonazure.ProviderInstanceProperties{
				Type:       to.Ptr("hana"),
				Metadata:   to.Ptr("{\"key\":\"value\"}"),
				Properties: to.Ptr("{\"hostname\":\"10.0.0.6\",\"dbName\":\"SYSTEMDB\",\"sqlPort\":30013,\"dbUsername\":\"SYSTEM\",\"dbPassword\":\"PASSWORD\"}"),
			},
		},
		&armhanaonazure.ProviderInstancesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhanaonazure.ProviderInstance{
			Name: to.Ptr("myProviderInstance"),
			Type: to.Ptr("Microsoft.HanaOnAzure/sapMonitors/providerInstances"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/sapMonitors/mySapMonitor/providerInstances/myProviderInstance"),
			Properties: &armhanaonazure.ProviderInstanceProperties{
				Type:              to.Ptr("SapHana"),
				Metadata:          to.Ptr("{\"key\":\"value\"}"),
				Properties:        to.Ptr("{\"hostname\":\"10.0.0.6\",\"dbName\":\"SYSTEMDB\",\"sqlPort\":30013,\"dbUsername\":\"SYSTEM\"}"),
				ProvisioningState: to.Ptr(armhanaonazure.HanaProvisioningStatesEnumSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderInstances_Delete(t *testing.T) {
	// From example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a SAP monitor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhanaonazure.NewProviderInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySapMonitor",
		"myProviderInstance",
		&armhanaonazure.ProviderInstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hanaonazure/resource-manager/Microsoft.HanaOnAzure/preview/2020-02-07-preview/examples/ProviderInstances_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
