//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/avs/armavs"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.OperationList{
			Value: []*armavs.Operation{
				{
					Name: to.Ptr("Microsoft.AVS/operations/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Lists operations available on Microsoft.AVS resource provider."),
						Operation:   to.Ptr("List available Microsoft.AVS operations"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("operations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/register/action"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Register Subscription for Microsoft.AVS resource provider."),
						Operation:   to.Ptr("Register Subscription for Microsoft.AVS"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr(""),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/unregister/action"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Unregister Subscription for Microsoft.AVS resource provider."),
						Operation:   to.Ptr("Unregister Subscription for Microsoft.AVS"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr(""),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/checkNameAvailability/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Checks if the privateCloud Name is available"),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("checkNameAvailability"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/locations/checkNameAvailability/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Checks if the privateCloud Name is available"),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("locations/checkNameAvailability"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/locations/checkQuotaAvailability/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Checks if quota is available for the subscription"),
						Operation:   to.Ptr("Check Quota Availability"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("locations/checkQuotaAvailability"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/locations/checkTrialAvailability/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Checks if trial is available for the subscription"),
						Operation:   to.Ptr("Check Trial Availability"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("locations/checkTrialAvailability"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/register/action"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Registers the Microsoft Microsoft.AVS resource provider and enables creation of Private Clouds."),
						Operation:   to.Ptr("Register Microsoft.AVS resource provider."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/write"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Creates or updates a PrivateCloud resource."),
						Operation:   to.Ptr("Create or update a PrivateCloud."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the settings for the specified PrivateCloud."),
						Operation:   to.Ptr("Read PrivateCloud settings"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/delete"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Delete a specific PrivateCloud."),
						Operation:   to.Ptr("Delete a PrivateCloud."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/operationstatuses/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Reads privateClouds operationstatuses."),
						Operation:   to.Ptr("Read privateClouds operationstatuses"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/operationstatuses"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/clusters/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the cluster settings for a PrivateCloud cluster."),
						Operation:   to.Ptr("Read Cluster settings."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/clusters"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/clusters/write"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Create or update a PrivateCloud cluster resource."),
						Operation:   to.Ptr("Create or update a PrivateCloud cluster."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/clusters"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/clusters/delete"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Delete a specific PrivateCloud cluster."),
						Operation:   to.Ptr("Delete a PriveCloud cluster."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/clusters"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/clusters/operationstatuses/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Reads privateClouds/clusters operationstatuses."),
						Operation:   to.Ptr("Read privateClouds/clusters operationstatuses"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/clusters/operationstatuses"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateclouds/clusters/operationresults/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Reads privateClouds/clusters operationresults."),
						Operation:   to.Ptr("Read privateClouds/clusters operationresults"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateclouds/clusters/operationresults"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/operationresults/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Reads privateClouds operationresults."),
						Operation:   to.Ptr("Read privateClouds operationresults"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/operationresults"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/authorizations/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the authorization settings for a PrivateCloud cluster."),
						Operation:   to.Ptr("Read Authorization settings."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/authorizations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/authorizations/write"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Create or update a PrivateCloud authorization resource."),
						Operation:   to.Ptr("Create or update a PrivateCloud authorization."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/authorizations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/authorizations/delete"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Delete a specific PrivateCloud authorization."),
						Operation:   to.Ptr("Delete a PriveCloud authorization."),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/authorizations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/listAdminCredentials/action"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Lists the AdminCredentials for privateClouds."),
						Operation:   to.Ptr("List privateClouds AdminCredentials"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(true),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/hcxEnterpriseSites/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the hcxEnterpriseSites for a PrivateCloud."),
						Operation:   to.Ptr("Read hcxEnterpriseSites"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/hcxEnterpriseSites"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/hcxEnterpriseSites/write"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Create or update a hcxEnterpriseSites."),
						Operation:   to.Ptr("Create or update a hcxEnterpriseSites"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/hcxEnterpriseSites"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/hcxEnterpriseSites/delete"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Delete a specific hcxEnterpriseSites."),
						Operation:   to.Ptr("Delete a hcxEnterpriseSites"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/hcxEnterpriseSites"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/hostInstances/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the hostInstances for a PrivateCloud."),
						Operation:   to.Ptr("Read hostInstances"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/hostInstances"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/hostInstances/write"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Create or update a hostInstances."),
						Operation:   to.Ptr("Create or update a hostInstances"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/hostInstances"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/hostInstances/delete"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Delete a specific hostInstances."),
						Operation:   to.Ptr("Delete a hostInstances"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds/hostInstances"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for Private Cloud"),
						Operation:   to.Ptr("Read Private Cloud metric definitions"),
						Provider:    to.Ptr("Microsoft Azure Dedicated"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
					Properties: &armavs.OperationProperties{
						ServiceSpecification: &armavs.ServiceSpecification{
							MetricSpecifications: []*armavs.MetricSpecification{
								{
									Name:                     to.Ptr("UsedLatest"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("The total amount of disk used in SDDC"),
									DisplayName:              to.Ptr("Datastore disk used"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Datastore.Disk"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("CapacityLatest"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("The total capacity of disk in SDDC"),
									DisplayName:              to.Ptr("Datastore disk total capacity"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Datastore.Disk"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("EffectiveMemAverage"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("Total amount of machine memory in cluster that is available"),
									DisplayName:              to.Ptr("Average Effective Memory"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Cluster.ClusterServices"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("TotalMbAverage"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("Total memory in cluster"),
									DisplayName:              to.Ptr("Average Total Memory"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Cluster.Mem"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("OverheadAverage"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("Host physical memory consumed by the virtualization infrastructure"),
									DisplayName:              to.Ptr("Average Memory Overhead"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Cluster.Mem"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Bytes"),
								},
								{
									Name:                     to.Ptr("UsageAverage"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("Memory usage as percentage of total configured or available memory"),
									DisplayName:              to.Ptr("Average Memory Usage"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Cluster.Mem"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Percent"),
								},
								{
									Name:                     to.Ptr("EffectiveCpuAverage"),
									AggregationType:          to.Ptr("Average"),
									DisplayDescription:       to.Ptr("Total available CPU resources in cluster"),
									DisplayName:              to.Ptr("Effective CPU available"),
									EnableRegionalMdmAccount: to.Ptr("true"),
									SourceMdmAccount:         to.Ptr("AVSShoebox2"),
									SourceMdmNamespace:       to.Ptr("Vsphere.Cluster.ClusterServices"),
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT5M"),
										to.Ptr("PT15M"),
										to.Ptr("PT30M"),
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr("Percent"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
					Properties:   &armavs.OperationProperties{},
				},
				{
					Name: to.Ptr("Microsoft.AVS/privateClouds/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armavs.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft.AVS"),
						Resource:    to.Ptr("privateClouds"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
					Properties:   &armavs.OperationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_CheckTrialAvailability(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Locations_CheckTrialAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckTrialAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewLocationsClient("{subscription-id}", cred, &options)
	res, err := client.CheckTrialAvailability(ctx,
		"eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Locations_CheckTrialAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Trial{
			AvailableHosts: to.Ptr[int32](4),
			Status:         to.Ptr(armavs.TrialStatusTrialAvailable),
		}
		if !reflect.DeepEqual(exampleRes, res.Trial) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Trial)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Locations_CheckTrialAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_CheckQuotaAvailability(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Locations_CheckQuotaAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckQuotaAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewLocationsClient("{subscription-id}", cred, &options)
	res, err := client.CheckQuotaAvailability(ctx,
		"eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Locations_CheckQuotaAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Quota{
			HostsRemaining: map[string]*int32{
				"AV20": to.Ptr[int32](0),
				"AV36": to.Ptr[int32](999),
			},
			QuotaEnabled: to.Ptr(armavs.QuotaEnabledEnabled),
		}
		if !reflect.DeepEqual(exampleRes, res.Quota) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Quota)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Locations_CheckQuotaAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.PrivateCloudList{
			Value: []*armavs.PrivateCloud{
				{
					Name:     to.Ptr("cloud1"),
					Type:     to.Ptr("Microsoft.AVS/privateClouds"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
					Location: to.Ptr("eastus2"),
					Tags:     map[string]*string{},
					Properties: &armavs.PrivateCloudProperties{
						Availability: &armavs.AvailabilityProperties{
							Strategy: to.Ptr(armavs.AvailabilityStrategySingleZone),
							Zone:     to.Ptr[int32](1),
						},
						IdentitySources: []*armavs.IdentitySource{
							{
								Name:            to.Ptr("group1"),
								Alias:           to.Ptr("groupAlias"),
								BaseGroupDN:     to.Ptr("ou=baseGroup"),
								BaseUserDN:      to.Ptr("ou=baseUser"),
								Domain:          to.Ptr("domain1"),
								PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
								SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
								SSL:             to.Ptr(armavs.SSLEnumEnabled),
							}},
						Internet: to.Ptr(armavs.InternetEnumDisabled),
						ManagementCluster: &armavs.ManagementCluster{
							ClusterID:   to.Ptr[int32](1),
							ClusterSize: to.Ptr[int32](4),
							Hosts: []*string{
								to.Ptr("fakehost18.nyc1.kubernetes.center"),
								to.Ptr("fakehost19.nyc1.kubernetes.center"),
								to.Ptr("fakehost20.nyc1.kubernetes.center"),
								to.Ptr("fakehost21.nyc1.kubernetes.center")},
						},
						Circuit: &armavs.Circuit{
							ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
							ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
							PrimarySubnet:                to.Ptr("192.168.53.0/30"),
							SecondarySubnet:              to.Ptr("192.168.53.4/30"),
						},
						Endpoints: &armavs.Endpoints{
							HcxCloudManager: to.Ptr("https://192.168.50.4/"),
							NsxtManager:     to.Ptr("https://192.168.50.3/"),
							Vcsa:            to.Ptr("https://192.168.50.2/"),
						},
						ExternalCloudLinks: []*string{
							to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
						NetworkBlock:      to.Ptr("192.168.48.0/22"),
						ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
					},
					SKU: &armavs.SKU{
						Name: to.Ptr("AV36"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateCloudList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateCloudList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_List_Stretched.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_List_Stretched"},
	})
	client = armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	pager = client.List("group1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_List_Stretched.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.PrivateCloudList{
			Value: []*armavs.PrivateCloud{
				{
					Name:     to.Ptr("cloud1"),
					Type:     to.Ptr("Microsoft.AVS/privateClouds"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
					Location: to.Ptr("eastus2"),
					Tags:     map[string]*string{},
					Properties: &armavs.PrivateCloudProperties{
						Availability: &armavs.AvailabilityProperties{
							SecondaryZone: to.Ptr[int32](2),
							Strategy:      to.Ptr(armavs.AvailabilityStrategyDualZone),
							Zone:          to.Ptr[int32](1),
						},
						IdentitySources: []*armavs.IdentitySource{
							{
								Name:            to.Ptr("group1"),
								Alias:           to.Ptr("groupAlias"),
								BaseGroupDN:     to.Ptr("ou=baseGroup"),
								BaseUserDN:      to.Ptr("ou=baseUser"),
								Domain:          to.Ptr("domain1"),
								PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
								SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
								SSL:             to.Ptr(armavs.SSLEnumEnabled),
							}},
						Internet: to.Ptr(armavs.InternetEnumDisabled),
						ManagementCluster: &armavs.ManagementCluster{
							ClusterID:   to.Ptr[int32](1),
							ClusterSize: to.Ptr[int32](4),
							Hosts: []*string{
								to.Ptr("fakehost18.nyc1.kubernetes.center"),
								to.Ptr("fakehost19.nyc1.kubernetes.center"),
								to.Ptr("fakehost20.nyc1.kubernetes.center"),
								to.Ptr("fakehost21.nyc1.kubernetes.center")},
						},
						Circuit: &armavs.Circuit{
							ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
							ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
							PrimarySubnet:                to.Ptr("192.168.53.0/30"),
							SecondarySubnet:              to.Ptr("192.168.53.4/30"),
						},
						Endpoints: &armavs.Endpoints{
							HcxCloudManager: to.Ptr("https://192.168.50.4/"),
							NsxtManager:     to.Ptr("https://192.168.50.3/"),
							Vcsa:            to.Ptr("https://192.168.50.2/"),
						},
						ExternalCloudLinks: []*string{
							to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
						NetworkBlock:      to.Ptr("192.168.48.0/22"),
						ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
						SecondaryCircuit: &armavs.Circuit{
							ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect2"),
							ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er2/peerings/AzurePrivatePeering"),
							PrimarySubnet:                to.Ptr("192.168.53.0/30"),
							SecondarySubnet:              to.Ptr("192.168.53.4/30"),
						},
					},
					SKU: &armavs.SKU{
						Name: to.Ptr("AV36"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateCloudList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateCloudList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_List_Stretched.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_ListInSubscription(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_ListInSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	pager := client.ListInSubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.PrivateCloudList{
			Value: []*armavs.PrivateCloud{
				{
					Name:     to.Ptr("cloud1"),
					Type:     to.Ptr("Microsoft.AVS/privateClouds"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
					Location: to.Ptr("eastus2"),
					Tags:     map[string]*string{},
					Properties: &armavs.PrivateCloudProperties{
						Availability: &armavs.AvailabilityProperties{
							Strategy: to.Ptr(armavs.AvailabilityStrategySingleZone),
							Zone:     to.Ptr[int32](1),
						},
						IdentitySources: []*armavs.IdentitySource{
							{
								Name:            to.Ptr("group1"),
								Alias:           to.Ptr("groupAlias"),
								BaseGroupDN:     to.Ptr("ou=baseGroup"),
								BaseUserDN:      to.Ptr("ou=baseUser"),
								Domain:          to.Ptr("domain1"),
								PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
								SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
								SSL:             to.Ptr(armavs.SSLEnumEnabled),
							}},
						Internet: to.Ptr(armavs.InternetEnumDisabled),
						ManagementCluster: &armavs.ManagementCluster{
							ClusterID:   to.Ptr[int32](1),
							ClusterSize: to.Ptr[int32](4),
							Hosts: []*string{
								to.Ptr("fakehost18.nyc1.kubernetes.center"),
								to.Ptr("fakehost19.nyc1.kubernetes.center"),
								to.Ptr("fakehost20.nyc1.kubernetes.center"),
								to.Ptr("fakehost21.nyc1.kubernetes.center")},
						},
						Circuit: &armavs.Circuit{
							ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
							ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
							PrimarySubnet:                to.Ptr("192.168.53.0/30"),
							SecondarySubnet:              to.Ptr("192.168.53.4/30"),
						},
						Endpoints: &armavs.Endpoints{
							HcxCloudManager: to.Ptr("https://192.168.50.4/"),
							NsxtManager:     to.Ptr("https://192.168.50.3/"),
							Vcsa:            to.Ptr("https://192.168.50.2/"),
						},
						NetworkBlock:      to.Ptr("192.168.48.0/22"),
						ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
					},
					SKU: &armavs.SKU{
						Name: to.Ptr("AV36"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateCloudList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateCloudList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListInSubscription_Stretched.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_ListInSubscription_Stretched"},
	})
	client = armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	pager = client.ListInSubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListInSubscription_Stretched.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.PrivateCloudList{
			Value: []*armavs.PrivateCloud{
				{
					Name:     to.Ptr("cloud1"),
					Type:     to.Ptr("Microsoft.AVS/privateClouds"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
					Location: to.Ptr("eastus2"),
					Tags:     map[string]*string{},
					Properties: &armavs.PrivateCloudProperties{
						Availability: &armavs.AvailabilityProperties{
							SecondaryZone: to.Ptr[int32](2),
							Strategy:      to.Ptr(armavs.AvailabilityStrategyDualZone),
							Zone:          to.Ptr[int32](1),
						},
						IdentitySources: []*armavs.IdentitySource{
							{
								Name:            to.Ptr("group1"),
								Alias:           to.Ptr("groupAlias"),
								BaseGroupDN:     to.Ptr("ou=baseGroup"),
								BaseUserDN:      to.Ptr("ou=baseUser"),
								Domain:          to.Ptr("domain1"),
								PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
								SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
								SSL:             to.Ptr(armavs.SSLEnumEnabled),
							}},
						Internet: to.Ptr(armavs.InternetEnumDisabled),
						ManagementCluster: &armavs.ManagementCluster{
							ClusterID:   to.Ptr[int32](1),
							ClusterSize: to.Ptr[int32](4),
							Hosts: []*string{
								to.Ptr("fakehost18.nyc1.kubernetes.center"),
								to.Ptr("fakehost19.nyc1.kubernetes.center"),
								to.Ptr("fakehost20.nyc1.kubernetes.center"),
								to.Ptr("fakehost21.nyc1.kubernetes.center")},
						},
						Circuit: &armavs.Circuit{
							ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
							ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
							PrimarySubnet:                to.Ptr("192.168.53.0/30"),
							SecondarySubnet:              to.Ptr("192.168.53.4/30"),
						},
						Endpoints: &armavs.Endpoints{
							HcxCloudManager: to.Ptr("https://192.168.50.4/"),
							NsxtManager:     to.Ptr("https://192.168.50.3/"),
							Vcsa:            to.Ptr("https://192.168.50.2/"),
						},
						NetworkBlock:      to.Ptr("192.168.48.0/22"),
						ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
						SecondaryCircuit: &armavs.Circuit{
							ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect2"),
							ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er2/peerings/AzurePrivatePeering"),
							PrimarySubnet:                to.Ptr("192.168.53.0/30"),
							SecondarySubnet:              to.Ptr("192.168.53.4/30"),
						},
					},
					SKU: &armavs.SKU{
						Name: to.Ptr("AV36"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateCloudList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateCloudList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListInSubscription_Stretched.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PrivateCloud{
			Name:     to.Ptr("cloud1"),
			Type:     to.Ptr("Microsoft.AVS/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Identity: &armavs.PrivateCloudIdentity{
				Type:        to.Ptr(armavs.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("881e5573-063f-49e4-8c08-79d7df0169d8"),
				TenantID:    to.Ptr("881e5573-063f-49e4-8c08-79d7df0169d8"),
			},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					Strategy: to.Ptr(armavs.AvailabilityStrategySingleZone),
					Zone:     to.Ptr[int32](1),
				},
				Encryption: &armavs.Encryption{
					KeyVaultProperties: &armavs.EncryptionKeyVaultProperties{
						KeyName:     to.Ptr("keyname1"),
						KeyState:    to.Ptr(armavs.EncryptionKeyStatusConnected),
						KeyVaultURL: to.Ptr("https://keyvault1-kmip-kvault.vault.azure.net/"),
						KeyVersion:  to.Ptr("ver1.0"),
						VersionType: to.Ptr(armavs.EncryptionVersionTypeFixed),
					},
					Status: to.Ptr(armavs.EncryptionStateEnabled),
				},
				IdentitySources: []*armavs.IdentitySource{
					{
						Name:            to.Ptr("group1"),
						Alias:           to.Ptr("groupAlias"),
						BaseGroupDN:     to.Ptr("ou=baseGroup"),
						BaseUserDN:      to.Ptr("ou=baseUser"),
						Domain:          to.Ptr("domain1"),
						PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
						SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
						SSL:             to.Ptr(armavs.SSLEnumEnabled),
					}},
				Internet: to.Ptr(armavs.InternetEnumDisabled),
				ManagementCluster: &armavs.ManagementCluster{
					ClusterID:   to.Ptr[int32](1),
					ClusterSize: to.Ptr[int32](4),
					Hosts: []*string{
						to.Ptr("fakehost18.nyc1.kubernetes.center"),
						to.Ptr("fakehost19.nyc1.kubernetes.center"),
						to.Ptr("fakehost20.nyc1.kubernetes.center"),
						to.Ptr("fakehost21.nyc1.kubernetes.center")},
				},
				Circuit: &armavs.Circuit{
					ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
					PrimarySubnet:                to.Ptr("192.168.53.0/30"),
					SecondarySubnet:              to.Ptr("192.168.53.4/30"),
				},
				Endpoints: &armavs.Endpoints{
					HcxCloudManager: to.Ptr("https://192.168.50.4/"),
					NsxtManager:     to.Ptr("https://192.168.50.3/"),
					Vcsa:            to.Ptr("https://192.168.50.2/"),
				},
				ExternalCloudLinks: []*string{
					to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
				NetworkBlock:      to.Ptr("192.168.48.0/22"),
				ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Get_Stretched.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_Get_Stretched"},
	})
	client = armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"group1",
		"cloud1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Get_Stretched.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PrivateCloud{
			Name:     to.Ptr("cloud1"),
			Type:     to.Ptr("Microsoft.AVS/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					SecondaryZone: to.Ptr[int32](2),
					Strategy:      to.Ptr(armavs.AvailabilityStrategyDualZone),
					Zone:          to.Ptr[int32](1),
				},
				IdentitySources: []*armavs.IdentitySource{
					{
						Name:            to.Ptr("group1"),
						Alias:           to.Ptr("groupAlias"),
						BaseGroupDN:     to.Ptr("ou=baseGroup"),
						BaseUserDN:      to.Ptr("ou=baseUser"),
						Domain:          to.Ptr("domain1"),
						PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
						SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
						SSL:             to.Ptr(armavs.SSLEnumEnabled),
					}},
				Internet: to.Ptr(armavs.InternetEnumDisabled),
				ManagementCluster: &armavs.ManagementCluster{
					ClusterID:   to.Ptr[int32](1),
					ClusterSize: to.Ptr[int32](4),
					Hosts: []*string{
						to.Ptr("fakehost18.nyc1.kubernetes.center"),
						to.Ptr("fakehost19.nyc1.kubernetes.center"),
						to.Ptr("fakehost20.nyc1.kubernetes.center"),
						to.Ptr("fakehost21.nyc1.kubernetes.center")},
				},
				Circuit: &armavs.Circuit{
					ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
					PrimarySubnet:                to.Ptr("192.168.53.0/30"),
					SecondarySubnet:              to.Ptr("192.168.53.4/30"),
				},
				Endpoints: &armavs.Endpoints{
					HcxCloudManager: to.Ptr("https://192.168.50.4/"),
					NsxtManager:     to.Ptr("https://192.168.50.3/"),
					Vcsa:            to.Ptr("https://192.168.50.2/"),
				},
				ExternalCloudLinks: []*string{
					to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
				NetworkBlock:      to.Ptr("192.168.48.0/22"),
				ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
				SecondaryCircuit: &armavs.Circuit{
					ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er2/peerings/AzurePrivatePeering"),
					PrimarySubnet:                to.Ptr("192.168.53.0/30"),
					SecondarySubnet:              to.Ptr("192.168.53.4/30"),
				},
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Get_Stretched.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		armavs.PrivateCloud{
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Identity: &armavs.PrivateCloudIdentity{
				Type: to.Ptr(armavs.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armavs.PrivateCloudProperties{
				ManagementCluster: &armavs.ManagementCluster{
					ClusterSize: to.Ptr[int32](4),
				},
				NetworkBlock: to.Ptr("192.168.48.0/22"),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		},
		&armavs.PrivateCloudsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PrivateCloud{
			Name:     to.Ptr("cloud1"),
			Type:     to.Ptr("Microsoft.AVS/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					Strategy: to.Ptr(armavs.AvailabilityStrategySingleZone),
					Zone:     to.Ptr[int32](1),
				},
				IdentitySources: []*armavs.IdentitySource{
					{
						Name:            to.Ptr("group1"),
						Alias:           to.Ptr("groupAlias"),
						BaseGroupDN:     to.Ptr("ou=baseGroup"),
						BaseUserDN:      to.Ptr("ou=baseUser"),
						Domain:          to.Ptr("domain1"),
						PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
						SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
						SSL:             to.Ptr(armavs.SSLEnumEnabled),
					}},
				Internet: to.Ptr(armavs.InternetEnumDisabled),
				ManagementCluster: &armavs.ManagementCluster{
					ClusterID:   to.Ptr[int32](1),
					ClusterSize: to.Ptr[int32](4),
					Hosts: []*string{
						to.Ptr("fakehost18.nyc1.kubernetes.center"),
						to.Ptr("fakehost19.nyc1.kubernetes.center"),
						to.Ptr("fakehost20.nyc1.kubernetes.center"),
						to.Ptr("fakehost21.nyc1.kubernetes.center")},
				},
				Circuit: &armavs.Circuit{
					ExpressRouteID:  to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					PrimarySubnet:   to.Ptr("192.168.53.0/30"),
					SecondarySubnet: to.Ptr("192.168.53.4/30"),
				},
				Endpoints: &armavs.Endpoints{
					NsxtManager: to.Ptr("https://192.168.50.3/"),
					Vcsa:        to.Ptr("https://192.168.50.2/"),
				},
				ExternalCloudLinks: []*string{
					to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
				NetworkBlock:      to.Ptr("192.168.48.0/22"),
				ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate_Stretched.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_CreateOrUpdate_Stretched"},
	})
	client = armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		armavs.PrivateCloud{
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					SecondaryZone: to.Ptr[int32](2),
					Strategy:      to.Ptr(armavs.AvailabilityStrategyDualZone),
					Zone:          to.Ptr[int32](1),
				},
				ManagementCluster: &armavs.ManagementCluster{
					ClusterSize: to.Ptr[int32](4),
				},
				NetworkBlock: to.Ptr("192.168.48.0/22"),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		},
		&armavs.PrivateCloudsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate_Stretched.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate_Stretched.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PrivateCloud{
			Name:     to.Ptr("cloud1"),
			Type:     to.Ptr("Microsoft.AVS/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					SecondaryZone: to.Ptr[int32](2),
					Strategy:      to.Ptr(armavs.AvailabilityStrategyDualZone),
					Zone:          to.Ptr[int32](1),
				},
				IdentitySources: []*armavs.IdentitySource{
					{
						Name:            to.Ptr("group1"),
						Alias:           to.Ptr("groupAlias"),
						BaseGroupDN:     to.Ptr("ou=baseGroup"),
						BaseUserDN:      to.Ptr("ou=baseUser"),
						Domain:          to.Ptr("domain1"),
						PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
						SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
						SSL:             to.Ptr(armavs.SSLEnumEnabled),
					}},
				Internet: to.Ptr(armavs.InternetEnumDisabled),
				ManagementCluster: &armavs.ManagementCluster{
					ClusterID:   to.Ptr[int32](1),
					ClusterSize: to.Ptr[int32](4),
					Hosts: []*string{
						to.Ptr("fakehost18.nyc1.kubernetes.center"),
						to.Ptr("fakehost19.nyc1.kubernetes.center"),
						to.Ptr("fakehost20.nyc1.kubernetes.center"),
						to.Ptr("fakehost21.nyc1.kubernetes.center")},
				},
				Circuit: &armavs.Circuit{
					ExpressRouteID:  to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					PrimarySubnet:   to.Ptr("192.168.53.0/30"),
					SecondarySubnet: to.Ptr("192.168.53.4/30"),
				},
				Endpoints: &armavs.Endpoints{
					NsxtManager: to.Ptr("https://192.168.50.3/"),
					Vcsa:        to.Ptr("https://192.168.50.2/"),
				},
				ExternalCloudLinks: []*string{
					to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
				NetworkBlock:      to.Ptr("192.168.48.0/22"),
				ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
				SecondaryCircuit: &armavs.Circuit{
					ExpressRouteID:  to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect2"),
					PrimarySubnet:   to.Ptr("192.168.53.0/30"),
					SecondarySubnet: to.Ptr("192.168.53.4/30"),
				},
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_CreateOrUpdate_Stretched.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_Update(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"cloud1",
		armavs.PrivateCloudUpdate{
			Identity: &armavs.PrivateCloudIdentity{
				Type: to.Ptr(armavs.ResourceIdentityTypeNone),
			},
			Properties: &armavs.PrivateCloudUpdateProperties{
				Encryption: &armavs.Encryption{
					KeyVaultProperties: &armavs.EncryptionKeyVaultProperties{
						KeyName:     to.Ptr("keyname1"),
						KeyVaultURL: to.Ptr("https://keyvault1-kmip-kvault.vault.azure.net/"),
						KeyVersion:  to.Ptr("ver1.0"),
					},
					Status: to.Ptr(armavs.EncryptionStateEnabled),
				},
				ManagementCluster: &armavs.ManagementCluster{
					ClusterSize: to.Ptr[int32](4),
				},
			},
		},
		&armavs.PrivateCloudsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PrivateCloud{
			Name:     to.Ptr("cloud1"),
			Type:     to.Ptr("Microsoft.AVS/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					Strategy: to.Ptr(armavs.AvailabilityStrategySingleZone),
					Zone:     to.Ptr[int32](1),
				},
				Encryption: &armavs.Encryption{
					KeyVaultProperties: &armavs.EncryptionKeyVaultProperties{
						KeyName:     to.Ptr("keyname1"),
						KeyVaultURL: to.Ptr("https://keyvault1-kmip-kvault.vault.azure.net/"),
						KeyVersion:  to.Ptr("ver1.0"),
						VersionType: to.Ptr(armavs.EncryptionVersionTypeFixed),
					},
					Status: to.Ptr(armavs.EncryptionStateEnabled),
				},
				IdentitySources: []*armavs.IdentitySource{
					{
						Name:            to.Ptr("group1"),
						Alias:           to.Ptr("groupAlias"),
						BaseGroupDN:     to.Ptr("ou=baseGroup"),
						BaseUserDN:      to.Ptr("ou=baseUser"),
						Domain:          to.Ptr("domain1"),
						PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
						SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
						SSL:             to.Ptr(armavs.SSLEnumEnabled),
					}},
				Internet: to.Ptr(armavs.InternetEnumDisabled),
				ManagementCluster: &armavs.ManagementCluster{
					ClusterID:   to.Ptr[int32](1),
					ClusterSize: to.Ptr[int32](4),
					Hosts: []*string{
						to.Ptr("fakehost18.nyc1.kubernetes.center"),
						to.Ptr("fakehost19.nyc1.kubernetes.center"),
						to.Ptr("fakehost20.nyc1.kubernetes.center"),
						to.Ptr("fakehost21.nyc1.kubernetes.center")},
				},
				Circuit: &armavs.Circuit{
					ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
					PrimarySubnet:                to.Ptr("192.168.53.0/30"),
					SecondarySubnet:              to.Ptr("192.168.53.4/30"),
				},
				Endpoints: &armavs.Endpoints{
					HcxCloudManager: to.Ptr("https://192.168.50.4/"),
					NsxtManager:     to.Ptr("https://192.168.50.3/"),
					Vcsa:            to.Ptr("https://192.168.50.2/"),
				},
				ExternalCloudLinks: []*string{
					to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
				NetworkBlock:      to.Ptr("192.168.48.0/22"),
				ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update_Stretched.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_Update_Stretched"},
	})
	client = armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"group1",
		"cloud1",
		armavs.PrivateCloudUpdate{
			Properties: &armavs.PrivateCloudUpdateProperties{
				ManagementCluster: &armavs.ManagementCluster{
					ClusterSize: to.Ptr[int32](4),
				},
			},
		},
		&armavs.PrivateCloudsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update_Stretched.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update_Stretched.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PrivateCloud{
			Name:     to.Ptr("cloud1"),
			Type:     to.Ptr("Microsoft.AVS/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1"),
			Location: to.Ptr("eastus2"),
			Tags:     map[string]*string{},
			Properties: &armavs.PrivateCloudProperties{
				Availability: &armavs.AvailabilityProperties{
					SecondaryZone: to.Ptr[int32](2),
					Strategy:      to.Ptr(armavs.AvailabilityStrategyDualZone),
					Zone:          to.Ptr[int32](1),
				},
				IdentitySources: []*armavs.IdentitySource{
					{
						Name:            to.Ptr("group1"),
						Alias:           to.Ptr("groupAlias"),
						BaseGroupDN:     to.Ptr("ou=baseGroup"),
						BaseUserDN:      to.Ptr("ou=baseUser"),
						Domain:          to.Ptr("domain1"),
						PrimaryServer:   to.Ptr("ldaps://1.1.1.1:636/"),
						SecondaryServer: to.Ptr("ldaps://1.1.1.2:636/"),
						SSL:             to.Ptr(armavs.SSLEnumEnabled),
					}},
				Internet: to.Ptr(armavs.InternetEnumDisabled),
				ManagementCluster: &armavs.ManagementCluster{
					ClusterID:   to.Ptr[int32](1),
					ClusterSize: to.Ptr[int32](4),
					Hosts: []*string{
						to.Ptr("fakehost18.nyc1.kubernetes.center"),
						to.Ptr("fakehost19.nyc1.kubernetes.center"),
						to.Ptr("fakehost20.nyc1.kubernetes.center"),
						to.Ptr("fakehost21.nyc1.kubernetes.center")},
				},
				Circuit: &armavs.Circuit{
					ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
					ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er/peerings/AzurePrivatePeering"),
					PrimarySubnet:                to.Ptr("192.168.53.0/30"),
					SecondarySubnet:              to.Ptr("192.168.53.4/30"),
				},
				Endpoints: &armavs.Endpoints{
					HcxCloudManager: to.Ptr("https://192.168.50.4/"),
					NsxtManager:     to.Ptr("https://192.168.50.3/"),
					Vcsa:            to.Ptr("https://192.168.50.2/"),
				},
				ExternalCloudLinks: []*string{
					to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2")},
				NetworkBlock:      to.Ptr("192.168.48.0/22"),
				ProvisioningState: to.Ptr(armavs.PrivateCloudProvisioningStateSucceeded),
				SecondaryCircuit: &armavs.Circuit{
					ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect2"),
					ExpressRoutePrivatePeeringID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt42-cust-p01-dmo01/providers/Microsoft.Network/expressroutecircuits/tnt42-cust-p01-dmo01-er2/peerings/AzurePrivatePeering"),
					PrimarySubnet:                to.Ptr("192.168.53.0/30"),
					SecondarySubnet:              to.Ptr("192.168.53.4/30"),
				},
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV36"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Update_Stretched.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		&armavs.PrivateCloudsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_Delete.json: %v", err)
	}
}

func TestPrivateClouds_RotateVcenterPassword(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_RotateVcenterPassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_RotateVcenterPassword"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRotateVcenterPassword(ctx,
		"group1",
		"cloud1",
		&armavs.PrivateCloudsClientBeginRotateVcenterPasswordOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_RotateVcenterPassword.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_RotateVcenterPassword.json: %v", err)
	}
}

func TestPrivateClouds_RotateNsxtPassword(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_RotateNsxtPassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_RotateNsxtPassword"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRotateNsxtPassword(ctx,
		"group1",
		"cloud1",
		&armavs.PrivateCloudsClientBeginRotateNsxtPasswordOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_RotateNsxtPassword.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_RotateNsxtPassword.json: %v", err)
	}
}

func TestPrivateClouds_ListAdminCredentials(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListAdminCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateClouds_ListAdminCredentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	res, err := client.ListAdminCredentials(ctx,
		"group1",
		"cloud1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListAdminCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.AdminCredentials{
			NsxtPassword:    to.Ptr("$(1X4Dkk"),
			NsxtUsername:    to.Ptr("admin"),
			VcenterPassword: to.Ptr("<vcenterPassword>"),
			VcenterUsername: to.Ptr("cloudadmin@vsphere.local"),
		}
		if !reflect.DeepEqual(exampleRes, res.AdminCredentials) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdminCredentials)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PrivateClouds_ListAdminCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Clusters_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewClustersClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.ClusterList{
			Value: []*armavs.Cluster{
				{
					Name: to.Ptr("cluster1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1"),
					Properties: &armavs.ClusterProperties{
						ClusterSize: to.Ptr[int32](3),
						Hosts: []*string{
							to.Ptr("fakehost22.nyc1.kubernetes.center"),
							to.Ptr("fakehost23.nyc1.kubernetes.center"),
							to.Ptr("fakehost24.nyc1.kubernetes.center")},
						ProvisioningState: to.Ptr(armavs.ClusterProvisioningStateSucceeded),
					},
					SKU: &armavs.SKU{
						Name: to.Ptr("AV20"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Clusters_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewClustersClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Cluster{
			Name: to.Ptr("cluster1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1"),
			Properties: &armavs.ClusterProperties{
				ClusterSize: to.Ptr[int32](4),
				Hosts: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center"),
					to.Ptr("fakehost25.nyc1.kubernetes.center")},
				ProvisioningState: to.Ptr(armavs.ClusterProvisioningStateSucceeded),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV20"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Clusters_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewClustersClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"cluster1",
		armavs.Cluster{
			Properties: &armavs.ClusterProperties{
				ClusterSize: to.Ptr[int32](3),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV20"),
			},
		},
		&armavs.ClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Cluster{
			Name: to.Ptr("cluster1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1"),
			Properties: &armavs.ClusterProperties{
				ClusterSize: to.Ptr[int32](3),
				Hosts: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center")},
				ProvisioningState: to.Ptr(armavs.ClusterProvisioningStateSucceeded),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV20"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Clusters_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewClustersClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"cloud1",
		"cluster1",
		armavs.ClusterUpdate{
			Properties: &armavs.ClusterUpdateProperties{
				ClusterSize: to.Ptr[int32](4),
			},
		},
		&armavs.ClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Cluster{
			Name: to.Ptr("cluster1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1"),
			Properties: &armavs.ClusterProperties{
				ClusterSize: to.Ptr[int32](4),
				Hosts: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center"),
					to.Ptr("fakehost25.nyc1.kubernetes.center")},
				ProvisioningState: to.Ptr(armavs.ClusterProvisioningStateSucceeded),
			},
			SKU: &armavs.SKU{
				Name: to.Ptr("AV20"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Clusters_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewClustersClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"cluster1",
		&armavs.ClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Clusters_Delete.json: %v", err)
	}
}

func TestDatastores_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datastores_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewDatastoresClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.DatastoreList{
			Value: []*armavs.Datastore{
				{
					Name: to.Ptr("datastore1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/datastores"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/datastores/datastore1"),
					Properties: &armavs.DatastoreProperties{
						NetAppVolume: &armavs.NetAppVolume{
							ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/ResourceGroup1/providers/Microsoft.NetApp/netAppAccounts/NetAppAccount1/capacityPools/CapacityPool1/volumes/NFSVol1"),
						},
						ProvisioningState: to.Ptr(armavs.DatastoreProvisioningStateSucceeded),
						Status:            to.Ptr(armavs.DatastoreStatusAccessible),
					},
				},
				{
					Name: to.Ptr("datastore2"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/datastores"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/datastores/datastore2"),
					Properties: &armavs.DatastoreProperties{
						DiskPoolVolume: &armavs.DiskPoolVolume{
							Path:        to.Ptr("/vmfs/devices/disks/naa.6001405f75f6bdf7f6f49db8b4b21723"),
							LunName:     to.Ptr("lun0"),
							MountOption: to.Ptr(armavs.MountOptionEnumMOUNT),
							TargetID:    to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/ResourceGroup1/providers/Microsoft.StoragePool/diskPools/DiskPool1/targets/Target1"),
						},
						ProvisioningState: to.Ptr(armavs.DatastoreProvisioningStateSucceeded),
						Status:            to.Ptr(armavs.DatastoreStatusAccessible),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatastoreList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatastoreList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatastores_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datastores_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewDatastoresClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"datastore1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Datastore{
			Name: to.Ptr("datastore1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/datastores"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/datastores/datastore1"),
			Properties: &armavs.DatastoreProperties{
				NetAppVolume: &armavs.NetAppVolume{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/ResourceGroup1/providers/Microsoft.NetApp/netAppAccounts/NetAppAccount1/capacityPools/CapacityPool1/volumes/NFSVol1"),
				},
				ProvisioningState: to.Ptr(armavs.DatastoreProvisioningStateSucceeded),
				Status:            to.Ptr(armavs.DatastoreStatusAccessible),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Datastore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Datastore)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatastores_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datastores_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewDatastoresClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"datastore1",
		armavs.Datastore{
			Properties: &armavs.DatastoreProperties{
				NetAppVolume: &armavs.NetAppVolume{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/ResourceGroup1/providers/Microsoft.NetApp/netAppAccounts/NetAppAccount1/capacityPools/CapacityPool1/volumes/NFSVol1"),
				},
			},
		},
		&armavs.DatastoresClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Datastore{
			Name: to.Ptr("datastore1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/datastores"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/datastores/datastore1"),
			Properties: &armavs.DatastoreProperties{
				NetAppVolume: &armavs.NetAppVolume{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/ResourceGroup1/providers/Microsoft.NetApp/netAppAccounts/NetAppAccount1/capacityPools/CapacityPool1/volumes/NFSVol1"),
				},
				ProvisioningState: to.Ptr(armavs.DatastoreProvisioningStateSucceeded),
				Status:            to.Ptr(armavs.DatastoreStatusAccessible),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Datastore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Datastore)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatastores_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Datastores_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewDatastoresClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"datastore1",
		&armavs.DatastoresClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Datastores_Delete.json: %v", err)
	}
}

func TestHcxEnterpriseSites_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HcxEnterpriseSites_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewHcxEnterpriseSitesClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.HcxEnterpriseSiteList{
			Value: []*armavs.HcxEnterpriseSite{
				{
					Name: to.Ptr("site1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/hcxEnterpriseSites"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/hcxEnterpriseSites/site1"),
					Properties: &armavs.HcxEnterpriseSiteProperties{
						ActivationKey: to.Ptr("0276EF1A9A1749A5A362BF73EA9F8D0D"),
						Status:        to.Ptr(armavs.HcxEnterpriseSiteStatusAvailable),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HcxEnterpriseSiteList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HcxEnterpriseSiteList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHcxEnterpriseSites_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HcxEnterpriseSites_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewHcxEnterpriseSitesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"site1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.HcxEnterpriseSite{
			Name: to.Ptr("site1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/hcxEnterpriseSites"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/hcxEnterpriseSites/site1"),
			Properties: &armavs.HcxEnterpriseSiteProperties{
				ActivationKey: to.Ptr("0276EF1A9A1749A5A362BF73EA9F8D0D"),
				Status:        to.Ptr(armavs.HcxEnterpriseSiteStatusAvailable),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HcxEnterpriseSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HcxEnterpriseSite)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHcxEnterpriseSites_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HcxEnterpriseSites_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewHcxEnterpriseSitesClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"site1",
		armavs.HcxEnterpriseSite{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.HcxEnterpriseSite{
			Name: to.Ptr("site1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/hcxEnterpriseSites"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/hcxEnterpriseSites/site1"),
			Properties: &armavs.HcxEnterpriseSiteProperties{
				ActivationKey: to.Ptr("0276EF1A9A1749A5A362BF73EA9F8D0D"),
				Status:        to.Ptr(armavs.HcxEnterpriseSiteStatusAvailable),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HcxEnterpriseSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HcxEnterpriseSite)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHcxEnterpriseSites_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HcxEnterpriseSites_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewHcxEnterpriseSitesClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"group1",
		"cloud1",
		"site1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/HcxEnterpriseSites_Delete.json: %v", err)
	}
}

func TestAuthorizations_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Authorizations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAuthorizationsClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.ExpressRouteAuthorizationList{
			Value: []*armavs.ExpressRouteAuthorization{
				{
					Name: to.Ptr("authorization1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/authorizations"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/authorizations/authorization1"),
					Properties: &armavs.ExpressRouteAuthorizationProperties{
						ExpressRouteAuthorizationID:  to.Ptr("/subscriptions/5206f269-120b-41ef-a95b-0dce7109de61/resourceGroups/tnt34-cust-mockp02-spearj2dev/providers/Microsoft.Network/expressroutecircuits/tnt34-cust-mockp02-spearj2dev-er/authorizations/myauth"),
						ExpressRouteAuthorizationKey: to.Ptr("37b0db3b-3b17-4c7b-bf76-bf13b01bcadc"),
						ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
						ProvisioningState:            to.Ptr(armavs.ExpressRouteAuthorizationProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressRouteAuthorizationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressRouteAuthorizationList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizations_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Authorizations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAuthorizationsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"authorization1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ExpressRouteAuthorization{
			Name: to.Ptr("authorization1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/authorizations"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/authorizations/authorization1"),
			Properties: &armavs.ExpressRouteAuthorizationProperties{
				ExpressRouteAuthorizationID:  to.Ptr("/subscriptions/5206f269-120b-41ef-a95b-0dce7109de61/resourceGroups/tnt34-cust-mockp02-spearj2dev/providers/Microsoft.Network/expressroutecircuits/tnt34-cust-mockp02-spearj2dev-er/authorizations/myauth"),
				ExpressRouteAuthorizationKey: to.Ptr("37b0db3b-3b17-4c7b-bf76-bf13b01bcadc"),
				ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
				ProvisioningState:            to.Ptr(armavs.ExpressRouteAuthorizationProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteAuthorization) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteAuthorization)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizations_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Authorizations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAuthorizationsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"authorization1",
		armavs.ExpressRouteAuthorization{},
		&armavs.AuthorizationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ExpressRouteAuthorization{
			Name: to.Ptr("authorization1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/authorizations"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/authorizations/authorization1"),
			Properties: &armavs.ExpressRouteAuthorizationProperties{
				ExpressRouteAuthorizationID:  to.Ptr("/subscriptions/5206f269-120b-41ef-a95b-0dce7109de61/resourceGroups/tnt34-cust-mockp02-spearj2dev/providers/Microsoft.Network/expressroutecircuits/tnt34-cust-mockp02-spearj2dev-er/authorizations/myauth"),
				ExpressRouteAuthorizationKey: to.Ptr("37b0db3b-3b17-4c7b-bf76-bf13b01bcadc"),
				ExpressRouteID:               to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
				ProvisioningState:            to.Ptr(armavs.ExpressRouteAuthorizationProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExpressRouteAuthorization) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExpressRouteAuthorization)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizations_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Authorizations_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAuthorizationsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"authorization1",
		&armavs.AuthorizationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Authorizations_Delete.json: %v", err)
	}
}

func TestGlobalReachConnections_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalReachConnections_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewGlobalReachConnectionsClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.GlobalReachConnectionList{
			Value: []*armavs.GlobalReachConnection{
				{
					Name: to.Ptr("connection1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/globalReachConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/globalReachConnections/connection1"),
					Properties: &armavs.GlobalReachConnectionProperties{
						AddressPrefix:           to.Ptr("10.2.3.16/29"),
						AuthorizationKey:        to.Ptr("01010101-0101-0101-0101-010101010101"),
						CircuitConnectionStatus: to.Ptr(armavs.GlobalReachConnectionStatusConnected),
						ExpressRouteID:          to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
						PeerExpressRouteCircuit: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.Network/expressRouteCircuits/mypeer"),
						ProvisioningState:       to.Ptr(armavs.GlobalReachConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GlobalReachConnectionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GlobalReachConnectionList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalReachConnections_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalReachConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewGlobalReachConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"connection1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.GlobalReachConnection{
			Name: to.Ptr("connection1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/globalReachConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/globalReachConnections/connection1"),
			Properties: &armavs.GlobalReachConnectionProperties{
				AddressPrefix:           to.Ptr("10.2.3.16/29"),
				AuthorizationKey:        to.Ptr("01010101-0101-0101-0101-010101010101"),
				CircuitConnectionStatus: to.Ptr(armavs.GlobalReachConnectionStatusConnected),
				ExpressRouteID:          to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
				PeerExpressRouteCircuit: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.Network/expressRouteCircuits/mypeer"),
				ProvisioningState:       to.Ptr(armavs.GlobalReachConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GlobalReachConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GlobalReachConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalReachConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalReachConnections_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewGlobalReachConnectionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"connection1",
		armavs.GlobalReachConnection{
			Properties: &armavs.GlobalReachConnectionProperties{
				AuthorizationKey:        to.Ptr("01010101-0101-0101-0101-010101010101"),
				PeerExpressRouteCircuit: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.Network/expressRouteCircuits/mypeer"),
			},
		},
		&armavs.GlobalReachConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.GlobalReachConnection{
			Name: to.Ptr("connection1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/globalReachConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/globalReachConnections/connection1"),
			Properties: &armavs.GlobalReachConnectionProperties{
				AddressPrefix:           to.Ptr("10.2.3.16/29"),
				AuthorizationKey:        to.Ptr("01010101-0101-0101-0101-010101010101"),
				CircuitConnectionStatus: to.Ptr(armavs.GlobalReachConnectionStatusConnected),
				ExpressRouteID:          to.Ptr("/subscriptions/{subscription-id}/resourceGroups/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2/providers/Microsoft.Network/expressroutecircuits/tnt13-41a90db2-9d5e-4bd5-a77a-5ce7b58213d6-eastus2-xconnect"),
				PeerExpressRouteCircuit: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.Network/expressRouteCircuits/mypeer"),
				ProvisioningState:       to.Ptr(armavs.GlobalReachConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GlobalReachConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GlobalReachConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalReachConnections_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalReachConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewGlobalReachConnectionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"connection1",
		&armavs.GlobalReachConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/GlobalReachConnections_Delete.json: %v", err)
	}
}

func TestWorkloadNetworks_ListSegments(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListSegments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListSegments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListSegments("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListSegments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkSegmentsList{
			Value: []*armavs.WorkloadNetworkSegment{
				{
					Name: to.Ptr("segment1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/segments"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/segments/segment1"),
					Properties: &armavs.WorkloadNetworkSegmentProperties{
						ConnectedGateway: to.Ptr("/infra/tier-1s/gateway"),
						DisplayName:      to.Ptr("segment1"),
						PortVif: []*armavs.WorkloadNetworkSegmentPortVif{
							{
								PortName: to.Ptr("vm1"),
							}},
						Revision: to.Ptr[int64](1),
						Status:   to.Ptr(armavs.SegmentStatusEnumSUCCESS),
						Subnet: &armavs.WorkloadNetworkSegmentSubnet{
							DhcpRanges: []*string{
								to.Ptr("40.20.0.0-40.20.0.1")},
							GatewayAddress: to.Ptr("40.20.20.20/16"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkSegmentsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkSegmentsList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListSegments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetSegment(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetSegments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetSegment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetSegment(ctx,
		"group1",
		"cloud1",
		"segment1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetSegments.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkSegment{
			Name: to.Ptr("segment1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/segments"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/segments/segment1"),
			Properties: &armavs.WorkloadNetworkSegmentProperties{
				ConnectedGateway: to.Ptr("/infra/tier-1s/gateway"),
				DisplayName:      to.Ptr("segment1"),
				PortVif: []*armavs.WorkloadNetworkSegmentPortVif{
					{
						PortName: to.Ptr("vm1"),
					}},
				Revision: to.Ptr[int64](1),
				Status:   to.Ptr(armavs.SegmentStatusEnumSUCCESS),
				Subnet: &armavs.WorkloadNetworkSegmentSubnet{
					DhcpRanges: []*string{
						to.Ptr("40.20.0.0-40.20.0.1")},
					GatewayAddress: to.Ptr("40.20.20.20/16"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkSegment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkSegment)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetSegments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_CreateSegments(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateSegments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_CreateSegments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateSegments(ctx,
		"group1",
		"cloud1",
		"segment1",
		armavs.WorkloadNetworkSegment{
			Properties: &armavs.WorkloadNetworkSegmentProperties{
				ConnectedGateway: to.Ptr("/infra/tier-1s/gateway"),
				DisplayName:      to.Ptr("segment1"),
				Revision:         to.Ptr[int64](1),
				Subnet: &armavs.WorkloadNetworkSegmentSubnet{
					DhcpRanges: []*string{
						to.Ptr("40.20.0.0-40.20.0.1")},
					GatewayAddress: to.Ptr("40.20.20.20/16"),
				},
			},
		},
		&armavs.WorkloadNetworksClientBeginCreateSegmentsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateSegments.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateSegments.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkSegment{
			Name: to.Ptr("segment1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/segments"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/segments/segment1"),
			Properties: &armavs.WorkloadNetworkSegmentProperties{
				ConnectedGateway: to.Ptr("/infra/tier-1s/gateway"),
				DisplayName:      to.Ptr("segment1"),
				PortVif:          []*armavs.WorkloadNetworkSegmentPortVif{},
				Revision:         to.Ptr[int64](1),
				Status:           to.Ptr(armavs.SegmentStatusEnumSUCCESS),
				Subnet: &armavs.WorkloadNetworkSegmentSubnet{
					DhcpRanges: []*string{
						to.Ptr("40.20.0.0-40.20.0.1")},
					GatewayAddress: to.Ptr("40.20.20.20/16"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkSegment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkSegment)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateSegments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_UpdateSegments(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateSegments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_UpdateSegments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdateSegments(ctx,
		"group1",
		"cloud1",
		"segment1",
		armavs.WorkloadNetworkSegment{
			Properties: &armavs.WorkloadNetworkSegmentProperties{
				ConnectedGateway: to.Ptr("/infra/tier-1s/gateway"),
				Revision:         to.Ptr[int64](1),
				Subnet: &armavs.WorkloadNetworkSegmentSubnet{
					DhcpRanges: []*string{
						to.Ptr("40.20.0.0-40.20.0.1")},
					GatewayAddress: to.Ptr("40.20.20.20/16"),
				},
			},
		},
		&armavs.WorkloadNetworksClientBeginUpdateSegmentsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateSegments.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateSegments.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkSegment{
			Name: to.Ptr("segment1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/segments"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/segments/segment1"),
			Properties: &armavs.WorkloadNetworkSegmentProperties{
				ConnectedGateway: to.Ptr("/infra/tier-1s/gateway"),
				DisplayName:      to.Ptr("segment1"),
				PortVif: []*armavs.WorkloadNetworkSegmentPortVif{
					{
						PortName: to.Ptr("vm1"),
					}},
				Revision: to.Ptr[int64](2),
				Status:   to.Ptr(armavs.SegmentStatusEnumSUCCESS),
				Subnet: &armavs.WorkloadNetworkSegmentSubnet{
					DhcpRanges: []*string{
						to.Ptr("40.20.0.0-40.20.0.1")},
					GatewayAddress: to.Ptr("40.20.20.20/16"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkSegment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkSegment)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateSegments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_DeleteSegment(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteSegments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_DeleteSegment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeleteSegment(ctx,
		"group1",
		"cloud1",
		"segment1",
		&armavs.WorkloadNetworksClientBeginDeleteSegmentOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteSegments.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteSegments.json: %v", err)
	}
}

func TestWorkloadNetworks_ListDhcp(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListDhcpConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListDhcp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListDhcp("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListDhcpConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkDhcpList{
			Value: []*armavs.WorkloadNetworkDhcp{
				{
					Name: to.Ptr("dhcp1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/dhcpConfigurations"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/dhcpConfigurations/dhcpConfigurations1"),
					Properties: &armavs.WorkloadNetworkDhcpServer{
						DhcpType:    to.Ptr(armavs.DhcpTypeEnumSERVER),
						DisplayName: to.Ptr("dhcpConfigurations1"),
						Revision:    to.Ptr[int64](1),
						Segments: []*string{
							to.Ptr("segment1"),
							to.Ptr("segment2")},
						LeaseTime:     to.Ptr[int64](86400),
						ServerAddress: to.Ptr("40.1.5.1/24"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkDhcpList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkDhcpList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListDhcpConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetDhcp(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetDhcpConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetDhcp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetDhcp(ctx,
		"group1",
		"dhcp1",
		"cloud1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetDhcpConfigurations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkDhcp{
			Name: to.Ptr("dhcp1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/dhcpConfigurations"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/dhcpConfigurations/dhcpConfigurations1"),
			Properties: &armavs.WorkloadNetworkDhcpServer{
				DhcpType:    to.Ptr(armavs.DhcpTypeEnumSERVER),
				DisplayName: to.Ptr("dhcpConfigurations1"),
				Revision:    to.Ptr[int64](1),
				Segments: []*string{
					to.Ptr("segment1"),
					to.Ptr("segment2")},
				LeaseTime:     to.Ptr[int64](86400),
				ServerAddress: to.Ptr("40.1.5.1/24"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkDhcp) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkDhcp)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetDhcpConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_CreateDhcp(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateDhcpConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_CreateDhcp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateDhcp(ctx,
		"group1",
		"cloud1",
		"dhcp1",
		armavs.WorkloadNetworkDhcp{
			Properties: &armavs.WorkloadNetworkDhcpServer{
				DhcpType:      to.Ptr(armavs.DhcpTypeEnumSERVER),
				DisplayName:   to.Ptr("dhcpConfigurations1"),
				Revision:      to.Ptr[int64](1),
				LeaseTime:     to.Ptr[int64](86400),
				ServerAddress: to.Ptr("40.1.5.1/24"),
			},
		},
		&armavs.WorkloadNetworksClientBeginCreateDhcpOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateDhcpConfigurations.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateDhcpConfigurations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkDhcp{
			Name: to.Ptr("dhcp1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/dhcpConfigurations"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/dhcpConfigurations/dhcpConfigurations1"),
			Properties: &armavs.WorkloadNetworkDhcpServer{
				DhcpType:    to.Ptr(armavs.DhcpTypeEnumSERVER),
				DisplayName: to.Ptr("dhcpConfigurations1"),
				Revision:    to.Ptr[int64](1),
				Segments: []*string{
					to.Ptr("segment1"),
					to.Ptr("segment2")},
				LeaseTime:     to.Ptr[int64](86400),
				ServerAddress: to.Ptr("40.1.5.1/24"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkDhcp) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkDhcp)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateDhcpConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_UpdateDhcp(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateDhcpConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_UpdateDhcp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdateDhcp(ctx,
		"group1",
		"cloud1",
		"dhcp1",
		armavs.WorkloadNetworkDhcp{
			Properties: &armavs.WorkloadNetworkDhcpServer{
				DhcpType:      to.Ptr(armavs.DhcpTypeEnumSERVER),
				Revision:      to.Ptr[int64](1),
				LeaseTime:     to.Ptr[int64](86400),
				ServerAddress: to.Ptr("40.1.5.1/24"),
			},
		},
		&armavs.WorkloadNetworksClientBeginUpdateDhcpOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateDhcpConfigurations.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateDhcpConfigurations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkDhcp{
			Name: to.Ptr("dhcp1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/dhcpConfigurations"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/dhcpConfigurations/dhcpConfigurations1"),
			Properties: &armavs.WorkloadNetworkDhcpServer{
				DhcpType:    to.Ptr(armavs.DhcpTypeEnumSERVER),
				DisplayName: to.Ptr("dhcpConfigurations1"),
				Revision:    to.Ptr[int64](2),
				Segments: []*string{
					to.Ptr("segment1"),
					to.Ptr("segment2")},
				LeaseTime:     to.Ptr[int64](86400),
				ServerAddress: to.Ptr("40.1.5.1/24"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkDhcp) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkDhcp)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateDhcpConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_DeleteDhcp(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteDhcpConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_DeleteDhcp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeleteDhcp(ctx,
		"group1",
		"cloud1",
		"dhcp1",
		&armavs.WorkloadNetworksClientBeginDeleteDhcpOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteDhcpConfigurations.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteDhcpConfigurations.json: %v", err)
	}
}

func TestWorkloadNetworks_ListGateways(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListGateways.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListGateways"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListGateways("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListGateways.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkGatewayList{
			Value: []*armavs.WorkloadNetworkGateway{
				{
					Name: to.Ptr("gateway1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/segments"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/gateways/gateway1"),
					Properties: &armavs.WorkloadNetworkGatewayProperties{
						Path:        to.Ptr("/infra/tier-1s/gateway1"),
						DisplayName: to.Ptr("gateway1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkGatewayList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkGatewayList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListGateways.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetGateway(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetGateway(ctx,
		"group1",
		"cloud1",
		"gateway1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkGateway{
			Name: to.Ptr("gateway1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/gateways"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/gateways/gateway1"),
			Properties: &armavs.WorkloadNetworkGatewayProperties{
				Path:        to.Ptr("/infra/tier-1s/gateway1"),
				DisplayName: to.Ptr("gateway1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkGateway) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkGateway)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_ListPortMirroring(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListPortMirroringProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListPortMirroring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListPortMirroring("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListPortMirroringProfiles.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkPortMirroringList{
			Value: []*armavs.WorkloadNetworkPortMirroring{
				{
					Name: to.Ptr("cloud1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/portMirroringProfiles"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/portMirroringProfiles/portMirroring1"),
					Properties: &armavs.WorkloadNetworkPortMirroringProperties{
						Destination: to.Ptr("vmGroup2"),
						Direction:   to.Ptr(armavs.PortMirroringDirectionEnumBIDIRECTIONAL),
						DisplayName: to.Ptr("portMirroring1"),
						Revision:    to.Ptr[int64](1),
						Source:      to.Ptr("vmGroup1"),
						Status:      to.Ptr(armavs.PortMirroringStatusEnumSUCCESS),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkPortMirroringList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkPortMirroringList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListPortMirroringProfiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetPortMirroring(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetPortMirroringProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetPortMirroring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetPortMirroring(ctx,
		"group1",
		"cloud1",
		"portMirroring1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetPortMirroringProfiles.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkPortMirroring{
			Name: to.Ptr("portMirroring1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/portMirroringProfiles"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/portMirroringProfiles/portMirroring1"),
			Properties: &armavs.WorkloadNetworkPortMirroringProperties{
				Destination: to.Ptr("vmGroup2"),
				Direction:   to.Ptr(armavs.PortMirroringDirectionEnumBIDIRECTIONAL),
				DisplayName: to.Ptr("portMirroring1"),
				Revision:    to.Ptr[int64](1),
				Source:      to.Ptr("vmGroup1"),
				Status:      to.Ptr(armavs.PortMirroringStatusEnumSUCCESS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkPortMirroring) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkPortMirroring)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetPortMirroringProfiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_CreatePortMirroring(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePortMirroringProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_CreatePortMirroring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreatePortMirroring(ctx,
		"group1",
		"cloud1",
		"portMirroring1",
		armavs.WorkloadNetworkPortMirroring{
			Properties: &armavs.WorkloadNetworkPortMirroringProperties{
				Destination: to.Ptr("vmGroup2"),
				Direction:   to.Ptr(armavs.PortMirroringDirectionEnumBIDIRECTIONAL),
				DisplayName: to.Ptr("portMirroring1"),
				Revision:    to.Ptr[int64](1),
				Source:      to.Ptr("vmGroup1"),
			},
		},
		&armavs.WorkloadNetworksClientBeginCreatePortMirroringOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePortMirroringProfiles.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePortMirroringProfiles.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkPortMirroring{
			Name: to.Ptr("portMirroring1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/portMirroringProfiles"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/portMirroringProfiles/portMirroring1"),
			Properties: &armavs.WorkloadNetworkPortMirroringProperties{
				Destination: to.Ptr("vmGroup2"),
				Direction:   to.Ptr(armavs.PortMirroringDirectionEnumBIDIRECTIONAL),
				DisplayName: to.Ptr("portMirroring1"),
				Revision:    to.Ptr[int64](1),
				Source:      to.Ptr("vmGroup1"),
				Status:      to.Ptr(armavs.PortMirroringStatusEnumSUCCESS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkPortMirroring) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkPortMirroring)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePortMirroringProfiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_UpdatePortMirroring(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdatePortMirroringProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_UpdatePortMirroring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdatePortMirroring(ctx,
		"group1",
		"cloud1",
		"portMirroring1",
		armavs.WorkloadNetworkPortMirroring{
			Properties: &armavs.WorkloadNetworkPortMirroringProperties{
				Destination: to.Ptr("vmGroup2"),
				Direction:   to.Ptr(armavs.PortMirroringDirectionEnumBIDIRECTIONAL),
				Revision:    to.Ptr[int64](1),
				Source:      to.Ptr("vmGroup1"),
			},
		},
		&armavs.WorkloadNetworksClientBeginUpdatePortMirroringOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdatePortMirroringProfiles.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdatePortMirroringProfiles.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkPortMirroring{
			Name: to.Ptr("portMirroring1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/portMirroringProfiles"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/portMirroringProfiles/portMirroring1"),
			Properties: &armavs.WorkloadNetworkPortMirroringProperties{
				Destination: to.Ptr("vmGroup2"),
				Direction:   to.Ptr(armavs.PortMirroringDirectionEnumBIDIRECTIONAL),
				DisplayName: to.Ptr("portMirroring1"),
				Revision:    to.Ptr[int64](2),
				Source:      to.Ptr("vmGroup1"),
				Status:      to.Ptr(armavs.PortMirroringStatusEnumSUCCESS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkPortMirroring) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkPortMirroring)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdatePortMirroringProfiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_DeletePortMirroring(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeletePortMirroringProfiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_DeletePortMirroring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeletePortMirroring(ctx,
		"group1",
		"portMirroring1",
		"cloud1",
		&armavs.WorkloadNetworksClientBeginDeletePortMirroringOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeletePortMirroringProfiles.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeletePortMirroringProfiles.json: %v", err)
	}
}

func TestWorkloadNetworks_ListVMGroups(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListVMGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListVMGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListVMGroups("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListVMGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkVMGroupsList{
			Value: []*armavs.WorkloadNetworkVMGroup{
				{
					Name: to.Ptr("cloud1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/vmGroups"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/vmGroups/vmGroup1"),
					Properties: &armavs.WorkloadNetworkVMGroupProperties{
						DisplayName: to.Ptr("vmGroup1"),
						Members: []*string{
							to.Ptr("564d43da-fefc-2a3b-1d92-42855622fa50")},
						Revision: to.Ptr[int64](1),
						Status:   to.Ptr(armavs.VMGroupStatusEnumSUCCESS),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkVMGroupsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkVMGroupsList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListVMGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetVMGroup(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetVMGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetVMGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetVMGroup(ctx,
		"group1",
		"cloud1",
		"vmGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetVMGroups.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkVMGroup{
			Name: to.Ptr("cloud1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/vmGroups"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/vmGroups/vmGroup1"),
			Properties: &armavs.WorkloadNetworkVMGroupProperties{
				DisplayName: to.Ptr("vmGroup1"),
				Members: []*string{
					to.Ptr("564d43da-fefc-2a3b-1d92-42855622fa50")},
				Revision: to.Ptr[int64](1),
				Status:   to.Ptr(armavs.VMGroupStatusEnumSUCCESS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkVMGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkVMGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetVMGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_CreateVMGroup(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateVMGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_CreateVMGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateVMGroup(ctx,
		"group1",
		"cloud1",
		"vmGroup1",
		armavs.WorkloadNetworkVMGroup{
			Properties: &armavs.WorkloadNetworkVMGroupProperties{
				DisplayName: to.Ptr("vmGroup1"),
				Members: []*string{
					to.Ptr("564d43da-fefc-2a3b-1d92-42855622fa50")},
				Revision: to.Ptr[int64](1),
			},
		},
		&armavs.WorkloadNetworksClientBeginCreateVMGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateVMGroups.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateVMGroups.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkVMGroup{
			Name: to.Ptr("vmGroup1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/vmGroups"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/vmGroups/vmGroup1"),
			Properties: &armavs.WorkloadNetworkVMGroupProperties{
				DisplayName: to.Ptr("vmGroup1"),
				Members: []*string{
					to.Ptr("564d43da-fefc-2a3b-1d92-42855622fa50")},
				Revision: to.Ptr[int64](1),
				Status:   to.Ptr(armavs.VMGroupStatusEnumSUCCESS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkVMGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkVMGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreateVMGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_UpdateVMGroup(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateVMGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_UpdateVMGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdateVMGroup(ctx,
		"group1",
		"cloud1",
		"vmGroup1",
		armavs.WorkloadNetworkVMGroup{
			Properties: &armavs.WorkloadNetworkVMGroupProperties{
				Members: []*string{
					to.Ptr("564d43da-fefc-2a3b-1d92-42855622fa50")},
				Revision: to.Ptr[int64](1),
			},
		},
		&armavs.WorkloadNetworksClientBeginUpdateVMGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateVMGroups.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateVMGroups.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkVMGroup{
			Name: to.Ptr("cloud1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/vmGroups"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/vmGroups/vmGroup1"),
			Properties: &armavs.WorkloadNetworkVMGroupProperties{
				DisplayName: to.Ptr("vmGroup1"),
				Members: []*string{
					to.Ptr("564d43da-fefc-2a3b-1d92-42855622fa50")},
				Revision: to.Ptr[int64](2),
				Status:   to.Ptr(armavs.VMGroupStatusEnumSUCCESS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkVMGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkVMGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_UpdateVMGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_DeleteVMGroup(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteVMGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_DeleteVMGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeleteVMGroup(ctx,
		"group1",
		"vmGroup1",
		"cloud1",
		&armavs.WorkloadNetworksClientBeginDeleteVMGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteVMGroups.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeleteVMGroups.json: %v", err)
	}
}

func TestWorkloadNetworks_ListVirtualMachines(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListVirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListVirtualMachines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListVirtualMachines("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListVirtualMachines.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkVirtualMachinesList{
			Value: []*armavs.WorkloadNetworkVirtualMachine{
				{
					Name: to.Ptr("vm1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/virtualMachines"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/virtualMachines/vm1"),
					Properties: &armavs.WorkloadNetworkVirtualMachineProperties{
						DisplayName: to.Ptr("vm1"),
						VMType:      to.Ptr(armavs.VMTypeEnumREGULAR),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkVirtualMachinesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkVirtualMachinesList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListVirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetVirtualMachine(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetVirtualMachine(ctx,
		"group1",
		"cloud1",
		"vm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkVirtualMachine{
			Name: to.Ptr("vm1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/virtualMachines"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/virtualMachines/vm1"),
			Properties: &armavs.WorkloadNetworkVirtualMachineProperties{
				DisplayName: to.Ptr("vm1"),
				VMType:      to.Ptr(armavs.VMTypeEnumREGULAR),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_ListPublicIPs(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListPublicIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_ListPublicIPs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	pager := client.ListPublicIPs("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListPublicIPs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.WorkloadNetworkPublicIPsList{
			Value: []*armavs.WorkloadNetworkPublicIP{
				{
					Name: to.Ptr("publicIP1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/publicIPs"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/publicIPs/publicIP1"),
					Properties: &armavs.WorkloadNetworkPublicIPProperties{
						DisplayName:   to.Ptr("publicIP1"),
						PublicIPBlock: to.Ptr("20.20.40.50/32"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadNetworkPublicIPsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadNetworkPublicIPsList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_ListPublicIPs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_GetPublicIP(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetPublicIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_GetPublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	res, err := client.GetPublicIP(ctx,
		"group1",
		"cloud1",
		"publicIP1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetPublicIPs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkPublicIP{
			Name: to.Ptr("publicIP1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/publicIPs"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/publicIPs/publicIP1"),
			Properties: &armavs.WorkloadNetworkPublicIPProperties{
				DisplayName:   to.Ptr("publicIP1"),
				PublicIPBlock: to.Ptr("20.20.40.50/32"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkPublicIP) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkPublicIP)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_GetPublicIPs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_CreatePublicIP(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePublicIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_CreatePublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreatePublicIP(ctx,
		"group1",
		"cloud1",
		"publicIP1",
		armavs.WorkloadNetworkPublicIP{
			Properties: &armavs.WorkloadNetworkPublicIPProperties{
				DisplayName:       to.Ptr("publicIP1"),
				NumberOfPublicIPs: to.Ptr[int64](32),
			},
		},
		&armavs.WorkloadNetworksClientBeginCreatePublicIPOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePublicIPs.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePublicIPs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.WorkloadNetworkPublicIP{
			Name: to.Ptr("publicIP1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/workloadNetworks/publicIPs"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/workloadNetworks/default/publicIPs/publicIP1"),
			Properties: &armavs.WorkloadNetworkPublicIPProperties{
				DisplayName:   to.Ptr("publicIP1"),
				PublicIPBlock: to.Ptr("20.20.40.50/32"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadNetworkPublicIP) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadNetworkPublicIP)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_CreatePublicIPs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadNetworks_DeletePublicIP(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeletePublicIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkloadNetworks_DeletePublicIP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewWorkloadNetworksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeletePublicIP(ctx,
		"group1",
		"publicIP1",
		"cloud1",
		&armavs.WorkloadNetworksClientBeginDeletePublicIPOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeletePublicIPs.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/WorkloadNetworks_DeletePublicIPs.json: %v", err)
	}
}

func TestCloudLinks_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudLinks_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewCloudLinksClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.CloudLinkList{
			Value: []*armavs.CloudLink{
				{
					Name: to.Ptr("cloudLink1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/cloudLinks"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/cloudLinks/cloudLink1"),
					Properties: &armavs.CloudLinkProperties{
						LinkedCloud: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2"),
						Status:      to.Ptr(armavs.CloudLinkStatusActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudLinkList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudLinkList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudLinks_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudLinks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewCloudLinksClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"cloudLink1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.CloudLink{
			Name: to.Ptr("cloudLink1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/cloudLinks"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/cloudLinks/cloudLink1"),
			Properties: &armavs.CloudLinkProperties{
				LinkedCloud: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2"),
				Status:      to.Ptr(armavs.CloudLinkStatusActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudLink)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudLinks_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudLinks_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewCloudLinksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"cloudLink1",
		armavs.CloudLink{
			Properties: &armavs.CloudLinkProperties{
				LinkedCloud: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2"),
			},
		},
		&armavs.CloudLinksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.CloudLink{
			Name: to.Ptr("cloudLink1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/cloudLinks"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/cloudLinks/cloudLink1"),
			Properties: &armavs.CloudLinkProperties{
				LinkedCloud: to.Ptr("/subscriptions/12341234-1234-1234-1234-123412341234/resourceGroups/mygroup/providers/Microsoft.AVS/privateClouds/cloud2"),
				Status:      to.Ptr(armavs.CloudLinkStatusActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudLink)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudLinks_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudLinks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewCloudLinksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"cloudLink1",
		&armavs.CloudLinksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/CloudLinks_Delete.json: %v", err)
	}
}

func TestAddons_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAddonsClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.AddonList{
			Value: []*armavs.Addon{
				{
					Name: to.Ptr("srm"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/srm"),
					Properties: &armavs.AddonSrmProperties{
						AddonType:         to.Ptr(armavs.AddonTypeSRM),
						ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
						LicenseKey:        to.Ptr("41915178-A8FF-4A4D-B683-6D735AF5E3F5"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AddonList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AddonList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddons_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_HCX.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_Get_HCX"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAddonsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"hcx",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_HCX.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Addon{
			Name: to.Ptr("hcx"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/hcx"),
			Properties: &armavs.AddonHcxProperties{
				AddonType:         to.Ptr(armavs.AddonTypeHCX),
				ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
				Offer:             to.Ptr("VMware MaaS Cloud Provider (Enterprise)"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Addon) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Addon)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_HCX.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_SRM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_Get_SRM"},
	})
	client = armavs.NewAddonsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"group1",
		"cloud1",
		"srm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_SRM.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Addon{
			Name: to.Ptr("srm"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/srm"),
			Properties: &armavs.AddonSrmProperties{
				AddonType:         to.Ptr(armavs.AddonTypeSRM),
				ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
				LicenseKey:        to.Ptr("41915178-A8FF-4A4D-B683-6D735AF5E3F5"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Addon) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Addon)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_SRM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_VR.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_Get_VR"},
	})
	client = armavs.NewAddonsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"group1",
		"cloud1",
		"vr",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_VR.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Addon{
			Name: to.Ptr("vr"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/vr"),
			Properties: &armavs.AddonVrProperties{
				AddonType:         to.Ptr(armavs.AddonTypeVR),
				ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
				VrsCount:          to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Addon) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Addon)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Get_VR.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddons_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_HCX.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_CreateOrUpdate_HCX"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAddonsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"hcx",
		armavs.Addon{
			Properties: &armavs.AddonHcxProperties{
				AddonType: to.Ptr(armavs.AddonTypeHCX),
				Offer:     to.Ptr("VMware MaaS Cloud Provider (Enterprise)"),
			},
		},
		&armavs.AddonsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_HCX.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_HCX.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Addon{
			Name: to.Ptr("hcx"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/hcx"),
			Properties: &armavs.AddonHcxProperties{
				AddonType:         to.Ptr(armavs.AddonTypeHCX),
				ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
				Offer:             to.Ptr("VMware MaaS Cloud Provider (Enterprise)"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Addon) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Addon)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_HCX.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_SRM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_CreateOrUpdate_SRM"},
	})
	client = armavs.NewAddonsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"srm",
		armavs.Addon{
			Properties: &armavs.AddonSrmProperties{
				AddonType:  to.Ptr(armavs.AddonTypeSRM),
				LicenseKey: to.Ptr("41915178-A8FF-4A4D-B683-6D735AF5E3F5"),
			},
		},
		&armavs.AddonsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_SRM.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_SRM.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Addon{
			Name: to.Ptr("srm"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/srm"),
			Properties: &armavs.AddonSrmProperties{
				AddonType:         to.Ptr(armavs.AddonTypeSRM),
				ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
				LicenseKey:        to.Ptr("41915178-A8FF-4A4D-B683-6D735AF5E3F5"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Addon) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Addon)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_SRM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_VR.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_CreateOrUpdate_VR"},
	})
	client = armavs.NewAddonsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"vr",
		armavs.Addon{
			Properties: &armavs.AddonVrProperties{
				AddonType: to.Ptr(armavs.AddonTypeVR),
				VrsCount:  to.Ptr[int32](1),
			},
		},
		&armavs.AddonsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_VR.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_VR.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.Addon{
			Name: to.Ptr("vr"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/addons"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/addons/vr"),
			Properties: &armavs.AddonVrProperties{
				AddonType:         to.Ptr(armavs.AddonTypeVR),
				ProvisioningState: to.Ptr(armavs.AddonProvisioningStateSucceeded),
				VrsCount:          to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Addon) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Addon)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_CreateOrUpdate_VR.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddons_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Addons_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewAddonsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"srm",
		&armavs.AddonsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/Addons_Delete.json: %v", err)
	}
}

func TestVirtualMachines_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListClusterVirtualMachines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.VirtualMachinesList{
			Value: []*armavs.VirtualMachine{
				{
					Name: to.Ptr("vm-209"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/virtualMachines"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-209"),
					Properties: &armavs.VirtualMachineProperties{
						DisplayName:      to.Ptr("contoso-vm1"),
						FolderPath:       to.Ptr("vm/folder-1"),
						MoRefID:          to.Ptr("vm-209"),
						RestrictMovement: to.Ptr(armavs.VirtualMachineRestrictMovementStateDisabled),
					},
				},
				{
					Name: to.Ptr("vm-128"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/virtualMachines"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
					Properties: &armavs.VirtualMachineProperties{
						DisplayName:      to.Ptr("contoso-vm2"),
						FolderPath:       to.Ptr("vm"),
						MoRefID:          to.Ptr("vm-128"),
						RestrictMovement: to.Ptr(armavs.VirtualMachineRestrictMovementStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachinesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachinesList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"vm-209",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.VirtualMachine{
			Name: to.Ptr("vm-209"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/virtualMachines"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-209"),
			Properties: &armavs.VirtualMachineProperties{
				DisplayName:      to.Ptr("contoso-vm"),
				FolderPath:       to.Ptr("vm/folder-1"),
				MoRefID:          to.Ptr("vm-209"),
				RestrictMovement: to.Ptr(armavs.VirtualMachineRestrictMovementStateDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_RestrictMovement(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_RestrictMovement.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_RestrictMovement"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRestrictMovement(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"vm-209",
		armavs.VirtualMachineRestrictMovement{
			RestrictMovement: to.Ptr(armavs.VirtualMachineRestrictMovementStateEnabled),
		},
		&armavs.VirtualMachinesClientBeginRestrictMovementOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_RestrictMovement.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/VirtualMachines_RestrictMovement.json: %v", err)
	}
}

func TestPlacementPolicies_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PlacementPolicies_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPlacementPoliciesClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"cloud1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.PlacementPoliciesList{
			Value: []*armavs.PlacementPolicy{
				{
					Name: to.Ptr("policy1"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/placementPolicies"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/placementPolicies/policy1"),
					Properties: &armavs.VMHostPlacementPolicyProperties{
						Type:              to.Ptr(armavs.PlacementPolicyTypeVMHost),
						DisplayName:       to.Ptr("policy1"),
						ProvisioningState: to.Ptr(armavs.PlacementPolicyProvisioningStateSucceeded),
						State:             to.Ptr(armavs.PlacementPolicyStateEnabled),
						AffinityType:      to.Ptr(armavs.AffinityTypeAntiAffinity),
						HostMembers: []*string{
							to.Ptr("fakehost22.nyc1.kubernetes.center"),
							to.Ptr("fakehost23.nyc1.kubernetes.center"),
							to.Ptr("fakehost24.nyc1.kubernetes.center")},
						VMMembers: []*string{
							to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
							to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
					},
				},
				{
					Name: to.Ptr("policy2"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/placementPolicies"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/placementPolicies/policy2"),
					Properties: &armavs.VMPlacementPolicyProperties{
						Type:              to.Ptr(armavs.PlacementPolicyTypeVMVM),
						DisplayName:       to.Ptr("policy2"),
						ProvisioningState: to.Ptr(armavs.PlacementPolicyProvisioningStateSucceeded),
						State:             to.Ptr(armavs.PlacementPolicyStateEnabled),
						AffinityType:      to.Ptr(armavs.AffinityTypeAffinity),
						VMMembers: []*string{
							to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
							to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PlacementPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PlacementPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPlacementPolicies_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PlacementPolicies_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPlacementPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"policy1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PlacementPolicy{
			Name: to.Ptr("policy1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/placementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/placementPolicies/policy1"),
			Properties: &armavs.VMHostPlacementPolicyProperties{
				Type:              to.Ptr(armavs.PlacementPolicyTypeVMHost),
				DisplayName:       to.Ptr("policy1"),
				ProvisioningState: to.Ptr(armavs.PlacementPolicyProvisioningStateSucceeded),
				State:             to.Ptr(armavs.PlacementPolicyStateEnabled),
				AffinityType:      to.Ptr(armavs.AffinityTypeAntiAffinity),
				HostMembers: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center")},
				VMMembers: []*string{
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PlacementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PlacementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPlacementPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PlacementPolicies_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPlacementPoliciesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"policy1",
		armavs.PlacementPolicy{
			Properties: &armavs.VMHostPlacementPolicyProperties{
				Type:         to.Ptr(armavs.PlacementPolicyTypeVMHost),
				AffinityType: to.Ptr(armavs.AffinityTypeAntiAffinity),
				HostMembers: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center")},
				VMMembers: []*string{
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
			},
		},
		&armavs.PlacementPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PlacementPolicy{
			Name: to.Ptr("policy1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/placementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/placementPolicies/policy1"),
			Properties: &armavs.VMHostPlacementPolicyProperties{
				Type:              to.Ptr(armavs.PlacementPolicyTypeVMHost),
				DisplayName:       to.Ptr("policy1"),
				ProvisioningState: to.Ptr(armavs.PlacementPolicyProvisioningStateSucceeded),
				State:             to.Ptr(armavs.PlacementPolicyStateEnabled),
				AffinityType:      to.Ptr(armavs.AffinityTypeAntiAffinity),
				HostMembers: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center")},
				VMMembers: []*string{
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PlacementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PlacementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPlacementPolicies_Update(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PlacementPolicies_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPlacementPoliciesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"policy1",
		armavs.PlacementPolicyUpdate{
			Properties: &armavs.PlacementPolicyUpdateProperties{
				HostMembers: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center")},
				State: to.Ptr(armavs.PlacementPolicyStateDisabled),
				VMMembers: []*string{
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
			},
		},
		&armavs.PlacementPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.PlacementPolicy{
			Name: to.Ptr("policy1"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/clusters/placementPolicies"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/placementPolicies/policy1"),
			Properties: &armavs.VMHostPlacementPolicyProperties{
				Type:              to.Ptr(armavs.PlacementPolicyTypeVMHost),
				DisplayName:       to.Ptr("policy1"),
				ProvisioningState: to.Ptr(armavs.PlacementPolicyProvisioningStateSucceeded),
				State:             to.Ptr(armavs.PlacementPolicyStateDisabled),
				AffinityType:      to.Ptr(armavs.AffinityTypeAntiAffinity),
				HostMembers: []*string{
					to.Ptr("fakehost22.nyc1.kubernetes.center"),
					to.Ptr("fakehost23.nyc1.kubernetes.center"),
					to.Ptr("fakehost24.nyc1.kubernetes.center")},
				VMMembers: []*string{
					to.Ptr("/subs`c`riptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-128"),
					to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/clusters/cluster1/virtualMachines/vm-256")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PlacementPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PlacementPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPlacementPolicies_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PlacementPolicies_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewPlacementPoliciesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"cluster1",
		"policy1",
		&armavs.PlacementPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/PlacementPolicies_Delete.json: %v", err)
	}
}

func TestScriptPackages_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptPackages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptPackages_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptPackagesClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"{privateCloudName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptPackages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.ScriptPackagesList{
			Value: []*armavs.ScriptPackage{
				{
					Name: to.Ptr("AVS.PowerCommands@1.0.0"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/scriptPackages"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/AVS.PowerCommands@1.0.0"),
					Properties: &armavs.ScriptPackageProperties{
						Description: to.Ptr("Various cmdlets for elevated access to Private Cloud administrative functions"),
						Version:     to.Ptr("1.0.0"),
					},
				},
				{
					Name: to.Ptr("JSDR.Configuration@1.0"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/scriptPackages"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/JSDR.Configuration@1.0"),
					Properties: &armavs.ScriptPackageProperties{
						Description: to.Ptr("Various cmdlets by Jetstream for Private Cloud administration"),
						Version:     to.Ptr("1.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScriptPackagesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScriptPackagesList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptPackages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptPackages_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptPackages_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptPackages_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptPackagesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"{privateCloudName}",
		"{scriptPackageName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptPackages_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ScriptPackage{
			Name: to.Ptr("AVS.PowerCommands@1.0.0"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/scriptPackages"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/{scriptPackageName}"),
			Properties: &armavs.ScriptPackageProperties{
				Description: to.Ptr("Various cmdlets for elevated access to Private Cloud administrative functions"),
				Version:     to.Ptr("1.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScriptPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScriptPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptPackages_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptCmdlets_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptCmdlets_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptCmdlets_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptCmdletsClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"{privateCloudName}",
		"{scriptPackageName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptCmdlets_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.ScriptCmdletsList{
			Value: []*armavs.ScriptCmdlet{
				{
					Name: to.Ptr("Set-AvsStoragePolicy"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/scriptPackages/scriptCmdlets"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/{scriptPackageName}/scriptCmdlets/Set-AvsStoragePolicy"),
					Properties: &armavs.ScriptCmdletProperties{
						Description: to.Ptr("Allow user to set the storage policy of the specified VM"),
						Parameters: []*armavs.ScriptParameter{
							{
								Name:        to.Ptr("VM"),
								Type:        to.Ptr(armavs.ScriptParameterTypesString),
								Description: to.Ptr("VM to set the storage policy on"),
								Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
								Visibility:  to.Ptr(armavs.VisibilityParameterEnumVisible),
							},
							{
								Name:        to.Ptr("StoragePolicyName"),
								Type:        to.Ptr(armavs.ScriptParameterTypesString),
								Description: to.Ptr("Name of the storage policy to set"),
								Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
								Visibility:  to.Ptr(armavs.VisibilityParameterEnumVisible),
							}},
						Timeout: to.Ptr("P0Y0M0DT0H60M0S"),
					},
				},
				{
					Name: to.Ptr("New-ExternalSsoDomain"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/scriptPackages/scriptCmdlets"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/{scriptPackageName}/scriptCmdlets/New-ExternalSsoDomain"),
					Properties: &armavs.ScriptCmdletProperties{
						Description: to.Ptr("Add an external Sso domain to their vCenter"),
						Parameters: []*armavs.ScriptParameter{
							{
								Name:        to.Ptr("DomainName"),
								Type:        to.Ptr(armavs.ScriptParameterTypesString),
								Description: to.Ptr("Domain name of the Server"),
								Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
								Visibility:  to.Ptr(armavs.VisibilityParameterEnumVisible),
							},
							{
								Name:        to.Ptr("BaseUserDN"),
								Type:        to.Ptr(armavs.ScriptParameterTypesString),
								Description: to.Ptr("Base User DN of the Server"),
								Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
								Visibility:  to.Ptr(armavs.VisibilityParameterEnumVisible),
							},
							{
								Name:        to.Ptr("Password"),
								Type:        to.Ptr(armavs.ScriptParameterTypesSecureString),
								Description: to.Ptr("Password for authenticating to the server"),
								Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
								Visibility:  to.Ptr(armavs.VisibilityParameterEnumHidden),
							}},
						Timeout: to.Ptr("P0Y0M0DT0H60M0S"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScriptCmdletsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScriptCmdletsList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptCmdlets_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptCmdlets_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptCmdlets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptCmdlets_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptCmdletsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"{privateCloudName}",
		"{scriptPackageName}",
		"New-ExternalSsoDomain",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptCmdlets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ScriptCmdlet{
			Name: to.Ptr("New-ExternalSsoDomain"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/scriptPackages/scriptCmdlets"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/{privateCloudName}/scriptPackages/{scriptPackageName}/scriptCmdlets/New-ExternalSsoDomain"),
			Properties: &armavs.ScriptCmdletProperties{
				Description: to.Ptr("Add an external Sso domain to their vCenter"),
				Parameters: []*armavs.ScriptParameter{
					{
						Name:        to.Ptr("DomainName"),
						Type:        to.Ptr(armavs.ScriptParameterTypesString),
						Description: to.Ptr("Domain name of the Server"),
						Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
						Visibility:  to.Ptr(armavs.VisibilityParameterEnumVisible),
					},
					{
						Name:        to.Ptr("BaseUserDN"),
						Type:        to.Ptr(armavs.ScriptParameterTypesString),
						Description: to.Ptr("Base User DN of the Server"),
						Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
						Visibility:  to.Ptr(armavs.VisibilityParameterEnumVisible),
					},
					{
						Name:        to.Ptr("Password"),
						Type:        to.Ptr(armavs.ScriptParameterTypesSecureString),
						Description: to.Ptr("Password for authenticating to the server"),
						Optional:    to.Ptr(armavs.OptionalParamEnumRequired),
						Visibility:  to.Ptr(armavs.VisibilityParameterEnumHidden),
					}},
				Timeout: to.Ptr("P0Y0M0DT0H60M0S"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScriptCmdlet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScriptCmdlet)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptCmdlets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptExecutions_List(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptExecutions_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptExecutionsClient("{subscription-id}", cred, &options)
	pager := client.List("group1",
		"{privateCloudName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armavs.ScriptExecutionsList{
			Value: []*armavs.ScriptExecution{
				{
					Name: to.Ptr("addSsoServer"),
					Type: to.Ptr("Microsoft.AVS/privateClouds/scriptExecutions"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptExecutions/addSsoServer"),
					Properties: &armavs.ScriptExecutionProperties{
						FailureReason: to.Ptr("vCenter failed to connect to the external server"),
						FinishedAt:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-21T18:32:28Z"); return t }()),
						Parameters: []armavs.ScriptExecutionParameterClassification{
							&armavs.ScriptStringExecutionParameter{
								Name:  to.Ptr("DomainName"),
								Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
								Value: to.Ptr("placeholderDomain.local"),
							},
							&armavs.ScriptStringExecutionParameter{
								Name:  to.Ptr("BaseUserDN"),
								Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
								Value: to.Ptr("DC=placeholder, DC=placeholder"),
							}},
						ProvisioningState: to.Ptr(armavs.ScriptExecutionProvisioningStateSucceeded),
						Retention:         to.Ptr("P0Y0M60DT0H60M60S"),
						ScriptCmdletID:    to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/AVS:1.0.0/scriptCmdlets/New-SsoExternalIdentitySource"),
						StartedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-21T17:32:28Z"); return t }()),
						SubmittedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-21T17:31:28Z"); return t }()),
						Timeout:           to.Ptr("P0Y0M0DT0H60M60S"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScriptExecutionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScriptExecutionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptExecutions_Get(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptExecutions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptExecutionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"cloud1",
		"addSsoServer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ScriptExecution{
			Name: to.Ptr("addSsoServer"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/scriptExecutions"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptExecutions/addSsoServer"),
			Properties: &armavs.ScriptExecutionProperties{
				FailureReason: to.Ptr("vCenter failed to connect to the external server"),
				FinishedAt:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-21T18:32:28Z"); return t }()),
				Parameters: []armavs.ScriptExecutionParameterClassification{
					&armavs.ScriptStringExecutionParameter{
						Name:  to.Ptr("DomainName"),
						Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
						Value: to.Ptr("placeholderDomain.local"),
					},
					&armavs.ScriptStringExecutionParameter{
						Name:  to.Ptr("BaseUserDN"),
						Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
						Value: to.Ptr("DC=placeholder, DC=placeholder"),
					}},
				ProvisioningState: to.Ptr(armavs.ScriptExecutionProvisioningStateSucceeded),
				Retention:         to.Ptr("P0Y0M60DT0H60M60S"),
				ScriptCmdletID:    to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/AVS.PowerCommands@1.0.0/scriptCmdlets/New-SsoExternalIdentitySource"),
				StartedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-21T17:32:28Z"); return t }()),
				SubmittedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-21T17:31:28Z"); return t }()),
				Timeout:           to.Ptr("P0Y0M0DT0H60M60S"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScriptExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScriptExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptExecutions_CreateOrUpdate(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptExecutions_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptExecutionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"cloud1",
		"addSsoServer",
		armavs.ScriptExecution{
			Properties: &armavs.ScriptExecutionProperties{
				HiddenParameters: []armavs.ScriptExecutionParameterClassification{
					&armavs.ScriptSecureStringExecutionParameter{
						Name:        to.Ptr("Password"),
						Type:        to.Ptr(armavs.ScriptExecutionParameterTypeSecureValue),
						SecureValue: to.Ptr("PlaceholderPassword"),
					}},
				Parameters: []armavs.ScriptExecutionParameterClassification{
					&armavs.ScriptStringExecutionParameter{
						Name:  to.Ptr("DomainName"),
						Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
						Value: to.Ptr("placeholderDomain.local"),
					},
					&armavs.ScriptStringExecutionParameter{
						Name:  to.Ptr("BaseUserDN"),
						Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
						Value: to.Ptr("DC=placeholder, DC=placeholder"),
					}},
				Retention:      to.Ptr("P0Y0M60DT0H60M60S"),
				ScriptCmdletID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/AVS.PowerCommands@1.0.0/scriptCmdlets/New-SsoExternalIdentitySource"),
				Timeout:        to.Ptr("P0Y0M0DT0H60M60S"),
			},
		},
		&armavs.ScriptExecutionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ScriptExecution{
			Name: to.Ptr("addSsoServer"),
			Type: to.Ptr("Microsoft.AVS/privateClouds/scriptExecutions"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptExecutions/addSsoServer"),
			Properties: &armavs.ScriptExecutionProperties{
				FailureReason: to.Ptr("vCenter failed to connect to the external server"),
				Output: []*string{
					to.Ptr("IdentitySource: placeholder.dc"),
					to.Ptr("BaseDN='dc=placeholder, dc=local")},
				Parameters: []armavs.ScriptExecutionParameterClassification{
					&armavs.ScriptStringExecutionParameter{
						Name:  to.Ptr("DomainName"),
						Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
						Value: to.Ptr("placeholderDomain.local"),
					},
					&armavs.ScriptStringExecutionParameter{
						Name:  to.Ptr("BaseUserDN"),
						Type:  to.Ptr(armavs.ScriptExecutionParameterTypeValue),
						Value: to.Ptr("DC=placeholder, DC=placeholder"),
					}},
				ProvisioningState: to.Ptr(armavs.ScriptExecutionProvisioningStateSucceeded),
				Retention:         to.Ptr("P0Y0M60DT0H60M60S"),
				ScriptCmdletID:    to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptPackages/AVS.PowerCommands@1.0.0/scriptCmdlets/New-SsoExternalIdentitySource"),
				Timeout:           to.Ptr("P0Y0M0DT0H60M60S"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScriptExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScriptExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptExecutions_Delete(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptExecutions_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptExecutionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"cloud1",
		"{scriptExecutionName}",
		&armavs.ScriptExecutionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_Delete.json: %v", err)
	}
}

func TestScriptExecutions_GetExecutionLogs(t *testing.T) {
	// From example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_GetExecutionLogs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScriptExecutions_GetExecutionLogs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armavs.NewScriptExecutionsClient("{subscription-id}", cred, &options)
	res, err := client.GetExecutionLogs(ctx,
		"group1",
		"cloud1",
		"addSsoServer",
		&armavs.ScriptExecutionsClientGetExecutionLogsOptions{ScriptOutputStreamType: []*armavs.ScriptOutputStreamType{
			to.Ptr(armavs.ScriptOutputStreamTypeInformation),
			to.Ptr(armavs.ScriptOutputStreamType("Warnings")),
			to.Ptr(armavs.ScriptOutputStreamType("Errors")),
			to.Ptr(armavs.ScriptOutputStreamTypeOutput)},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_GetExecutionLogs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armavs.ScriptExecution{
			Name: to.Ptr("addSsoServer"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/cloud1/scriptExecutions/addSsoServer"),
			Properties: &armavs.ScriptExecutionProperties{
				Errors: []*string{
					to.Ptr("Most recent error output"),
					to.Ptr("Second most error recent output")},
				Information: []*string{
					to.Ptr("Most recent information output"),
					to.Ptr("Second most recent information output")},
				Output: []*string{
					to.Ptr("Most recent output"),
					to.Ptr("Second most recent output")},
				Timeout: to.Ptr("P0Y0M0D0H060M0S"),
				Warnings: []*string{
					to.Ptr("Most recent warning output"),
					to.Ptr("Second most recent warning output")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScriptExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScriptExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/vmware/resource-manager/Microsoft.AVS/stable/2021-12-01/examples/ScriptExecutions_GetExecutionLogs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
