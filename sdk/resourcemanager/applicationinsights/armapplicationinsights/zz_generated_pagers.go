//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapplicationinsights

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// APIKeysClientListPager provides operations for iterating over paged responses.
type APIKeysClientListPager struct {
	client    *APIKeysClient
	current   APIKeysClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *APIKeysClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *APIKeysClientListPager) NextPage(ctx context.Context) (APIKeysClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return APIKeysClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return APIKeysClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return APIKeysClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return APIKeysClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return APIKeysClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AnnotationsClientListPager provides operations for iterating over paged responses.
type AnnotationsClientListPager struct {
	client    *AnnotationsClient
	current   AnnotationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AnnotationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AnnotationsClientListPager) NextPage(ctx context.Context) (AnnotationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AnnotationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AnnotationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AnnotationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AnnotationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AnnotationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ComponentsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ComponentsClientListByResourceGroupPager struct {
	client    *ComponentsClient
	current   ComponentsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ComponentsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ComponentsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ComponentListResult.NextLink == nil || len(*p.current.ComponentListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ComponentsClientListByResourceGroupPager) NextPage(ctx context.Context) (ComponentsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ComponentsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ComponentsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ComponentsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ComponentsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ComponentsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ComponentsClientListPager provides operations for iterating over paged responses.
type ComponentsClientListPager struct {
	client    *ComponentsClient
	current   ComponentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ComponentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ComponentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ComponentListResult.NextLink == nil || len(*p.current.ComponentListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ComponentsClientListPager) NextPage(ctx context.Context) (ComponentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ComponentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ComponentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ComponentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ComponentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ComponentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MyWorkbooksClientListByResourceGroupPager provides operations for iterating over paged responses.
type MyWorkbooksClientListByResourceGroupPager struct {
	client    *MyWorkbooksClient
	current   MyWorkbooksClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MyWorkbooksClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MyWorkbooksClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MyWorkbooksListResult.NextLink == nil || len(*p.current.MyWorkbooksListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MyWorkbooksClientListByResourceGroupPager) NextPage(ctx context.Context) (MyWorkbooksClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MyWorkbooksClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MyWorkbooksClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MyWorkbooksClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MyWorkbooksClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return MyWorkbooksClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MyWorkbooksClientListBySubscriptionPager provides operations for iterating over paged responses.
type MyWorkbooksClientListBySubscriptionPager struct {
	client    *MyWorkbooksClient
	current   MyWorkbooksClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MyWorkbooksClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MyWorkbooksClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MyWorkbooksListResult.NextLink == nil || len(*p.current.MyWorkbooksListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MyWorkbooksClientListBySubscriptionPager) NextPage(ctx context.Context) (MyWorkbooksClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MyWorkbooksClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MyWorkbooksClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MyWorkbooksClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MyWorkbooksClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return MyWorkbooksClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WebTestLocationsClientListPager provides operations for iterating over paged responses.
type WebTestLocationsClientListPager struct {
	client    *WebTestLocationsClient
	current   WebTestLocationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WebTestLocationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WebTestLocationsClientListPager) NextPage(ctx context.Context) (WebTestLocationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WebTestLocationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WebTestLocationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WebTestLocationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WebTestLocationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WebTestLocationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WebTestsClientListByComponentPager provides operations for iterating over paged responses.
type WebTestsClientListByComponentPager struct {
	client    *WebTestsClient
	current   WebTestsClientListByComponentResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebTestsClientListByComponentResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WebTestsClientListByComponentPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebTestListResult.NextLink == nil || len(*p.current.WebTestListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WebTestsClientListByComponentPager) NextPage(ctx context.Context) (WebTestsClientListByComponentResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WebTestsClientListByComponentResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WebTestsClientListByComponentResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WebTestsClientListByComponentResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WebTestsClientListByComponentResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByComponentHandleResponse(resp)
	if err != nil {
		return WebTestsClientListByComponentResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WebTestsClientListByResourceGroupPager provides operations for iterating over paged responses.
type WebTestsClientListByResourceGroupPager struct {
	client    *WebTestsClient
	current   WebTestsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebTestsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WebTestsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebTestListResult.NextLink == nil || len(*p.current.WebTestListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WebTestsClientListByResourceGroupPager) NextPage(ctx context.Context) (WebTestsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WebTestsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WebTestsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WebTestsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WebTestsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WebTestsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WebTestsClientListPager provides operations for iterating over paged responses.
type WebTestsClientListPager struct {
	client    *WebTestsClient
	current   WebTestsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebTestsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WebTestsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebTestListResult.NextLink == nil || len(*p.current.WebTestListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WebTestsClientListPager) NextPage(ctx context.Context) (WebTestsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WebTestsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WebTestsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WebTestsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WebTestsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WebTestsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkItemConfigurationsClientListPager provides operations for iterating over paged responses.
type WorkItemConfigurationsClientListPager struct {
	client    *WorkItemConfigurationsClient
	current   WorkItemConfigurationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkItemConfigurationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WorkItemConfigurationsClientListPager) NextPage(ctx context.Context) (WorkItemConfigurationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WorkItemConfigurationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkItemConfigurationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkItemConfigurationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkItemConfigurationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WorkItemConfigurationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkbookTemplatesClientListByResourceGroupPager provides operations for iterating over paged responses.
type WorkbookTemplatesClientListByResourceGroupPager struct {
	client    *WorkbookTemplatesClient
	current   WorkbookTemplatesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkbookTemplatesClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WorkbookTemplatesClientListByResourceGroupPager) NextPage(ctx context.Context) (WorkbookTemplatesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WorkbookTemplatesClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkbookTemplatesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkbookTemplatesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkbookTemplatesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WorkbookTemplatesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkbooksClientListByResourceGroupPager provides operations for iterating over paged responses.
type WorkbooksClientListByResourceGroupPager struct {
	client    *WorkbooksClient
	current   WorkbooksClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkbooksClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkbooksClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkbooksListResult.NextLink == nil || len(*p.current.WorkbooksListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkbooksClientListByResourceGroupPager) NextPage(ctx context.Context) (WorkbooksClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkbooksClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkbooksClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkbooksClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkbooksClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WorkbooksClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkbooksClientListBySubscriptionPager provides operations for iterating over paged responses.
type WorkbooksClientListBySubscriptionPager struct {
	client    *WorkbooksClient
	current   WorkbooksClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkbooksClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkbooksClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkbooksListResult.NextLink == nil || len(*p.current.WorkbooksListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkbooksClientListBySubscriptionPager) NextPage(ctx context.Context) (WorkbooksClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkbooksClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkbooksClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkbooksClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkbooksClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return WorkbooksClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkbooksClientRevisionsListPager provides operations for iterating over paged responses.
type WorkbooksClientRevisionsListPager struct {
	client    *WorkbooksClient
	current   WorkbooksClientRevisionsListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkbooksClientRevisionsListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkbooksClientRevisionsListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkbooksListResult.NextLink == nil || len(*p.current.WorkbooksListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkbooksClientRevisionsListPager) NextPage(ctx context.Context) (WorkbooksClientRevisionsListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkbooksClientRevisionsListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkbooksClientRevisionsListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkbooksClientRevisionsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkbooksClientRevisionsListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.revisionsListHandleResponse(resp)
	if err != nil {
		return WorkbooksClientRevisionsListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
