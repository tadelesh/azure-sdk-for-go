//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapplicationinsights_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/applicationinsights/armapplicationinsights"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAnnotations_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnnotationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnnotationsClient("subid", cred, &options)
	pager := client.List("my-resource-group",
		"my-component",
		"2018-02-05T00%253A30%253A00.000Z",
		"2018-02-06T00%253A33A00.000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.AnnotationsListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AnnotationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AnnotationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnnotations_Create(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnnotationsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnnotationsClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.Annotation{
			AnnotationName: to.Ptr("TestAnnotation"),
			Category:       to.Ptr("Text"),
			EventTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-31T13:41:38.657Z"); return t }()),
			ID:             to.Ptr("444e2c08-274a-4bbb-a89e-d77bb720f44a"),
			Properties:     to.Ptr("{\"Comments\":\"Testing\",\"Label\":\"Success\"}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.Annotation{
			{
				AnnotationName: to.Ptr("TestAnnotation"),
				Category:       to.Ptr("Text"),
				EventTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-31T13:41:38.657+00:00"); return t }()),
				ID:             to.Ptr("444e2c08-274a-4bbb-a89e-d77bb720f44a"),
				Properties:     to.Ptr("{\"Comments\":\"Testing\",\"Label\":\"Success\"}"),
			}}
		if !reflect.DeepEqual(exampleRes, res.AnnotationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnnotationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnnotations_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnnotationsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnnotationsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-component",
		"bb820f1b-3110-4a8b-ba2c-8c1129d7eb6a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsDelete.json: %v", err)
	}
}

func TestAnnotations_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnnotationsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnnotationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		"444e2c08-274a-4bbb-a89e-d77bb720f44a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.Annotation{
			{
				AnnotationName: to.Ptr("TestAnnotation"),
				Category:       to.Ptr("Text"),
				EventTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-31T13:41:38.657+00:00"); return t }()),
				ID:             to.Ptr("444e2c08-274a-4bbb-a89e-d77bb720f44a"),
				Properties:     to.Ptr("{\"Comments\":\"Testing\",\"Label\":\"Success\"}"),
			}}
		if !reflect.DeepEqual(exampleRes, res.AnnotationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnnotationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnnotationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIKeys_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"APIKeysList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAPIKeysClient("subid", cred, &options)
	pager := client.List("my-resource-group",
		"my-component",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.ComponentAPIKeyListResult{
			Value: []*armapplicationinsights.ComponentAPIKey{
				{
					Name:        to.Ptr("test"),
					CreatedDate: to.Ptr("Thu, 28 Sep 2017 16:58:52 GMT"),
					ID:          to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/Microsoft.Insights/components/my-component/apikeys/fe2e0138-47c1-46c5-8726-872f54c1ca08"),
					LinkedReadProperties: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/api"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/draft"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/extendqueries"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/search"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/aggregate"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/agentconfig")},
					LinkedWriteProperties: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/annotations")},
				},
				{
					Name:        to.Ptr("test2"),
					CreatedDate: to.Ptr("Thu, 28 Sep 2017 16:59:18 GMT"),
					ID:          to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/Microsoft.Insights/components/my-component/apikeys/bb820f1b-3110-4a8b-ba2c-8c1129d7eb6a"),
					LinkedReadProperties: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/api"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/draft"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/extendqueries"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/search"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/aggregate"),
						to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/agentconfig")},
					LinkedWriteProperties: []*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComponentAPIKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComponentAPIKeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIKeys_Create(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"APIKeyCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAPIKeysClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.APIKeyRequest{
			Name: to.Ptr("test2"),
			LinkedReadProperties: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/api"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/agentconfig")},
			LinkedWriteProperties: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/annotations")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentAPIKey{
			Name:        to.Ptr("test"),
			APIKey:      to.Ptr("eip8wlzuzlf4wzczhnzao54zcswew25azs4kadhb"),
			CreatedDate: to.Ptr("Thu, 28 Sep 2017 16:58:52 GMT"),
			ID:          to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/Microsoft.Insights/components/my-component/apikeys/fe2e0138-47c1-46c5-8726-872f54c1ca08"),
			LinkedReadProperties: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/api"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/agentconfig")},
			LinkedWriteProperties: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/annotations")},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentAPIKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAPIKey)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIKeys_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"APIKeyDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAPIKeysClient("subid", cred, &options)
	res, err := client.Delete(ctx,
		"my-resource-group",
		"my-component",
		"bb820f1b-3110-4a8b-ba2c-8c1129d7eb6a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentAPIKey{
			Name:        to.Ptr("test2"),
			CreatedDate: to.Ptr("Thu, 28 Sep 2017 16:59:18 GMT"),
			ID:          to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/Microsoft.Insights/components/my-component/apikeys/bb820f1b-3110-4a8b-ba2c-8c1129d7eb6a"),
			LinkedReadProperties: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/api"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/draft"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/extendqueries"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/search"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/aggregate"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/agentconfig")},
			LinkedWriteProperties: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentAPIKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAPIKey)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIKeys_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"APIKeysGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAPIKeysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		"bb820f1b-3110-4a8b-ba2c-8c1129d7eb6a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentAPIKey{
			Name:        to.Ptr("test2"),
			CreatedDate: to.Ptr("Thu, 28 Sep 2017 16:59:18 GMT"),
			ID:          to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/Microsoft.Insights/components/my-component/apikeys/bb820f1b-3110-4a8b-ba2c-8c1129d7eb6a"),
			LinkedReadProperties: []*string{
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/api"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/draft"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/extendqueries"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/search"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/aggregate"),
				to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component/agentconfig")},
			LinkedWriteProperties: []*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentAPIKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAPIKey)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/APIKeysGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportConfigurations_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportConfigurationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewExportConfigurationsClient("subid", cred, &options)
	res, err := client.List(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.ComponentExportConfiguration{
			{
				ApplicationName:                  to.Ptr("my-component"),
				ContainerName:                    to.Ptr("mystorageblob"),
				DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/mystorageblob"),
				DestinationStorageLocationID:     to.Ptr("eastasia"),
				DestinationStorageSubscriptionID: to.Ptr("subidc"),
				DestinationType:                  to.Ptr("Blob"),
				ExportID:                         to.Ptr("uGOoki0jQsyEs3IdQ83Q4QsNr4="),
				ExportStatus:                     to.Ptr("Preparing"),
				InstrumentationKey:               to.Ptr("8330b4a4-0b8e-40cf-a643-bbaf60d375c9"),
				IsUserEnabled:                    to.Ptr("False"),
				LastGapTime:                      to.Ptr("9999-12-31T23:59:59.999Z"),
				LastSuccessTime:                  to.Ptr("9999-12-31T23:59:59.999Z"),
				LastUserUpdate:                   to.Ptr("2017-06-05T06:34:26.957Z"),
				NotificationQueueEnabled:         to.Ptr("False"),
				PermanentErrorReason:             to.Ptr("None"),
				RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
				ResourceGroup:                    to.Ptr("2"),
				StorageName:                      to.Ptr("mystorageblob"),
				SubscriptionID:                   to.Ptr("subid"),
			}}
		if !reflect.DeepEqual(exampleRes, res.ComponentExportConfigurationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentExportConfigurationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportConfigurations_Create(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationsPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportConfigurationPost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewExportConfigurationsClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.ComponentExportRequest{
			DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.ClassicStorage/storageAccounts/mystorageblob"),
			DestinationAddress:               to.Ptr("https://mystorageblob.blob.core.windows.net/testexport?sv=2015-04-05&sr=c&sig=token"),
			DestinationStorageLocationID:     to.Ptr("eastus"),
			DestinationStorageSubscriptionID: to.Ptr("subid"),
			DestinationType:                  to.Ptr("Blob"),
			IsEnabled:                        to.Ptr("true"),
			NotificationQueueEnabled:         to.Ptr("false"),
			NotificationQueueURI:             to.Ptr(""),
			RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationsPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.ComponentExportConfiguration{
			{
				ApplicationName:                  to.Ptr("my-component"),
				ContainerName:                    to.Ptr("mystorageblob"),
				DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/mystorageblob"),
				DestinationStorageLocationID:     to.Ptr("eastasia"),
				DestinationStorageSubscriptionID: to.Ptr("subidc"),
				DestinationType:                  to.Ptr("Blob"),
				ExportID:                         to.Ptr("uGOoki0jQsyEs3IdQ83Q4QsNr4="),
				ExportStatus:                     to.Ptr("Preparing"),
				InstrumentationKey:               to.Ptr("8330b4a4-0b8e-40cf-a643-bbaf60d375c9"),
				IsUserEnabled:                    to.Ptr("False"),
				LastGapTime:                      to.Ptr("9999-12-31T23:59:59.999Z"),
				LastSuccessTime:                  to.Ptr("9999-12-31T23:59:59.999Z"),
				LastUserUpdate:                   to.Ptr("2017-06-05T06:34:26.957Z"),
				NotificationQueueEnabled:         to.Ptr("False"),
				PermanentErrorReason:             to.Ptr("None"),
				RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
				ResourceGroup:                    to.Ptr("2"),
				StorageName:                      to.Ptr("mystorageblob"),
				SubscriptionID:                   to.Ptr("subid"),
			}}
		if !reflect.DeepEqual(exampleRes, res.ComponentExportConfigurationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentExportConfigurationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationsPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportConfigurations_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportConfigurationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewExportConfigurationsClient("subid", cred, &options)
	res, err := client.Delete(ctx,
		"my-resource-group",
		"my-component",
		"uGOoki0jQsyEs3IdQ83Q4QsNr4=",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentExportConfiguration{
			ApplicationName:                  to.Ptr("my-component"),
			ContainerName:                    to.Ptr("mystorageblob"),
			DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/mystorageblob"),
			DestinationStorageLocationID:     to.Ptr("eastasia"),
			DestinationStorageSubscriptionID: to.Ptr("subidc"),
			DestinationType:                  to.Ptr("Blob"),
			ExportID:                         to.Ptr("uGOoki0jQsyEs3IdQ83Q4QsNr4="),
			ExportStatus:                     to.Ptr("Preparing"),
			InstrumentationKey:               to.Ptr("8330b4a4-0b8e-40cf-a643-bbaf60d375c9"),
			IsUserEnabled:                    to.Ptr("False"),
			LastGapTime:                      to.Ptr("9999-12-31T23:59:59.999Z"),
			LastSuccessTime:                  to.Ptr("9999-12-31T23:59:59.999Z"),
			LastUserUpdate:                   to.Ptr("2017-06-05T06:34:26.957Z"),
			NotificationQueueEnabled:         to.Ptr("False"),
			PermanentErrorReason:             to.Ptr("None"),
			RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
			ResourceGroup:                    to.Ptr("2"),
			StorageName:                      to.Ptr("mystorageblob"),
			SubscriptionID:                   to.Ptr("subid"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentExportConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentExportConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportConfigurations_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewExportConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		"uGOoki0jQsyEs3IdQ83Q4QsNr4=",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentExportConfiguration{
			ApplicationName:                  to.Ptr("my-component"),
			ContainerName:                    to.Ptr("mystorageblob"),
			DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/mystorageblob"),
			DestinationStorageLocationID:     to.Ptr("eastasia"),
			DestinationStorageSubscriptionID: to.Ptr("subidc"),
			DestinationType:                  to.Ptr("Blob"),
			ExportID:                         to.Ptr("uGOoki0jQsyEs3IdQ83Q4QsNr4="),
			ExportStatus:                     to.Ptr("Preparing"),
			InstrumentationKey:               to.Ptr("8330b4a4-0b8e-40cf-a643-bbaf60d375c9"),
			IsUserEnabled:                    to.Ptr("False"),
			LastGapTime:                      to.Ptr("9999-12-31T23:59:59.999Z"),
			LastSuccessTime:                  to.Ptr("9999-12-31T23:59:59.999Z"),
			LastUserUpdate:                   to.Ptr("2017-06-05T06:34:26.957Z"),
			NotificationQueueEnabled:         to.Ptr("False"),
			PermanentErrorReason:             to.Ptr("None"),
			RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
			ResourceGroup:                    to.Ptr("2"),
			StorageName:                      to.Ptr("mystorageblob"),
			SubscriptionID:                   to.Ptr("subid"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentExportConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentExportConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportConfigurations_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportConfigurationUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewExportConfigurationsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"my-resource-group",
		"my-component",
		"uGOoki0jQsyEs3IdQ83Q4QsNr4=",
		armapplicationinsights.ComponentExportRequest{
			DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.ClassicStorage/storageAccounts/mystorageblob"),
			DestinationAddress:               to.Ptr("https://mystorageblob.blob.core.windows.net/fchentest?sv=2015-04-05&sr=c&sig=token"),
			DestinationStorageLocationID:     to.Ptr("eastus"),
			DestinationStorageSubscriptionID: to.Ptr("subid"),
			DestinationType:                  to.Ptr("Blob"),
			IsEnabled:                        to.Ptr("true"),
			NotificationQueueEnabled:         to.Ptr("false"),
			NotificationQueueURI:             to.Ptr(""),
			RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentExportConfiguration{
			ApplicationName:                  to.Ptr("my-component"),
			ContainerName:                    to.Ptr("mystorageblob"),
			DestinationAccountID:             to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/mystorageblob"),
			DestinationStorageLocationID:     to.Ptr("eastasia"),
			DestinationStorageSubscriptionID: to.Ptr("subidc"),
			DestinationType:                  to.Ptr("Blob"),
			ExportID:                         to.Ptr("uGOoki0jQsyEs3IdQ83Q4QsNr4="),
			ExportStatus:                     to.Ptr("Preparing"),
			InstrumentationKey:               to.Ptr("8330b4a4-0b8e-40cf-a643-bbaf60d375c9"),
			IsUserEnabled:                    to.Ptr("False"),
			LastGapTime:                      to.Ptr("9999-12-31T23:59:59.999Z"),
			LastSuccessTime:                  to.Ptr("9999-12-31T23:59:59.999Z"),
			LastUserUpdate:                   to.Ptr("2017-06-05T06:34:26.957Z"),
			NotificationQueueEnabled:         to.Ptr("False"),
			PermanentErrorReason:             to.Ptr("None"),
			RecordTypes:                      to.Ptr("Requests, Event, Exceptions, Metrics, PageViews, PageViewPerformance, Rdd, PerformanceCounters, Availability"),
			ResourceGroup:                    to.Ptr("2"),
			StorageName:                      to.Ptr("mystorageblob"),
			SubscriptionID:                   to.Ptr("subid"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentExportConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentExportConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ExportConfigurationUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentCurrentBillingFeatures_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/CurrentBillingFeaturesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentCurrentBillingFeaturesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentCurrentBillingFeaturesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/CurrentBillingFeaturesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentBillingFeatures{
			CurrentBillingFeatures: []*string{
				to.Ptr("Basic")},
			DataVolumeCap: &armapplicationinsights.ComponentDataVolumeCap{
				Cap:                                  to.Ptr[float32](500),
				MaxHistoryCap:                        to.Ptr[float32](500),
				ResetTime:                            to.Ptr[int32](16),
				StopSendNotificationWhenHitCap:       to.Ptr(false),
				StopSendNotificationWhenHitThreshold: to.Ptr(false),
				WarningThreshold:                     to.Ptr[int32](90),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentBillingFeatures) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentBillingFeatures)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/CurrentBillingFeaturesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentCurrentBillingFeatures_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/CurrentBillingFeaturesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentCurrentBillingFeaturesUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentCurrentBillingFeaturesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.ComponentBillingFeatures{
			CurrentBillingFeatures: []*string{
				to.Ptr("Basic"),
				to.Ptr("Application Insights Enterprise")},
			DataVolumeCap: &armapplicationinsights.ComponentDataVolumeCap{
				Cap:                            to.Ptr[float32](100),
				StopSendNotificationWhenHitCap: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/CurrentBillingFeaturesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentBillingFeatures{
			CurrentBillingFeatures: []*string{
				to.Ptr("Basic"),
				to.Ptr("Application Insights Enterprise")},
			DataVolumeCap: &armapplicationinsights.ComponentDataVolumeCap{
				Cap:                                  to.Ptr[float32](100),
				MaxHistoryCap:                        to.Ptr[float32](500),
				ResetTime:                            to.Ptr[int32](16),
				StopSendNotificationWhenHitCap:       to.Ptr(true),
				StopSendNotificationWhenHitThreshold: to.Ptr(false),
				WarningThreshold:                     to.Ptr[int32](90),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentBillingFeatures) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentBillingFeatures)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/CurrentBillingFeaturesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentQuotaStatus_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/QuotaStatusGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentCurrentBillingFeaturesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentQuotaStatusClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/QuotaStatusGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentQuotaStatus{
			AppID:             to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
			ExpirationTime:    to.Ptr("2017-08-10T05:00:00"),
			ShouldBeThrottled: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentQuotaStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentQuotaStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/QuotaStatusGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentFeatureCapabilities_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FeatureCapabilitiesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentCurrentBillingFeaturesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentFeatureCapabilitiesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FeatureCapabilitiesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentFeatureCapabilities{
			AnalyticsIntegration: to.Ptr(true),
			APIAccessLevel:       to.Ptr("Premium"),
			ApplicationMap:       to.Ptr(true),
			BurstThrottlePolicy:  to.Ptr("B2"),
			DailyCap:             to.Ptr[float32](0.0323),
			DailyCapResetTime:    to.Ptr[float32](4),
			LiveStreamMetrics:    to.Ptr(true),
			MultipleStepWebTest:  to.Ptr(true),
			OpenSchema:           to.Ptr(true),
			PowerBIIntegration:   to.Ptr(true),
			ProactiveDetection:   to.Ptr(false),
			SupportExportData:    to.Ptr(true),
			ThrottleRate:         to.Ptr[float32](0),
			TrackingType:         to.Ptr("Basic"),
			WorkItemIntegration:  to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentFeatureCapabilities) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentFeatureCapabilities)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FeatureCapabilitiesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentAvailableFeatures_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AvailableBillingFeaturesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentCurrentBillingFeaturesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentAvailableFeaturesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AvailableBillingFeaturesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentAvailableFeatures{
			Result: []*armapplicationinsights.ComponentFeature{
				{
					Capabilities: []*armapplicationinsights.ComponentFeatureCapability{
						{
							Description: to.Ptr("Number of application hosts"),
							Name:        to.Ptr("hostnumber"),
							Value:       to.Ptr("Unlimited"),
						},
						{
							Description:        to.Ptr("Included data"),
							MeterID:            to.Ptr("acf26b15-ee92-440d-9973-9a72d77641aa"),
							MeterRateFrequency: to.Ptr("GB/month"),
							Name:               to.Ptr("includeddata"),
							Value:              to.Ptr("1"),
						},
						{
							Description:        to.Ptr("Additional data"),
							MeterID:            to.Ptr("b90f8b65-6c3e-43fc-9149-bdfc73b6a5b9"),
							MeterRateFrequency: to.Ptr("/GB"),
							Name:               to.Ptr("additionaldata"),
						},
						{
							Description: to.Ptr("Data retention"),
							Name:        to.Ptr("dataretention"),
							Unit:        to.Ptr("days"),
							Value:       to.Ptr("90"),
						},
						{
							Description: to.Ptr("Response time monitoring and diagnostics"),
							Name:        to.Ptr("responsetimemonitoring"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Failed requests monitoring and diagnostics"),
							Name:        to.Ptr("failedrequestsmonitoring"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Browser performance"),
							Name:        to.Ptr("browserperformance"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Usage analysis"),
							Name:        to.Ptr("usageanalysis"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Server monitoring"),
							Name:        to.Ptr("servermonitoring"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Alerting and notifications"),
							Name:        to.Ptr("alertingandnotifications"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Daily notification of failed request rate spikes"),
							Name:        to.Ptr("notificationfailedrequestrate"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Telemetry analyzer"),
							Name:        to.Ptr("telemetryanalyzer"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Search and Analytics"),
							Name:        to.Ptr("searchandanalytics"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description:        to.Ptr("Web tests (multi-step tests)"),
							MeterID:            to.Ptr("0aa0e0e9-3f58-4dcf-9bb0-9db7ae1d5954"),
							MeterRateFrequency: to.Ptr("/test (per month)"),
							Name:               to.Ptr("webtests"),
						},
						{
							Description: to.Ptr("Live stream metrics"),
							Name:        to.Ptr("livestreammetrics"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Application map"),
							Name:        to.Ptr("applicationmap"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Daily notification for many key metrics"),
							Name:        to.Ptr("dailynotificationforkeymetrics"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Work item integration"),
							Name:        to.Ptr("workitemintegration"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("API access"),
							Name:        to.Ptr("apiaccess"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Power BI integration"),
							Name:        to.Ptr("powerbiintegration"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Bulk data import"),
							Name:        to.Ptr("bulkdataimport"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Automatic data evaluation"),
							Name:        to.Ptr("automaticdataevaluation"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Analytics integration with Azure dashboards"),
							Name:        to.Ptr("analyticsintegration"),
							Value:       to.Ptr("Enabled"),
						},
						{
							Description:        to.Ptr("Continuous export"),
							MeterID:            to.Ptr("90fa4d31-3ea2-4178-a894-ec4c76c712b2"),
							MeterRateFrequency: to.Ptr("/GB"),
							Name:               to.Ptr("continuousexport"),
							Value:              to.Ptr("Enabled"),
						},
						{
							Description: to.Ptr("Default daily cap"),
							Name:        to.Ptr("defaultdailycap"),
							Unit:        to.Ptr("G"),
							Value:       to.Ptr("100"),
						},
						{
							Description: to.Ptr("Default maximum daily cap"),
							Name:        to.Ptr("defaultmaxdailycap"),
							Unit:        to.Ptr("G"),
							Value:       to.Ptr("1000"),
						}},
					FeatureName:            to.Ptr("Basic"),
					IsHidden:               to.Ptr(true),
					IsMainFeature:          to.Ptr(true),
					MeterID:                to.Ptr("c9a05f12-4910-4527-a9ec-1db4e4dba60e"),
					MeterRateFrequency:     to.Ptr("/month"),
					SupportedAddonFeatures: to.Ptr("Application Insights Enterprise"),
					Title:                  to.Ptr("Application Insights Basic"),
				},
				{
					Capabilities: []*armapplicationinsights.ComponentFeatureCapability{
						{
							Description:        to.Ptr("Enterprise Included data"),
							MeterID:            to.Ptr("acf26b15-ee92-440d-9973-9a72d77641aa"),
							MeterRateFrequency: to.Ptr("GB/month"),
							Name:               to.Ptr("enterpriseincludeddata"),
							Value:              to.Ptr("0.20"),
						},
						{
							Description:        to.Ptr("Enterprise Additional data"),
							MeterID:            to.Ptr("3fedc88a-b68f-4936-bbf0-f290a254388c"),
							MeterRateFrequency: to.Ptr("/GB"),
							Name:               to.Ptr("enterpriseadditionaldata"),
						},
						{
							Description: to.Ptr("Default daily cap"),
							Name:        to.Ptr("defaultdailycap"),
							Unit:        to.Ptr("G"),
							Value:       to.Ptr("100"),
						},
						{
							Description: to.Ptr("Default maximum daily cap"),
							Name:        to.Ptr("defaultmaxdailycap"),
							Unit:        to.Ptr("G"),
							Value:       to.Ptr("1000"),
						}},
					FeatureName:        to.Ptr("Application Insights Enterprise"),
					IsHidden:           to.Ptr(false),
					IsMainFeature:      to.Ptr(false),
					MeterID:            to.Ptr("222f32c5-a319-4787-b934-5fb95105b2c8"),
					MeterRateFrequency: to.Ptr("/node/month"),
					Title:              to.Ptr("Enterprise"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentAvailableFeatures) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAvailableFeatures)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AvailableBillingFeaturesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProactiveDetectionConfigurations_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProactiveDetectionConfigurationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewProactiveDetectionConfigurationsClient("subid", cred, &options)
	res, err := client.List(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.ComponentProactiveDetectionConfiguration{
			{
				CustomEmails: []*string{
					to.Ptr("foo@microsoft.com"),
					to.Ptr("foo2@microsoft.com")},
				Enabled: to.Ptr(true),
				Name:    to.Ptr("slowpageloadtime"),
				RuleDefinitions: &armapplicationinsights.ComponentProactiveDetectionConfigurationRuleDefinitions{
					Description:                to.Ptr("Smart Detection rules notify you of performance anomaly issues."),
					DisplayName:                to.Ptr("Slow page load time"),
					HelpURL:                    to.Ptr("https://docs.microsoft.com/en-us/azure/application-insights/app-insights-proactive-performance-diagnostics"),
					IsEnabledByDefault:         to.Ptr(true),
					IsHidden:                   to.Ptr(false),
					IsInPreview:                to.Ptr(false),
					Name:                       to.Ptr("slowpageloadtime"),
					SupportsEmailNotifications: to.Ptr(true),
				},
				SendEmailsToSubscriptionOwners: to.Ptr(true),
			},
			{
				CustomEmails: []*string{},
				Enabled:      to.Ptr(true),
				Name:         to.Ptr("slowpageloadtime"),
				RuleDefinitions: &armapplicationinsights.ComponentProactiveDetectionConfigurationRuleDefinitions{
					Description:                to.Ptr("Smart Detection rules notify you of performance anomaly issues."),
					DisplayName:                to.Ptr("Slow server response time"),
					HelpURL:                    to.Ptr("https://docs.microsoft.com/en-us/azure/application-insights/app-insights-proactive-performance-diagnostics"),
					IsEnabledByDefault:         to.Ptr(true),
					IsHidden:                   to.Ptr(false),
					IsInPreview:                to.Ptr(false),
					Name:                       to.Ptr("slowserverresponsetime"),
					SupportsEmailNotifications: to.Ptr(true),
				},
				SendEmailsToSubscriptionOwners: to.Ptr(true),
			}}
		if !reflect.DeepEqual(exampleRes, res.ComponentProactiveDetectionConfigurationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentProactiveDetectionConfigurationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProactiveDetectionConfigurations_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProactiveDetectionConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewProactiveDetectionConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		"slowpageloadtime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentProactiveDetectionConfiguration{
			CustomEmails: []*string{
				to.Ptr("foo@microsoft.com"),
				to.Ptr("foo2@microsoft.com")},
			Enabled: to.Ptr(true),
			Name:    to.Ptr("slowpageloadtime"),
			RuleDefinitions: &armapplicationinsights.ComponentProactiveDetectionConfigurationRuleDefinitions{
				Description:                to.Ptr("Smart Detection rules notify you of performance anomaly issues."),
				DisplayName:                to.Ptr("Slow page load time"),
				HelpURL:                    to.Ptr("https://docs.microsoft.com/en-us/azure/application-insights/app-insights-proactive-performance-diagnostics"),
				IsEnabledByDefault:         to.Ptr(true),
				IsHidden:                   to.Ptr(false),
				IsInPreview:                to.Ptr(false),
				Name:                       to.Ptr("slowpageloadtime"),
				SupportsEmailNotifications: to.Ptr(true),
			},
			SendEmailsToSubscriptionOwners: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentProactiveDetectionConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentProactiveDetectionConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProactiveDetectionConfigurations_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProactiveDetectionConfigurationUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewProactiveDetectionConfigurationsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"my-resource-group",
		"my-component",
		"slowpageloadtime",
		armapplicationinsights.ComponentProactiveDetectionConfiguration{
			CustomEmails: []*string{
				to.Ptr("foo@microsoft.com"),
				to.Ptr("foo2@microsoft.com")},
			Enabled: to.Ptr(true),
			Name:    to.Ptr("slowpageloadtime"),
			RuleDefinitions: &armapplicationinsights.ComponentProactiveDetectionConfigurationRuleDefinitions{
				Description:                to.Ptr("Smart Detection rules notify you of performance anomaly issues."),
				DisplayName:                to.Ptr("Slow page load time"),
				HelpURL:                    to.Ptr("https://docs.microsoft.com/en-us/azure/application-insights/app-insights-proactive-performance-diagnostics"),
				IsEnabledByDefault:         to.Ptr(true),
				IsHidden:                   to.Ptr(false),
				IsInPreview:                to.Ptr(false),
				Name:                       to.Ptr("slowpageloadtime"),
				SupportsEmailNotifications: to.Ptr(true),
			},
			SendEmailsToSubscriptionOwners: to.Ptr(true),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentProactiveDetectionConfiguration{
			CustomEmails: []*string{
				to.Ptr("foo@microsoft.com"),
				to.Ptr("foo2@microsoft.com")},
			Enabled: to.Ptr(true),
			Name:    to.Ptr("slowpageloadtime"),
			RuleDefinitions: &armapplicationinsights.ComponentProactiveDetectionConfigurationRuleDefinitions{
				Description:                to.Ptr("Smart Detection rules notify you of performance anomaly issues."),
				DisplayName:                to.Ptr("Slow page load time"),
				HelpURL:                    to.Ptr("https://docs.microsoft.com/en-us/azure/application-insights/app-insights-proactive-performance-diagnostics"),
				IsEnabledByDefault:         to.Ptr(true),
				IsHidden:                   to.Ptr(false),
				IsInPreview:                to.Ptr(false),
				Name:                       to.Ptr("slowpageloadtime"),
				SupportsEmailNotifications: to.Ptr(true),
			},
			SendEmailsToSubscriptionOwners: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentProactiveDetectionConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentProactiveDetectionConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/ProactiveDetectionConfigurationUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkItemConfigurations_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkItemConfigurationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkItemConfigurationsClient("subid", cred, &options)
	pager := client.List("my-resource-group",
		"my-component",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigsGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkItemConfigurationsListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkItemConfigurationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkItemConfigurationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkItemConfigurations_Create(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkItemConfigurationsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkItemConfigurationsClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.WorkItemCreateConfiguration{
			ConnectorDataConfiguration: to.Ptr("{\"VSOAccountBaseUrl\":\"https://testtodelete.visualstudio.com\",\"ProjectCollection\":\"DefaultCollection\",\"Project\":\"todeletefirst\",\"ResourceId\":\"d0662b05-439a-4a1b-840b-33a7f8b42ebf\",\"Custom\":\"{\\\"/fields/System.WorkItemType\\\":\\\"Bug\\\",\\\"/fields/System.AreaPath\\\":\\\"todeletefirst\\\",\\\"/fields/System.AssignedTo\\\":\\\"\\\"}\"}"),
			ConnectorID:                to.Ptr("d334e2a4-6733-488e-8645-a9fdc1694f41"),
			ValidateOnly:               to.Ptr(true),
			WorkItemProperties: map[string]*string{
				"0": to.Ptr("[object Object]"),
				"1": to.Ptr("[object Object]"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkItemConfiguration{}
		if !reflect.DeepEqual(exampleRes, res.WorkItemConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkItemConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkItemConfigurations_GetDefault(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigDefaultGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkItemConfigurationsGetDefault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkItemConfigurationsClient("subid", cred, &options)
	res, err := client.GetDefault(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigDefaultGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkItemConfiguration{
			ConfigDisplayName: to.Ptr("Visual Studio Team Services"),
			ConfigProperties:  to.Ptr("{\"VSOAccountBaseUrl\":\"https://testtodelete.visualstudio.com\",\"ProjectCollection\":\"DefaultCollection\",\"Project\":\"todeletefirst\",\"ResourceId\":\"d0662b05-439a-4a1b-840b-33a7f8b42ebf\",\"ConfigurationType\":\"Standard\",\"WorkItemType\":\"Bug\",\"AreaPath\":\"todeletefirst\",\"AssignedTo\":\"\"}"),
			ConnectorID:       to.Ptr("d334e2a4-6733-488e-8645-a9fdc1694f41"),
			ID:                to.Ptr("Visual Studio Team Services"),
			IsDefault:         to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.WorkItemConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkItemConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigDefaultGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkItemConfigurations_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkItemConfigurationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkItemConfigurationsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-component",
		"Visual Studio Team Services",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigDelete.json: %v", err)
	}
}

func TestWorkItemConfigurations_GetItem(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkItemConfigurationsGetDefault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkItemConfigurationsClient("subid", cred, &options)
	res, err := client.GetItem(ctx,
		"my-resource-group",
		"my-component",
		"Visual Studio Team Services",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkItemConfiguration{
			ConfigDisplayName: to.Ptr("Visual Studio Team Services"),
			ConfigProperties:  to.Ptr("{\"VSOAccountBaseUrl\":\"https://testtodelete.visualstudio.com\",\"ProjectCollection\":\"DefaultCollection\",\"Project\":\"todeletefirst\",\"ResourceId\":\"d0662b05-439a-4a1b-840b-33a7f8b42ebf\",\"ConfigurationType\":\"Standard\",\"WorkItemType\":\"Bug\",\"AreaPath\":\"todeletefirst\",\"AssignedTo\":\"\"}"),
			ConnectorID:       to.Ptr("d334e2a4-6733-488e-8645-a9fdc1694f41"),
			ID:                to.Ptr("Visual Studio Team Services"),
			IsDefault:         to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.WorkItemConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkItemConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkItemConfigurations_UpdateItem(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkItemConfigurationsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkItemConfigurationsClient("subid", cred, &options)
	res, err := client.UpdateItem(ctx,
		"my-resource-group",
		"my-component",
		"Visual Studio Team Services",
		armapplicationinsights.WorkItemCreateConfiguration{
			ConnectorDataConfiguration: to.Ptr("{\"VSOAccountBaseUrl\":\"https://testtodelete.visualstudio.com\",\"ProjectCollection\":\"DefaultCollection\",\"Project\":\"todeletefirst\",\"ResourceId\":\"d0662b05-439a-4a1b-840b-33a7f8b42ebf\",\"Custom\":\"{\\\"/fields/System.WorkItemType\\\":\\\"Bug\\\",\\\"/fields/System.AreaPath\\\":\\\"todeletefirst\\\",\\\"/fields/System.AssignedTo\\\":\\\"\\\"}\"}"),
			ConnectorID:                to.Ptr("d334e2a4-6733-488e-8645-a9fdc1694f41"),
			ValidateOnly:               to.Ptr(true),
			WorkItemProperties: map[string]*string{
				"0": to.Ptr("[object Object]"),
				"1": to.Ptr("[object Object]"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkItemConfiguration{
			ConfigDisplayName: to.Ptr("Visual Studio Team Services"),
			ConfigProperties:  to.Ptr("{\"VSOAccountBaseUrl\":\"https://testtodelete.visualstudio.com\",\"ProjectCollection\":\"DefaultCollection\",\"Project\":\"todeletefirst\",\"ResourceId\":\"d0662b05-439a-4a1b-840b-33a7f8b42ebf\",\"ConfigurationType\":\"Standard\",\"WorkItemType\":\"Bug\",\"AreaPath\":\"todeletefirst\",\"AssignedTo\":\"\"}"),
			ConnectorID:       to.Ptr("d334e2a4-6733-488e-8645-a9fdc1694f41"),
			ID:                to.Ptr("Visual Studio Team Services"),
			IsDefault:         to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.WorkItemConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkItemConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WorkItemConfigUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavorites_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoritesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoritesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewFavoritesClient("subid", cred, &options)
	res, err := client.List(ctx,
		"my-resource-group",
		"my-ai-component",
		&armapplicationinsights.FavoritesClientListOptions{FavoriteType: nil,
			SourceType:      nil,
			CanFetchContent: nil,
			Tags:            []string{},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoritesList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.ComponentFavorite{
			{
				Config:                  to.Ptr("blah blah"),
				FavoriteID:              to.Ptr("c0deea5e-3344-40f2-96f8-6f8e1c3b5722"),
				FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
				IsGeneratedFromTemplate: to.Ptr(false),
				Name:                    to.Ptr("Example Metric Chart Favorite"),
				Tags:                    []*string{},
				TimeModified:            to.Ptr("2018-01-31T23:56:16.008902Z"),
				Version:                 to.Ptr("ME"),
			},
			{
				Config:                  to.Ptr("{\"TimeSelection\":{\"durationMs\":1800000,\"endTime\":\"2018-01-31T23:56:15.493Z\",\"createdTime\":\"Wed Jan 31 2018 15:58:36 GMT-0800 (Pacific Standard Time)\",\"isInitialTime\":false,\"grain\":1,\"useDashboardTimeRange\":false},\"SearchFilter\":{\"eventTypes\":[1,2],\"typeFacets\":{},\"isPermissive\":false},\"QueryText\":\"*\",\"partId\":\"99e33a16-1b00-4a7d-b98f-a3c1bb3a4df8\"}"),
				FavoriteID:              to.Ptr("deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
				FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
				IsGeneratedFromTemplate: to.Ptr(false),
				Name:                    to.Ptr("Example Search Blade Favorite"),
				Tags: []*string{
					to.Ptr("SampleTag01"),
					to.Ptr("SampleTag2")},
				TimeModified: to.Ptr("2018-01-31T23:59:25.4594264Z"),
				Version:      to.Ptr("Search"),
			}}
		if !reflect.DeepEqual(exampleRes, res.ComponentFavoriteArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentFavoriteArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoritesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavorites_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewFavoritesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-ai-component",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentFavorite{
			Config:                  to.Ptr("{\"TimeSelection\":{\"durationMs\":1800000,\"endTime\":\"2018-01-31T23:56:15.493Z\",\"createdTime\":\"Wed Jan 31 2018 15:58:36 GMT-0800 (Pacific Standard Time)\",\"isInitialTime\":false,\"grain\":1,\"useDashboardTimeRange\":false},\"SearchFilter\":{\"eventTypes\":[1,2],\"typeFacets\":{},\"isPermissive\":false},\"QueryText\":\"*\",\"partId\":\"99e33a16-1b00-4a7d-b98f-a3c1bb3a4df8\"}"),
			FavoriteID:              to.Ptr("deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
			IsGeneratedFromTemplate: to.Ptr(false),
			Name:                    to.Ptr("Example Search Blade Favorite"),
			Tags: []*string{
				to.Ptr("SampleTag1"),
				to.Ptr("SampleTag2")},
			TimeModified: to.Ptr("2018-01-31T23:59:25.4594264Z"),
			Version:      to.Ptr("Search"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentFavorite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentFavorite)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavorites_Add(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteAdd"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewFavoritesClient("subid", cred, &options)
	res, err := client.Add(ctx,
		"my-resource-group",
		"my-ai-component",
		"deadb33f-8bee-4d3b-a059-9be8dac93960",
		armapplicationinsights.ComponentFavorite{
			Config:                  to.Ptr("{\"MEDataModelRawJSON\":\"{\\n  \\\"version\\\": \\\"1.4.1\\\",\\n  \\\"isCustomDataModel\\\": true,\\n  \\\"items\\\": [\\n    {\\n      \\\"id\\\": \\\"90a7134d-9a38-4c25-88d3-a495209873eb\\\",\\n      \\\"chartType\\\": \\\"Area\\\",\\n      \\\"chartHeight\\\": 4,\\n      \\\"metrics\\\": [\\n        {\\n          \\\"id\\\": \\\"preview/requests/count\\\",\\n          \\\"metricAggregation\\\": \\\"Sum\\\",\\n          \\\"color\\\": \\\"msportalfx-bgcolor-d0\\\"\\n        }\\n      ],\\n      \\\"priorPeriod\\\": false,\\n      \\\"clickAction\\\": {\\n        \\\"defaultBlade\\\": \\\"SearchBlade\\\"\\n      },\\n      \\\"horizontalBars\\\": true,\\n      \\\"showOther\\\": true,\\n      \\\"aggregation\\\": \\\"Sum\\\",\\n      \\\"percentage\\\": false,\\n      \\\"palette\\\": \\\"fail\\\",\\n      \\\"yAxisOption\\\": 0,\\n      \\\"title\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"0c289098-88e8-4010-b212-546815cddf70\\\",\\n      \\\"chartType\\\": \\\"Area\\\",\\n      \\\"chartHeight\\\": 2,\\n      \\\"metrics\\\": [\\n        {\\n          \\\"id\\\": \\\"preview/requests/duration\\\",\\n          \\\"metricAggregation\\\": \\\"Avg\\\",\\n          \\\"color\\\": \\\"msportalfx-bgcolor-j1\\\"\\n        }\\n      ],\\n      \\\"priorPeriod\\\": false,\\n      \\\"clickAction\\\": {\\n        \\\"defaultBlade\\\": \\\"SearchBlade\\\"\\n      },\\n      \\\"horizontalBars\\\": true,\\n      \\\"showOther\\\": true,\\n      \\\"aggregation\\\": \\\"Avg\\\",\\n      \\\"percentage\\\": false,\\n      \\\"palette\\\": \\\"greenHues\\\",\\n      \\\"yAxisOption\\\": 0,\\n      \\\"title\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"cbdaab6f-a808-4f71-aca5-b3976cbb7345\\\",\\n      \\\"chartType\\\": \\\"Bar\\\",\\n      \\\"chartHeight\\\": 4,\\n      \\\"metrics\\\": [\\n        {\\n          \\\"id\\\": \\\"preview/requests/duration\\\",\\n          \\\"metricAggregation\\\": \\\"Avg\\\",\\n          \\\"color\\\": \\\"msportalfx-bgcolor-d0\\\"\\n        }\\n      ],\\n      \\\"priorPeriod\\\": false,\\n      \\\"clickAction\\\": {\\n        \\\"defaultBlade\\\": \\\"SearchBlade\\\"\\n      },\\n      \\\"horizontalBars\\\": true,\\n      \\\"showOther\\\": true,\\n      \\\"aggregation\\\": \\\"Avg\\\",\\n      \\\"percentage\\\": false,\\n      \\\"palette\\\": \\\"magentaHues\\\",\\n      \\\"yAxisOption\\\": 0,\\n      \\\"title\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"1d5a6a3a-9fa1-4099-9cf9-05eff72d1b02\\\",\\n      \\\"grouping\\\": {\\n        \\\"kind\\\": \\\"ByDimension\\\",\\n        \\\"dimension\\\": \\\"context.application.version\\\"\\n      },\\n      \\\"chartType\\\": \\\"Grid\\\",\\n      \\\"chartHeight\\\": 1,\\n      \\\"metrics\\\": [\\n        {\\n          \\\"id\\\": \\\"basicException.count\\\",\\n          \\\"metricAggregation\\\": \\\"Sum\\\",\\n          \\\"color\\\": \\\"msportalfx-bgcolor-g0\\\"\\n        },\\n        {\\n          \\\"id\\\": \\\"requestFailed.count\\\",\\n          \\\"metricAggregation\\\": \\\"Sum\\\",\\n          \\\"color\\\": \\\"msportalfx-bgcolor-f0s2\\\"\\n        }\\n      ],\\n      \\\"priorPeriod\\\": true,\\n      \\\"clickAction\\\": {\\n        \\\"defaultBlade\\\": \\\"SearchBlade\\\"\\n      },\\n      \\\"horizontalBars\\\": true,\\n      \\\"showOther\\\": true,\\n      \\\"percentage\\\": false,\\n      \\\"palette\\\": \\\"blueHues\\\",\\n      \\\"yAxisOption\\\": 0,\\n      \\\"title\\\": \\\"\\\"\\n    }\\n  ],\\n  \\\"currentFilter\\\": {\\n    \\\"eventTypes\\\": [\\n      1,\\n      2\\n    ],\\n    \\\"typeFacets\\\": {},\\n    \\\"isPermissive\\\": false\\n  },\\n  \\\"timeContext\\\": {\\n    \\\"durationMs\\\": 75600000,\\n    \\\"endTime\\\": \\\"2018-01-31T20:30:00.000Z\\\",\\n    \\\"createdTime\\\": \\\"2018-01-31T23:54:26.280Z\\\",\\n    \\\"isInitialTime\\\": false,\\n    \\\"grain\\\": 1,\\n    \\\"useDashboardTimeRange\\\": false\\n  },\\n  \\\"jsonUri\\\": \\\"Favorite_BlankChart\\\",\\n  \\\"timeSource\\\": 0\\n}\"}"),
			FavoriteID:              to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
			IsGeneratedFromTemplate: to.Ptr(false),
			Name:                    to.Ptr("Blah Blah Blah"),
			Tags: []*string{
				to.Ptr("TagSample01"),
				to.Ptr("TagSample02")},
			Version: to.Ptr("ME"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteAdd.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentFavorite{
			Category:                to.Ptr(""),
			Config:                  to.Ptr("{\"MEDataModelRawJSON\":{\n  \"version\": \"1.4.1\",\n  \"isCustomDataModel\": true,\n  \"items\": [\n    {\n      \"id\": \"90a7134d-9a38-4c25-88d3-a495209873eb\",\n      \"chartType\": \"Area\",\n \"chartHeight\": 4,\n      \"metrics\": [\n        {\n          \"id\": \"preview/requests/count\",\n          \"metricAggregation\": \"Sum\",\n          \"color\": \"msportalfx-bgcolor-d0\"\n        }\n],\n      \"priorPeriod\": false,\n      \"clickAction\": {\n        \"defaultBlade\": \"SearchBlade\"\n      },\n      \"horizontalBars\": true,\n      \"showOther\": true,\n      \"aggregation\": \"Sum\",\n \"percentage\": false,\n      \"palette\": \"fail\",\n      \"yAxisOption\": 0,\n      \"title\": \"\"\n    },\n    {\n      \"id\": \"0c289098-88e8-4010-b212-546815cddf70\",\n      \"chartType\": \"Area\",\n      \"chartHeight\": 2,\n      \"metrics\": [\n        {\n          \"id\": \"preview/requests/duration\",\n          \"metricAggregation\": \"Avg\",\n          \"color\": \"msportalfx-bgcolor-j1\"\n        }\n      ],\n      \"priorPeriod\": false,\n      \"clickAction\": {\n        \"defaultBlade\": \"SearchBlade\"\n      },\n      \"horizontalBars\": true,\n \"showOther\": true,\n      \"aggregation\": \"Avg\",\n      \"percentage\": false,\n      \"palette\": \"greenHues\",\n      \"yAxisOption\": 0,\n      \"title\": \"\"\n    },\n    {\n      \"id\": \"cbdaab6f-a808-4f71-aca5-b3976cbb7345\",\n      \"chartType\": \"Bar\",\n      \"chartHeight\": 4,\n      \"metrics\": [\n        {\n          \"id\": \"preview/requests/duration\",\n \"metricAggregation\": \"Avg\",\n          \"color\": \"msportalfx-bgcolor-d0\"\n        }\n      ],\n      \"priorPeriod\": false,\n      \"clickAction\": {\n        \"defaultBlade\": \"SearchBlade\"\n },\n      \"horizontalBars\": true,\n      \"showOther\": true,\n      \"aggregation\": \"Avg\",\n      \"percentage\": false,\n      \"palette\": \"magentaHues\",\n      \"yAxisOption\": 0,\n      \"title\": \"\"\n    },\n    {\n      \"id\": \"1d5a6a3a-9fa1-4099-9cf9-05eff72d1b02\",\n      \"grouping\": {\n        \"kind\": \"ByDimension\",\n        \"dimension\": \"context.application.version\"\n      },\n \"chartType\": \"Grid\",\n      \"chartHeight\": 1,\n      \"metrics\": [\n        {\n          \"id\": \"basicException.count\",\n          \"metricAggregation\": \"Sum\",\n          \"color\": \"msportalfx-bgcolor-g0\"\n        },\n        {\n          \"id\": \"requestFailed.count\",\n          \"metricAggregation\": \"Sum\",\n          \"color\": \"msportalfx-bgcolor-f0s2\"\n        }\n      ],\n \"priorPeriod\": true,\n      \"clickAction\": {\n        \"defaultBlade\": \"SearchBlade\"\n      },\n      \"horizontalBars\": true,\n      \"showOther\": true,\n      \"percentage\": false,\n \"palette\": \"blueHues\",\n      \"yAxisOption\": 0,\n      \"title\": \"\"\n    }\n  ],\n  \"currentFilter\": {\n    \"eventTypes\": [\n      1,\n      2\n    ],\n    \"typeFacets\": {},\n \"isPermissive\": false\n  },\n  \"timeContext\": {\n    \"durationMs\": 75600000,\n    \"endTime\": \"2018-01-31T20:30:00.000Z\",\n    \"createdTime\": \"2018-01-31T23:54:26.280Z\",\n    \"isInitialTime\": false,\n    \"grain\": 1,\n    \"useDashboardTimeRange\": false\n  },\n  \"jsonUri\": \"Favorite_BlankChart\",\n  \"timeSource\": 0\n}\"}"),
			FavoriteID:              to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
			IsGeneratedFromTemplate: to.Ptr(false),
			Name:                    to.Ptr("Blah Blah Blah"),
			SourceType:              to.Ptr(""),
			Tags: []*string{
				to.Ptr("TagSample01"),
				to.Ptr("TagSample02")},
			TimeModified: to.Ptr("2018-02-02T23:18:32.1850959Z"),
			Version:      to.Ptr("ME"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentFavorite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentFavorite)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteAdd.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavorites_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewFavoritesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"my-resource-group",
		"my-ai-component",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		armapplicationinsights.ComponentFavorite{
			Config:                  to.Ptr("{\"MEDataModelRawJSON\":\"{\\\"version\\\": \\\"1.4.1\\\",\\\"isCustomDataModel\\\": true,\\\"items\\\": [{\\\"id\\\": \\\"90a7134d-9a38-4c25-88d3-a495209873eb\\\",\\\"chartType\\\": \\\"Area\\\",\\\"chartHeight\\\": 4,\\\"metrics\\\": [{\\\"id\\\": \\\"preview/requests/count\\\",\\\"metricAggregation\\\": \\\"Sum\\\",\\\"color\\\": \\\"msportalfx-bgcolor-d0\\\"}],\\\"priorPeriod\\\": false,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"aggregation\\\": \\\"Sum\\\",\\\"percentage\\\": false,\\\"palette\\\": \\\"fail\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"},{\\\"id\\\": \\\"0c289098-88e8-4010-b212-546815cddf70\\\",\\\"chartType\\\": \\\"Area\\\",\\\"chartHeight\\\": 2,\\\"metrics\\\": [{\\\"id\\\": \\\"preview/requests/duration\\\",\\\"metricAggregation\\\": \\\"Avg\\\",\\\"color\\\": \\\"msportalfx-bgcolor-j1\\\"}],\\\"priorPeriod\\\": false,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"aggregation\\\": \\\"Avg\\\",\\\"percentage\\\": false,\\\"palette\\\": \\\"greenHues\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"},{\\\"id\\\": \\\"cbdaab6f-a808-4f71-aca5-b3976cbb7345\\\",\\\"chartType\\\": \\\"Bar\\\",\\\"chartHeight\\\": 4,\\\"metrics\\\": [{\\\"id\\\": \\\"preview/requests/duration\\\",\\\"metricAggregation\\\": \\\"Avg\\\",\\\"color\\\": \\\"msportalfx-bgcolor-d0\\\"}],\\\"priorPeriod\\\": false,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"aggregation\\\": \\\"Avg\\\",\\\"percentage\\\": false,\\\"palette\\\": \\\"magentaHues\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"},{\\\"id\\\": \\\"1d5a6a3a-9fa1-4099-9cf9-05eff72d1b02\\\",\\\"grouping\\\": {\\\"kind\\\": \\\"ByDimension\\\",\\\"dimension\\\": \\\"context.application.version\\\"},\\\"chartType\\\": \\\"Grid\\\",\\\"chartHeight\\\": 1,\\\"metrics\\\": [{\\\"id\\\": \\\"basicException.count\\\",\\\"metricAggregation\\\": \\\"Sum\\\",\\\"color\\\": \\\"msportalfx-bgcolor-g0\\\"},{\\\"id\\\": \\\"requestFailed.count\\\",\\\"metricAggregation\\\": \\\"Sum\\\",\\\"color\\\": \\\"msportalfx-bgcolor-f0s2\\\"}],\\\"priorPeriod\\\": true,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"percentage\\\": false,\\\"palette\\\": \\\"blueHues\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"}],\\\"currentFilter\\\": {\\\"eventTypes\\\": [1,2],\\\"typeFacets\\\": {},\\\"isPermissive\\\": false},\\\"timeContext\\\": {\\\"durationMs\\\": 75600000,\\\"endTime\\\": \\\"2018-01-31T20:30:00.000Z\\\",\\\"createdTime\\\": \\\"2018-01-31T23:54:26.280Z\\\",\\\"isInitialTime\\\": false,\\\"grain\\\": 1,\\\"useDashboardTimeRange\\\": false},\\\"jsonUri\\\": \\\"Favorite_BlankChart\\\",\\\"timeSource\\\": 0}\"}"),
			FavoriteID:              to.Ptr("deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
			IsGeneratedFromTemplate: to.Ptr(false),
			Name:                    to.Ptr("Derek Changed This"),
			Tags: []*string{
				to.Ptr("TagSample01"),
				to.Ptr("TagSample02"),
				to.Ptr("TagSample03")},
			TimeModified: to.Ptr("2018-02-02T18:39:11.6569686Z"),
			Version:      to.Ptr("ME"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentFavorite{
			Config:                  to.Ptr("{\"MEDataModelRawJSON\":\"{\\\"version\\\": \\\"1.4.1\\\",\\\"isCustomDataModel\\\": true,\\\"items\\\": [{\\\"id\\\": \\\"90a7134d-9a38-4c25-88d3-a495209873eb\\\",\\\"chartType\\\": \\\"Area\\\",\\\"chartHeight\\\": 4,\\\"metrics\\\": [{\\\"id\\\": \\\"preview/requests/count\\\",\\\"metricAggregation\\\": \\\"Sum\\\",\\\"color\\\": \\\"msportalfx-bgcolor-d0\\\"}],\\\"priorPeriod\\\": false,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"aggregation\\\": \\\"Sum\\\",\\\"percentage\\\": false,\\\"palette\\\": \\\"fail\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"},{\\\"id\\\": \\\"0c289098-88e8-4010-b212-546815cddf70\\\",\\\"chartType\\\": \\\"Area\\\",\\\"chartHeight\\\": 2,\\\"metrics\\\": [{\\\"id\\\": \\\"preview/requests/duration\\\",\\\"metricAggregation\\\": \\\"Avg\\\",\\\"color\\\": \\\"msportalfx-bgcolor-j1\\\"}],\\\"priorPeriod\\\": false,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"aggregation\\\": \\\"Avg\\\",\\\"percentage\\\": false,\\\"palette\\\": \\\"greenHues\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"},{\\\"id\\\": \\\"cbdaab6f-a808-4f71-aca5-b3976cbb7345\\\",\\\"chartType\\\": \\\"Bar\\\",\\\"chartHeight\\\": 4,\\\"metrics\\\": [{\\\"id\\\": \\\"preview/requests/duration\\\",\\\"metricAggregation\\\": \\\"Avg\\\",\\\"color\\\": \\\"msportalfx-bgcolor-d0\\\"}],\\\"priorPeriod\\\": false,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"aggregation\\\": \\\"Avg\\\",\\\"percentage\\\": false,\\\"palette\\\": \\\"magentaHues\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"},{\\\"id\\\": \\\"1d5a6a3a-9fa1-4099-9cf9-05eff72d1b02\\\",\\\"grouping\\\": {\\\"kind\\\": \\\"ByDimension\\\",\\\"dimension\\\": \\\"context.application.version\\\"},\\\"chartType\\\": \\\"Grid\\\",\\\"chartHeight\\\": 1,\\\"metrics\\\": [{\\\"id\\\": \\\"basicException.count\\\",\\\"metricAggregation\\\": \\\"Sum\\\",\\\"color\\\": \\\"msportalfx-bgcolor-g0\\\"},{\\\"id\\\": \\\"requestFailed.count\\\",\\\"metricAggregation\\\": \\\"Sum\\\",\\\"color\\\": \\\"msportalfx-bgcolor-f0s2\\\"}],\\\"priorPeriod\\\": true,\\\"clickAction\\\": {\\\"defaultBlade\\\": \\\"SearchBlade\\\"},\\\"horizontalBars\\\": true,\\\"showOther\\\": true,\\\"percentage\\\": false,\\\"palette\\\": \\\"blueHues\\\",\\\"yAxisOption\\\": 0,\\\"title\\\": \\\"\\\"}],\\\"currentFilter\\\": {\\\"eventTypes\\\": [1,2],\\\"typeFacets\\\": {},\\\"isPermissive\\\": false},\\\"timeContext\\\": {\\\"durationMs\\\": 75600000,\\\"endTime\\\": \\\"2018-01-31T20:30:00.000Z\\\",\\\"createdTime\\\": \\\"2018-01-31T23:54:26.280Z\\\",\\\"isInitialTime\\\": false,\\\"grain\\\": 1,\\\"useDashboardTimeRange\\\": false},\\\"jsonUri\\\": \\\"Favorite_BlankChart\\\",\\\"timeSource\\\": 0}\"}"),
			FavoriteID:              to.Ptr("deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			FavoriteType:            to.Ptr(armapplicationinsights.FavoriteTypeShared),
			IsGeneratedFromTemplate: to.Ptr(false),
			Name:                    to.Ptr("Derek Changed This"),
			Tags: []*string{
				to.Ptr("TagSample01"),
				to.Ptr("TagSample02"),
				to.Ptr("TagSample03")},
			TimeModified: to.Ptr("2018-02-02T18:39:11.6569686Z"),
			Version:      to.Ptr("ME"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentFavorite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentFavorite)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavorites_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewFavoritesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-ai-component",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/FavoriteDelete.json: %v", err)
	}
}

func TestWebTestLocations_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestLocationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebTestLocationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestLocationsClient("subid", cred, &options)
	pager := client.List("my-resource-group",
		"my-component",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestLocationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WebTestLocationsListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebTestLocationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebTestLocationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestLocationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebTests_ListByResourceGroup(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WebTestListResult{
			Value: []*armapplicationinsights.WebTest{
				{
					Name:     to.Ptr("my-webtest-my-component"),
					Type:     to.Ptr("Microsoft.Insights/webtests"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-component"),
					Location: to.Ptr("southcentralus"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
					},
					Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
					Properties: &armapplicationinsights.WebTestProperties{
						Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
							WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
						},
						Description: to.Ptr(""),
						Enabled:     to.Ptr(false),
						Frequency:   to.Ptr[int32](900),
						WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
						Locations: []*armapplicationinsights.WebTestGeolocation{
							{
								Location: to.Ptr("apac-hk-hkn-azr"),
							}},
						WebTestName:        to.Ptr("my-webtest"),
						RetryEnabled:       to.Ptr(true),
						SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
						Timeout:            to.Ptr[int32](120),
						ProvisioningState:  to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("my-webtest-my-other-component"),
					Type:     to.Ptr("Microsoft.Insights/webtests"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-other-component"),
					Location: to.Ptr("southcentralus"),
					Tags: map[string]*string{
						"Test": to.Ptr("You can delete this synthetic monitor anytime"),
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-other-component": to.Ptr("Resource"),
					},
					Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
					Properties: &armapplicationinsights.WebTestProperties{
						Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
							WebTest: to.Ptr("<WebTest Name=\"342bccf4-722f-496d-b064-123456789abc\" Id=\"00a15cc1-c903-4f97-9af4-123456789abc\" Enabled=\"False\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"347e1924-9899-4c6e-ad78-123456789abc\" Version=\"1.1\" Url=\"http://my-other-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
						},
						Description: to.Ptr(""),
						Enabled:     to.Ptr(false),
						Frequency:   to.Ptr[int32](300),
						WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
						Locations: []*armapplicationinsights.WebTestGeolocation{
							{
								Location: to.Ptr("us-fl-mia-edge"),
							}},
						WebTestName:        to.Ptr("342bccf4-722f-496d-b064-123456789abc"),
						RetryEnabled:       to.Ptr(false),
						SyntheticMonitorID: to.Ptr("my-webtest-my-other-component"),
						Timeout:            to.Ptr[int32](90),
						ProvisioningState:  to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebTestListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebTestListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebTests_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-webtest-01-mywebservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WebTest{
			Name:     to.Ptr("my-webtest-01-mywebservice"),
			Type:     to.Ptr("Microsoft.Insights/webtests"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-test-resources/providers/Microsoft.Insights/webtests/my-webtest-01-mywebservice"),
			Location: to.Ptr("southcentralus"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/subid/resourceGroups/my-test-resources/providers/Microsoft.Insights/components/mytester": to.Ptr("Resource"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-test-resources/providers/Microsoft.Web/sites/mytester":           to.Ptr("Resource"),
			},
			Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
			Properties: &armapplicationinsights.WebTestProperties{
				Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
					WebTest: to.Ptr("<WebTest Name=\"mytest-webtest-01\" Id=\"0317d26b-8672-4370-bd6b-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"30\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"a55ce143-4f1e-a7e6-b69e-123456789abc\" Version=\"1.1\" Url=\"http://mytester.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"30\" ParseDependentRequests=\"False\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
				},
				Description: to.Ptr(""),
				Enabled:     to.Ptr(false),
				Frequency:   to.Ptr[int32](900),
				WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
				Locations: []*armapplicationinsights.WebTestGeolocation{
					{
						Location: to.Ptr("us-fl-mia-edge"),
					},
					{
						Location: to.Ptr("apac-hk-hkn-azr"),
					}},
				WebTestName:        to.Ptr("mytest-webtest-01"),
				RetryEnabled:       to.Ptr(true),
				SyntheticMonitorID: to.Ptr("my-webtest-01-mywebservice"),
				Timeout:            to.Ptr[int32](30),
				ProvisioningState:  to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebTest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebTest)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebTests_CreateOrUpdate(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-webtest-my-component",
		armapplicationinsights.WebTest{
			Location: to.Ptr("South Central US"),
			Kind:     to.Ptr(armapplicationinsights.WebTestKindPing),
			Properties: &armapplicationinsights.WebTestProperties{
				Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
					WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\" ><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
				},
				Description: to.Ptr("Ping web test alert for mytestwebapp"),
				Enabled:     to.Ptr(true),
				Frequency:   to.Ptr[int32](900),
				WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
				Locations: []*armapplicationinsights.WebTestGeolocation{
					{
						Location: to.Ptr("us-fl-mia-edge"),
					}},
				WebTestName:        to.Ptr("my-webtest-my-component"),
				RetryEnabled:       to.Ptr(true),
				SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
				Timeout:            to.Ptr[int32](120),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WebTest{
			Name:     to.Ptr("my-webtest-my-component"),
			Type:     to.Ptr("Microsoft.Insights/webtests"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-component"),
			Location: to.Ptr("southcentralus"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
			},
			Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
			Properties: &armapplicationinsights.WebTestProperties{
				Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
					WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\" ><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
				},
				Description: to.Ptr("Ping web test alert for mytestwebapp"),
				Enabled:     to.Ptr(true),
				Frequency:   to.Ptr[int32](900),
				WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
				Locations: []*armapplicationinsights.WebTestGeolocation{
					{
						Location: to.Ptr("us-fl-mia-edge"),
					}},
				WebTestName:        to.Ptr("my-webtest-my-component"),
				RetryEnabled:       to.Ptr(true),
				SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
				Timeout:            to.Ptr[int32](120),
				ProvisioningState:  to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebTest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebTest)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestUpdate"},
	})
	client = armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-webtest-my-component",
		armapplicationinsights.WebTest{
			Location: to.Ptr("South Central US"),
			Kind:     to.Ptr(armapplicationinsights.WebTestKindPing),
			Properties: &armapplicationinsights.WebTestProperties{
				Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
					WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"30\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\" ><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"30\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
				},
				Frequency:   to.Ptr[int32](600),
				WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
				Locations: []*armapplicationinsights.WebTestGeolocation{
					{
						Location: to.Ptr("us-fl-mia-edge"),
					},
					{
						Location: to.Ptr("apac-hk-hkn-azr"),
					}},
				WebTestName:        to.Ptr("my-webtest-my-component"),
				SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
				Timeout:            to.Ptr[int32](30),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WebTest{
			Name:     to.Ptr("my-webtest-my-component"),
			Type:     to.Ptr("Microsoft.Insights/webtests"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-component"),
			Location: to.Ptr("southcentralus"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
			},
			Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
			Properties: &armapplicationinsights.WebTestProperties{
				Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
					WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"30\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\" ><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"30\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
				},
				Description: to.Ptr("Ping web test alert for mytestwebapp"),
				Enabled:     to.Ptr(true),
				Frequency:   to.Ptr[int32](600),
				WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
				Locations: []*armapplicationinsights.WebTestGeolocation{
					{
						Location: to.Ptr("us-fl-mia-edge"),
					},
					{
						Location: to.Ptr("apac-hk-hkn-azr"),
					}},
				WebTestName:        to.Ptr("my-webtest-my-component"),
				RetryEnabled:       to.Ptr(true),
				SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
				Timeout:            to.Ptr[int32](30),
				ProvisioningState:  to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebTest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebTest)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebTests_UpdateTags(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestUpdateTagsOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestUpdateTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"my-resource-group",
		"my-webtest-my-component",
		armapplicationinsights.TagsResource{
			Tags: map[string]*string{
				"Color":          to.Ptr("AzureBlue"),
				"CustomField-01": to.Ptr("This is a random value"),
				"SystemType":     to.Ptr("A08"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestUpdateTagsOnly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WebTest{
			Name:     to.Ptr("my-webtest-my-component"),
			Type:     to.Ptr("Microsoft.Insights/webtests"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-component"),
			Location: to.Ptr("southcentralus"),
			Tags: map[string]*string{
				"Color":          to.Ptr("AzureBlue"),
				"CustomField-01": to.Ptr("This is a random value"),
				"SystemType":     to.Ptr("A08"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
				"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
			},
			Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
			Properties: &armapplicationinsights.WebTestProperties{
				Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
					WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"30\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\" ><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"30\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
				},
				Description: to.Ptr("Ping web test alert for mytestwebapp"),
				Enabled:     to.Ptr(true),
				Frequency:   to.Ptr[int32](600),
				WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
				Locations: []*armapplicationinsights.WebTestGeolocation{
					{
						Location: to.Ptr("us-fl-mia-edge"),
					},
					{
						Location: to.Ptr("apac-hk-hkn-azr"),
					}},
				WebTestName:        to.Ptr("my-webtest-my-component"),
				RetryEnabled:       to.Ptr(true),
				SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
				Timeout:            to.Ptr[int32](30),
				ProvisioningState:  to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebTest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebTest)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestUpdateTagsOnly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebTests_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-webtest-01-mywebservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestDelete.json: %v", err)
	}
}

func TestWebTests_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WebTestListResult{
			Value: []*armapplicationinsights.WebTest{
				{
					Name:     to.Ptr("my-webtest-my-component"),
					Type:     to.Ptr("Microsoft.Insights/webtests"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-component"),
					Location: to.Ptr("southcentralus"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
					},
					Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
					Properties: &armapplicationinsights.WebTestProperties{
						Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
							WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
						},
						Description:        to.Ptr(""),
						Enabled:            to.Ptr(false),
						Frequency:          to.Ptr[int32](900),
						WebTestKind:        to.Ptr(armapplicationinsights.WebTestKindPing),
						Locations:          []*armapplicationinsights.WebTestGeolocation{},
						WebTestName:        to.Ptr("my-webtest"),
						RetryEnabled:       to.Ptr(true),
						SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
						Timeout:            to.Ptr[int32](120),
						ProvisioningState:  to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("my-webtest-my-other-component"),
					Type:     to.Ptr("Microsoft.Insights/webtests"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-other-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-other-component"),
					Location: to.Ptr("southcentralus"),
					Tags: map[string]*string{
						"Test": to.Ptr("You can delete this synthetic monitor anytime"),
						"hidden-link:/subscriptions/subid/resourceGroups/my-other-resource-group/providers/Microsoft.Insights/components/my-other-component": to.Ptr("Resource"),
					},
					Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
					Properties: &armapplicationinsights.WebTestProperties{
						Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
							WebTest: to.Ptr("<WebTest Name=\"342bccf4-722f-496d-b064-123456789abc\" Id=\"00a15cc1-c903-4f97-9af4-123456789abc\" Enabled=\"False\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"347e1924-9899-4c6e-ad78-123456789abc\" Version=\"1.1\" Url=\"http://my-other-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
						},
						Description:        to.Ptr(""),
						Enabled:            to.Ptr(false),
						Frequency:          to.Ptr[int32](900),
						WebTestKind:        to.Ptr(armapplicationinsights.WebTestKindPing),
						Locations:          []*armapplicationinsights.WebTestGeolocation{},
						WebTestName:        to.Ptr("342bccf4-722f-496d-b064-123456789abc"),
						RetryEnabled:       to.Ptr(false),
						SyntheticMonitorID: to.Ptr("my-webtest-my-other-component"),
						Timeout:            to.Ptr[int32](120),
						ProvisioningState:  to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebTestListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebTestListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebTests_ListByComponent(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestListByComponent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"webTestListByComponent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWebTestsClient("subid", cred, &options)
	pager := client.ListByComponent("my-component",
		"my-resource-group",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestListByComponent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WebTestListResult{
			Value: []*armapplicationinsights.WebTest{
				{
					Name:     to.Ptr("my-webtest-my-component"),
					Type:     to.Ptr("Microsoft.Insights/webtests"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/webtests/my-webtest-my-component"),
					Location: to.Ptr("southcentralus"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component": to.Ptr("Resource"),
						"hidden-link:/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Web/sites/mytestwebapp":           to.Ptr("Resource"),
					},
					Kind: to.Ptr(armapplicationinsights.WebTestKindPing),
					Properties: &armapplicationinsights.WebTestProperties{
						Configuration: &armapplicationinsights.WebTestPropertiesConfiguration{
							WebTest: to.Ptr("<WebTest Name=\"my-webtest\" Id=\"678ddf96-1ab8-44c8-9274-123456789abc\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"120\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\"><Items><Request Method=\"GET\" Guid=\"a4162485-9114-fcfc-e086-123456789abc\" Version=\"1.1\" Url=\"http://my-component.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"120\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>"),
						},
						Description: to.Ptr(""),
						Enabled:     to.Ptr(false),
						Frequency:   to.Ptr[int32](900),
						WebTestKind: to.Ptr(armapplicationinsights.WebTestKindPing),
						Locations: []*armapplicationinsights.WebTestGeolocation{
							{
								Location: to.Ptr("apac-hk-hkn-azr"),
							}},
						WebTestName:        to.Ptr("my-webtest"),
						RetryEnabled:       to.Ptr(true),
						SyntheticMonitorID: to.Ptr("my-webtest-my-component"),
						Timeout:            to.Ptr[int32](120),
						ProvisioningState:  to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebTestListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebTestListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/WebTestListByComponent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnalyticsItems_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnalyticsItemList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnalyticsItemsClient("subid", cred, &options)
	res, err := client.List(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.ItemScopePathAnalyticsItems,
		&armapplicationinsights.AnalyticsItemsClientListOptions{Scope: nil,
			Type:           nil,
			IncludeContent: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapplicationinsights.ComponentAnalyticsItem{
			{
				Content:      to.Ptr("//Top 10 countries by traffic in the past 24 hours\nrequests \n | where  timestamp > ago(24h) \n | summarize count() by client_CountryOrRegion\n | top 10 by count_ \n | render piechart"),
				ID:           to.Ptr("b753348d-333a-4678-a684-c0e9090713b7"),
				Name:         to.Ptr("1"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeUser),
				TimeModified: to.Ptr("2017-06-29T10:27:03Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			},
			{
				Content:      to.Ptr("//Top 10 countries by traffic in the past 24 hours\nrequests \n | where  timestamp > ago(24h) \n | summarize count() by client_CountryOrRegion\n | top 10 by count_ \n | render piechart"),
				ID:           to.Ptr("0d2f1b19-04b2-4c93-bc6f-2466b23c5284"),
				Name:         to.Ptr("4"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeUser),
				TimeModified: to.Ptr("2017-06-29T10:27:13Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			},
			{
				Content:      to.Ptr("//Top 10 countries by traffic in the past 24 hours\nrequests \n | where  timestamp > ago(24h) \n | summarize count() by client_CountryOrRegion\n | top 10 by count_ \n | render piechart"),
				ID:           to.Ptr("3d17bebb-0b20-4b58-9bbd-22aeed70be51"),
				Name:         to.Ptr("2"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeUser),
				TimeModified: to.Ptr("2018-02-10T23:21:05.9952874Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			},
			{
				Content:      to.Ptr("//Top 10 countries by traffic in the past 24 hours\nrequests \n | where  timestamp > ago(24h) \n | summarize count() by client_CountryOrRegion\n | top 10 by count_ \n | render piechart"),
				ID:           to.Ptr("2be491c6-10d9-4cf6-9490-2a7ce7270c54"),
				Name:         to.Ptr("5"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeUser),
				TimeModified: to.Ptr("2017-06-29T10:27:17Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			},
			{
				Content:      to.Ptr("//Top 10 countries by traffic in the past 24 hours\nrequests \n | where  timestamp > ago(24h) \n | summarize count() by client_CountryOrRegion\n | top 10 by count_ \n | render piechart"),
				ID:           to.Ptr("d8f83601-4a40-4dc1-8516-0a28dcb74420"),
				Name:         to.Ptr("8"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeUser),
				TimeCreated:  to.Ptr("2018-02-10T23:20:19.0174631Z"),
				TimeModified: to.Ptr("2018-02-10T23:20:19.0174631Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			},
			{
				Content:      to.Ptr("let newExceptionsTimeRange = 7d;\nlet timeRangeToCheckBefore = 7d;\nexceptions\n| where timestamp < ago(timeRangeToCheckBefore)\n| summarize count() by problemId\n| join kind= rightanti (\nexceptions\n| where timestamp >= ago(newExceptionsTimeRange)\n| extend stack = tostring(details[0].rawStack)\n| summarize count(), dcount(user_AuthenticatedId), min(timestamp), max(timestamp), any(stack) by problemId  \n) on problemId \n| order by  count_ desc\n"),
				ID:           to.Ptr("fd3afe4d-9139-4c76-9b47-81d0fada977b"),
				Name:         to.Ptr("Exceptions - New in the last 7 days"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeUser),
				TimeCreated:  to.Ptr("2018-02-11T22:05:57.6019354Z"),
				TimeModified: to.Ptr("2018-02-12T11:01:15.5687326Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			},
			{
				Content:      to.Ptr("let newExceptionsTimeRange = 1d;\nlet timeRangeToCheckBefore = 7d;\nexceptions\n| where timestamp < ago(timeRangeToCheckBefore)\n| summarize count() by problemId\n| join kind= rightanti (\nexceptions\n| where timestamp >= ago(newExceptionsTimeRange)\n| extend stack = tostring(details[0].rawStack)\n| summarize count(), dcount(user_AuthenticatedId), min(timestamp), max(timestamp), any(stack) by problemId  \n) on problemId \n| order by  count_ desc\n"),
				ID:           to.Ptr("3466c160-4a10-4df8-afdf-0007f3f6dee5"),
				Name:         to.Ptr("Exceptions - New in the last 24 hours"),
				Scope:        to.Ptr(armapplicationinsights.ItemScopeShared),
				TimeCreated:  to.Ptr("2018-02-12T11:44:39.2980634Z"),
				TimeModified: to.Ptr("2018-02-14T13:13:19.3381394Z"),
				Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
				Version:      to.Ptr("1.0"),
			}}
		if !reflect.DeepEqual(exampleRes, res.ComponentAnalyticsItemArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAnalyticsItemArray)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnalyticsItems_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnalyticsItemGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnalyticsItemsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.ItemScopePathAnalyticsItems,
		&armapplicationinsights.AnalyticsItemsClientGetOptions{ID: to.Ptr("3466c160-4a10-4df8-afdf-0007f3f6dee5"),
			Name: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentAnalyticsItem{
			Content:      to.Ptr("let newExceptionsTimeRange = 1d;\nlet timeRangeToCheckBefore = 7d;\nexceptions\n| where timestamp < ago(timeRangeToCheckBefore)\n| summarize count() by problemId\n| join kind= rightanti (\nexceptions\n| where timestamp >= ago(newExceptionsTimeRange)\n| extend stack = tostring(details[0].rawStack)\n| summarize count(), dcount(user_AuthenticatedId), min(timestamp), max(timestamp), any(stack) by problemId  \n) on problemId \n| order by  count_ desc\n"),
			ID:           to.Ptr("3466c160-4a10-4df8-afdf-0007f3f6dee5"),
			Name:         to.Ptr("Exceptions - New in the last 24 hours"),
			Scope:        to.Ptr(armapplicationinsights.ItemScopeShared),
			TimeCreated:  to.Ptr("2018-02-12T11:44:39.2980634Z"),
			TimeModified: to.Ptr("2018-02-14T13:13:19.3381394Z"),
			Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
			Version:      to.Ptr("1.0"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentAnalyticsItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAnalyticsItem)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnalyticsItems_Put(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnalyticsItemPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnalyticsItemsClient("subid", cred, &options)
	res, err := client.Put(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.ItemScopePathAnalyticsItems,
		armapplicationinsights.ComponentAnalyticsItem{
			Content: to.Ptr("let newExceptionsTimeRange = 1d;\nlet timeRangeToCheckBefore = 7d;\nexceptions\n| where timestamp < ago(timeRangeToCheckBefore)\n| summarize count() by problemId\n| join kind= rightanti (\nexceptions\n| where timestamp >= ago(newExceptionsTimeRange)\n| extend stack = tostring(details[0].rawStack)\n| summarize count(), dcount(user_AuthenticatedId), min(timestamp), max(timestamp), any(stack) by problemId  \n) on problemId \n| order by  count_ desc\n"),
			Name:    to.Ptr("Exceptions - New in the last 24 hours"),
			Scope:   to.Ptr(armapplicationinsights.ItemScopeShared),
			Type:    to.Ptr(armapplicationinsights.ItemTypeQuery),
		},
		&armapplicationinsights.AnalyticsItemsClientPutOptions{OverrideItem: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentAnalyticsItem{
			Content:      to.Ptr("let newExceptionsTimeRange = 1d;\nlet timeRangeToCheckBefore = 7d;\nexceptions\n| where timestamp < ago(timeRangeToCheckBefore)\n| summarize count() by problemId\n| join kind= rightanti (\nexceptions\n| where timestamp >= ago(newExceptionsTimeRange)\n| extend stack = tostring(details[0].rawStack)\n| summarize count(), dcount(user_AuthenticatedId), min(timestamp), max(timestamp), any(stack) by problemId  \n) on problemId \n| order by  count_ desc\n"),
			ID:           to.Ptr("3466c160-4a10-4df8-afdf-0007f3f6dee5"),
			Name:         to.Ptr("Exceptions - New in the last 24 hours"),
			Scope:        to.Ptr(armapplicationinsights.ItemScopeShared),
			TimeCreated:  to.Ptr("2018-02-12T11:44:39.2980634Z"),
			TimeModified: to.Ptr("2018-02-14T13:13:19.3381394Z"),
			Type:         to.Ptr(armapplicationinsights.ItemTypeQuery),
			Version:      to.Ptr("1.0"),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentAnalyticsItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentAnalyticsItem)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnalyticsItems_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AnalyticsItemDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewAnalyticsItemsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.ItemScopePathAnalyticsItems,
		&armapplicationinsights.AnalyticsItemsClientDeleteOptions{ID: to.Ptr("3466c160-4a10-4df8-afdf-0007f3f6dee5"),
			Name: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2015-05-01/examples/AnalyticsItemDelete.json: %v", err)
	}
}

func TestWorkbookTemplates_ListByResourceGroup(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplatesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookTemplatesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbookTemplatesClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplatesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkbookTemplatesListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkbookTemplatesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkbookTemplatesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplatesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbookTemplates_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookTemplateGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbookTemplatesClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-resource-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkbookTemplate{
			Name:     to.Ptr("my-resource-name"),
			Type:     to.Ptr("microsoft.insights/workbooktemplate"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/my-resource-group/providers/microsoft.insights/workbooktemplates/my-resource-name"),
			Location: to.Ptr("westus"),
			Properties: &armapplicationinsights.WorkbookTemplateProperties{
				Author: to.Ptr("Contoso"),
				Galleries: []*armapplicationinsights.WorkbookTemplateGallery{
					{
						Name:         to.Ptr("Simple Template"),
						Type:         to.Ptr("tsg"),
						Category:     to.Ptr("Failures"),
						Order:        to.Ptr[int32](100),
						ResourceType: to.Ptr("microsoft.insights/components"),
					}},
				Priority: to.Ptr[int32](1),
				TemplateData: map[string]interface{}{
					"$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json",
					"items": []interface{}{
						map[string]interface{}{
							"name": "text - 2",
							"type": float64(1),
							"content": map[string]interface{}{
								"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
							},
						},
						map[string]interface{}{
							"name": "query - 2",
							"type": float64(3),
							"content": map[string]interface{}{
								"exportToExcelOptions": "visible",
								"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
								"queryType":            float64(0),
								"resourceType":         "microsoft.operationalinsights/workspaces",
								"size":                 float64(1),
								"version":              "KqlItem/1.0",
							},
						},
					},
					"styleSettings": map[string]interface{}{},
					"version":       "Notebook/1.0",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkbookTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkbookTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbookTemplates_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookTemplateDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbookTemplatesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-template-resource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateDelete.json: %v", err)
	}
}

func TestWorkbookTemplates_CreateOrUpdate(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookTemplateAdd"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbookTemplatesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"testtemplate2",
		armapplicationinsights.WorkbookTemplate{
			Location: to.Ptr("west us"),
			Properties: &armapplicationinsights.WorkbookTemplateProperties{
				Author: to.Ptr("Contoso"),
				Galleries: []*armapplicationinsights.WorkbookTemplateGallery{
					{
						Name:         to.Ptr("Simple Template"),
						Type:         to.Ptr("tsg"),
						Category:     to.Ptr("Failures"),
						Order:        to.Ptr[int32](100),
						ResourceType: to.Ptr("microsoft.insights/components"),
					}},
				Priority: to.Ptr[int32](1),
				TemplateData: map[string]interface{}{
					"$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json",
					"items": []interface{}{
						map[string]interface{}{
							"name": "text - 2",
							"type": float64(1),
							"content": map[string]interface{}{
								"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
							},
						},
						map[string]interface{}{
							"name": "query - 2",
							"type": float64(3),
							"content": map[string]interface{}{
								"exportToExcelOptions": "visible",
								"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
								"queryType":            float64(0),
								"resourceType":         "microsoft.operationalinsights/workspaces",
								"size":                 float64(1),
								"version":              "KqlItem/1.0",
							},
						},
					},
					"styleSettings": map[string]interface{}{},
					"version":       "Notebook/1.0",
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateAdd.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkbookTemplate{
			Name:     to.Ptr("testtemplate2"),
			Type:     to.Ptr("microsoft.insights/workbooktemplates"),
			ID:       to.Ptr("/subscriptions/50359d91-7b9d-4823-85af-eb298a61ba95/resourceGroups/testrg/providers/microsoft.insights/workbooktemplates/testtemplate2"),
			Location: to.Ptr("westeurope"),
			Properties: &armapplicationinsights.WorkbookTemplateProperties{
				Author: to.Ptr("Contoso"),
				Galleries: []*armapplicationinsights.WorkbookTemplateGallery{
					{
						Name:         to.Ptr("Simple Template"),
						Type:         to.Ptr("tsg"),
						Category:     to.Ptr("Failures"),
						Order:        to.Ptr[int32](100),
						ResourceType: to.Ptr("microsoft.insights/components"),
					}},
				Priority: to.Ptr[int32](1),
				TemplateData: map[string]interface{}{
					"$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json",
					"items": []interface{}{
						map[string]interface{}{
							"name": "text - 2",
							"type": float64(1),
							"content": map[string]interface{}{
								"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
							},
						},
						map[string]interface{}{
							"name": "query - 2",
							"type": float64(3),
							"content": map[string]interface{}{
								"exportToExcelOptions": "visible",
								"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
								"queryType":            float64(0),
								"resourceType":         "microsoft.operationalinsights/workspaces",
								"size":                 float64(1),
								"version":              "KqlItem/1.0",
							},
						},
					},
					"styleSettings": map[string]interface{}{},
					"version":       "Notebook/1.0",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkbookTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkbookTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateAdd.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbookTemplates_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookTemplateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbookTemplatesClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err := client.Update(ctx,
		"my-resource-group",
		"my-template-resource",
		&armapplicationinsights.WorkbookTemplatesClientUpdateOptions{WorkbookTemplateUpdateParameters: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.WorkbookTemplate{
			Name:     to.Ptr("testtemplate2"),
			Type:     to.Ptr("microsoft.insights/workbooktemplates"),
			ID:       to.Ptr("/subscriptions/50359d91-7b9d-4823-85af-eb298a61ba95/resourceGroups/testrg/providers/microsoft.insights/workbooktemplates/testtemplate2"),
			Location: to.Ptr("westeurope"),
			Properties: &armapplicationinsights.WorkbookTemplateProperties{
				Author: to.Ptr("Contoso"),
				Galleries: []*armapplicationinsights.WorkbookTemplateGallery{
					{
						Name:         to.Ptr("Simple Template"),
						Type:         to.Ptr("tsg"),
						Category:     to.Ptr("Failures"),
						Order:        to.Ptr[int32](100),
						ResourceType: to.Ptr("microsoft.insights/components"),
					}},
				Priority: to.Ptr[int32](1),
				TemplateData: map[string]interface{}{
					"$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json",
					"items": []interface{}{
						map[string]interface{}{
							"name": "text - 2",
							"type": float64(1),
							"content": map[string]interface{}{
								"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
							},
						},
						map[string]interface{}{
							"name": "query - 2",
							"type": float64(3),
							"content": map[string]interface{}{
								"exportToExcelOptions": "visible",
								"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
								"queryType":            float64(0),
								"resourceType":         "microsoft.operationalinsights/workspaces",
								"size":                 float64(1),
								"version":              "KqlItem/1.0",
							},
						},
					},
					"styleSettings": map[string]interface{}{},
					"version":       "Notebook/1.0",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkbookTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkbookTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-11-20/examples/WorkbookTemplateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMyWorkbooks_ListByResourceGroup(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewMyWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.MyWorkbooksClientListByResourceGroupOptions{Tags: []string{},
			SourceID:        nil,
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.MyWorkbooksListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MyWorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MyWorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksList2"},
	})
	client = armapplicationinsights.NewMyWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager = client.ListByResourceGroup("my-resource-group",
		armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.MyWorkbooksClientListByResourceGroupOptions{Tags: []string{},
			SourceID:        nil,
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList2.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.MyWorkbooksListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MyWorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MyWorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMyWorkbooks_ListBySubscription(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewMyWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager := client.ListBySubscription(armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.MyWorkbooksClientListBySubscriptionOptions{Tags: []string{},
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.MyWorkbooksListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MyWorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MyWorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksList2"},
	})
	client = armapplicationinsights.NewMyWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager = client.ListBySubscription(armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.MyWorkbooksClientListBySubscriptionOptions{Tags: []string{},
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList2.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.MyWorkbooksListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MyWorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MyWorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMyWorkbooks_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewMyWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.MyWorkbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Type:     to.Ptr("Microsoft.Insights/myworkbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/my-resource-group/providers/Microsoft.Insights/myworkbooks/deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"0": to.Ptr("TagSample01"),
				"1": to.Ptr("TagSample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindUser),
			Properties: &armapplicationinsights.MyWorkbookProperties{
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("My New Workbook"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				SourceID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/MyGroup/providers/Microsoft.Web/sites/MyTestApp-CodeLens"),
				UserID:         to.Ptr("userId"),
				Version:        to.Ptr("ME"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MyWorkbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MyWorkbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMyWorkbooks_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewMyWorkbooksClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookDelete.json: %v", err)
	}
}

func TestMyWorkbooks_CreateOrUpdate(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookAdd"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewMyWorkbooksClient("00000000-0000-0000-0000-00000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"deadb33f-8bee-4d3b-a059-9be8dac93960",
		armapplicationinsights.MyWorkbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			ID:       to.Ptr("c0deea5e-3344-40f2-96f8-6f8e1c3b5722"),
			Location: to.Ptr("west us"),
			Tags: map[string]*string{
				"0": to.Ptr("TagSample01"),
				"1": to.Ptr("TagSample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindUser),
			Properties: &armapplicationinsights.MyWorkbookProperties{
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("Blah Blah Blah"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				SourceID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/MyGroup/providers/Microsoft.Web/sites/MyTestApp-CodeLens"),
			},
		},
		&armapplicationinsights.MyWorkbooksClientCreateOrUpdateOptions{SourceID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookAdd.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.MyWorkbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Type:     to.Ptr("Microsoft.Insights/myworkbooks"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/my-resource-group/providers/Microsoft.Insights/myworkbooks/deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"0": to.Ptr("TagSample01"),
				"1": to.Ptr("TagSample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindUser),
			Properties: &armapplicationinsights.MyWorkbookProperties{
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("Blah Blah Blah"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				SourceID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/MyGroup/providers/Microsoft.Web/sites/MyTestApp-CodeLens"),
				Version:        to.Ptr("ME"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MyWorkbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MyWorkbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookAdd.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMyWorkbooks_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewMyWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	_, err := client.Update(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		armapplicationinsights.MyWorkbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Location: to.Ptr("west us"),
			Tags: map[string]*string{
				"0": to.Ptr("TagSample01"),
				"1": to.Ptr("TagSample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindUser),
			Properties: &armapplicationinsights.MyWorkbookProperties{
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("Blah Blah Blah"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				SourceID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/MyGroup/providers/Microsoft.Web/sites/MyTestApp-CodeLens"),
				Version:        to.Ptr("ME"),
			},
		},
		&armapplicationinsights.MyWorkbooksClientUpdateOptions{SourceID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookUpdate.json: %v", err)
	}
}

func TestWorkbooks_ListBySubscription(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksList2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksList2"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager := client.ListBySubscription(armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.WorkbooksClientListBySubscriptionOptions{Tags: []string{},
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksList2.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkbooksListResult{
			Value: []*armapplicationinsights.Workbook{},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksList2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksListSub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksListSub"},
	})
	client = armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager = client.ListBySubscription(armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.WorkbooksClientListBySubscriptionOptions{Tags: []string{},
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksListSub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkbooksListResult{
			Value: []*armapplicationinsights.Workbook{
				{
					Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:    to.Ptr("Sample workbook"),
						Category:       to.Ptr("workbook"),
						DisplayName:    to.Ptr("My Workbook 1"),
						Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SerializedData: to.Ptr("{\"verion\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
						SourceID:       to.Ptr("Azure Monitor"),
						TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T22:00:26.4229554Z"); return t }()),
						UserID:         to.Ptr("userId"),
						Version:        to.Ptr("Notebook/1.0"),
					},
				},
				{
					Name:     to.Ptr("c0deea5e-3344-40f2-96f8-6f8e1c3b5722"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/c0deea5e-3344-40f2-96f8-6f8e1c3b5722"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"TagSample01": to.Ptr("sample01"),
						"TagSample02": to.Ptr("sample02"),
					},
					Kind: to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:    to.Ptr("Sample workbook"),
						Category:       to.Ptr("workbook"),
						DisplayName:    to.Ptr("My Workbook 2"),
						Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
						SourceID:       to.Ptr("Azure Monitor"),
						TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T22:00:26.4229554Z"); return t }()),
						UserID:         to.Ptr("userId"),
						Version:        to.Ptr("Notebook/1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksListSub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksManagedList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksManagedList"},
	})
	client = armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac119r124af", cred, &options)
	pager = client.ListBySubscription(armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.WorkbooksClientListBySubscriptionOptions{Tags: []string{},
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksManagedList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkbooksListResult{
			Value: []*armapplicationinsights.Workbook{
				{
					Name:     to.Ptr("deadb33f-8bee-4ddq-a059-9be8dac93960"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Identity: &armapplicationinsights.WorkbookResourceIdentity{
						Type: to.Ptr(armapplicationinsights.ManagedServiceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armapplicationinsights.UserAssignedIdentity{
							"/subscriptions/6b643656-33eb-422f-aee8-3ac119r124af/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
								ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270433"),
								PrincipalID: to.Ptr("075a0ca6-4326-4434-9abf-c9b1b79f9x19"),
							},
						},
					},
					Kind: to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:    to.Ptr("Sample workbook"),
						Category:       to.Ptr("workbook"),
						DisplayName:    to.Ptr("My Workbook 1"),
						Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SerializedData: to.Ptr("{\"verion\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
						SourceID:       to.Ptr("Azure Monitor"),
						StorageURI:     to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac119r124af/resourceGroups/MyGroup/providers/Microsoft.Storage/storageAccounts/testStorage/blobServices/default/containers/testContainer"),
						TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T22:00:26.4229554Z"); return t }()),
						UserID:         to.Ptr("userId"),
						Version:        to.Ptr("Notebook/1.0"),
					},
				},
				{
					Name:     to.Ptr("c0deea5e-3344-40f2-96f8-6f8e1cdd5722"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/c0deea5e-3344-40f2-96f8-6f8e1cdd5722"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"TagSample01": to.Ptr("sample01"),
						"TagSample02": to.Ptr("sample02"),
					},
					Kind: to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:    to.Ptr("Sample workbook"),
						Category:       to.Ptr("workbook"),
						DisplayName:    to.Ptr("My Workbook 2"),
						Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
						SourceID:       to.Ptr("Azure Monitor"),
						StorageURI:     to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac119r124af/resourceGroups/MyGroup/providers/Microsoft.Storage/storageAccounts/testStorage/blobServices/default/containers/testContainer"),
						TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T21:00:26.4229554Z"); return t }()),
						UserID:         to.Ptr("userId"),
						Version:        to.Ptr("Notebook/1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksManagedList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbooks_ListByResourceGroup(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbooksList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		armapplicationinsights.CategoryTypeWorkbook,
		&armapplicationinsights.WorkbooksClientListByResourceGroupOptions{Tags: []string{},
			SourceID:        to.Ptr("/subscriptions/ad2f1a83-caac-4e21-9d2a-9ca3f87105e2/resourceGroups/Default-Web-WestUS/providers/Microsoft.Web/sites/MyTestApp-CodeLens1"),
			CanFetchContent: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkbooksListResult{
			Value: []*armapplicationinsights.Workbook{
				{
					Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:    to.Ptr("Sample workbook"),
						Category:       to.Ptr("workbook"),
						DisplayName:    to.Ptr("My Workbook 1"),
						Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SerializedData: to.Ptr("{\"verion\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
						SourceID:       to.Ptr("Azure Monitor"),
						TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-04T09:07:17.735638Z"); return t }()),
						UserID:         to.Ptr("userId"),
						Version:        to.Ptr("Notebook/1.0"),
					},
				},
				{
					Name:     to.Ptr("c0deea5e-3344-40f2-96f8-6f8e1c3b5722"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/c0deea5e-3344-40f2-96f8-6f8e1c3b5722"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"TagSample01": to.Ptr("sample01"),
						"TagSample02": to.Ptr("sample02"),
					},
					Kind: to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:    to.Ptr("Sample workbook"),
						Category:       to.Ptr("workbook"),
						DisplayName:    to.Ptr("My Workbook 2"),
						Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
						SourceID:       to.Ptr("Azure Monitor"),
						TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-04T09:07:17.735638Z"); return t }()),
						UserID:         to.Ptr("userId"),
						Version:        to.Ptr("Notebook/1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbooksList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbooks_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Workbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Type:     to.Ptr("Microsoft.Insights/workbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/microsoft.insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TagSample01": to.Ptr("sample01"),
				"TagSample02": to.Ptr("sample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("My New Workbook"),
				Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T06:56:31.6301521Z"); return t }()),
				UserID:         to.Ptr("userId"),
				Version:        to.Ptr("Notebook/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookGet1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookGet1"},
	})
	client = armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err = client.Get(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookGet1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Workbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Type:     to.Ptr("Microsoft.Insights/workbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/microsoft.insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TagSample01": to.Ptr("sample01"),
				"TagSample02": to.Ptr("sample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("My New Workbook"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T06:56:31.6301521Z"); return t }()),
				UserID:         to.Ptr("userId"),
				Version:        to.Ptr("Notebook/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookGet1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookManagedGet"},
	})
	client = armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err = client.Get(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Workbook{
			Name:     to.Ptr("deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Type:     to.Ptr("Microsoft.Insights/workbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Location: to.Ptr("westcentralus"),
			Tags: map[string]*string{
				"hidden-title": to.Ptr("azuremon"),
			},
			Etag: to.Ptr("\"0c003cb4-0000-0600-0000-5f5203c60000\""),
			Identity: &armapplicationinsights.WorkbookResourceIdentity{
				Type: to.Ptr(armapplicationinsights.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armapplicationinsights.UserAssignedIdentity{
					"/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270432"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9x19"),
					},
					"/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {
						ClientID:    to.Ptr("47429305-c0d3-40bc-8595-6194sdfdf3dc"),
						PrincipalID: to.Ptr("bf9ebbc8-b92d-4752-8e66-c999d560326e0"),
					},
				},
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("azuremon"),
				Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"testing1\"},\"showPin\":false,\"name\":\"text - 0\"}],\"isLocked\":true,\"fallbackResourceIds\":[\"Azure Monitor\"]}"),
				SourceID:       to.Ptr("azure monitor"),
				StorageURI:     to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/MyGroup/providers/Microsoft.Storage/storageAccounts/testStorage/blobServices/default/containers/testContainer"),
				Tags:           []*string{},
				TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-04T09:07:17.735638Z"); return t }()),
				UserID:         to.Ptr("51d1409c-d725-4550-ac03-98c0bef9ef07"),
				Version:        to.Ptr("Notebook/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbooks_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookDelete.json: %v", err)
	}
}

func TestWorkbooks_CreateOrUpdate(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookAdd"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"deadb33f-8bee-4d3b-a059-9be8dac93960",
		armapplicationinsights.Workbook{
			Location: to.Ptr("west us"),
			Tags: map[string]*string{
				"TagSample01": to.Ptr("sample01"),
				"TagSample02": to.Ptr("sample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("tttt"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
			},
		},
		&armapplicationinsights.WorkbooksClientCreateOrUpdateOptions{SourceID: to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/MyGroup")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookAdd.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Workbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Type:     to.Ptr("Microsoft.Insights/workbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/microsoft.insights/workbooks/deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TagSample01": to.Ptr("sample01"),
				"TagSample02": to.Ptr("sample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("Blah Blah Blah"),
				Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T06:56:31.6301521Z"); return t }()),
				UserID:         to.Ptr("userId"),
				Version:        to.Ptr("Notebook/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookAdd.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookManagedAdd"},
	})
	client = armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		armapplicationinsights.Workbook{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"hidden-title": to.Ptr("tttt"),
			},
			Etag: to.Ptr("\"4a00f78d-0000-0700-0000-5f8f616c1000\""),
			Identity: &armapplicationinsights.WorkbookResourceIdentity{
				Type: to.Ptr(armapplicationinsights.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armapplicationinsights.UserAssignedIdentity{
					"/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
				},
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("tttt"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"test\"},\"name\":\"text - 0\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/MyGroup\"]}"),
				StorageURI:     to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/MyGroup/providers/Microsoft.Storage/storageAccounts/testStorage/blobServices/default/containers/testContainer"),
				Tags:           []*string{},
				Version:        to.Ptr("Notebook/1.0"),
			},
		},
		&armapplicationinsights.WorkbooksClientCreateOrUpdateOptions{SourceID: to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/MyGroup")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedAdd.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Workbook{
			Name:     to.Ptr("deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Type:     to.Ptr("Microsoft.Insights/workbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"hidden-title": to.Ptr("tttt"),
			},
			Etag: to.Ptr("\"4a00f85e-0000-0700-0000-5f8f5dfa0000\""),
			Identity: &armapplicationinsights.WorkbookResourceIdentity{
				Type: to.Ptr(armapplicationinsights.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armapplicationinsights.UserAssignedIdentity{
					"/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270432"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9x19"),
					},
				},
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("tttt"),
				Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/MyGroup/providers/Microsoft.OperationalInsights/workspaces/test-ws\"]}"),
				SourceID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/MyGroup"),
				StorageURI:     to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/MyGroup/providers/Microsoft.Storage/storageAccounts/testStorage/blobServices/default/containers/testContainer"),
				Tags:           []*string{},
				TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T22:00:26.4229554Z"); return t }()),
				UserID:         to.Ptr("70d90f65-8a70-4e42-b8d5-86gv25e0a90f"),
				Version:        to.Ptr("Notebook/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedAdd.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbooks_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookManagedUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	_, err := client.Update(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		&armapplicationinsights.WorkbooksClientUpdateOptions{SourceID: to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/MyGroup"),
			WorkbookUpdateParameters: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookManagedUpdate.json: %v", err)
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookUpdate"},
	})
	client = armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	_, err = client.Update(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		&armapplicationinsights.WorkbooksClientUpdateOptions{SourceID: to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourceGroups/Default-Web-WestUS/providers/Microsoft.Web/sites/MyTestApp-CodeLens1"),
			WorkbookUpdateParameters: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookUpdate.json: %v", err)
	}
}

func TestWorkbooks_RevisionsList(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookRevisionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookRevisionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	pager := client.RevisionsList("my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookRevisionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.WorkbooksListResult{
			Value: []*armapplicationinsights.Workbook{
				{
					Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:  to.Ptr("Sample workbook"),
						Category:     to.Ptr("workbook"),
						DisplayName:  to.Ptr("My Workbook 1"),
						Revision:     to.Ptr("1e2f8435b98248febee70c64ac22e1ab"),
						SourceID:     to.Ptr("Azure Monitor"),
						TimeModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-04T09:07:17.735638Z"); return t }()),
						UserID:       to.Ptr("userId"),
						Version:      to.Ptr("Notebook/1.0"),
					},
				},
				{
					Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
					Type:     to.Ptr("Microsoft.Insights/workbooks"),
					ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"TagSample01": to.Ptr("sample01"),
						"TagSample02": to.Ptr("sample02"),
					},
					Kind: to.Ptr(armapplicationinsights.KindShared),
					Properties: &armapplicationinsights.WorkbookProperties{
						Description:  to.Ptr("Sample workbook"),
						Category:     to.Ptr("workbook"),
						DisplayName:  to.Ptr("My Workbook 2"),
						Revision:     to.Ptr("1e2f8435b98248febee70c64ac22e1bb"),
						SourceID:     to.Ptr("Azure Monitor"),
						TimeModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-04T09:07:17.735638Z"); return t }()),
						UserID:       to.Ptr("userId"),
						Version:      to.Ptr("Notebook/1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkbooksListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkbooksListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookRevisionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkbooks_RevisionGet(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookRevisionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkbookRevisionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewWorkbooksClient("6b643656-33eb-422f-aee8-3ac145d124af", cred, &options)
	res, err := client.RevisionGet(ctx,
		"my-resource-group",
		"deadb33f-5e0d-4064-8ebb-1a4ed0313eb2",
		"1e2f8435b98248febee70c64ac22e1ab",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookRevisionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Workbook{
			Name:     to.Ptr("deadb33f-8bee-4d3b-a059-9be8dac93960"),
			Type:     to.Ptr("Microsoft.Insights/workbooks"),
			ID:       to.Ptr("/subscriptions/6b643656-33eb-422f-aee8-3ac145d124af/resourcegroups/my-resource-group/providers/Microsoft.Insights/workbooks/deadb33f-5e0d-4064-8ebb-1a4ed0313eb2"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TagSample01": to.Ptr("sample01"),
				"TagSample02": to.Ptr("sample02"),
			},
			Kind: to.Ptr(armapplicationinsights.KindShared),
			Properties: &armapplicationinsights.WorkbookProperties{
				Description:    to.Ptr("Sample workbook"),
				Category:       to.Ptr("workbook"),
				DisplayName:    to.Ptr("My New Workbook"),
				Revision:       to.Ptr("1e2f8435b98248febee70c64ac22e1ab"),
				SerializedData: to.Ptr("{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":\"{\"json\":\"## New workbook\\r\\n---\\r\\n\\r\\nWelcome to your new workbook.  This area will display text formatted as markdown.\\r\\n\\r\\n\\r\\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.\"}\",\"halfWidth\":null,\"conditionalVisibility\":null},{\"type\":3,\"content\":\"{\"version\":\"KqlItem/1.0\",\"query\":\"union withsource=TableName *\\n| summarize Count=count() by TableName\\n| render barchart\",\"showQuery\":false,\"size\":1,\"aggregation\":0,\"showAnnotations\":false}\",\"halfWidth\":null,\"conditionalVisibility\":null}],\"isLocked\":false}"),
				TimeModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-04T09:07:17.735638Z"); return t }()),
				UserID:         to.Ptr("userId"),
				Version:        to.Ptr("Notebook/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workbook)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-08-01/examples/WorkbookRevisionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponents_List(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentsList.json"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.ComponentListResult{
			Value: []*armapplicationinsights.Component{
				{
					Name:     to.Ptr("my-component"),
					Type:     to.Ptr("Microsoft.Insights/components"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component"),
					Location: to.Ptr("South Central US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("web"),
					Properties: &armapplicationinsights.ComponentProperties{
						AppID:                           to.Ptr("16526d1a-dfba-4362-a9e9-123456789abc"),
						ApplicationID:                   to.Ptr("my-component"),
						ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
						ConnectionString:                to.Ptr("InstrumentationKey=dc5931c7-a7ad-4ad0-89d6-123456789abc"),
						CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-14T12:24:05.0041213+00:00"); return t }()),
						DisableIPMasking:                to.Ptr(false),
						FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
						HockeyAppID:                     to.Ptr(""),
						HockeyAppToken:                  to.Ptr(""),
						IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
						InstrumentationKey:              to.Ptr("dc5931c7-a7ad-4ad0-89d6-123456789abc"),
						RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
						SamplingPercentage:              to.Ptr[float64](75),
						TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
						WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
						ProvisioningState:               to.Ptr("Succeeded"),
						PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
					},
				},
				{
					Name:     to.Ptr("my-other-component"),
					Type:     to.Ptr("Microsoft.Insights/components"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-other-resource-group/providers/Microsoft.Insights/components/my-other-component"),
					Location: to.Ptr("South Central US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("web"),
					Properties: &armapplicationinsights.ComponentProperties{
						AppID:                           to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
						ApplicationID:                   to.Ptr("my-other-component"),
						ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
						ConnectionString:                to.Ptr("InstrumentationKey=bc095013-3cf2-45ac-ab47-123456789abc"),
						CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T01:05:38.5934061+00:00"); return t }()),
						DisableIPMasking:                to.Ptr(false),
						FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
						HockeyAppID:                     to.Ptr(""),
						HockeyAppToken:                  to.Ptr(""),
						IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
						InstrumentationKey:              to.Ptr("bc095013-3cf2-45ac-ab47-123456789abc"),
						RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
						SamplingPercentage:              to.Ptr[float64](30),
						TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
						WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
						ProvisioningState:               to.Ptr("Succeeded"),
						PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComponentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComponentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponents_ListByResourceGroup(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapplicationinsights.ComponentListResult{
			Value: []*armapplicationinsights.Component{
				{
					Name:     to.Ptr("my-component"),
					Type:     to.Ptr("Microsoft.Insights/components"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component"),
					Location: to.Ptr("South Central US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("web"),
					Properties: &armapplicationinsights.ComponentProperties{
						AppID:                           to.Ptr("16526d1a-dfba-4362-a9e9-123456789abc"),
						ApplicationID:                   to.Ptr("my-component"),
						ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
						ConnectionString:                to.Ptr("InstrumentationKey=dc5931c7-a7ad-4ad0-89d6-123456789abc"),
						CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-14T12:24:05.0041213+00:00"); return t }()),
						DisableIPMasking:                to.Ptr(false),
						FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
						HockeyAppID:                     to.Ptr(""),
						HockeyAppToken:                  to.Ptr(""),
						IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
						InstrumentationKey:              to.Ptr("dc5931c7-a7ad-4ad0-89d6-123456789abc"),
						RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
						SamplingPercentage:              to.Ptr[float64](100),
						TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
						WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
						ProvisioningState:               to.Ptr("Succeeded"),
						PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
					},
				},
				{
					Name:     to.Ptr("my-other-component"),
					Type:     to.Ptr("Microsoft.Insights/components"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-other-resource-group/providers/Microsoft.Insights/components/my-other-component"),
					Location: to.Ptr("South Central US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("web"),
					Properties: &armapplicationinsights.ComponentProperties{
						AppID:                           to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
						ApplicationID:                   to.Ptr("my-other-component"),
						ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
						ConnectionString:                to.Ptr("InstrumentationKey=bc095013-3cf2-45ac-ab47-123456789abc"),
						CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T01:05:38.5934061+00:00"); return t }()),
						DisableIPMasking:                to.Ptr(false),
						FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
						HockeyAppID:                     to.Ptr(""),
						HockeyAppToken:                  to.Ptr(""),
						IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
						InstrumentationKey:              to.Ptr("bc095013-3cf2-45ac-ab47-123456789abc"),
						RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
						SamplingPercentage:              to.Ptr[float64](50),
						TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
						WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
						ProvisioningState:               to.Ptr("Succeeded"),
						PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComponentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComponentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponents_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsDelete.json: %v", err)
	}
}

func TestComponents_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-component",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Component{
			Name:     to.Ptr("my-component"),
			Type:     to.Ptr("Microsoft.Insights/components"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component"),
			Location: to.Ptr("South Central US"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr("web"),
			Properties: &armapplicationinsights.ComponentProperties{
				AppID:                           to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
				ApplicationID:                   to.Ptr("my-component"),
				ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
				ConnectionString:                to.Ptr("InstrumentationKey=bc095013-3cf2-45ac-ab47-123456789abc"),
				CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T01:05:38.5934061+00:00"); return t }()),
				DisableIPMasking:                to.Ptr(false),
				FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
				HockeyAppID:                     to.Ptr(""),
				HockeyAppToken:                  to.Ptr(""),
				IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
				InstrumentationKey:              to.Ptr("bc095013-3cf2-45ac-ab47-123456789abc"),
				RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
				SamplingPercentage:              to.Ptr[float64](100),
				TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
				WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
				ProvisioningState:               to.Ptr("Succeeded"),
				PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
				PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Component) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Component)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponents_CreateOrUpdate(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.Component{
			Location: to.Ptr("South Central US"),
			Kind:     to.Ptr("web"),
			Properties: &armapplicationinsights.ComponentProperties{
				ApplicationType:     to.Ptr(armapplicationinsights.ApplicationTypeWeb),
				FlowType:            to.Ptr(armapplicationinsights.FlowTypeBluefield),
				RequestSource:       to.Ptr(armapplicationinsights.RequestSourceRest),
				WorkspaceResourceID: to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Component{
			Name:     to.Ptr("my-component"),
			Type:     to.Ptr("Microsoft.Insights/components"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component"),
			Location: to.Ptr("South Central US"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr("web"),
			Properties: &armapplicationinsights.ComponentProperties{
				AppID:                           to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
				ApplicationID:                   to.Ptr("my-component"),
				ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
				ConnectionString:                to.Ptr("InstrumentationKey=bc095013-3cf2-45ac-ab47-123456789abc"),
				CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T01:05:38.5934061+00:00"); return t }()),
				DisableIPMasking:                to.Ptr(false),
				FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
				HockeyAppID:                     to.Ptr(""),
				HockeyAppToken:                  to.Ptr(""),
				IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
				InstrumentationKey:              to.Ptr("bc095013-3cf2-45ac-ab47-123456789abc"),
				RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
				SamplingPercentage:              to.Ptr[float64](100),
				TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
				WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
				ProvisioningState:               to.Ptr("Succeeded"),
				PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
				PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Component) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Component)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentUpdate"},
	})
	client = armapplicationinsights.NewComponentsClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.Component{
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"ApplicationGatewayType": to.Ptr("Internal-Only"),
				"BillingEntity":          to.Ptr("Self"),
			},
			Kind: to.Ptr("web"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Component{
			Name:     to.Ptr("my-component"),
			Type:     to.Ptr("Microsoft.Insights/components"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component"),
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"ApplicationGatewayType": to.Ptr("Internal-Only"),
				"BillingEntity":          to.Ptr("Self"),
			},
			Kind: to.Ptr("web"),
			Properties: &armapplicationinsights.ComponentProperties{
				AppID:                           to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
				ApplicationID:                   to.Ptr("my-component"),
				ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
				ConnectionString:                to.Ptr("InstrumentationKey=bc095013-3cf2-45ac-ab47-123456789abc"),
				CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T01:05:38.5934061+00:00"); return t }()),
				DisableIPMasking:                to.Ptr(false),
				FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
				HockeyAppID:                     to.Ptr(""),
				HockeyAppToken:                  to.Ptr(""),
				IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
				InstrumentationKey:              to.Ptr("bc095013-3cf2-45ac-ab47-123456789abc"),
				RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
				SamplingPercentage:              to.Ptr[float64](100),
				TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
				WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
				ProvisioningState:               to.Ptr("Succeeded"),
				PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
				PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Component) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Component)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponents_UpdateTags(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsUpdateTagsOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentUpdateTagsOnly"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"my-resource-group",
		"my-component",
		armapplicationinsights.TagsResource{
			Tags: map[string]*string{
				"ApplicationGatewayType": to.Ptr("Internal-Only"),
				"BillingEntity":          to.Ptr("Self"),
				"Color":                  to.Ptr("AzureBlue"),
				"CustomField_01":         to.Ptr("Custom text in some random field named randomly"),
				"NodeType":               to.Ptr("Edge"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsUpdateTagsOnly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.Component{
			Name:     to.Ptr("my-component"),
			Type:     to.Ptr("Microsoft.Insights/components"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/Microsoft.Insights/components/my-component"),
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"ApplicationGatewayType": to.Ptr("Internal-Only"),
				"BillingEntity":          to.Ptr("Self"),
				"Color":                  to.Ptr("AzureBlue"),
				"CustomField_01":         to.Ptr("Custom text in some random field named randomly"),
				"NodeType":               to.Ptr("Edge"),
			},
			Kind: to.Ptr("web"),
			Properties: &armapplicationinsights.ComponentProperties{
				AppID:                           to.Ptr("887f4bfd-b5fd-40d7-9fc3-123456789abc"),
				ApplicationID:                   to.Ptr("my-component"),
				ApplicationType:                 to.Ptr(armapplicationinsights.ApplicationTypeWeb),
				ConnectionString:                to.Ptr("InstrumentationKey=bc095013-3cf2-45ac-ab47-123456789abc"),
				CreationDate:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-24T01:05:38.5934061+00:00"); return t }()),
				DisableIPMasking:                to.Ptr(false),
				FlowType:                        to.Ptr(armapplicationinsights.FlowTypeBluefield),
				HockeyAppID:                     to.Ptr(""),
				HockeyAppToken:                  to.Ptr(""),
				IngestionMode:                   to.Ptr(armapplicationinsights.IngestionModeLogAnalytics),
				InstrumentationKey:              to.Ptr("bc095013-3cf2-45ac-ab47-123456789abc"),
				RequestSource:                   to.Ptr(armapplicationinsights.RequestSourceRest),
				SamplingPercentage:              to.Ptr[float64](100),
				TenantID:                        to.Ptr("f438d567-7177-4fe1-a5e3-123456789abc"),
				WorkspaceResourceID:             to.Ptr("/subscriptions/subid/resourcegroups/my-resource-group/providers/microsoft.operationalinsights/workspaces/my-workspace"),
				ProvisioningState:               to.Ptr("Succeeded"),
				PublicNetworkAccessForIngestion: to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
				PublicNetworkAccessForQuery:     to.Ptr(armapplicationinsights.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Component) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Component)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsUpdateTagsOnly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponents_Purge(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsPurge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentPurge"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Purge(ctx,
		"OIAutoRest5123",
		"aztest5048",
		armapplicationinsights.ComponentPurgeBody{
			Filters: []*armapplicationinsights.ComponentPurgeBodyFilters{
				{
					Column:   to.Ptr("TimeGenerated"),
					Operator: to.Ptr(">"),
					Value:    "2017-09-01T00:00:00",
				}},
			Table: to.Ptr("Heartbeat"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsPurge.json: %v", err)
	}
}

func TestComponents_GetPurgeStatus(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsPurgeStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentPurge"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.GetPurgeStatus(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"purge-970318e7-b859-4edb-8903-83b1b54d0b74",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsPurgeStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentPurgeStatusResponse{
			Status: to.Ptr(armapplicationinsights.PurgeStateCompleted),
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentPurgeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentPurgeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2020-02-02/examples/ComponentsPurgeStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentLinkedStorageAccounts_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentLinkedStorageAccountsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentLinkedStorageAccountsClient("86dc51d3-92ed-4d7e-947a-775ea79b4918", cred, &options)
	res, err := client.Get(ctx,
		"someResourceGroupName",
		"myComponent",
		armapplicationinsights.StorageTypeServiceProfiler,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentLinkedStorageAccounts{
			Name: to.Ptr("serviceprofile"),
			Type: to.Ptr("microsoft.insights/components/linkedStorageAccounts"),
			ID:   to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/microsoft.insights/components/myComponent/linkedStorageAccounts/serviceprofiler"),
			Properties: &armapplicationinsights.LinkedStorageAccountsProperties{
				LinkedStorageAccount: to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/Microsoft.Storage/storageAccounts/storageaccountname"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentLinkedStorageAccounts) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentLinkedStorageAccounts)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentLinkedStorageAccounts_CreateAndUpdate(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsCreateAndUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentLinkedStorageAccountsCreateAndUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentLinkedStorageAccountsClient("86dc51d3-92ed-4d7e-947a-775ea79b4918", cred, &options)
	res, err := client.CreateAndUpdate(ctx,
		"someResourceGroupName",
		"myComponent",
		armapplicationinsights.StorageTypeServiceProfiler,
		armapplicationinsights.ComponentLinkedStorageAccounts{
			Properties: &armapplicationinsights.LinkedStorageAccountsProperties{
				LinkedStorageAccount: to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/Microsoft.Storage/storageAccounts/storageaccountname"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsCreateAndUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentLinkedStorageAccounts{
			Name: to.Ptr("serviceprofile"),
			Type: to.Ptr("microsoft.insights/components/linkedStorageAccounts"),
			ID:   to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupNameproviders/microsoft.insights/components/myComponent/linkedStorageAccounts/serviceprofiler"),
			Properties: &armapplicationinsights.LinkedStorageAccountsProperties{
				LinkedStorageAccount: to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/Microsoft.Storage/storageAccounts/storageaccountname"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentLinkedStorageAccounts) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentLinkedStorageAccounts)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsCreateAndUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentLinkedStorageAccounts_Update(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentLinkedStorageAccountsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentLinkedStorageAccountsClient("86dc51d3-92ed-4d7e-947a-775ea79b4918", cred, &options)
	res, err := client.Update(ctx,
		"someResourceGroupName",
		"myComponent",
		armapplicationinsights.StorageTypeServiceProfiler,
		armapplicationinsights.ComponentLinkedStorageAccountsPatch{
			Properties: &armapplicationinsights.LinkedStorageAccountsProperties{
				LinkedStorageAccount: to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/Microsoft.Storage/storageAccounts/storageaccountname"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.ComponentLinkedStorageAccounts{
			Name: to.Ptr("serviceprofile"),
			Type: to.Ptr("microsoft.insights/components/linkedStorageAccounts"),
			ID:   to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/microsoft.insights/components/myComponent/linkedStorageAccounts/serviceprofiler"),
			Properties: &armapplicationinsights.LinkedStorageAccountsProperties{
				LinkedStorageAccount: to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4918/resourceGroups/someResourceGroupName/providers/Microsoft.Storage/storageAccounts/storageaccountname"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComponentLinkedStorageAccounts) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComponentLinkedStorageAccounts)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComponentLinkedStorageAccounts_Delete(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ComponentLinkedStorageAccountsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewComponentLinkedStorageAccountsClient("86dc51d3-92ed-4d7e-947a-775ea79b4918", cred, &options)
	_, err := client.Delete(ctx,
		"someResourceGroupName",
		"myComponent",
		armapplicationinsights.StorageTypeServiceProfiler,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/preview/2020-03-01-preview/examples/ComponentLinkedStorageAccountsDelete.json: %v", err)
	}
}

func TestLiveToken_Get(t *testing.T) {
	// From example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-10-14/examples/LiveTokenGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get live token for resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapplicationinsights.NewLiveTokenClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/FabrikamFiberApp/providers/microsoft.insights/components/CustomAvailabilityTest/providers/microsoft.insights/generatelivetoken",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-10-14/examples/LiveTokenGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapplicationinsights.LiveTokenResponse{
			LiveToken: to.Ptr("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"),
		}
		if !reflect.DeepEqual(exampleRes, res.LiveTokenResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LiveTokenResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-10-14/examples/LiveTokenGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
