//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcustomerinsights_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerinsights/armcustomerinsights"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesCreateOrUpdate.json
func ExampleProfilesClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armcustomerinsights.NewProfilesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<hub-name>",
		"<profile-name>",
		armcustomerinsights.ProfileResourceFormat{
			Properties: &armcustomerinsights.ProfileTypeDefinition{
				LargeImage:       to.Ptr("<large-image>"),
				MediumImage:      to.Ptr("<medium-image>"),
				SmallImage:       to.Ptr("<small-image>"),
				APIEntitySetName: to.Ptr("<apientity-set-name>"),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						FieldName:  to.Ptr("<field-name>"),
						FieldType:  to.Ptr("<field-type>"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("<field-name>"),
						FieldType:  to.Ptr("<field-type>"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("<field-name>"),
						FieldType:  to.Ptr("<field-type>"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("<field-name>"),
						FieldType:  to.Ptr("<field-type>"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("<field-name>"),
						FieldType:  to.Ptr("<field-type>"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					}},
				SchemaItemTypeLink: to.Ptr("<schema-item-type-link>"),
				StrongIDs: []*armcustomerinsights.StrongID{
					{
						KeyPropertyNames: []*string{
							to.Ptr("Id"),
							to.Ptr("SavingAccountBalance")},
						StrongIDName: to.Ptr("<strong-idname>"),
					},
					{
						KeyPropertyNames: []*string{
							to.Ptr("ProfileId"),
							to.Ptr("LastName")},
						StrongIDName: to.Ptr("<strong-idname>"),
					}},
			},
		},
		&armcustomerinsights.ProfilesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesGet.json
func ExampleProfilesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armcustomerinsights.NewProfilesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<hub-name>",
		"<profile-name>",
		&armcustomerinsights.ProfilesClientGetOptions{LocaleCode: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesDelete.json
func ExampleProfilesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armcustomerinsights.NewProfilesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<hub-name>",
		"<profile-name>",
		&armcustomerinsights.ProfilesClientBeginDeleteOptions{LocaleCode: nil,
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesListByHub.json
func ExampleProfilesClient_ListByHub() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armcustomerinsights.NewProfilesClient("<subscription-id>", cred, nil)
	pager := client.ListByHub("<resource-group-name>",
		"<hub-name>",
		&armcustomerinsights.ProfilesClientListByHubOptions{LocaleCode: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
			return
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfileGetEnrichingKpis.json
func ExampleProfilesClient_GetEnrichingKpis() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armcustomerinsights.NewProfilesClient("<subscription-id>", cred, nil)
	res, err := client.GetEnrichingKpis(ctx,
		"<resource-group-name>",
		"<hub-name>",
		"<profile-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}
