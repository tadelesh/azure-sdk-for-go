//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcustomerinsights_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerinsights/armcustomerinsights"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/DCIOperations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DCIOperations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/DCIOperations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.OperationListResult{
			Value: []*armcustomerinsights.Operation{
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Hub"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Hubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Hub"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Hubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights Hub"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Hubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/views/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights App View"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights App Views"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/views/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights App View"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights App Views"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/views/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights App View"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights App Views"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Connector"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Connectors"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Connector"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Connectors"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights Connector"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Connectors"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/mappings/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Connector Mapping"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Connector Mappings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/mappings/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Connector Mapping"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Connector Mappings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/mappings/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights App View"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Connector Mappings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/interactions/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Interaction"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Interactions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/interactions/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Interaction"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Interactions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/profiles/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Profile"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/profiles/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Profile"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/kpi/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Key Performance Indicator"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Create or Update Customer Insights Key Performance Indicators"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/kpi/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Key Performance Indicator"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Create or Update Customer Insights Key Performance Indicators"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/kpi/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights Key Performance Indicator"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Create or Update Customer Insights Key Performance Indicators"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/roleAssignments/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Rbac Assignment"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Rbac Assignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/roleAssignments/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Rbac Assignment"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Rbac Assignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/roleAssignments/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights Rbac Assignment"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Rbac Assignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/authorizationPolicies/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read Azure Customer Insights Shared Access Signature Policy"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Shared Access Signature Policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/authorizationPolicies/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Create or Update Azure Customer Insights Shared Access Signature Policy"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Shared Access Signature Policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/authorizationPolicies/delete"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Delete Azure Customer Insights Shared Access Signature Policy"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Shared Access Signature Policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/authorizationPolicies/regeneratePrimaryKey/action"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Regenerate Azure Customer Insights Shared Access Signature Policy primary key"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Shared Access Signature Policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/authorizationPolicies/regenerateSecondaryKey/action"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Regenerate Azure Customer Insights Shared Access Signature Policy secondary key"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Azure Customer Insights Shared Access Signature Policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read resource metric definitions"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Microsoft Azure Customer Insights Metric Definition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Read resource log definitions"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Microsoft Azure Customer Insights Log Definition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Diagnostic setting read"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Microsoft Azure Customer Insights Diagnostic Settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomerInsights/hubs/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armcustomerinsights.OperationDisplay{
						Operation: to.Ptr("Diagnostic setting write"),
						Provider:  to.Ptr("Microsoft Azure Customer Insights"),
						Resource:  to.Ptr("Microsoft Azure Customer Insights Diagnostic Settings"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/DCIOperations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubs_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Hubs_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewHubsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		armcustomerinsights.Hub{
			Location: to.Ptr("West US"),
			Properties: &armcustomerinsights.HubPropertiesFormat{
				HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
					MaxUnits: to.Ptr[int32](5),
					MinUnits: to.Ptr[int32](1),
					SKUName:  to.Ptr("B0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.Hub{
			Name:     to.Ptr("testHub2839"),
			Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/testHub2839"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armcustomerinsights.HubPropertiesFormat{
				APIEndpoint: to.Ptr("https://testHub2839.dfd.projectuic-int.net"),
				HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
					MaxUnits: to.Ptr[int32](5),
					MinUnits: to.Ptr[int32](1),
					SKUName:  to.Ptr("B0"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				TenantFeatures:    to.Ptr[int32](0),
				WebEndpoint:       to.Ptr("https://testHub2839.dfdapps.projectuic-int.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Hub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Hub)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubs_Update(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Hubs_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewHubsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"TestHubRG",
		"sdkTestHub",
		armcustomerinsights.Hub{
			Location: to.Ptr("West US"),
			Properties: &armcustomerinsights.HubPropertiesFormat{
				HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
					MaxUnits: to.Ptr[int32](5),
					MinUnits: to.Ptr[int32](1),
					SKUName:  to.Ptr("B0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.Hub{
			Name:     to.Ptr("testHub2839"),
			Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/testHub2839"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armcustomerinsights.HubPropertiesFormat{
				APIEndpoint: to.Ptr("https://testHub2839.dfd.projectuic-int.net"),
				HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
					MaxUnits: to.Ptr[int32](5),
					MinUnits: to.Ptr[int32](1),
					SKUName:  to.Ptr("B0"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				TenantFeatures:    to.Ptr[int32](0),
				WebEndpoint:       to.Ptr("https://testHub2839.dfdapps.projectuic-int.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Hub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Hub)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubs_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Hubs_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewHubsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		&armcustomerinsights.HubsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsDelete.json: %v", err)
	}
}

func TestHubs_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Hubs_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewHubsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.Hub{
			Name:     to.Ptr("testHub2839"),
			Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/testHub2839"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armcustomerinsights.HubPropertiesFormat{
				APIEndpoint: to.Ptr("https://testHub2839.dfd.projectuic-int.net"),
				HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
					MaxUnits: to.Ptr[int32](5),
					MinUnits: to.Ptr[int32](1),
					SKUName:  to.Ptr("B0"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				TenantFeatures:    to.Ptr[int32](0),
				WebEndpoint:       to.Ptr("https://testHub2839.dfdapps.projectuic-int.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Hub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Hub)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubs_ListByResourceGroup(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Hubs_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewHubsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("TestHubRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.HubListResult{
			Value: []*armcustomerinsights.Hub{
				{
					Name:     to.Ptr("azSdkTestHub"),
					Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
					ID:       to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armcustomerinsights.HubPropertiesFormat{
						APIEndpoint: to.Ptr("https://azSdkTestHub.dfd.projectuic-int.net"),
						HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
							MaxUnits: to.Ptr[int32](1),
							MinUnits: to.Ptr[int32](1),
							SKUName:  to.Ptr("B0"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						TenantFeatures:    to.Ptr[int32](0),
						WebEndpoint:       to.Ptr("https://azSdkTestHub.dfdapps.projectuic-int.net"),
					},
				},
				{
					Name:     to.Ptr("testHub1058"),
					Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
					ID:       to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/testHub1058"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armcustomerinsights.HubPropertiesFormat{
						APIEndpoint: to.Ptr("https://testHub1058.dfd.projectuic-int.net"),
						HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
							MaxUnits: to.Ptr[int32](5),
							MinUnits: to.Ptr[int32](1),
							SKUName:  to.Ptr("B0"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						TenantFeatures:    to.Ptr[int32](0),
						WebEndpoint:       to.Ptr("https://testHub1058.dfdapps.projectuic-int.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HubListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HubListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHubs_List(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Hubs_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewHubsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.HubListResult{
			Value: []*armcustomerinsights.Hub{
				{
					Name:     to.Ptr("azSdkTestHub"),
					Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
					ID:       to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armcustomerinsights.HubPropertiesFormat{
						APIEndpoint: to.Ptr("https://azSdkTestHub.dfd.projectuic-int.net"),
						HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
							MaxUnits: to.Ptr[int32](1),
							MinUnits: to.Ptr[int32](1),
							SKUName:  to.Ptr("B0"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						TenantFeatures:    to.Ptr[int32](0),
						WebEndpoint:       to.Ptr("https://azSdkTestHub.dfdapps.projectuic-int.net"),
					},
				},
				{
					Name:     to.Ptr("testHub1058"),
					Type:     to.Ptr("Microsoft.CustomerInsights/hubs"),
					ID:       to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/testHub1058"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armcustomerinsights.HubPropertiesFormat{
						APIEndpoint: to.Ptr("https://testHub1058.dfd.projectuic-int.net"),
						HubBillingInfo: &armcustomerinsights.HubBillingInfoFormat{
							MaxUnits: to.Ptr[int32](5),
							MinUnits: to.Ptr[int32](1),
							SKUName:  to.Ptr("B0"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						TenantFeatures:    to.Ptr[int32](0),
						WebEndpoint:       to.Ptr("https://testHub1058.dfdapps.projectuic-int.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HubListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HubListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/HubsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewProfilesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"TestProfileType396",
		armcustomerinsights.ProfileResourceFormat{
			Properties: &armcustomerinsights.ProfileTypeDefinition{
				LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
				MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
				SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
				APIEntitySetName: to.Ptr("TestProfileType396"),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						FieldName:  to.Ptr("Id"),
						FieldType:  to.Ptr("Edm.String"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("ProfileId"),
						FieldType:  to.Ptr("Edm.String"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("LastName"),
						FieldType:  to.Ptr("Edm.String"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("TestProfileType396"),
						FieldType:  to.Ptr("Edm.String"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName:  to.Ptr("SavingAccountBalance"),
						FieldType:  to.Ptr("Edm.Int32"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					}},
				SchemaItemTypeLink: to.Ptr("SchemaItemTypeLink"),
				StrongIDs: []*armcustomerinsights.StrongID{
					{
						KeyPropertyNames: []*string{
							to.Ptr("Id"),
							to.Ptr("SavingAccountBalance")},
						StrongIDName: to.Ptr("Id"),
					},
					{
						KeyPropertyNames: []*string{
							to.Ptr("ProfileId"),
							to.Ptr("LastName")},
						StrongIDName: to.Ptr("ProfileId"),
					}},
			},
		},
		&armcustomerinsights.ProfilesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ProfileResourceFormat{
			Name: to.Ptr("azSdkTestHub/TestProfileType396"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/profiles"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/profiles/TestProfileType396"),
			Properties: &armcustomerinsights.ProfileTypeDefinition{
				LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
				MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
				SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
				APIEntitySetName: to.Ptr("TestProfileType396"),
				EntityType:       to.Ptr(armcustomerinsights.EntityTypesProfile),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						FieldName:         to.Ptr("Id"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("ProfileId"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("LastName"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("TestProfileType396"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("SavingAccountBalance"),
						FieldType:         to.Ptr("Edm.Int32"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					}},
				InstancesCount:     to.Ptr[int32](0),
				ProvisioningState:  to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				SchemaItemTypeLink: to.Ptr("SchemaItemTypeLink"),
				TenantID:           to.Ptr("azsdktesthub"),
				TypeName:           to.Ptr("TestProfileType396"),
				StrongIDs: []*armcustomerinsights.StrongID{
					{
						KeyPropertyNames: []*string{
							to.Ptr("Id"),
							to.Ptr("savingAccountBalance")},
						StrongIDName: to.Ptr("Id"),
					},
					{
						KeyPropertyNames: []*string{
							to.Ptr("ProfileId"),
							to.Ptr("LastName")},
						StrongIDName: to.Ptr("ProfileId"),
					},
					{
						KeyPropertyNames: []*string{
							to.Ptr("ProfileId")},
						StrongIDName: to.Ptr("ProfileId"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProfileResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProfileResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewProfilesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"TestProfileType396",
		&armcustomerinsights.ProfilesClientGetOptions{LocaleCode: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ProfileResourceFormat{
			Name: to.Ptr("azSdkTestHub/TestProfileType396"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/profiles"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/profiles/TestProfileType396"),
			Properties: &armcustomerinsights.ProfileTypeDefinition{
				LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
				MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
				SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
				APIEntitySetName: to.Ptr("TestProfileType396"),
				EntityType:       to.Ptr(armcustomerinsights.EntityTypesProfile),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						FieldName:         to.Ptr("Id"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("ProfileId"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("LastName"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("TestProfileType396"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("SavingAccountBalance"),
						FieldType:         to.Ptr("Edm.Int32"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					}},
				InstancesCount:     to.Ptr[int32](0),
				ProvisioningState:  to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				SchemaItemTypeLink: to.Ptr("SchemaItemTypeLink"),
				TenantID:           to.Ptr("azsdktesthub"),
				TypeName:           to.Ptr("TestProfileType396"),
				StrongIDs: []*armcustomerinsights.StrongID{
					{
						KeyPropertyNames: []*string{
							to.Ptr("Id"),
							to.Ptr("savingAccountBalance")},
						StrongIDName: to.Ptr("Id"),
					},
					{
						KeyPropertyNames: []*string{
							to.Ptr("ProfileId"),
							to.Ptr("LastName")},
						StrongIDName: to.Ptr("ProfileId"),
					},
					{
						KeyPropertyNames: []*string{
							to.Ptr("ProfileId")},
						StrongIDName: to.Ptr("ProfileId"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProfileResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProfileResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewProfilesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"TestProfileType396",
		&armcustomerinsights.ProfilesClientBeginDeleteOptions{LocaleCode: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesDelete.json: %v", err)
	}
}

func TestProfiles_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewProfilesClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		&armcustomerinsights.ProfilesClientListByHubOptions{LocaleCode: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.ProfileListResult{
			Value: []*armcustomerinsights.ProfileResourceFormat{
				{
					Name: to.Ptr("azSdkTestHub/TestProfileType396"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/profiles"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/profiles/TestProfileType396"),
					Properties: &armcustomerinsights.ProfileTypeDefinition{
						LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
						MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
						SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
						APIEntitySetName: to.Ptr("TestProfileType396"),
						EntityType:       to.Ptr(armcustomerinsights.EntityTypesProfile),
						Fields: []*armcustomerinsights.PropertyDefinition{
							{
								FieldName:         to.Ptr("Id"),
								FieldType:         to.Ptr("Edm.String"),
								IsArray:           to.Ptr(false),
								IsEnum:            to.Ptr(false),
								IsFlagEnum:        to.Ptr(false),
								IsImage:           to.Ptr(false),
								IsLocalizedString: to.Ptr(false),
								IsName:            to.Ptr(false),
								IsRequired:        to.Ptr(true),
								PropertyID:        to.Ptr("id1"),
							},
							{
								FieldName:         to.Ptr("ProfileId"),
								FieldType:         to.Ptr("Edm.String"),
								IsArray:           to.Ptr(false),
								IsEnum:            to.Ptr(false),
								IsFlagEnum:        to.Ptr(false),
								IsImage:           to.Ptr(false),
								IsLocalizedString: to.Ptr(false),
								IsName:            to.Ptr(false),
								IsRequired:        to.Ptr(true),
								PropertyID:        to.Ptr("id1"),
							},
							{
								FieldName:         to.Ptr("LastName"),
								FieldType:         to.Ptr("Edm.String"),
								IsArray:           to.Ptr(false),
								IsEnum:            to.Ptr(false),
								IsFlagEnum:        to.Ptr(false),
								IsImage:           to.Ptr(false),
								IsLocalizedString: to.Ptr(false),
								IsName:            to.Ptr(false),
								IsRequired:        to.Ptr(true),
								PropertyID:        to.Ptr("id1"),
							},
							{
								FieldName:         to.Ptr("TestProfileType396"),
								FieldType:         to.Ptr("Edm.String"),
								IsArray:           to.Ptr(false),
								IsEnum:            to.Ptr(false),
								IsFlagEnum:        to.Ptr(false),
								IsImage:           to.Ptr(false),
								IsLocalizedString: to.Ptr(false),
								IsName:            to.Ptr(false),
								IsRequired:        to.Ptr(true),
								PropertyID:        to.Ptr("id1"),
							},
							{
								FieldName:         to.Ptr("SavingAccountBalance"),
								FieldType:         to.Ptr("Edm.Int32"),
								IsArray:           to.Ptr(false),
								IsEnum:            to.Ptr(false),
								IsFlagEnum:        to.Ptr(false),
								IsImage:           to.Ptr(false),
								IsLocalizedString: to.Ptr(false),
								IsName:            to.Ptr(false),
								IsRequired:        to.Ptr(true),
								PropertyID:        to.Ptr("id1"),
							}},
						InstancesCount:     to.Ptr[int32](0),
						ProvisioningState:  to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						SchemaItemTypeLink: to.Ptr("SchemaItemTypeLink"),
						TenantID:           to.Ptr("azsdktesthub"),
						TypeName:           to.Ptr("TestProfileType396"),
						StrongIDs: []*armcustomerinsights.StrongID{
							{
								KeyPropertyNames: []*string{
									to.Ptr("Id"),
									to.Ptr("savingAccountBalance")},
								StrongIDName: to.Ptr("Id"),
							},
							{
								KeyPropertyNames: []*string{
									to.Ptr("ProfileId"),
									to.Ptr("LastName")},
								StrongIDName: to.Ptr("ProfileId"),
							},
							{
								KeyPropertyNames: []*string{
									to.Ptr("ProfileId")},
								StrongIDName: to.Ptr("ProfileId"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfilesListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_GetEnrichingKpis(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfileGetEnrichingKpis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_GetEnrichingKpis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewProfilesClient("subid", cred, &options)
	res, err := client.GetEnrichingKpis(ctx,
		"TestHubRG",
		"sdkTestHub",
		"TestProfileType396",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfileGetEnrichingKpis.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armcustomerinsights.KpiDefinition{
			{
				Description: map[string]*string{
					"en-us": to.Ptr("MonthlyDeposits"),
				},
				CalculationWindow:          to.Ptr(armcustomerinsights.CalculationWindowTypesMonth),
				CalculationWindowFieldName: to.Ptr(""),
				EntityType:                 to.Ptr(armcustomerinsights.EntityTypesInteraction),
				EntityTypeName:             to.Ptr("Deposit"),
				Expression:                 to.Ptr("Amount"),
				Filter:                     to.Ptr(""),
				Function:                   to.Ptr(armcustomerinsights.KpiFunctionsSum),
				GroupBy: []*string{
					to.Ptr("AccountType"),
					to.Ptr("BranchId"),
					to.Ptr("ContactId"),
					to.Ptr("Location"),
					to.Ptr("Type")},
				GroupByMetadata: []*armcustomerinsights.KpiGroupByMetadata{
					{
						DisplayName: map[string]*string{
							"en-us": to.Ptr("AccountType"),
						},
						FieldName: to.Ptr("AccountType"),
						FieldType: to.Ptr("Edm.String"),
					},
					{
						DisplayName: map[string]*string{
							"en-us": to.Ptr("BranchId"),
						},
						FieldName: to.Ptr("BranchId"),
						FieldType: to.Ptr("Edm.Int32"),
					},
					{
						DisplayName: map[string]*string{
							"en-us": to.Ptr("ContactId"),
						},
						FieldName: to.Ptr("ContactId"),
						FieldType: to.Ptr("Edm.Int32"),
					},
					{
						DisplayName: map[string]*string{
							"en-us": to.Ptr("Location"),
						},
						FieldName: to.Ptr("Location"),
						FieldType: to.Ptr("Edm.String"),
					},
					{
						DisplayName: map[string]*string{
							"en-us": to.Ptr("Type"),
						},
						FieldName: to.Ptr("Type"),
						FieldType: to.Ptr("Edm.String"),
					}},
				KpiName:                     to.Ptr("MonthlyDeposits"),
				ParticipantProfilesMetadata: []*armcustomerinsights.KpiParticipantProfilesMetadata{},
				ProvisioningState:           to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				TenantID:                    to.Ptr("sdkTestHub"),
				ThresHolds: &armcustomerinsights.KpiThresholds{
					IncreasingKpi: to.Ptr(true),
					LowerLimit:    to.Ptr[float64](0),
					UpperLimit:    to.Ptr[float64](0),
				},
				Unit: to.Ptr(""),
			}}
		if !reflect.DeepEqual(exampleRes, res.KpiDefinitionArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KpiDefinitionArray)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ProfileGetEnrichingKpis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInteractions_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Interactions_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewInteractionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"TestProfileType396",
		armcustomerinsights.InteractionResourceFormat{
			Properties: &armcustomerinsights.InteractionTypeDefinition{
				LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
				MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
				SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
				APIEntitySetName: to.Ptr("TestInteractionType6358"),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						FieldName:  to.Ptr("TestInteractionType6358"),
						FieldType:  to.Ptr("Edm.String"),
						IsArray:    to.Ptr(false),
						IsRequired: to.Ptr(true),
					},
					{
						FieldName: to.Ptr("profile1"),
						FieldType: to.Ptr("Edm.String"),
					}},
				IDPropertyNames: []*string{
					to.Ptr("TestInteractionType6358")},
				PrimaryParticipantProfilePropertyName: to.Ptr("profile1"),
			},
		},
		&armcustomerinsights.InteractionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.InteractionResourceFormat{
			Name: to.Ptr("azSdkTestHub/TestInteractionType6358"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/interactions"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/interactions/TestInteractionType6358"),
			Properties: &armcustomerinsights.InteractionTypeDefinition{
				LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
				MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
				SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
				APIEntitySetName: to.Ptr("TestInteractionType6358"),
				EntityType:       to.Ptr(armcustomerinsights.EntityTypesInteraction),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						FieldName:         to.Ptr("TestInteractionType6358"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					},
					{
						FieldName:         to.Ptr("profile1"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					}},
				InstancesCount:    to.Ptr[int32](0),
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				TenantID:          to.Ptr("azsdktesthub"),
				TypeName:          to.Ptr("TestInteractionType6358"),
				IDPropertyNames: []*string{
					to.Ptr("TestInteractionType6358")},
				PrimaryParticipantProfilePropertyName: to.Ptr("profile1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InteractionResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InteractionResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInteractions_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Interactions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewInteractionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"TestInteractionType6358",
		&armcustomerinsights.InteractionsClientGetOptions{LocaleCode: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.InteractionResourceFormat{
			Name: to.Ptr("azSdkTestHub/TestInteractionType6358"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/interactions"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/interactions/TestInteractionType6358"),
			Properties: &armcustomerinsights.InteractionTypeDefinition{
				LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
				MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
				SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
				APIEntitySetName: to.Ptr("TestInteractionType6358"),
				EntityType:       to.Ptr(armcustomerinsights.EntityTypesInteraction),
				Fields: []*armcustomerinsights.PropertyDefinition{
					{
						DataSourcePrecedenceRules: []*armcustomerinsights.DataSourcePrecedence{},
						FieldName:                 to.Ptr("TestInteractionType6358"),
						FieldType:                 to.Ptr("Edm.String"),
						IsArray:                   to.Ptr(false),
						IsEnum:                    to.Ptr(false),
						IsFlagEnum:                to.Ptr(false),
						IsImage:                   to.Ptr(false),
						IsLocalizedString:         to.Ptr(false),
						IsName:                    to.Ptr(false),
						IsRequired:                to.Ptr(true),
						PropertyID:                to.Ptr("id1"),
					},
					{
						DataSourcePrecedenceRules: []*armcustomerinsights.DataSourcePrecedence{
							{
								DataSource: &armcustomerinsights.DataSource{
									Name:                  to.Ptr("crm2"),
									DataSourceReferenceID: to.Ptr("70"),
									DataSourceType:        to.Ptr(armcustomerinsights.DataSourceTypeConnector),
									ID:                    to.Ptr[int32](1),
									Status:                to.Ptr(armcustomerinsights.StatusActive),
								},
								Precedence: to.Ptr[int32](50),
							}},
						FieldName:         to.Ptr("profile1"),
						FieldType:         to.Ptr("Edm.String"),
						IsArray:           to.Ptr(false),
						IsEnum:            to.Ptr(false),
						IsFlagEnum:        to.Ptr(false),
						IsImage:           to.Ptr(false),
						IsLocalizedString: to.Ptr(false),
						IsName:            to.Ptr(false),
						IsRequired:        to.Ptr(true),
						PropertyID:        to.Ptr("id1"),
					}},
				InstancesCount:    to.Ptr[int32](0),
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				TenantID:          to.Ptr("azsdktesthub"),
				TypeName:          to.Ptr("TestInteractionType6358"),
				DataSourcePrecedenceRules: []*armcustomerinsights.DataSourcePrecedence{
					{
						DataSource: &armcustomerinsights.DataSource{
							Name:                  to.Ptr("crm2"),
							DataSourceReferenceID: to.Ptr("70"),
							DataSourceType:        to.Ptr(armcustomerinsights.DataSourceTypeConnector),
							ID:                    to.Ptr[int32](1),
							Status:                to.Ptr(armcustomerinsights.StatusActive),
						},
						Precedence: to.Ptr[int32](50),
					}},
				DefaultDataSource: &armcustomerinsights.DataSource{
					Name:                  to.Ptr("crm2"),
					DataSourceReferenceID: to.Ptr("70"),
					DataSourceType:        to.Ptr(armcustomerinsights.DataSourceTypeConnector),
					ID:                    to.Ptr[int32](1),
					Status:                to.Ptr(armcustomerinsights.StatusActive),
				},
				IDPropertyNames: []*string{
					to.Ptr("TestInteractionType6358")},
				IsActivity:                            to.Ptr(true),
				PrimaryParticipantProfilePropertyName: to.Ptr("profile1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InteractionResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InteractionResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInteractions_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Interactions_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewInteractionsClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		&armcustomerinsights.InteractionsClientListByHubOptions{LocaleCode: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.InteractionListResult{
			Value: []*armcustomerinsights.InteractionResourceFormat{
				{
					Name: to.Ptr("azSdkTestHub/TestInteractionType6358"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/interactions"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/interactions/TestInteractionType6358"),
					Properties: &armcustomerinsights.InteractionTypeDefinition{
						LargeImage:       to.Ptr("\\\\Images\\\\LargeImage"),
						MediumImage:      to.Ptr("\\\\Images\\\\MediumImage"),
						SmallImage:       to.Ptr("\\\\Images\\\\smallImage"),
						APIEntitySetName: to.Ptr("TestInteractionType6358"),
						EntityType:       to.Ptr(armcustomerinsights.EntityTypesInteraction),
						Fields: []*armcustomerinsights.PropertyDefinition{
							{
								DataSourcePrecedenceRules: []*armcustomerinsights.DataSourcePrecedence{},
								FieldName:                 to.Ptr("TestInteractionType6358"),
								FieldType:                 to.Ptr("Edm.String"),
								IsArray:                   to.Ptr(false),
								IsEnum:                    to.Ptr(false),
								IsFlagEnum:                to.Ptr(false),
								IsImage:                   to.Ptr(false),
								IsLocalizedString:         to.Ptr(false),
								IsName:                    to.Ptr(false),
								IsRequired:                to.Ptr(true),
								PropertyID:                to.Ptr("id1"),
							},
							{
								DataSourcePrecedenceRules: []*armcustomerinsights.DataSourcePrecedence{
									{
										DataSource: &armcustomerinsights.DataSource{
											Name:                  to.Ptr("crm2"),
											DataSourceReferenceID: to.Ptr("70"),
											DataSourceType:        to.Ptr(armcustomerinsights.DataSourceTypeConnector),
											ID:                    to.Ptr[int32](1),
											Status:                to.Ptr(armcustomerinsights.StatusActive),
										},
										Precedence: to.Ptr[int32](50),
									}},
								FieldName:         to.Ptr("profile1"),
								FieldType:         to.Ptr("Edm.String"),
								IsArray:           to.Ptr(false),
								IsEnum:            to.Ptr(false),
								IsFlagEnum:        to.Ptr(false),
								IsImage:           to.Ptr(false),
								IsLocalizedString: to.Ptr(false),
								IsName:            to.Ptr(false),
								IsRequired:        to.Ptr(true),
								PropertyID:        to.Ptr("id1"),
							}},
						InstancesCount:    to.Ptr[int32](0),
						ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						TenantID:          to.Ptr("azsdktesthub"),
						TypeName:          to.Ptr("TestInteractionType6358"),
						DataSourcePrecedenceRules: []*armcustomerinsights.DataSourcePrecedence{
							{
								DataSource: &armcustomerinsights.DataSource{
									Name:                  to.Ptr("crm2"),
									DataSourceReferenceID: to.Ptr("70"),
									DataSourceType:        to.Ptr(armcustomerinsights.DataSourceTypeConnector),
									ID:                    to.Ptr[int32](1),
									Status:                to.Ptr(armcustomerinsights.StatusActive),
								},
								Precedence: to.Ptr[int32](50),
							}},
						DefaultDataSource: &armcustomerinsights.DataSource{
							Name:                  to.Ptr("crm2"),
							DataSourceReferenceID: to.Ptr("70"),
							DataSourceType:        to.Ptr(armcustomerinsights.DataSourceTypeConnector),
							ID:                    to.Ptr[int32](1),
							Status:                to.Ptr(armcustomerinsights.StatusActive),
						},
						IDPropertyNames: []*string{
							to.Ptr("TestInteractionType6358")},
						IsActivity:                            to.Ptr(true),
						PrimaryParticipantProfilePropertyName: to.Ptr("profile1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InteractionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InteractionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInteractions_SuggestRelationshipLinks(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsSuggestRelationshipLinks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Interactions_SuggestRelationshipLinks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewInteractionsClient("subid", cred, &options)
	res, err := client.SuggestRelationshipLinks(ctx,
		"TestHubRG",
		"sdkTestHub",
		"Deposit",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsSuggestRelationshipLinks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.SuggestRelationshipLinksResponse{
			InteractionName: to.Ptr("Deposit"),
			SuggestedRelationships: []*armcustomerinsights.RelationshipsLookup{
				{
					ProfileName: to.Ptr("Branch"),
					ProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
						{
							InteractionPropertyName: to.Ptr("BranchId"),
							ProfilePropertyName:     to.Ptr("BranchId"),
						}},
					RelatedProfileName: to.Ptr("Contact"),
					RelatedProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
						{
							InteractionPropertyName: to.Ptr("ContactId"),
							ProfilePropertyName:     to.Ptr("ContactId"),
						}},
				},
				{
					ProfileName: to.Ptr("Contact"),
					ProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
						{
							InteractionPropertyName: to.Ptr("ContactId"),
							ProfilePropertyName:     to.Ptr("ContactId"),
						}},
					RelatedProfileName: to.Ptr("Branch"),
					RelatedProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
						{
							InteractionPropertyName: to.Ptr("BranchId"),
							ProfilePropertyName:     to.Ptr("BranchId"),
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SuggestRelationshipLinksResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SuggestRelationshipLinksResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/InteractionsSuggestRelationshipLinks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRelationships_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Relationships_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"SomeRelationship",
		armcustomerinsights.RelationshipResourceFormat{
			Properties: &armcustomerinsights.RelationshipDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Relationship Description"),
				},
				Cardinality: to.Ptr(armcustomerinsights.CardinalityTypesOneToOne),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Relationship DisplayName"),
				},
				Fields:             []*armcustomerinsights.PropertyDefinition{},
				ProfileType:        to.Ptr("testProfile2326994"),
				RelatedProfileType: to.Ptr("testProfile2326994"),
			},
		},
		&armcustomerinsights.RelationshipsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.RelationshipResourceFormat{
			Name: to.Ptr("sdkTestHub/testProfile2326994"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/relationships"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/relationships/SomeRelationship"),
			Properties: &armcustomerinsights.RelationshipDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Relationship Description"),
				},
				Cardinality: to.Ptr(armcustomerinsights.CardinalityTypesOneToOne),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Relationship DisplayName"),
				},
				Fields:             []*armcustomerinsights.PropertyDefinition{},
				LookupMappings:     []*armcustomerinsights.RelationshipTypeMapping{},
				ProfileType:        to.Ptr("testProfile2326994"),
				ProvisioningState:  to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				RelatedProfileType: to.Ptr("testProfile2326994"),
				RelationshipName:   to.Ptr("SomeRelationship"),
				TenantID:           to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RelationshipResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RelationshipResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRelationships_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Relationships_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"SomeRelationship",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.RelationshipResourceFormat{
			Name: to.Ptr("sdkTestHub/testProfile2326994"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/relationships"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/relationships/SomeRelationship"),
			Properties: &armcustomerinsights.RelationshipDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Relationship Description"),
				},
				Cardinality: to.Ptr(armcustomerinsights.CardinalityTypesOneToOne),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Relationship DisplayName"),
				},
				Fields:             []*armcustomerinsights.PropertyDefinition{},
				LookupMappings:     []*armcustomerinsights.RelationshipTypeMapping{},
				ProfileType:        to.Ptr("testProfile2326994"),
				ProvisioningState:  to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				RelatedProfileType: to.Ptr("testProfile2326994"),
				RelationshipName:   to.Ptr("SomeRelationship"),
				TenantID:           to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RelationshipResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RelationshipResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRelationships_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Relationships_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"SomeRelationship",
		&armcustomerinsights.RelationshipsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsDelete.json: %v", err)
	}
}

func TestRelationships_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Relationships_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipsClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.RelationshipListResult{
			Value: []*armcustomerinsights.RelationshipResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/testProfile2326994"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/relationships"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/relationships/SomeRelationship"),
					Properties: &armcustomerinsights.RelationshipDefinition{
						Description: map[string]*string{
							"en-us": to.Ptr("Relationship Description"),
						},
						Cardinality: to.Ptr(armcustomerinsights.CardinalityTypesOneToOne),
						DisplayName: map[string]*string{
							"en-us": to.Ptr("Relationship DisplayName"),
						},
						Fields:             []*armcustomerinsights.PropertyDefinition{},
						LookupMappings:     []*armcustomerinsights.RelationshipTypeMapping{},
						ProfileType:        to.Ptr("testProfile2326994"),
						ProvisioningState:  to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						RelatedProfileType: to.Ptr("testProfile2326994"),
						RelationshipName:   to.Ptr("SomeRelationship"),
						TenantID:           to.Ptr("sdktesthub"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RelationshipListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RelationshipListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipsListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRelationshipLinks_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelationshipLinks_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipLinksClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"Somelink",
		armcustomerinsights.RelationshipLinkResourceFormat{
			Properties: &armcustomerinsights.RelationshipLinkDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Link Description"),
				},
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Link DisplayName"),
				},
				InteractionType: to.Ptr("testInteraction4332"),
				LinkName:        to.Ptr("Somelink"),
				ProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
					{
						InteractionPropertyName: to.Ptr("profile1"),
						ProfilePropertyName:     to.Ptr("ProfileId"),
					}},
				RelatedProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
					{
						InteractionPropertyName: to.Ptr("profile1"),
						ProfilePropertyName:     to.Ptr("ProfileId"),
					}},
				RelationshipName: to.Ptr("testProfile2326994"),
			},
		},
		&armcustomerinsights.RelationshipLinksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.RelationshipLinkResourceFormat{
			Name: to.Ptr("sdkTestHub/Somelink"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/relationshipLinks"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/relationshipLinks/Somelink"),
			Properties: &armcustomerinsights.RelationshipLinkDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Link Description"),
				},
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Link DisplayName"),
				},
				InteractionType: to.Ptr("testInteraction4332"),
				LinkName:        to.Ptr("Somelink"),
				ProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
					{
						InteractionPropertyName: to.Ptr("profile1"),
						ProfilePropertyName:     to.Ptr("ProfileId"),
					}},
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				RelatedProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
					{
						InteractionPropertyName: to.Ptr("profile1"),
						ProfilePropertyName:     to.Ptr("ProfileId"),
					}},
				RelationshipName: to.Ptr("testProfile2326994"),
				TenantID:         to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RelationshipLinkResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RelationshipLinkResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRelationshipLinks_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelationshipLinks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipLinksClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"Somelink",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.RelationshipLinkResourceFormat{
			Name: to.Ptr("sdkTestHub/Somelink"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/relationshipLinks"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/relationshipLinks/Somelink"),
			Properties: &armcustomerinsights.RelationshipLinkDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Link Description"),
				},
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Link DisplayName"),
				},
				InteractionType: to.Ptr("testInteraction4332"),
				LinkName:        to.Ptr("Somelink"),
				ProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
					{
						InteractionPropertyName: to.Ptr("profile1"),
						ProfilePropertyName:     to.Ptr("ProfileId"),
					}},
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				RelatedProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
					{
						InteractionPropertyName: to.Ptr("profile1"),
						ProfilePropertyName:     to.Ptr("ProfileId"),
					}},
				RelationshipName: to.Ptr("testProfile2326994"),
				TenantID:         to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RelationshipLinkResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RelationshipLinkResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRelationshipLinks_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelationshipLinks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipLinksClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"Somelink",
		&armcustomerinsights.RelationshipLinksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksDelete.json: %v", err)
	}
}

func TestRelationshipLinks_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RelationshipLinks_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRelationshipLinksClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.RelationshipLinkListResult{
			Value: []*armcustomerinsights.RelationshipLinkResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/Somelink"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/relationshipLinks"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/relationshipLinks/Somelink"),
					Properties: &armcustomerinsights.RelationshipLinkDefinition{
						Description: map[string]*string{
							"en-us": to.Ptr("Link Description"),
						},
						DisplayName: map[string]*string{
							"en-us": to.Ptr("Link DisplayName"),
						},
						InteractionType: to.Ptr("testInteraction4332"),
						LinkName:        to.Ptr("Somelink"),
						ProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
							{
								InteractionPropertyName: to.Ptr("profile1"),
								ProfilePropertyName:     to.Ptr("ProfileId"),
							}},
						ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						RelatedProfilePropertyReferences: []*armcustomerinsights.ParticipantProfilePropertyReference{
							{
								InteractionPropertyName: to.Ptr("profile1"),
								ProfilePropertyName:     to.Ptr("ProfileId"),
							}},
						RelationshipName: to.Ptr("testProfile2326994"),
						TenantID:         to.Ptr("sdktesthub"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RelationshipLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RelationshipLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RelationshipLinksListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AuthorizationPolicies_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewAuthorizationPoliciesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"TestHubRG",
		"azSdkTestHub",
		"testPolicy4222",
		armcustomerinsights.AuthorizationPolicyResourceFormat{
			Properties: &armcustomerinsights.AuthorizationPolicy{
				Permissions: []*armcustomerinsights.PermissionTypes{
					to.Ptr(armcustomerinsights.PermissionTypesRead),
					to.Ptr(armcustomerinsights.PermissionTypesWrite),
					to.Ptr(armcustomerinsights.PermissionTypesManage)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.AuthorizationPolicyResourceFormat{
			Name: to.Ptr("testPolicy4222"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/AuthorizationPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups//TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/AuthorizationPolicies/testPolicy4222"),
			Properties: &armcustomerinsights.AuthorizationPolicy{
				Permissions: []*armcustomerinsights.PermissionTypes{
					to.Ptr(armcustomerinsights.PermissionTypesRead),
					to.Ptr(armcustomerinsights.PermissionTypesWrite),
					to.Ptr(armcustomerinsights.PermissionTypesManage)},
				PolicyName:   to.Ptr("testPolicy4222"),
				PrimaryKey:   to.Ptr("<primaryKey>"),
				SecondaryKey: to.Ptr("<secondaryKey>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationPolicyResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationPolicyResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationPolicies_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AuthorizationPolicies_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewAuthorizationPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"azSdkTestHub",
		"testPolicy4222",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.AuthorizationPolicyResourceFormat{
			Name: to.Ptr("azSdkTestHub/testPolicy4222"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/AuthorizationPolicies"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/AuthorizationPolicies/testPolicy4222"),
			Properties: &armcustomerinsights.AuthorizationPolicy{
				Permissions: []*armcustomerinsights.PermissionTypes{
					to.Ptr(armcustomerinsights.PermissionTypesRead),
					to.Ptr(armcustomerinsights.PermissionTypesWrite),
					to.Ptr(armcustomerinsights.PermissionTypesManage)},
				PolicyName:   to.Ptr("testPolicy4222"),
				PrimaryKey:   to.Ptr("<primaryKey>"),
				SecondaryKey: to.Ptr("<secondaryKey>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationPolicyResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationPolicyResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationPolicies_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AuthorizationPolicies_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewAuthorizationPoliciesClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"azSdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.AuthorizationPolicyListResult{
			Value: []*armcustomerinsights.AuthorizationPolicyResourceFormat{
				{
					Name: to.Ptr("azSdkTestHub/RootManageSharedAccessKey"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/AuthorizationPolicies"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/AuthorizationPolicies/RootManageSharedAccessKey"),
					Properties: &armcustomerinsights.AuthorizationPolicy{
						Permissions: []*armcustomerinsights.PermissionTypes{
							to.Ptr(armcustomerinsights.PermissionTypesRead),
							to.Ptr(armcustomerinsights.PermissionTypesWrite),
							to.Ptr(armcustomerinsights.PermissionTypesManage)},
						PolicyName:   to.Ptr("RootManageSharedAccessKey"),
						PrimaryKey:   to.Ptr("<primaryKey>"),
						SecondaryKey: to.Ptr("<secondaryKey>"),
					},
				},
				{
					Name: to.Ptr("azSdkTestHub/testPolicy1125"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/AuthorizationPolicies"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/AuthorizationPolicies/testPolicy1125"),
					Properties: &armcustomerinsights.AuthorizationPolicy{
						Permissions: []*armcustomerinsights.PermissionTypes{
							to.Ptr(armcustomerinsights.PermissionTypesRead),
							to.Ptr(armcustomerinsights.PermissionTypesWrite),
							to.Ptr(armcustomerinsights.PermissionTypesManage)},
						PolicyName:   to.Ptr("testPolicy1125"),
						PrimaryKey:   to.Ptr("<primaryKey>"),
						SecondaryKey: to.Ptr("<secondaryKey>"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AuthorizationPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AuthorizationPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationPolicies_RegeneratePrimaryKey(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesRegeneratePrimaryKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AuthorizationPolicies_RegeneratePrimaryKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewAuthorizationPoliciesClient("subid", cred, &options)
	res, err := client.RegeneratePrimaryKey(ctx,
		"TestHubRG",
		"azSdkTestHub",
		"testPolicy4222",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesRegeneratePrimaryKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.AuthorizationPolicy{
			Permissions: []*armcustomerinsights.PermissionTypes{
				to.Ptr(armcustomerinsights.PermissionTypesRead),
				to.Ptr(armcustomerinsights.PermissionTypesWrite),
				to.Ptr(armcustomerinsights.PermissionTypesManage)},
			PolicyName:   to.Ptr("testPolicy4009"),
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesRegeneratePrimaryKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationPolicies_RegenerateSecondaryKey(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesRegenerateSecondaryKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AuthorizationPolicies_RegenerateSecondaryKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewAuthorizationPoliciesClient("subid", cred, &options)
	res, err := client.RegenerateSecondaryKey(ctx,
		"TestHubRG",
		"azSdkTestHub",
		"testPolicy4222",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesRegenerateSecondaryKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.AuthorizationPolicy{
			Permissions: []*armcustomerinsights.PermissionTypes{
				to.Ptr(armcustomerinsights.PermissionTypesRead),
				to.Ptr(armcustomerinsights.PermissionTypesWrite),
				to.Ptr(armcustomerinsights.PermissionTypesManage)},
			PolicyName:   to.Ptr("testPolicy4009"),
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/AuthorizationPoliciesRegenerateSecondaryKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectors_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connectors_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testConnector",
		armcustomerinsights.ConnectorResourceFormat{
			Properties: &armcustomerinsights.Connector{
				Description: to.Ptr("Test connector"),
				ConnectorProperties: map[string]interface{}{
					"connectionKeyVaultUrl": map[string]interface{}{
						"organizationId":  "XXX",
						"organizationUrl": "https://XXX.crmlivetie.com/",
					},
				},
				ConnectorType: to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
				DisplayName:   to.Ptr("testConnector"),
			},
		},
		&armcustomerinsights.ConnectorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ConnectorResourceFormat{
			Name: to.Ptr("sdkTestHub/testConnector"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/connectors"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/connectors/testConnector"),
			Properties: &armcustomerinsights.Connector{
				Description:   to.Ptr("Test connector"),
				ConnectorID:   to.Ptr[int32](0),
				ConnectorName: to.Ptr("testConnector"),
				ConnectorProperties: map[string]interface{}{
					"connectionKeyVaultUrl": map[string]interface{}{
						"organizationId":  "XXX",
						"organizationUrl": "https://XXX.crmlivetie.com/",
					},
				},
				ConnectorType: to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
				DisplayName:   to.Ptr("testConnector"),
				State:         to.Ptr(armcustomerinsights.ConnectorStatesCreating),
				TenantID:      to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectors_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connectors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testConnector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ConnectorResourceFormat{
			Name: to.Ptr("sdkTestHub/testConnector"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/connectors"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/connectors/testConnector"),
			Properties: &armcustomerinsights.Connector{
				Description:   to.Ptr("Test connector"),
				ConnectorID:   to.Ptr[int32](0),
				ConnectorName: to.Ptr("testConnector"),
				ConnectorProperties: map[string]interface{}{
					"connectionKeyVaultUrl": map[string]interface{}{
						"organizationId":  "XXX",
						"organizationUrl": "https://XXX.crmlivetie.com/",
					},
				},
				ConnectorType: to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
				DisplayName:   to.Ptr("testConnector"),
				State:         to.Ptr(armcustomerinsights.ConnectorStatesCreating),
				TenantID:      to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectors_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connectors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testConnector",
		&armcustomerinsights.ConnectorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsDelete.json: %v", err)
	}
}

func TestConnectors_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Connectors_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorsClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.ConnectorListResult{
			Value: []*armcustomerinsights.ConnectorResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/testConnector"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/connectors"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/connectors/testConnector"),
					Properties: &armcustomerinsights.Connector{
						Description:   to.Ptr("Test connector"),
						ConnectorID:   to.Ptr[int32](0),
						ConnectorName: to.Ptr("testConnector"),
						ConnectorProperties: map[string]interface{}{
							"connectionKeyVaultUrl": map[string]interface{}{
								"organizationId":  "XXX",
								"organizationUrl": "https://XXX.crmlivetie.com/",
							},
						},
						ConnectorType: to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
						DisplayName:   to.Ptr("testConnector"),
						State:         to.Ptr(armcustomerinsights.ConnectorStatesCreating),
						TenantID:      to.Ptr("sdktesthub"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorsListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectorMappings_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectorMappings_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorMappingsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testConnector8858",
		"testMapping12491",
		armcustomerinsights.ConnectorMappingResourceFormat{
			Properties: &armcustomerinsights.ConnectorMapping{
				Description:    to.Ptr("Test mapping"),
				DisplayName:    to.Ptr("testMapping12491"),
				EntityType:     to.Ptr(armcustomerinsights.EntityTypesInteraction),
				EntityTypeName: to.Ptr("TestInteractionType2967"),
				MappingProperties: &armcustomerinsights.ConnectorMappingProperties{
					Format: &armcustomerinsights.ConnectorMappingFormat{
						ColumnDelimiter: to.Ptr("|"),
						FormatType:      to.Ptr("TextFormat"),
					},
					Availability: &armcustomerinsights.ConnectorMappingAvailability{
						Frequency: to.Ptr(armcustomerinsights.FrequencyTypesHour),
						Interval:  to.Ptr[int32](5),
					},
					CompleteOperation: &armcustomerinsights.ConnectorMappingCompleteOperation{
						CompletionOperationType: to.Ptr(armcustomerinsights.CompletionOperationTypesDeleteFile),
						DestinationFolder:       to.Ptr("fakePath"),
					},
					ErrorManagement: &armcustomerinsights.ConnectorMappingErrorManagement{
						ErrorLimit:          to.Ptr[int32](10),
						ErrorManagementType: to.Ptr(armcustomerinsights.ErrorManagementTypesStopImport),
					},
					FileFilter: to.Ptr("unknown"),
					FolderPath: to.Ptr("http://sample.dne/file"),
					HasHeader:  to.Ptr(false),
					Structure: []*armcustomerinsights.ConnectorMappingStructure{
						{
							ColumnName:   to.Ptr("unknown1"),
							IsEncrypted:  to.Ptr(false),
							PropertyName: to.Ptr("unknwon1"),
						},
						{
							ColumnName:   to.Ptr("unknown2"),
							IsEncrypted:  to.Ptr(true),
							PropertyName: to.Ptr("unknwon2"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ConnectorMappingResourceFormat{
			Name: to.Ptr("sdkTestHub/testConnector8858/testMapping12491"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/mappings"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/connectors/testConnector8858/mappings/testMapping12491"),
			Properties: &armcustomerinsights.ConnectorMapping{
				Description:          to.Ptr("Test mapping"),
				ConnectorMappingName: to.Ptr("testMapping12491"),
				ConnectorName:        to.Ptr("testConnector8858"),
				ConnectorType:        to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
				DataFormatID:         to.Ptr("4619d4e7e8a64c1e9bc34907f9f46505"),
				DisplayName:          to.Ptr("testMapping12491"),
				EntityType:           to.Ptr(armcustomerinsights.EntityTypesInteraction),
				EntityTypeName:       to.Ptr("TestInteractionType2967"),
				MappingProperties: &armcustomerinsights.ConnectorMappingProperties{
					Format: &armcustomerinsights.ConnectorMappingFormat{
						AcceptLanguage:       to.Ptr(""),
						ArraySeparator:       to.Ptr(";"),
						ColumnDelimiter:      to.Ptr("|"),
						FormatType:           to.Ptr("TextFormat"),
						QuoteCharacter:       to.Ptr("\\\""),
						QuoteEscapeCharacter: to.Ptr("\\\""),
					},
					Availability: &armcustomerinsights.ConnectorMappingAvailability{
						Frequency: to.Ptr(armcustomerinsights.FrequencyTypesHour),
						Interval:  to.Ptr[int32](5),
					},
					CompleteOperation: &armcustomerinsights.ConnectorMappingCompleteOperation{
						CompletionOperationType: to.Ptr(armcustomerinsights.CompletionOperationTypesDeleteFile),
						DestinationFolder:       to.Ptr("fakePath"),
					},
					ErrorManagement: &armcustomerinsights.ConnectorMappingErrorManagement{
						ErrorLimit:          to.Ptr[int32](10),
						ErrorManagementType: to.Ptr(armcustomerinsights.ErrorManagementTypesStopImport),
					},
					FileFilter: to.Ptr("unknown"),
					FolderPath: to.Ptr("http://sample.dne/file"),
					HasHeader:  to.Ptr(false),
					Structure: []*armcustomerinsights.ConnectorMappingStructure{
						{
							ColumnName:   to.Ptr("unknown1"),
							IsEncrypted:  to.Ptr(false),
							PropertyName: to.Ptr("unknwon1"),
						},
						{
							ColumnName:   to.Ptr("unknown2"),
							IsEncrypted:  to.Ptr(true),
							PropertyName: to.Ptr("unknwon2"),
						}},
				},
				State:    to.Ptr(armcustomerinsights.ConnectorMappingStatesCreated),
				TenantID: to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorMappingResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorMappingResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectorMappings_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectorMappings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorMappingsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testConnector8858",
		"testMapping12491",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ConnectorMappingResourceFormat{
			Name: to.Ptr("sdkTestHub/testConnector8858/testMapping12491"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/mappings"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/connectors/testConnector8858/mappings/testMapping12491"),
			Properties: &armcustomerinsights.ConnectorMapping{
				Description:          to.Ptr("Test mapping"),
				ConnectorMappingName: to.Ptr("testMapping12491"),
				ConnectorName:        to.Ptr("testConnector8858"),
				ConnectorType:        to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
				DataFormatID:         to.Ptr("4619d4e7e8a64c1e9bc34907f9f46505"),
				DisplayName:          to.Ptr("testMapping12491"),
				EntityType:           to.Ptr(armcustomerinsights.EntityTypesInteraction),
				EntityTypeName:       to.Ptr("TestInteractionType2967"),
				MappingProperties: &armcustomerinsights.ConnectorMappingProperties{
					Format: &armcustomerinsights.ConnectorMappingFormat{
						AcceptLanguage:       to.Ptr(""),
						ArraySeparator:       to.Ptr(";"),
						ColumnDelimiter:      to.Ptr("|"),
						FormatType:           to.Ptr("TextFormat"),
						QuoteCharacter:       to.Ptr("\\\""),
						QuoteEscapeCharacter: to.Ptr("\\\""),
					},
					Availability: &armcustomerinsights.ConnectorMappingAvailability{
						Frequency: to.Ptr(armcustomerinsights.FrequencyTypesHour),
						Interval:  to.Ptr[int32](5),
					},
					CompleteOperation: &armcustomerinsights.ConnectorMappingCompleteOperation{
						CompletionOperationType: to.Ptr(armcustomerinsights.CompletionOperationTypesDeleteFile),
						DestinationFolder:       to.Ptr("fakePath"),
					},
					ErrorManagement: &armcustomerinsights.ConnectorMappingErrorManagement{
						ErrorLimit:          to.Ptr[int32](10),
						ErrorManagementType: to.Ptr(armcustomerinsights.ErrorManagementTypesStopImport),
					},
					FileFilter: to.Ptr("unknown"),
					FolderPath: to.Ptr("http://sample.dne/file"),
					HasHeader:  to.Ptr(false),
					Structure: []*armcustomerinsights.ConnectorMappingStructure{
						{
							ColumnName:   to.Ptr("unknown1"),
							IsEncrypted:  to.Ptr(false),
							PropertyName: to.Ptr("unknwon1"),
						},
						{
							ColumnName:   to.Ptr("unknown2"),
							IsEncrypted:  to.Ptr(true),
							PropertyName: to.Ptr("unknwon2"),
						}},
				},
				State:    to.Ptr(armcustomerinsights.ConnectorMappingStatesCreated),
				TenantID: to.Ptr("sdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorMappingResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorMappingResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectorMappings_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectorMappings_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorMappingsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testConnector8858",
		"testMapping12491",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsDelete.json: %v", err)
	}
}

func TestConnectorMappings_ListByConnector(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsListByConnector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectorMappings_ListByConnector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewConnectorMappingsClient("subid", cred, &options)
	pager := client.ListByConnector("TestHubRG",
		"sdkTestHub",
		"testConnector8858",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsListByConnector.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.ConnectorMappingListResult{
			Value: []*armcustomerinsights.ConnectorMappingResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/testConnector8858/testMapping12491"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/connectors/mappings"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/connectors/testConnector8858/mappings/testMapping12491"),
					Properties: &armcustomerinsights.ConnectorMapping{
						Description:          to.Ptr("Test mapping"),
						ConnectorMappingName: to.Ptr("testMapping12491"),
						ConnectorName:        to.Ptr("testConnector8858"),
						ConnectorType:        to.Ptr(armcustomerinsights.ConnectorTypesAzureBlob),
						DataFormatID:         to.Ptr("4619d4e7e8a64c1e9bc34907f9f46505"),
						DisplayName:          to.Ptr("testMapping12491"),
						EntityType:           to.Ptr(armcustomerinsights.EntityTypesInteraction),
						EntityTypeName:       to.Ptr("TestInteractionType2967"),
						MappingProperties: &armcustomerinsights.ConnectorMappingProperties{
							Format: &armcustomerinsights.ConnectorMappingFormat{
								AcceptLanguage:       to.Ptr(""),
								ArraySeparator:       to.Ptr(";"),
								ColumnDelimiter:      to.Ptr("|"),
								FormatType:           to.Ptr("TextFormat"),
								QuoteCharacter:       to.Ptr("\\\""),
								QuoteEscapeCharacter: to.Ptr("\\\""),
							},
							Availability: &armcustomerinsights.ConnectorMappingAvailability{
								Frequency: to.Ptr(armcustomerinsights.FrequencyTypesHour),
								Interval:  to.Ptr[int32](5),
							},
							CompleteOperation: &armcustomerinsights.ConnectorMappingCompleteOperation{
								CompletionOperationType: to.Ptr(armcustomerinsights.CompletionOperationTypesDeleteFile),
								DestinationFolder:       to.Ptr("fakePath"),
							},
							ErrorManagement: &armcustomerinsights.ConnectorMappingErrorManagement{
								ErrorLimit:          to.Ptr[int32](10),
								ErrorManagementType: to.Ptr(armcustomerinsights.ErrorManagementTypesStopImport),
							},
							FileFilter: to.Ptr("unknown"),
							FolderPath: to.Ptr("http://sample.dne/file"),
							HasHeader:  to.Ptr(false),
							Structure: []*armcustomerinsights.ConnectorMappingStructure{
								{
									ColumnName:   to.Ptr("unknown1"),
									IsEncrypted:  to.Ptr(false),
									PropertyName: to.Ptr("unknwon1"),
								},
								{
									ColumnName:   to.Ptr("unknown2"),
									IsEncrypted:  to.Ptr(true),
									PropertyName: to.Ptr("unknwon2"),
								}},
						},
						State:    to.Ptr(armcustomerinsights.ConnectorMappingStatesCreated),
						TenantID: to.Ptr("sdktesthub"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectorMappingListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectorMappingListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ConnectorMappingsListByConnector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKpi_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kpi_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewKpiClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"kpiTest45453647",
		armcustomerinsights.KpiResourceFormat{
			Properties: &armcustomerinsights.KpiDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Kpi Description"),
				},
				Aliases: []*armcustomerinsights.KpiAlias{
					{
						AliasName:  to.Ptr("alias"),
						Expression: to.Ptr("Id+4"),
					}},
				CalculationWindow: to.Ptr(armcustomerinsights.CalculationWindowTypesDay),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Kpi DisplayName"),
				},
				EntityType:     to.Ptr(armcustomerinsights.EntityTypesProfile),
				EntityTypeName: to.Ptr("testProfile2327128"),
				Expression:     to.Ptr("SavingAccountBalance"),
				Function:       to.Ptr(armcustomerinsights.KpiFunctionsSum),
				GroupBy: []*string{
					to.Ptr("SavingAccountBalance")},
				ThresHolds: &armcustomerinsights.KpiThresholds{
					IncreasingKpi: to.Ptr(true),
					LowerLimit:    to.Ptr[float64](5),
					UpperLimit:    to.Ptr[float64](50),
				},
				Unit: to.Ptr("unit"),
			},
		},
		&armcustomerinsights.KpiClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.KpiResourceFormat{
			Name: to.Ptr("sdkTestHub/kpiTest45453647"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/kpi"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/kpi/kpiTest45453647"),
			Properties: &armcustomerinsights.KpiDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Kpi Description"),
				},
				Aliases: []*armcustomerinsights.KpiAlias{
					{
						AliasName:  to.Ptr("alias"),
						Expression: to.Ptr("Id+4"),
					}},
				CalculationWindow: to.Ptr(armcustomerinsights.CalculationWindowTypesDay),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Kpi DisplayName"),
				},
				EntityType:     to.Ptr(armcustomerinsights.EntityTypesProfile),
				EntityTypeName: to.Ptr("testProfile2327128"),
				Expression:     to.Ptr("SavingAccountBalance"),
				Function:       to.Ptr(armcustomerinsights.KpiFunctionsSum),
				GroupBy: []*string{
					to.Ptr("SavingAccountBalance")},
				KpiName:           to.Ptr("kpiTest45453647"),
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				TenantID:          to.Ptr("sdktesthub"),
				ThresHolds: &armcustomerinsights.KpiThresholds{
					IncreasingKpi: to.Ptr(true),
					LowerLimit:    to.Ptr[float64](5),
					UpperLimit:    to.Ptr[float64](50),
				},
				Unit: to.Ptr("unit"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KpiResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KpiResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKpi_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kpi_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewKpiClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"kpiTest45453647",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.KpiResourceFormat{
			Name: to.Ptr("sdkTestHub/kpiTest45453647"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/kpi"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/kpi/kpiTest45453647"),
			Properties: &armcustomerinsights.KpiDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Kpi Description"),
				},
				Aliases: []*armcustomerinsights.KpiAlias{
					{
						AliasName:  to.Ptr("alias"),
						Expression: to.Ptr("Id+4"),
					}},
				CalculationWindow: to.Ptr(armcustomerinsights.CalculationWindowTypesDay),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Kpi DisplayName"),
				},
				EntityType:     to.Ptr(armcustomerinsights.EntityTypesProfile),
				EntityTypeName: to.Ptr("testProfile2327128"),
				Expression:     to.Ptr("SavingAccountBalance"),
				Function:       to.Ptr(armcustomerinsights.KpiFunctionsSum),
				GroupBy: []*string{
					to.Ptr("SavingAccountBalance")},
				KpiName:           to.Ptr("kpiTest45453647"),
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				TenantID:          to.Ptr("sdktesthub"),
				ThresHolds: &armcustomerinsights.KpiThresholds{
					IncreasingKpi: to.Ptr(true),
					LowerLimit:    to.Ptr[float64](5),
					UpperLimit:    to.Ptr[float64](50),
				},
				Unit: to.Ptr("unit"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KpiResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KpiResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKpi_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kpi_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewKpiClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"kpiTest45453647",
		&armcustomerinsights.KpiClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiDelete.json: %v", err)
	}
}

func TestKpi_Reprocess(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiReprocess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kpi_Reprocess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewKpiClient("subid", cred, &options)
	_, err := client.Reprocess(ctx,
		"TestHubRG",
		"sdkTestHub",
		"kpiTest45453647",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiReprocess.json: %v", err)
	}
}

func TestKpi_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Kpi_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewKpiClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.KpiListResult{
			Value: []*armcustomerinsights.KpiResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/kpiTest45453647"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/kpi"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/kpi/kpiTest45453647"),
					Properties: &armcustomerinsights.KpiDefinition{
						Description: map[string]*string{
							"en-us": to.Ptr("Kpi Description"),
						},
						Aliases: []*armcustomerinsights.KpiAlias{
							{
								AliasName:  to.Ptr("alias"),
								Expression: to.Ptr("Id+4"),
							}},
						CalculationWindow: to.Ptr(armcustomerinsights.CalculationWindowTypesDay),
						DisplayName: map[string]*string{
							"en-us": to.Ptr("Kpi DisplayName"),
						},
						EntityType:     to.Ptr(armcustomerinsights.EntityTypesProfile),
						EntityTypeName: to.Ptr("testProfile2327128"),
						Expression:     to.Ptr("SavingAccountBalance"),
						Function:       to.Ptr(armcustomerinsights.KpiFunctionsSum),
						GroupBy: []*string{
							to.Ptr("SavingAccountBalance")},
						KpiName:           to.Ptr("kpiTest45453647"),
						ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						TenantID:          to.Ptr("sdktesthub"),
						ThresHolds: &armcustomerinsights.KpiThresholds{
							IncreasingKpi: to.Ptr(true),
							LowerLimit:    to.Ptr[float64](5),
							UpperLimit:    to.Ptr[float64](50),
						},
						Unit: to.Ptr("unit"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KpiListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KpiListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/KpiListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWidgetTypes_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/WidgetTypesListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WidgetTypes_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewWidgetTypesClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/WidgetTypesListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.WidgetTypeListResult{
			Value: []*armcustomerinsights.WidgetTypeResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/ActivityGauge"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/widgetTypes"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/widgetTypes/ActivityGauge"),
					Properties: &armcustomerinsights.WidgetType{
						Description:    to.Ptr(""),
						Definition:     to.Ptr(""),
						ImageURL:       to.Ptr(""),
						TenantID:       to.Ptr("*"),
						WidgetTypeName: to.Ptr("ActivityGauge"),
						WidgetVersion:  to.Ptr("2016-01-01"),
					},
				},
				{
					Name: to.Ptr("sdkTestHub/AsterChart"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/widgetTypes"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/widgetTypes/AsterChart"),
					Properties: &armcustomerinsights.WidgetType{
						Description:    to.Ptr(""),
						Definition:     to.Ptr(""),
						ImageURL:       to.Ptr(""),
						TenantID:       to.Ptr("*"),
						WidgetTypeName: to.Ptr("AsterChart"),
						WidgetVersion:  to.Ptr("2016-01-01"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WidgetTypeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WidgetTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/WidgetTypesListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWidgetTypes_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/WidgetTypesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WidgetTypes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewWidgetTypesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"ActivityGauge",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/WidgetTypesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.WidgetTypeResourceFormat{
			Name: to.Ptr("sdkTestHub/ActivityGauge"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/widgetTypes"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/widgetTypes/ActivityGauge"),
			Properties: &armcustomerinsights.WidgetType{
				Description:    to.Ptr(""),
				Definition:     to.Ptr(""),
				ImageURL:       to.Ptr(""),
				TenantID:       to.Ptr("*"),
				WidgetTypeName: to.Ptr("ActivityGauge"),
				WidgetVersion:  to.Ptr("2016-01-01"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WidgetTypeResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WidgetTypeResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/WidgetTypesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Views_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewViewsClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		"*",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.ViewListResult{
			Value: []*armcustomerinsights.ViewResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/testView"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/views"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/views/testView"),
					Properties: &armcustomerinsights.View{
						Definition: to.Ptr("{\\\"isProfileType\\\":false,\\\"profileTypes\\\":[],\\\"widgets\\\":[],\\\"style\\\":[]}"),
						DisplayName: map[string]*string{
							"en": to.Ptr("some name"),
						},
						TenantID: to.Ptr("sdktesthub"),
						UserID:   to.Ptr("*"),
						ViewName: to.Ptr("testView"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ViewListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ViewListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Views_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewViewsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testView",
		armcustomerinsights.ViewResourceFormat{
			Properties: &armcustomerinsights.View{
				Definition: to.Ptr("{\\\"isProfileType\\\":false,\\\"profileTypes\\\":[],\\\"widgets\\\":[],\\\"style\\\":[]}"),
				DisplayName: map[string]*string{
					"en": to.Ptr("some name"),
				},
				UserID: to.Ptr("testUser"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ViewResourceFormat{
			Name: to.Ptr("sdkTestHub/testView"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/views"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/views/testView"),
			Properties: &armcustomerinsights.View{
				Definition: to.Ptr("{\\\"isProfileType\\\":false,\\\"profileTypes\\\":[],\\\"widgets\\\":[],\\\"style\\\":[]}"),
				DisplayName: map[string]*string{
					"en": to.Ptr("some name"),
				},
				TenantID: to.Ptr("sdktesthub"),
				UserID:   to.Ptr("*"),
				ViewName: to.Ptr("testView"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ViewResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ViewResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Views_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewViewsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testView",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.ViewResourceFormat{
			Name: to.Ptr("sdkTestHub/testView"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/views"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/sdkTestHub/views/testView"),
			Properties: &armcustomerinsights.View{
				Definition: to.Ptr("{\\\"isProfileType\\\":false,\\\"profileTypes\\\":[],\\\"widgets\\\":[],\\\"style\\\":[]}"),
				DisplayName: map[string]*string{
					"en": to.Ptr("some name"),
				},
				TenantID: to.Ptr("sdktesthub"),
				UserID:   to.Ptr("*"),
				ViewName: to.Ptr("testView"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ViewResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ViewResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Views_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewViewsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"testView",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/ViewsDelete.json: %v", err)
	}
}

func TestLinks_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Links_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewLinksClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"linkTest4806",
		armcustomerinsights.LinkResourceFormat{
			Properties: &armcustomerinsights.LinkDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Link Description"),
				},
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Link DisplayName"),
				},
				LinkName: to.Ptr("linkTest4806"),
				Mappings: []*armcustomerinsights.TypePropertiesMapping{
					{
						LinkType:           to.Ptr(armcustomerinsights.LinkTypesUpdateAlways),
						SourcePropertyName: to.Ptr("testInteraction1949"),
						TargetPropertyName: to.Ptr("testProfile1446"),
					}},
				ParticipantPropertyReferences: []*armcustomerinsights.ParticipantPropertyReference{
					{
						SourcePropertyName: to.Ptr("testInteraction1949"),
						TargetPropertyName: to.Ptr("ProfileId"),
					}},
				SourceEntityType:     to.Ptr(armcustomerinsights.EntityTypeInteraction),
				SourceEntityTypeName: to.Ptr("testInteraction1949"),
				TargetEntityType:     to.Ptr(armcustomerinsights.EntityTypeProfile),
				TargetEntityTypeName: to.Ptr("testProfile1446"),
			},
		},
		&armcustomerinsights.LinksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.LinkResourceFormat{
			Name: to.Ptr("azSdkTestHub/linkTest4806"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/links"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/links/linkTest4806"),
			Properties: &armcustomerinsights.LinkDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Link Description"),
				},
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Link DisplayName"),
				},
				LinkName: to.Ptr("linkTest4806"),
				Mappings: []*armcustomerinsights.TypePropertiesMapping{
					{
						LinkType:           to.Ptr(armcustomerinsights.LinkTypesUpdateAlways),
						SourcePropertyName: to.Ptr("testInteraction1949"),
						TargetPropertyName: to.Ptr("testProfile1446"),
					}},
				ParticipantPropertyReferences: []*armcustomerinsights.ParticipantPropertyReference{
					{
						SourcePropertyName: to.Ptr("testInteraction1949"),
						TargetPropertyName: to.Ptr("ProfileId"),
					}},
				ProvisioningState:    to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				ReferenceOnly:        to.Ptr(false),
				SourceEntityType:     to.Ptr(armcustomerinsights.EntityTypeInteraction),
				SourceEntityTypeName: to.Ptr("testInteraction1949"),
				TargetEntityType:     to.Ptr(armcustomerinsights.EntityTypeProfile),
				TargetEntityTypeName: to.Ptr("testProfile1446"),
				TenantID:             to.Ptr("azsdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinks_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Links_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewLinksClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"linkTest4806",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.LinkResourceFormat{
			Name: to.Ptr("azSdkTestHub/linkTest4806"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/links"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/links/linkTest4806"),
			Properties: &armcustomerinsights.LinkDefinition{
				Description: map[string]*string{
					"en-us": to.Ptr("Link Description"),
				},
				DisplayName: map[string]*string{
					"en-us": to.Ptr("Link DisplayName"),
				},
				LinkName: to.Ptr("linkTest4806"),
				Mappings: []*armcustomerinsights.TypePropertiesMapping{
					{
						LinkType:           to.Ptr(armcustomerinsights.LinkTypesUpdateAlways),
						SourcePropertyName: to.Ptr("testInteraction1949"),
						TargetPropertyName: to.Ptr("testProfile1446"),
					}},
				ParticipantPropertyReferences: []*armcustomerinsights.ParticipantPropertyReference{
					{
						SourcePropertyName: to.Ptr("testInteraction1949"),
						TargetPropertyName: to.Ptr("ProfileId"),
					}},
				ProvisioningState:    to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				ReferenceOnly:        to.Ptr(false),
				SourceEntityType:     to.Ptr(armcustomerinsights.EntityTypeInteraction),
				SourceEntityTypeName: to.Ptr("testInteraction1949"),
				TargetEntityType:     to.Ptr(armcustomerinsights.EntityTypeProfile),
				TargetEntityTypeName: to.Ptr("testProfile1446"),
				TenantID:             to.Ptr("azsdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinks_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Links_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewLinksClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"linkTest4806",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksDelete.json: %v", err)
	}
}

func TestLinks_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Links_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewLinksClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.LinkListResult{
			Value: []*armcustomerinsights.LinkResourceFormat{
				{
					Name: to.Ptr("azSdkTestHub/linkTest4806"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/links"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/links/linkTest4806"),
					Properties: &armcustomerinsights.LinkDefinition{
						Description: map[string]*string{
							"en-us": to.Ptr("Link Description"),
						},
						DisplayName: map[string]*string{
							"en-us": to.Ptr("Link DisplayName"),
						},
						LinkName: to.Ptr("linkTest4806"),
						Mappings: []*armcustomerinsights.TypePropertiesMapping{
							{
								LinkType:           to.Ptr(armcustomerinsights.LinkTypesUpdateAlways),
								SourcePropertyName: to.Ptr("testInteraction1949"),
								TargetPropertyName: to.Ptr("testProfile1446"),
							}},
						ParticipantPropertyReferences: []*armcustomerinsights.ParticipantPropertyReference{
							{
								SourcePropertyName: to.Ptr("testInteraction1949"),
								TargetPropertyName: to.Ptr("ProfileId"),
							}},
						ProvisioningState:    to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						ReferenceOnly:        to.Ptr(false),
						SourceEntityType:     to.Ptr(armcustomerinsights.EntityTypeInteraction),
						SourceEntityTypeName: to.Ptr("testInteraction1949"),
						TargetEntityType:     to.Ptr(armcustomerinsights.EntityTypeProfile),
						TargetEntityTypeName: to.Ptr("testProfile1446"),
						TenantID:             to.Ptr("azsdktesthub"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/LinksListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RolesListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Roles_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRolesClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RolesListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.RoleListResult{
			Value: []*armcustomerinsights.RoleResourceFormat{
				{
					Name: to.Ptr("azSdkTestHub/Admin"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/Roles"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/Roles/Admin"),
					Properties: &armcustomerinsights.Role{
						Description: to.Ptr("When a role assignment is created for the Admin Role on certain scopes (selected profiles, interactions, Kpis etc.), it authorizes the users/groups selected in the assignment for ALL operations at the tenant endpoint on the selected scopes."),
						RoleName:    to.Ptr("Admin"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RolesListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoleAssignments_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleAssignments_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRoleAssignmentsClient("subid", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.RoleAssignmentListResult{
			Value: []*armcustomerinsights.RoleAssignmentResourceFormat{
				{
					Name: to.Ptr("azSdkTestHub/assignmentName8976"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/RoleAssignments"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/RoleAssignments/assignmentName8976"),
					Properties: &armcustomerinsights.RoleAssignment{
						AssignmentName: to.Ptr("assignmentName8976"),
						Principals: []*armcustomerinsights.AssignmentPrincipal{
							{
								PrincipalID:   to.Ptr("4c54c38f-fa9b-416b-a5a6-d6c8a20cbe7e"),
								PrincipalType: to.Ptr("User"),
							},
							{
								PrincipalID:   to.Ptr("93061d15-a505-4f2b-9948-ae25724cf9d5"),
								PrincipalType: to.Ptr("User"),
							}},
						ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						Role:              to.Ptr(armcustomerinsights.RoleTypesAdmin),
						TenantID:          to.Ptr("azsdktesthub"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoleAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleAssignments_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRoleAssignmentsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"assignmentName8976",
		armcustomerinsights.RoleAssignmentResourceFormat{
			Properties: &armcustomerinsights.RoleAssignment{
				Principals: []*armcustomerinsights.AssignmentPrincipal{
					{
						PrincipalID:   to.Ptr("4c54c38ffa9b416ba5a6d6c8a20cbe7e"),
						PrincipalType: to.Ptr("User"),
					},
					{
						PrincipalID:   to.Ptr("93061d15a5054f2b9948ae25724cf9d5"),
						PrincipalType: to.Ptr("User"),
					}},
				Role: to.Ptr(armcustomerinsights.RoleTypesAdmin),
			},
		},
		&armcustomerinsights.RoleAssignmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.RoleAssignmentResourceFormat{
			Name: to.Ptr("azSdkTestHub/assignmentName8976"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/RoleAssignments"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/RoleAssignments/assignmentName8976"),
			Properties: &armcustomerinsights.RoleAssignment{
				AssignmentName: to.Ptr("assignmentName8976"),
				Principals: []*armcustomerinsights.AssignmentPrincipal{
					{
						PrincipalID:   to.Ptr("4c54c38f-fa9b-416b-a5a6-d6c8a20cbe7e"),
						PrincipalType: to.Ptr("User"),
					},
					{
						PrincipalID:   to.Ptr("93061d15-a505-4f2b-9948-ae25724cf9d5"),
						PrincipalType: to.Ptr("User"),
					}},
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				Role:              to.Ptr(armcustomerinsights.RoleTypesAdmin),
				TenantID:          to.Ptr("azsdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignmentResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignmentResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoleAssignments_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleAssignments_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRoleAssignmentsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"assignmentName8976",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.RoleAssignmentResourceFormat{
			Name: to.Ptr("azSdkTestHub/assignmentName8976"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/RoleAssignments"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/RoleAssignments/assignmentName8976"),
			Properties: &armcustomerinsights.RoleAssignment{
				AssignmentName: to.Ptr("assignmentName8976"),
				Principals: []*armcustomerinsights.AssignmentPrincipal{
					{
						PrincipalID:   to.Ptr("4c54c38f-fa9b-416b-a5a6-d6c8a20cbe7e"),
						PrincipalType: to.Ptr("User"),
					},
					{
						PrincipalID:   to.Ptr("93061d15-a505-4f2b-9948-ae25724cf9d5"),
						PrincipalType: to.Ptr("User"),
					}},
				ProvisioningState: to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				Role:              to.Ptr(armcustomerinsights.RoleTypesAdmin),
				TenantID:          to.Ptr("azsdktesthub"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleAssignmentResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleAssignmentResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoleAssignments_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleAssignments_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewRoleAssignmentsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"assignmentName8976",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/RoleAssignmentsDelete.json: %v", err)
	}
}

func TestPredictions_CreateOrUpdate(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestHubRG",
		"sdkTestHub",
		"sdktest",
		armcustomerinsights.PredictionResourceFormat{
			Properties: &armcustomerinsights.Prediction{
				Description: map[string]*string{
					"en-us": to.Ptr("sdktest"),
				},
				AutoAnalyze: to.Ptr(true),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("sdktest"),
				},
				Grades:                   []*armcustomerinsights.PredictionGradesItem{},
				InvolvedInteractionTypes: []*string{},
				InvolvedKpiTypes:         []*string{},
				InvolvedRelationships:    []*string{},
				Mappings: &armcustomerinsights.PredictionMappings{
					Grade:  to.Ptr("sdktest_Grade"),
					Reason: to.Ptr("sdktest_Reason"),
					Score:  to.Ptr("sdktest_Score"),
				},
				NegativeOutcomeExpression: to.Ptr("Customers.FirstName = 'Mike'"),
				PositiveOutcomeExpression: to.Ptr("Customers.FirstName = 'David'"),
				PredictionName:            to.Ptr("sdktest"),
				PrimaryProfileType:        to.Ptr("Customers"),
				ScopeExpression:           to.Ptr("*"),
				ScoreLabel:                to.Ptr("score label"),
			},
		},
		&armcustomerinsights.PredictionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.PredictionResourceFormat{
			Name: to.Ptr("sdkTestHub/sdktest"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/predictions"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/predictions/sdktest"),
			Properties: &armcustomerinsights.Prediction{
				Description: map[string]*string{
					"en-us": to.Ptr("sdktest"),
				},
				AutoAnalyze: to.Ptr(true),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("sdktest"),
				},
				Grades:                   []*armcustomerinsights.PredictionGradesItem{},
				InvolvedInteractionTypes: []*string{},
				InvolvedKpiTypes:         []*string{},
				InvolvedRelationships:    []*string{},
				Mappings: &armcustomerinsights.PredictionMappings{
					Grade:  to.Ptr("sdktest_Grade"),
					Reason: to.Ptr("sdktest_Reason"),
					Score:  to.Ptr("sdktest_Score"),
				},
				NegativeOutcomeExpression: to.Ptr("Customers.FirstName = 'Mike'"),
				PositiveOutcomeExpression: to.Ptr("Customers.FirstName = 'David'"),
				PredictionName:            to.Ptr("sdktest"),
				PrimaryProfileType:        to.Ptr("Customers"),
				ProvisioningState:         to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				ScopeExpression:           to.Ptr("*"),
				ScoreLabel:                to.Ptr("score label"),
				SystemGeneratedEntities: &armcustomerinsights.PredictionSystemGeneratedEntities{
					GeneratedInteractionTypes: []*string{
						to.Ptr("_predictions_sdktest")},
					GeneratedKpis: map[string]*string{
						"leadingProfiles":        to.Ptr("_predictions_sdktest_LeadingProfiles"),
						"negativeOutcomeByGrade": to.Ptr("_predictions_sdktest_NegativeOutcomeByGrade"),
						"positiveOutcomeByGrade": to.Ptr("_predictions_sdktest_PositiveOutcomeByGrade"),
						"predictionPerformance":  to.Ptr("_predictions_sdktest_PredictionPerformance"),
					},
					GeneratedLinks: []*string{
						to.Ptr("_predictions_link_sdktest")},
				},
				TenantID: to.Ptr("predtest620"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PredictionResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PredictionResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPredictions_Get(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	res, err := client.Get(ctx,
		"TestHubRG",
		"sdkTestHub",
		"sdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.PredictionResourceFormat{
			Name: to.Ptr("sdkTestHub/sdktest"),
			Type: to.Ptr("Microsoft.CustomerInsights/hubs/predictions"),
			ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/predictions/sdktest"),
			Properties: &armcustomerinsights.Prediction{
				Description: map[string]*string{
					"en-us": to.Ptr("sdktest"),
				},
				AutoAnalyze: to.Ptr(true),
				DisplayName: map[string]*string{
					"en-us": to.Ptr("sdktest"),
				},
				Grades:                   []*armcustomerinsights.PredictionGradesItem{},
				InvolvedInteractionTypes: []*string{},
				InvolvedKpiTypes:         []*string{},
				InvolvedRelationships:    []*string{},
				Mappings: &armcustomerinsights.PredictionMappings{
					Grade:  to.Ptr("sdktest_Grade"),
					Reason: to.Ptr("sdktest_Reason"),
					Score:  to.Ptr("sdktest_Score"),
				},
				NegativeOutcomeExpression: to.Ptr("Customers.FirstName = 'Mike'"),
				PositiveOutcomeExpression: to.Ptr("Customers.FirstName = 'David'"),
				PredictionName:            to.Ptr("sdktest"),
				PrimaryProfileType:        to.Ptr("Customers"),
				ProvisioningState:         to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
				ScopeExpression:           to.Ptr("*"),
				ScoreLabel:                to.Ptr("score label"),
				SystemGeneratedEntities: &armcustomerinsights.PredictionSystemGeneratedEntities{
					GeneratedInteractionTypes: []*string{
						to.Ptr("_predictions_sdktest")},
					GeneratedKpis: map[string]*string{
						"leadingProfiles":        to.Ptr("_predictions_sdktest_LeadingProfiles"),
						"negativeOutcomeByGrade": to.Ptr("_predictions_sdktest_NegativeOutcomeByGrade"),
						"positiveOutcomeByGrade": to.Ptr("_predictions_sdktest_PositiveOutcomeByGrade"),
						"predictionPerformance":  to.Ptr("_predictions_sdktest_PredictionPerformance"),
					},
					GeneratedLinks: []*string{
						to.Ptr("_predictions_link_sdktest")},
				},
				TenantID: to.Ptr("predtest620"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PredictionResourceFormat) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PredictionResourceFormat)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPredictions_Delete(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestHubRG",
		"sdkTestHub",
		"sdktest",
		&armcustomerinsights.PredictionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsDelete.json: %v", err)
	}
}

func TestPredictions_GetTrainingResults(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGetTrainingResults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_GetTrainingResults"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	res, err := client.GetTrainingResults(ctx,
		"TestHubRG",
		"sdkTestHub",
		"sdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGetTrainingResults.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.PredictionTrainingResults{
			CanonicalProfiles: []*armcustomerinsights.CanonicalProfileDefinition{
				{
					CanonicalProfileID: to.Ptr[int32](100),
					Properties: []*armcustomerinsights.CanonicalProfileDefinitionPropertiesItem{
						{
							Type:                to.Ptr(armcustomerinsights.CanonicalPropertyValueTypeNumeric),
							ProfileName:         to.Ptr("Customers"),
							ProfilePropertyName: to.Ptr("MobilePhone"),
							Rank:                to.Ptr[int32](1),
							Value:               to.Ptr("139162668.0000 - 34325747410.0000"),
						},
						{
							Type:                to.Ptr(armcustomerinsights.CanonicalPropertyValueTypeNumeric),
							ProfileName:         to.Ptr("Customers"),
							ProfilePropertyName: to.Ptr("CustomerId"),
							Rank:                to.Ptr[int32](2),
							Value:               to.Ptr("592266139745.0000 - 592266139864.0000"),
						}},
				}},
			PredictionDistribution: &armcustomerinsights.PredictionDistributionDefinition{
				Distributions: []*armcustomerinsights.PredictionDistributionDefinitionDistributionsItem{
					{
						Negatives:               to.Ptr[int64](0),
						NegativesAboveThreshold: to.Ptr[int64](0),
						Positives:               to.Ptr[int64](0),
						PositivesAboveThreshold: to.Ptr[int64](0),
						ScoreThreshold:          to.Ptr[int32](0),
					},
					{
						Negatives:               to.Ptr[int64](0),
						NegativesAboveThreshold: to.Ptr[int64](0),
						Positives:               to.Ptr[int64](0),
						PositivesAboveThreshold: to.Ptr[int64](0),
						ScoreThreshold:          to.Ptr[int32](1),
					}},
				TotalNegatives: to.Ptr[int64](0),
				TotalPositives: to.Ptr[int64](0),
			},
			PrimaryProfileInstanceCount: to.Ptr[int64](0),
			ScoreName:                   to.Ptr("sdktest"),
			TenantID:                    to.Ptr("sdkTestHub"),
		}
		if !reflect.DeepEqual(exampleRes, res.PredictionTrainingResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PredictionTrainingResults)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGetTrainingResults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPredictions_GetModelStatus(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGetModelStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_GetModelStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	res, err := client.GetModelStatus(ctx,
		"TestHubRG",
		"sdkTestHub",
		"sdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGetModelStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerinsights.PredictionModelStatus{
			ModelVersion:     to.Ptr("1.0"),
			PredictionGUIDID: to.Ptr("abe4eb1f-d05a-e711-80c2-0004ffa07bea"),
			PredictionName:   to.Ptr("sdktest"),
			Status:           to.Ptr(armcustomerinsights.PredictionModelLifeCycleNew),
			TenantID:         to.Ptr("sdkTestHub"),
		}
		if !reflect.DeepEqual(exampleRes, res.PredictionModelStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PredictionModelStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsGetModelStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPredictions_ModelStatus(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsModelStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_ModelStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	_, err := client.ModelStatus(ctx,
		"TestHubRG",
		"sdkTestHub",
		"sdktest",
		armcustomerinsights.PredictionModelStatus{
			Status: to.Ptr(armcustomerinsights.PredictionModelLifeCycleTraining),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsModelStatus.json: %v", err)
	}
}

func TestPredictions_ListByHub(t *testing.T) {
	// From example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsListByHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predictions_ListByHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerinsights.NewPredictionsClient("c909e979-ef71-4def-a970-bc7c154db8c5", cred, &options)
	pager := client.ListByHub("TestHubRG",
		"sdkTestHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsListByHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerinsights.PredictionListResult{
			Value: []*armcustomerinsights.PredictionResourceFormat{
				{
					Name: to.Ptr("sdkTestHub/sdktest"),
					Type: to.Ptr("Microsoft.CustomerInsights/hubs/predictions"),
					ID:   to.Ptr("/subscriptions/c909e979-ef71-4def-a970-bc7c154db8c5/resourceGroups/TestHubRG/providers/Microsoft.CustomerInsights/hubs/azSdkTestHub/predictions/sdktest"),
					Properties: &armcustomerinsights.Prediction{
						Description: map[string]*string{
							"en-us": to.Ptr("sdktest"),
						},
						AutoAnalyze: to.Ptr(true),
						DisplayName: map[string]*string{
							"en-us": to.Ptr("sdktest"),
						},
						Grades:                   []*armcustomerinsights.PredictionGradesItem{},
						InvolvedInteractionTypes: []*string{},
						InvolvedKpiTypes:         []*string{},
						InvolvedRelationships:    []*string{},
						Mappings: &armcustomerinsights.PredictionMappings{
							Grade:  to.Ptr("sdktest_Grade"),
							Reason: to.Ptr("sdktest_Reason"),
							Score:  to.Ptr("sdktest_Score"),
						},
						NegativeOutcomeExpression: to.Ptr("Customers.FirstName = 'Mike'"),
						PositiveOutcomeExpression: to.Ptr("Customers.FirstName = 'David'"),
						PredictionName:            to.Ptr("sdktest"),
						PrimaryProfileType:        to.Ptr("Customers"),
						ProvisioningState:         to.Ptr(armcustomerinsights.ProvisioningStatesSucceeded),
						ScopeExpression:           to.Ptr("*"),
						ScoreLabel:                to.Ptr("score label"),
						SystemGeneratedEntities: &armcustomerinsights.PredictionSystemGeneratedEntities{
							GeneratedInteractionTypes: []*string{
								to.Ptr("_predictions_sdktest")},
							GeneratedKpis: map[string]*string{
								"leadingProfiles":        to.Ptr("_predictions_sdktest_LeadingProfiles"),
								"negativeOutcomeByGrade": to.Ptr("_predictions_sdktest_NegativeOutcomeByGrade"),
								"positiveOutcomeByGrade": to.Ptr("_predictions_sdktest_PositiveOutcomeByGrade"),
								"predictionPerformance":  to.Ptr("_predictions_sdktest_PredictionPerformance"),
							},
							GeneratedLinks: []*string{
								to.Ptr("_predictions_link_sdktest")},
						},
						TenantID: to.Ptr("predtest620"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PredictionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PredictionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsListByHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
