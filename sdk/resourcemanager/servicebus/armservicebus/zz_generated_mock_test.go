//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicebus

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestNamespaces_List(t *testing.T) {
	// From example NameSpaceList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.List(&NamespacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBNamespace.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListByResourceGroup(t *testing.T) {
	// From example NameSpaceListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListByResourceGroup("ArunMonocle",
		&NamespacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBNamespace.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_CreateOrUpdate(t *testing.T) {
	// From example NameSpaceCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ArunMonocle",
		"sdk-Namespace2924",
		SBNamespace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("South Central US"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			SKU: &SBSKU{
				Name: SKUNameStandard.ToPtr(),
				Tier: SKUTierStandard.ToPtr(),
			},
		},
		&NamespacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SBNamespace.ID == nil {
		t.Fatal("SBNamespace.ID should not be nil!")
	}
}

func TestNamespaces_Delete(t *testing.T) {
	// From example NameSpaceDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginDelete(ctx,
		"ArunMonocle",
		"sdk-Namespace-3285",
		&NamespacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_Get(t *testing.T) {
	// From example NameSpaceGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-2924",
		&NamespacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBNamespace.ID == nil {
		t.Fatal("SBNamespace.ID should not be nil!")
	}
}

func TestNamespaces_Update(t *testing.T) {
	// From example NameSpaceUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Update(ctx,
		"ArunMonocle",
		"sdk-Namespace-3285",
		SBNamespaceUpdateParameters{
			ResourceNamespacePatch: ResourceNamespacePatch{
				Location: to.StringPtr("South Central US"),
				Tags: map[string]*string{
					"tag3": to.StringPtr("value3"),
					"tag4": to.StringPtr("value4"),
				},
			},
		},
		&NamespacesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBNamespace.ID == nil {
		t.Fatal("SBNamespace.ID should not be nil!")
	}
}

func TestNamespaces_CreateOrUpdateNetworkRuleSet(t *testing.T) {
	// From example NameSpaceNetworkRuleSetCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"Subscription")
	res, err := client.CreateOrUpdateNetworkRuleSet(ctx,
		"ResourceGroup",
		"sdk-Namespace-6019",
		NetworkRuleSet{
			Properties: &NetworkRuleSetProperties{
				DefaultAction: DefaultActionDeny.ToPtr(),
				IPRules: []*NWRuleSetIPRules{
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.1"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.2"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.3"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.4"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.5"),
					}},
				VirtualNetworkRules: []*NWRuleSetVirtualNetworkRules{
					{
						IgnoreMissingVnetServiceEndpoint: to.BoolPtr(true),
						Subnet: &Subnet{
							ID: to.StringPtr("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"),
						},
					},
					{
						IgnoreMissingVnetServiceEndpoint: to.BoolPtr(false),
						Subnet: &Subnet{
							ID: to.StringPtr("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"),
						},
					},
					{
						IgnoreMissingVnetServiceEndpoint: to.BoolPtr(false),
						Subnet: &Subnet{
							ID: to.StringPtr("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"),
						},
					}},
			},
		},
		&NamespacesCreateOrUpdateNetworkRuleSetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkRuleSet.ID == nil {
		t.Fatal("NetworkRuleSet.ID should not be nil!")
	}
}

func TestNamespaces_GetNetworkRuleSet(t *testing.T) {
	// From example NameSpaceNetworkRuleSetGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"Subscription")
	res, err := client.GetNetworkRuleSet(ctx,
		"ResourceGroup",
		"sdk-Namespace-6019",
		&NamespacesGetNetworkRuleSetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkRuleSet.ID == nil {
		t.Fatal("NetworkRuleSet.ID should not be nil!")
	}
}

func TestNamespaces_ListNetworkRuleSets(t *testing.T) {
	// From example NameSpaceNetworkRuleSetList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"Subscription")
	pager := client.ListNetworkRuleSets("ResourceGroup",
		"sdk-Namespace-6019",
		&NamespacesListNetworkRuleSetsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NetworkRuleSet.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NetworkRuleSet.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListAuthorizationRules(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListAuthorizationRules("ArunMonocle",
		"sdk-Namespace-6914",
		&NamespacesListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBAuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBAuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-6914",
		"sdk-AuthRules-1788",
		SBAuthorizationRule{
			Properties: &SBAuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&NamespacesCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestNamespaces_DeleteAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.DeleteAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-namespace-6914",
		"sdk-AuthRules-1788",
		&NamespacesDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_GetAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.GetAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-6914",
		"sdk-AuthRules-1788",
		&NamespacesGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestNamespaces_ListKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.ListKeys(ctx,
		"ArunMonocle",
		"sdk-namespace-6914",
		"sdk-AuthRules-1788",
		&NamespacesListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_RegenerateKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.RegenerateKeys(ctx,
		"ArunMonocle",
		"sdk-namespace-6914",
		"sdk-AuthRules-1788",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&NamespacesRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_CheckNameAvailability(t *testing.T) {
	// From example NameSpaceCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailability{
			Name: to.StringPtr("sdk-Namespace-2924"),
		},
		&NamespacesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example NameSpaceCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subID")
	pager := client.List("SDK-ServiceBus-4794",
		"sdk-Namespace-5828",
		&PrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example NameSpacePrivateEndPointConnectionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subID")
	res, err := client.CreateOrUpdate(ctx,
		"ArunMonocle",
		"sdk-Namespace-2924",
		"privateEndpointConnectionName",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateEndpoint: &PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/dbedb4e0-40e6-4145-81f3-f1314c150774/resourceGroups/SDK-ServiceBus-8396/providers/Microsoft.Network/privateEndpoints/sdk-Namespace-2847"),
				},
				PrivateLinkServiceConnectionState: &ConnectionState{
					Description: to.StringPtr("testing"),
					Status:      PrivateLinkConnectionStatusRejected.ToPtr(),
				},
				ProvisioningState: EndPointProvisioningStateSucceeded.ToPtr(),
			},
		},
		&PrivateEndpointConnectionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example NameSpacePrivateEndPointConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginDelete(ctx,
		"ArunMonocle",
		"sdk-Namespace-3285",
		"928c44d5-b7c6-423b-b6fa-811e0c27b3e0",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example NameSpacePrivateEndPointConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subID")
	res, err := client.Get(ctx,
		"SDK-ServiceBus-4794",
		"sdk-Namespace-5828",
		"privateEndpointConnectionName",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example NameSpacePrivateLinkResourcesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"subID")
	_, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-2924",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example OperationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestDisasterRecoveryConfigs_CheckNameAvailability(t *testing.T) {
	// From example AliasNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.CheckNameAvailability(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-9080",
		CheckNameAvailability{
			Name: to.StringPtr("sdk-DisasterRecovery-9474"),
		},
		&DisasterRecoveryConfigsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_List(t *testing.T) {
	// From example SBAliasList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.List("ardsouzatestRG",
		"sdk-Namespace-8860",
		&DisasterRecoveryConfigsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ArmDisasterRecovery.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ArmDisasterRecovery.ID should not be nil!")
			}
		}
	}
}

func TestDisasterRecoveryConfigs_CreateOrUpdate(t *testing.T) {
	// From example SBAliasCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdate(ctx,
		"ardsouzatestRG",
		"sdk-Namespace-8860",
		"sdk-Namespace-8860",
		ArmDisasterRecovery{
			Properties: &ArmDisasterRecoveryProperties{
				AlternateName:    to.StringPtr("alternameforAlias-Namespace-8860"),
				PartnerNamespace: to.StringPtr("sdk-Namespace-37"),
			},
		},
		&DisasterRecoveryConfigsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArmDisasterRecovery.ID == nil {
		t.Fatal("ArmDisasterRecovery.ID should not be nil!")
	}
}

func TestDisasterRecoveryConfigs_Delete(t *testing.T) {
	// From example SBAliasDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Delete(ctx,
		"SouthCentralUS",
		"sdk-Namespace-8860",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_Get(t *testing.T) {
	// From example SBAliasGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"ardsouzatestRG",
		"sdk-Namespace-8860",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArmDisasterRecovery.ID == nil {
		t.Fatal("ArmDisasterRecovery.ID should not be nil!")
	}
}

func TestDisasterRecoveryConfigs_BreakPairing(t *testing.T) {
	// From example SBEHAliasBreakPairing
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.BreakPairing(ctx,
		"ardsouzatestRG",
		"sdk-Namespace-8860",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsBreakPairingOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_FailOver(t *testing.T) {
	// From example SBAliasFailOver
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.FailOver(ctx,
		"ardsouzatestRG",
		"sdk-Namespace-8860",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsFailOverOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_ListAuthorizationRules(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	pager := client.ListAuthorizationRules("exampleResourceGroup",
		"sdk-Namespace-9080",
		"sdk-DisasterRecovery-4047",
		&DisasterRecoveryConfigsListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBAuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBAuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestDisasterRecoveryConfigs_GetAuthorizationRule(t *testing.T) {
	// From example DisasterRecoveryConfigsAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	res, err := client.GetAuthorizationRule(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-9080",
		"sdk-DisasterRecovery-4879",
		"sdk-Authrules-4879",
		&DisasterRecoveryConfigsGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestDisasterRecoveryConfigs_ListKeys(t *testing.T) {
	// From example DisasterRecoveryConfigsAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.ListKeys(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-2702",
		"sdk-DisasterRecovery-4047",
		"sdk-Authrules-1746",
		&DisasterRecoveryConfigsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMigrationConfigs_List(t *testing.T) {
	// From example MigrationConfigurationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMigrationConfigsClient(con,
		"SubscriptionId")
	pager := client.List("ResourceGroup",
		"sdk-Namespace-9259",
		&MigrationConfigsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MigrationConfigProperties.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MigrationConfigProperties.ID should not be nil!")
			}
		}
	}
}

func TestMigrationConfigs_CreateAndStartMigration(t *testing.T) {
	// From example MigrationConfigurationsStartMigration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMigrationConfigsClient(con,
		"SubscriptionId")
	poller, err := client.BeginCreateAndStartMigration(ctx,
		"ResourceGroup",
		"sdk-Namespace-41",
		MigrationConfigurationNameDefault,
		MigrationConfigProperties{
			Properties: &MigrationConfigPropertiesProperties{
				PostMigrationName: to.StringPtr("sdk-PostMigration-5919"),
				TargetNamespace:   to.StringPtr("/subscriptions/SubscriptionId/resourceGroups/ResourceGroup/providers/Microsoft.ServiceBus/namespaces/sdk-Namespace-4028"),
			},
		},
		&MigrationConfigsBeginCreateAndStartMigrationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MigrationConfigProperties.ID == nil {
		t.Fatal("MigrationConfigProperties.ID should not be nil!")
	}
}

func TestMigrationConfigs_Delete(t *testing.T) {
	// From example MigrationConfigurationsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMigrationConfigsClient(con,
		"SubscriptionId")
	_, err := client.Delete(ctx,
		"ResourceGroup",
		"sdk-Namespace-41",
		MigrationConfigurationNameDefault,
		&MigrationConfigsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMigrationConfigs_Get(t *testing.T) {
	// From example MigrationConfigurationsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMigrationConfigsClient(con,
		"SubscriptionId")
	res, err := client.Get(ctx,
		"ResourceGroup",
		"sdk-Namespace-41",
		MigrationConfigurationNameDefault,
		&MigrationConfigsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MigrationConfigProperties.ID == nil {
		t.Fatal("MigrationConfigProperties.ID should not be nil!")
	}
}

func TestMigrationConfigs_CompleteMigration(t *testing.T) {
	// From example MigrationConfigurationsCompleteMigration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMigrationConfigsClient(con,
		"SubscriptionId")
	_, err := client.CompleteMigration(ctx,
		"ResourceGroup",
		"sdk-Namespace-41",
		MigrationConfigurationNameDefault,
		&MigrationConfigsCompleteMigrationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMigrationConfigs_Revert(t *testing.T) {
	// From example MigrationConfigurationsRevert
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMigrationConfigsClient(con,
		"SubscriptionId")
	_, err := client.Revert(ctx,
		"ResourceGroup",
		"sdk-Namespace-41",
		MigrationConfigurationNameDefault,
		&MigrationConfigsRevertOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueues_ListAuthorizationRules(t *testing.T) {
	// From example QueueAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListAuthorizationRules("ArunMonocle",
		"sdk-Namespace-7982",
		"sdk-Queues-2317",
		&QueuesListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBAuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBAuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestQueues_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example QueueAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-7982",
		"sdk-Queues-2317",
		"sdk-AuthRules-5800",
		SBAuthorizationRule{
			Properties: &SBAuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&QueuesCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestQueues_DeleteAuthorizationRule(t *testing.T) {
	// From example QueueAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.DeleteAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-namespace-7982",
		"sdk-Queues-2317",
		"sdk-AuthRules-5800",
		&QueuesDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueues_GetAuthorizationRule(t *testing.T) {
	// From example QueueAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.GetAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-7982",
		"sdk-Queues-2317",
		"sdk-AuthRules-5800",
		&QueuesGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestQueues_ListKeys(t *testing.T) {
	// From example QueueAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.ListKeys(ctx,
		"ArunMonocle",
		"sdk-namespace-7982",
		"sdk-Queues-2317",
		"sdk-AuthRules-5800",
		&QueuesListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueues_RegenerateKeys(t *testing.T) {
	// From example QueueAuthorizationRuleRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.RegenerateKeys(ctx,
		"ArunMonocle",
		"sdk-namespace-7982",
		"sdk-Queues-2317",
		"sdk-AuthRules-5800",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&QueuesRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueues_ListByNamespace(t *testing.T) {
	// From example QueueListByNameSpace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListByNamespace("ArunMonocle",
		"sdk-Namespace-3174",
		&QueuesListByNamespaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBQueue.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBQueue.ID should not be nil!")
			}
		}
	}
}

func TestQueues_CreateOrUpdate(t *testing.T) {
	// From example QueueCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdate(ctx,
		"ArunMonocle",
		"sdk-Namespace-3174",
		"sdk-Queues-5647",
		SBQueue{
			Properties: &SBQueueProperties{
				EnablePartitioning: to.BoolPtr(true),
			},
		},
		&QueuesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBQueue.ID == nil {
		t.Fatal("SBQueue.ID should not be nil!")
	}
}

func TestQueues_Delete(t *testing.T) {
	// From example QueueDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Delete(ctx,
		"ArunMonocle",
		"sdk-Namespace-183",
		"sdk-Queues-8708",
		&QueuesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueues_Get(t *testing.T) {
	// From example QueueGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQueuesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-3174",
		"sdk-Queues-5647",
		&QueuesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBQueue.ID == nil {
		t.Fatal("SBQueue.ID should not be nil!")
	}
}

func TestTopics_ListAuthorizationRules(t *testing.T) {
	// From example TopicAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListAuthorizationRules("ArunMonocle",
		"sdk-Namespace-6261",
		"sdk-Topics-1984",
		&TopicsListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBAuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBAuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestTopics_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example TopicAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-6261",
		"sdk-Topics-1984",
		"sdk-AuthRules-4310",
		SBAuthorizationRule{
			Properties: &SBAuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&TopicsCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestTopics_GetAuthorizationRule(t *testing.T) {
	// From example TopicAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.GetAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-6261",
		"sdk-Topics-1984",
		"sdk-AuthRules-4310",
		&TopicsGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBAuthorizationRule.ID == nil {
		t.Fatal("SBAuthorizationRule.ID should not be nil!")
	}
}

func TestTopics_DeleteAuthorizationRule(t *testing.T) {
	// From example TopicAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.DeleteAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-6261",
		"sdk-Topics-1984",
		"sdk-AuthRules-4310",
		&TopicsDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_ListKeys(t *testing.T) {
	// From example TopicAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"e2f361f0-3b27-4503-a9cc-21cfba380093")
	_, err := client.ListKeys(ctx,
		"Default-ServiceBus-WestUS",
		"sdk-Namespace8408",
		"sdk-Topics2075",
		"sdk-Authrules5067",
		&TopicsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_RegenerateKeys(t *testing.T) {
	// From example TopicAuthorizationRuleRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"e2f361f0-3b27-4503-a9cc-21cfba380093")
	_, err := client.RegenerateKeys(ctx,
		"Default-ServiceBus-WestUS",
		"sdk-Namespace8408",
		"sdk-Topics2075",
		"sdk-Authrules5067",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&TopicsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_ListByNamespace(t *testing.T) {
	// From example TopicGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListByNamespace("Default-ServiceBus-WestUS",
		"sdk-Namespace-1617",
		&TopicsListByNamespaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBTopic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBTopic.ID should not be nil!")
			}
		}
	}
}

func TestTopics_CreateOrUpdate(t *testing.T) {
	// From example TopicCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdate(ctx,
		"ArunMonocle",
		"sdk-Namespace-1617",
		"sdk-Topics-5488",
		SBTopic{
			Properties: &SBTopicProperties{
				EnableExpress: to.BoolPtr(true),
			},
		},
		&TopicsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBTopic.ID == nil {
		t.Fatal("SBTopic.ID should not be nil!")
	}
}

func TestTopics_Delete(t *testing.T) {
	// From example TopicDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Delete(ctx,
		"ArunMonocle",
		"sdk-Namespace-1617",
		"sdk-Topics-5488",
		&TopicsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopics_Get(t *testing.T) {
	// From example TopicGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopicsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-1617",
		"sdk-Topics-5488",
		&TopicsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBTopic.ID == nil {
		t.Fatal("SBTopic.ID should not be nil!")
	}
}

func TestRules_ListBySubscriptions(t *testing.T) {
	// From example RulesListBySubscriptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListBySubscriptions("ArunMonocle",
		"sdk-Namespace-1319",
		"sdk-Topics-2081",
		"sdk-Subscriptions-8691",
		&RulesListBySubscriptionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Rule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Rule.ID should not be nil!")
			}
		}
	}
}

func TestRules_CreateOrUpdate(t *testing.T) {
	// From example RulesCreateCorrelationFilter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesClient(con,
		"subscriptionId")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"sdk-Namespace-1319",
		"sdk-Topics-2081",
		"sdk-Subscriptions-8691",
		"sdk-Rules-6571",
		Rule{
			Properties: &Ruleproperties{
				CorrelationFilter: &CorrelationFilter{
					Properties: map[string]*string{
						"topicHint": to.StringPtr("Crop"),
					},
				},
				FilterType: FilterTypeCorrelationFilter.ToPtr(),
			},
		},
		&RulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Rule.ID == nil {
		t.Fatal("Rule.ID should not be nil!")
	}

	// From example RulesCreateOrUpdate
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"sdk-Namespace-1319",
		"sdk-Topics-2081",
		"sdk-Subscriptions-8691",
		"sdk-Rules-6571",
		Rule{},
		&RulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Rule.ID == nil {
		t.Fatal("Rule.ID should not be nil!")
	}

	// From example RulesCreateSqlFilter
	res, err = client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"sdk-Namespace-1319",
		"sdk-Topics-2081",
		"sdk-Subscriptions-8691",
		"sdk-Rules-6571",
		Rule{
			Properties: &Ruleproperties{
				FilterType: FilterTypeSQLFilter.ToPtr(),
				SQLFilter: &SQLFilter{
					SQLExpression: to.StringPtr("myproperty=test"),
				},
			},
		},
		&RulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Rule.ID == nil {
		t.Fatal("Rule.ID should not be nil!")
	}
}

func TestRules_Delete(t *testing.T) {
	// From example RulesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Delete(ctx,
		"ArunMonocle",
		"sdk-Namespace-1319",
		"sdk-Topics-2081",
		"sdk-Subscriptions-8691",
		"sdk-Rules-6571",
		&RulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRules_Get(t *testing.T) {
	// From example RulesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRulesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-1319",
		"sdk-Topics-2081",
		"sdk-Subscriptions-8691",
		"sdk-Rules-6571",
		&RulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Rule.ID == nil {
		t.Fatal("Rule.ID should not be nil!")
	}
}

func TestSubscriptions_ListByTopic(t *testing.T) {
	// From example SubscriptionListByTopic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionsClient(con,
		"5{Subscriptionid}")
	pager := client.ListByTopic("ResourceGroup",
		"sdk-Namespace-1349",
		"sdk-Topics-8740",
		&SubscriptionsListByTopicOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SBSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SBSubscription.ID should not be nil!")
			}
		}
	}
}

func TestSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example SubscriptionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionsClient(con,
		"Subscriptionid")
	res, err := client.CreateOrUpdate(ctx,
		"ResourceGroup",
		"sdk-Namespace-1349",
		"sdk-Topics-8740",
		"sdk-Subscriptions-2178",
		SBSubscription{
			Properties: &SBSubscriptionProperties{
				EnableBatchedOperations: to.BoolPtr(true),
			},
		},
		&SubscriptionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBSubscription.ID == nil {
		t.Fatal("SBSubscription.ID should not be nil!")
	}
}

func TestSubscriptions_Delete(t *testing.T) {
	// From example SubscriptionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionsClient(con,
		"subscriptionId")
	_, err := client.Delete(ctx,
		"ResourceGroup",
		"sdk-Namespace-5882",
		"sdk-Topics-1804",
		"sdk-Subscriptions-3670",
		&SubscriptionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubscriptions_Get(t *testing.T) {
	// From example SubscriptionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionsClient(con,
		"Subscriptionid")
	res, err := client.Get(ctx,
		"ResourceGroup",
		"sdk-Namespace-1349",
		"sdk-Topics-8740",
		"sdk-Subscriptions-2178",
		&SubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SBSubscription.ID == nil {
		t.Fatal("SBSubscription.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
