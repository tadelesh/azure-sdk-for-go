//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armloadtestservice_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtestservice/armloadtestservice"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armloadtestservice.OperationListResult{
			Value: []*armloadtestservice.Operation{
				{
					Name: to.Ptr("Microsoft.LoadTestService/loadTests/Write"),
					Display: &armloadtestservice.OperationDisplay{
						Description: to.Ptr("Set LoadTests"),
						Operation:   to.Ptr("Creates or updates the LoadTests"),
						Provider:    to.Ptr("Microsoft.LoadTestService"),
						Resource:    to.Ptr("loadTests"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.LoadTestService/loadTests/Delete"),
					Display: &armloadtestservice.OperationDisplay{
						Description: to.Ptr("Delete LoadTests"),
						Operation:   to.Ptr("Deletes the LoadTests"),
						Provider:    to.Ptr("Microsoft.LoadTestService"),
						Resource:    to.Ptr("loadTests"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.LoadTestService/loadTests/Read"),
					Display: &armloadtestservice.OperationDisplay{
						Description: to.Ptr("Read LoadTests"),
						Operation:   to.Ptr("Reads the LoadTests"),
						Provider:    to.Ptr("Microsoft.LoadTestService"),
						Resource:    to.Ptr("loadTests"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadTests_ListBySubscription(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadTests_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewLoadTestsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armloadtestservice.LoadTestResourcePageList{
			Value: []*armloadtestservice.LoadTestResource{
				{
					Name: to.Ptr("myLoadTest"),
					Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
					SystemData: &armloadtestservice.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
						CreatedBy:          to.Ptr("userId1001"),
						CreatedByType:      to.Ptr(armloadtestservice.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
						LastModifiedBy:     to.Ptr("userId1001"),
						LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
					},
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"Team": to.Ptr("Dev Exp"),
					},
					Properties: &armloadtestservice.LoadTestProperties{
						Description:       to.Ptr("This is new load test resource"),
						DataPlaneURI:      to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
						ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadTestResourcePageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadTestResourcePageList)
			t.Fatalf("Mock response is not equal to example response for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadTests_ListByResourceGroup(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadTests_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewLoadTestsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("dummyrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armloadtestservice.LoadTestResourcePageList{
			Value: []*armloadtestservice.LoadTestResource{
				{
					Name: to.Ptr("myLoadTest"),
					Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
					SystemData: &armloadtestservice.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
						CreatedBy:          to.Ptr("userId1001"),
						CreatedByType:      to.Ptr(armloadtestservice.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
						LastModifiedBy:     to.Ptr("userId1001"),
						LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
					},
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"Team": to.Ptr("Dev Exp"),
					},
					Properties: &armloadtestservice.LoadTestProperties{
						Description:       to.Ptr("This is new load test resource"),
						DataPlaneURI:      to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
						ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoadTestResourcePageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoadTestResourcePageList)
			t.Fatalf("Mock response is not equal to example response for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadTests_Get(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadTests_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewLoadTestsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"dummyrg",
		"myLoadTest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armloadtestservice.LoadTestResource{
			Name: to.Ptr("myLoadTest"),
			Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
			SystemData: &armloadtestservice.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
				CreatedBy:          to.Ptr("userId1001"),
				CreatedByType:      to.Ptr(armloadtestservice.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
				LastModifiedBy:     to.Ptr("userId1001"),
				LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
			},
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Team": to.Ptr("Dev Exp"),
			},
			Properties: &armloadtestservice.LoadTestProperties{
				Description:       to.Ptr("This is new load test resource"),
				DataPlaneURI:      to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
				ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadTestResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadTestResource)
			t.Fatalf("Mock response is not equal to example response for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadTests_CreateOrUpdate(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadTests_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewLoadTestsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"dummyrg",
		"myLoadTest",
		armloadtestservice.LoadTestResource{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Team": to.Ptr("Dev Exp"),
			},
			Properties: &armloadtestservice.LoadTestProperties{
				Description: to.Ptr("This is new load test resource"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armloadtestservice.LoadTestResource{
			Name: to.Ptr("myLoadTest"),
			Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
			SystemData: &armloadtestservice.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
				CreatedBy:          to.Ptr("userId1001"),
				CreatedByType:      to.Ptr(armloadtestservice.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
				LastModifiedBy:     to.Ptr("userId1001"),
				LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
			},
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Team": to.Ptr("Dev Exp"),
			},
			Properties: &armloadtestservice.LoadTestProperties{
				Description:       to.Ptr("This is new load test resource"),
				DataPlaneURI:      to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
				ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadTestResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadTestResource)
			t.Fatalf("Mock response is not equal to example response for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadTests_Update(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadTests_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewLoadTestsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"dummyrg",
		"myLoadTest",
		armloadtestservice.LoadTestResourcePatchRequestBody{
			Properties: &armloadtestservice.LoadTestResourcePatchRequestBodyProperties{
				Description: to.Ptr("This is new load test resource"),
			},
			Tags: map[string]interface{}{
				"Division": "LT",
				"Team":     "Dev Exp",
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armloadtestservice.LoadTestResource{
			Name: to.Ptr("myLoadTest"),
			Type: to.Ptr("Microsoft.LoadTestService/loadTests"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.LoadTestService/loadTests/myLoadTest"),
			SystemData: &armloadtestservice.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
				CreatedBy:          to.Ptr("userId1001"),
				CreatedByType:      to.Ptr(armloadtestservice.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-28T12:32:33Z"); return t }()),
				LastModifiedBy:     to.Ptr("userId1001"),
				LastModifiedByType: to.Ptr(armloadtestservice.CreatedByTypeUser),
			},
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Division": to.Ptr("LT"),
				"Team":     to.Ptr("Dev Exp"),
			},
			Properties: &armloadtestservice.LoadTestProperties{
				Description:       to.Ptr("This is new load test resource"),
				DataPlaneURI:      to.Ptr("https://myLoadTest.00000000-0000-0000-0000-000000000000.cnt-dp.domain.com"),
				ProvisioningState: to.Ptr(armloadtestservice.ResourceStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoadTestResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoadTestResource)
			t.Fatalf("Mock response is not equal to example response for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLoadTests_Delete(t *testing.T) {
	// From example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LoadTests_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armloadtestservice.NewLoadTestsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"dummyrg",
		"myLoadTest",
		&armloadtestservice.LoadTestsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/loadtestservice/resource-manager/Microsoft.LoadTestService/preview/2021-12-01-preview/examples/LoadTests_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
