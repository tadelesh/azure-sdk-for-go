//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorderpartner_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorderpartner/armedgeorderpartner"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestEdgeOrderPartnerAPIS_ListOperationsPartner(t *testing.T) {
	// From example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ListOperationsPartner.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperationsPartner"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorderpartner.NewAPISClient("<subscription-id>", cred, &options)
	pager := client.ListOperationsPartner(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ListOperationsPartner.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorderpartner.OperationListResult{
			Value: []*armedgeorderpartner.Operation{
				{
					Name: to.Ptr("Microsoft.EdgeOrderPartner/operations/read"),
					Display: &armedgeorderpartner.OperationDisplay{
						Description: to.Ptr("List or get the Operations"),
						Operation:   to.Ptr("List or Get Operations"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorderpartner.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrderPartner/searchInventories/action"),
					Display: &armedgeorderpartner.OperationDisplay{
						Provider: to.Ptr("Edge Ordering"),
						Resource: to.Ptr("ArmApiRes_Microsoft.EdgeOrderPartner"),
					},
					IsDataAction: to.Ptr(true),
					Origin:       to.Ptr(armedgeorderpartner.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrderPartner/locations/productFamilies/inventories/manageLink/action"),
					Display: &armedgeorderpartner.OperationDisplay{
						Provider: to.Ptr("Edge Ordering"),
						Resource: to.Ptr("ArmApiRes_inventories"),
					},
					IsDataAction: to.Ptr(true),
					Origin:       to.Ptr(armedgeorderpartner.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrderPartner/locations/productFamilies/inventories/manageInventoryMetadata/action"),
					Display: &armedgeorderpartner.OperationDisplay{
						Provider: to.Ptr("Edge Ordering"),
						Resource: to.Ptr("ArmApiRes_inventories"),
					},
					IsDataAction: to.Ptr(true),
					Origin:       to.Ptr(armedgeorderpartner.OriginUser),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ListOperationsPartner.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderPartnerAPIS_ManageInventoryMetadata(t *testing.T) {
	// From example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ManageInventoryMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManageInventoryMetadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorderpartner.NewAPISClient("b783ea86-c85c-4175-b76d-3992656af50d", cred, &options)
	poller, err := client.BeginManageInventoryMetadata(ctx,
		"AzureStackEdge",
		"westus",
		"SerialNumber1",
		armedgeorderpartner.ManageInventoryMetadataRequest{
			ConfigurationOnDevice: &armedgeorderpartner.ConfigurationOnDevice{
				ConfigurationIdentifier: to.Ptr("EdgeP_High"),
			},
			InventoryMetadata: to.Ptr("InventoryMetadata"),
		},
		&armedgeorderpartner.APISClientBeginManageInventoryMetadataOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ManageInventoryMetadata.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ManageInventoryMetadata.json: %v", err)
	}
}

func TestEdgeOrderPartnerAPIS_ManageLink(t *testing.T) {
	// From example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ManageLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManageLink"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorderpartner.NewAPISClient("b783ea86-c85c-4175-b76d-3992656af50d", cred, &options)
	_, err := client.ManageLink(ctx,
		"AzureStackEdge",
		"westus",
		"SerialNumber1",
		armedgeorderpartner.ManageLinkRequest{
			ManagementResourceArmID: to.Ptr("/subscriptions/c783ea86-c85c-4175-b76d-3992656af50d/resourceGroups/EdgeTestRG/providers/Microsoft.DataBoxEdge/DataBoxEdgeDevices/TestEdgeDeviceName1"),
			Operation:               to.Ptr(armedgeorderpartner.ManageLinkOperationLink),
			TenantID:                to.Ptr("a783ea86-c85c-4175-b76d-3992656af50d"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/ManageLink.json: %v", err)
	}
}

func TestEdgeOrderPartnerAPIS_SearchInventories(t *testing.T) {
	// From example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/SearchInventories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchInventories"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorderpartner.NewAPISClient("b783ea86-c85c-4175-b76d-3992656af50d", cred, &options)
	pager := client.SearchInventories(armedgeorderpartner.SearchInventoriesRequest{
		FamilyIdentifier: to.Ptr("AzureStackEdge"),
		SerialNumber:     to.Ptr("SerialNumber1"),
	},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/SearchInventories.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorderpartner.PartnerInventoryList{
			Value: []*armedgeorderpartner.PartnerInventory{
				{
					Properties: &armedgeorderpartner.InventoryProperties{
						Configuration: &armedgeorderpartner.ConfigurationData{
							ConfigurationIdentifier:         to.Ptr("EdgeP_Base"),
							ConfigurationIdentifierOnDevice: to.Ptr("EdgeP_High"),
							FamilyIdentifier:                to.Ptr("AzureStackEdge"),
							ProductIdentifier:               to.Ptr("AzureStackEdgeProGPU"),
							ProductLineIdentifier:           to.Ptr("AzureStackEdgePL"),
						},
						Inventory: &armedgeorderpartner.InventoryData{
							Location:            to.Ptr("Rack"),
							RegistrationAllowed: to.Ptr(true),
							Status:              to.Ptr("Healthy"),
						},
						Location: to.Ptr("westus"),
						ManagementResource: &armedgeorderpartner.ManagementResourceData{
							ArmID:    to.Ptr("/subscriptions/c783ea86-c85c-4175-b76d-3992656af50d/resourceGroups/EdgeTestRG/providers/Microsoft.DataBoxEdge/DataBoxEdgeDevices/TestEdgeDeviceName1"),
							TenantID: to.Ptr("a783ea86-c85c-4175-b76d-3992656af50d"),
						},
						OrderItem: &armedgeorderpartner.OrderItemData{
							ArmID:         to.Ptr("/subscriptions/b783ea86-c85c-4175-b76d-3992656af50d/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orders/TestOrderName1"),
							OrderItemType: to.Ptr(armedgeorderpartner.OrderItemTypeRental),
						},
						SerialNumber: to.Ptr("SerialNumber1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartnerInventoryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartnerInventoryList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/SearchInventories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/SearchInventoriesDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchInventoriesDetails"},
	})
	client = armedgeorderpartner.NewAPISClient("b783ea86-c85c-4175-b76d-3992656af50d", cred, &options)
	pager = client.SearchInventories(armedgeorderpartner.SearchInventoriesRequest{
		FamilyIdentifier: to.Ptr("AzureStackEdge"),
		SerialNumber:     to.Ptr("SerialNumber1"),
	},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/SearchInventoriesDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorderpartner.PartnerInventoryList{
			Value: []*armedgeorderpartner.PartnerInventory{
				{
					Properties: &armedgeorderpartner.InventoryProperties{
						Configuration: &armedgeorderpartner.ConfigurationData{
							ConfigurationIdentifier:         to.Ptr("EdgeP_Base"),
							ConfigurationIdentifierOnDevice: to.Ptr("EdgeP_High"),
							FamilyIdentifier:                to.Ptr("AzureStackEdge"),
							ProductIdentifier:               to.Ptr("AzureStackEdgeProGPU"),
							ProductLineIdentifier:           to.Ptr("AzureStackEdgePL"),
						},
						Inventory: &armedgeorderpartner.InventoryData{
							Location:            to.Ptr("Rack"),
							RegistrationAllowed: to.Ptr(true),
							Status:              to.Ptr("Healthy"),
						},
						Location: to.Ptr("westus"),
						ManagementResource: &armedgeorderpartner.ManagementResourceData{
							ArmID:    to.Ptr("/subscriptions/c783ea86-c85c-4175-b76d-3992656af50d/resourceGroups/EdgeTestRG/providers/Microsoft.DataBoxEdge/DataBoxEdgeDevices/TestEdgeDeviceName1"),
							TenantID: to.Ptr("a783ea86-c85c-4175-b76d-3992656af50d"),
						},
						OrderItem: &armedgeorderpartner.OrderItemData{
							ArmID:         to.Ptr("/subscriptions/b783ea86-c85c-4175-b76d-3992656af50d/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orders/TestOrderName1"),
							OrderItemType: to.Ptr(armedgeorderpartner.OrderItemTypeRental),
						},
						SerialNumber: to.Ptr("SerialNumber1"),
						Details: &armedgeorderpartner.InventoryAdditionalDetails{
							Billing: &armedgeorderpartner.BillingDetails{
								BillingType: to.Ptr("Pav2"),
								Status:      to.Ptr("InProgress"),
							},
							Configuration: &armedgeorderpartner.ConfigurationDetails{
								Specifications: []*armedgeorderpartner.SpecificationDetails{
									{
										Name:  to.Ptr("Cores"),
										Value: to.Ptr("24"),
									},
									{
										Name:  to.Ptr("Memory"),
										Value: to.Ptr("128 GB"),
									},
									{
										Name:  to.Ptr("Storage"),
										Value: to.Ptr("~8 TB"),
									}},
							},
							Inventory: &armedgeorderpartner.AdditionalInventoryDetails{
								AdditionalData: map[string]*string{
									"ManuacturingYear": to.Ptr("2020"),
									"SourceCountry":    to.Ptr("USA"),
								},
							},
							InventoryMetadata: to.Ptr("This is currently in Japan"),
							InventorySecrets: map[string]*string{
								"PublicCert": to.Ptr("<PublicCert>"),
							},
							OrderItem: &armedgeorderpartner.AdditionalOrderItemDetails{
								Status: &armedgeorderpartner.StageDetails{
									DisplayName: to.Ptr("Delivered - Succeeded"),
									StageName:   to.Ptr(armedgeorderpartner.StageNameDelivered),
									StageStatus: to.Ptr(armedgeorderpartner.StageStatusSucceeded),
									StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-07T10:50:36.3341513+05:30"); return t }()),
								},
								Subscription: &armedgeorderpartner.SubscriptionDetails{
									ID:      to.Ptr("b783ea86-c85c-4175-b76d-3992656af50d"),
									QuotaID: to.Ptr("Internal_2014-09-01"),
									State:   to.Ptr("Registered"),
								},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartnerInventoryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartnerInventoryList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorderpartner/resource-manager/Microsoft.EdgeOrderPartner/preview/2020-12-01-preview/examples/SearchInventoriesDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
