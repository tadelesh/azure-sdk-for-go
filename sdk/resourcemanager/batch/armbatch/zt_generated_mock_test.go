//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbatch_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/batch/armbatch"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBatchAccount_Create(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_BYOS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountCreate_BYOS"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountCreateParameters{
			Location: to.Ptr("japaneast"),
			Properties: &armbatch.AccountCreateProperties{
				AutoStorage: &armbatch.AutoStorageBaseProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
				KeyVaultReference: &armbatch.KeyVaultReference{
					ID:  to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample"),
					URL: to.Ptr("http://sample.vault.azure.net/"),
				},
				PoolAllocationMode: to.Ptr(armbatch.PoolAllocationModeUserSubscription),
			},
		},
		&armbatch.AccountClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_BYOS.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_BYOS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota: to.Ptr[int32](20),
				KeyVaultReference: &armbatch.KeyVaultReference{
					ID:  to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample"),
					URL: to.Ptr("http://sample.vault.azure.net/"),
				},
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeUserSubscription),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_BYOS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_Default.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountCreate_Default"},
	})
	client = armbatch.NewAccountClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountCreateParameters{
			Location: to.Ptr("japaneast"),
			Properties: &armbatch.AccountCreateProperties{
				AutoStorage: &armbatch.AutoStorageBaseProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&armbatch.AccountClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_Default.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_Default.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota:   to.Ptr[int32](20),
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_Default.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_SystemAssignedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountCreate_SystemAssignedIdentity"},
	})
	client = armbatch.NewAccountClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountCreateParameters{
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("japaneast"),
			Properties: &armbatch.AccountCreateProperties{
				AutoStorage: &armbatch.AutoStorageBaseProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&armbatch.AccountClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_SystemAssignedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_SystemAssignedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type:        to.Ptr(armbatch.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota:   to.Ptr[int32](20),
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_SystemAssignedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_UserAssignedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountCreate_UserAssignedIdentity"},
	})
	client = armbatch.NewAccountClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountCreateParameters{
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armbatch.UserAssignedIdentities{
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
				},
			},
			Location: to.Ptr("japaneast"),
			Properties: &armbatch.AccountCreateProperties{
				AutoStorage: &armbatch.AutoStorageBaseProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&armbatch.AccountClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_UserAssignedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_UserAssignedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armbatch.UserAssignedIdentities{
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("clientId1"),
						PrincipalID: to.Ptr("principalId1"),
					},
				},
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota:   to.Ptr[int32](20),
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountCreate_UserAssignedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateBatchAccountCreate"},
	})
	client = armbatch.NewAccountClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountCreateParameters{
			Location: to.Ptr("japaneast"),
			Properties: &armbatch.AccountCreateProperties{
				AutoStorage: &armbatch.AutoStorageBaseProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
				KeyVaultReference: &armbatch.KeyVaultReference{
					ID:  to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample"),
					URL: to.Ptr("http://sample.vault.azure.net/"),
				},
				PublicNetworkAccess: to.Ptr(armbatch.PublicNetworkAccessTypeDisabled),
			},
		},
		&armbatch.AccountClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountCreate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota: to.Ptr[int32](20),
				KeyVaultReference: &armbatch.KeyVaultReference{
					ID:  to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample"),
					URL: to.Ptr("http://sample.vault.azure.net/"),
				},
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeUserSubscription),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_Update(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountUpdateParameters{
			Properties: &armbatch.AccountUpdateProperties{
				AutoStorage: &armbatch.AutoStorageBaseProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota:   to.Ptr[int32](20),
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_Delete(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.AccountClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountDelete.json: %v", err)
	}
}

func TestBatchAccount_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Identity: &armbatch.AccountIdentity{
				Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
			},
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota:   to.Ptr[int32](20),
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
				PoolQuota:            to.Ptr[int32](20),
				ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateBatchAccountGet"},
	})
	client = armbatch.NewAccountClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Account{
			Name:     to.Ptr("sampleacct"),
			Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
			Location: to.Ptr("japaneast"),
			Properties: &armbatch.AccountProperties{
				AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
				ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
				AutoStorage: &armbatch.AutoStorageProperties{
					StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
					LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
				},
				DedicatedCoreQuota:   to.Ptr[int32](20),
				LowPriorityCoreQuota: to.Ptr[int32](20),
				PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
				PoolQuota:            to.Ptr[int32](20),
				PrivateEndpointConnections: []*armbatch.PrivateEndpointConnection{
					{
						Name: to.Ptr("testprivateEndpointConnection.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0"),
						Type: to.Ptr("Microsoft.Batch/batchAccounts/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/privateEndpointConnections/testprivateEndpointConnection.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0"),
						Properties: &armbatch.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armbatch.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Network/privateEndpoints/testprivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armbatch.PrivateLinkServiceConnectionState{
								Description: to.Ptr("Approved by xyz.abc@company.com"),
								Status:      to.Ptr(armbatch.PrivateLinkServiceConnectionStatusApproved),
							},
						},
					}},
				ProvisioningState:   to.Ptr(armbatch.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armbatch.PublicNetworkAccessTypeDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateBatchAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_List(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.AccountListResult{
			Value: []*armbatch.Account{
				{
					Name:     to.Ptr("sampleacct"),
					Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
					Location: to.Ptr("japaneast"),
					Identity: &armbatch.AccountIdentity{
						Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
					},
					Properties: &armbatch.AccountProperties{
						AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
						ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
						AutoStorage: &armbatch.AutoStorageProperties{
							StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
							LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
						},
						DedicatedCoreQuota:   to.Ptr[int32](20),
						LowPriorityCoreQuota: to.Ptr[int32](20),
						PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
						PoolQuota:            to.Ptr[int32](20),
						ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
						PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_ListByResourceGroup(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	pager := client.ListByResourceGroup("default-azurebatch-japaneast",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.AccountListResult{
			Value: []*armbatch.Account{
				{
					Name:     to.Ptr("sampleacct"),
					Type:     to.Ptr("Microsoft.Batch/batchAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct"),
					Location: to.Ptr("japaneast"),
					Identity: &armbatch.AccountIdentity{
						Type: to.Ptr(armbatch.ResourceIdentityTypeNone),
					},
					Properties: &armbatch.AccountProperties{
						AccountEndpoint:              to.Ptr("sampleacct.japaneast.batch.azure.com"),
						ActiveJobAndJobScheduleQuota: to.Ptr[int32](20),
						AutoStorage: &armbatch.AutoStorageProperties{
							StorageAccountID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
							LastKeySync:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-10T23:48:38.9878479Z"); return t }()),
						},
						DedicatedCoreQuota:   to.Ptr[int32](20),
						LowPriorityCoreQuota: to.Ptr[int32](20),
						PoolAllocationMode:   to.Ptr(armbatch.PoolAllocationModeBatchService),
						PoolQuota:            to.Ptr[int32](20),
						ProvisioningState:    to.Ptr(armbatch.ProvisioningStateSucceeded),
						PublicNetworkAccess:  to.Ptr(armbatch.PublicNetworkAccessTypeEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_SynchronizeAutoStorageKeys(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountSynchronizeAutoStorageKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountSynchronizeAutoStorageKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	_, err := client.SynchronizeAutoStorageKeys(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountSynchronizeAutoStorageKeys.json: %v", err)
	}
}

func TestBatchAccount_RegenerateKey(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		armbatch.AccountRegenerateKeyParameters{
			KeyName: to.Ptr(armbatch.AccountKeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountRegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.AccountKeys{
			AccountName: to.Ptr("sampleacct"),
			Primary:     to.Ptr("AAAA=="),
			Secondary:   to.Ptr("BBBB=="),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountRegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_GetKeys(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountGetKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountGetKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	res, err := client.GetKeys(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountGetKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.AccountKeys{
			AccountName: to.Ptr("sampleacct"),
			Primary:     to.Ptr("AAAA=="),
			Secondary:   to.Ptr("BBBB=="),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountGetKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBatchAccount_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountListOutboundNetworkDependenciesEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOutboundNetworkDependencies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewAccountClient("subid", cred, &options)
	pager := client.ListOutboundNetworkDependenciesEndpoints("default-azurebatch-japaneast",
		"sampleacct",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountListOutboundNetworkDependenciesEndpoints.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.OutboundEnvironmentEndpointCollection{
			Value: []*armbatch.OutboundEnvironmentEndpoint{
				{
					Category: to.Ptr("Azure Batch"),
					Endpoints: []*armbatch.EndpointDependency{
						{
							Description: to.Ptr("Applicable to job manager tasks, tasks that use job scoped authentication, or any task that makes calls to Batch."),
							DomainName:  to.Ptr("sampleacct.japaneast.batch.azure.com"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							Description: to.Ptr("Applicable to all Azure Batch pools."),
							DomainName:  to.Ptr("japaneast.service.batch.azure.com"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Storage"),
					Endpoints: []*armbatch.EndpointDependency{
						{
							Description: to.Ptr("AutoStorage endpoint for this Batch account. Applicable to all Azure Batch pools under this account."),
							DomainName:  to.Ptr("autostorageaccountname.blob.core.windows.net"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							Description: to.Ptr("Applicable to all Azure Batch pools."),
							DomainName:  to.Ptr("*.blob.core.windows.net"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							Description: to.Ptr("Applicable to all Azure Batch pools."),
							DomainName:  to.Ptr("*.table.core.windows.net"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							Description: to.Ptr("Applicable to all Azure Batch pools."),
							DomainName:  to.Ptr("*.queue.core.windows.net"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Microsoft Package Repository"),
					Endpoints: []*armbatch.EndpointDependency{
						{
							Description: to.Ptr("Only applicable to pools containing a Mount Configuration. Learn about Mount Configurations in Batch at https://docs.microsoft.com/azure/batch/virtual-file-mount."),
							DomainName:  to.Ptr("packages.microsoft.com"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Key Vault"),
					Endpoints: []*armbatch.EndpointDependency{
						{
							Description: to.Ptr("Only applicable to pools containing a Disk Encryption Configuration and whose VM size does not support encryption at host. Learn more about disk encryption in Azure Batch at https://docs.microsoft.com/azure/batch/disk-encryption. Learn more about encryption at host and supported VM sizes at https://docs.microsoft.com/azure/virtual-machines/disks-enable-host-based-encryption-portal."),
							DomainName:  to.Ptr("*.vault.azure.net"),
							EndpointDetails: []*armbatch.EndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundEnvironmentEndpointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundEnvironmentEndpointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/BatchAccountListOutboundNetworkDependenciesEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationPackage_Activate(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageActivate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationPackageActivate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationPackageClient("subid", cred, &options)
	res, err := client.Activate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		armbatch.ActivateApplicationPackageParameters{
			Format: to.Ptr("zip"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageActivate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.ApplicationPackage{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/applications/versions"),
			Etag: to.Ptr("W/\"0x8D64FEC83A3B436\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1/versions/1"),
			Properties: &armbatch.ApplicationPackageProperties{
				Format:             to.Ptr("zip"),
				LastActivationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-27T18:48:09.9330991Z"); return t }()),
				State:              to.Ptr(armbatch.PackageStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageActivate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationPackage_Create(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationPackageCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationPackageClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		&armbatch.ApplicationPackageClientCreateOptions{Parameters: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.ApplicationPackage{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/applications/versions"),
			Etag: to.Ptr("W/\"0x8D64FEC83A3B436\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1/versions/1"),
			Properties: &armbatch.ApplicationPackageProperties{
				State:            to.Ptr(armbatch.PackageStatePending),
				StorageURL:       to.Ptr("http://mystorage1.blob.core.windows.net/myapp?mysas"),
				StorageURLExpiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-27T18:48:09.9330991Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationPackage_Delete(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationPackageDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationPackageClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageDelete.json: %v", err)
	}
}

func TestApplicationPackage_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationPackageGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationPackageClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.ApplicationPackage{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/applications/versions"),
			Etag: to.Ptr("W/\"0x8D64FEC83A3B436\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1/versions/1"),
			Properties: &armbatch.ApplicationPackageProperties{
				Format:             to.Ptr("zip"),
				LastActivationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-27T18:48:09.9330991Z"); return t }()),
				State:              to.Ptr(armbatch.PackageStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicationPackage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicationPackage)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationPackage_List(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationPackageList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationPackageClient("subid", cred, &options)
	pager := client.List("default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		&armbatch.ApplicationPackageClientListOptions{Maxresults: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListApplicationPackagesResult{
			Value: []*armbatch.ApplicationPackage{
				{
					Name: to.Ptr("1.0"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/applications/versions"),
					Etag: to.Ptr("W/\"0x8D64FF0B9F47F67\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1/versions/1.0"),
					Properties: &armbatch.ApplicationPackageProperties{
						State: to.Ptr(armbatch.PackageStatePending),
					},
				},
				{
					Name: to.Ptr("2.0"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/applications/versions"),
					Etag: to.Ptr("W/\"0x8D64FF0B9F47F67\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1/versions/2.0"),
					Properties: &armbatch.ApplicationPackageProperties{
						Format:             to.Ptr("zip"),
						LastActivationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-27T18:48:09.9330991Z"); return t }()),
						State:              to.Ptr(armbatch.PackageStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListApplicationPackagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListApplicationPackagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationPackageList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_Create(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		&armbatch.ApplicationClientCreateOptions{Parameters: &armbatch.Application{
			Properties: &armbatch.ApplicationProperties{
				AllowUpdates: to.Ptr(false),
				DisplayName:  to.Ptr("myAppName"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Application{
			Name: to.Ptr("app1"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/applications"),
			Etag: to.Ptr("W/\"0x8D64F8EBB3DC411\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1"),
			Properties: &armbatch.ApplicationProperties{
				AllowUpdates: to.Ptr(false),
				DisplayName:  to.Ptr("myAppName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_Delete(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationDelete.json: %v", err)
	}
}

func TestApplication_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Application{
			Name: to.Ptr("app1"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/applications"),
			Etag: to.Ptr("W/\"0x8D64F915BDF7F00\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1"),
			Properties: &armbatch.ApplicationProperties{
				AllowUpdates: to.Ptr(true),
				DisplayName:  to.Ptr("Sample Application"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_Update(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		armbatch.Application{
			Properties: &armbatch.ApplicationProperties{
				AllowUpdates:   to.Ptr(true),
				DefaultVersion: to.Ptr("2"),
				DisplayName:    to.Ptr("myAppName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Application{
			Name: to.Ptr("app1"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/applications"),
			Etag: to.Ptr("W/\"0x8D64F915BDF7F00\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1"),
			Properties: &armbatch.ApplicationProperties{
				AllowUpdates:   to.Ptr(true),
				DefaultVersion: to.Ptr("2"),
				DisplayName:    to.Ptr("myAppName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplication_List(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApplicationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewApplicationClient("subid", cred, &options)
	pager := client.List("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.ApplicationClientListOptions{Maxresults: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListApplicationsResult{
			Value: []*armbatch.Application{
				{
					Name: to.Ptr("app1"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/applications"),
					Etag: to.Ptr("W/\"0x8D64F91A9089879\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app1"),
					Properties: &armbatch.ApplicationProperties{
						AllowUpdates:   to.Ptr(false),
						DefaultVersion: to.Ptr("1"),
					},
				},
				{
					Name: to.Ptr("app1"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/applications"),
					Etag: to.Ptr("W/\"0x8D64F91A9089879\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/applications/app2"),
					Properties: &armbatch.ApplicationProperties{
						AllowUpdates:   to.Ptr(false),
						DefaultVersion: to.Ptr("2.0"),
						DisplayName:    to.Ptr("myAppName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListApplicationsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListApplicationsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/ApplicationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocation_GetQuotas(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationGetQuotas.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LocationGetQuotas"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewLocationClient("subid", cred, &options)
	res, err := client.GetQuotas(ctx,
		"japaneast",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationGetQuotas.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.LocationQuota{
			AccountQuota: to.Ptr[int32](1),
		}
		if !reflect.DeepEqual(exampleRes, res.LocationQuota) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocationQuota)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationGetQuotas.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocation_CheckNameAvailability(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationCheckNameAvailability_AlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LocationCheckNameAvailability_AlreadyExists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewLocationClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"japaneast",
		armbatch.CheckNameAvailabilityParameters{
			Name: to.Ptr("existingaccountname"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationCheckNameAvailability_AlreadyExists.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.CheckNameAvailabilityResult{
			Message:       to.Ptr("An account named 'existingaccountname' is already in use."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armbatch.NameAvailabilityReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationCheckNameAvailability_AlreadyExists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationCheckNameAvailability_Available.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LocationCheckNameAvailability_Available"},
	})
	client = armbatch.NewLocationClient("subid", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		"japaneast",
		armbatch.CheckNameAvailabilityParameters{
			Name: to.Ptr("newaccountname"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationCheckNameAvailability_Available.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/LocationCheckNameAvailability_Available.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCertificate_ListByBatchAccount(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListCertificates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewCertificateClient("subid", cred, &options)
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.CertificateClientListByBatchAccountOptions{Maxresults: nil,
			Select: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListCertificatesResult{
			Value: []*armbatch.Certificate{
				{
					Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
					Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
					Properties: &armbatch.CertificateProperties{
						Format:                          to.Ptr(armbatch.CertificateFormatPfx),
						Thumbprint:                      to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
						ThumbprintAlgorithm:             to.Ptr("sha1"),
						ProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
						ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
						PublicData:                      to.Ptr("MIICrjCCAZagAwI..."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListCertificatesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListCertificatesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListCertificates - Filter and Select"},
	})
	client = armbatch.NewCertificateClient("subid", cred, &options)
	pager = client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.CertificateClientListByBatchAccountOptions{Maxresults: nil,
			Select: to.Ptr("properties/format,properties/provisioningState"),
			Filter: to.Ptr("properties/provisioningStateTransitionTime gt '2017-05-01' or properties/provisioningState eq 'Failed'"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListCertificatesResult{
			Value: []*armbatch.Certificate{
				{
					Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
					Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
					Properties: &armbatch.CertificateProperties{
						Format:            to.Ptr(armbatch.CertificateFormatPfx),
						ProvisioningState: to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("sha1-aeb228ffb0bf67a793d61dce263ebd16949f15a1"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
					Etag: to.Ptr("W/\"0x8D4EDD5118572E0\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-aeb228ffb0bf67a793d61dce263ebd16949f15a1"),
					Properties: &armbatch.CertificateProperties{
						Format:            to.Ptr(armbatch.CertificateFormatCer),
						ProvisioningState: to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListCertificatesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListCertificatesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_Create(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_Full.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateCertificate - Full"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewCertificateClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		armbatch.CertificateCreateOrUpdateParameters{
			Properties: &armbatch.CertificateCreateOrUpdateProperties{
				Format:              to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:          to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm: to.Ptr("sha1"),
				Data:                to.Ptr("MIIJsgIBAzCCCW4GCSqGSIb3DQE..."),
				Password:            to.Ptr("<ExamplePassword>"),
			},
		},
		&armbatch.CertificateClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_Full.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:                          to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:                      to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm:             to.Ptr("sha1"),
				ProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                      to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_Full.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_MinimalCer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateCertificate - Minimal Cer"},
	})
	client = armbatch.NewCertificateClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		armbatch.CertificateCreateOrUpdateParameters{
			Properties: &armbatch.CertificateCreateOrUpdateProperties{
				Format: to.Ptr(armbatch.CertificateFormatCer),
				Data:   to.Ptr("MIICrjCCAZagAwI..."),
			},
		},
		&armbatch.CertificateClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_MinimalCer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:                          to.Ptr(armbatch.CertificateFormatCer),
				Thumbprint:                      to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm:             to.Ptr("sha1"),
				ProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                      to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_MinimalCer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_Minimal.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateCertificate - Minimal Pfx"},
	})
	client = armbatch.NewCertificateClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		armbatch.CertificateCreateOrUpdateParameters{
			Properties: &armbatch.CertificateCreateOrUpdateProperties{
				Data:     to.Ptr("MIIJsgIBAzCCCW4GCSqGSIb3DQE..."),
				Password: to.Ptr("<ExamplePassword>"),
			},
		},
		&armbatch.CertificateClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_Minimal.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:                          to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:                      to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm:             to.Ptr("sha1"),
				ProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                      to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCreate_Minimal.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_Update(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewCertificateClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		armbatch.CertificateCreateOrUpdateParameters{
			Properties: &armbatch.CertificateCreateOrUpdateProperties{
				Data:     to.Ptr("MIIJsgIBAzCCCW4GCSqGSIb3DQE..."),
				Password: to.Ptr("<ExamplePassword>"),
			},
		},
		&armbatch.CertificateClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:                          to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:                      to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm:             to.Ptr("sha1"),
				ProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                      to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_Delete(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CertificateDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewCertificateClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		&armbatch.CertificateClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateDelete.json: %v", err)
	}
}

func TestCertificate_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewCertificateClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:                          to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:                      to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm:             to.Ptr("sha1"),
				ProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                      to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateGetWithDeletionError.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Certificate with Deletion Error"},
	})
	client = armbatch.NewCertificateClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateGetWithDeletionError.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD5118668F7\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:              to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:          to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm: to.Ptr("sha1"),
				DeleteCertificateError: &armbatch.DeleteCertificateError{
					Code:    to.Ptr("NodesReferencingCertificate"),
					Message: to.Ptr("The specified certificate is being used by the below mentioned node(s)\nRequestId:2dc78afc-b15b-42d2-8c85-39cb61a0799e\nTime:2017-08-28T10:22:52.8633406Z"),
					Target:  to.Ptr("BatchAccount"),
					Details: []*armbatch.DeleteCertificateError{
						{
							Code:    to.Ptr("Nodes"),
							Message: to.Ptr("node1, node3"),
						}},
				},
				PreviousProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateDeleting),
				PreviousProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T00:15:25.5625498Z"); return t }()),
				ProvisioningState:                       to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                              to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateGetWithDeletionError.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_CancelDeletion(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCancelDeletion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CertificateCancelDeletion"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewCertificateClient("subid", cred, &options)
	res, err := client.CancelDeletion(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCancelDeletion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Certificate{
			Name: to.Ptr("sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/certificates"),
			Etag: to.Ptr("W/\"0x8D4EDD513C3EDBB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/samplecct/certificates/sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
			Properties: &armbatch.CertificateProperties{
				Format:                                  to.Ptr(armbatch.CertificateFormatPfx),
				Thumbprint:                              to.Ptr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
				ThumbprintAlgorithm:                     to.Ptr("sha1"),
				PreviousProvisioningState:               to.Ptr(armbatch.CertificateProvisioningStateFailed),
				PreviousProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T00:22:54.3299195Z"); return t }()),
				ProvisioningState:                       to.Ptr(armbatch.CertificateProvisioningStateSucceeded),
				ProvisioningStateTransitionTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-21T01:47:38.4420202Z"); return t }()),
				PublicData:                              to.Ptr("MIICrjCCAZagAwI..."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/CertificateCancelDeletion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResource_ListByBatchAccount(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPrivateLinkResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPrivateLinkResourceClient("subid", cred, &options)
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.PrivateLinkResourceClientListByBatchAccountOptions{Maxresults: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateLinkResourcesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListPrivateLinkResourcesResult{
			Value: []*armbatch.PrivateLinkResource{
				{
					Name: to.Ptr("testprivateLinkResource"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/privateLinkResources/testprivateLinkResource"),
					Properties: &armbatch.PrivateLinkResourceProperties{
						GroupID: to.Ptr("batchAccount"),
						RequiredMembers: []*string{
							to.Ptr("batchAccount")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.japaneast.batch.azure.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListPrivateLinkResourcesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListPrivateLinkResourcesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResource_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateLinkResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPrivateLinkResourceClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sampleacct",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.PrivateLinkResource{
			Name: to.Ptr("sampleacct"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/privateLinkResources/sampleacct"),
			Properties: &armbatch.PrivateLinkResourceProperties{
				GroupID: to.Ptr("batchAccount"),
				RequiredMembers: []*string{
					to.Ptr("batchAccount")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.japaneast.batch.azure.com")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_ListByBatchAccount(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPrivateEndpointConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPrivateEndpointConnectionClient("subid", cred, &options)
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.PrivateEndpointConnectionClientListByBatchAccountOptions{Maxresults: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListPrivateEndpointConnectionsResult{
			Value: []*armbatch.PrivateEndpointConnection{
				{
					Name: to.Ptr("testprivateEndpointConnection"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/privateEndpointConnections/testprivateEndpointConnection"),
					Properties: &armbatch.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armbatch.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Network/privateEndpoints/testprivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armbatch.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Approved by xyz.abc@company.com"),
							Status:      to.Ptr(armbatch.PrivateLinkServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListPrivateEndpointConnectionsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListPrivateEndpointConnectionsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPrivateEndpointConnectionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testprivateEndpointConnection5testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.PrivateEndpointConnection{
			Name: to.Ptr("testprivateEndpointConnection5testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/privateEndpointConnections/testprivateEndpointConnection5testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0"),
			Properties: &armbatch.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armbatch.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Network/privateEndpoints/testprivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armbatch.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by xyz.abc@company.com"),
					Status:      to.Ptr(armbatch.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Update(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdatePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPrivateEndpointConnectionClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0",
		armbatch.PrivateEndpointConnection{
			Properties: &armbatch.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armbatch.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by xyz.abc@company.com"),
					Status:      to.Ptr(armbatch.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		&armbatch.PrivateEndpointConnectionClientBeginUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.PrivateEndpointConnection{
			Name: to.Ptr("testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/privateEndpointConnections"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/privateEndpointConnections/testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0"),
			Properties: &armbatch.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armbatch.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Network/privateEndpoints/testprivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armbatch.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by xyz.abc@company.com"),
					Status:      to.Ptr(armbatch.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armbatch.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPool_ListByBatchAccount(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.PoolClientListByBatchAccountOptions{Maxresults: nil,
			Select: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListPoolsResult{
			Value: []*armbatch.Pool{
				{
					Name: to.Ptr("testpool"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
					Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
					Properties: &armbatch.PoolProperties{
						AllocationState:               to.Ptr(armbatch.AllocationStateSteady),
						AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
						ApplicationLicenses: []*string{
							to.Ptr("app-license0"),
							to.Ptr("app-license1")},
						ApplicationPackages: []*armbatch.ApplicationPackageReference{
							{
								ID:      to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
								Version: to.Ptr("asdf"),
							}},
						Certificates: []*armbatch.CertificateReference{
							{
								ID:            to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
								StoreLocation: to.Ptr(armbatch.CertificateStoreLocationLocalMachine),
								StoreName:     to.Ptr("MY"),
								Visibility: []*armbatch.CertificateVisibility{
									to.Ptr(armbatch.CertificateVisibilityRemoteUser)},
							}},
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
						CurrentDedicatedNodes:   to.Ptr[int32](0),
						CurrentLowPriorityNodes: to.Ptr[int32](0),
						DeploymentConfiguration: &armbatch.DeploymentConfiguration{
							CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
								OSFamily:  to.Ptr("4"),
								OSVersion: to.Ptr("WA-GUEST-OS-4.45_201708-01"),
							},
						},
						InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateEnabled),
						LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
						Metadata: []*armbatch.MetadataItem{
							{
								Name:  to.Ptr("metadata-1"),
								Value: to.Ptr("value-1"),
							},
							{
								Name:  to.Ptr("metadata-2"),
								Value: to.Ptr("value-2"),
							}},
						NetworkConfiguration: &armbatch.NetworkConfiguration{
							EndpointConfiguration: &armbatch.PoolEndpointConfiguration{
								InboundNatPools: []*armbatch.InboundNatPool{
									{
										Name:                   to.Ptr("testnat"),
										BackendPort:            to.Ptr[int32](12001),
										FrontendPortRangeEnd:   to.Ptr[int32](15100),
										FrontendPortRangeStart: to.Ptr[int32](15000),
										NetworkSecurityGroupRules: []*armbatch.NetworkSecurityGroupRule{
											{
												Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessAllow),
												Priority:            to.Ptr[int32](150),
												SourceAddressPrefix: to.Ptr("192.100.12.45"),
												SourcePortRanges: []*string{
													to.Ptr("*")},
											},
											{
												Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessDeny),
												Priority:            to.Ptr[int32](3500),
												SourceAddressPrefix: to.Ptr("*"),
												SourcePortRanges: []*string{
													to.Ptr("*")},
											}},
										Protocol: to.Ptr(armbatch.InboundEndpointProtocolTCP),
									}},
							},
							SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
						},
						ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
						ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
						ResizeOperationStatus: &armbatch.ResizeOperationStatus{
							Errors: []*armbatch.ResizeError{
								{
									Code:    to.Ptr("AllocationTimedout"),
									Message: to.Ptr("Desired number of dedicated nodes could not be allocated as the resize timeout was reached"),
								}},
							NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
							ResizeTimeout:          to.Ptr("PT8M"),
							StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
							TargetDedicatedNodes:   to.Ptr[int32](6),
							TargetLowPriorityNodes: to.Ptr[int32](28),
						},
						ScaleSettings: &armbatch.ScaleSettings{
							FixedScale: &armbatch.FixedScaleSettings{
								ResizeTimeout:          to.Ptr("PT8M"),
								TargetDedicatedNodes:   to.Ptr[int32](6),
								TargetLowPriorityNodes: to.Ptr[int32](28),
							},
						},
						StartTask: &armbatch.StartTask{
							CommandLine: to.Ptr("cmd /c SET"),
							EnvironmentSettings: []*armbatch.EnvironmentSetting{
								{
									Name:  to.Ptr("MYSET"),
									Value: to.Ptr("1234"),
								}},
							MaxTaskRetryCount: to.Ptr[int32](6),
							ResourceFiles: []*armbatch.ResourceFile{
								{
									FileMode: to.Ptr("777"),
									FilePath: to.Ptr("c:\\temp\\gohere"),
									HTTPURL:  to.Ptr("https://testaccount.blob.core.windows.net/example-blob-file"),
								}},
							UserIdentity: &armbatch.UserIdentity{
								AutoUser: &armbatch.AutoUserSpecification{
									ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
									Scope:          to.Ptr(armbatch.AutoUserScopePool),
								},
							},
							WaitForSuccess: to.Ptr(true),
						},
						TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
							NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypePack),
						},
						TaskSlotsPerNode: to.Ptr[int32](13),
						UserAccounts: []*armbatch.UserAccount{
							{
								Name:           to.Ptr("username1"),
								ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
								LinuxUserConfiguration: &armbatch.LinuxUserConfiguration{
									Gid: to.Ptr[int32](4567),
									UID: to.Ptr[int32](1234),
								},
							}},
						VMSize: to.Ptr("STANDARD_D4"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListPoolsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListPoolsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPoolWithFilter"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	pager = client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&armbatch.PoolClientListByBatchAccountOptions{Maxresults: nil,
			Select: to.Ptr("properties/allocationState,properties/provisioningStateTransitionTime,properties/currentDedicatedNodes,properties/currentLowPriorityNodes"),
			Filter: to.Ptr("startswith(name, 'po') or (properties/allocationState eq 'Steady' and properties/provisioningStateTransitionTime lt datetime'2017-02-02')"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbatch.ListPoolsResult{
			Value: []*armbatch.Pool{
				{
					Name: to.Ptr("testpool"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
					Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
					Properties: &armbatch.PoolProperties{
						AllocationState:                 to.Ptr(armbatch.AllocationStateSteady),
						CurrentDedicatedNodes:           to.Ptr[int32](0),
						CurrentLowPriorityNodes:         to.Ptr[int32](2),
						ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("pooltest"),
					Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
					Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/pooltest"),
					Properties: &armbatch.PoolProperties{
						AllocationState:                 to.Ptr(armbatch.AllocationStateResizing),
						CurrentDedicatedNodes:           to.Ptr[int32](4),
						CurrentLowPriorityNodes:         to.Ptr[int32](0),
						ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-26T10:22:55.9407275Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListPoolsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListPoolsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPool_Create(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_SharedImageGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - Custom Image"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_SharedImageGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateSteady),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						TargetDedicatedNodes:   to.Ptr[int32](0),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_SharedImageGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_CloudServiceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - Full CloudServiceConfiguration"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				ApplicationLicenses: []*string{
					to.Ptr("app-license0"),
					to.Ptr("app-license1")},
				ApplicationPackages: []*armbatch.ApplicationPackageReference{
					{
						ID:      to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
						Version: to.Ptr("asdf"),
					}},
				Certificates: []*armbatch.CertificateReference{
					{
						ID:            to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: to.Ptr(armbatch.CertificateStoreLocationLocalMachine),
						StoreName:     to.Ptr("MY"),
						Visibility: []*armbatch.CertificateVisibility{
							to.Ptr(armbatch.CertificateVisibilityRemoteUser)},
					}},
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("4"),
						OSVersion: to.Ptr("WA-GUEST-OS-4.45_201708-01"),
					},
				},
				DisplayName:            to.Ptr("my-pool-name"),
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateEnabled),
				Metadata: []*armbatch.MetadataItem{
					{
						Name:  to.Ptr("metadata-1"),
						Value: to.Ptr("value-1"),
					},
					{
						Name:  to.Ptr("metadata-2"),
						Value: to.Ptr("value-2"),
					}},
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					PublicIPAddressConfiguration: &armbatch.PublicIPAddressConfiguration{
						IPAddressIDs: []*string{
							to.Ptr("/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135"),
							to.Ptr("/subscriptions/subid2/resourceGroups/rg24/providers/Microsoft.Network/publicIPAddresses/ip268")},
						Provision: to.Ptr(armbatch.IPAddressProvisioningTypeUserManaged),
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](6),
						TargetLowPriorityNodes: to.Ptr[int32](28),
					},
				},
				StartTask: &armbatch.StartTask{
					CommandLine: to.Ptr("cmd /c SET"),
					EnvironmentSettings: []*armbatch.EnvironmentSetting{
						{
							Name:  to.Ptr("MYSET"),
							Value: to.Ptr("1234"),
						}},
					MaxTaskRetryCount: to.Ptr[int32](6),
					ResourceFiles: []*armbatch.ResourceFile{
						{
							FileMode: to.Ptr("777"),
							FilePath: to.Ptr("c:\\temp\\gohere"),
							HTTPURL:  to.Ptr("https://testaccount.blob.core.windows.net/example-blob-file"),
						}},
					UserIdentity: &armbatch.UserIdentity{
						AutoUser: &armbatch.AutoUserSpecification{
							ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
							Scope:          to.Ptr(armbatch.AutoUserScopePool),
						},
					},
					WaitForSuccess: to.Ptr(true),
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypePack),
				},
				TaskSlotsPerNode: to.Ptr[int32](13),
				UserAccounts: []*armbatch.UserAccount{
					{
						Name:           to.Ptr("username1"),
						ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
						LinuxUserConfiguration: &armbatch.LinuxUserConfiguration{
							Gid:           to.Ptr[int32](4567),
							SSHPrivateKey: to.Ptr("sshprivatekeyvalue"),
							UID:           to.Ptr[int32](1234),
						},
						Password: to.Ptr("<ExamplePassword>"),
					}},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_CloudServiceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ApplicationLicenses: []*string{
					to.Ptr("app-license0"),
					to.Ptr("app-license1")},
				ApplicationPackages: []*armbatch.ApplicationPackageReference{
					{
						ID:      to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
						Version: to.Ptr("asdf"),
					}},
				Certificates: []*armbatch.CertificateReference{
					{
						ID:            to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: to.Ptr(armbatch.CertificateStoreLocationLocalMachine),
						StoreName:     to.Ptr("MY"),
						Visibility: []*armbatch.CertificateVisibility{
							to.Ptr(armbatch.CertificateVisibilityRemoteUser)},
					}},
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:   to.Ptr[int32](0),
				CurrentLowPriorityNodes: to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("4"),
						OSVersion: to.Ptr("WA-GUEST-OS-4.45_201708-01"),
					},
				},
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateEnabled),
				LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				Metadata: []*armbatch.MetadataItem{
					{
						Name:  to.Ptr("metadata-1"),
						Value: to.Ptr("value-1"),
					},
					{
						Name:  to.Ptr("metadata-2"),
						Value: to.Ptr("value-2"),
					}},
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					PublicIPAddressConfiguration: &armbatch.PublicIPAddressConfiguration{
						IPAddressIDs: []*string{
							to.Ptr("/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135"),
							to.Ptr("/subscriptions/subid2/resourceGroups/rg24/providers/Microsoft.Network/publicIPAddresses/ip268")},
						Provision: to.Ptr(armbatch.IPAddressProvisioningTypeUserManaged),
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](6),
						TargetLowPriorityNodes: to.Ptr[int32](28),
					},
				},
				StartTask: &armbatch.StartTask{
					CommandLine: to.Ptr("cmd /c SET"),
					EnvironmentSettings: []*armbatch.EnvironmentSetting{
						{
							Name:  to.Ptr("MYSET"),
							Value: to.Ptr("1234"),
						}},
					MaxTaskRetryCount: to.Ptr[int32](6),
					ResourceFiles: []*armbatch.ResourceFile{
						{
							FileMode: to.Ptr("777"),
							FilePath: to.Ptr("c:\\temp\\gohere"),
							HTTPURL:  to.Ptr("https://testaccount.blob.core.windows.net/example-blob-file"),
						}},
					UserIdentity: &armbatch.UserIdentity{
						AutoUser: &armbatch.AutoUserSpecification{
							ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
							Scope:          to.Ptr(armbatch.AutoUserScopePool),
						},
					},
					WaitForSuccess: to.Ptr(true),
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypePack),
				},
				TaskSlotsPerNode: to.Ptr[int32](13),
				UserAccounts: []*armbatch.UserAccount{
					{
						Name:           to.Ptr("username1"),
						ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
						LinuxUserConfiguration: &armbatch.LinuxUserConfiguration{
							Gid: to.Ptr[int32](4567),
							UID: to.Ptr[int32](1234),
						},
					}},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_CloudServiceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_VirtualMachineConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - Full VirtualMachineConfiguration"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						DataDisks: []*armbatch.DataDisk{
							{
								Caching:            to.Ptr(armbatch.CachingTypeReadWrite),
								DiskSizeGB:         to.Ptr[int32](30),
								Lun:                to.Ptr[int32](0),
								StorageAccountType: to.Ptr(armbatch.StorageAccountTypePremiumLRS),
							},
							{
								Caching:            to.Ptr(armbatch.CachingTypeNone),
								DiskSizeGB:         to.Ptr[int32](200),
								Lun:                to.Ptr[int32](1),
								StorageAccountType: to.Ptr(armbatch.StorageAccountTypeStandardLRS),
							}},
						DiskEncryptionConfiguration: &armbatch.DiskEncryptionConfiguration{
							Targets: []*armbatch.DiskEncryptionTarget{
								to.Ptr(armbatch.DiskEncryptionTargetOsDisk),
								to.Ptr(armbatch.DiskEncryptionTargetTemporaryDisk)},
						},
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter-SmallDisk"),
							Version:   to.Ptr("latest"),
						},
						LicenseType:    to.Ptr("Windows_Server"),
						NodeAgentSKUID: to.Ptr("batch.node.windows amd64"),
						NodePlacementConfiguration: &armbatch.NodePlacementConfiguration{
							Policy: to.Ptr(armbatch.NodePlacementPolicyTypeZonal),
						},
						OSDisk: &armbatch.OSDisk{
							EphemeralOSDiskSettings: &armbatch.DiffDiskSettings{
								Placement: to.Ptr("CacheDisk"),
							},
						},
						WindowsConfiguration: &armbatch.WindowsConfiguration{
							EnableAutomaticUpdates: to.Ptr(false),
						},
					},
				},
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					EndpointConfiguration: &armbatch.PoolEndpointConfiguration{
						InboundNatPools: []*armbatch.InboundNatPool{
							{
								Name:                   to.Ptr("testnat"),
								BackendPort:            to.Ptr[int32](12001),
								FrontendPortRangeEnd:   to.Ptr[int32](15100),
								FrontendPortRangeStart: to.Ptr[int32](15000),
								NetworkSecurityGroupRules: []*armbatch.NetworkSecurityGroupRule{
									{
										Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessAllow),
										Priority:            to.Ptr[int32](150),
										SourceAddressPrefix: to.Ptr("192.100.12.45"),
										SourcePortRanges: []*string{
											to.Ptr("1"),
											to.Ptr("2")},
									},
									{
										Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessDeny),
										Priority:            to.Ptr[int32](3500),
										SourceAddressPrefix: to.Ptr("*"),
										SourcePortRanges: []*string{
											to.Ptr("*")},
									}},
								Protocol: to.Ptr(armbatch.InboundEndpointProtocolTCP),
							}},
					},
				},
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_VirtualMachineConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						DataDisks: []*armbatch.DataDisk{
							{
								Caching:            to.Ptr(armbatch.CachingTypeReadWrite),
								DiskSizeGB:         to.Ptr[int32](30),
								Lun:                to.Ptr[int32](0),
								StorageAccountType: to.Ptr(armbatch.StorageAccountTypePremiumLRS),
							},
							{
								Caching:            to.Ptr(armbatch.CachingTypeNone),
								DiskSizeGB:         to.Ptr[int32](200),
								Lun:                to.Ptr[int32](1),
								StorageAccountType: to.Ptr(armbatch.StorageAccountTypeStandardLRS),
							}},
						DiskEncryptionConfiguration: &armbatch.DiskEncryptionConfiguration{
							Targets: []*armbatch.DiskEncryptionTarget{
								to.Ptr(armbatch.DiskEncryptionTargetOsDisk),
								to.Ptr(armbatch.DiskEncryptionTargetTemporaryDisk)},
						},
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter-SmallDisk"),
							Version:   to.Ptr("latest"),
						},
						LicenseType:    to.Ptr("Windows_Server"),
						NodeAgentSKUID: to.Ptr("batch.node.windows amd64"),
						NodePlacementConfiguration: &armbatch.NodePlacementConfiguration{
							Policy: to.Ptr(armbatch.NodePlacementPolicyTypeZonal),
						},
						WindowsConfiguration: &armbatch.WindowsConfiguration{
							EnableAutomaticUpdates: to.Ptr(false),
						},
					},
				},
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					EndpointConfiguration: &armbatch.PoolEndpointConfiguration{
						InboundNatPools: []*armbatch.InboundNatPool{
							{
								Name:                   to.Ptr("testnat"),
								BackendPort:            to.Ptr[int32](12001),
								FrontendPortRangeEnd:   to.Ptr[int32](15100),
								FrontendPortRangeStart: to.Ptr[int32](15000),
								NetworkSecurityGroupRules: []*armbatch.NetworkSecurityGroupRule{
									{
										Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessAllow),
										Priority:            to.Ptr[int32](150),
										SourceAddressPrefix: to.Ptr("192.100.12.45"),
										SourcePortRanges: []*string{
											to.Ptr("1"),
											to.Ptr("2")},
									},
									{
										Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessDeny),
										Priority:            to.Ptr[int32](3500),
										SourceAddressPrefix: to.Ptr("*"),
										SourcePortRanges: []*string{
											to.Ptr("*")},
									}},
								Protocol: to.Ptr(armbatch.InboundEndpointProtocolTCP),
							}},
					},
				},
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_VirtualMachineConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_MinimalCloudServiceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - Minimal CloudServiceConfiguration"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily: to.Ptr("5"),
					},
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						TargetDedicatedNodes: to.Ptr[int32](3),
					},
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_MinimalCloudServiceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("5"),
						OSVersion: to.Ptr("*"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionRequeue),
					ResizeTimeout:          to.Ptr("PT15M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](3),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						ResizeTimeout:          to.Ptr("PT15M"),
						TargetDedicatedNodes:   to.Ptr[int32](3),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_MinimalCloudServiceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_MinimalVirtualMachineConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - Minimal VirtualMachineConfiguration"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("latest"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_MinimalVirtualMachineConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("latest"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_MinimalVirtualMachineConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_NoPublicIPAddresses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - No public IP"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					PublicIPAddressConfiguration: &armbatch.PublicIPAddressConfiguration{
						Provision: to.Ptr(armbatch.IPAddressProvisioningTypeNoPublicIPAddresses),
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_NoPublicIPAddresses.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateSteady),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					PublicIPAddressConfiguration: &armbatch.PublicIPAddressConfiguration{
						Provision: to.Ptr(armbatch.IPAddressProvisioningTypeNoPublicIPAddresses),
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						TargetDedicatedNodes:   to.Ptr[int32](0),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_NoPublicIPAddresses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_PublicIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - Public IPs"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					PublicIPAddressConfiguration: &armbatch.PublicIPAddressConfiguration{
						IPAddressIDs: []*string{
							to.Ptr("/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135")},
						Provision: to.Ptr(armbatch.IPAddressProvisioningTypeUserManaged),
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_PublicIPs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateSteady),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					PublicIPAddressConfiguration: &armbatch.PublicIPAddressConfiguration{
						IPAddressIDs: []*string{
							to.Ptr("/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135")},
						Provision: to.Ptr(armbatch.IPAddressProvisioningTypeUserManaged),
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						TargetDedicatedNodes:   to.Ptr[int32](0),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_PublicIPs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_UserAssignedIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - UserAssignedIdentities"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Identity: &armbatch.PoolIdentity{
				Type: to.Ptr(armbatch.PoolIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armbatch.UserAssignedIdentities{
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {},
				},
			},
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("latest"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_UserAssignedIdentities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Identity: &armbatch.PoolIdentity{
				Type: to.Ptr(armbatch.PoolIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armbatch.UserAssignedIdentities{
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("clientId1"),
						PrincipalID: to.Ptr("principalId1"),
					},
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {
						ClientID:    to.Ptr("clientId2"),
						PrincipalID: to.Ptr("principalId2"),
					},
				},
			},
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("latest"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-01T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_UserAssignedIdentities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_VirtualMachineConfiguration_Extensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePool - VirtualMachineConfiguration Extensions"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-focal"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("20_04-lts"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 20.04"),
						Extensions: []*armbatch.VMExtension{
							{
								Name:                    to.Ptr("batchextension1"),
								Type:                    to.Ptr("SecurityMonitoringForLinux"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								ProtectedSettings: map[string]interface{}{
									"protectedSettingsKey": "protectedSettingsValue",
								},
								Publisher: to.Ptr("Microsoft.Azure.Security.Monitoring"),
								Settings: map[string]interface{}{
									"settingsKey": "settingsValue",
								},
								TypeHandlerVersion: to.Ptr("1.0"),
							}},
					},
				},
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		},
		&armbatch.PoolClientCreateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_VirtualMachineConfiguration_Extensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-focal"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("20_04-lts"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 20.04"),
						Extensions: []*armbatch.VMExtension{
							{
								Name:                    to.Ptr("batchextension1"),
								Type:                    to.Ptr("SecurityMonitoringForLinux"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								Publisher:               to.Ptr("Microsoft.Azure.Security.Monitoring"),
								Settings: map[string]interface{}{
									"settingsKey": "settingsValue",
								},
								TypeHandlerVersion: to.Ptr("1.0"),
							}},
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT5M"),
						Formula:            to.Ptr("$TargetDedicatedNodes=1"),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolCreate_VirtualMachineConfiguration_Extensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPool_Update(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_EnableAutoScale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdatePool - Enable Autoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						Formula: to.Ptr("$TargetDedicatedNodes=34"),
					},
				},
			},
		},
		&armbatch.PoolClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_EnableAutoScale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				AutoScaleRun: &armbatch.AutoScaleRun{
					EvaluationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					Results:        to.Ptr("$TargetDedicatedNodes=34;NodeDeallocationOption=requeue"),
				},
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:   to.Ptr[int32](12),
				CurrentLowPriorityNodes: to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("5"),
						OSVersion: to.Ptr("*"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionRequeue),
					ResizeTimeout:          to.Ptr("PT15M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](34),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT15M"),
						Formula:            to.Ptr("$TargetDedicated=34"),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_EnableAutoScale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_OtherProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdatePool - Other Properties"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				ApplicationPackages: []*armbatch.ApplicationPackageReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
					},
					{
						ID:      to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_5678"),
						Version: to.Ptr("1.0"),
					}},
				Certificates: []*armbatch.CertificateReference{
					{
						ID:            to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: to.Ptr(armbatch.CertificateStoreLocationLocalMachine),
						StoreName:     to.Ptr("MY"),
					}},
				Metadata: []*armbatch.MetadataItem{
					{
						Name:  to.Ptr("key1"),
						Value: to.Ptr("value1"),
					}},
			},
		},
		&armbatch.PoolClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_OtherProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				ApplicationPackages: []*armbatch.ApplicationPackageReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
					},
					{
						ID:      to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_5678"),
						Version: to.Ptr("1.0"),
					}},
				AutoScaleRun: &armbatch.AutoScaleRun{
					EvaluationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					Results:        to.Ptr("$TargetDedicatedNodes=34;NodeDeallocationOption=requeue"),
				},
				Certificates: []*armbatch.CertificateReference{
					{
						ID:            to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: to.Ptr(armbatch.CertificateStoreLocationLocalMachine),
						StoreName:     to.Ptr("MY"),
						Visibility: []*armbatch.CertificateVisibility{
							to.Ptr(armbatch.CertificateVisibilityStartTask),
							to.Ptr(armbatch.CertificateVisibilityTask),
							to.Ptr(armbatch.CertificateVisibilityRemoteUser)},
					}},
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:   to.Ptr[int32](12),
				CurrentLowPriorityNodes: to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("5"),
						OSVersion: to.Ptr("*"),
					},
				},
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				Metadata: []*armbatch.MetadataItem{
					{
						Name:  to.Ptr("key1"),
						Value: to.Ptr("value1"),
					}},
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
					ResizeTimeout:          to.Ptr("PT8M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](8),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](1),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_OtherProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_RemoveStartTask.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdatePool - Remove Start Task"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				StartTask: &armbatch.StartTask{},
			},
		},
		&armbatch.PoolClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_RemoveStartTask.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				AutoScaleRun: &armbatch.AutoScaleRun{
					EvaluationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					Results:        to.Ptr("$TargetDedicatedNodes=34;NodeDeallocationOption=requeue"),
				},
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:   to.Ptr[int32](12),
				CurrentLowPriorityNodes: to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("5"),
						OSVersion: to.Ptr("*"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionRequeue),
					ResizeTimeout:          to.Ptr("PT15M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](34),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					AutoScale: &armbatch.AutoScaleSettings{
						EvaluationInterval: to.Ptr("PT15M"),
						Formula:            to.Ptr("$TargetDedicated=34"),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_RemoveStartTask.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_ResizePool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdatePool - Resize Pool"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		armbatch.Pool{
			Properties: &armbatch.PoolProperties{
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](5),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
			},
		},
		&armbatch.PoolClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_ResizePool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				AutoScaleRun: &armbatch.AutoScaleRun{
					EvaluationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					Results:        to.Ptr("$TargetDedicatedNodes=34;NodeDeallocationOption=requeue"),
				},
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:   to.Ptr[int32](12),
				CurrentLowPriorityNodes: to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("5"),
						OSVersion: to.Ptr("*"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
					ResizeTimeout:          to.Ptr("PT8M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](8),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](1),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolUpdate_ResizePool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPool_Delete(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletePool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		&armbatch.PoolClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolDelete.json: %v", err)
	}
}

func TestPool_Get(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ApplicationLicenses: []*string{
					to.Ptr("app-license0"),
					to.Ptr("app-license1")},
				ApplicationPackages: []*armbatch.ApplicationPackageReference{
					{
						ID:      to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
						Version: to.Ptr("asdf"),
					}},
				Certificates: []*armbatch.CertificateReference{
					{
						ID:            to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: to.Ptr(armbatch.CertificateStoreLocationLocalMachine),
						StoreName:     to.Ptr("MY"),
						Visibility: []*armbatch.CertificateVisibility{
							to.Ptr(armbatch.CertificateVisibilityRemoteUser)},
					}},
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:   to.Ptr[int32](0),
				CurrentLowPriorityNodes: to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					CloudServiceConfiguration: &armbatch.CloudServiceConfiguration{
						OSFamily:  to.Ptr("4"),
						OSVersion: to.Ptr("WA-GUEST-OS-4.45_201708-01"),
					},
				},
				InterNodeCommunication: to.Ptr(armbatch.InterNodeCommunicationStateEnabled),
				LastModified:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				Metadata: []*armbatch.MetadataItem{
					{
						Name:  to.Ptr("metadata-1"),
						Value: to.Ptr("value-1"),
					},
					{
						Name:  to.Ptr("metadata-2"),
						Value: to.Ptr("value-2"),
					}},
				NetworkConfiguration: &armbatch.NetworkConfiguration{
					EndpointConfiguration: &armbatch.PoolEndpointConfiguration{
						InboundNatPools: []*armbatch.InboundNatPool{
							{
								Name:                   to.Ptr("testnat"),
								BackendPort:            to.Ptr[int32](12001),
								FrontendPortRangeEnd:   to.Ptr[int32](15100),
								FrontendPortRangeStart: to.Ptr[int32](15000),
								NetworkSecurityGroupRules: []*armbatch.NetworkSecurityGroupRule{
									{
										Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessAllow),
										Priority:            to.Ptr[int32](150),
										SourceAddressPrefix: to.Ptr("192.100.12.45"),
										SourcePortRanges: []*string{
											to.Ptr("123"),
											to.Ptr("22")},
									},
									{
										Access:              to.Ptr(armbatch.NetworkSecurityGroupRuleAccessDeny),
										Priority:            to.Ptr[int32](3500),
										SourceAddressPrefix: to.Ptr("*"),
										SourcePortRanges: []*string{
											to.Ptr("*")},
									}},
								Protocol: to.Ptr(armbatch.InboundEndpointProtocolTCP),
							}},
					},
					SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
					ResizeTimeout:          to.Ptr("PT8M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](6),
					TargetLowPriorityNodes: to.Ptr[int32](28),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](6),
						TargetLowPriorityNodes: to.Ptr[int32](28),
					},
				},
				StartTask: &armbatch.StartTask{
					CommandLine: to.Ptr("cmd /c SET"),
					EnvironmentSettings: []*armbatch.EnvironmentSetting{
						{
							Name:  to.Ptr("MYSET"),
							Value: to.Ptr("1234"),
						}},
					MaxTaskRetryCount: to.Ptr[int32](6),
					ResourceFiles: []*armbatch.ResourceFile{
						{
							FileMode: to.Ptr("777"),
							FilePath: to.Ptr("c:\\temp\\gohere"),
							HTTPURL:  to.Ptr("https://testaccount.blob.core.windows.net/example-blob-file"),
						}},
					UserIdentity: &armbatch.UserIdentity{
						AutoUser: &armbatch.AutoUserSpecification{
							ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
							Scope:          to.Ptr(armbatch.AutoUserScopePool),
						},
					},
					WaitForSuccess: to.Ptr(true),
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypePack),
				},
				TaskSlotsPerNode: to.Ptr[int32](13),
				UserAccounts: []*armbatch.UserAccount{
					{
						Name:           to.Ptr("username1"),
						ElevationLevel: to.Ptr(armbatch.ElevationLevelAdmin),
						LinuxUserConfiguration: &armbatch.LinuxUserConfiguration{
							Gid: to.Ptr[int32](4567),
							UID: to.Ptr[int32](1234),
						},
					}},
				VMSize: to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolGet_VirtualMachineConfiguration_Extensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPool - VirtualMachineConfiguration Extensions"},
	})
	client = armbatch.NewPoolClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolGet_VirtualMachineConfiguration_Extensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-focal"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("20_04-lts"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 20.04"),
						Extensions: []*armbatch.VMExtension{
							{
								Name:                    to.Ptr("batchextension1"),
								Type:                    to.Ptr("SecurityMonitoringForLinux"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								Publisher:               to.Ptr("Microsoft.Azure.Security.Monitoring"),
								Settings: map[string]interface{}{
									"settingsKey": "settingsValue",
								},
								TypeHandlerVersion: to.Ptr("1.0"),
							}},
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateEnabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionTaskCompletion),
					ResizeTimeout:          to.Ptr("PT8M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](6),
					TargetLowPriorityNodes: to.Ptr[int32](28),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						ResizeTimeout:          to.Ptr("PT8M"),
						TargetDedicatedNodes:   to.Ptr[int32](6),
						TargetLowPriorityNodes: to.Ptr[int32](28),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypePack),
				},
				TaskSlotsPerNode: to.Ptr[int32](13),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolGet_VirtualMachineConfiguration_Extensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPool_DisableAutoScale(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolDisableAutoScale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable AutoScale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	res, err := client.DisableAutoScale(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolDisableAutoScale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("latest"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						ResizeTimeout:          to.Ptr("PT15M"),
						TargetDedicatedNodes:   to.Ptr[int32](3),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolDisableAutoScale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPool_StopResize(t *testing.T) {
	// From example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolStopResize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StopPoolResize"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbatch.NewPoolClient("subid", cred, &options)
	res, err := client.StopResize(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolStopResize.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbatch.Pool{
			Name: to.Ptr("testpool"),
			Type: to.Ptr("Microsoft.Batch/batchAccounts/pools"),
			Etag: to.Ptr("W/\"0x8D4EDFEBFADF4AB\""),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool"),
			Properties: &armbatch.PoolProperties{
				AllocationState:               to.Ptr(armbatch.AllocationStateSteady),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CreationTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				CurrentDedicatedNodes:         to.Ptr[int32](0),
				CurrentLowPriorityNodes:       to.Ptr[int32](0),
				DeploymentConfiguration: &armbatch.DeploymentConfiguration{
					VirtualMachineConfiguration: &armbatch.VirtualMachineConfiguration{
						ImageReference: &armbatch.ImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("latest"),
						},
						NodeAgentSKUID: to.Ptr("batch.node.ubuntu 18.04"),
					},
				},
				InterNodeCommunication:          to.Ptr(armbatch.InterNodeCommunicationStateDisabled),
				LastModified:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ProvisioningState:               to.Ptr(armbatch.PoolProvisioningStateSucceeded),
				ProvisioningStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
				ResizeOperationStatus: &armbatch.ResizeOperationStatus{
					NodeDeallocationOption: to.Ptr(armbatch.ComputeNodeDeallocationOptionRequeue),
					ResizeTimeout:          to.Ptr("PT10M"),
					StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-28T10:22:55.9407275Z"); return t }()),
					TargetDedicatedNodes:   to.Ptr[int32](1),
				},
				ScaleSettings: &armbatch.ScaleSettings{
					FixedScale: &armbatch.FixedScaleSettings{
						ResizeTimeout:          to.Ptr("PT15M"),
						TargetDedicatedNodes:   to.Ptr[int32](3),
						TargetLowPriorityNodes: to.Ptr[int32](0),
					},
				},
				TaskSchedulingPolicy: &armbatch.TaskSchedulingPolicy{
					NodeFillType: to.Ptr(armbatch.ComputeNodeFillTypeSpread),
				},
				TaskSlotsPerNode: to.Ptr[int32](1),
				VMSize:           to.Ptr("STANDARD_D4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pool)
			t.Fatalf("Mock response is not equal to example response for example specification/batch/resource-manager/Microsoft.Batch/stable/2021-06-01/examples/PoolStopResize.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
