//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbatch

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestBatchAccount_Create(t *testing.T) {
	// From example BatchAccountCreate_BYOS
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountCreateParameters{
			Location: to.StringPtr("japaneast"),
			Properties: &BatchAccountCreateProperties{
				AutoStorage: &AutoStorageBaseProperties{
					StorageAccountID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
				KeyVaultReference: &KeyVaultReference{
					ID:  to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample"),
					URL: to.StringPtr("http://sample.vault.azure.net/"),
				},
				PoolAllocationMode: PoolAllocationModeUserSubscription.ToPtr(),
			},
		},
		&BatchAccountBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}

	// From example BatchAccountCreate_Default
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountCreateParameters{
			Location: to.StringPtr("japaneast"),
			Properties: &BatchAccountCreateProperties{
				AutoStorage: &AutoStorageBaseProperties{
					StorageAccountID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&BatchAccountBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}

	// From example BatchAccountCreate_SystemAssignedIdentity
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountCreateParameters{
			Identity: &BatchAccountIdentity{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Location: to.StringPtr("japaneast"),
			Properties: &BatchAccountCreateProperties{
				AutoStorage: &AutoStorageBaseProperties{
					StorageAccountID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&BatchAccountBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}

	// From example BatchAccountCreate_UserAssignedIdentity
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountCreateParameters{
			Identity: &BatchAccountIdentity{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentities{
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &UserAssignedIdentities{},
				},
			},
			Location: to.StringPtr("japaneast"),
			Properties: &BatchAccountCreateProperties{
				AutoStorage: &AutoStorageBaseProperties{
					StorageAccountID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&BatchAccountBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}

	// From example PrivateBatchAccountCreate
	poller, err = client.BeginCreate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountCreateParameters{
			Location: to.StringPtr("japaneast"),
			Properties: &BatchAccountCreateProperties{
				AutoStorage: &AutoStorageBaseProperties{
					StorageAccountID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
				KeyVaultReference: &KeyVaultReference{
					ID:  to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample"),
					URL: to.StringPtr("http://sample.vault.azure.net/"),
				},
				PublicNetworkAccess: PublicNetworkAccessTypeDisabled.ToPtr(),
			},
		},
		&BatchAccountBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}
}

func TestBatchAccount_Update(t *testing.T) {
	// From example BatchAccountUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountUpdateParameters{
			Properties: &BatchAccountUpdateProperties{
				AutoStorage: &AutoStorageBaseProperties{
					StorageAccountID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
				},
			},
		},
		&BatchAccountUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}
}

func TestBatchAccount_Delete(t *testing.T) {
	// From example BatchAccountDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		&BatchAccountBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBatchAccount_Get(t *testing.T) {
	// From example BatchAccountGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		&BatchAccountGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}

	// From example PrivateBatchAccountGet
	res, err = client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		&BatchAccountGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchAccount.ID == nil {
		t.Fatal("BatchAccount.ID should not be nil!")
	}
}

func TestBatchAccount_List(t *testing.T) {
	// From example BatchAccountList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	pager := client.List(&BatchAccountListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BatchAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BatchAccount.ID should not be nil!")
			}
		}
	}
}

func TestBatchAccount_ListByResourceGroup(t *testing.T) {
	// From example BatchAccountListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	pager := client.ListByResourceGroup("default-azurebatch-japaneast",
		&BatchAccountListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BatchAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BatchAccount.ID should not be nil!")
			}
		}
	}
}

func TestBatchAccount_SynchronizeAutoStorageKeys(t *testing.T) {
	// From example BatchAccountSynchronizeAutoStorageKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	_, err := client.SynchronizeAutoStorageKeys(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		&BatchAccountSynchronizeAutoStorageKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBatchAccount_RegenerateKey(t *testing.T) {
	// From example BatchAccountRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	_, err := client.RegenerateKey(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		BatchAccountRegenerateKeyParameters{
			KeyName: AccountKeyTypePrimary.ToPtr(),
		},
		&BatchAccountRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBatchAccount_GetKeys(t *testing.T) {
	// From example BatchAccountGetKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	_, err := client.GetKeys(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		&BatchAccountGetKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBatchAccount_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example ListOutboundNetworkDependencies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBatchAccountClient(con,
		"subid")
	pager := client.ListOutboundNetworkDependenciesEndpoints("default-azurebatch-japaneast",
		"sampleacct",
		&BatchAccountListOutboundNetworkDependenciesEndpointsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestApplicationPackage_Activate(t *testing.T) {
	// From example ApplicationPackageActivate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationPackageClient(con,
		"subid")
	res, err := client.Activate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		ActivateApplicationPackageParameters{
			Format: to.StringPtr("zip"),
		},
		&ApplicationPackageActivateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationPackage.ID == nil {
		t.Fatal("ApplicationPackage.ID should not be nil!")
	}
}

func TestApplicationPackage_Create(t *testing.T) {
	// From example ApplicationPackageCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationPackageClient(con,
		"subid")
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		&ApplicationPackageCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationPackage.ID == nil {
		t.Fatal("ApplicationPackage.ID should not be nil!")
	}
}

func TestApplicationPackage_Delete(t *testing.T) {
	// From example ApplicationPackageDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationPackageClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		&ApplicationPackageDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplicationPackage_Get(t *testing.T) {
	// From example ApplicationPackageGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationPackageClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		"1",
		&ApplicationPackageGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicationPackage.ID == nil {
		t.Fatal("ApplicationPackage.ID should not be nil!")
	}
}

func TestApplicationPackage_List(t *testing.T) {
	// From example ApplicationPackageList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationPackageClient(con,
		"subid")
	pager := client.List("default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		&ApplicationPackageListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ApplicationPackage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ApplicationPackage.ID should not be nil!")
			}
		}
	}
}

func TestApplication_Create(t *testing.T) {
	// From example ApplicationCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationClient(con,
		"subid")
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		&ApplicationCreateOptions{Parameters: &Application{
			Properties: &ApplicationProperties{
				AllowUpdates: to.BoolPtr(false),
				DisplayName:  to.StringPtr("myAppName"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Application.ID == nil {
		t.Fatal("Application.ID should not be nil!")
	}
}

func TestApplication_Delete(t *testing.T) {
	// From example ApplicationDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		&ApplicationDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplication_Get(t *testing.T) {
	// From example ApplicationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		&ApplicationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Application.ID == nil {
		t.Fatal("Application.ID should not be nil!")
	}
}

func TestApplication_Update(t *testing.T) {
	// From example ApplicationUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationClient(con,
		"subid")
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"app1",
		Application{
			Properties: &ApplicationProperties{
				AllowUpdates:   to.BoolPtr(true),
				DefaultVersion: to.StringPtr("2"),
				DisplayName:    to.StringPtr("myAppName"),
			},
		},
		&ApplicationUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Application.ID == nil {
		t.Fatal("Application.ID should not be nil!")
	}
}

func TestApplication_List(t *testing.T) {
	// From example ApplicationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplicationClient(con,
		"subid")
	pager := client.List("default-azurebatch-japaneast",
		"sampleacct",
		&ApplicationListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Application.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Application.ID should not be nil!")
			}
		}
	}
}

func TestLocation_GetQuotas(t *testing.T) {
	// From example LocationGetQuotas
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	_, err := client.GetQuotas(ctx,
		"japaneast",
		&LocationGetQuotasOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocation_ListSupportedVirtualMachineSkus(t *testing.T) {
	// From example LocationListVirtualMachineSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	pager := client.ListSupportedVirtualMachineSKUs("japaneast",
		&LocationListSupportedVirtualMachineSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestLocation_ListSupportedCloudServiceSkus(t *testing.T) {
	// From example LocationListCloudServiceSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	pager := client.ListSupportedCloudServiceSKUs("japaneast",
		&LocationListSupportedCloudServiceSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestLocation_CheckNameAvailability(t *testing.T) {
	// From example LocationCheckNameAvailability_AlreadyExists
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	_, err := client.CheckNameAvailability(ctx,
		"japaneast",
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("existingaccountname"),
			Type: to.StringPtr("Microsoft.Batch/batchAccounts"),
		},
		&LocationCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example LocationCheckNameAvailability_Available
	_, err = client.CheckNameAvailability(ctx,
		"japaneast",
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("newaccountname"),
			Type: to.StringPtr("Microsoft.Batch/batchAccounts"),
		},
		&LocationCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCertificate_ListByBatchAccount(t *testing.T) {
	// From example ListCertificates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&CertificateListByBatchAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Certificate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Certificate.ID should not be nil!")
			}
		}
	}

	// From example ListCertificates - Filter and Select
	pager = client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&CertificateListByBatchAccountOptions{Select: to.StringPtr("properties/format,properties/provisioningState"),
			Filter: to.StringPtr("properties/provisioningStateTransitionTime gt '2017-05-01' or properties/provisioningState eq 'Failed'"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Certificate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Certificate.ID should not be nil!")
			}
		}
	}
}

func TestCertificate_Create(t *testing.T) {
	// From example CreateCertificate - Full
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		CertificateCreateOrUpdateParameters{
			Properties: &CertificateCreateOrUpdateProperties{
				CertificateBaseProperties: CertificateBaseProperties{
					Format:              CertificateFormatPfx.ToPtr(),
					Thumbprint:          to.StringPtr("0a0e4f50d51beadeac1d35afc5116098e7902e6e"),
					ThumbprintAlgorithm: to.StringPtr("sha1"),
				},
				Data:     to.StringPtr("MIIJsgIBAzCCCW4GCSqGSIb3DQE..."),
				Password: to.StringPtr("<ExamplePassword>"),
			},
		},
		&CertificateCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}

	// From example CreateCertificate - Minimal Cer
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		CertificateCreateOrUpdateParameters{
			Properties: &CertificateCreateOrUpdateProperties{
				CertificateBaseProperties: CertificateBaseProperties{
					Format: CertificateFormatCer.ToPtr(),
				},
				Data: to.StringPtr("MIICrjCCAZagAwI..."),
			},
		},
		&CertificateCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}

	// From example CreateCertificate - Minimal Pfx
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		CertificateCreateOrUpdateParameters{
			Properties: &CertificateCreateOrUpdateProperties{
				Data:     to.StringPtr("MIIJsgIBAzCCCW4GCSqGSIb3DQE..."),
				Password: to.StringPtr("<ExamplePassword>"),
			},
		},
		&CertificateCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificate_Update(t *testing.T) {
	// From example UpdateCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		CertificateCreateOrUpdateParameters{
			Properties: &CertificateCreateOrUpdateProperties{
				Data:     to.StringPtr("MIIJsgIBAzCCCW4GCSqGSIb3DQE..."),
				Password: to.StringPtr("<ExamplePassword>"),
			},
		},
		&CertificateUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificate_Delete(t *testing.T) {
	// From example CertificateDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		&CertificateBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificate_Get(t *testing.T) {
	// From example Get Certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		&CertificateGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}

	// From example Get Certificate with Deletion Error
	res, err = client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		&CertificateGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificate_CancelDeletion(t *testing.T) {
	// From example CertificateCancelDeletion
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.CancelDeletion(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e",
		&CertificateCancelDeletionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestPrivateLinkResource_ListByBatchAccount(t *testing.T) {
	// From example ListPrivateLinkResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourceClient(con,
		"subid")
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&PrivateLinkResourceListByBatchAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResource_Get(t *testing.T) {
	// From example GetPrivateLinkResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourceClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"sampleacct",
		&PrivateLinkResourceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateEndpointConnection_ListByBatchAccount(t *testing.T) {
	// From example ListPrivateEndpointConnections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&PrivateEndpointConnectionListByBatchAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnection_Get(t *testing.T) {
	// From example GetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testprivateEndpointConnection5testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0",
		&PrivateEndpointConnectionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnection_Update(t *testing.T) {
	// From example UpdatePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Approved by xyz.abc@company.com"),
					Status:      PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPool_ListByBatchAccount(t *testing.T) {
	// From example ListPool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	pager := client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&PoolListByBatchAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Pool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Pool.ID should not be nil!")
			}
		}
	}

	// From example ListPoolWithFilter
	pager = client.ListByBatchAccount("default-azurebatch-japaneast",
		"sampleacct",
		&PoolListByBatchAccountOptions{Select: to.StringPtr("properties/allocationState,properties/provisioningStateTransitionTime,properties/currentDedicatedNodes,properties/currentLowPriorityNodes"),
			Filter: to.StringPtr("startswith(name, 'po') or (properties/allocationState eq 'Steady' and properties/provisioningStateTransitionTime lt datetime'2017-02-02')"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Pool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Pool.ID should not be nil!")
			}
		}
	}
}

func TestPool_Create(t *testing.T) {
	// From example CreatePool - Custom Image
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	res, err := client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						ImageReference: &ImageReference{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.StringPtr("batch.node.ubuntu 18.04"),
					},
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - Full CloudServiceConfiguration
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				ApplicationLicenses: []*string{
					to.StringPtr("app-license0"),
					to.StringPtr("app-license1")},
				ApplicationPackages: []*ApplicationPackageReference{
					{
						ID:      to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
						Version: to.StringPtr("asdf"),
					}},
				Certificates: []*CertificateReference{
					{
						ID:            to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: CertificateStoreLocationLocalMachine.ToPtr(),
						StoreName:     to.StringPtr("MY"),
						Visibility: []*CertificateVisibility{
							CertificateVisibilityRemoteUser.ToPtr()},
					}},
				DeploymentConfiguration: &DeploymentConfiguration{
					CloudServiceConfiguration: &CloudServiceConfiguration{
						OSFamily:  to.StringPtr("4"),
						OSVersion: to.StringPtr("WA-GUEST-OS-4.45_201708-01"),
					},
				},
				DisplayName:            to.StringPtr("my-pool-name"),
				InterNodeCommunication: InterNodeCommunicationStateEnabled.ToPtr(),
				Metadata: []*MetadataItem{
					{
						Name:  to.StringPtr("metadata-1"),
						Value: to.StringPtr("value-1"),
					},
					{
						Name:  to.StringPtr("metadata-2"),
						Value: to.StringPtr("value-2"),
					}},
				NetworkConfiguration: &NetworkConfiguration{
					PublicIPAddressConfiguration: &PublicIPAddressConfiguration{
						IPAddressIDs: []*string{
							to.StringPtr("/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135"),
							to.StringPtr("/subscriptions/subid2/resourceGroups/rg24/providers/Microsoft.Network/publicIPAddresses/ip268")},
						Provision: IPAddressProvisioningTypeUserManaged.ToPtr(),
					},
					SubnetID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				ScaleSettings: &ScaleSettings{
					FixedScale: &FixedScaleSettings{
						NodeDeallocationOption: ComputeNodeDeallocationOptionTaskCompletion.ToPtr(),
						ResizeTimeout:          to.StringPtr("PT8M"),
						TargetDedicatedNodes:   to.Int32Ptr(6),
						TargetLowPriorityNodes: to.Int32Ptr(28),
					},
				},
				StartTask: &StartTask{
					CommandLine: to.StringPtr("cmd /c SET"),
					EnvironmentSettings: []*EnvironmentSetting{
						{
							Name:  to.StringPtr("MYSET"),
							Value: to.StringPtr("1234"),
						}},
					MaxTaskRetryCount: to.Int32Ptr(6),
					ResourceFiles: []*ResourceFile{
						{
							FileMode: to.StringPtr("777"),
							FilePath: to.StringPtr("c:\\temp\\gohere"),
							HTTPURL:  to.StringPtr("https://testaccount.blob.core.windows.net/example-blob-file"),
						}},
					UserIdentity: &UserIdentity{
						AutoUser: &AutoUserSpecification{
							ElevationLevel: ElevationLevelAdmin.ToPtr(),
							Scope:          AutoUserScopePool.ToPtr(),
						},
					},
					WaitForSuccess: to.BoolPtr(true),
				},
				TaskSchedulingPolicy: &TaskSchedulingPolicy{
					NodeFillType: ComputeNodeFillTypePack.ToPtr(),
				},
				TaskSlotsPerNode: to.Int32Ptr(13),
				UserAccounts: []*UserAccount{
					{
						Name:           to.StringPtr("username1"),
						ElevationLevel: ElevationLevelAdmin.ToPtr(),
						LinuxUserConfiguration: &LinuxUserConfiguration{
							Gid:           to.Int32Ptr(4567),
							SSHPrivateKey: to.StringPtr("sshprivatekeyvalue"),
							UID:           to.Int32Ptr(1234),
						},
						Password: to.StringPtr("<ExamplePassword>"),
					}},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - Full VirtualMachineConfiguration
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						DataDisks: []*DataDisk{
							{
								Caching:            CachingTypeReadWrite.ToPtr(),
								DiskSizeGB:         to.Int32Ptr(30),
								Lun:                to.Int32Ptr(0),
								StorageAccountType: StorageAccountTypePremiumLRS.ToPtr(),
							},
							{
								Caching:            CachingTypeNone.ToPtr(),
								DiskSizeGB:         to.Int32Ptr(200),
								Lun:                to.Int32Ptr(1),
								StorageAccountType: StorageAccountTypeStandardLRS.ToPtr(),
							}},
						DiskEncryptionConfiguration: &DiskEncryptionConfiguration{
							Targets: []*DiskEncryptionTarget{
								DiskEncryptionTargetOsDisk.ToPtr(),
								DiskEncryptionTargetTemporaryDisk.ToPtr()},
						},
						ImageReference: &ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter-SmallDisk"),
							Version:   to.StringPtr("latest"),
						},
						LicenseType:    to.StringPtr("Windows_Server"),
						NodeAgentSKUID: to.StringPtr("batch.node.windows amd64"),
						NodePlacementConfiguration: &NodePlacementConfiguration{
							Policy: NodePlacementPolicyTypeZonal.ToPtr(),
						},
						OSDisk: &OSDisk{
							EphemeralOSDiskSettings: &DiffDiskSettings{
								Placement: to.StringPtr("CacheDisk"),
							},
						},
						WindowsConfiguration: &WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(false),
						},
					},
				},
				NetworkConfiguration: &NetworkConfiguration{
					EndpointConfiguration: &PoolEndpointConfiguration{
						InboundNatPools: []*InboundNatPool{
							{
								Name:                   to.StringPtr("testnat"),
								BackendPort:            to.Int32Ptr(12001),
								FrontendPortRangeEnd:   to.Int32Ptr(15100),
								FrontendPortRangeStart: to.Int32Ptr(15000),
								NetworkSecurityGroupRules: []*NetworkSecurityGroupRule{
									{
										Access:              NetworkSecurityGroupRuleAccessAllow.ToPtr(),
										Priority:            to.Int32Ptr(150),
										SourceAddressPrefix: to.StringPtr("192.100.12.45"),
										SourcePortRanges: []*string{
											to.StringPtr("1"),
											to.StringPtr("2")},
									},
									{
										Access:              NetworkSecurityGroupRuleAccessDeny.ToPtr(),
										Priority:            to.Int32Ptr(3500),
										SourceAddressPrefix: to.StringPtr("*"),
										SourcePortRanges: []*string{
											to.StringPtr("*")},
									}},
								Protocol: InboundEndpointProtocolTCP.ToPtr(),
							}},
					},
				},
				ScaleSettings: &ScaleSettings{
					AutoScale: &AutoScaleSettings{
						EvaluationInterval: to.StringPtr("PT5M"),
						Formula:            to.StringPtr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - Minimal CloudServiceConfiguration
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					CloudServiceConfiguration: &CloudServiceConfiguration{
						OSFamily: to.StringPtr("5"),
					},
				},
				ScaleSettings: &ScaleSettings{
					FixedScale: &FixedScaleSettings{
						TargetDedicatedNodes: to.Int32Ptr(3),
					},
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - Minimal VirtualMachineConfiguration
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						ImageReference: &ImageReference{
							Offer:     to.StringPtr("UbuntuServer"),
							Publisher: to.StringPtr("Canonical"),
							SKU:       to.StringPtr("18.04-LTS"),
							Version:   to.StringPtr("latest"),
						},
						NodeAgentSKUID: to.StringPtr("batch.node.ubuntu 18.04"),
					},
				},
				ScaleSettings: &ScaleSettings{
					AutoScale: &AutoScaleSettings{
						EvaluationInterval: to.StringPtr("PT5M"),
						Formula:            to.StringPtr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - No public IP
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						ImageReference: &ImageReference{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.StringPtr("batch.node.ubuntu 18.04"),
					},
				},
				NetworkConfiguration: &NetworkConfiguration{
					PublicIPAddressConfiguration: &PublicIPAddressConfiguration{
						Provision: IPAddressProvisioningTypeNoPublicIPAddresses.ToPtr(),
					},
					SubnetID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - Public IPs
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						ImageReference: &ImageReference{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1"),
						},
						NodeAgentSKUID: to.StringPtr("batch.node.ubuntu 18.04"),
					},
				},
				NetworkConfiguration: &NetworkConfiguration{
					PublicIPAddressConfiguration: &PublicIPAddressConfiguration{
						IPAddressIDs: []*string{
							to.StringPtr("/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135")},
						Provision: IPAddressProvisioningTypeUserManaged.ToPtr(),
					},
					SubnetID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123"),
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - UserAssignedIdentities
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Identity: &BatchPoolIdentity{
				Type: PoolIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentities{
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &UserAssignedIdentities{},
					"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": &UserAssignedIdentities{},
				},
			},
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						ImageReference: &ImageReference{
							Offer:     to.StringPtr("UbuntuServer"),
							Publisher: to.StringPtr("Canonical"),
							SKU:       to.StringPtr("18.04-LTS"),
							Version:   to.StringPtr("latest"),
						},
						NodeAgentSKUID: to.StringPtr("batch.node.ubuntu 18.04"),
					},
				},
				ScaleSettings: &ScaleSettings{
					AutoScale: &AutoScaleSettings{
						EvaluationInterval: to.StringPtr("PT5M"),
						Formula:            to.StringPtr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example CreatePool - VirtualMachineConfiguration Extensions
	res, err = client.Create(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				DeploymentConfiguration: &DeploymentConfiguration{
					VirtualMachineConfiguration: &VirtualMachineConfiguration{
						ImageReference: &ImageReference{
							Offer:     to.StringPtr("0001-com-ubuntu-server-focal"),
							Publisher: to.StringPtr("Canonical"),
							SKU:       to.StringPtr("20_04-lts"),
						},
						NodeAgentSKUID: to.StringPtr("batch.node.ubuntu 20.04"),
						Extensions: []*VMExtension{
							{
								Name:                    to.StringPtr("batchextension1"),
								Type:                    to.StringPtr("SecurityMonitoringForLinux"),
								AutoUpgradeMinorVersion: to.BoolPtr(true),
								ProtectedSettings: map[string]interface{}{
									"protectedSettingsKey": "protectedSettingsValue",
								},
								Publisher: to.StringPtr("Microsoft.Azure.Security.Monitoring"),
								Settings: map[string]interface{}{
									"settingsKey": "settingsValue",
								},
								TypeHandlerVersion: to.StringPtr("1.0"),
							}},
					},
				},
				ScaleSettings: &ScaleSettings{
					AutoScale: &AutoScaleSettings{
						EvaluationInterval: to.StringPtr("PT5M"),
						Formula:            to.StringPtr("$TargetDedicatedNodes=1"),
					},
				},
				VMSize: to.StringPtr("STANDARD_D4"),
			},
		},
		&PoolCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}
}

func TestPool_Update(t *testing.T) {
	// From example UpdatePool - Enable Autoscale
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	res, err := client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				ScaleSettings: &ScaleSettings{
					AutoScale: &AutoScaleSettings{
						Formula: to.StringPtr("$TargetDedicatedNodes=34"),
					},
				},
			},
		},
		&PoolUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example UpdatePool - Other Properties
	res, err = client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				ApplicationPackages: []*ApplicationPackageReference{
					{
						ID: to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234"),
					},
					{
						ID:      to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_5678"),
						Version: to.StringPtr("1.0"),
					}},
				Certificates: []*CertificateReference{
					{
						ID:            to.StringPtr("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567"),
						StoreLocation: CertificateStoreLocationLocalMachine.ToPtr(),
						StoreName:     to.StringPtr("MY"),
					}},
				Metadata: []*MetadataItem{
					{
						Name:  to.StringPtr("key1"),
						Value: to.StringPtr("value1"),
					}},
			},
		},
		&PoolUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example UpdatePool - Remove Start Task
	res, err = client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				StartTask: &StartTask{},
			},
		},
		&PoolUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example UpdatePool - Resize Pool
	res, err = client.Update(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		Pool{
			Properties: &PoolProperties{
				ScaleSettings: &ScaleSettings{
					FixedScale: &FixedScaleSettings{
						NodeDeallocationOption: ComputeNodeDeallocationOptionTaskCompletion.ToPtr(),
						ResizeTimeout:          to.StringPtr("PT8M"),
						TargetDedicatedNodes:   to.Int32Ptr(5),
						TargetLowPriorityNodes: to.Int32Ptr(0),
					},
				},
			},
		},
		&PoolUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}
}

func TestPool_Delete(t *testing.T) {
	// From example DeletePool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		&PoolBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPool_Get(t *testing.T) {
	// From example GetPool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	res, err := client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		&PoolGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}

	// From example GetPool - VirtualMachineConfiguration Extensions
	res, err = client.Get(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		&PoolGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}
}

func TestPool_DisableAutoScale(t *testing.T) {
	// From example Disable AutoScale
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	res, err := client.DisableAutoScale(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		&PoolDisableAutoScaleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}
}

func TestPool_StopResize(t *testing.T) {
	// From example StopPoolResize
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoolClient(con,
		"subid")
	res, err := client.StopResize(ctx,
		"default-azurebatch-japaneast",
		"sampleacct",
		"testpool",
		&PoolStopResizeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Pool.ID == nil {
		t.Fatal("Pool.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
