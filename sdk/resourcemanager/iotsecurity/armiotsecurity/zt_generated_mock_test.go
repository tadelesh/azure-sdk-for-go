//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotsecurity_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotsecurity/armiotsecurity"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDefenderSettings_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT Defender settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDefenderSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.DefenderSettingsList{
			Value: []*armiotsecurity.DefenderSettingsModel{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.IoTSecurity/defenderSettings"),
					ID:   to.Ptr("/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default"),
					Properties: &armiotsecurity.DefenderSettingsProperties{
						DeviceQuota: to.Ptr[int32](2000),
						MdeIntegration: &armiotsecurity.DefenderSettingsPropertiesMdeIntegration{
							Status: to.Ptr(armiotsecurity.MdeIntegrationEnabled),
						},
						OnboardingKind: to.Ptr(armiotsecurity.OnboardingKindDefault),
						SentinelWorkspaceResourceIDs: []*string{
							to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DefenderSettingsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefenderSettingsList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefenderSettings_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get IoT Defender settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDefenderSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.DefenderSettingsModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.IoTSecurity/defenderSettings"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default"),
			Properties: &armiotsecurity.DefenderSettingsProperties{
				DeviceQuota:       to.Ptr[int32](2000),
				EvaluationEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-29T00:00:00.0000000Z"); return t }()),
				MdeIntegration: &armiotsecurity.DefenderSettingsPropertiesMdeIntegration{
					Status: to.Ptr(armiotsecurity.MdeIntegrationEnabled),
				},
				OnboardingKind: to.Ptr(armiotsecurity.OnboardingKindEvaluation),
				SentinelWorkspaceResourceIDs: []*string{
					to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DefenderSettingsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefenderSettingsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefenderSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update IoT Defender settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDefenderSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		armiotsecurity.DefenderSettingsModel{
			Properties: &armiotsecurity.DefenderSettingsProperties{
				DeviceQuota: to.Ptr[int32](2000),
				MdeIntegration: &armiotsecurity.DefenderSettingsPropertiesMdeIntegration{
					Status: to.Ptr(armiotsecurity.MdeIntegrationEnabled),
				},
				OnboardingKind: to.Ptr(armiotsecurity.OnboardingKindDefault),
				SentinelWorkspaceResourceIDs: []*string{
					to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.DefenderSettingsModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.IoTSecurity/defenderSettings"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default"),
			Properties: &armiotsecurity.DefenderSettingsProperties{
				DeviceQuota: to.Ptr[int32](2000),
				MdeIntegration: &armiotsecurity.DefenderSettingsPropertiesMdeIntegration{
					Status: to.Ptr(armiotsecurity.MdeIntegrationEnabled),
				},
				OnboardingKind: to.Ptr(armiotsecurity.OnboardingKindDefault),
				SentinelWorkspaceResourceIDs: []*string{
					to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DefenderSettingsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefenderSettingsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefenderSettings_Delete(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete IoT Defender settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDefenderSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/Delete.json: %v", err)
	}
}

func TestDefenderSettings_PackageDownloads(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/PackageDownloads.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Package downloads"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDefenderSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.PackageDownloads(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/PackageDownloads.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.PackageDownloads{
			AuthorizedDevicesImportTemplate: []*armiotsecurity.PackageDownloadInfo{
				{
					Link:    to.Ptr("http://microsoft.com/downloadLocation"),
					Version: to.Ptr("2020.02.10"),
				}},
			CentralManager: &armiotsecurity.PackageDownloadsCentralManager{
				Full: &armiotsecurity.PackageDownloadsCentralManagerFull{
					Iso: []*armiotsecurity.PackageDownloadInfo{
						{
							Link:        to.Ptr("http://microsoft.com/downloadLocation"),
							Version:     to.Ptr("3.1"),
							VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
						},
						{
							Link:        to.Ptr("http://microsoft.com/downloadLocation"),
							Version:     to.Ptr("2.8.11"),
							VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
						}},
					Ovf: &armiotsecurity.PackageDownloadsCentralManagerFullOvf{
						Enterprise: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							}},
						EnterpriseHighAvailability: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							}},
						Medium: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							}},
						MediumHighAvailability: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							}},
					},
				},
				Upgrade: []*armiotsecurity.UpgradePackageDownloadInfo{
					{
						Link:        to.Ptr("http://microsoft.com/downloadLocation"),
						Version:     to.Ptr("2.8.2"),
						VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
						FromVersion: to.Ptr("2.8.0"),
					},
					{
						Link:        to.Ptr("http://microsoft.com/downloadLocation"),
						Version:     to.Ptr("2.8.10"),
						VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
						FromVersion: to.Ptr("2.8.0"),
					}},
			},
			DeviceInformationUpdateImportTemplate: []*armiotsecurity.PackageDownloadInfo{
				{
					Link:    to.Ptr("http://microsoft.com/downloadLocation"),
					Version: to.Ptr("2020.02.10"),
				}},
			Sensor: &armiotsecurity.PackageDownloadsSensor{
				Full: &armiotsecurity.PackageDownloadsSensorFull{
					Iso: []*armiotsecurity.PackageDownloadInfo{
						{
							Link:        to.Ptr("http://microsoft.com/downloadLocation"),
							Version:     to.Ptr("3.1"),
							VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
						},
						{
							Link:        to.Ptr("http://microsoft.com/downloadLocation"),
							Version:     to.Ptr("2.8.11"),
							VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
						}},
					Ovf: &armiotsecurity.PackageDownloadsSensorFullOvf{
						Enterprise: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							},
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("2.8.11"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
							}},
						Line: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							},
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("2.8.11"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
							}},
						Medium: []*armiotsecurity.PackageDownloadInfo{
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("3.1"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
							},
							{
								Link:        to.Ptr("http://microsoft.com/downloadLocation"),
								Version:     to.Ptr("2.8.11"),
								VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
							}},
					},
				},
				Upgrade: []*armiotsecurity.UpgradePackageDownloadInfo{
					{
						Link:        to.Ptr("http://microsoft.com/downloadLocation"),
						Version:     to.Ptr("2.8.2"),
						VersionKind: to.Ptr(armiotsecurity.VersionKindLatest),
						FromVersion: to.Ptr("2.8.0"),
					},
					{
						Link:        to.Ptr("http://microsoft.com/downloadLocation"),
						Version:     to.Ptr("2.8.10"),
						VersionKind: to.Ptr(armiotsecurity.VersionKindPrevious),
						FromVersion: to.Ptr("2.8.0"),
					}},
			},
			Snmp: []*armiotsecurity.PackageDownloadInfo{
				{
					Link:    to.Ptr("http://microsoft.com/downloadLocation"),
					Version: to.Ptr("2020.02.10"),
				}},
			ThreatIntelligence: []*armiotsecurity.PackageDownloadInfo{
				{
					Link:    to.Ptr("http://microsoft.com/downloadLocation"),
					Version: to.Ptr("2020.02.10"),
				}},
			WmiTool: []*armiotsecurity.PackageDownloadInfo{
				{
					Link:    to.Ptr("http://microsoft.com/downloadLocation"),
					Version: to.Ptr("2020.02.10"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PackageDownloads) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PackageDownloads)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/PackageDownloads.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefenderSettings_DownloadManagerActivation(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/DownloadManagerActivation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Download quota data of the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDefenderSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.DownloadManagerActivation(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DefenderSettings/DownloadManagerActivation.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Operations/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update IoT Defender settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Operations/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotsecurity.OperationList{
			Value: []*armiotsecurity.Operation{
				{
					Name: to.Ptr("Microsoft.IoTSecurity/unregister/action"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Unregisters the subscription for Azure Defender for IoT"),
						Operation:   to.Ptr("Unregister Subscription"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.IoTSecurity/register/action"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Registers the subscription for Azure Defender for IoT"),
						Operation:   to.Ptr("Register Subscription"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.IoTSecurity/defenderSettings/read"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Gets IoT Defender Settings"),
						Operation:   to.Ptr("Get IoT Defender Settings"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("IoT Defender Settings"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.IoTSecurity/defenderSettings/write"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Creates or updates IoT Defender Settings"),
						Operation:   to.Ptr("Create or update IoT Defender Settings"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("IoT Defender Settings"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.IoTSecurity/defenderSettings/delete"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Deletes IoT Defender Settings"),
						Operation:   to.Ptr("Delete IoT Defender Settings"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("IoT Defender Settings"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.IoTSecurity/defenderSettings/packageDownloads/action"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Gets downloadable IoT Defender packages information"),
						Operation:   to.Ptr("Get downloadable IoT Defender packages information"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("IoT Defender Settings"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.IoTSecurity/defenderSettings/downloadManagerActivation/action"),
					Display: &armiotsecurity.OperationDisplay{
						Description: to.Ptr("Download manager activation file"),
						Operation:   to.Ptr("Download manager activation file"),
						Provider:    to.Ptr("Microsoft IoT Security"),
						Resource:    to.Ptr("IoT Defender Settings"),
					},
					Origin: to.Ptr("user"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Operations/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSites_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT sites"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSitesClient(cred, &options)
	res, err := client.List(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/sites",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.SitesList{
			Value: []*armiotsecurity.SiteModel{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.IoTSecurity/sites"),
					ID:   to.Ptr("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sites/default"),
					Properties: &armiotsecurity.SiteProperties{
						DisplayName: to.Ptr("IoT site name"),
						Tags: map[string]*string{
							"key1": to.Ptr("value1"),
							"key2": to.Ptr("value2"),
						},
					},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SitesList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SitesList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSites_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get IoT site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSitesClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.SiteModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.IoTSecurity/sites"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sites/default"),
			Properties: &armiotsecurity.SiteProperties{
				DisplayName: to.Ptr("IoT site name"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
			},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SiteModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SiteModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSites_CreateOrUpdate(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update IoT site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSitesClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		armiotsecurity.SiteModel{
			Properties: &armiotsecurity.SiteProperties{
				DisplayName: to.Ptr("IoT site name"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.SiteModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.IoTSecurity/sites"),
			ID:   to.Ptr("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sites/default"),
			Properties: &armiotsecurity.SiteProperties{
				DisplayName: to.Ptr("IoT site name"),
				Tags: map[string]*string{
					"key1": to.Ptr("value1"),
					"key2": to.Ptr("value2"),
				},
			},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SiteModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SiteModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSites_Delete(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete IoT site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSitesClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sites/Delete.json: %v", err)
	}
}

func TestSensors_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT sensors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	res, err := client.List(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.SensorsList{
			Value: []*armiotsecurity.SensorModel{
				{
					Name: to.Ptr("mySensor"),
					Type: to.Ptr("Microsoft.IoTSecurity/sensors"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sensors/mySensor"),
					Properties: &armiotsecurity.SensorProperties{
						ConnectivityTime:   to.Ptr("2020-11-17T12:31:25Z"),
						DynamicLearning:    to.Ptr(true),
						LearningMode:       to.Ptr(true),
						SensorStatus:       to.Ptr(armiotsecurity.SensorStatusOk),
						SensorType:         to.Ptr(armiotsecurity.SensorTypeOt),
						SensorVersion:      to.Ptr("2020.11.01.1643"),
						TiAutomaticUpdates: to.Ptr(true),
						TiStatus:           to.Ptr(armiotsecurity.TiStatusOk),
						TiVersion:          to.Ptr("2020-11-17T12:31:25Z"),
						Zone:               to.Ptr("Zone Name"),
					},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("otherSensor"),
					Type: to.Ptr("Microsoft.IoTSecurity/sensors"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sensors/otherSensor"),
					Properties: &armiotsecurity.SensorProperties{
						ConnectivityTime:   to.Ptr("2020-11-17T12:31:25Z"),
						DynamicLearning:    to.Ptr(false),
						LearningMode:       to.Ptr(false),
						SensorStatus:       to.Ptr(armiotsecurity.SensorStatusDisconnected),
						SensorType:         to.Ptr(armiotsecurity.SensorTypeOt),
						SensorVersion:      to.Ptr("2020.11.01.1643"),
						TiAutomaticUpdates: to.Ptr(true),
						TiStatus:           to.Ptr(armiotsecurity.TiStatusOk),
						TiVersion:          to.Ptr("2020-11-17T12:31:25Z"),
						Zone:               to.Ptr("Zone Name"),
					},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SensorsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensorsList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensors_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get IoT sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.SensorModel{
			Name: to.Ptr("mySensor"),
			Type: to.Ptr("Microsoft.IoTSecurity/sensors"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sensors/mySensor"),
			Properties: &armiotsecurity.SensorProperties{
				ConnectivityTime:   to.Ptr("2020-11-17T12:31:25Z"),
				DynamicLearning:    to.Ptr(true),
				LearningMode:       to.Ptr(true),
				SensorStatus:       to.Ptr(armiotsecurity.SensorStatusOk),
				SensorType:         to.Ptr(armiotsecurity.SensorTypeOt),
				SensorVersion:      to.Ptr("2020.11.01.1643"),
				TiAutomaticUpdates: to.Ptr(true),
				TiStatus:           to.Ptr(armiotsecurity.TiStatusOk),
				TiVersion:          to.Ptr("2020-11-17T12:31:25Z"),
				Zone:               to.Ptr("Zone Name"),
			},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensorModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensorModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensors_CreateOrUpdate(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update IoT sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		"mySensor",
		armiotsecurity.SensorModel{
			Properties: &armiotsecurity.SensorProperties{
				SensorType:         to.Ptr(armiotsecurity.SensorTypeOt),
				TiAutomaticUpdates: to.Ptr(true),
				Zone:               to.Ptr("Zone Name"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.SensorModel{
			Name: to.Ptr("mySensor"),
			Type: to.Ptr("Microsoft.IoTSecurity/sensors"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub/providers/Microsoft.IoTSecurity/sensors/mySensor"),
			Properties: &armiotsecurity.SensorProperties{
				ConnectivityTime:   to.Ptr("2020-11-17T12:31:25Z"),
				DynamicLearning:    to.Ptr(true),
				LearningMode:       to.Ptr(true),
				SensorStatus:       to.Ptr(armiotsecurity.SensorStatusOk),
				SensorType:         to.Ptr(armiotsecurity.SensorTypeOt),
				SensorVersion:      to.Ptr("2020.11.01.1643"),
				TiAutomaticUpdates: to.Ptr(true),
				TiStatus:           to.Ptr(armiotsecurity.TiStatusOk),
				TiVersion:          to.Ptr("2020-11-17T12:31:25Z"),
				Zone:               to.Ptr("Zone Name"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensorModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensorModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensors_Delete(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete IoT sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/Delete.json: %v", err)
	}
}

func TestSensors_DownloadActivation(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/DownloadActivation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Download activation file"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	_, err := client.DownloadActivation(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/DownloadActivation.json: %v", err)
	}
}

func TestSensors_DownloadResetPassword(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/DownloadResetPassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Download file for reset password of the sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	_, err := client.DownloadResetPassword(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		"mySensor",
		armiotsecurity.ResetPasswordInput{
			ApplianceID: to.Ptr("3214-528AV23-D121-D3-E1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/DownloadResetPassword.json: %v", err)
	}
}

func TestSensors_TriggerTiPackageUpdate(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/TriggerTiPackageUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger threat intelligence package update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewSensorsClient(cred, &options)
	_, err := client.TriggerTiPackageUpdate(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/myHub",
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Sensors/TriggerTiPackageUpdate.json: %v", err)
	}
}

func TestOnPremiseSensors_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List on-premise IoT sensors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOnPremiseSensorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.OnPremiseSensorsList{
			Value: []*armiotsecurity.OnPremiseSensor{
				{
					Name:       to.Ptr("mySensor"),
					Type:       to.Ptr("Microsoft.IoTSecurity/onPremiseSensors"),
					ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/sensors/mySensor"),
					Properties: map[string]interface{}{},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				},
				{
					Name:       to.Ptr("otherSensor"),
					Type:       to.Ptr("Microsoft.IoTSecurity/onPremiseSensors"),
					ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/sensors/otherSensor"),
					Properties: map[string]interface{}{},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OnPremiseSensorsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OnPremiseSensorsList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOnPremiseSensors_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get on-premise IoT sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOnPremiseSensorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.OnPremiseSensor{
			Name:       to.Ptr("mySensor"),
			Type:       to.Ptr("Microsoft.IoTSecurity/onPremiseSensors"),
			ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/onPremiseSensors/mySensor"),
			Properties: map[string]interface{}{},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OnPremiseSensor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OnPremiseSensor)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOnPremiseSensors_CreateOrUpdate(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update on-premise IoT sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOnPremiseSensorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.OnPremiseSensor{
			Name:       to.Ptr("mySensor"),
			Type:       to.Ptr("Microsoft.IoTSecurity/onPremiseSensors"),
			ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/sensors/mySensor"),
			Properties: map[string]interface{}{},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OnPremiseSensor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OnPremiseSensor)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOnPremiseSensors_Delete(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete on-premise IoT sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOnPremiseSensorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc24", cred, &options)
	_, err := client.Delete(ctx,
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/Delete.json: %v", err)
	}
}

func TestOnPremiseSensors_DownloadActivation(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/DownloadActivation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Download activation file"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOnPremiseSensorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.DownloadActivation(ctx,
		"mySensor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/DownloadActivation.json: %v", err)
	}
}

func TestOnPremiseSensors_DownloadResetPassword(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/DownloadResetPassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Download file for reset password of the sensor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewOnPremiseSensorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.DownloadResetPassword(ctx,
		"mySensor",
		armiotsecurity.ResetPasswordInput{
			ApplianceID: to.Ptr("3214-528AV23-D121-D3-E1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/OnPremiseSensors/DownloadResetPassword.json: %v", err)
	}
}

func TestLocations_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Locations/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List locations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewLocationsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<iot-defender-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Locations/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotsecurity.LocationList{
			Value: []*armiotsecurity.LocationModel{
				{
					Name:       to.Ptr("eastus"),
					Type:       to.Ptr("Microsoft.IoTSecurity/locations"),
					ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/locations/eastus"),
					Properties: map[string]interface{}{},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocationList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Locations/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Locations/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewLocationsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Locations/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.LocationModel{
			Name:       to.Ptr("eastus"),
			Type:       to.Ptr("Microsoft.IoTSecurity/locations"),
			ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/locations/eastus"),
			Properties: map[string]interface{}{},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocationModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocationModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Locations/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceGroups_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List device groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDeviceGroupsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotsecurity.DeviceGroupList{
			Value: []*armiotsecurity.DeviceGroupModel{
				{
					Name:       to.Ptr("myGroup"),
					Type:       to.Ptr("Microsoft.IoTSecurity/locations/deviceGroups"),
					ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/locations/eastus/deviceGroups/myGroup"),
					Properties: map[string]interface{}{},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceGroupList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceGroupList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceGroups_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get device group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDeviceGroupsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	res, err := client.Get(ctx,
		"myGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.DeviceGroupModel{
			Name:       to.Ptr("myGroup"),
			Type:       to.Ptr("Microsoft.IoTSecurity/locations/deviceGroups"),
			ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/locations/eastus/deviceGroups/myGroup"),
			Properties: map[string]interface{}{},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceGroupModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceGroupModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update device group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDeviceGroupsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myGroup",
		armiotsecurity.DeviceGroupModel{
			Properties: map[string]interface{}{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.DeviceGroupModel{
			Name:       to.Ptr("myGroup"),
			Type:       to.Ptr("Microsoft.IoTSecurity/locations/deviceGroups"),
			ID:         to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/deviceGroups/myGroup"),
			Properties: map[string]interface{}{},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceGroupModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceGroupModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceGroups_Delete(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete device group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDeviceGroupsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	_, err := client.Delete(ctx,
		"myGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/DeviceGroups/Delete.json: %v", err)
	}
}

func TestDevices_List(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Devices/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List devices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDevicesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	pager := client.List("myGroup",
		&armiotsecurity.DevicesClientListOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Devices/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotsecurity.DeviceList{
			Value: []*armiotsecurity.DeviceModel{
				{
					Name: to.Ptr("fa30e727-16e1-4e81-84f1-d26b9153d1b2"),
					Type: to.Ptr("Microsoft.IoTSecurity/locations/deviceGroups/devices"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/locations/eastus/deviceGroups/myGroup/devices/fa30e727-16e1-4e81-84f1-d26b9153d1b2"),
					Properties: &armiotsecurity.DeviceProperties{
						AuthorizedState:           to.Ptr(armiotsecurity.AuthorizedStateAuthorized),
						Criticality:               to.Ptr(armiotsecurity.CriticalityNormal),
						DeviceCategoryDisplayName: to.Ptr("OT"),
						DeviceCategoryID:          to.Ptr[int32](6),
						DeviceDataSource:          to.Ptr(armiotsecurity.DeviceDataSourceOtSensor),
						DeviceName:                to.Ptr("10.168.140.1"),
						DeviceStatus:              to.Ptr(armiotsecurity.DeviceStatusActive),
						DeviceSubTypeDisplayName:  to.Ptr("Historian"),
						DeviceSubTypeID:           to.Ptr[int32](2),
						DeviceTypeDisplayName:     to.Ptr("Industrial"),
						DeviceTypeID:              to.Ptr[int32](17),
						FirstSeen:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
						LastSeen:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
						LastUpdated:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
						Nics: []*armiotsecurity.Nic{
							{
								IPv4Address:  to.Ptr("10.168.140.1"),
								LastSeen:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
								MacAddress:   to.Ptr("34-E1-2D-77-80-D0"),
								MacCertainty: to.Ptr(armiotsecurity.MacCertaintyCertain),
								Vlans: []*string{
									to.Ptr("name(1)->2"),
									to.Ptr("3"),
									to.Ptr("another_name(4)")},
							}},
						OnboardingStatus: to.Ptr(armiotsecurity.OnboardingStatusInsufficientInfo),
						OperatingSystem: &armiotsecurity.OperatingSystem{
							Platform: to.Ptr("Windows"),
							Version:  to.Ptr("10\\1604"),
						},
						ProgrammingState: to.Ptr(armiotsecurity.ProgrammingStateNotProgrammingDevice),
						PurdueLevel:      to.Ptr(armiotsecurity.PurdueLevelProcessControl),
						RiskScore:        to.Ptr[int32](90),
						SchemaVersion:    to.Ptr("1"),
						Sensor: &armiotsecurity.Sensor{
							Name: to.Ptr("mySensor"),
							Site: to.Ptr("mySite"),
							Zone: to.Ptr("myZone"),
						},
					},
					SystemData: &armiotsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceList)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Devices/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_Get(t *testing.T) {
	// From example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Devices/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get device"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotsecurity.NewDevicesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"eastus", cred, &options)
	res, err := client.Get(ctx,
		"myGroup",
		"fa30e727-16e1-4e81-84f1-d26b9153d1b2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Devices/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotsecurity.DeviceModel{
			Name: to.Ptr("fa30e727-16e1-4e81-84f1-d26b9153d1b2"),
			Type: to.Ptr("Microsoft.IoTSecurity/locations/deviceGroups/devices"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.IoTSecurity/locations/eastus/deviceGroups/myGroup/devices/fa30e727-16e1-4e81-84f1-d26b9153d1b2"),
			Properties: &armiotsecurity.DeviceProperties{
				AuthorizedState:           to.Ptr(armiotsecurity.AuthorizedStateAuthorized),
				Criticality:               to.Ptr(armiotsecurity.CriticalityNormal),
				DeviceCategoryDisplayName: to.Ptr("OT"),
				DeviceCategoryID:          to.Ptr[int32](6),
				DeviceDataSource:          to.Ptr(armiotsecurity.DeviceDataSourceOtSensor),
				DeviceName:                to.Ptr("10.168.140.1"),
				DeviceStatus:              to.Ptr(armiotsecurity.DeviceStatusActive),
				DeviceSubTypeDisplayName:  to.Ptr("Historian"),
				DeviceSubTypeID:           to.Ptr[int32](2),
				DeviceTypeDisplayName:     to.Ptr("Industrial"),
				DeviceTypeID:              to.Ptr[int32](17),
				FirstSeen:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
				LastSeen:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
				LastUpdated:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
				Nics: []*armiotsecurity.Nic{
					{
						IPv4Address:  to.Ptr("10.168.140.1"),
						LastSeen:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-13T06:32:25Z"); return t }()),
						MacAddress:   to.Ptr("34-E1-2D-77-80-D0"),
						MacCertainty: to.Ptr(armiotsecurity.MacCertaintyCertain),
						Vlans: []*string{
							to.Ptr("name(1)->2"),
							to.Ptr("3"),
							to.Ptr("another_name(4)")},
					}},
				OnboardingStatus: to.Ptr(armiotsecurity.OnboardingStatusInsufficientInfo),
				OperatingSystem: &armiotsecurity.OperatingSystem{
					Platform: to.Ptr("Windows"),
					Version:  to.Ptr("10\\1604"),
				},
				ProgrammingState: to.Ptr(armiotsecurity.ProgrammingStateNotProgrammingDevice),
				PurdueLevel:      to.Ptr(armiotsecurity.PurdueLevelProcessControl),
				RiskScore:        to.Ptr[int32](90),
				SchemaVersion:    to.Ptr("1"),
				Sensor: &armiotsecurity.Sensor{
					Name: to.Ptr("mySensor"),
					Site: to.Ptr("mySite"),
					Zone: to.Ptr("myZone"),
				},
			},
			SystemData: &armiotsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armiotsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armiotsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceModel)
			t.Fatalf("Mock response is not equal to example response for example specification/iotsecurity/resource-manager/Microsoft.IoTSecurity/preview/2021-02-01-preview/examples/Devices/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
