//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// APIPortalCustomDomainsClientListPager provides operations for iterating over paged responses.
type APIPortalCustomDomainsClientListPager struct {
	client    *APIPortalCustomDomainsClient
	current   APIPortalCustomDomainsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, APIPortalCustomDomainsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *APIPortalCustomDomainsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIPortalCustomDomainResourceCollection.NextLink == nil || len(*p.current.APIPortalCustomDomainResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *APIPortalCustomDomainsClientListPager) NextPage(ctx context.Context) (APIPortalCustomDomainsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return APIPortalCustomDomainsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return APIPortalCustomDomainsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return APIPortalCustomDomainsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return APIPortalCustomDomainsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return APIPortalCustomDomainsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// APIPortalsClientListPager provides operations for iterating over paged responses.
type APIPortalsClientListPager struct {
	client    *APIPortalsClient
	current   APIPortalsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, APIPortalsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *APIPortalsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIPortalResourceCollection.NextLink == nil || len(*p.current.APIPortalResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *APIPortalsClientListPager) NextPage(ctx context.Context) (APIPortalsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return APIPortalsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return APIPortalsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return APIPortalsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return APIPortalsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return APIPortalsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AppsClientListPager provides operations for iterating over paged responses.
type AppsClientListPager struct {
	client    *AppsClient
	current   AppsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AppsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppResourceCollection.NextLink == nil || len(*p.current.AppResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AppsClientListPager) NextPage(ctx context.Context) (AppsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AppsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AppsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AppsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AppsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AppsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BindingsClientListPager provides operations for iterating over paged responses.
type BindingsClientListPager struct {
	client    *BindingsClient
	current   BindingsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BindingsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BindingsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BindingResourceCollection.NextLink == nil || len(*p.current.BindingResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BindingsClientListPager) NextPage(ctx context.Context) (BindingsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BindingsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BindingsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BindingsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BindingsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BindingsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BuildServiceAgentPoolClientListPager provides operations for iterating over paged responses.
type BuildServiceAgentPoolClientListPager struct {
	client    *BuildServiceAgentPoolClient
	current   BuildServiceAgentPoolClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BuildServiceAgentPoolClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BuildServiceAgentPoolClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BuildServiceAgentPoolResourceCollection.NextLink == nil || len(*p.current.BuildServiceAgentPoolResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BuildServiceAgentPoolClientListPager) NextPage(ctx context.Context) (BuildServiceAgentPoolClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BuildServiceAgentPoolClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BuildServiceAgentPoolClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BuildServiceAgentPoolClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BuildServiceAgentPoolClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BuildServiceAgentPoolClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BuildServiceBuilderClientListPager provides operations for iterating over paged responses.
type BuildServiceBuilderClientListPager struct {
	client    *BuildServiceBuilderClient
	current   BuildServiceBuilderClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BuildServiceBuilderClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BuildServiceBuilderClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BuilderResourceCollection.NextLink == nil || len(*p.current.BuilderResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BuildServiceBuilderClientListPager) NextPage(ctx context.Context) (BuildServiceBuilderClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BuildServiceBuilderClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BuildServiceBuilderClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BuildServiceBuilderClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BuildServiceBuilderClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BuildServiceBuilderClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BuildServiceClientListBuildResultsPager provides operations for iterating over paged responses.
type BuildServiceClientListBuildResultsPager struct {
	client    *BuildServiceClient
	current   BuildServiceClientListBuildResultsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BuildServiceClientListBuildResultsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BuildServiceClientListBuildResultsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BuildResultCollection.NextLink == nil || len(*p.current.BuildResultCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BuildServiceClientListBuildResultsPager) NextPage(ctx context.Context) (BuildServiceClientListBuildResultsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BuildServiceClientListBuildResultsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BuildServiceClientListBuildResultsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BuildServiceClientListBuildResultsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BuildServiceClientListBuildResultsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBuildResultsHandleResponse(resp)
	if err != nil {
		return BuildServiceClientListBuildResultsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BuildServiceClientListBuildServicesPager provides operations for iterating over paged responses.
type BuildServiceClientListBuildServicesPager struct {
	client    *BuildServiceClient
	current   BuildServiceClientListBuildServicesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BuildServiceClientListBuildServicesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BuildServiceClientListBuildServicesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BuildServiceCollection.NextLink == nil || len(*p.current.BuildServiceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BuildServiceClientListBuildServicesPager) NextPage(ctx context.Context) (BuildServiceClientListBuildServicesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BuildServiceClientListBuildServicesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BuildServiceClientListBuildServicesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BuildServiceClientListBuildServicesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BuildServiceClientListBuildServicesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBuildServicesHandleResponse(resp)
	if err != nil {
		return BuildServiceClientListBuildServicesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BuildServiceClientListBuildsPager provides operations for iterating over paged responses.
type BuildServiceClientListBuildsPager struct {
	client    *BuildServiceClient
	current   BuildServiceClientListBuildsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BuildServiceClientListBuildsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BuildServiceClientListBuildsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BuildCollection.NextLink == nil || len(*p.current.BuildCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BuildServiceClientListBuildsPager) NextPage(ctx context.Context) (BuildServiceClientListBuildsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BuildServiceClientListBuildsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BuildServiceClientListBuildsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BuildServiceClientListBuildsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BuildServiceClientListBuildsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBuildsHandleResponse(resp)
	if err != nil {
		return BuildServiceClientListBuildsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BuildpackBindingClientListPager provides operations for iterating over paged responses.
type BuildpackBindingClientListPager struct {
	client    *BuildpackBindingClient
	current   BuildpackBindingClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BuildpackBindingClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BuildpackBindingClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BuildpackBindingResourceCollection.NextLink == nil || len(*p.current.BuildpackBindingResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BuildpackBindingClientListPager) NextPage(ctx context.Context) (BuildpackBindingClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BuildpackBindingClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BuildpackBindingClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BuildpackBindingClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BuildpackBindingClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BuildpackBindingClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CertificatesClientListPager provides operations for iterating over paged responses.
type CertificatesClientListPager struct {
	client    *CertificatesClient
	current   CertificatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CertificatesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CertificatesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateResourceCollection.NextLink == nil || len(*p.current.CertificateResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CertificatesClientListPager) NextPage(ctx context.Context) (CertificatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CertificatesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CertificatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CertificatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CertificatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return CertificatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationServicesClientListPager provides operations for iterating over paged responses.
type ConfigurationServicesClientListPager struct {
	client    *ConfigurationServicesClient
	current   ConfigurationServicesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationServicesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationServicesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationServiceResourceCollection.NextLink == nil || len(*p.current.ConfigurationServiceResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConfigurationServicesClientListPager) NextPage(ctx context.Context) (ConfigurationServicesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConfigurationServicesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationServicesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationServicesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationServicesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationServicesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CustomDomainsClientListPager provides operations for iterating over paged responses.
type CustomDomainsClientListPager struct {
	client    *CustomDomainsClient
	current   CustomDomainsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomDomainsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomDomainsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomDomainResourceCollection.NextLink == nil || len(*p.current.CustomDomainResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomDomainsClientListPager) NextPage(ctx context.Context) (CustomDomainsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomDomainsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomDomainsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomDomainsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomDomainsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return CustomDomainsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DeploymentsClientListForClusterPager provides operations for iterating over paged responses.
type DeploymentsClientListForClusterPager struct {
	client    *DeploymentsClient
	current   DeploymentsClientListForClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DeploymentsClientListForClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DeploymentsClientListForClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeploymentResourceCollection.NextLink == nil || len(*p.current.DeploymentResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DeploymentsClientListForClusterPager) NextPage(ctx context.Context) (DeploymentsClientListForClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DeploymentsClientListForClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DeploymentsClientListForClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DeploymentsClientListForClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DeploymentsClientListForClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listForClusterHandleResponse(resp)
	if err != nil {
		return DeploymentsClientListForClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DeploymentsClientListPager provides operations for iterating over paged responses.
type DeploymentsClientListPager struct {
	client    *DeploymentsClient
	current   DeploymentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DeploymentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DeploymentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeploymentResourceCollection.NextLink == nil || len(*p.current.DeploymentResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DeploymentsClientListPager) NextPage(ctx context.Context) (DeploymentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DeploymentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DeploymentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DeploymentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DeploymentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DeploymentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// GatewayCustomDomainsClientListPager provides operations for iterating over paged responses.
type GatewayCustomDomainsClientListPager struct {
	client    *GatewayCustomDomainsClient
	current   GatewayCustomDomainsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, GatewayCustomDomainsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *GatewayCustomDomainsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GatewayCustomDomainResourceCollection.NextLink == nil || len(*p.current.GatewayCustomDomainResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *GatewayCustomDomainsClientListPager) NextPage(ctx context.Context) (GatewayCustomDomainsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return GatewayCustomDomainsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return GatewayCustomDomainsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return GatewayCustomDomainsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return GatewayCustomDomainsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return GatewayCustomDomainsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// GatewayRouteConfigsClientListPager provides operations for iterating over paged responses.
type GatewayRouteConfigsClientListPager struct {
	client    *GatewayRouteConfigsClient
	current   GatewayRouteConfigsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, GatewayRouteConfigsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *GatewayRouteConfigsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GatewayRouteConfigResourceCollection.NextLink == nil || len(*p.current.GatewayRouteConfigResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *GatewayRouteConfigsClientListPager) NextPage(ctx context.Context) (GatewayRouteConfigsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return GatewayRouteConfigsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return GatewayRouteConfigsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return GatewayRouteConfigsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return GatewayRouteConfigsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return GatewayRouteConfigsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// GatewaysClientListPager provides operations for iterating over paged responses.
type GatewaysClientListPager struct {
	client    *GatewaysClient
	current   GatewaysClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, GatewaysClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *GatewaysClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GatewayResourceCollection.NextLink == nil || len(*p.current.GatewayResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *GatewaysClientListPager) NextPage(ctx context.Context) (GatewaysClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return GatewaysClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return GatewaysClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return GatewaysClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return GatewaysClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return GatewaysClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableOperations.NextLink == nil || len(*p.current.AvailableOperations.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SKUsClientListPager provides operations for iterating over paged responses.
type SKUsClientListPager struct {
	client    *SKUsClient
	current   SKUsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SKUsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceSKUCollection.NextLink == nil || len(*p.current.ResourceSKUCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SKUsClientListPager) NextPage(ctx context.Context) (SKUsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SKUsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SKUsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SKUsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SKUsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SKUsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServiceRegistriesClientListPager provides operations for iterating over paged responses.
type ServiceRegistriesClientListPager struct {
	client    *ServiceRegistriesClient
	current   ServiceRegistriesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServiceRegistriesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServiceRegistriesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceRegistryResourceCollection.NextLink == nil || len(*p.current.ServiceRegistryResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServiceRegistriesClientListPager) NextPage(ctx context.Context) (ServiceRegistriesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServiceRegistriesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServiceRegistriesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServiceRegistriesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServiceRegistriesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServiceRegistriesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListBySubscriptionPager provides operations for iterating over paged responses.
type ServicesClientListBySubscriptionPager struct {
	client    *ServicesClient
	current   ServicesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceResourceList.NextLink == nil || len(*p.current.ServiceResourceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListBySubscriptionPager) NextPage(ctx context.Context) (ServicesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ServicesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListPager provides operations for iterating over paged responses.
type ServicesClientListPager struct {
	client    *ServicesClient
	current   ServicesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceResourceList.NextLink == nil || len(*p.current.ServiceResourceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListPager) NextPage(ctx context.Context) (ServicesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StoragesClientListPager provides operations for iterating over paged responses.
type StoragesClientListPager struct {
	client    *StoragesClient
	current   StoragesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StoragesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StoragesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageResourceCollection.NextLink == nil || len(*p.current.StorageResourceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StoragesClientListPager) NextPage(ctx context.Context) (StoragesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StoragesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StoragesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StoragesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StoragesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return StoragesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
