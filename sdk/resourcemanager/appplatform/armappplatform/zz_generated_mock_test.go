//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestServices_Get(t *testing.T) {
	// From example Services_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		&ServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceResource.ID == nil {
		t.Fatal("ServiceResource.ID should not be nil!")
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example Services_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		ServiceResource{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &ClusterResourceProperties{},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&ServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceResource.ID == nil {
		t.Fatal("ServiceResource.ID should not be nil!")
	}

	// From example Services_CreateOrUpdate_VNetInjection
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		ServiceResource{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &ClusterResourceProperties{
				NetworkProfile: &NetworkProfile{
					AppNetworkResourceGroup:            to.StringPtr("my-app-network-rg"),
					AppSubnetID:                        to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
					ServiceCidr:                        to.StringPtr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
					ServiceRuntimeNetworkResourceGroup: to.StringPtr("my-service-runtime-network-rg"),
					ServiceRuntimeSubnetID:             to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&ServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceResource.ID == nil {
		t.Fatal("ServiceResource.ID should not be nil!")
	}
}

func TestServices_Delete(t *testing.T) {
	// From example Services_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		&ServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example Services_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		ServiceResource{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Properties: &ClusterResourceProperties{},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&ServicesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceResource.ID == nil {
		t.Fatal("ServiceResource.ID should not be nil!")
	}
}

func TestServices_ListTestKeys(t *testing.T) {
	// From example Services_ListTestKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListTestKeys(ctx,
		"myResourceGroup",
		"myservice",
		&ServicesListTestKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_RegenerateTestKey(t *testing.T) {
	// From example Services_RegenerateTestKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.RegenerateTestKey(ctx,
		"myResourceGroup",
		"myservice",
		RegenerateTestKeyRequestPayload{
			KeyType: TestKeyTypePrimary.ToPtr(),
		},
		&ServicesRegenerateTestKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_DisableTestEndpoint(t *testing.T) {
	// From example Services_DisableTestEndpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.DisableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		&ServicesDisableTestEndpointOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_EnableTestEndpoint(t *testing.T) {
	// From example Services_EnableTestEndpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.EnableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		&ServicesEnableTestEndpointOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example Services_CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.CheckNameAvailability(ctx,
		"eastus",
		NameAvailabilityParameters{
			Name: to.StringPtr("myservice"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring"),
		},
		&ServicesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_ListBySubscription(t *testing.T) {
	// From example Services_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListBySubscription(&ServicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceResource.ID should not be nil!")
			}
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example Services_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		&ServicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceResource.ID should not be nil!")
			}
		}
	}
}

func TestConfigServers_Get(t *testing.T) {
	// From example ConfigServers_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigServersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		&ConfigServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigServerResource.ID == nil {
		t.Fatal("ConfigServerResource.ID should not be nil!")
	}
}

func TestConfigServers_UpdatePut(t *testing.T) {
	// From example ConfigServers_UpdatePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigServersClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		ConfigServerResource{
			Properties: &ConfigServerProperties{
				ConfigServer: &ConfigServerSettings{
					GitProperty: &ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		&ConfigServersBeginUpdatePutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigServerResource.ID == nil {
		t.Fatal("ConfigServerResource.ID should not be nil!")
	}
}

func TestConfigServers_UpdatePatch(t *testing.T) {
	// From example ConfigServers_UpdatePatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigServersClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		ConfigServerResource{
			Properties: &ConfigServerProperties{
				ConfigServer: &ConfigServerSettings{
					GitProperty: &ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		&ConfigServersBeginUpdatePatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigServerResource.ID == nil {
		t.Fatal("ConfigServerResource.ID should not be nil!")
	}
}

func TestConfigServers_Validate(t *testing.T) {
	// From example ConfigServers_Validate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigServersClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginValidate(ctx,
		"myResourceGroup",
		"myservice",
		ConfigServerSettings{
			GitProperty: &ConfigServerGitProperty{
				Label: to.StringPtr("master"),
				SearchPaths: []*string{
					to.StringPtr("/")},
				URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
			},
		},
		&ConfigServersBeginValidateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestMonitoringSettings_Get(t *testing.T) {
	// From example MonitoringSettings_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringSettingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		&MonitoringSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringSettingResource.ID == nil {
		t.Fatal("MonitoringSettingResource.ID should not be nil!")
	}
}

func TestMonitoringSettings_UpdatePut(t *testing.T) {
	// From example MonitoringSettings_UpdatePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringSettingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		MonitoringSettingResource{
			Properties: &MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				TraceEnabled:                  to.BoolPtr(true),
			},
		},
		&MonitoringSettingsBeginUpdatePutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringSettingResource.ID == nil {
		t.Fatal("MonitoringSettingResource.ID should not be nil!")
	}
}

func TestMonitoringSettings_UpdatePatch(t *testing.T) {
	// From example MonitoringSettings_UpdatePatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringSettingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		MonitoringSettingResource{
			Properties: &MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				TraceEnabled:                  to.BoolPtr(true),
			},
		},
		&MonitoringSettingsBeginUpdatePatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringSettingResource.ID == nil {
		t.Fatal("MonitoringSettingResource.ID should not be nil!")
	}
}

func TestApps_Get(t *testing.T) {
	// From example Apps_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&AppsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AppResource.ID == nil {
		t.Fatal("AppResource.ID should not be nil!")
	}
}

func TestApps_CreateOrUpdate(t *testing.T) {
	// From example Apps_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		AppResource{
			Identity: &ManagedIdentityProperties{},
			Location: to.StringPtr("eastus"),
			Properties: &AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				Public: to.BoolPtr(true),
				TemporaryDisk: &TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
			},
		},
		&AppsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AppResource.ID == nil {
		t.Fatal("AppResource.ID should not be nil!")
	}
}

func TestApps_Delete(t *testing.T) {
	// From example Apps_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&AppsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestApps_Update(t *testing.T) {
	// From example Apps_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		AppResource{
			Identity: &ManagedIdentityProperties{
				Type:        ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("null"),
				TenantID:    to.StringPtr("null"),
			},
			Location: to.StringPtr("eastus"),
			Properties: &AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				Public: to.BoolPtr(true),
				TemporaryDisk: &TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
			},
		},
		&AppsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AppResource.ID == nil {
		t.Fatal("AppResource.ID should not be nil!")
	}
}

func TestApps_List(t *testing.T) {
	// From example Apps_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myservice",
		&AppsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AppResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AppResource.ID should not be nil!")
			}
		}
	}
}

func TestApps_GetResourceUploadUrl(t *testing.T) {
	// From example Apps_GetResourceUploadUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.GetResourceUploadURL(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&AppsGetResourceUploadURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApps_ValidateDomain(t *testing.T) {
	// From example Apps_ValidateDomain
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ValidateDomain(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		CustomDomainValidatePayload{
			Name: to.StringPtr("mydomain.io"),
		},
		&AppsValidateDomainOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBindings_Get(t *testing.T) {
	// From example Bindings_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBindingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		&BindingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BindingResource.ID == nil {
		t.Fatal("BindingResource.ID should not be nil!")
	}
}

func TestBindings_CreateOrUpdate(t *testing.T) {
	// From example Bindings_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBindingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		BindingResource{
			Properties: &BindingResourceProperties{
				BindingParameters: map[string]map[string]interface{}{
					"apiType": map[string]interface{}{
						"0": "S",
						"1": "Q",
						"2": "L",
					},
					"databaseName": map[string]interface{}{
						"0": "d",
						"1": "b",
						"2": "1",
					},
				},
				CreatedAt:           to.StringPtr("null"),
				GeneratedProperties: to.StringPtr("null"),
				Key:                 to.StringPtr("xxxx"),
				ResourceID:          to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				UpdatedAt:           to.StringPtr("null"),
			},
		},
		&BindingsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BindingResource.ID == nil {
		t.Fatal("BindingResource.ID should not be nil!")
	}
}

func TestBindings_Delete(t *testing.T) {
	// From example Bindings_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBindingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		&BindingsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBindings_Update(t *testing.T) {
	// From example Bindings_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBindingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		BindingResource{
			Properties: &BindingResourceProperties{
				BindingParameters: map[string]map[string]interface{}{
					"apiType": map[string]interface{}{
						"0": "S",
						"1": "Q",
						"2": "L",
					},
					"databaseName": map[string]interface{}{
						"0": "d",
						"1": "b",
						"2": "1",
					},
				},
				CreatedAt:           to.StringPtr("null"),
				GeneratedProperties: to.StringPtr("null"),
				Key:                 to.StringPtr("xxxx"),
				UpdatedAt:           to.StringPtr("null"),
			},
		},
		&BindingsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BindingResource.ID == nil {
		t.Fatal("BindingResource.ID should not be nil!")
	}
}

func TestBindings_List(t *testing.T) {
	// From example Bindings_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBindingsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		&BindingsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BindingResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BindingResource.ID should not be nil!")
			}
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example Certificates_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		&CertificatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateResource.ID == nil {
		t.Fatal("CertificateResource.ID should not be nil!")
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example Certificates_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		CertificateResource{
			Properties: &CertificateProperties{
				CertVersion:      to.StringPtr("08a219d06d874795a96db47e06fbb01e"),
				KeyVaultCertName: to.StringPtr("mycert"),
				VaultURI:         to.StringPtr("https://myvault.vault.azure.net"),
			},
		},
		&CertificatesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateResource.ID == nil {
		t.Fatal("CertificateResource.ID should not be nil!")
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example Certificates_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		&CertificatesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificates_List(t *testing.T) {
	// From example Certificates_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myService",
		&CertificatesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CertificateResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CertificateResource.ID should not be nil!")
			}
		}
	}
}

func TestCustomDomains_Get(t *testing.T) {
	// From example CustomDomains_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomDomainsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		&CustomDomainsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomDomainResource.ID == nil {
		t.Fatal("CustomDomainResource.ID should not be nil!")
	}
}

func TestCustomDomains_CreateOrUpdate(t *testing.T) {
	// From example CustomDomains_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomDomainsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		CustomDomainResource{
			Properties: &CustomDomainProperties{
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		&CustomDomainsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomDomainResource.ID == nil {
		t.Fatal("CustomDomainResource.ID should not be nil!")
	}
}

func TestCustomDomains_Delete(t *testing.T) {
	// From example CustomDomains_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomDomainsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		&CustomDomainsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCustomDomains_Update(t *testing.T) {
	// From example CustomDomains_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomDomainsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		CustomDomainResource{
			Properties: &CustomDomainProperties{
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		&CustomDomainsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomDomainResource.ID == nil {
		t.Fatal("CustomDomainResource.ID should not be nil!")
	}
}

func TestCustomDomains_List(t *testing.T) {
	// From example CustomDomains_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomDomainsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		&CustomDomainsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CustomDomainResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CustomDomainResource.ID should not be nil!")
			}
		}
	}
}

func TestDeployments_Get(t *testing.T) {
	// From example Deployments_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeploymentResource.ID == nil {
		t.Fatal("DeploymentResource.ID should not be nil!")
	}

	// From example Deployments_Get_CustomContainer
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeploymentResource.ID == nil {
		t.Fatal("DeploymentResource.ID should not be nil!")
	}
}

func TestDeployments_CreateOrUpdate(t *testing.T) {
	// From example Deployments_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		DeploymentResource{
			Properties: &DeploymentResourceProperties{
				DeploymentSettings: &DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions: to.StringPtr("-Xms1G -Xmx3G"),
					ResourceRequests: &ResourceRequests{
						CPU:    to.StringPtr("1000m"),
						Memory: to.StringPtr("3Gi"),
					},
					RuntimeVersion: RuntimeVersionJava8.ToPtr(),
				},
				Instances: []*DeploymentInstance{},
				Source: &UserSourceInfo{
					Type:             UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
			},
		},
		&DeploymentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DeploymentResource.ID == nil {
		t.Fatal("DeploymentResource.ID should not be nil!")
	}

	// From example Deployments_CreateOrUpdate_CustomContainer
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		DeploymentResource{
			Properties: &DeploymentResourceProperties{
				DeploymentSettings: &DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					ResourceRequests: &ResourceRequests{
						CPU:    to.StringPtr("1000m"),
						Memory: to.StringPtr("3Gi"),
					},
				},
				Instances: []*DeploymentInstance{},
				Source: &UserSourceInfo{
					Type: UserSourceTypeContainer.ToPtr(),
					CustomContainer: &CustomContainer{
						Args: []*string{
							to.StringPtr("-c"),
							to.StringPtr("while true; do echo hello; sleep 10;done")},
						Command: []*string{
							to.StringPtr("/bin/sh")},
						ContainerImage: to.StringPtr("myContainerImage:v1"),
						ImageRegistryCredential: &ImageRegistryCredential{
							Password: to.StringPtr("myPassword"),
							Username: to.StringPtr("myUsername"),
						},
						Server: to.StringPtr("myacr.azurecr.io"),
					},
				},
			},
		},
		&DeploymentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DeploymentResource.ID == nil {
		t.Fatal("DeploymentResource.ID should not be nil!")
	}
}

func TestDeployments_Delete(t *testing.T) {
	// From example Deployments_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeployments_Update(t *testing.T) {
	// From example Deployments_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		DeploymentResource{
			Properties: &DeploymentResourceProperties{
				Instances: []*DeploymentInstance{},
				Source: &UserSourceInfo{
					Type:             UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
			},
		},
		&DeploymentsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DeploymentResource.ID == nil {
		t.Fatal("DeploymentResource.ID should not be nil!")
	}

	// From example Deployments_Update_CustomContainer
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		DeploymentResource{
			Properties: &DeploymentResourceProperties{
				Instances: []*DeploymentInstance{},
				Source: &UserSourceInfo{
					Type: UserSourceTypeContainer.ToPtr(),
					CustomContainer: &CustomContainer{
						Args: []*string{
							to.StringPtr("-c"),
							to.StringPtr("while true; do echo hello; sleep 10;done")},
						Command: []*string{
							to.StringPtr("/bin/sh")},
						ContainerImage: to.StringPtr("myNewContainerImage:v1"),
						ImageRegistryCredential: &ImageRegistryCredential{
							Password: to.StringPtr("<myNewPassword>"),
							Username: to.StringPtr("myNewUsername"),
						},
						Server: to.StringPtr("mynewacr.azurecr.io"),
					},
				},
			},
		},
		&DeploymentsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DeploymentResource.ID == nil {
		t.Fatal("DeploymentResource.ID should not be nil!")
	}
}

func TestDeployments_List(t *testing.T) {
	// From example Deployments_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		&DeploymentsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeploymentResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeploymentResource.ID should not be nil!")
			}
		}
	}
}

func TestDeployments_ListForCluster(t *testing.T) {
	// From example Deployments_ListForCluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListForCluster("myResourceGroup",
		"myservice",
		&DeploymentsListForClusterOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeploymentResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeploymentResource.ID should not be nil!")
			}
		}
	}
}

func TestDeployments_Start(t *testing.T) {
	// From example Deployments_Start
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeployments_Stop(t *testing.T) {
	// From example Deployments_Stop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeployments_Restart(t *testing.T) {
	// From example Deployments_Restart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeployments_GetLogFileUrl(t *testing.T) {
	// From example Deployments_GetLogFileUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeploymentsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.GetLogFileURL(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&DeploymentsGetLogFileURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestRuntimeVersions_ListRuntimeVersions(t *testing.T) {
	// From example RuntimeVersions_ListRuntimeVersions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRuntimeVersionsClient(con)
	_, err := client.ListRuntimeVersions(ctx,
		&RuntimeVersionsListRuntimeVersionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSkus_List(t *testing.T) {
	// From example Skus_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSKUsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&SKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
